
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000185c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001a00  80001a00  00001e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80001e00  80001e00  00002200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80001e84  80001e84  00002284  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80001e88  00002408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002394  00002914  2**0
                  ALLOC
  9 .bss          00000280  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000d868  00000798  00000798  00000000  2**0
                  ALLOC
 11 .comment      000000a0  00000000  00000000  00002914  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000510  00000000  00000000  000029b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 000008dc  00000000  00000000  00002ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000bec9  00000000  00000000  000037a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00001c63  00000000  00000000  0000f66d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003b74  00000000  00000000  000112d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000af0  00000000  00000000  00014e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001a80  00000000  00000000  00015934  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000016e6  00000000  00000000  000173b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00454e30  00000000  00000000  00018a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 00000478  00000000  00000000  0046d8ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	10 bc       	st.h	r8++,r12

Disassembly of section .text:

80000008 <usart_options>:
80000008:	00 00 e1 00 08 04 00 00 00 00 00 00 74 61 73 6b     ............task
80000018:	31 0d 0a 00 74 61 73 6b 31 20 77 6f 6b 65 6e 20     1...task1 woken 
80000028:	75 70 0d 0a 00 00 00 00 74 61 73 6b 31 20 77 6f     up......task1 wo
80000038:	6b 65 6e 20 75 70 20 61 67 61 69 6e 21 0d 0a 00     ken up again!...
80000048:	74 61 73 6b 32 0d 0a 00 74 61 73 6b 32 20 77 6f     task2...task2 wo
80000058:	6b 65 6e 20 75 70 0d 0a 00 00 00 00 74 61 73 6b     ken up......task
80000068:	32 20 77 6f 6b 65 6e 20 75 70 20 61 67 61 69 6e     2 woken up again
80000078:	21 0d 0a 00 74 73 6b 31 00 00 00 00 74 73 6b 32     !...tsk1....tsk2
80000088:	00 00 00 00                                         ....

8000008c <task1>:
/*************************************************************
 * Task1
 * Blink LED0
 ************************************************************/
void task1(void)
{	
8000008c:	eb cd 40 80 	pushm	r7,lr
80000090:	1a 97       	mov	r7,sp
	while(1) {
		usartWriteLine(USART, "task1\r\n");		
80000092:	48 fb       	lddpc	r11,800000cc <task1+0x40>
80000094:	fe 7c 14 00 	mov	r12,-60416
80000098:	f0 1f 00 0e 	mcall	800000d0 <task1+0x44>
		ROSA_delay(250);
8000009c:	e0 6a 00 fa 	mov	r10,250
800000a0:	30 0b       	mov	r11,0
800000a2:	f0 1f 00 0d 	mcall	800000d4 <task1+0x48>
		usartWriteLine(USART, "task1 woken up\r\n");
800000a6:	48 db       	lddpc	r11,800000d8 <task1+0x4c>
800000a8:	fe 7c 14 00 	mov	r12,-60416
800000ac:	f0 1f 00 09 	mcall	800000d0 <task1+0x44>
		ROSA_delay(250);
800000b0:	e0 6a 00 fa 	mov	r10,250
800000b4:	30 0b       	mov	r11,0
800000b6:	f0 1f 00 08 	mcall	800000d4 <task1+0x48>
		usartWriteLine(USART, "task1 woken up again!\r\n");
800000ba:	48 9b       	lddpc	r11,800000dc <task1+0x50>
800000bc:	fe 7c 14 00 	mov	r12,-60416
800000c0:	f0 1f 00 04 	mcall	800000d0 <task1+0x44>
		ROSA_yield();
800000c4:	f0 1f 00 07 	mcall	800000e0 <task1+0x54>
	}
800000c8:	ce 5b       	rjmp	80000092 <task1+0x6>
800000ca:	00 00       	add	r0,r0
800000cc:	80 00       	ld.sh	r0,r0[0x0]
800000ce:	00 14       	sub	r4,r0
800000d0:	80 00       	ld.sh	r0,r0[0x0]
800000d2:	0f b0       	ld.ub	r0,r7[0x3]
800000d4:	80 00       	ld.sh	r0,r0[0x0]
800000d6:	06 c0       	st.b	r3++,r0
800000d8:	80 00       	ld.sh	r0,r0[0x0]
800000da:	00 1c       	sub	r12,r0
800000dc:	80 00       	ld.sh	r0,r0[0x0]
800000de:	00 30       	cp.w	r0,r0
800000e0:	80 00       	ld.sh	r0,r0[0x0]
800000e2:	08 96       	mov	r6,r4

800000e4 <task2>:
/*************************************************************
 * Task2
 * Blink LED1
 ************************************************************/
void task2(void)
{
800000e4:	eb cd 40 80 	pushm	r7,lr
800000e8:	1a 97       	mov	r7,sp
	while(1) {
		usartWriteLine(USART, "task2\r\n");
800000ea:	48 fb       	lddpc	r11,80000124 <task2+0x40>
800000ec:	fe 7c 14 00 	mov	r12,-60416
800000f0:	f0 1f 00 0e 	mcall	80000128 <task2+0x44>
		ROSA_delay(250);
800000f4:	e0 6a 00 fa 	mov	r10,250
800000f8:	30 0b       	mov	r11,0
800000fa:	f0 1f 00 0d 	mcall	8000012c <task2+0x48>
		usartWriteLine(USART, "task2 woken up\r\n");
800000fe:	48 db       	lddpc	r11,80000130 <task2+0x4c>
80000100:	fe 7c 14 00 	mov	r12,-60416
80000104:	f0 1f 00 09 	mcall	80000128 <task2+0x44>
		ROSA_delay(250);
80000108:	e0 6a 00 fa 	mov	r10,250
8000010c:	30 0b       	mov	r11,0
8000010e:	f0 1f 00 08 	mcall	8000012c <task2+0x48>
		usartWriteLine(USART, "task2 woken up again!\r\n");
80000112:	48 9b       	lddpc	r11,80000134 <task2+0x50>
80000114:	fe 7c 14 00 	mov	r12,-60416
80000118:	f0 1f 00 04 	mcall	80000128 <task2+0x44>
		ROSA_yield();	
8000011c:	f0 1f 00 07 	mcall	80000138 <task2+0x54>
	}
80000120:	ce 5b       	rjmp	800000ea <task2+0x6>
80000122:	00 00       	add	r0,r0
80000124:	80 00       	ld.sh	r0,r0[0x0]
80000126:	00 48       	or	r8,r0
80000128:	80 00       	ld.sh	r0,r0[0x0]
8000012a:	0f b0       	ld.ub	r0,r7[0x3]
8000012c:	80 00       	ld.sh	r0,r0[0x0]
8000012e:	06 c0       	st.b	r3++,r0
80000130:	80 00       	ld.sh	r0,r0[0x0]
80000132:	00 50       	eor	r0,r0
80000134:	80 00       	ld.sh	r0,r0[0x0]
80000136:	00 64       	and	r4,r0
80000138:	80 00       	ld.sh	r0,r0[0x0]
8000013a:	08 96       	mov	r6,r4

8000013c <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
8000013c:	eb cd 40 80 	pushm	r7,lr
80000140:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
80000142:	f0 1f 00 0b 	mcall	8000016c <main+0x30>
	
	//Create tasks and install them into the ROSA kernel
	ROSA_taskCreate(&t1_tcb, "tsk1", task1, T1_STACK_SIZE, 2);
80000146:	30 28       	mov	r8,2
80000148:	e0 69 01 00 	mov	r9,256
8000014c:	48 9a       	lddpc	r10,80000170 <main+0x34>
8000014e:	48 ab       	lddpc	r11,80000174 <main+0x38>
80000150:	48 ac       	lddpc	r12,80000178 <main+0x3c>
80000152:	f0 1f 00 0b 	mcall	8000017c <main+0x40>
	ROSA_taskCreate(&t2_tcb, "tsk2", task2, T2_STACK_SIZE, 1);
80000156:	30 18       	mov	r8,1
80000158:	e0 69 01 00 	mov	r9,256
8000015c:	48 9a       	lddpc	r10,80000180 <main+0x44>
8000015e:	48 ab       	lddpc	r11,80000184 <main+0x48>
80000160:	48 ac       	lddpc	r12,80000188 <main+0x4c>
80000162:	f0 1f 00 07 	mcall	8000017c <main+0x40>

	ROSA_startScheduler();
80000166:	f0 1f 00 0a 	mcall	8000018c <main+0x50>

	/* Execution will never return here */
	while(1);
8000016a:	c0 08       	rjmp	8000016a <main+0x2e>
8000016c:	80 00       	ld.sh	r0,r0[0x0]
8000016e:	04 24       	rsub	r4,r2
80000170:	80 00       	ld.sh	r0,r0[0x0]
80000172:	00 8c       	andn	r12,r0
80000174:	80 00       	ld.sh	r0,r0[0x0]
80000176:	00 7c       	tst	r12,r0
80000178:	00 00       	add	r0,r0
8000017a:	06 54       	eor	r4,r3
8000017c:	80 00       	ld.sh	r0,r0[0x0]
8000017e:	05 b0       	ld.ub	r0,r2[0x3]
80000180:	80 00       	ld.sh	r0,r0[0x0]
80000182:	00 e4       	st.h	--r0,r4
80000184:	80 00       	ld.sh	r0,r0[0x0]
80000186:	00 84       	andn	r4,r0
80000188:	00 00       	add	r0,r0
8000018a:	06 50       	eor	r0,r3
8000018c:	80 00       	ld.sh	r0,r0[0x0]
8000018e:	09 00       	ld.w	r0,r4++

80000190 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
80000190:	eb cd 40 80 	pushm	r7,lr
80000194:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
80000196:	f0 1f 00 05 	mcall	800001a8 <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
8000019a:	f0 1f 00 05 	mcall	800001ac <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it
8000019e:	f0 1f 00 05 	mcall	800001b0 <ROSA_yieldFromISR+0x20>
}
800001a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800001a6:	00 00       	add	r0,r0
800001a8:	80 00       	ld.sh	r0,r0[0x0]
800001aa:	1b 7e       	ld.ub	lr,--sp
800001ac:	80 00       	ld.sh	r0,r0[0x0]
800001ae:	08 b4       	st.h	r4++,r4
800001b0:	80 00       	ld.sh	r0,r0[0x0]
800001b2:	1b b8       	ld.ub	r8,sp[0x3]

800001b4 <usart_options>:
800001b4:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
800001c4:	00 00 00 00 64 6c 61 79 00 00 00 00                 ....dlay....

800001d0 <idle>:

/** @fn void idle(void)
	@brief Idle task body.
*/
void idle(void)
{
800001d0:	eb cd 40 80 	pushm	r7,lr
800001d4:	1a 97       	mov	r7,sp
	while(1)
	{
		//usartWriteLine(USART, "idle\n");
	}
800001d6:	c0 08       	rjmp	800001d6 <idle+0x6>

800001d8 <ROSA_tcbInstall>:
 * Comment:
 * 	Install the TCB into the TCBLIST.
 *
 **********************************************************/
void ROSA_tcbInstall(tcb * tcbTask)
{
800001d8:	eb cd 40 80 	pushm	r7,lr
800001dc:	1a 97       	mov	r7,sp
800001de:	20 1d       	sub	sp,4
800001e0:	ef 4c ff fc 	st.w	r7[-4],r12
	/* Is this the first tcb installed? */
	if(TCBLIST == NULL) {
800001e4:	49 38       	lddpc	r8,80000230 <ROSA_tcbInstall+0x58>
800001e6:	70 08       	ld.w	r8,r8[0x0]
800001e8:	58 08       	cp.w	r8,0
800001ea:	c1 01       	brne	8000020a <ROSA_tcbInstall+0x32>
		TCBLIST = tcbTask;
800001ec:	49 18       	lddpc	r8,80000230 <ROSA_tcbInstall+0x58>
800001ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
800001f2:	91 09       	st.w	r8[0x0],r9
		TCBLIST->nexttcb = tcbTask;			//Install the first tcb
800001f4:	48 f8       	lddpc	r8,80000230 <ROSA_tcbInstall+0x58>
800001f6:	70 08       	ld.w	r8,r8[0x0]
800001f8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800001fc:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
800001fe:	48 d8       	lddpc	r8,80000230 <ROSA_tcbInstall+0x58>
80000200:	70 09       	ld.w	r9,r8[0x0]
80000202:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000206:	91 09       	st.w	r8[0x0],r9
80000208:	c1 08       	rjmp	80000228 <ROSA_tcbInstall+0x50>
	}
	else {
		tcbTask->nexttcb = TCBLIST->nexttcb;
8000020a:	48 a8       	lddpc	r8,80000230 <ROSA_tcbInstall+0x58>
8000020c:	70 08       	ld.w	r8,r8[0x0]
8000020e:	70 09       	ld.w	r9,r8[0x0]
80000210:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000214:	91 09       	st.w	r8[0x0],r9
		TCBLIST->nexttcb = tcbTask;
80000216:	48 78       	lddpc	r8,80000230 <ROSA_tcbInstall+0x58>
80000218:	70 08       	ld.w	r8,r8[0x0]
8000021a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000021e:	91 09       	st.w	r8[0x0],r9
		TCBLIST = tcbTask;
80000220:	48 48       	lddpc	r8,80000230 <ROSA_tcbInstall+0x58>
80000222:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000226:	91 09       	st.w	r8[0x0],r9
	}
}
80000228:	2f fd       	sub	sp,-4
8000022a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000022e:	00 00       	add	r0,r0
80000230:	00 00       	add	r0,r0
80000232:	06 5c       	eor	r12,r3

80000234 <ROSA_tcbUninstall>:

void ROSA_tcbUninstall(tcb * tcbTask)
{
80000234:	eb cd 40 80 	pushm	r7,lr
80000238:	1a 97       	mov	r7,sp
8000023a:	20 1d       	sub	sp,4
8000023c:	ef 4c ff fc 	st.w	r7[-4],r12
	while (TCBLIST->nexttcb != tcbTask)
80000240:	c0 68       	rjmp	8000024c <ROSA_tcbUninstall+0x18>
	TCBLIST = TCBLIST->nexttcb;
80000242:	49 08       	lddpc	r8,80000280 <ROSA_tcbUninstall+0x4c>
80000244:	70 08       	ld.w	r8,r8[0x0]
80000246:	70 09       	ld.w	r9,r8[0x0]
80000248:	48 e8       	lddpc	r8,80000280 <ROSA_tcbUninstall+0x4c>
8000024a:	91 09       	st.w	r8[0x0],r9
	}
}

void ROSA_tcbUninstall(tcb * tcbTask)
{
	while (TCBLIST->nexttcb != tcbTask)
8000024c:	48 d8       	lddpc	r8,80000280 <ROSA_tcbUninstall+0x4c>
8000024e:	70 08       	ld.w	r8,r8[0x0]
80000250:	70 09       	ld.w	r9,r8[0x0]
80000252:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000256:	10 39       	cp.w	r9,r8
80000258:	cf 51       	brne	80000242 <ROSA_tcbUninstall+0xe>
	TCBLIST = TCBLIST->nexttcb;
	
	TCBLIST->nexttcb = tcbTask->nexttcb;
8000025a:	48 a8       	lddpc	r8,80000280 <ROSA_tcbUninstall+0x4c>
8000025c:	70 08       	ld.w	r8,r8[0x0]
8000025e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000262:	72 09       	ld.w	r9,r9[0x0]
80000264:	91 09       	st.w	r8[0x0],r9
	tcbTask->nexttcb = NULL;
80000266:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000026a:	30 09       	mov	r9,0
8000026c:	91 09       	st.w	r8[0x0],r9
	TCBLIST = TCBLIST->nexttcb;
8000026e:	48 58       	lddpc	r8,80000280 <ROSA_tcbUninstall+0x4c>
80000270:	70 08       	ld.w	r8,r8[0x0]
80000272:	70 09       	ld.w	r9,r8[0x0]
80000274:	48 38       	lddpc	r8,80000280 <ROSA_tcbUninstall+0x4c>
80000276:	91 09       	st.w	r8[0x0],r9
}
80000278:	2f fd       	sub	sp,-4
8000027a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000027e:	00 00       	add	r0,r0
80000280:	00 00       	add	r0,r0
80000282:	06 5c       	eor	r12,r3

80000284 <readyQueueSearch>:
/** @fn int readyQueueSearch(void)
	@brief Search for the first non-empty highest priority queue.
	@return Pointer to the last tcb in the queue (in other words - PA[i]).
*/
tcb * readyQueueSearch(void)
{
80000284:	eb cd 40 80 	pushm	r7,lr
80000288:	1a 97       	mov	r7,sp
8000028a:	20 2d       	sub	sp,8
	int i = MAXNPRIO;
8000028c:	30 c8       	mov	r8,12
8000028e:	ef 48 ff f8 	st.w	r7[-8],r8
	
	tcb * rettcb;
	
	/* Search for the first non-empty queue. */
	while ( (PA[--i] == NULL) && (i > 0));
80000292:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000296:	20 18       	sub	r8,1
80000298:	ef 48 ff f8 	st.w	r7[-8],r8
8000029c:	ee f9 ff f8 	ld.w	r9,r7[-8]
800002a0:	49 48       	lddpc	r8,800002f0 <readyQueueSearch+0x6c>
800002a2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800002a6:	58 08       	cp.w	r8,0
800002a8:	c0 61       	brne	800002b4 <readyQueueSearch+0x30>
800002aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002ae:	58 08       	cp.w	r8,0
800002b0:	fe 99 ff f1 	brgt	80000292 <readyQueueSearch+0xe>
		
	/* Check the PA for emptiness. */
	if ((i == 0) && (PA[i] == NULL))
800002b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002b8:	58 08       	cp.w	r8,0
800002ba:	c0 d1       	brne	800002d4 <readyQueueSearch+0x50>
800002bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800002c0:	48 c8       	lddpc	r8,800002f0 <readyQueueSearch+0x6c>
800002c2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800002c6:	58 08       	cp.w	r8,0
800002c8:	c0 61       	brne	800002d4 <readyQueueSearch+0x50>
		rettcb = IDLETASK;
800002ca:	48 b8       	lddpc	r8,800002f4 <readyQueueSearch+0x70>
800002cc:	70 08       	ld.w	r8,r8[0x0]
800002ce:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Search for the first non-empty queue. */
	while ( (PA[--i] == NULL) && (i > 0));
		
	/* Check the PA for emptiness. */
	if ((i == 0) && (PA[i] == NULL))
800002d2:	c0 88       	rjmp	800002e2 <readyQueueSearch+0x5e>
		rettcb = IDLETASK;
	else
		rettcb = PA[i];
800002d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800002d8:	48 68       	lddpc	r8,800002f0 <readyQueueSearch+0x6c>
800002da:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800002de:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return rettcb;
800002e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800002e6:	10 9c       	mov	r12,r8
800002e8:	2f ed       	sub	sp,-8
800002ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800002ee:	00 00       	add	r0,r0
800002f0:	00 00       	add	r0,r0
800002f2:	06 60       	and	r0,r3
800002f4:	00 00       	add	r0,r0
800002f6:	06 58       	eor	r8,r3

800002f8 <dlay>:

void dlay()
{
800002f8:	eb cd 40 80 	pushm	r7,lr
800002fc:	1a 97       	mov	r7,sp
800002fe:	20 1d       	sub	sp,4
	tcb * tmp;
	
	while(1)
	{	
		while ((DQ) && (DQ->delay < systemTick))
80000300:	c3 08       	rjmp	80000360 <dlay+0x68>
		{
			tmp = DQ;
80000302:	4a 48       	lddpc	r8,80000390 <dlay+0x98>
80000304:	70 08       	ld.w	r8,r8[0x0]
80000306:	ef 48 ff fc 	st.w	r7[-4],r8
			tmp->delay = 0;
8000030a:	ee fa ff fc 	ld.w	r10,r7[-4]
8000030e:	30 08       	mov	r8,0
80000310:	30 09       	mov	r9,0
80000312:	f4 e9 00 68 	st.d	r10[104],r8
			
			TCBLIST = DQ;
80000316:	49 f8       	lddpc	r8,80000390 <dlay+0x98>
80000318:	70 09       	ld.w	r9,r8[0x0]
8000031a:	49 f8       	lddpc	r8,80000394 <dlay+0x9c>
8000031c:	91 09       	st.w	r8[0x0],r9
			ROSA_tcbUninstall(DQ);
8000031e:	49 d8       	lddpc	r8,80000390 <dlay+0x98>
80000320:	70 08       	ld.w	r8,r8[0x0]
80000322:	10 9c       	mov	r12,r8
80000324:	f0 1f 00 1d 	mcall	80000398 <dlay+0xa0>
			DQ = TCBLIST;		
80000328:	49 b8       	lddpc	r8,80000394 <dlay+0x9c>
8000032a:	70 09       	ld.w	r9,r8[0x0]
8000032c:	49 98       	lddpc	r8,80000390 <dlay+0x98>
8000032e:	91 09       	st.w	r8[0x0],r9
		
			TCBLIST = PA[tmp->priority];
80000330:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000334:	f1 38 00 64 	ld.ub	r8,r8[100]
80000338:	10 99       	mov	r9,r8
8000033a:	49 98       	lddpc	r8,8000039c <dlay+0xa4>
8000033c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000340:	49 58       	lddpc	r8,80000394 <dlay+0x9c>
80000342:	91 09       	st.w	r8[0x0],r9
			ROSA_tcbInstall(tmp);
80000344:	ee fc ff fc 	ld.w	r12,r7[-4]
80000348:	f0 1f 00 16 	mcall	800003a0 <dlay+0xa8>
			PA[tmp->priority] = TCBLIST;
8000034c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000350:	f1 38 00 64 	ld.ub	r8,r8[100]
80000354:	10 99       	mov	r9,r8
80000356:	49 08       	lddpc	r8,80000394 <dlay+0x9c>
80000358:	70 0a       	ld.w	r10,r8[0x0]
8000035a:	49 18       	lddpc	r8,8000039c <dlay+0xa4>
8000035c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
{
	tcb * tmp;
	
	while(1)
	{	
		while ((DQ) && (DQ->delay < systemTick))
80000360:	48 c8       	lddpc	r8,80000390 <dlay+0x98>
80000362:	70 08       	ld.w	r8,r8[0x0]
80000364:	58 08       	cp.w	r8,0
80000366:	c0 c0       	breq	8000037e <dlay+0x86>
80000368:	48 a8       	lddpc	r8,80000390 <dlay+0x98>
8000036a:	70 08       	ld.w	r8,r8[0x0]
8000036c:	f0 ea 00 68 	ld.d	r10,r8[104]
80000370:	48 d8       	lddpc	r8,800003a4 <dlay+0xac>
80000372:	f0 e8 00 00 	ld.d	r8,r8[0]
80000376:	10 3a       	cp.w	r10,r8
80000378:	f2 0b 13 00 	cpc	r11,r9
8000037c:	cc 33       	brcs	80000302 <dlay+0xa>
			TCBLIST = PA[tmp->priority];
			ROSA_tcbInstall(tmp);
			PA[tmp->priority] = TCBLIST;
		}

		PREEMPTASK = readyQueueSearch();
8000037e:	f0 1f 00 0b 	mcall	800003a8 <dlay+0xb0>
80000382:	18 99       	mov	r9,r12
80000384:	48 a8       	lddpc	r8,800003ac <dlay+0xb4>
80000386:	91 09       	st.w	r8[0x0],r9
		ROSA_yield();
80000388:	f0 1f 00 0a 	mcall	800003b0 <dlay+0xb8>
	}
8000038c:	d7 03       	nop
{
	tcb * tmp;
	
	while(1)
	{	
		while ((DQ) && (DQ->delay < systemTick))
8000038e:	ce 9b       	rjmp	80000360 <dlay+0x68>
80000390:	00 00       	add	r0,r0
80000392:	07 10       	ld.sh	r0,r3++
80000394:	00 00       	add	r0,r0
80000396:	06 5c       	eor	r12,r3
80000398:	80 00       	ld.sh	r0,r0[0x0]
8000039a:	02 34       	cp.w	r4,r1
8000039c:	00 00       	add	r0,r0
8000039e:	06 60       	and	r0,r3
800003a0:	80 00       	ld.sh	r0,r0[0x0]
800003a2:	01 d8       	ld.ub	r8,r0[0x5]
800003a4:	00 00       	add	r0,r0
800003a6:	07 88       	ld.ub	r8,r3[0x0]
800003a8:	80 00       	ld.sh	r0,r0[0x0]
800003aa:	02 84       	andn	r4,r1
800003ac:	00 00       	add	r0,r0
800003ae:	06 94       	mov	r4,r3
800003b0:	80 00       	ld.sh	r0,r0[0x0]
800003b2:	08 96       	mov	r6,r4

800003b4 <idleCreate>:
}
/** @fn void idleCreate(void)
	@brief Creation of the idle task.
*/
void idleCreate(void)
{
800003b4:	eb cd 40 80 	pushm	r7,lr
800003b8:	1a 97       	mov	r7,sp
	ROSA_tcbCreate(&IDLETASK_TCB, "idle", idle, idle_stack, IDLE_STACK_SIZE);
800003ba:	32 08       	mov	r8,32
800003bc:	48 69       	lddpc	r9,800003d4 <idleCreate+0x20>
800003be:	48 7a       	lddpc	r10,800003d8 <idleCreate+0x24>
800003c0:	48 7b       	lddpc	r11,800003dc <idleCreate+0x28>
800003c2:	48 8c       	lddpc	r12,800003e0 <idleCreate+0x2c>
800003c4:	f0 1f 00 08 	mcall	800003e4 <idleCreate+0x30>
	IDLETASK = &IDLETASK_TCB;
800003c8:	48 88       	lddpc	r8,800003e8 <idleCreate+0x34>
800003ca:	48 69       	lddpc	r9,800003e0 <idleCreate+0x2c>
800003cc:	91 09       	st.w	r8[0x0],r9
}
800003ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800003d2:	00 00       	add	r0,r0
800003d4:	00 00       	add	r0,r0
800003d6:	05 18       	ld.sh	r8,r2++
800003d8:	80 00       	ld.sh	r0,r0[0x0]
800003da:	01 d0       	ld.ub	r0,r0[0x5]
800003dc:	80 00       	ld.sh	r0,r0[0x0]
800003de:	01 c0       	ld.ub	r0,r0[0x4]
800003e0:	00 00       	add	r0,r0
800003e2:	07 14       	ld.sh	r4,r3++
800003e4:	80 00       	ld.sh	r0,r0[0x0]
800003e6:	04 fc       	st.b	--r2,r12
800003e8:	00 00       	add	r0,r0
800003ea:	06 58       	eor	r8,r3

800003ec <dlayCreate>:

void dlayCreate(void)
{
800003ec:	eb cd 40 80 	pushm	r7,lr
800003f0:	1a 97       	mov	r7,sp
	ROSA_tcbCreate(&DELHANDL_TCB, "dlay", dlay, dlay_stack, DLAY_STACK_SIZE);
800003f2:	32 08       	mov	r8,32
800003f4:	48 69       	lddpc	r9,8000040c <dlayCreate+0x20>
800003f6:	48 7a       	lddpc	r10,80000410 <dlayCreate+0x24>
800003f8:	48 7b       	lddpc	r11,80000414 <dlayCreate+0x28>
800003fa:	48 8c       	lddpc	r12,80000418 <dlayCreate+0x2c>
800003fc:	f0 1f 00 08 	mcall	8000041c <dlayCreate+0x30>
	DELHANDL = &DELHANDL_TCB;
80000400:	48 88       	lddpc	r8,80000420 <dlayCreate+0x34>
80000402:	48 69       	lddpc	r9,80000418 <dlayCreate+0x2c>
80000404:	91 09       	st.w	r8[0x0],r9
}
80000406:	e3 cd 80 80 	ldm	sp++,r7,pc
8000040a:	00 00       	add	r0,r0
8000040c:	00 00       	add	r0,r0
8000040e:	05 98       	ld.ub	r8,r2[0x1]
80000410:	80 00       	ld.sh	r0,r0[0x0]
80000412:	02 f8       	st.b	--r1,r8
80000414:	80 00       	ld.sh	r0,r0[0x0]
80000416:	01 c8       	ld.ub	r8,r0[0x4]
80000418:	00 00       	add	r0,r0
8000041a:	06 98       	mov	r8,r3
8000041c:	80 00       	ld.sh	r0,r0[0x0]
8000041e:	04 fc       	st.b	--r2,r12
80000420:	00 00       	add	r0,r0
80000422:	06 90       	mov	r0,r3

80000424 <ROSA_init>:

void ROSA_init(void)
{
80000424:	eb cd 40 80 	pushm	r7,lr
80000428:	1a 97       	mov	r7,sp
8000042a:	20 1d       	sub	sp,4
	int i = 0;
8000042c:	30 08       	mov	r8,0
8000042e:	ef 48 ff fc 	st.w	r7[-4],r8
	systemTick = 0;
80000432:	4a 2a       	lddpc	r10,800004b8 <ROSA_init+0x94>
80000434:	30 08       	mov	r8,0
80000436:	30 09       	mov	r9,0
80000438:	f4 e9 00 00 	st.d	r10[0],r8
	
	//Do initialization of I/O drivers
	ledInit();									//LEDs
8000043c:	f0 1f 00 20 	mcall	800004bc <ROSA_init+0x98>
	buttonInit();								//Buttons
80000440:	f0 1f 00 20 	mcall	800004c0 <ROSA_init+0x9c>
	joystickInit();								//Joystick
80000444:	f0 1f 00 20 	mcall	800004c4 <ROSA_init+0xa0>
	potInit();									//Potentiometer
80000448:	f0 1f 00 20 	mcall	800004c8 <ROSA_init+0xa4>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
8000044c:	e0 6a 1b 00 	mov	r10,6912
80000450:	ea 1a 00 b7 	orh	r10,0xb7
80000454:	49 eb       	lddpc	r11,800004cc <ROSA_init+0xa8>
80000456:	fe 7c 14 00 	mov	r12,-60416
8000045a:	f0 1f 00 1e 	mcall	800004d0 <ROSA_init+0xac>

	interruptInit();
8000045e:	f0 1f 00 1e 	mcall	800004d4 <ROSA_init+0xb0>
	interruptEnable();
80000462:	f0 1f 00 1e 	mcall	800004d8 <ROSA_init+0xb4>
	timerInit(1);
80000466:	30 1c       	mov	r12,1
80000468:	f0 1f 00 1d 	mcall	800004dc <ROSA_init+0xb8>
	timerStart();
8000046c:	f0 1f 00 1d 	mcall	800004e0 <ROSA_init+0xbc>
	
	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
80000470:	49 d8       	lddpc	r8,800004e4 <ROSA_init+0xc0>
80000472:	30 09       	mov	r9,0
80000474:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
80000476:	49 d8       	lddpc	r8,800004e8 <ROSA_init+0xc4>
80000478:	30 09       	mov	r9,0
8000047a:	91 09       	st.w	r8[0x0],r9
	PREEMPTASK = NULL;
8000047c:	49 c8       	lddpc	r8,800004ec <ROSA_init+0xc8>
8000047e:	30 09       	mov	r9,0
80000480:	91 09       	st.w	r8[0x0],r9
	
	/* Create idle task. */
	idleCreate();
80000482:	f0 1f 00 1c 	mcall	800004f0 <ROSA_init+0xcc>
	dlayCreate();
80000486:	f0 1f 00 1c 	mcall	800004f4 <ROSA_init+0xd0>
	
	for (i = 0; i < MAXNPRIO; i++) {
8000048a:	30 08       	mov	r8,0
8000048c:	ef 48 ff fc 	st.w	r7[-4],r8
80000490:	c0 c8       	rjmp	800004a8 <ROSA_init+0x84>
		PA[i] = NULL;
80000492:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000496:	49 98       	lddpc	r8,800004f8 <ROSA_init+0xd4>
80000498:	30 0a       	mov	r10,0
8000049a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	
	/* Create idle task. */
	idleCreate();
	dlayCreate();
	
	for (i = 0; i < MAXNPRIO; i++) {
8000049e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004a2:	2f f8       	sub	r8,-1
800004a4:	ef 48 ff fc 	st.w	r7[-4],r8
800004a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004ac:	58 b8       	cp.w	r8,11
800004ae:	fe 9a ff f2 	brle	80000492 <ROSA_init+0x6e>
		PA[i] = NULL;
	}
	
	//Initialize the timer to 1 ms period.
	
}
800004b2:	2f fd       	sub	sp,-4
800004b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800004b8:	00 00       	add	r0,r0
800004ba:	07 88       	ld.ub	r8,r3[0x0]
800004bc:	80 00       	ld.sh	r0,r0[0x0]
800004be:	0b d4       	ld.ub	r4,r5[0x5]
800004c0:	80 00       	ld.sh	r0,r0[0x0]
800004c2:	0a 7c       	tst	r12,r5
800004c4:	80 00       	ld.sh	r0,r0[0x0]
800004c6:	0a a4       	st.w	r5++,r4
800004c8:	80 00       	ld.sh	r0,r0[0x0]
800004ca:	0c 80       	andn	r0,r6
800004cc:	80 00       	ld.sh	r0,r0[0x0]
800004ce:	01 b4       	ld.ub	r4,r0[0x3]
800004d0:	80 00       	ld.sh	r0,r0[0x0]
800004d2:	0e 34       	cp.w	r4,r7
800004d4:	80 00       	ld.sh	r0,r0[0x0]
800004d6:	1b 48       	ld.w	r8,--sp
800004d8:	80 00       	ld.sh	r0,r0[0x0]
800004da:	1b 6a       	ld.uh	r10,--sp
800004dc:	80 00       	ld.sh	r0,r0[0x0]
800004de:	10 04       	add	r4,r8
800004e0:	80 00       	ld.sh	r0,r0[0x0]
800004e2:	10 32       	cp.w	r2,r8
800004e4:	00 00       	add	r0,r0
800004e6:	06 5c       	eor	r12,r3
800004e8:	00 00       	add	r0,r0
800004ea:	07 0c       	ld.w	r12,r3++
800004ec:	00 00       	add	r0,r0
800004ee:	06 94       	mov	r4,r3
800004f0:	80 00       	ld.sh	r0,r0[0x0]
800004f2:	03 b4       	ld.ub	r4,r1[0x3]
800004f4:	80 00       	ld.sh	r0,r0[0x0]
800004f6:	03 ec       	ld.ub	r12,r1[0x6]
800004f8:	00 00       	add	r0,r0
800004fa:	06 60       	and	r0,r3

800004fc <ROSA_tcbCreate>:

void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
800004fc:	eb cd 40 80 	pushm	r7,lr
80000500:	1a 97       	mov	r7,sp
80000502:	20 6d       	sub	sp,24
80000504:	ef 4c ff f8 	st.w	r7[-8],r12
80000508:	ef 4b ff f4 	st.w	r7[-12],r11
8000050c:	ef 4a ff f0 	st.w	r7[-16],r10
80000510:	ef 49 ff ec 	st.w	r7[-20],r9
80000514:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000518:	30 08       	mov	r8,0
8000051a:	ef 48 ff fc 	st.w	r7[-4],r8
8000051e:	c1 48       	rjmp	80000546 <ROSA_tcbCreate+0x4a>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
80000520:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000524:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000528:	ee fa ff f4 	ld.w	r10,r7[-12]
8000052c:	f4 08 00 08 	add	r8,r10,r8
80000530:	11 88       	ld.ub	r8,r8[0x0]
80000532:	ee fa ff f8 	ld.w	r10,r7[-8]
80000536:	f4 09 00 09 	add	r9,r10,r9
8000053a:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
8000053c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000540:	2f f8       	sub	r8,-1
80000542:	ef 48 ff fc 	st.w	r7[-4],r8
80000546:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000054a:	58 38       	cp.w	r8,3
8000054c:	fe 9a ff ea 	brle	80000520 <ROSA_tcbCreate+0x24>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
80000550:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000554:	30 09       	mov	r9,0
80000556:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
80000558:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000055c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000560:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
80000562:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000566:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000056a:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
8000056c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000570:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000574:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
80000576:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000057a:	a3 68       	lsl	r8,0x2
8000057c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000580:	10 09       	add	r9,r8
80000582:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000586:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
80000588:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000058c:	70 39       	ld.w	r9,r8[0xc]
8000058e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000592:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
80000594:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000598:	fc 19 00 1c 	movh	r9,0x1c
8000059c:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
8000059e:	ee fc ff f8 	ld.w	r12,r7[-8]
800005a2:	f0 1f 00 03 	mcall	800005ac <ROSA_tcbCreate+0xb0>
}
800005a6:	2f ad       	sub	sp,-24
800005a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800005ac:	80 00       	ld.sh	r0,r0[0x0]
800005ae:	08 0a       	add	r10,r4

800005b0 <ROSA_taskCreate>:

int16_t ROSA_taskCreate(ROSA_taskHandle_t ** pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t prio)
{
800005b0:	eb cd 40 80 	pushm	r7,lr
800005b4:	1a 97       	mov	r7,sp
800005b6:	20 6d       	sub	sp,24
800005b8:	ef 4c ff f8 	st.w	r7[-8],r12
800005bc:	ef 4b ff f4 	st.w	r7[-12],r11
800005c0:	ef 4a ff f0 	st.w	r7[-16],r10
800005c4:	ef 49 ff ec 	st.w	r7[-20],r9
800005c8:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) malloc(stackSize * sizeof(uint32_t)); 
800005cc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800005d0:	a3 68       	lsl	r8,0x2
800005d2:	10 9c       	mov	r12,r8
800005d4:	f0 1f 00 33 	mcall	800006a0 <ROSA_taskCreate+0xf0>
800005d8:	18 98       	mov	r8,r12
800005da:	ef 48 ff fc 	st.w	r7[-4],r8
	*pth = (ROSA_taskHandle_t *) malloc(sizeof(ROSA_taskHandle_t));
800005de:	37 4c       	mov	r12,116
800005e0:	f0 1f 00 30 	mcall	800006a0 <ROSA_taskCreate+0xf0>
800005e4:	18 98       	mov	r8,r12
800005e6:	10 99       	mov	r9,r8
800005e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005ec:	91 09       	st.w	r8[0x0],r9
	
	(*pth)->priority = prio;
800005ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005f2:	70 09       	ld.w	r9,r8[0x0]
800005f4:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800005f8:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
800005fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000600:	70 0a       	ld.w	r10,r8[0x0]
80000602:	30 08       	mov	r8,0
80000604:	30 09       	mov	r9,0
80000606:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
8000060a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000060e:	70 09       	ld.w	r9,r8[0x0]
80000610:	30 08       	mov	r8,0
80000612:	f3 68 00 70 	st.b	r9[112],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
80000616:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000061a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000061e:	72 0c       	ld.w	r12,r9[0x0]
80000620:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000624:	ee fa ff f0 	ld.w	r10,r7[-16]
80000628:	ee fb ff f4 	ld.w	r11,r7[-12]
8000062c:	f0 1f 00 1e 	mcall	800006a4 <ROSA_taskCreate+0xf4>
	TCBLIST = PA[(*pth)->priority];
80000630:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000634:	70 08       	ld.w	r8,r8[0x0]
80000636:	f1 38 00 64 	ld.ub	r8,r8[100]
8000063a:	10 99       	mov	r9,r8
8000063c:	49 b8       	lddpc	r8,800006a8 <ROSA_taskCreate+0xf8>
8000063e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000642:	49 b8       	lddpc	r8,800006ac <ROSA_taskCreate+0xfc>
80000644:	91 09       	st.w	r8[0x0],r9
	ROSA_tcbInstall(*pth);
80000646:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000064a:	70 08       	ld.w	r8,r8[0x0]
8000064c:	10 9c       	mov	r12,r8
8000064e:	f0 1f 00 19 	mcall	800006b0 <ROSA_taskCreate+0x100>
	PA[TCBLIST->priority] = TCBLIST;
80000652:	49 78       	lddpc	r8,800006ac <ROSA_taskCreate+0xfc>
80000654:	70 08       	ld.w	r8,r8[0x0]
80000656:	f1 38 00 64 	ld.ub	r8,r8[100]
8000065a:	10 99       	mov	r9,r8
8000065c:	49 48       	lddpc	r8,800006ac <ROSA_taskCreate+0xfc>
8000065e:	70 0a       	ld.w	r10,r8[0x0]
80000660:	49 28       	lddpc	r8,800006a8 <ROSA_taskCreate+0xf8>
80000662:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
	if ((EXECTASK) && (EXECTASK->priority < prio)) {
80000666:	49 48       	lddpc	r8,800006b4 <ROSA_taskCreate+0x104>
80000668:	70 08       	ld.w	r8,r8[0x0]
8000066a:	58 08       	cp.w	r8,0
8000066c:	c1 40       	breq	80000694 <ROSA_taskCreate+0xe4>
8000066e:	49 28       	lddpc	r8,800006b4 <ROSA_taskCreate+0x104>
80000670:	70 08       	ld.w	r8,r8[0x0]
80000672:	f1 38 00 64 	ld.ub	r8,r8[100]
80000676:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000067a:	f0 09 18 00 	cp.b	r9,r8
8000067e:	e0 88 00 0b 	brls	80000694 <ROSA_taskCreate+0xe4>
		PREEMPTASK = PA[prio];
80000682:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000686:	48 98       	lddpc	r8,800006a8 <ROSA_taskCreate+0xf8>
80000688:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000068c:	48 b8       	lddpc	r8,800006b8 <ROSA_taskCreate+0x108>
8000068e:	91 09       	st.w	r8[0x0],r9
		ROSA_yield();
80000690:	f0 1f 00 0b 	mcall	800006bc <ROSA_taskCreate+0x10c>
	}	
	
	return 0;
80000694:	30 08       	mov	r8,0
}
80000696:	10 9c       	mov	r12,r8
80000698:	2f ad       	sub	sp,-24
8000069a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000069e:	00 00       	add	r0,r0
800006a0:	80 00       	ld.sh	r0,r0[0x0]
800006a2:	11 3c       	ld.ub	r12,r8++
800006a4:	80 00       	ld.sh	r0,r0[0x0]
800006a6:	04 fc       	st.b	--r2,r12
800006a8:	00 00       	add	r0,r0
800006aa:	06 60       	and	r0,r3
800006ac:	00 00       	add	r0,r0
800006ae:	06 5c       	eor	r12,r3
800006b0:	80 00       	ld.sh	r0,r0[0x0]
800006b2:	01 d8       	ld.ub	r8,r0[0x5]
800006b4:	00 00       	add	r0,r0
800006b6:	07 0c       	ld.w	r12,r3++
800006b8:	00 00       	add	r0,r0
800006ba:	06 94       	mov	r4,r3
800006bc:	80 00       	ld.sh	r0,r0[0x0]
800006be:	08 96       	mov	r6,r4

800006c0 <ROSA_delay>:
/* ROSA_delay()															*/
/*																		*/
/* Suspends the calling task for the given number of ticks				*/
/************************************************************************/
int16_t ROSA_delay(uint64_t ticks)
{
800006c0:	eb cd 40 c0 	pushm	r6-r7,lr
800006c4:	1a 97       	mov	r7,sp
800006c6:	20 2d       	sub	sp,8
800006c8:	ee eb ff f8 	st.d	r7[-8],r10
	EXECTASK->delay = ROSA_getTickCount() + ticks;
800006cc:	4b 88       	lddpc	r8,800007ac <ROSA_delay+0xec>
800006ce:	70 06       	ld.w	r6,r8[0x0]
800006d0:	f0 1f 00 38 	mcall	800007b0 <ROSA_delay+0xf0>
800006d4:	ee e8 ff f8 	ld.d	r8,r7[-8]
800006d8:	f4 08 00 08 	add	r8,r10,r8
800006dc:	f6 09 00 49 	adc	r9,r11,r9
800006e0:	ec e9 00 68 	st.d	r6[104],r8

	/* Extract task from its queue */
	TCBLIST = PA[EXECTASK->priority];
800006e4:	4b 28       	lddpc	r8,800007ac <ROSA_delay+0xec>
800006e6:	70 08       	ld.w	r8,r8[0x0]
800006e8:	f1 38 00 64 	ld.ub	r8,r8[100]
800006ec:	10 99       	mov	r9,r8
800006ee:	4b 28       	lddpc	r8,800007b4 <ROSA_delay+0xf4>
800006f0:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800006f4:	4b 18       	lddpc	r8,800007b8 <ROSA_delay+0xf8>
800006f6:	91 09       	st.w	r8[0x0],r9
	ROSA_tcbUninstall(EXECTASK);
800006f8:	4a d8       	lddpc	r8,800007ac <ROSA_delay+0xec>
800006fa:	70 08       	ld.w	r8,r8[0x0]
800006fc:	10 9c       	mov	r12,r8
800006fe:	f0 1f 00 30 	mcall	800007bc <ROSA_delay+0xfc>
	PA[EXECTASK->priority] = TCBLIST;
80000702:	4a b8       	lddpc	r8,800007ac <ROSA_delay+0xec>
80000704:	70 08       	ld.w	r8,r8[0x0]
80000706:	f1 38 00 64 	ld.ub	r8,r8[100]
8000070a:	10 99       	mov	r9,r8
8000070c:	4a b8       	lddpc	r8,800007b8 <ROSA_delay+0xf8>
8000070e:	70 0a       	ld.w	r10,r8[0x0]
80000710:	4a 98       	lddpc	r8,800007b4 <ROSA_delay+0xf4>
80000712:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	
	/* Check the current queue for emptiness */
	if (PA[EXECTASK->priority])
80000716:	4a 68       	lddpc	r8,800007ac <ROSA_delay+0xec>
80000718:	70 08       	ld.w	r8,r8[0x0]
8000071a:	f1 38 00 64 	ld.ub	r8,r8[100]
8000071e:	10 99       	mov	r9,r8
80000720:	4a 58       	lddpc	r8,800007b4 <ROSA_delay+0xf4>
80000722:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000726:	58 08       	cp.w	r8,0
80000728:	c0 70       	breq	80000736 <ROSA_delay+0x76>
		PREEMPTASK = EXECTASK->nexttcb;
8000072a:	4a 18       	lddpc	r8,800007ac <ROSA_delay+0xec>
8000072c:	70 08       	ld.w	r8,r8[0x0]
8000072e:	70 09       	ld.w	r9,r8[0x0]
80000730:	4a 48       	lddpc	r8,800007c0 <ROSA_delay+0x100>
80000732:	91 09       	st.w	r8[0x0],r9
80000734:	c0 68       	rjmp	80000740 <ROSA_delay+0x80>
	else
		PREEMPTASK = readyQueueSearch();
80000736:	f0 1f 00 24 	mcall	800007c4 <ROSA_delay+0x104>
8000073a:	18 99       	mov	r9,r12
8000073c:	4a 18       	lddpc	r8,800007c0 <ROSA_delay+0x100>
8000073e:	91 09       	st.w	r8[0x0],r9

	TCBLIST = DQ;
80000740:	4a 28       	lddpc	r8,800007c8 <ROSA_delay+0x108>
80000742:	70 09       	ld.w	r9,r8[0x0]
80000744:	49 d8       	lddpc	r8,800007b8 <ROSA_delay+0xf8>
80000746:	91 09       	st.w	r8[0x0],r9
	
	while ((TCBLIST->delay <= EXECTASK->delay) && (EXECTASK->delay <= TCBLIST->nexttcb->delay))
80000748:	c0 68       	rjmp	80000754 <ROSA_delay+0x94>
		TCBLIST = TCBLIST->nexttcb;
8000074a:	49 c8       	lddpc	r8,800007b8 <ROSA_delay+0xf8>
8000074c:	70 08       	ld.w	r8,r8[0x0]
8000074e:	70 09       	ld.w	r9,r8[0x0]
80000750:	49 a8       	lddpc	r8,800007b8 <ROSA_delay+0xf8>
80000752:	91 09       	st.w	r8[0x0],r9
	else
		PREEMPTASK = readyQueueSearch();

	TCBLIST = DQ;
	
	while ((TCBLIST->delay <= EXECTASK->delay) && (EXECTASK->delay <= TCBLIST->nexttcb->delay))
80000754:	49 98       	lddpc	r8,800007b8 <ROSA_delay+0xf8>
80000756:	70 08       	ld.w	r8,r8[0x0]
80000758:	f0 ea 00 68 	ld.d	r10,r8[104]
8000075c:	49 48       	lddpc	r8,800007ac <ROSA_delay+0xec>
8000075e:	70 08       	ld.w	r8,r8[0x0]
80000760:	f0 e8 00 68 	ld.d	r8,r8[104]
80000764:	10 3a       	cp.w	r10,r8
80000766:	f2 0b 13 00 	cpc	r11,r9
8000076a:	e0 8b 00 10 	brhi	8000078a <ROSA_delay+0xca>
8000076e:	49 08       	lddpc	r8,800007ac <ROSA_delay+0xec>
80000770:	70 08       	ld.w	r8,r8[0x0]
80000772:	f0 ea 00 68 	ld.d	r10,r8[104]
80000776:	49 18       	lddpc	r8,800007b8 <ROSA_delay+0xf8>
80000778:	70 08       	ld.w	r8,r8[0x0]
8000077a:	70 08       	ld.w	r8,r8[0x0]
8000077c:	f0 e8 00 68 	ld.d	r8,r8[104]
80000780:	10 3a       	cp.w	r10,r8
80000782:	f2 0b 13 00 	cpc	r11,r9
80000786:	fe 98 ff e2 	brls	8000074a <ROSA_delay+0x8a>
		TCBLIST = TCBLIST->nexttcb;

	ROSA_tcbInstall(EXECTASK);
8000078a:	48 98       	lddpc	r8,800007ac <ROSA_delay+0xec>
8000078c:	70 08       	ld.w	r8,r8[0x0]
8000078e:	10 9c       	mov	r12,r8
80000790:	f0 1f 00 0f 	mcall	800007cc <ROSA_delay+0x10c>
	DQ = TCBLIST;
80000794:	48 98       	lddpc	r8,800007b8 <ROSA_delay+0xf8>
80000796:	70 09       	ld.w	r9,r8[0x0]
80000798:	48 c8       	lddpc	r8,800007c8 <ROSA_delay+0x108>
8000079a:	91 09       	st.w	r8[0x0],r9
	
	ROSA_yield();
8000079c:	f0 1f 00 0d 	mcall	800007d0 <ROSA_delay+0x110>
	
	return 0;
800007a0:	30 08       	mov	r8,0
}
800007a2:	10 9c       	mov	r12,r8
800007a4:	2f ed       	sub	sp,-8
800007a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800007aa:	00 00       	add	r0,r0
800007ac:	00 00       	add	r0,r0
800007ae:	07 0c       	ld.w	r12,r3++
800007b0:	80 00       	ld.sh	r0,r0[0x0]
800007b2:	09 bc       	ld.ub	r12,r4[0x3]
800007b4:	00 00       	add	r0,r0
800007b6:	06 60       	and	r0,r3
800007b8:	00 00       	add	r0,r0
800007ba:	06 5c       	eor	r12,r3
800007bc:	80 00       	ld.sh	r0,r0[0x0]
800007be:	02 34       	cp.w	r4,r1
800007c0:	00 00       	add	r0,r0
800007c2:	06 94       	mov	r4,r3
800007c4:	80 00       	ld.sh	r0,r0[0x0]
800007c6:	02 84       	andn	r4,r1
800007c8:	00 00       	add	r0,r0
800007ca:	07 10       	ld.sh	r0,r3++
800007cc:	80 00       	ld.sh	r0,r0[0x0]
800007ce:	01 d8       	ld.ub	r8,r0[0x5]
800007d0:	80 00       	ld.sh	r0,r0[0x0]
800007d2:	08 96       	mov	r6,r4

800007d4 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
800007d4:	4b 5c       	lddpc	r12,800008a8 <_yield+0xa>
	lda.w r11,EXECTASK
800007d6:	4b 6b       	lddpc	r11,800008ac <_yield+0xe>
	ld.w r12,r12[0x0]
800007d8:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
800007da:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
800007dc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800007de:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800007e0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
800007e4:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
800007e6:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
800007e8:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
800007ea:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
800007ee:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
800007f0:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
800007f2:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
800007f4:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
800007f6:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
800007f8:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
800007fa:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
800007fc:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
800007fe:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000800:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000802:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000804:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000806:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000808:	1c 9f       	mov	pc,lr

8000080a <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
8000080a:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
8000080c:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
8000080e:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000810:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000814:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80000818:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
8000081c:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000820:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000824:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000828:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
8000082c:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000830:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000834:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
80000836:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80000838:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
8000083a:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
8000083c:	1c 9f       	mov	pc,lr

8000083e <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
8000083e:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000840:	49 bc       	lddpc	r12,800008ac <_yield+0xe>
	ld.w r12,r12[0x0]
80000842:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000844:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
80000846:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
80000848:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
8000084a:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
8000084c:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
8000084e:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
80000850:	33 40       	mov	r0,52
	add r0,r12
80000852:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000854:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80000858:	1a 90       	mov	r0,sp
	st.w --sp,r0
8000085a:	1a d0       	st.w	--sp,r0
	stmts sp,sp
8000085c:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
80000860:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
80000862:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80000864:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
80000866:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
80000868:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
8000086a:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
8000086c:	1c 9f       	mov	pc,lr

8000086e <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000086e:	49 0c       	lddpc	r12,800008ac <_yield+0xe>
	ld.w r12,r12[0x0]
80000870:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
80000872:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000874:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
80000876:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
8000087a:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
8000087c:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
8000087e:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
80000880:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80000882:	33 40       	mov	r0,52
	add r0,r12
80000884:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80000886:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
8000088a:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
8000088c:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
8000088e:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80000890:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000892:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80000894:	d6 13       	rets

80000896 <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
80000896:	d4 01       	pushm	lr
	lda.w lr,_yield
80000898:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
8000089c:	d7 33       	scall

8000089e <_yield>:
_yield:
	call contextSave
8000089e:	cd 0f       	rcall	8000083e <contextSave>
	call scheduler
800008a0:	f0 1f 00 04 	mcall	800008b0 <_yield+0x12>
	call contextRestore
800008a4:	ce 5f       	rcall	8000086e <contextRestore>
800008a6:	00 00       	add	r0,r0
800008a8:	00 00       	add	r0,r0
800008aa:	06 5c       	eor	r12,r3
800008ac:	00 00       	add	r0,r0
800008ae:	07 0c       	ld.w	r12,r3++
800008b0:	80 00       	ld.sh	r0,r0[0x0]
800008b2:	08 b4       	st.h	r4++,r4

800008b4 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
800008b4:	eb cd 40 80 	pushm	r7,lr
800008b8:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK) {
800008ba:	48 f8       	lddpc	r8,800008f4 <scheduler+0x40>
800008bc:	70 08       	ld.w	r8,r8[0x0]
800008be:	58 08       	cp.w	r8,0
800008c0:	c0 90       	breq	800008d2 <scheduler+0x1e>
		EXECTASK = PREEMPTASK;
800008c2:	48 d8       	lddpc	r8,800008f4 <scheduler+0x40>
800008c4:	70 09       	ld.w	r9,r8[0x0]
800008c6:	48 d8       	lddpc	r8,800008f8 <scheduler+0x44>
800008c8:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
800008ca:	48 b8       	lddpc	r8,800008f4 <scheduler+0x40>
800008cc:	30 09       	mov	r9,0
800008ce:	91 09       	st.w	r8[0x0],r9
800008d0:	c1 08       	rjmp	800008f0 <scheduler+0x3c>
	}
	else {
		PA[EXECTASK->priority] = EXECTASK;
800008d2:	48 a8       	lddpc	r8,800008f8 <scheduler+0x44>
800008d4:	70 08       	ld.w	r8,r8[0x0]
800008d6:	f1 38 00 64 	ld.ub	r8,r8[100]
800008da:	10 99       	mov	r9,r8
800008dc:	48 78       	lddpc	r8,800008f8 <scheduler+0x44>
800008de:	70 0a       	ld.w	r10,r8[0x0]
800008e0:	48 78       	lddpc	r8,800008fc <scheduler+0x48>
800008e2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		EXECTASK = EXECTASK->nexttcb;
800008e6:	48 58       	lddpc	r8,800008f8 <scheduler+0x44>
800008e8:	70 08       	ld.w	r8,r8[0x0]
800008ea:	70 09       	ld.w	r9,r8[0x0]
800008ec:	48 38       	lddpc	r8,800008f8 <scheduler+0x44>
800008ee:	91 09       	st.w	r8[0x0],r9
	}
}
800008f0:	e3 cd 80 80 	ldm	sp++,r7,pc
800008f4:	00 00       	add	r0,r0
800008f6:	06 94       	mov	r4,r3
800008f8:	00 00       	add	r0,r0
800008fa:	07 0c       	ld.w	r12,r3++
800008fc:	00 00       	add	r0,r0
800008fe:	06 60       	and	r0,r3

80000900 <ROSA_startScheduler>:

extern tcb * readyQueueSearch(void);

void ROSA_startScheduler(void)
{	
80000900:	eb cd 40 80 	pushm	r7,lr
80000904:	1a 97       	mov	r7,sp
	TCBLIST = ((tcb *) readyQueueSearch())->nexttcb;
80000906:	f0 1f 00 06 	mcall	8000091c <ROSA_startScheduler+0x1c>
8000090a:	18 98       	mov	r8,r12
8000090c:	70 09       	ld.w	r9,r8[0x0]
8000090e:	48 58       	lddpc	r8,80000920 <ROSA_startScheduler+0x20>
80000910:	91 09       	st.w	r8[0x0],r9
	ROSA_start();
80000912:	f0 1f 00 05 	mcall	80000924 <ROSA_startScheduler+0x24>
}
80000916:	e3 cd 80 80 	ldm	sp++,r7,pc
8000091a:	00 00       	add	r0,r0
8000091c:	80 00       	ld.sh	r0,r0[0x0]
8000091e:	02 84       	andn	r4,r1
80000920:	00 00       	add	r0,r0
80000922:	06 5c       	eor	r12,r3
80000924:	80 00       	ld.sh	r0,r0[0x0]
80000926:	07 d4       	ld.ub	r4,r3[0x5]

80000928 <C.6.9522>:
80000928:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000938 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000938:	eb cd 40 80 	pushm	r7,lr
8000093c:	1a 97       	mov	r7,sp
8000093e:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000940:	fe 78 38 00 	mov	r8,-51200
80000944:	ef 48 ff fc 	st.w	r7[-4],r8
	
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000948:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000094c:	70 88       	ld.w	r8,r8[0x20]
8000094e:	ef 48 ff f8 	st.w	r7[-8],r8
	if (sr & AVR32_TC_CPCS_MASK)
80000952:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000956:	e2 18 00 10 	andl	r8,0x10,COH
8000095a:	c2 20       	breq	8000099e <timerISR+0x66>
	{
		systemTick++;
8000095c:	49 38       	lddpc	r8,800009a8 <timerISR+0x70>
8000095e:	f0 ea 00 00 	ld.d	r10,r8[0]
80000962:	30 18       	mov	r8,1
80000964:	30 09       	mov	r9,0
80000966:	f4 08 00 08 	add	r8,r10,r8
8000096a:	f6 09 00 49 	adc	r9,r11,r9
8000096e:	48 fa       	lddpc	r10,800009a8 <timerISR+0x70>
80000970:	f4 e9 00 00 	st.d	r10[0],r8
		
		if ((DQ) && DQ->delay < systemTick) {
80000974:	48 e8       	lddpc	r8,800009ac <timerISR+0x74>
80000976:	70 08       	ld.w	r8,r8[0x0]
80000978:	58 08       	cp.w	r8,0
8000097a:	c1 20       	breq	8000099e <timerISR+0x66>
8000097c:	48 c8       	lddpc	r8,800009ac <timerISR+0x74>
8000097e:	70 08       	ld.w	r8,r8[0x0]
80000980:	f0 ea 00 68 	ld.d	r10,r8[104]
80000984:	48 98       	lddpc	r8,800009a8 <timerISR+0x70>
80000986:	f0 e8 00 00 	ld.d	r8,r8[0]
8000098a:	10 3a       	cp.w	r10,r8
8000098c:	f2 0b 13 00 	cpc	r11,r9
80000990:	c0 72       	brcc	8000099e <timerISR+0x66>
			PREEMPTASK = DELHANDL;
80000992:	48 88       	lddpc	r8,800009b0 <timerISR+0x78>
80000994:	70 09       	ld.w	r9,r8[0x0]
80000996:	48 88       	lddpc	r8,800009b4 <timerISR+0x7c>
80000998:	91 09       	st.w	r8[0x0],r9
			ROSA_yieldFromISR();
8000099a:	f0 1f 00 08 	mcall	800009b8 <timerISR+0x80>
		}
	}
}
8000099e:	2f ed       	sub	sp,-8
800009a0:	e3 cd 40 80 	ldm	sp++,r7,lr
800009a4:	d6 03       	rete
800009a6:	00 00       	add	r0,r0
800009a8:	00 00       	add	r0,r0
800009aa:	07 88       	ld.ub	r8,r3[0x0]
800009ac:	00 00       	add	r0,r0
800009ae:	07 10       	ld.sh	r0,r3++
800009b0:	00 00       	add	r0,r0
800009b2:	06 90       	mov	r0,r3
800009b4:	00 00       	add	r0,r0
800009b6:	06 94       	mov	r4,r3
800009b8:	80 00       	ld.sh	r0,r0[0x0]
800009ba:	01 90       	ld.ub	r0,r0[0x1]

800009bc <ROSA_getTickCount>:
/*																		*/
/* Returns the current number of system ticks, relative to start		*/
/* of the system.                                                       */
/************************************************************************/
uint64_t ROSA_getTickCount()
{
800009bc:	eb cd 40 80 	pushm	r7,lr
800009c0:	1a 97       	mov	r7,sp
	return systemTick;
800009c2:	48 48       	lddpc	r8,800009d0 <ROSA_getTickCount+0x14>
800009c4:	f0 e8 00 00 	ld.d	r8,r8[0]
}
800009c8:	10 9a       	mov	r10,r8
800009ca:	12 9b       	mov	r11,r9
800009cc:	e3 cd 80 80 	ldm	sp++,r7,pc
800009d0:	00 00       	add	r0,r0
800009d2:	07 88       	ld.ub	r8,r3[0x0]

800009d4 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
800009d4:	eb cd 40 80 	pushm	r7,lr
800009d8:	1a 97       	mov	r7,sp
800009da:	20 7d       	sub	sp,28
800009dc:	ef 4c ff e4 	st.w	r7[-28],r12
	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
800009e0:	4a 48       	lddpc	r8,80000a70 <timerPeriodSet+0x9c>
800009e2:	ee ca 00 18 	sub	r10,r7,24
800009e6:	10 9b       	mov	r11,r8
800009e8:	f6 e8 00 00 	ld.d	r8,r11[0]
800009ec:	f4 e9 00 00 	st.d	r10[0],r8
800009f0:	f6 e8 00 08 	ld.d	r8,r11[8]
800009f4:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
800009f8:	30 48       	mov	r8,4
800009fa:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
800009fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a02:	20 18       	sub	r8,1
80000a04:	a3 68       	lsl	r8,0x2
80000a06:	ee 08 00 08 	add	r8,r7,r8
80000a0a:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000a0e:	e0 68 1b 00 	mov	r8,6912
80000a12:	ea 18 00 b7 	orh	r8,0xb7
80000a16:	f0 09 0c 08 	divs	r8,r8,r9
80000a1a:	10 99       	mov	r9,r8
80000a1c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000a20:	b1 39       	mul	r9,r8
80000a22:	e0 68 4d d3 	mov	r8,19923
80000a26:	ea 18 10 62 	orh	r8,0x1062
80000a2a:	f2 08 06 48 	mulu.d	r8,r9,r8
80000a2e:	f2 08 16 06 	lsr	r8,r9,0x6
80000a32:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80000a36:	ee fc ff fc 	ld.w	r12,r7[-4]
80000a3a:	f0 1f 00 0f 	mcall	80000a74 <timerPeriodSet+0xa0>
	timerRCSet(rc);
80000a3e:	ee fc ff f8 	ld.w	r12,r7[-8]
80000a42:	f0 1f 00 0e 	mcall	80000a78 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80000a46:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a4e:	f2 08 02 4a 	mul	r10,r9,r8
80000a52:	e0 68 9f 81 	mov	r8,40833
80000a56:	ea 18 16 5e 	orh	r8,0x165e
80000a5a:	f4 08 04 48 	muls.d	r8,r10,r8
80000a5e:	b5 49       	asr	r9,0x14
80000a60:	f4 08 14 1f 	asr	r8,r10,0x1f
80000a64:	f2 08 01 08 	sub	r8,r9,r8
}
80000a68:	10 9c       	mov	r12,r8
80000a6a:	2f 9d       	sub	sp,-28
80000a6c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a70:	80 00       	ld.sh	r0,r0[0x0]
80000a72:	09 28       	ld.uh	r8,r4++
80000a74:	80 00       	ld.sh	r0,r0[0x0]
80000a76:	10 78       	tst	r8,r8
80000a78:	80 00       	ld.sh	r0,r0[0x0]
80000a7a:	10 62       	and	r2,r8

80000a7c <buttonInit>:
80000a7c:	eb cd 40 80 	pushm	r7,lr
80000a80:	1a 97       	mov	r7,sp
80000a82:	30 1b       	mov	r11,1
80000a84:	35 8c       	mov	r12,88
80000a86:	f0 1f 00 07 	mcall	80000aa0 <buttonInit+0x24>
80000a8a:	30 1b       	mov	r11,1
80000a8c:	35 5c       	mov	r12,85
80000a8e:	f0 1f 00 05 	mcall	80000aa0 <buttonInit+0x24>
80000a92:	30 1b       	mov	r11,1
80000a94:	35 2c       	mov	r12,82
80000a96:	f0 1f 00 03 	mcall	80000aa0 <buttonInit+0x24>
80000a9a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a9e:	00 00       	add	r0,r0
80000aa0:	80 00       	ld.sh	r0,r0[0x0]
80000aa2:	0a dc       	st.w	--r5,r12

80000aa4 <joystickInit>:
80000aa4:	eb cd 40 80 	pushm	r7,lr
80000aa8:	1a 97       	mov	r7,sp
80000aaa:	30 1b       	mov	r11,1
80000aac:	31 bc       	mov	r12,27
80000aae:	f0 1f 00 0b 	mcall	80000ad8 <joystickInit+0x34>
80000ab2:	30 1b       	mov	r11,1
80000ab4:	31 9c       	mov	r12,25
80000ab6:	f0 1f 00 09 	mcall	80000ad8 <joystickInit+0x34>
80000aba:	30 1b       	mov	r11,1
80000abc:	31 cc       	mov	r12,28
80000abe:	f0 1f 00 07 	mcall	80000ad8 <joystickInit+0x34>
80000ac2:	30 1b       	mov	r11,1
80000ac4:	31 4c       	mov	r12,20
80000ac6:	f0 1f 00 05 	mcall	80000ad8 <joystickInit+0x34>
80000aca:	30 1b       	mov	r11,1
80000acc:	31 ac       	mov	r12,26
80000ace:	f0 1f 00 03 	mcall	80000ad8 <joystickInit+0x34>
80000ad2:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ad6:	00 00       	add	r0,r0
80000ad8:	80 00       	ld.sh	r0,r0[0x0]
80000ada:	0a dc       	st.w	--r5,r12

80000adc <gpioInit>:
80000adc:	eb cd 40 80 	pushm	r7,lr
80000ae0:	1a 97       	mov	r7,sp
80000ae2:	20 7d       	sub	sp,28
80000ae4:	ef 4c ff ec 	st.w	r7[-20],r12
80000ae8:	ef 4b ff e8 	st.w	r7[-24],r11
80000aec:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000af0:	a5 58       	asr	r8,0x5
80000af2:	ef 48 ff f4 	st.w	r7[-12],r8
80000af6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000afa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000afe:	ef 48 ff fc 	st.w	r7[-4],r8
80000b02:	30 19       	mov	r9,1
80000b04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b08:	f2 08 09 48 	lsl	r8,r9,r8
80000b0c:	ef 48 ff f8 	st.w	r7[-8],r8
80000b10:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b14:	a9 68       	lsl	r8,0x8
80000b16:	e0 28 f0 00 	sub	r8,61440
80000b1a:	ef 48 ff f0 	st.w	r7[-16],r8
80000b1e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b22:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b26:	91 19       	st.w	r8[0x4],r9
80000b28:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b2c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b30:	91 69       	st.w	r8[0x18],r9
80000b32:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b36:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b3a:	91 a9       	st.w	r8[0x28],r9
80000b3c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000b40:	ef 48 ff e4 	st.w	r7[-28],r8
80000b44:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b48:	58 08       	cp.w	r8,0
80000b4a:	c0 60       	breq	80000b56 <gpioInit+0x7a>
80000b4c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b50:	58 18       	cp.w	r8,1
80000b52:	c0 90       	breq	80000b64 <gpioInit+0x88>
80000b54:	c0 f8       	rjmp	80000b72 <gpioInit+0x96>
80000b56:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b5a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b5e:	f1 49 00 44 	st.w	r8[68],r9
80000b62:	c0 e8       	rjmp	80000b7e <gpioInit+0xa2>
80000b64:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b68:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b6c:	f1 49 00 48 	st.w	r8[72],r9
80000b70:	c0 78       	rjmp	80000b7e <gpioInit+0xa2>
80000b72:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b76:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b7a:	f1 49 00 48 	st.w	r8[72],r9
80000b7e:	2f 9d       	sub	sp,-28
80000b80:	e3 cd 80 80 	ldm	sp++,r7,pc

80000b84 <gpioSet>:
80000b84:	eb cd 40 80 	pushm	r7,lr
80000b88:	1a 97       	mov	r7,sp
80000b8a:	20 5d       	sub	sp,20
80000b8c:	ef 4c ff ec 	st.w	r7[-20],r12
80000b90:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000b94:	a5 58       	asr	r8,0x5
80000b96:	ef 48 ff f4 	st.w	r7[-12],r8
80000b9a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000b9e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000ba2:	ef 48 ff fc 	st.w	r7[-4],r8
80000ba6:	30 19       	mov	r9,1
80000ba8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bac:	f2 08 09 48 	lsl	r8,r9,r8
80000bb0:	ef 48 ff f8 	st.w	r7[-8],r8
80000bb4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bb8:	a9 68       	lsl	r8,0x8
80000bba:	e0 28 f0 00 	sub	r8,61440
80000bbe:	ef 48 ff f0 	st.w	r7[-16],r8
80000bc2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bc6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000bca:	f1 49 00 54 	st.w	r8[84],r9
80000bce:	2f bd       	sub	sp,-20
80000bd0:	e3 cd 80 80 	ldm	sp++,r7,pc

80000bd4 <ledInit>:
80000bd4:	eb cd 40 80 	pushm	r7,lr
80000bd8:	1a 97       	mov	r7,sp
80000bda:	20 9d       	sub	sp,36
80000bdc:	49 e8       	lddpc	r8,80000c54 <ledInit+0x80>
80000bde:	ee cb 00 24 	sub	r11,r7,36
80000be2:	10 9a       	mov	r10,r8
80000be4:	f4 e8 00 00 	ld.d	r8,r10[0]
80000be8:	f6 e9 00 00 	st.d	r11[0],r8
80000bec:	f4 e8 00 08 	ld.d	r8,r10[8]
80000bf0:	f6 e9 00 08 	st.d	r11[8],r8
80000bf4:	f4 e8 00 10 	ld.d	r8,r10[16]
80000bf8:	f6 e9 00 10 	st.d	r11[16],r8
80000bfc:	f4 e8 00 18 	ld.d	r8,r10[24]
80000c00:	f6 e9 00 18 	st.d	r11[24],r8
80000c04:	30 08       	mov	r8,0
80000c06:	ef 48 ff fc 	st.w	r7[-4],r8
80000c0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c0e:	a3 68       	lsl	r8,0x2
80000c10:	ee 08 00 08 	add	r8,r7,r8
80000c14:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000c18:	10 9c       	mov	r12,r8
80000c1a:	f0 1f 00 10 	mcall	80000c58 <ledInit+0x84>
80000c1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c22:	a3 68       	lsl	r8,0x2
80000c24:	ee 08 00 08 	add	r8,r7,r8
80000c28:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000c2c:	30 0b       	mov	r11,0
80000c2e:	10 9c       	mov	r12,r8
80000c30:	f0 1f 00 0b 	mcall	80000c5c <ledInit+0x88>
80000c34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c38:	58 78       	cp.w	r8,7
80000c3a:	5f 18       	srne	r8
80000c3c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000c40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c44:	2f f8       	sub	r8,-1
80000c46:	ef 48 ff fc 	st.w	r7[-4],r8
80000c4a:	58 09       	cp.w	r9,0
80000c4c:	cd f1       	brne	80000c0a <ledInit+0x36>
80000c4e:	2f 7d       	sub	sp,-36
80000c50:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c54:	80 00       	ld.sh	r0,r0[0x0]
80000c56:	1e 00       	add	r0,pc
80000c58:	80 00       	ld.sh	r0,r0[0x0]
80000c5a:	0c 60       	and	r0,r6
80000c5c:	80 00       	ld.sh	r0,r0[0x0]
80000c5e:	0a dc       	st.w	--r5,r12

80000c60 <ledOff>:
80000c60:	eb cd 40 80 	pushm	r7,lr
80000c64:	1a 97       	mov	r7,sp
80000c66:	20 1d       	sub	sp,4
80000c68:	ef 4c ff fc 	st.w	r7[-4],r12
80000c6c:	ee fc ff fc 	ld.w	r12,r7[-4]
80000c70:	f0 1f 00 03 	mcall	80000c7c <ledOff+0x1c>
80000c74:	2f fd       	sub	sp,-4
80000c76:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c7a:	00 00       	add	r0,r0
80000c7c:	80 00       	ld.sh	r0,r0[0x0]
80000c7e:	0b 84       	ld.ub	r4,r5[0x0]

80000c80 <potInit>:
80000c80:	d3 01       	pushm	r11-r12
80000c82:	e0 6c 10 00 	mov	r12,4096
80000c86:	ea 1c ff ff 	orh	r12,0xffff
80000c8a:	31 6b       	mov	r11,22
80000c8c:	99 2b       	st.w	r12[0x8],r11
80000c8e:	99 6b       	st.w	r12[0x18],r11
80000c90:	99 6b       	st.w	r12[0x18],r11
80000c92:	e0 6c 3c 00 	mov	r12,15360
80000c96:	ea 1c ff ff 	orh	r12,0xffff
80000c9a:	30 1b       	mov	r11,1
80000c9c:	99 0b       	st.w	r12[0x0],r11
80000c9e:	e0 6b 0f 1f 	mov	r11,3871
80000ca2:	b1 6b       	lsl	r11,0x10
80000ca4:	99 1b       	st.w	r12[0x4],r11
80000ca6:	30 2b       	mov	r11,2
80000ca8:	99 4b       	st.w	r12[0x10],r11
80000caa:	d3 02       	popm	r11-r12
80000cac:	1c 9f       	mov	pc,lr

80000cae <potGetValue>:
80000cae:	d1 81       	pushm	r10-r11
80000cb0:	e0 6c 3c 00 	mov	r12,15360
80000cb4:	ea 1c ff ff 	orh	r12,0xffff
80000cb8:	30 2b       	mov	r11,2
80000cba:	99 0b       	st.w	r12[0x0],r11

80000cbc <a1>:
80000cbc:	78 7a       	ld.w	r10,r12[0x1c]
80000cbe:	16 7a       	tst	r10,r11
80000cc0:	cf e0       	breq	80000cbc <a1>
80000cc2:	78 dc       	ld.w	r12,r12[0x34]
80000cc4:	d1 82       	popm	r10-r11
80000cc6:	1c 9f       	mov	pc,lr

80000cc8 <usartReset>:
80000cc8:	eb cd 40 80 	pushm	r7,lr
80000ccc:	1a 97       	mov	r7,sp
80000cce:	20 3d       	sub	sp,12
80000cd0:	ef 4c ff f8 	st.w	r7[-8],r12
80000cd4:	f0 1f 00 16 	mcall	80000d2c <usartReset+0x64>
80000cd8:	18 98       	mov	r8,r12
80000cda:	ef 48 ff fc 	st.w	r7[-4],r8
80000cde:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ce2:	58 08       	cp.w	r8,0
80000ce4:	c0 30       	breq	80000cea <usartReset+0x22>
80000ce6:	f0 1f 00 13 	mcall	80000d30 <usartReset+0x68>
80000cea:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000cee:	3f f8       	mov	r8,-1
80000cf0:	93 38       	st.w	r9[0xc],r8
80000cf2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cf6:	70 58       	ld.w	r8,r8[0x14]
80000cf8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cfc:	58 08       	cp.w	r8,0
80000cfe:	c0 30       	breq	80000d04 <usartReset+0x3c>
80000d00:	f0 1f 00 0d 	mcall	80000d34 <usartReset+0x6c>
80000d04:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d08:	30 08       	mov	r8,0
80000d0a:	93 18       	st.w	r9[0x4],r8
80000d0c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d10:	30 08       	mov	r8,0
80000d12:	93 98       	st.w	r9[0x24],r8
80000d14:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d18:	30 08       	mov	r8,0
80000d1a:	93 a8       	st.w	r9[0x28],r8
80000d1c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d20:	ea 68 61 0c 	mov	r8,680204
80000d24:	93 08       	st.w	r9[0x0],r8
80000d26:	2f dd       	sub	sp,-12
80000d28:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d2c:	80 00       	ld.sh	r0,r0[0x0]
80000d2e:	1b 6e       	ld.uh	lr,--sp
80000d30:	80 00       	ld.sh	r0,r0[0x0]
80000d32:	1b 66       	ld.uh	r6,--sp
80000d34:	80 00       	ld.sh	r0,r0[0x0]
80000d36:	1b 6a       	ld.uh	r10,--sp

80000d38 <usartSetBaudrate>:
80000d38:	eb cd 40 80 	pushm	r7,lr
80000d3c:	1a 97       	mov	r7,sp
80000d3e:	20 bd       	sub	sp,44
80000d40:	ef 4c ff ec 	st.w	r7[-20],r12
80000d44:	ef 4b ff e8 	st.w	r7[-24],r11
80000d48:	ef 4a ff e4 	st.w	r7[-28],r10
80000d4c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000d50:	f0 09 15 04 	lsl	r9,r8,0x4
80000d54:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000d58:	10 39       	cp.w	r9,r8
80000d5a:	e0 8b 00 06 	brhi	80000d66 <usartSetBaudrate+0x2e>
80000d5e:	31 09       	mov	r9,16
80000d60:	ef 49 ff d4 	st.w	r7[-44],r9
80000d64:	c0 48       	rjmp	80000d6c <usartSetBaudrate+0x34>
80000d66:	30 88       	mov	r8,8
80000d68:	ef 48 ff d4 	st.w	r7[-44],r8
80000d6c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80000d70:	ef 49 ff f0 	st.w	r7[-16],r9
80000d74:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000d78:	f0 0a 15 03 	lsl	r10,r8,0x3
80000d7c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000d80:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000d84:	f2 08 02 48 	mul	r8,r9,r8
80000d88:	a1 98       	lsr	r8,0x1
80000d8a:	10 0a       	add	r10,r8
80000d8c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000d90:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000d94:	f2 08 02 48 	mul	r8,r9,r8
80000d98:	f4 08 0d 08 	divu	r8,r10,r8
80000d9c:	ef 48 ff f4 	st.w	r7[-12],r8
80000da0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000da4:	a3 98       	lsr	r8,0x3
80000da6:	ef 48 ff f8 	st.w	r7[-8],r8
80000daa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000dae:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000db2:	ef 48 ff fc 	st.w	r7[-4],r8
80000db6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dba:	58 08       	cp.w	r8,0
80000dbc:	c0 70       	breq	80000dca <usartSetBaudrate+0x92>
80000dbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dc2:	e0 48 ff ff 	cp.w	r8,65535
80000dc6:	e0 88 00 06 	brls	80000dd2 <usartSetBaudrate+0x9a>
80000dca:	30 18       	mov	r8,1
80000dcc:	ef 48 ff d8 	st.w	r7[-40],r8
80000dd0:	c2 c8       	rjmp	80000e28 <usartSetBaudrate+0xf0>
80000dd2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000dd6:	70 18       	ld.w	r8,r8[0x4]
80000dd8:	10 99       	mov	r9,r8
80000dda:	e4 19 ff f7 	andh	r9,0xfff7
80000dde:	e0 19 fe cf 	andl	r9,0xfecf
80000de2:	ef 49 ff dc 	st.w	r7[-36],r9
80000de6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000dea:	59 08       	cp.w	r8,16
80000dec:	c0 60       	breq	80000df8 <usartSetBaudrate+0xc0>
80000dee:	e8 68 00 00 	mov	r8,524288
80000df2:	ef 48 ff e0 	st.w	r7[-32],r8
80000df6:	c0 48       	rjmp	80000dfe <usartSetBaudrate+0xc6>
80000df8:	30 09       	mov	r9,0
80000dfa:	ef 49 ff e0 	st.w	r7[-32],r9
80000dfe:	ee f9 ff dc 	ld.w	r9,r7[-36]
80000e02:	ee f8 ff e0 	ld.w	r8,r7[-32]
80000e06:	10 49       	or	r9,r8
80000e08:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e0c:	91 19       	st.w	r8[0x4],r9
80000e0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e12:	f0 09 15 10 	lsl	r9,r8,0x10
80000e16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e1a:	10 49       	or	r9,r8
80000e1c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e20:	91 89       	st.w	r8[0x20],r9
80000e22:	30 09       	mov	r9,0
80000e24:	ef 49 ff d8 	st.w	r7[-40],r9
80000e28:	ee f8 ff d8 	ld.w	r8,r7[-40]
80000e2c:	10 9c       	mov	r12,r8
80000e2e:	2f 5d       	sub	sp,-44
80000e30:	e3 cd 80 80 	ldm	sp++,r7,pc

80000e34 <usartInit>:
80000e34:	eb cd 40 80 	pushm	r7,lr
80000e38:	1a 97       	mov	r7,sp
80000e3a:	20 4d       	sub	sp,16
80000e3c:	ef 4c ff f8 	st.w	r7[-8],r12
80000e40:	ef 4b ff f4 	st.w	r7[-12],r11
80000e44:	ef 4a ff f0 	st.w	r7[-16],r10
80000e48:	fe 78 10 00 	mov	r8,-61440
80000e4c:	ef 48 ff fc 	st.w	r7[-4],r8
80000e50:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000e54:	30 18       	mov	r8,1
80000e56:	93 28       	st.w	r9[0x8],r8
80000e58:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000e5c:	30 28       	mov	r8,2
80000e5e:	93 28       	st.w	r9[0x8],r8
80000e60:	ee fc ff f8 	ld.w	r12,r7[-8]
80000e64:	f0 1f 00 3b 	mcall	80000f50 <usartInit+0x11c>
80000e68:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000e6c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e70:	70 08       	ld.w	r8,r8[0x0]
80000e72:	12 9a       	mov	r10,r9
80000e74:	10 9b       	mov	r11,r8
80000e76:	ee fc ff f8 	ld.w	r12,r7[-8]
80000e7a:	f0 1f 00 37 	mcall	80000f54 <usartInit+0x120>
80000e7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e82:	11 c9       	ld.ub	r9,r8[0x4]
80000e84:	30 98       	mov	r8,9
80000e86:	f0 09 18 00 	cp.b	r9,r8
80000e8a:	c0 a1       	brne	80000e9e <usartInit+0x6a>
80000e8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e90:	70 18       	ld.w	r8,r8[0x4]
80000e92:	10 99       	mov	r9,r8
80000e94:	b1 b9       	sbr	r9,0x11
80000e96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e9a:	91 19       	st.w	r8[0x4],r9
80000e9c:	c0 d8       	rjmp	80000eb6 <usartInit+0x82>
80000e9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ea2:	70 19       	ld.w	r9,r8[0x4]
80000ea4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ea8:	11 c8       	ld.ub	r8,r8[0x4]
80000eaa:	20 58       	sub	r8,5
80000eac:	a7 68       	lsl	r8,0x6
80000eae:	10 49       	or	r9,r8
80000eb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000eb4:	91 19       	st.w	r8[0x4],r9
80000eb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000eba:	70 1a       	ld.w	r10,r8[0x4]
80000ebc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ec0:	11 d8       	ld.ub	r8,r8[0x5]
80000ec2:	f0 09 15 09 	lsl	r9,r8,0x9
80000ec6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000eca:	f1 38 00 08 	ld.ub	r8,r8[8]
80000ece:	af 68       	lsl	r8,0xe
80000ed0:	f3 e8 10 08 	or	r8,r9,r8
80000ed4:	f5 e8 10 09 	or	r9,r10,r8
80000ed8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000edc:	91 19       	st.w	r8[0x4],r9
80000ede:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ee2:	90 39       	ld.sh	r9,r8[0x6]
80000ee4:	30 28       	mov	r8,2
80000ee6:	f0 09 19 00 	cp.h	r9,r8
80000eea:	e0 88 00 14 	brls	80000f12 <usartInit+0xde>
80000eee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ef2:	70 18       	ld.w	r8,r8[0x4]
80000ef4:	10 99       	mov	r9,r8
80000ef6:	ad b9       	sbr	r9,0xd
80000ef8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000efc:	91 19       	st.w	r8[0x4],r9
80000efe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f02:	90 38       	ld.sh	r8,r8[0x6]
80000f04:	5c 78       	castu.h	r8
80000f06:	20 28       	sub	r8,2
80000f08:	10 99       	mov	r9,r8
80000f0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f0e:	91 a9       	st.w	r8[0x28],r9
80000f10:	c0 d8       	rjmp	80000f2a <usartInit+0xf6>
80000f12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f16:	70 19       	ld.w	r9,r8[0x4]
80000f18:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f1c:	90 38       	ld.sh	r8,r8[0x6]
80000f1e:	5c 78       	castu.h	r8
80000f20:	ad 68       	lsl	r8,0xc
80000f22:	10 49       	or	r9,r8
80000f24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f28:	91 19       	st.w	r8[0x4],r9
80000f2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f2e:	70 18       	ld.w	r8,r8[0x4]
80000f30:	10 99       	mov	r9,r8
80000f32:	e0 19 ff f0 	andl	r9,0xfff0
80000f36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f3a:	91 19       	st.w	r8[0x4],r9
80000f3c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f40:	35 08       	mov	r8,80
80000f42:	93 08       	st.w	r9[0x0],r8
80000f44:	30 08       	mov	r8,0
80000f46:	10 9c       	mov	r12,r8
80000f48:	2f cd       	sub	sp,-16
80000f4a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f4e:	00 00       	add	r0,r0
80000f50:	80 00       	ld.sh	r0,r0[0x0]
80000f52:	0c c8       	st.b	r6++,r8
80000f54:	80 00       	ld.sh	r0,r0[0x0]
80000f56:	0d 38       	ld.ub	r8,r6++

80000f58 <usartWriteChar>:
80000f58:	eb cd 40 80 	pushm	r7,lr
80000f5c:	1a 97       	mov	r7,sp
80000f5e:	20 3d       	sub	sp,12
80000f60:	ef 4c ff f8 	st.w	r7[-8],r12
80000f64:	16 98       	mov	r8,r11
80000f66:	ef 68 ff f4 	st.b	r7[-12],r8
80000f6a:	e4 68 00 00 	mov	r8,262144
80000f6e:	ef 48 ff fc 	st.w	r7[-4],r8
80000f72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f76:	58 08       	cp.w	r8,0
80000f78:	5f 18       	srne	r8
80000f7a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000f7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f82:	20 18       	sub	r8,1
80000f84:	ef 48 ff fc 	st.w	r7[-4],r8
80000f88:	12 98       	mov	r8,r9
80000f8a:	ec 18 00 01 	eorl	r8,0x1
80000f8e:	5c 58       	castu.b	r8
80000f90:	c0 71       	brne	80000f9e <usartWriteChar+0x46>
80000f92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f96:	70 58       	ld.w	r8,r8[0x14]
80000f98:	e2 18 00 02 	andl	r8,0x2,COH
80000f9c:	ce b0       	breq	80000f72 <usartWriteChar+0x1a>
80000f9e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80000fa2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fa6:	91 79       	st.w	r8[0x1c],r9
80000fa8:	2f dd       	sub	sp,-12
80000faa:	e3 cd 80 80 	ldm	sp++,r7,pc
80000fae:	d7 03       	nop

80000fb0 <usartWriteLine>:
80000fb0:	eb cd 40 80 	pushm	r7,lr
80000fb4:	1a 97       	mov	r7,sp
80000fb6:	20 2d       	sub	sp,8
80000fb8:	ef 4c ff fc 	st.w	r7[-4],r12
80000fbc:	ef 4b ff f8 	st.w	r7[-8],r11
80000fc0:	c1 88       	rjmp	80000ff0 <usartWriteLine+0x40>
80000fc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fc6:	11 88       	ld.ub	r8,r8[0x0]
80000fc8:	58 a8       	cp.w	r8,10
80000fca:	c0 61       	brne	80000fd6 <usartWriteLine+0x26>
80000fcc:	30 db       	mov	r11,13
80000fce:	ee fc ff fc 	ld.w	r12,r7[-4]
80000fd2:	f0 1f 00 0c 	mcall	80001000 <usartWriteLine+0x50>
80000fd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fda:	11 88       	ld.ub	r8,r8[0x0]
80000fdc:	10 9b       	mov	r11,r8
80000fde:	ee fc ff fc 	ld.w	r12,r7[-4]
80000fe2:	f0 1f 00 08 	mcall	80001000 <usartWriteLine+0x50>
80000fe6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fea:	2f f8       	sub	r8,-1
80000fec:	ef 48 ff f8 	st.w	r7[-8],r8
80000ff0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ff4:	11 88       	ld.ub	r8,r8[0x0]
80000ff6:	58 08       	cp.w	r8,0
80000ff8:	ce 51       	brne	80000fc2 <usartWriteLine+0x12>
80000ffa:	2f ed       	sub	sp,-8
80000ffc:	e3 cd 80 80 	ldm	sp++,r7,pc
80001000:	80 00       	ld.sh	r0,r0[0x0]
80001002:	0f 58       	ld.sh	r8,--r7

80001004 <timerInit>:
80001004:	d5 01       	pushm	r11,lr
80001006:	d2 01       	pushm	r12
80001008:	f0 1f 00 28 	mcall	800010a8 <timerClearInterrupt+0x10>
8000100c:	f0 1f 00 28 	mcall	800010ac <timerClearInterrupt+0x14>
80001010:	e0 6c 38 00 	mov	r12,14336
80001014:	ea 1c ff ff 	orh	r12,0xffff
80001018:	e0 6b c0 00 	mov	r11,49152
8000101c:	ea 1b 00 00 	orh	r11,0x0
80001020:	99 1b       	st.w	r12[0x4],r11
80001022:	30 1b       	mov	r11,1
80001024:	a5 6b       	lsl	r11,0x4
80001026:	99 9b       	st.w	r12[0x24],r11
80001028:	d2 02       	popm	r12
8000102a:	f0 1f 00 22 	mcall	800010b0 <timerClearInterrupt+0x18>
8000102e:	d5 02       	popm	r11,lr
80001030:	1c 9f       	mov	pc,lr

80001032 <timerReset>:
80001032:	d3 01       	pushm	r11-r12
80001034:	e0 6c 38 00 	mov	r12,14336
80001038:	ea 1c ff ff 	orh	r12,0xffff
8000103c:	30 5b       	mov	r11,5
8000103e:	99 0b       	st.w	r12[0x0],r11
80001040:	e0 6b 00 08 	mov	r11,8
80001044:	ea 1b 00 00 	orh	r11,0x0
80001048:	76 0b       	ld.w	r11,r11[0x0]
8000104a:	99 7b       	st.w	r12[0x1c],r11
8000104c:	d3 02       	popm	r11-r12
8000104e:	1c 9f       	mov	pc,lr

80001050 <timerStop>:
80001050:	d3 01       	pushm	r11-r12
80001052:	e0 6c 38 00 	mov	r12,14336
80001056:	ea 1c ff ff 	orh	r12,0xffff
8000105a:	30 2b       	mov	r11,2
8000105c:	99 0b       	st.w	r12[0x0],r11
8000105e:	d3 02       	popm	r11-r12
80001060:	1c 9f       	mov	pc,lr

80001062 <timerRCSet>:
80001062:	d3 01       	pushm	r11-r12
80001064:	49 4b       	lddpc	r11,800010b4 <timerClearInterrupt+0x1c>
80001066:	97 0c       	st.w	r11[0x0],r12
80001068:	e0 6c 38 00 	mov	r12,14336
8000106c:	ea 1c ff ff 	orh	r12,0xffff
80001070:	76 0b       	ld.w	r11,r11[0x0]
80001072:	99 7b       	st.w	r12[0x1c],r11
80001074:	d3 02       	popm	r11-r12
80001076:	1c 9f       	mov	pc,lr

80001078 <timerPrescaleSet>:
80001078:	d3 81       	pushm	r10-r12
8000107a:	49 0b       	lddpc	r11,800010b8 <timerClearInterrupt+0x20>
8000107c:	97 0c       	st.w	r11[0x0],r12
8000107e:	e0 6c 38 00 	mov	r12,14336
80001082:	ea 1c ff ff 	orh	r12,0xffff
80001086:	78 1a       	ld.w	r10,r12[0x4]
80001088:	3f 8b       	mov	r11,-8
8000108a:	16 6a       	and	r10,r11
8000108c:	48 bb       	lddpc	r11,800010b8 <timerClearInterrupt+0x20>
8000108e:	76 0b       	ld.w	r11,r11[0x0]
80001090:	14 4b       	or	r11,r10
80001092:	99 1b       	st.w	r12[0x4],r11
80001094:	d3 82       	popm	r10-r12
80001096:	1c 9f       	mov	pc,lr

80001098 <timerClearInterrupt>:
80001098:	d2 01       	pushm	r12
8000109a:	e0 6c 38 00 	mov	r12,14336
8000109e:	ea 1c ff ff 	orh	r12,0xffff
800010a2:	78 8c       	ld.w	r12,r12[0x20]
800010a4:	d2 02       	popm	r12
800010a6:	1c 9f       	mov	pc,lr
800010a8:	80 00       	ld.sh	r0,r0[0x0]
800010aa:	1b 66       	ld.uh	r6,--sp
800010ac:	80 00       	ld.sh	r0,r0[0x0]
800010ae:	10 98       	mov	r8,r8
800010b0:	80 00       	ld.sh	r0,r0[0x0]
800010b2:	09 d4       	ld.ub	r4,r4[0x5]
800010b4:	00 00       	add	r0,r0
800010b6:	00 08       	add	r8,r0
800010b8:	00 00       	add	r0,r0
800010ba:	00 0c       	add	r12,r0

800010bc <_stext>:
800010bc:	49 7d       	lddpc	sp,80001118 <udata_end+0x4>
800010be:	49 80       	lddpc	r0,8000111c <udata_end+0x8>
800010c0:	1a d0       	st.w	--sp,r0
800010c2:	e5 cd 20 00 	ldmts	sp,sp
800010c6:	1b 00       	ld.w	r0,sp++
800010c8:	49 60       	lddpc	r0,80001120 <udata_end+0xc>
800010ca:	e3 b0 00 01 	mtsr	0x4,r0
800010ce:	d5 53       	csrf	0x15
800010d0:	e0 6c 0c 00 	mov	r12,3072
800010d4:	ea 1c ff ff 	orh	r12,0xffff
800010d8:	e0 6b 01 07 	mov	r11,263
800010dc:	99 ab       	st.w	r12[0x28],r11
800010de:	30 4b       	mov	r11,4
800010e0:	99 0b       	st.w	r12[0x0],r11
800010e2:	e0 6a 00 80 	mov	r10,128

800010e6 <xw8>:
800010e6:	79 5b       	ld.w	r11,r12[0x54]
800010e8:	14 7b       	tst	r11,r10
800010ea:	cf e0       	breq	800010e6 <xw8>
800010ec:	30 5b       	mov	r11,5
800010ee:	99 0b       	st.w	r12[0x0],r11

800010f0 <idata_>:
800010f0:	48 d0       	lddpc	r0,80001124 <udata_end+0x10>
800010f2:	48 e1       	lddpc	r1,80001128 <udata_end+0x14>
800010f4:	02 30       	cp.w	r0,r1
800010f6:	c0 62       	brcc	80001102 <idata_end>
800010f8:	48 d2       	lddpc	r2,8000112c <udata_end+0x18>

800010fa <idata_loop>:
800010fa:	05 04       	ld.w	r4,r2++
800010fc:	00 a4       	st.w	r0++,r4
800010fe:	02 30       	cp.w	r0,r1
80001100:	cf d3       	brcs	800010fa <idata_loop>

80001102 <idata_end>:
80001102:	48 c0       	lddpc	r0,80001130 <udata_end+0x1c>
80001104:	48 c1       	lddpc	r1,80001134 <udata_end+0x20>
80001106:	02 30       	cp.w	r0,r1
80001108:	c0 62       	brcc	80001114 <udata_end>
8000110a:	30 02       	mov	r2,0
8000110c:	30 03       	mov	r3,0

8000110e <udata_loop>:
8000110e:	00 a2       	st.w	r0++,r2
80001110:	02 30       	cp.w	r0,r1
80001112:	cf e3       	brcs	8000110e <udata_loop>

80001114 <udata_end>:
80001114:	48 9f       	lddpc	pc,80001138 <udata_end+0x24>
80001116:	00 00       	add	r0,r0
80001118:	00 01       	add	r1,r0
8000111a:	00 00       	add	r0,r0
8000111c:	00 00       	add	r0,r0
8000111e:	f0 00       	*unknown*
80001120:	80 00       	ld.sh	r0,r0[0x0]
80001122:	1a 00       	add	r0,sp
80001124:	00 00       	add	r0,r0
80001126:	00 08       	add	r8,r0
80001128:	00 00       	add	r0,r0
8000112a:	05 18       	ld.sh	r8,r2++
8000112c:	80 00       	ld.sh	r0,r0[0x0]
8000112e:	1e 88       	andn	r8,pc
80001130:	00 00       	add	r0,r0
80001132:	05 18       	ld.sh	r8,r2++
80001134:	00 00       	add	r0,r0
80001136:	07 98       	ld.ub	r8,r3[0x1]
80001138:	80 00       	ld.sh	r0,r0[0x0]
8000113a:	01 3c       	ld.ub	r12,r0++

8000113c <malloc>:
8000113c:	d4 01       	pushm	lr
8000113e:	48 48       	lddpc	r8,8000114c <malloc+0x10>
80001140:	18 9b       	mov	r11,r12
80001142:	70 0c       	ld.w	r12,r8[0x0]
80001144:	f0 1f 00 03 	mcall	80001150 <malloc+0x14>
80001148:	d8 02       	popm	pc
8000114a:	00 00       	add	r0,r0
8000114c:	00 00       	add	r0,r0
8000114e:	05 10       	ld.sh	r0,r2++
80001150:	80 00       	ld.sh	r0,r0[0x0]
80001152:	11 54       	ld.sh	r4,--r8

80001154 <_malloc_r>:
80001154:	d4 31       	pushm	r0-r7,lr
80001156:	f6 c8 ff f5 	sub	r8,r11,-11
8000115a:	18 95       	mov	r5,r12
8000115c:	10 97       	mov	r7,r8
8000115e:	e0 17 ff f8 	andl	r7,0xfff8
80001162:	59 68       	cp.w	r8,22
80001164:	f9 b7 08 10 	movls	r7,16
80001168:	16 37       	cp.w	r7,r11
8000116a:	5f 38       	srlo	r8
8000116c:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001170:	c0 50       	breq	8000117a <_malloc_r+0x26>
80001172:	30 c8       	mov	r8,12
80001174:	99 38       	st.w	r12[0xc],r8
80001176:	e0 8f 01 f3 	bral	8000155c <_malloc_r+0x408>
8000117a:	f0 1f 00 50 	mcall	800012b8 <_malloc_r+0x164>
8000117e:	e0 47 01 f7 	cp.w	r7,503
80001182:	e0 8b 00 1c 	brhi	800011ba <_malloc_r+0x66>
80001186:	ee 03 16 03 	lsr	r3,r7,0x3
8000118a:	4c d8       	lddpc	r8,800012bc <_malloc_r+0x168>
8000118c:	f0 03 00 38 	add	r8,r8,r3<<0x3
80001190:	70 36       	ld.w	r6,r8[0xc]
80001192:	10 36       	cp.w	r6,r8
80001194:	c0 61       	brne	800011a0 <_malloc_r+0x4c>
80001196:	ec c8 ff f8 	sub	r8,r6,-8
8000119a:	70 36       	ld.w	r6,r8[0xc]
8000119c:	10 36       	cp.w	r6,r8
8000119e:	c0 c0       	breq	800011b6 <_malloc_r+0x62>
800011a0:	6c 18       	ld.w	r8,r6[0x4]
800011a2:	e0 18 ff fc 	andl	r8,0xfffc
800011a6:	6c 3a       	ld.w	r10,r6[0xc]
800011a8:	ec 08 00 09 	add	r9,r6,r8
800011ac:	0a 9c       	mov	r12,r5
800011ae:	6c 28       	ld.w	r8,r6[0x8]
800011b0:	95 28       	st.w	r10[0x8],r8
800011b2:	91 3a       	st.w	r8[0xc],r10
800011b4:	c4 68       	rjmp	80001240 <_malloc_r+0xec>
800011b6:	2f e3       	sub	r3,-2
800011b8:	c4 c8       	rjmp	80001250 <_malloc_r+0xfc>
800011ba:	ee 03 16 09 	lsr	r3,r7,0x9
800011be:	c0 41       	brne	800011c6 <_malloc_r+0x72>
800011c0:	ee 03 16 03 	lsr	r3,r7,0x3
800011c4:	c2 68       	rjmp	80001210 <_malloc_r+0xbc>
800011c6:	58 43       	cp.w	r3,4
800011c8:	e0 8b 00 06 	brhi	800011d4 <_malloc_r+0x80>
800011cc:	ee 03 16 06 	lsr	r3,r7,0x6
800011d0:	2c 83       	sub	r3,-56
800011d2:	c1 f8       	rjmp	80001210 <_malloc_r+0xbc>
800011d4:	59 43       	cp.w	r3,20
800011d6:	e0 8b 00 04 	brhi	800011de <_malloc_r+0x8a>
800011da:	2a 53       	sub	r3,-91
800011dc:	c1 a8       	rjmp	80001210 <_malloc_r+0xbc>
800011de:	e0 43 00 54 	cp.w	r3,84
800011e2:	e0 8b 00 06 	brhi	800011ee <_malloc_r+0x9a>
800011e6:	ee 03 16 0c 	lsr	r3,r7,0xc
800011ea:	29 23       	sub	r3,-110
800011ec:	c1 28       	rjmp	80001210 <_malloc_r+0xbc>
800011ee:	e0 43 01 54 	cp.w	r3,340
800011f2:	e0 8b 00 06 	brhi	800011fe <_malloc_r+0xaa>
800011f6:	ee 03 16 0f 	lsr	r3,r7,0xf
800011fa:	28 93       	sub	r3,-119
800011fc:	c0 a8       	rjmp	80001210 <_malloc_r+0xbc>
800011fe:	e0 43 05 54 	cp.w	r3,1364
80001202:	e0 88 00 04 	brls	8000120a <_malloc_r+0xb6>
80001206:	37 e3       	mov	r3,126
80001208:	c0 48       	rjmp	80001210 <_malloc_r+0xbc>
8000120a:	ee 03 16 12 	lsr	r3,r7,0x12
8000120e:	28 43       	sub	r3,-124
80001210:	4a ba       	lddpc	r10,800012bc <_malloc_r+0x168>
80001212:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80001216:	74 36       	ld.w	r6,r10[0xc]
80001218:	c1 98       	rjmp	8000124a <_malloc_r+0xf6>
8000121a:	6c 19       	ld.w	r9,r6[0x4]
8000121c:	e0 19 ff fc 	andl	r9,0xfffc
80001220:	f2 07 01 0b 	sub	r11,r9,r7
80001224:	58 fb       	cp.w	r11,15
80001226:	e0 8a 00 04 	brle	8000122e <_malloc_r+0xda>
8000122a:	20 13       	sub	r3,1
8000122c:	c1 18       	rjmp	8000124e <_malloc_r+0xfa>
8000122e:	6c 38       	ld.w	r8,r6[0xc]
80001230:	58 0b       	cp.w	r11,0
80001232:	c0 b5       	brlt	80001248 <_malloc_r+0xf4>
80001234:	6c 2a       	ld.w	r10,r6[0x8]
80001236:	ec 09 00 09 	add	r9,r6,r9
8000123a:	0a 9c       	mov	r12,r5
8000123c:	91 2a       	st.w	r8[0x8],r10
8000123e:	95 38       	st.w	r10[0xc],r8
80001240:	72 18       	ld.w	r8,r9[0x4]
80001242:	a1 a8       	sbr	r8,0x0
80001244:	93 18       	st.w	r9[0x4],r8
80001246:	cb c8       	rjmp	800013be <_malloc_r+0x26a>
80001248:	10 96       	mov	r6,r8
8000124a:	14 36       	cp.w	r6,r10
8000124c:	ce 71       	brne	8000121a <_malloc_r+0xc6>
8000124e:	2f f3       	sub	r3,-1
80001250:	49 ba       	lddpc	r10,800012bc <_malloc_r+0x168>
80001252:	f4 cc ff f8 	sub	r12,r10,-8
80001256:	78 26       	ld.w	r6,r12[0x8]
80001258:	18 36       	cp.w	r6,r12
8000125a:	c6 e0       	breq	80001336 <_malloc_r+0x1e2>
8000125c:	6c 19       	ld.w	r9,r6[0x4]
8000125e:	e0 19 ff fc 	andl	r9,0xfffc
80001262:	f2 07 01 08 	sub	r8,r9,r7
80001266:	58 f8       	cp.w	r8,15
80001268:	e0 89 00 90 	brgt	80001388 <_malloc_r+0x234>
8000126c:	99 3c       	st.w	r12[0xc],r12
8000126e:	99 2c       	st.w	r12[0x8],r12
80001270:	58 08       	cp.w	r8,0
80001272:	c0 55       	brlt	8000127c <_malloc_r+0x128>
80001274:	ec 09 00 09 	add	r9,r6,r9
80001278:	0a 9c       	mov	r12,r5
8000127a:	ce 3b       	rjmp	80001240 <_malloc_r+0xec>
8000127c:	e0 49 01 ff 	cp.w	r9,511
80001280:	e0 8b 00 13 	brhi	800012a6 <_malloc_r+0x152>
80001284:	a3 99       	lsr	r9,0x3
80001286:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000128a:	70 2b       	ld.w	r11,r8[0x8]
8000128c:	8d 38       	st.w	r6[0xc],r8
8000128e:	8d 2b       	st.w	r6[0x8],r11
80001290:	97 36       	st.w	r11[0xc],r6
80001292:	91 26       	st.w	r8[0x8],r6
80001294:	a3 49       	asr	r9,0x2
80001296:	74 18       	ld.w	r8,r10[0x4]
80001298:	30 1b       	mov	r11,1
8000129a:	f6 09 09 49 	lsl	r9,r11,r9
8000129e:	f1 e9 10 09 	or	r9,r8,r9
800012a2:	95 19       	st.w	r10[0x4],r9
800012a4:	c4 98       	rjmp	80001336 <_malloc_r+0x1e2>
800012a6:	f2 0a 16 09 	lsr	r10,r9,0x9
800012aa:	58 4a       	cp.w	r10,4
800012ac:	e0 8b 00 0a 	brhi	800012c0 <_malloc_r+0x16c>
800012b0:	f2 0a 16 06 	lsr	r10,r9,0x6
800012b4:	2c 8a       	sub	r10,-56
800012b6:	c2 38       	rjmp	800012fc <_malloc_r+0x1a8>
800012b8:	80 00       	ld.sh	r0,r0[0x0]
800012ba:	15 a4       	ld.ub	r4,r10[0x2]
800012bc:	00 00       	add	r0,r0
800012be:	00 10       	sub	r0,r0
800012c0:	59 4a       	cp.w	r10,20
800012c2:	e0 8b 00 04 	brhi	800012ca <_malloc_r+0x176>
800012c6:	2a 5a       	sub	r10,-91
800012c8:	c1 a8       	rjmp	800012fc <_malloc_r+0x1a8>
800012ca:	e0 4a 00 54 	cp.w	r10,84
800012ce:	e0 8b 00 06 	brhi	800012da <_malloc_r+0x186>
800012d2:	f2 0a 16 0c 	lsr	r10,r9,0xc
800012d6:	29 2a       	sub	r10,-110
800012d8:	c1 28       	rjmp	800012fc <_malloc_r+0x1a8>
800012da:	e0 4a 01 54 	cp.w	r10,340
800012de:	e0 8b 00 06 	brhi	800012ea <_malloc_r+0x196>
800012e2:	f2 0a 16 0f 	lsr	r10,r9,0xf
800012e6:	28 9a       	sub	r10,-119
800012e8:	c0 a8       	rjmp	800012fc <_malloc_r+0x1a8>
800012ea:	e0 4a 05 54 	cp.w	r10,1364
800012ee:	e0 88 00 04 	brls	800012f6 <_malloc_r+0x1a2>
800012f2:	37 ea       	mov	r10,126
800012f4:	c0 48       	rjmp	800012fc <_malloc_r+0x1a8>
800012f6:	f2 0a 16 12 	lsr	r10,r9,0x12
800012fa:	28 4a       	sub	r10,-124
800012fc:	4c 8b       	lddpc	r11,8000141c <_malloc_r+0x2c8>
800012fe:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80001302:	68 28       	ld.w	r8,r4[0x8]
80001304:	08 38       	cp.w	r8,r4
80001306:	c0 e1       	brne	80001322 <_malloc_r+0x1ce>
80001308:	76 19       	ld.w	r9,r11[0x4]
8000130a:	a3 4a       	asr	r10,0x2
8000130c:	30 1e       	mov	lr,1
8000130e:	fc 0a 09 4a 	lsl	r10,lr,r10
80001312:	f3 ea 10 0a 	or	r10,r9,r10
80001316:	10 99       	mov	r9,r8
80001318:	97 1a       	st.w	r11[0x4],r10
8000131a:	c0 a8       	rjmp	8000132e <_malloc_r+0x1da>
8000131c:	70 28       	ld.w	r8,r8[0x8]
8000131e:	08 38       	cp.w	r8,r4
80001320:	c0 60       	breq	8000132c <_malloc_r+0x1d8>
80001322:	70 1a       	ld.w	r10,r8[0x4]
80001324:	e0 1a ff fc 	andl	r10,0xfffc
80001328:	14 39       	cp.w	r9,r10
8000132a:	cf 93       	brcs	8000131c <_malloc_r+0x1c8>
8000132c:	70 39       	ld.w	r9,r8[0xc]
8000132e:	8d 39       	st.w	r6[0xc],r9
80001330:	8d 28       	st.w	r6[0x8],r8
80001332:	91 36       	st.w	r8[0xc],r6
80001334:	93 26       	st.w	r9[0x8],r6
80001336:	e6 08 14 02 	asr	r8,r3,0x2
8000133a:	30 1b       	mov	r11,1
8000133c:	4b 84       	lddpc	r4,8000141c <_malloc_r+0x2c8>
8000133e:	f6 08 09 4b 	lsl	r11,r11,r8
80001342:	68 18       	ld.w	r8,r4[0x4]
80001344:	10 3b       	cp.w	r11,r8
80001346:	e0 8b 00 6f 	brhi	80001424 <_malloc_r+0x2d0>
8000134a:	f7 e8 00 09 	and	r9,r11,r8
8000134e:	c0 b1       	brne	80001364 <_malloc_r+0x210>
80001350:	e0 13 ff fc 	andl	r3,0xfffc
80001354:	a1 7b       	lsl	r11,0x1
80001356:	2f c3       	sub	r3,-4
80001358:	c0 38       	rjmp	8000135e <_malloc_r+0x20a>
8000135a:	2f c3       	sub	r3,-4
8000135c:	a1 7b       	lsl	r11,0x1
8000135e:	f7 e8 00 09 	and	r9,r11,r8
80001362:	cf c0       	breq	8000135a <_malloc_r+0x206>
80001364:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001368:	06 92       	mov	r2,r3
8000136a:	1c 91       	mov	r1,lr
8000136c:	62 36       	ld.w	r6,r1[0xc]
8000136e:	c2 e8       	rjmp	800013ca <_malloc_r+0x276>
80001370:	6c 1a       	ld.w	r10,r6[0x4]
80001372:	e0 1a ff fc 	andl	r10,0xfffc
80001376:	f4 07 01 08 	sub	r8,r10,r7
8000137a:	58 f8       	cp.w	r8,15
8000137c:	e0 8a 00 15 	brle	800013a6 <_malloc_r+0x252>
80001380:	6c 3a       	ld.w	r10,r6[0xc]
80001382:	6c 29       	ld.w	r9,r6[0x8]
80001384:	95 29       	st.w	r10[0x8],r9
80001386:	93 3a       	st.w	r9[0xc],r10
80001388:	0e 99       	mov	r9,r7
8000138a:	ec 07 00 07 	add	r7,r6,r7
8000138e:	a1 a9       	sbr	r9,0x0
80001390:	99 37       	st.w	r12[0xc],r7
80001392:	99 27       	st.w	r12[0x8],r7
80001394:	8d 19       	st.w	r6[0x4],r9
80001396:	ee 08 09 08 	st.w	r7[r8],r8
8000139a:	8f 2c       	st.w	r7[0x8],r12
8000139c:	8f 3c       	st.w	r7[0xc],r12
8000139e:	a1 a8       	sbr	r8,0x0
800013a0:	0a 9c       	mov	r12,r5
800013a2:	8f 18       	st.w	r7[0x4],r8
800013a4:	c0 d8       	rjmp	800013be <_malloc_r+0x26a>
800013a6:	6c 39       	ld.w	r9,r6[0xc]
800013a8:	58 08       	cp.w	r8,0
800013aa:	c0 f5       	brlt	800013c8 <_malloc_r+0x274>
800013ac:	ec 0a 00 0a 	add	r10,r6,r10
800013b0:	74 18       	ld.w	r8,r10[0x4]
800013b2:	a1 a8       	sbr	r8,0x0
800013b4:	0a 9c       	mov	r12,r5
800013b6:	95 18       	st.w	r10[0x4],r8
800013b8:	6c 28       	ld.w	r8,r6[0x8]
800013ba:	93 28       	st.w	r9[0x8],r8
800013bc:	91 39       	st.w	r8[0xc],r9
800013be:	f0 1f 00 19 	mcall	80001420 <_malloc_r+0x2cc>
800013c2:	ec cc ff f8 	sub	r12,r6,-8
800013c6:	d8 32       	popm	r0-r7,pc
800013c8:	12 96       	mov	r6,r9
800013ca:	02 36       	cp.w	r6,r1
800013cc:	cd 21       	brne	80001370 <_malloc_r+0x21c>
800013ce:	2f f2       	sub	r2,-1
800013d0:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800013d4:	c0 30       	breq	800013da <_malloc_r+0x286>
800013d6:	2f 81       	sub	r1,-8
800013d8:	cc ab       	rjmp	8000136c <_malloc_r+0x218>
800013da:	1c 98       	mov	r8,lr
800013dc:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800013e0:	c0 81       	brne	800013f0 <_malloc_r+0x29c>
800013e2:	68 19       	ld.w	r9,r4[0x4]
800013e4:	f6 08 11 ff 	rsub	r8,r11,-1
800013e8:	f3 e8 00 08 	and	r8,r9,r8
800013ec:	89 18       	st.w	r4[0x4],r8
800013ee:	c0 78       	rjmp	800013fc <_malloc_r+0x2a8>
800013f0:	f0 c9 00 08 	sub	r9,r8,8
800013f4:	20 13       	sub	r3,1
800013f6:	70 08       	ld.w	r8,r8[0x0]
800013f8:	12 38       	cp.w	r8,r9
800013fa:	cf 10       	breq	800013dc <_malloc_r+0x288>
800013fc:	a1 7b       	lsl	r11,0x1
800013fe:	68 18       	ld.w	r8,r4[0x4]
80001400:	10 3b       	cp.w	r11,r8
80001402:	e0 8b 00 11 	brhi	80001424 <_malloc_r+0x2d0>
80001406:	58 0b       	cp.w	r11,0
80001408:	c0 e0       	breq	80001424 <_malloc_r+0x2d0>
8000140a:	04 93       	mov	r3,r2
8000140c:	c0 38       	rjmp	80001412 <_malloc_r+0x2be>
8000140e:	2f c3       	sub	r3,-4
80001410:	a1 7b       	lsl	r11,0x1
80001412:	f7 e8 00 09 	and	r9,r11,r8
80001416:	ca 71       	brne	80001364 <_malloc_r+0x210>
80001418:	cf bb       	rjmp	8000140e <_malloc_r+0x2ba>
8000141a:	00 00       	add	r0,r0
8000141c:	00 00       	add	r0,r0
8000141e:	00 10       	sub	r0,r0
80001420:	80 00       	ld.sh	r0,r0[0x0]
80001422:	15 a6       	ld.ub	r6,r10[0x2]
80001424:	68 23       	ld.w	r3,r4[0x8]
80001426:	66 12       	ld.w	r2,r3[0x4]
80001428:	e0 12 ff fc 	andl	r2,0xfffc
8000142c:	0e 32       	cp.w	r2,r7
8000142e:	5f 39       	srlo	r9
80001430:	e4 07 01 08 	sub	r8,r2,r7
80001434:	58 f8       	cp.w	r8,15
80001436:	5f aa       	srle	r10
80001438:	f5 e9 10 09 	or	r9,r10,r9
8000143c:	e0 80 00 a2 	breq	80001580 <_malloc_r+0x42c>
80001440:	4c 88       	lddpc	r8,80001560 <_malloc_r+0x40c>
80001442:	70 01       	ld.w	r1,r8[0x0]
80001444:	4c 88       	lddpc	r8,80001564 <_malloc_r+0x410>
80001446:	2f 01       	sub	r1,-16
80001448:	70 08       	ld.w	r8,r8[0x0]
8000144a:	0e 01       	add	r1,r7
8000144c:	5b f8       	cp.w	r8,-1
8000144e:	c0 40       	breq	80001456 <_malloc_r+0x302>
80001450:	28 11       	sub	r1,-127
80001452:	e0 11 ff 80 	andl	r1,0xff80
80001456:	02 9b       	mov	r11,r1
80001458:	0a 9c       	mov	r12,r5
8000145a:	f0 1f 00 44 	mcall	80001568 <_malloc_r+0x414>
8000145e:	18 96       	mov	r6,r12
80001460:	5b fc       	cp.w	r12,-1
80001462:	c6 e0       	breq	8000153e <_malloc_r+0x3ea>
80001464:	e6 02 00 08 	add	r8,r3,r2
80001468:	10 3c       	cp.w	r12,r8
8000146a:	c0 32       	brcc	80001470 <_malloc_r+0x31c>
8000146c:	08 33       	cp.w	r3,r4
8000146e:	c6 81       	brne	8000153e <_malloc_r+0x3ea>
80001470:	4b fa       	lddpc	r10,8000156c <_malloc_r+0x418>
80001472:	74 09       	ld.w	r9,r10[0x0]
80001474:	e2 09 00 09 	add	r9,r1,r9
80001478:	95 09       	st.w	r10[0x0],r9
8000147a:	10 36       	cp.w	r6,r8
8000147c:	c0 a1       	brne	80001490 <_malloc_r+0x33c>
8000147e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80001482:	c0 71       	brne	80001490 <_malloc_r+0x33c>
80001484:	e2 02 00 02 	add	r2,r1,r2
80001488:	68 28       	ld.w	r8,r4[0x8]
8000148a:	a1 a2       	sbr	r2,0x0
8000148c:	91 12       	st.w	r8[0x4],r2
8000148e:	c4 c8       	rjmp	80001526 <_malloc_r+0x3d2>
80001490:	4b 5a       	lddpc	r10,80001564 <_malloc_r+0x410>
80001492:	74 0b       	ld.w	r11,r10[0x0]
80001494:	5b fb       	cp.w	r11,-1
80001496:	c0 31       	brne	8000149c <_malloc_r+0x348>
80001498:	95 06       	st.w	r10[0x0],r6
8000149a:	c0 68       	rjmp	800014a6 <_malloc_r+0x352>
8000149c:	ec 09 00 09 	add	r9,r6,r9
800014a0:	4b 3a       	lddpc	r10,8000156c <_malloc_r+0x418>
800014a2:	10 19       	sub	r9,r8
800014a4:	95 09       	st.w	r10[0x0],r9
800014a6:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800014aa:	f0 09 11 08 	rsub	r9,r8,8
800014ae:	58 08       	cp.w	r8,0
800014b0:	f2 08 17 10 	movne	r8,r9
800014b4:	ed d8 e1 06 	addne	r6,r6,r8
800014b8:	28 08       	sub	r8,-128
800014ba:	ec 01 00 01 	add	r1,r6,r1
800014be:	0a 9c       	mov	r12,r5
800014c0:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800014c4:	f0 01 01 01 	sub	r1,r8,r1
800014c8:	02 9b       	mov	r11,r1
800014ca:	f0 1f 00 28 	mcall	80001568 <_malloc_r+0x414>
800014ce:	4a 88       	lddpc	r8,8000156c <_malloc_r+0x418>
800014d0:	5b fc       	cp.w	r12,-1
800014d2:	ec 0c 17 00 	moveq	r12,r6
800014d6:	f9 b1 00 00 	moveq	r1,0
800014da:	70 09       	ld.w	r9,r8[0x0]
800014dc:	0c 1c       	sub	r12,r6
800014de:	89 26       	st.w	r4[0x8],r6
800014e0:	02 0c       	add	r12,r1
800014e2:	12 01       	add	r1,r9
800014e4:	a1 ac       	sbr	r12,0x0
800014e6:	91 01       	st.w	r8[0x0],r1
800014e8:	8d 1c       	st.w	r6[0x4],r12
800014ea:	08 33       	cp.w	r3,r4
800014ec:	c1 d0       	breq	80001526 <_malloc_r+0x3d2>
800014ee:	58 f2       	cp.w	r2,15
800014f0:	e0 8b 00 05 	brhi	800014fa <_malloc_r+0x3a6>
800014f4:	30 18       	mov	r8,1
800014f6:	8d 18       	st.w	r6[0x4],r8
800014f8:	c2 38       	rjmp	8000153e <_malloc_r+0x3ea>
800014fa:	30 59       	mov	r9,5
800014fc:	20 c2       	sub	r2,12
800014fe:	e0 12 ff f8 	andl	r2,0xfff8
80001502:	e6 02 00 08 	add	r8,r3,r2
80001506:	91 29       	st.w	r8[0x8],r9
80001508:	91 19       	st.w	r8[0x4],r9
8000150a:	66 18       	ld.w	r8,r3[0x4]
8000150c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001510:	e5 e8 10 08 	or	r8,r2,r8
80001514:	87 18       	st.w	r3[0x4],r8
80001516:	58 f2       	cp.w	r2,15
80001518:	e0 88 00 07 	brls	80001526 <_malloc_r+0x3d2>
8000151c:	e6 cb ff f8 	sub	r11,r3,-8
80001520:	0a 9c       	mov	r12,r5
80001522:	f0 1f 00 14 	mcall	80001570 <_malloc_r+0x41c>
80001526:	49 49       	lddpc	r9,80001574 <_malloc_r+0x420>
80001528:	72 0a       	ld.w	r10,r9[0x0]
8000152a:	49 18       	lddpc	r8,8000156c <_malloc_r+0x418>
8000152c:	70 08       	ld.w	r8,r8[0x0]
8000152e:	14 38       	cp.w	r8,r10
80001530:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001534:	49 19       	lddpc	r9,80001578 <_malloc_r+0x424>
80001536:	72 0a       	ld.w	r10,r9[0x0]
80001538:	14 38       	cp.w	r8,r10
8000153a:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000153e:	68 28       	ld.w	r8,r4[0x8]
80001540:	70 18       	ld.w	r8,r8[0x4]
80001542:	e0 18 ff fc 	andl	r8,0xfffc
80001546:	0e 38       	cp.w	r8,r7
80001548:	5f 39       	srlo	r9
8000154a:	0e 18       	sub	r8,r7
8000154c:	58 f8       	cp.w	r8,15
8000154e:	5f aa       	srle	r10
80001550:	f5 e9 10 09 	or	r9,r10,r9
80001554:	c1 60       	breq	80001580 <_malloc_r+0x42c>
80001556:	0a 9c       	mov	r12,r5
80001558:	f0 1f 00 09 	mcall	8000157c <_malloc_r+0x428>
8000155c:	d8 3a       	popm	r0-r7,pc,r12=0
8000155e:	00 00       	add	r0,r0
80001560:	00 00       	add	r0,r0
80001562:	06 20       	rsub	r0,r3
80001564:	00 00       	add	r0,r0
80001566:	04 1c       	sub	r12,r2
80001568:	80 00       	ld.sh	r0,r0[0x0]
8000156a:	15 a8       	ld.ub	r8,r10[0x2]
8000156c:	00 00       	add	r0,r0
8000156e:	06 24       	rsub	r4,r3
80001570:	80 00       	ld.sh	r0,r0[0x0]
80001572:	16 c4       	st.b	r11++,r4
80001574:	00 00       	add	r0,r0
80001576:	06 1c       	sub	r12,r3
80001578:	00 00       	add	r0,r0
8000157a:	06 18       	sub	r8,r3
8000157c:	80 00       	ld.sh	r0,r0[0x0]
8000157e:	15 a6       	ld.ub	r6,r10[0x2]
80001580:	68 26       	ld.w	r6,r4[0x8]
80001582:	a1 a8       	sbr	r8,0x0
80001584:	0e 99       	mov	r9,r7
80001586:	a1 a9       	sbr	r9,0x0
80001588:	8d 19       	st.w	r6[0x4],r9
8000158a:	ec 07 00 07 	add	r7,r6,r7
8000158e:	0a 9c       	mov	r12,r5
80001590:	89 27       	st.w	r4[0x8],r7
80001592:	8f 18       	st.w	r7[0x4],r8
80001594:	f0 1f 00 03 	mcall	800015a0 <_malloc_r+0x44c>
80001598:	ec cc ff f8 	sub	r12,r6,-8
8000159c:	d8 32       	popm	r0-r7,pc
8000159e:	00 00       	add	r0,r0
800015a0:	80 00       	ld.sh	r0,r0[0x0]
800015a2:	15 a6       	ld.ub	r6,r10[0x2]

800015a4 <__malloc_lock>:
800015a4:	5e fc       	retal	r12

800015a6 <__malloc_unlock>:
800015a6:	5e fc       	retal	r12

800015a8 <_sbrk_r>:
800015a8:	d4 21       	pushm	r4-r7,lr
800015aa:	30 08       	mov	r8,0
800015ac:	18 97       	mov	r7,r12
800015ae:	48 76       	lddpc	r6,800015c8 <_sbrk_r+0x20>
800015b0:	16 9c       	mov	r12,r11
800015b2:	8d 08       	st.w	r6[0x0],r8
800015b4:	f0 1f 00 06 	mcall	800015cc <_sbrk_r+0x24>
800015b8:	5b fc       	cp.w	r12,-1
800015ba:	c0 51       	brne	800015c4 <_sbrk_r+0x1c>
800015bc:	6c 08       	ld.w	r8,r6[0x0]
800015be:	58 08       	cp.w	r8,0
800015c0:	ef f8 1a 03 	st.wne	r7[0xc],r8
800015c4:	d8 22       	popm	r4-r7,pc
800015c6:	00 00       	add	r0,r0
800015c8:	00 00       	add	r0,r0
800015ca:	07 90       	ld.ub	r0,r3[0x1]
800015cc:	80 00       	ld.sh	r0,r0[0x0]
800015ce:	15 d0       	ld.ub	r0,r10[0x5]

800015d0 <_sbrk>:
800015d0:	d4 01       	pushm	lr
800015d2:	48 c8       	lddpc	r8,80001600 <_sbrk+0x30>
800015d4:	70 09       	ld.w	r9,r8[0x0]
800015d6:	58 09       	cp.w	r9,0
800015d8:	c0 31       	brne	800015de <_sbrk+0xe>
800015da:	48 b9       	lddpc	r9,80001604 <_sbrk+0x34>
800015dc:	91 09       	st.w	r8[0x0],r9
800015de:	48 99       	lddpc	r9,80001600 <_sbrk+0x30>
800015e0:	48 aa       	lddpc	r10,80001608 <_sbrk+0x38>
800015e2:	72 08       	ld.w	r8,r9[0x0]
800015e4:	f0 0c 00 0c 	add	r12,r8,r12
800015e8:	14 3c       	cp.w	r12,r10
800015ea:	e0 8b 00 04 	brhi	800015f2 <_sbrk+0x22>
800015ee:	93 0c       	st.w	r9[0x0],r12
800015f0:	c0 68       	rjmp	800015fc <_sbrk+0x2c>
800015f2:	f0 1f 00 07 	mcall	8000160c <_sbrk+0x3c>
800015f6:	30 c8       	mov	r8,12
800015f8:	99 08       	st.w	r12[0x0],r8
800015fa:	3f f8       	mov	r8,-1
800015fc:	10 9c       	mov	r12,r8
800015fe:	d8 02       	popm	pc
80001600:	00 00       	add	r0,r0
80001602:	06 4c       	or	r12,r3
80001604:	00 00       	add	r0,r0
80001606:	07 98       	ld.ub	r8,r3[0x1]
80001608:	00 00       	add	r0,r0
8000160a:	e0 00       	*unknown*
8000160c:	80 00       	ld.sh	r0,r0[0x0]
8000160e:	16 10       	sub	r0,r11

80001610 <__errno>:
80001610:	48 28       	lddpc	r8,80001618 <__errno+0x8>
80001612:	70 0c       	ld.w	r12,r8[0x0]
80001614:	2f 4c       	sub	r12,-12
80001616:	5e fc       	retal	r12
80001618:	00 00       	add	r0,r0
8000161a:	05 10       	ld.sh	r0,r2++

8000161c <_malloc_trim_r>:
8000161c:	d4 21       	pushm	r4-r7,lr
8000161e:	16 95       	mov	r5,r11
80001620:	18 97       	mov	r7,r12
80001622:	f0 1f 00 23 	mcall	800016ac <_malloc_trim_r+0x90>
80001626:	4a 34       	lddpc	r4,800016b0 <_malloc_trim_r+0x94>
80001628:	68 28       	ld.w	r8,r4[0x8]
8000162a:	70 16       	ld.w	r6,r8[0x4]
8000162c:	e0 16 ff fc 	andl	r6,0xfffc
80001630:	ec c8 ff 91 	sub	r8,r6,-111
80001634:	f0 05 01 05 	sub	r5,r8,r5
80001638:	e0 15 ff 80 	andl	r5,0xff80
8000163c:	ea c5 00 80 	sub	r5,r5,128
80001640:	e0 45 00 7f 	cp.w	r5,127
80001644:	e0 8a 00 23 	brle	8000168a <_malloc_trim_r+0x6e>
80001648:	30 0b       	mov	r11,0
8000164a:	0e 9c       	mov	r12,r7
8000164c:	f0 1f 00 1a 	mcall	800016b4 <_malloc_trim_r+0x98>
80001650:	68 28       	ld.w	r8,r4[0x8]
80001652:	0c 08       	add	r8,r6
80001654:	10 3c       	cp.w	r12,r8
80001656:	c1 a1       	brne	8000168a <_malloc_trim_r+0x6e>
80001658:	ea 0b 11 00 	rsub	r11,r5,0
8000165c:	0e 9c       	mov	r12,r7
8000165e:	f0 1f 00 16 	mcall	800016b4 <_malloc_trim_r+0x98>
80001662:	5b fc       	cp.w	r12,-1
80001664:	c1 71       	brne	80001692 <_malloc_trim_r+0x76>
80001666:	30 0b       	mov	r11,0
80001668:	0e 9c       	mov	r12,r7
8000166a:	f0 1f 00 13 	mcall	800016b4 <_malloc_trim_r+0x98>
8000166e:	68 28       	ld.w	r8,r4[0x8]
80001670:	f8 08 01 09 	sub	r9,r12,r8
80001674:	58 f9       	cp.w	r9,15
80001676:	e0 8a 00 0a 	brle	8000168a <_malloc_trim_r+0x6e>
8000167a:	a1 a9       	sbr	r9,0x0
8000167c:	91 19       	st.w	r8[0x4],r9
8000167e:	48 f8       	lddpc	r8,800016b8 <_malloc_trim_r+0x9c>
80001680:	70 09       	ld.w	r9,r8[0x0]
80001682:	48 f8       	lddpc	r8,800016bc <_malloc_trim_r+0xa0>
80001684:	f8 09 01 09 	sub	r9,r12,r9
80001688:	91 09       	st.w	r8[0x0],r9
8000168a:	0e 9c       	mov	r12,r7
8000168c:	f0 1f 00 0d 	mcall	800016c0 <_malloc_trim_r+0xa4>
80001690:	d8 2a       	popm	r4-r7,pc,r12=0
80001692:	68 28       	ld.w	r8,r4[0x8]
80001694:	0a 16       	sub	r6,r5
80001696:	a1 a6       	sbr	r6,0x0
80001698:	91 16       	st.w	r8[0x4],r6
8000169a:	48 98       	lddpc	r8,800016bc <_malloc_trim_r+0xa0>
8000169c:	70 09       	ld.w	r9,r8[0x0]
8000169e:	0a 19       	sub	r9,r5
800016a0:	0e 9c       	mov	r12,r7
800016a2:	91 09       	st.w	r8[0x0],r9
800016a4:	f0 1f 00 07 	mcall	800016c0 <_malloc_trim_r+0xa4>
800016a8:	da 2a       	popm	r4-r7,pc,r12=1
800016aa:	00 00       	add	r0,r0
800016ac:	80 00       	ld.sh	r0,r0[0x0]
800016ae:	15 a4       	ld.ub	r4,r10[0x2]
800016b0:	00 00       	add	r0,r0
800016b2:	00 10       	sub	r0,r0
800016b4:	80 00       	ld.sh	r0,r0[0x0]
800016b6:	15 a8       	ld.ub	r8,r10[0x2]
800016b8:	00 00       	add	r0,r0
800016ba:	04 1c       	sub	r12,r2
800016bc:	00 00       	add	r0,r0
800016be:	06 24       	rsub	r4,r3
800016c0:	80 00       	ld.sh	r0,r0[0x0]
800016c2:	15 a6       	ld.ub	r6,r10[0x2]

800016c4 <_free_r>:
800016c4:	d4 21       	pushm	r4-r7,lr
800016c6:	16 96       	mov	r6,r11
800016c8:	18 97       	mov	r7,r12
800016ca:	58 0b       	cp.w	r11,0
800016cc:	e0 80 00 c8 	breq	8000185c <_free_r+0x198>
800016d0:	f0 1f 00 4c 	mcall	80001800 <_free_r+0x13c>
800016d4:	20 86       	sub	r6,8
800016d6:	4c ca       	lddpc	r10,80001804 <_free_r+0x140>
800016d8:	6c 18       	ld.w	r8,r6[0x4]
800016da:	74 2e       	ld.w	lr,r10[0x8]
800016dc:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800016e0:	a1 c8       	cbr	r8,0x0
800016e2:	ec 08 00 09 	add	r9,r6,r8
800016e6:	72 1b       	ld.w	r11,r9[0x4]
800016e8:	e0 1b ff fc 	andl	r11,0xfffc
800016ec:	1c 39       	cp.w	r9,lr
800016ee:	c1 d1       	brne	80001728 <_free_r+0x64>
800016f0:	f6 08 00 08 	add	r8,r11,r8
800016f4:	58 0c       	cp.w	r12,0
800016f6:	c0 81       	brne	80001706 <_free_r+0x42>
800016f8:	6c 09       	ld.w	r9,r6[0x0]
800016fa:	12 16       	sub	r6,r9
800016fc:	12 08       	add	r8,r9
800016fe:	6c 3b       	ld.w	r11,r6[0xc]
80001700:	6c 29       	ld.w	r9,r6[0x8]
80001702:	97 29       	st.w	r11[0x8],r9
80001704:	93 3b       	st.w	r9[0xc],r11
80001706:	10 99       	mov	r9,r8
80001708:	95 26       	st.w	r10[0x8],r6
8000170a:	a1 a9       	sbr	r9,0x0
8000170c:	8d 19       	st.w	r6[0x4],r9
8000170e:	4b f9       	lddpc	r9,80001808 <_free_r+0x144>
80001710:	72 09       	ld.w	r9,r9[0x0]
80001712:	12 38       	cp.w	r8,r9
80001714:	c0 63       	brcs	80001720 <_free_r+0x5c>
80001716:	4b e8       	lddpc	r8,8000180c <_free_r+0x148>
80001718:	0e 9c       	mov	r12,r7
8000171a:	70 0b       	ld.w	r11,r8[0x0]
8000171c:	f0 1f 00 3d 	mcall	80001810 <_free_r+0x14c>
80001720:	0e 9c       	mov	r12,r7
80001722:	f0 1f 00 3d 	mcall	80001814 <_free_r+0x150>
80001726:	d8 22       	popm	r4-r7,pc
80001728:	93 1b       	st.w	r9[0x4],r11
8000172a:	58 0c       	cp.w	r12,0
8000172c:	c0 30       	breq	80001732 <_free_r+0x6e>
8000172e:	30 0c       	mov	r12,0
80001730:	c1 08       	rjmp	80001750 <_free_r+0x8c>
80001732:	6c 0e       	ld.w	lr,r6[0x0]
80001734:	f4 c5 ff f8 	sub	r5,r10,-8
80001738:	1c 16       	sub	r6,lr
8000173a:	1c 08       	add	r8,lr
8000173c:	6c 2e       	ld.w	lr,r6[0x8]
8000173e:	0a 3e       	cp.w	lr,r5
80001740:	f9 bc 00 01 	moveq	r12,1
80001744:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001748:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000174c:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001750:	f2 0b 00 0e 	add	lr,r9,r11
80001754:	7c 1e       	ld.w	lr,lr[0x4]
80001756:	ed be 00 00 	bld	lr,0x0
8000175a:	c1 30       	breq	80001780 <_free_r+0xbc>
8000175c:	16 08       	add	r8,r11
8000175e:	58 0c       	cp.w	r12,0
80001760:	c0 c1       	brne	80001778 <_free_r+0xb4>
80001762:	4a 9e       	lddpc	lr,80001804 <_free_r+0x140>
80001764:	72 2b       	ld.w	r11,r9[0x8]
80001766:	2f 8e       	sub	lr,-8
80001768:	1c 3b       	cp.w	r11,lr
8000176a:	c0 71       	brne	80001778 <_free_r+0xb4>
8000176c:	97 36       	st.w	r11[0xc],r6
8000176e:	97 26       	st.w	r11[0x8],r6
80001770:	8d 2b       	st.w	r6[0x8],r11
80001772:	8d 3b       	st.w	r6[0xc],r11
80001774:	30 1c       	mov	r12,1
80001776:	c0 58       	rjmp	80001780 <_free_r+0xbc>
80001778:	72 2b       	ld.w	r11,r9[0x8]
8000177a:	72 39       	ld.w	r9,r9[0xc]
8000177c:	93 2b       	st.w	r9[0x8],r11
8000177e:	97 39       	st.w	r11[0xc],r9
80001780:	10 99       	mov	r9,r8
80001782:	ec 08 09 08 	st.w	r6[r8],r8
80001786:	a1 a9       	sbr	r9,0x0
80001788:	8d 19       	st.w	r6[0x4],r9
8000178a:	58 0c       	cp.w	r12,0
8000178c:	c6 51       	brne	80001856 <_free_r+0x192>
8000178e:	e0 48 01 ff 	cp.w	r8,511
80001792:	e0 8b 00 13 	brhi	800017b8 <_free_r+0xf4>
80001796:	a3 98       	lsr	r8,0x3
80001798:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000179c:	72 2b       	ld.w	r11,r9[0x8]
8000179e:	8d 39       	st.w	r6[0xc],r9
800017a0:	8d 2b       	st.w	r6[0x8],r11
800017a2:	97 36       	st.w	r11[0xc],r6
800017a4:	93 26       	st.w	r9[0x8],r6
800017a6:	a3 48       	asr	r8,0x2
800017a8:	74 19       	ld.w	r9,r10[0x4]
800017aa:	30 1b       	mov	r11,1
800017ac:	f6 08 09 48 	lsl	r8,r11,r8
800017b0:	f3 e8 10 08 	or	r8,r9,r8
800017b4:	95 18       	st.w	r10[0x4],r8
800017b6:	c5 08       	rjmp	80001856 <_free_r+0x192>
800017b8:	f0 0b 16 09 	lsr	r11,r8,0x9
800017bc:	58 4b       	cp.w	r11,4
800017be:	e0 8b 00 06 	brhi	800017ca <_free_r+0x106>
800017c2:	f0 0b 16 06 	lsr	r11,r8,0x6
800017c6:	2c 8b       	sub	r11,-56
800017c8:	c2 b8       	rjmp	8000181e <_free_r+0x15a>
800017ca:	59 4b       	cp.w	r11,20
800017cc:	e0 8b 00 04 	brhi	800017d4 <_free_r+0x110>
800017d0:	2a 5b       	sub	r11,-91
800017d2:	c2 68       	rjmp	8000181e <_free_r+0x15a>
800017d4:	e0 4b 00 54 	cp.w	r11,84
800017d8:	e0 8b 00 06 	brhi	800017e4 <_free_r+0x120>
800017dc:	f0 0b 16 0c 	lsr	r11,r8,0xc
800017e0:	29 2b       	sub	r11,-110
800017e2:	c1 e8       	rjmp	8000181e <_free_r+0x15a>
800017e4:	e0 4b 01 54 	cp.w	r11,340
800017e8:	e0 8b 00 06 	brhi	800017f4 <_free_r+0x130>
800017ec:	f0 0b 16 0f 	lsr	r11,r8,0xf
800017f0:	28 9b       	sub	r11,-119
800017f2:	c1 68       	rjmp	8000181e <_free_r+0x15a>
800017f4:	e0 4b 05 54 	cp.w	r11,1364
800017f8:	e0 88 00 10 	brls	80001818 <_free_r+0x154>
800017fc:	37 eb       	mov	r11,126
800017fe:	c1 08       	rjmp	8000181e <_free_r+0x15a>
80001800:	80 00       	ld.sh	r0,r0[0x0]
80001802:	15 a4       	ld.ub	r4,r10[0x2]
80001804:	00 00       	add	r0,r0
80001806:	00 10       	sub	r0,r0
80001808:	00 00       	add	r0,r0
8000180a:	04 18       	sub	r8,r2
8000180c:	00 00       	add	r0,r0
8000180e:	06 20       	rsub	r0,r3
80001810:	80 00       	ld.sh	r0,r0[0x0]
80001812:	16 1c       	sub	r12,r11
80001814:	80 00       	ld.sh	r0,r0[0x0]
80001816:	15 a6       	ld.ub	r6,r10[0x2]
80001818:	f0 0b 16 12 	lsr	r11,r8,0x12
8000181c:	28 4b       	sub	r11,-124
8000181e:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80001822:	78 29       	ld.w	r9,r12[0x8]
80001824:	18 39       	cp.w	r9,r12
80001826:	c0 e1       	brne	80001842 <_free_r+0x17e>
80001828:	74 18       	ld.w	r8,r10[0x4]
8000182a:	a3 4b       	asr	r11,0x2
8000182c:	30 1c       	mov	r12,1
8000182e:	f8 0b 09 4b 	lsl	r11,r12,r11
80001832:	f1 eb 10 0b 	or	r11,r8,r11
80001836:	12 98       	mov	r8,r9
80001838:	95 1b       	st.w	r10[0x4],r11
8000183a:	c0 a8       	rjmp	8000184e <_free_r+0x18a>
8000183c:	72 29       	ld.w	r9,r9[0x8]
8000183e:	18 39       	cp.w	r9,r12
80001840:	c0 60       	breq	8000184c <_free_r+0x188>
80001842:	72 1a       	ld.w	r10,r9[0x4]
80001844:	e0 1a ff fc 	andl	r10,0xfffc
80001848:	14 38       	cp.w	r8,r10
8000184a:	cf 93       	brcs	8000183c <_free_r+0x178>
8000184c:	72 38       	ld.w	r8,r9[0xc]
8000184e:	8d 38       	st.w	r6[0xc],r8
80001850:	8d 29       	st.w	r6[0x8],r9
80001852:	93 36       	st.w	r9[0xc],r6
80001854:	91 26       	st.w	r8[0x8],r6
80001856:	0e 9c       	mov	r12,r7
80001858:	f0 1f 00 02 	mcall	80001860 <_free_r+0x19c>
8000185c:	d8 22       	popm	r4-r7,pc
8000185e:	00 00       	add	r0,r0
80001860:	80 00       	ld.sh	r0,r0[0x0]
80001862:	15 a6       	ld.ub	r6,r10[0x2]

Disassembly of section .exception:

80001a00 <_evba>:
	...

80001a28 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001a28:	c7 a8       	rjmp	80001b1c <privilegedCalls>
	...

80001b00 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001b00:	1c 9f       	mov	pc,lr

80001b02 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001b02:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001b06:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
80001b0a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
80001b0e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001b12:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001b14:	c0 31       	brne	80001b1a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001b16:	4b 9c       	lddpc	r12,80001bf8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001b18:	18 9f       	mov	pc,r12

80001b1a <_int0_exit>:
_int0_exit:
	rete
80001b1a:	d6 03       	rete

80001b1c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
80001b1c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
80001b1e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001b20:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001b22:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001b24:	9b 3c       	st.w	sp[0xc],r12

80001b26 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001b26:	4b 6c       	lddpc	r12,80001bfc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001b28:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
80001b2a:	c0 61       	brne	80001b36 <priv_interruptenable>
	ld.w r12,sp[USERSR]
80001b2c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
80001b2e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001b30:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001b32:	d3 02       	popm	r11-r12
	rete
80001b34:	d6 03       	rete

80001b36 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001b36:	4b 3c       	lddpc	r12,80001c00 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001b38:	18 3b       	cp.w	r11,r12
	brne privexception
80001b3a:	c0 61       	brne	80001b46 <privexception>
	ld.w r12,sp[USERSR]
80001b3c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
80001b3e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001b40:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001b42:	d3 02       	popm	r11-r12
	rete
80001b44:	d6 03       	rete

80001b46 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001b46:	c0 08       	rjmp	80001b46 <privexception>

80001b48 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001b48:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
80001b4a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
80001b4e:	4a ec       	lddpc	r12,80001c04 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001b50:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001b52:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001b54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001b58:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
80001b5c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001b60:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001b62:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001b64:	1c 9f       	mov	pc,lr

80001b66 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001b66:	d3 03       	ssrf	0x10
	mov pc,lr
80001b68:	1c 9f       	mov	pc,lr

80001b6a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
80001b6a:	d5 03       	csrf	0x10
	mov pc,lr
80001b6c:	1c 9f       	mov	pc,lr

80001b6e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
80001b6e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001b72:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001b74:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001b78:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
80001b7c:	1c 9f       	mov	pc,lr

80001b7e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001b7e:	4a 3c       	lddpc	r12,80001c08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001b80:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001b82:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001b84:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001b86:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001b88:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
80001b8a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
80001b8c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
80001b8e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001b90:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001b92:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001b94:	33 40       	mov	r0,52
	add r0,r12
80001b96:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001b98:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
80001b9c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
80001b9e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
80001ba2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
80001ba4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
80001ba6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
80001ba8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
80001baa:	1a 90       	mov	r0,sp
	st.w --sp,r0
80001bac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80001bae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
80001bb2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
80001bb4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
80001bb6:	1c 9f       	mov	pc,lr

80001bb8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001bb8:	49 4c       	lddpc	r12,80001c08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001bba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
80001bbc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80001bbe:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80001bc0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
80001bc4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
80001bc6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
80001bc8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80001bca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
80001bcc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80001bce:	33 40       	mov	r0,52
	add r0,r12
80001bd0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80001bd2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80001bd6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
80001bd8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
80001bda:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
80001bdc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
80001bde:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
80001be0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
80001be2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
80001be4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
80001be6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
80001be8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80001bea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
80001bec:	d4 01       	pushm	lr
	call timerStart
80001bee:	f0 1f 00 08 	mcall	80001c0c <contextRestoreFromISR+0x54>
	popm lr
80001bf2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
80001bf4:	1c 9f       	mov	pc,lr
80001bf6:	00 00       	add	r0,r0
80001bf8:	80 00       	ld.sh	r0,r0[0x0]
80001bfa:	09 38       	ld.ub	r8,r4++
80001bfc:	80 00       	ld.sh	r0,r0[0x0]
80001bfe:	1b 66       	ld.uh	r6,--sp
80001c00:	80 00       	ld.sh	r0,r0[0x0]
80001c02:	1b 6a       	ld.uh	r10,--sp
80001c04:	80 00       	ld.sh	r0,r0[0x0]
80001c06:	1a 00       	add	r0,sp
80001c08:	00 00       	add	r0,r0
80001c0a:	07 0c       	ld.w	r12,r3++
80001c0c:	80 00       	ld.sh	r0,r0[0x0]
80001c0e:	10 32       	cp.w	r2,r8
	...
