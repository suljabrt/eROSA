
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000017a8  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001800  80001800  00001c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80001c00  80001c00  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80001c84  80001c84  00002084  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80001c88  00002408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002194  00002914  2**0
                  ALLOC
  9 .bss          00000188  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000d960  000006a0  000006a0  00000000  2**0
                  ALLOC
 11 .comment      000000bc  00000000  00000000  00002914  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000005c8  00000000  00000000  000029d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000a0e  00000000  00000000  00002f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000be01  00000000  00000000  000039a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00001fad  00000000  00000000  0000f7a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004603  00000000  00000000  00011754  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000c64  00000000  00000000  00015d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001ce6  00000000  00000000  000169bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00001932  00000000  00000000  000186a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00534540  00000000  00000000  00019fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 00000510  00000000  00000000  0054e514  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	0f 98       	ld.ub	r8,r7[0x1]

Disassembly of section .text:

80000008 <usart_options>:
80000008:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 31     ............tsk1
80000018:	00 00 00 00 74 73 6b 32 00 00 00 00                 ....tsk2....

80000024 <task1>:
/*************************************************************
 * Task1
 * Blink LED0
 ************************************************************/
void task1(void)
{
80000024:	eb cd 40 80 	pushm	r7,lr
80000028:	1a 97       	mov	r7,sp
	while(1) {
		ledOn(LED0_GPIO);
8000002a:	33 bc       	mov	r12,59
8000002c:	f0 1f 00 05 	mcall	80000040 <task1+0x1c>
		delay_ms(1000);
80000030:	e0 6c 03 e8 	mov	r12,1000
80000034:	f0 1f 00 04 	mcall	80000044 <task1+0x20>
		ROSA_yield();
80000038:	f0 1f 00 04 	mcall	80000048 <task1+0x24>
	}
8000003c:	cf 7b       	rjmp	8000002a <task1+0x6>
8000003e:	00 00       	add	r0,r0
80000040:	80 00       	ld.sh	r0,r0[0x0]
80000042:	0b 1c       	ld.sh	r12,r5++
80000044:	80 00       	ld.sh	r0,r0[0x0]
80000046:	09 14       	ld.sh	r4,r4++
80000048:	80 00       	ld.sh	r0,r0[0x0]
8000004a:	05 a2       	ld.ub	r2,r2[0x2]

8000004c <task2>:
/*************************************************************
 * Task2
 * Blink LED1
 ************************************************************/
void task2(void)
{
8000004c:	eb cd 40 80 	pushm	r7,lr
80000050:	1a 97       	mov	r7,sp
	while(1) {
		ledOff(LED0_GPIO);
80000052:	33 bc       	mov	r12,59
80000054:	f0 1f 00 05 	mcall	80000068 <task2+0x1c>
		delay_ms(1000);
80000058:	e0 6c 03 e8 	mov	r12,1000
8000005c:	f0 1f 00 04 	mcall	8000006c <task2+0x20>
		ROSA_yield();
80000060:	f0 1f 00 04 	mcall	80000070 <task2+0x24>
	}
80000064:	cf 7b       	rjmp	80000052 <task2+0x6>
80000066:	00 00       	add	r0,r0
80000068:	80 00       	ld.sh	r0,r0[0x0]
8000006a:	0b 3c       	ld.ub	r12,r5++
8000006c:	80 00       	ld.sh	r0,r0[0x0]
8000006e:	09 14       	ld.sh	r4,r4++
80000070:	80 00       	ld.sh	r0,r0[0x0]
80000072:	05 a2       	ld.ub	r2,r2[0x2]

80000074 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
80000074:	eb cd 40 80 	pushm	r7,lr
80000078:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
8000007a:	f0 1f 00 0a 	mcall	800000a0 <main+0x2c>
	
	//Create tasks and install them into the ROSA kernel
	ROSA_taskCreate(&t1_tcb, "tsk1", task1, T_STACK_SIZE, 1);
8000007e:	30 18       	mov	r8,1
80000080:	32 09       	mov	r9,32
80000082:	48 9a       	lddpc	r10,800000a4 <main+0x30>
80000084:	48 9b       	lddpc	r11,800000a8 <main+0x34>
80000086:	48 ac       	lddpc	r12,800000ac <main+0x38>
80000088:	f0 1f 00 0a 	mcall	800000b0 <main+0x3c>
	ROSA_taskCreate(&t2_tcb, "tsk2", task2, T_STACK_SIZE, 1);
8000008c:	30 18       	mov	r8,1
8000008e:	32 09       	mov	r9,32
80000090:	48 9a       	lddpc	r10,800000b4 <main+0x40>
80000092:	48 ab       	lddpc	r11,800000b8 <main+0x44>
80000094:	48 ac       	lddpc	r12,800000bc <main+0x48>
80000096:	f0 1f 00 07 	mcall	800000b0 <main+0x3c>

	ROSA_startScheduler();
8000009a:	f0 1f 00 0a 	mcall	800000c0 <main+0x4c>

	/* Execution will never return here */
	while(1);
8000009e:	c0 08       	rjmp	8000009e <main+0x2a>
800000a0:	80 00       	ld.sh	r0,r0[0x0]
800000a2:	02 60       	and	r0,r1
800000a4:	80 00       	ld.sh	r0,r0[0x0]
800000a6:	00 24       	rsub	r4,r0
800000a8:	80 00       	ld.sh	r0,r0[0x0]
800000aa:	00 14       	sub	r4,r0
800000ac:	00 00       	add	r0,r0
800000ae:	05 d8       	ld.ub	r8,r2[0x5]
800000b0:	80 00       	ld.sh	r0,r0[0x0]
800000b2:	03 f0       	ld.ub	r0,r1[0x7]
800000b4:	80 00       	ld.sh	r0,r0[0x0]
800000b6:	00 4c       	or	r12,r0
800000b8:	80 00       	ld.sh	r0,r0[0x0]
800000ba:	00 1c       	sub	r12,r0
800000bc:	00 00       	add	r0,r0
800000be:	05 d4       	ld.ub	r4,r2[0x5]
800000c0:	80 00       	ld.sh	r0,r0[0x0]
800000c2:	06 18       	sub	r8,r3

800000c4 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
800000c4:	eb cd 40 80 	pushm	r7,lr
800000c8:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
800000ca:	f0 1f 00 05 	mcall	800000dc <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
800000ce:	f0 1f 00 05 	mcall	800000e0 <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it
800000d2:	f0 1f 00 05 	mcall	800000e4 <ROSA_yieldFromISR+0x20>
}
800000d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800000da:	00 00       	add	r0,r0
800000dc:	80 00       	ld.sh	r0,r0[0x0]
800000de:	19 7e       	ld.ub	lr,--r12
800000e0:	80 00       	ld.sh	r0,r0[0x0]
800000e2:	05 c0       	ld.ub	r0,r2[0x4]
800000e4:	80 00       	ld.sh	r0,r0[0x0]
800000e6:	19 b8       	ld.ub	r8,r12[0x3]

800000e8 <usart_options>:
800000e8:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
800000f8:	0a 00 00 00 69 64 6c 65 00 00 00 00                 ....idle....

80000104 <idle>:

/** @fn void idle(void)
	@brief Idle task body.
*/
void idle(void)
{
80000104:	eb cd 40 80 	pushm	r7,lr
80000108:	1a 97       	mov	r7,sp
	while(1)
	{
		usartWriteLine(USART, "idle\n");
8000010a:	48 4b       	lddpc	r11,80000118 <idle+0x14>
8000010c:	fe 7c 14 00 	mov	r12,-60416
80000110:	f0 1f 00 03 	mcall	8000011c <idle+0x18>
	}
80000114:	cf bb       	rjmp	8000010a <idle+0x6>
80000116:	00 00       	add	r0,r0
80000118:	80 00       	ld.sh	r0,r0[0x0]
8000011a:	00 f4       	st.b	--r0,r4
8000011c:	80 00       	ld.sh	r0,r0[0x0]
8000011e:	0e 8c       	andn	r12,r7

80000120 <idleCreate>:

/** @fn void idleCreate(void)
	@brief Creation of the idle task.
*/
void idleCreate(void)
{
80000120:	eb cd 40 80 	pushm	r7,lr
80000124:	1a 97       	mov	r7,sp
	ROSA_tcbCreate(&IDLETASK_TCB, "idle", idle, idle_stack, IDLE_STACK_SIZE);
80000126:	32 08       	mov	r8,32
80000128:	48 69       	lddpc	r9,80000140 <idleCreate+0x20>
8000012a:	48 7a       	lddpc	r10,80000144 <idleCreate+0x24>
8000012c:	48 7b       	lddpc	r11,80000148 <idleCreate+0x28>
8000012e:	48 8c       	lddpc	r12,8000014c <idleCreate+0x2c>
80000130:	f0 1f 00 08 	mcall	80000150 <idleCreate+0x30>
	IDLETASK = &IDLETASK_TCB;
80000134:	48 88       	lddpc	r8,80000154 <idleCreate+0x34>
80000136:	48 69       	lddpc	r9,8000014c <idleCreate+0x2c>
80000138:	91 09       	st.w	r8[0x0],r9
}
8000013a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000013e:	00 00       	add	r0,r0
80000140:	00 00       	add	r0,r0
80000142:	05 18       	ld.sh	r8,r2++
80000144:	80 00       	ld.sh	r0,r0[0x0]
80000146:	01 04       	ld.w	r4,r0++
80000148:	80 00       	ld.sh	r0,r0[0x0]
8000014a:	00 fc       	st.b	--r0,r12
8000014c:	00 00       	add	r0,r0
8000014e:	06 1c       	sub	r12,r3
80000150:	80 00       	ld.sh	r0,r0[0x0]
80000152:	03 3c       	ld.ub	r12,r1++
80000154:	00 00       	add	r0,r0
80000156:	05 dc       	ld.ub	r12,r2[0x5]

80000158 <readyQueueInsert>:
	@brief Inserts the given task into the ready queue by its priority.
	@param th Task structure (tcb structure).
	@return A status code (1 - item has been added to the empty queue, 0 - otherwise).
*/
int readyQueueInsert(ROSA_taskHandle_t pth)
{
80000158:	eb cd 40 80 	pushm	r7,lr
8000015c:	1a 97       	mov	r7,sp
8000015e:	20 3d       	sub	sp,12
80000160:	ef 4c ff f4 	st.w	r7[-12],r12
	uint8_t priority;
	int retval;
	
	priority = pth->priority;
80000164:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000168:	f1 38 00 64 	ld.ub	r8,r8[100]
8000016c:	ef 68 ff fb 	st.b	r7[-5],r8
	
	/* Check the given queue for the emptiness */
	if (PA[priority] == NULL)
80000170:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000174:	49 d8       	lddpc	r8,800001e8 <readyQueueInsert+0x90>
80000176:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000017a:	58 08       	cp.w	r8,0
8000017c:	c1 41       	brne	800001a4 <readyQueueInsert+0x4c>
	{
		PA[priority] = pth;
8000017e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000182:	49 a8       	lddpc	r8,800001e8 <readyQueueInsert+0x90>
80000184:	ee fa ff f4 	ld.w	r10,r7[-12]
80000188:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		PA[priority]->nexttcb = pth;
8000018c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000190:	49 68       	lddpc	r8,800001e8 <readyQueueInsert+0x90>
80000192:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000196:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000019a:	91 09       	st.w	r8[0x0],r9
		
		retval = 1;
8000019c:	30 18       	mov	r8,1
8000019e:	ef 48 ff fc 	st.w	r7[-4],r8
800001a2:	c1 c8       	rjmp	800001da <readyQueueInsert+0x82>
	}
	else
	{
		pth->nexttcb = PA[priority]->nexttcb;
800001a4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800001a8:	49 08       	lddpc	r8,800001e8 <readyQueueInsert+0x90>
800001aa:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800001ae:	70 09       	ld.w	r9,r8[0x0]
800001b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800001b4:	91 09       	st.w	r8[0x0],r9
		PA[priority]->nexttcb = pth;
800001b6:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800001ba:	48 c8       	lddpc	r8,800001e8 <readyQueueInsert+0x90>
800001bc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800001c0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800001c4:	91 09       	st.w	r8[0x0],r9
		PA[priority] = pth;
800001c6:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800001ca:	48 88       	lddpc	r8,800001e8 <readyQueueInsert+0x90>
800001cc:	ee fa ff f4 	ld.w	r10,r7[-12]
800001d0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		retval = 0;
800001d4:	30 08       	mov	r8,0
800001d6:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return retval;
800001da:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800001de:	10 9c       	mov	r12,r8
800001e0:	2f dd       	sub	sp,-12
800001e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800001e6:	00 00       	add	r0,r0
800001e8:	00 00       	add	r0,r0
800001ea:	05 e4       	ld.ub	r4,r2[0x6]

800001ec <readyQueueSearch>:
/** @fn int readyQueueSearch(void)
	@brief Search for the first non-empty highest priority queue.
	@return Pointer to the last tcb in the queue (in other words - PA[i]).
*/
ROSA_taskHandle_t readyQueueSearch(void)
{
800001ec:	eb cd 40 80 	pushm	r7,lr
800001f0:	1a 97       	mov	r7,sp
800001f2:	20 2d       	sub	sp,8
	int i = MAXNPRIO;
800001f4:	30 c8       	mov	r8,12
800001f6:	ef 48 ff f8 	st.w	r7[-8],r8
	tcb * rettcb;
	
	/* Search for the first non-empty queue. */
	while ( (PA[--i] == NULL) && (i > 0))
800001fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001fe:	20 18       	sub	r8,1
80000200:	ef 48 ff f8 	st.w	r7[-8],r8
80000204:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000208:	49 48       	lddpc	r8,80000258 <readyQueueSearch+0x6c>
8000020a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000020e:	58 08       	cp.w	r8,0
80000210:	c0 61       	brne	8000021c <readyQueueSearch+0x30>
80000212:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000216:	58 08       	cp.w	r8,0
80000218:	fe 99 ff f1 	brgt	800001fa <readyQueueSearch+0xe>
	{
		;
	}
		
	/* Check the PA for emptiness. */
	if ((i == 0) && (PA[i] == NULL))
8000021c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000220:	58 08       	cp.w	r8,0
80000222:	c0 d1       	brne	8000023c <readyQueueSearch+0x50>
80000224:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000228:	48 c8       	lddpc	r8,80000258 <readyQueueSearch+0x6c>
8000022a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000022e:	58 08       	cp.w	r8,0
80000230:	c0 61       	brne	8000023c <readyQueueSearch+0x50>
	{
		rettcb = IDLETASK;
80000232:	48 b8       	lddpc	r8,8000025c <readyQueueSearch+0x70>
80000234:	70 08       	ld.w	r8,r8[0x0]
80000236:	ef 48 ff fc 	st.w	r7[-4],r8
	{
		;
	}
		
	/* Check the PA for emptiness. */
	if ((i == 0) && (PA[i] == NULL))
8000023a:	c0 88       	rjmp	8000024a <readyQueueSearch+0x5e>
	{
		rettcb = IDLETASK;
	}
	else
	{
		rettcb = PA[i];
8000023c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000240:	48 68       	lddpc	r8,80000258 <readyQueueSearch+0x6c>
80000242:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000246:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return rettcb;
8000024a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000024e:	10 9c       	mov	r12,r8
80000250:	2f ed       	sub	sp,-8
80000252:	e3 cd 80 80 	ldm	sp++,r7,pc
80000256:	00 00       	add	r0,r0
80000258:	00 00       	add	r0,r0
8000025a:	05 e4       	ld.ub	r4,r2[0x6]
8000025c:	00 00       	add	r0,r0
8000025e:	05 dc       	ld.ub	r12,r2[0x5]

80000260 <ROSA_init>:

void ROSA_init(void)
{
80000260:	eb cd 40 80 	pushm	r7,lr
80000264:	1a 97       	mov	r7,sp
80000266:	20 1d       	sub	sp,4
	int i = 0;
80000268:	30 08       	mov	r8,0
8000026a:	ef 48 ff fc 	st.w	r7[-4],r8
	systemTick = 0;
8000026e:	4a 3a       	lddpc	r10,800002f8 <ROSA_init+0x98>
80000270:	30 08       	mov	r8,0
80000272:	30 09       	mov	r9,0
80000274:	f4 e9 00 00 	st.d	r10[0],r8
	
	//Do initialization of I/O drivers
	ledInit();									//LEDs
80000278:	f0 1f 00 21 	mcall	800002fc <ROSA_init+0x9c>
	buttonInit();								//Buttons
8000027c:	f0 1f 00 21 	mcall	80000300 <ROSA_init+0xa0>
	joystickInit();								//Joystick
80000280:	f0 1f 00 21 	mcall	80000304 <ROSA_init+0xa4>
	potInit();									//Potentiometer
80000284:	f0 1f 00 21 	mcall	80000308 <ROSA_init+0xa8>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
80000288:	e0 6a 1b 00 	mov	r10,6912
8000028c:	ea 1a 00 b7 	orh	r10,0xb7
80000290:	49 fb       	lddpc	r11,8000030c <ROSA_init+0xac>
80000292:	fe 7c 14 00 	mov	r12,-60416
80000296:	f0 1f 00 1f 	mcall	80000310 <ROSA_init+0xb0>

	interruptInit();
8000029a:	f0 1f 00 1f 	mcall	80000314 <ROSA_init+0xb4>
	interruptEnable();
8000029e:	f0 1f 00 1f 	mcall	80000318 <ROSA_init+0xb8>
	timerInit(1);
800002a2:	30 1c       	mov	r12,1
800002a4:	f0 1f 00 1e 	mcall	8000031c <ROSA_init+0xbc>
	timerStart();
800002a8:	f0 1f 00 1e 	mcall	80000320 <ROSA_init+0xc0>
	
	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
800002ac:	49 e8       	lddpc	r8,80000324 <ROSA_init+0xc4>
800002ae:	30 09       	mov	r9,0
800002b0:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
800002b2:	49 e8       	lddpc	r8,80000328 <ROSA_init+0xc8>
800002b4:	30 09       	mov	r9,0
800002b6:	91 09       	st.w	r8[0x0],r9
	PREEMPTASK = NULL;
800002b8:	49 d8       	lddpc	r8,8000032c <ROSA_init+0xcc>
800002ba:	30 09       	mov	r9,0
800002bc:	91 09       	st.w	r8[0x0],r9
	LOCKEDSEMAPHORELIST=NULL;
800002be:	49 d8       	lddpc	r8,80000330 <ROSA_init+0xd0>
800002c0:	30 09       	mov	r9,0
800002c2:	91 09       	st.w	r8[0x0],r9
	
	/* Create idle task. */
	idleCreate();
800002c4:	f0 1f 00 1c 	mcall	80000334 <ROSA_init+0xd4>
	
	for (i = 0; i < MAXNPRIO; i++) {
800002c8:	30 08       	mov	r8,0
800002ca:	ef 48 ff fc 	st.w	r7[-4],r8
800002ce:	c0 c8       	rjmp	800002e6 <ROSA_init+0x86>
		PA[i] = NULL;
800002d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002d4:	49 98       	lddpc	r8,80000338 <ROSA_init+0xd8>
800002d6:	30 0a       	mov	r10,0
800002d8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	LOCKEDSEMAPHORELIST=NULL;
	
	/* Create idle task. */
	idleCreate();
	
	for (i = 0; i < MAXNPRIO; i++) {
800002dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002e0:	2f f8       	sub	r8,-1
800002e2:	ef 48 ff fc 	st.w	r7[-4],r8
800002e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002ea:	58 b8       	cp.w	r8,11
800002ec:	fe 9a ff f2 	brle	800002d0 <ROSA_init+0x70>
		PA[i] = NULL;
	}
	
	//Initialize the timer to 1 ms period.
	
}
800002f0:	2f fd       	sub	sp,-4
800002f2:	e3 cd 80 80 	ldm	sp++,r7,pc
800002f6:	00 00       	add	r0,r0
800002f8:	00 00       	add	r0,r0
800002fa:	06 94       	mov	r4,r3
800002fc:	80 00       	ld.sh	r0,r0[0x0]
800002fe:	0a 90       	mov	r0,r5
80000300:	80 00       	ld.sh	r0,r0[0x0]
80000302:	08 b4       	st.h	r4++,r4
80000304:	80 00       	ld.sh	r0,r0[0x0]
80000306:	08 dc       	st.w	--r4,r12
80000308:	80 00       	ld.sh	r0,r0[0x0]
8000030a:	0b 5c       	ld.sh	r12,--r5
8000030c:	80 00       	ld.sh	r0,r0[0x0]
8000030e:	00 e8       	st.h	--r0,r8
80000310:	80 00       	ld.sh	r0,r0[0x0]
80000312:	0d 10       	ld.sh	r0,r6++
80000314:	80 00       	ld.sh	r0,r0[0x0]
80000316:	19 48       	ld.w	r8,--r12
80000318:	80 00       	ld.sh	r0,r0[0x0]
8000031a:	19 6a       	ld.uh	r10,--r12
8000031c:	80 00       	ld.sh	r0,r0[0x0]
8000031e:	0e e0       	st.h	--r7,r0
80000320:	80 00       	ld.sh	r0,r0[0x0]
80000322:	0f 0e       	ld.w	lr,r7++
80000324:	00 00       	add	r0,r0
80000326:	05 e0       	ld.ub	r0,r2[0x6]
80000328:	00 00       	add	r0,r0
8000032a:	06 18       	sub	r8,r3
8000032c:	00 00       	add	r0,r0
8000032e:	06 14       	sub	r4,r3
80000330:	00 00       	add	r0,r0
80000332:	05 d0       	ld.ub	r0,r2[0x5]
80000334:	80 00       	ld.sh	r0,r0[0x0]
80000336:	01 20       	ld.uh	r0,r0++
80000338:	00 00       	add	r0,r0
8000033a:	05 e4       	ld.ub	r4,r2[0x6]

8000033c <ROSA_tcbCreate>:

void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
8000033c:	eb cd 40 80 	pushm	r7,lr
80000340:	1a 97       	mov	r7,sp
80000342:	20 6d       	sub	sp,24
80000344:	ef 4c ff f8 	st.w	r7[-8],r12
80000348:	ef 4b ff f4 	st.w	r7[-12],r11
8000034c:	ef 4a ff f0 	st.w	r7[-16],r10
80000350:	ef 49 ff ec 	st.w	r7[-20],r9
80000354:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000358:	30 08       	mov	r8,0
8000035a:	ef 48 ff fc 	st.w	r7[-4],r8
8000035e:	c1 48       	rjmp	80000386 <ROSA_tcbCreate+0x4a>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
80000360:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000364:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000368:	ee fa ff f4 	ld.w	r10,r7[-12]
8000036c:	f4 08 00 08 	add	r8,r10,r8
80000370:	11 88       	ld.ub	r8,r8[0x0]
80000372:	ee fa ff f8 	ld.w	r10,r7[-8]
80000376:	f4 09 00 09 	add	r9,r10,r9
8000037a:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
8000037c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000380:	2f f8       	sub	r8,-1
80000382:	ef 48 ff fc 	st.w	r7[-4],r8
80000386:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000038a:	58 38       	cp.w	r8,3
8000038c:	fe 9a ff ea 	brle	80000360 <ROSA_tcbCreate+0x24>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
80000390:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000394:	30 09       	mov	r9,0
80000396:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
80000398:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000039c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003a0:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
800003a2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800003a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003aa:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
800003ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003b0:	ee f9 ff e8 	ld.w	r9,r7[-24]
800003b4:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
800003b6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800003ba:	a3 68       	lsl	r8,0x2
800003bc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800003c0:	10 09       	add	r9,r8
800003c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003c6:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
800003c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003cc:	70 39       	ld.w	r9,r8[0xc]
800003ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003d2:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
800003d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003d8:	fc 19 00 1c 	movh	r9,0x1c
800003dc:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
800003de:	ee fc ff f8 	ld.w	r12,r7[-8]
800003e2:	f0 1f 00 03 	mcall	800003ec <ROSA_tcbCreate+0xb0>
}
800003e6:	2f ad       	sub	sp,-24
800003e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800003ec:	80 00       	ld.sh	r0,r0[0x0]
800003ee:	05 16       	ld.sh	r6,r2++

800003f0 <ROSA_taskCreate>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

int16_t ROSA_taskCreate(ROSA_taskHandle_t * pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
800003f0:	eb cd 40 80 	pushm	r7,lr
800003f4:	1a 97       	mov	r7,sp
800003f6:	20 6d       	sub	sp,24
800003f8:	ef 4c ff f8 	st.w	r7[-8],r12
800003fc:	ef 4b ff f4 	st.w	r7[-12],r11
80000400:	ef 4a ff f0 	st.w	r7[-16],r10
80000404:	ef 49 ff ec 	st.w	r7[-20],r9
80000408:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) calloc(stackSize, sizeof(uint32_t)); 
8000040c:	30 4b       	mov	r11,4
8000040e:	ee fc ff ec 	ld.w	r12,r7[-20]
80000412:	f0 1f 00 2d 	mcall	800004c4 <ROSA_taskCreate+0xd4>
80000416:	18 98       	mov	r8,r12
80000418:	ef 48 ff fc 	st.w	r7[-4],r8
	
	*pth = (ROSA_taskHandle_t) calloc(1, sizeof(tcb));			
8000041c:	37 4b       	mov	r11,116
8000041e:	30 1c       	mov	r12,1
80000420:	f0 1f 00 29 	mcall	800004c4 <ROSA_taskCreate+0xd4>
80000424:	18 98       	mov	r8,r12
80000426:	10 99       	mov	r9,r8
80000428:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000042c:	91 09       	st.w	r8[0x0],r9
	(*pth)->priority = priority;
8000042e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000432:	70 09       	ld.w	r9,r8[0x0]
80000434:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80000438:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
8000043c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000440:	70 0a       	ld.w	r10,r8[0x0]
80000442:	30 08       	mov	r8,0
80000444:	30 09       	mov	r9,0
80000446:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
8000044a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000044e:	70 09       	ld.w	r9,r8[0x0]
80000450:	30 08       	mov	r8,0
80000452:	f3 68 00 70 	st.b	r9[112],r8
	(*pth)->originalPriority = priority;
80000456:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000045a:	70 09       	ld.w	r9,r8[0x0]
8000045c:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80000460:	f3 68 00 71 	st.b	r9[113],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
80000464:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000468:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000046c:	72 0c       	ld.w	r12,r9[0x0]
8000046e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000472:	ee fa ff f0 	ld.w	r10,r7[-16]
80000476:	ee fb ff f4 	ld.w	r11,r7[-12]
8000047a:	f0 1f 00 14 	mcall	800004c8 <ROSA_taskCreate+0xd8>
	
	readyQueueInsert(*pth);
8000047e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000482:	70 08       	ld.w	r8,r8[0x0]
80000484:	10 9c       	mov	r12,r8
80000486:	f0 1f 00 12 	mcall	800004cc <ROSA_taskCreate+0xdc>
	
	if (EXECTASK != NULL) {
8000048a:	49 28       	lddpc	r8,800004d0 <ROSA_taskCreate+0xe0>
8000048c:	70 08       	ld.w	r8,r8[0x0]
8000048e:	58 08       	cp.w	r8,0
80000490:	c1 40       	breq	800004b8 <ROSA_taskCreate+0xc8>
		if (EXECTASK->priority < priority) {
80000492:	49 08       	lddpc	r8,800004d0 <ROSA_taskCreate+0xe0>
80000494:	70 08       	ld.w	r8,r8[0x0]
80000496:	f1 38 00 64 	ld.ub	r8,r8[100]
8000049a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000049e:	f0 09 18 00 	cp.b	r9,r8
800004a2:	e0 88 00 0b 	brls	800004b8 <ROSA_taskCreate+0xc8>
			PREEMPTASK = PA[priority];
800004a6:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800004aa:	48 b8       	lddpc	r8,800004d4 <ROSA_taskCreate+0xe4>
800004ac:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800004b0:	48 a8       	lddpc	r8,800004d8 <ROSA_taskCreate+0xe8>
800004b2:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
800004b4:	f0 1f 00 0a 	mcall	800004dc <ROSA_taskCreate+0xec>
		}	
	}
	
	return 0;
800004b8:	30 08       	mov	r8,0
}
800004ba:	10 9c       	mov	r12,r8
800004bc:	2f ad       	sub	sp,-24
800004be:	e3 cd 80 80 	ldm	sp++,r7,pc
800004c2:	00 00       	add	r0,r0
800004c4:	80 00       	ld.sh	r0,r0[0x0]
800004c6:	10 18       	sub	r8,r8
800004c8:	80 00       	ld.sh	r0,r0[0x0]
800004ca:	03 3c       	ld.ub	r12,r1++
800004cc:	80 00       	ld.sh	r0,r0[0x0]
800004ce:	01 58       	ld.sh	r8,--r0
800004d0:	00 00       	add	r0,r0
800004d2:	06 18       	sub	r8,r3
800004d4:	00 00       	add	r0,r0
800004d6:	05 e4       	ld.ub	r4,r2[0x6]
800004d8:	00 00       	add	r0,r0
800004da:	06 14       	sub	r4,r3
800004dc:	80 00       	ld.sh	r0,r0[0x0]
800004de:	05 a2       	ld.ub	r2,r2[0x2]

800004e0 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
800004e0:	4b 5c       	lddpc	r12,800005b4 <_yield+0xa>
	lda.w r11,EXECTASK
800004e2:	4b 6b       	lddpc	r11,800005b8 <_yield+0xe>
	ld.w r12,r12[0x0]
800004e4:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
800004e6:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
800004e8:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800004ea:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800004ec:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
800004f0:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
800004f2:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
800004f4:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
800004f6:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
800004fa:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
800004fc:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
800004fe:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000500:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
80000502:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
80000504:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
80000506:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000508:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
8000050a:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
8000050c:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
8000050e:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000510:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000512:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000514:	1c 9f       	mov	pc,lr

80000516 <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
80000516:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000518:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
8000051a:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
8000051c:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000520:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80000524:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000528:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
8000052c:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000530:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000534:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000538:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
8000053c:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000540:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
80000542:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80000544:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
80000546:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000548:	1c 9f       	mov	pc,lr

8000054a <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
8000054a:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000054c:	49 bc       	lddpc	r12,800005b8 <_yield+0xe>
	ld.w r12,r12[0x0]
8000054e:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000550:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
80000552:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
80000554:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
80000556:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
80000558:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
8000055a:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
8000055c:	33 40       	mov	r0,52
	add r0,r12
8000055e:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000560:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80000564:	1a 90       	mov	r0,sp
	st.w --sp,r0
80000566:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80000568:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
8000056c:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
8000056e:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80000570:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
80000572:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
80000574:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
80000576:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80000578:	1c 9f       	mov	pc,lr

8000057a <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000057a:	49 0c       	lddpc	r12,800005b8 <_yield+0xe>
	ld.w r12,r12[0x0]
8000057c:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
8000057e:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000580:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
80000582:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
80000586:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80000588:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
8000058a:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
8000058c:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
8000058e:	33 40       	mov	r0,52
	add r0,r12
80000590:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80000592:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80000596:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000598:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
8000059a:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
8000059c:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
8000059e:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
800005a0:	d6 13       	rets

800005a2 <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
800005a2:	d4 01       	pushm	lr
	lda.w lr,_yield
800005a4:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
800005a8:	d7 33       	scall

800005aa <_yield>:
_yield:
	call contextSave
800005aa:	cd 0f       	rcall	8000054a <contextSave>
	call scheduler
800005ac:	f0 1f 00 04 	mcall	800005bc <_yield+0x12>
	call contextRestore
800005b0:	ce 5f       	rcall	8000057a <contextRestore>
800005b2:	00 00       	add	r0,r0
800005b4:	00 00       	add	r0,r0
800005b6:	05 e0       	ld.ub	r0,r2[0x6]
800005b8:	00 00       	add	r0,r0
800005ba:	06 18       	sub	r8,r3
800005bc:	80 00       	ld.sh	r0,r0[0x0]
800005be:	05 c0       	ld.ub	r0,r2[0x4]

800005c0 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
800005c0:	eb cd 40 80 	pushm	r7,lr
800005c4:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK == NULL) {
800005c6:	49 28       	lddpc	r8,8000060c <scheduler+0x4c>
800005c8:	70 08       	ld.w	r8,r8[0x0]
800005ca:	58 08       	cp.w	r8,0
800005cc:	c1 61       	brne	800005f8 <scheduler+0x38>
		PA[EXECTASK->priority] = EXECTASK;
800005ce:	49 18       	lddpc	r8,80000610 <scheduler+0x50>
800005d0:	70 08       	ld.w	r8,r8[0x0]
800005d2:	f1 38 00 64 	ld.ub	r8,r8[100]
800005d6:	10 99       	mov	r9,r8
800005d8:	48 e8       	lddpc	r8,80000610 <scheduler+0x50>
800005da:	70 0a       	ld.w	r10,r8[0x0]
800005dc:	48 e8       	lddpc	r8,80000614 <scheduler+0x54>
800005de:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		if (EXECTASK->nexttcb != NULL)
800005e2:	48 c8       	lddpc	r8,80000610 <scheduler+0x50>
800005e4:	70 08       	ld.w	r8,r8[0x0]
800005e6:	70 08       	ld.w	r8,r8[0x0]
800005e8:	58 08       	cp.w	r8,0
800005ea:	c0 e0       	breq	80000606 <scheduler+0x46>
		{
			EXECTASK = EXECTASK->nexttcb;
800005ec:	48 98       	lddpc	r8,80000610 <scheduler+0x50>
800005ee:	70 08       	ld.w	r8,r8[0x0]
800005f0:	70 09       	ld.w	r9,r8[0x0]
800005f2:	48 88       	lddpc	r8,80000610 <scheduler+0x50>
800005f4:	91 09       	st.w	r8[0x0],r9
800005f6:	c0 88       	rjmp	80000606 <scheduler+0x46>
		}
	}
	else {
		EXECTASK = PREEMPTASK;
800005f8:	48 58       	lddpc	r8,8000060c <scheduler+0x4c>
800005fa:	70 09       	ld.w	r9,r8[0x0]
800005fc:	48 58       	lddpc	r8,80000610 <scheduler+0x50>
800005fe:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
80000600:	48 38       	lddpc	r8,8000060c <scheduler+0x4c>
80000602:	30 09       	mov	r9,0
80000604:	91 09       	st.w	r8[0x0],r9
	}
}
80000606:	e3 cd 80 80 	ldm	sp++,r7,pc
8000060a:	00 00       	add	r0,r0
8000060c:	00 00       	add	r0,r0
8000060e:	06 14       	sub	r4,r3
80000610:	00 00       	add	r0,r0
80000612:	06 18       	sub	r8,r3
80000614:	00 00       	add	r0,r0
80000616:	05 e4       	ld.ub	r4,r2[0x6]

80000618 <ROSA_startScheduler>:

void ROSA_startScheduler(void)
{
80000618:	eb cd 40 80 	pushm	r7,lr
8000061c:	1a 97       	mov	r7,sp
8000061e:	20 1d       	sub	sp,4
	tcb * tmp = readyQueueSearch();	
80000620:	f0 1f 00 0a 	mcall	80000648 <ROSA_startScheduler+0x30>
80000624:	18 98       	mov	r8,r12
80000626:	ef 48 ff fc 	st.w	r7[-4],r8
	if (EXECTASK == NULL)
8000062a:	48 98       	lddpc	r8,8000064c <ROSA_startScheduler+0x34>
8000062c:	70 08       	ld.w	r8,r8[0x0]
8000062e:	58 08       	cp.w	r8,0
80000630:	c0 81       	brne	80000640 <ROSA_startScheduler+0x28>
	{
		TCBLIST = tmp->nexttcb;
80000632:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000636:	70 09       	ld.w	r9,r8[0x0]
80000638:	48 68       	lddpc	r8,80000650 <ROSA_startScheduler+0x38>
8000063a:	91 09       	st.w	r8[0x0],r9
		ROSA_start();
8000063c:	f0 1f 00 06 	mcall	80000654 <ROSA_startScheduler+0x3c>
	}
}
80000640:	2f fd       	sub	sp,-4
80000642:	e3 cd 80 80 	ldm	sp++,r7,pc
80000646:	00 00       	add	r0,r0
80000648:	80 00       	ld.sh	r0,r0[0x0]
8000064a:	01 ec       	ld.ub	r12,r0[0x6]
8000064c:	00 00       	add	r0,r0
8000064e:	06 18       	sub	r8,r3
80000650:	00 00       	add	r0,r0
80000652:	05 e0       	ld.ub	r0,r2[0x6]
80000654:	80 00       	ld.sh	r0,r0[0x0]
80000656:	04 e0       	st.h	--r2,r0

80000658 <C.18.9634>:
80000658:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000668 <removeDelayQueue>:
/*																		*/
/* Removes the given task from the delay queue							*/
/* Param pth: pointer to the task to be removed from the delay queue	*/
/************************************************************************/
int removeDelayQueue(ROSA_taskHandle_t pth)
{
80000668:	eb cd 40 80 	pushm	r7,lr
8000066c:	1a 97       	mov	r7,sp
8000066e:	20 3d       	sub	sp,12
80000670:	ef 4c ff f4 	st.w	r7[-12],r12
	// If there are no tasks in the delay queue, return error code -1
	if (DELAYQUEUE == NULL)
80000674:	4a 38       	lddpc	r8,80000700 <removeDelayQueue+0x98>
80000676:	70 08       	ld.w	r8,r8[0x0]
80000678:	58 08       	cp.w	r8,0
8000067a:	c0 31       	brne	80000680 <removeDelayQueue+0x18>
	{
		return -1;
8000067c:	3f f8       	mov	r8,-1
8000067e:	c3 c8       	rjmp	800006f6 <removeDelayQueue+0x8e>
	}
	// If there is only one task in the status queue and this is pth, remove it from the queue
	if (DELAYQUEUE == pth)
80000680:	4a 08       	lddpc	r8,80000700 <removeDelayQueue+0x98>
80000682:	70 09       	ld.w	r9,r8[0x0]
80000684:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000688:	10 39       	cp.w	r9,r8
8000068a:	c1 11       	brne	800006ac <removeDelayQueue+0x44>
	{
		if (DELAYQUEUE->nexttcb == NULL)
8000068c:	49 d8       	lddpc	r8,80000700 <removeDelayQueue+0x98>
8000068e:	70 08       	ld.w	r8,r8[0x0]
80000690:	70 08       	ld.w	r8,r8[0x0]
80000692:	58 08       	cp.w	r8,0
80000694:	c0 51       	brne	8000069e <removeDelayQueue+0x36>
		{
			DELAYQUEUE = NULL; // Task was the only one in the list
80000696:	49 b8       	lddpc	r8,80000700 <removeDelayQueue+0x98>
80000698:	30 09       	mov	r9,0
8000069a:	91 09       	st.w	r8[0x0],r9
8000069c:	c0 68       	rjmp	800006a8 <removeDelayQueue+0x40>
			} else {
			DELAYQUEUE = pth->nexttcb;
8000069e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800006a2:	70 09       	ld.w	r9,r8[0x0]
800006a4:	49 78       	lddpc	r8,80000700 <removeDelayQueue+0x98>
800006a6:	91 09       	st.w	r8[0x0],r9
		}
		return 0;
800006a8:	30 08       	mov	r8,0
800006aa:	c2 68       	rjmp	800006f6 <removeDelayQueue+0x8e>
	}
	// Else, find the task before pth and point it to the task after pth, removing it
	ROSA_taskHandle_t next = DELAYQUEUE;
800006ac:	49 58       	lddpc	r8,80000700 <removeDelayQueue+0x98>
800006ae:	70 08       	ld.w	r8,r8[0x0]
800006b0:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_taskHandle_t prev;
	while (next != pth)
800006b4:	c1 08       	rjmp	800006d4 <removeDelayQueue+0x6c>
	{
		prev = next;
800006b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006ba:	ef 48 ff fc 	st.w	r7[-4],r8
		next = next->nexttcb;
800006be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006c2:	70 08       	ld.w	r8,r8[0x0]
800006c4:	ef 48 ff f8 	st.w	r7[-8],r8
		if(next == NULL)
800006c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006cc:	58 08       	cp.w	r8,0
800006ce:	c0 31       	brne	800006d4 <removeDelayQueue+0x6c>
		{
			return -1; //Task is not in the list, so return error code -1
800006d0:	3f f8       	mov	r8,-1
800006d2:	c1 28       	rjmp	800006f6 <removeDelayQueue+0x8e>
		return 0;
	}
	// Else, find the task before pth and point it to the task after pth, removing it
	ROSA_taskHandle_t next = DELAYQUEUE;
	ROSA_taskHandle_t prev;
	while (next != pth)
800006d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800006d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800006dc:	10 39       	cp.w	r9,r8
800006de:	ce c1       	brne	800006b6 <removeDelayQueue+0x4e>
		if(next == NULL)
		{
			return -1; //Task is not in the list, so return error code -1
		}
	}
	prev->nexttcb = next->nexttcb;
800006e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006e4:	70 09       	ld.w	r9,r8[0x0]
800006e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006ea:	91 09       	st.w	r8[0x0],r9
	next->nexttcb = NULL;
800006ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006f0:	30 09       	mov	r9,0
800006f2:	91 09       	st.w	r8[0x0],r9
	return 0;
800006f4:	30 08       	mov	r8,0
}
800006f6:	10 9c       	mov	r12,r8
800006f8:	2f dd       	sub	sp,-12
800006fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800006fe:	00 00       	add	r0,r0
80000700:	00 00       	add	r0,r0
80000702:	06 90       	mov	r0,r3

80000704 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000704:	eb cd 40 80 	pushm	r7,lr
80000708:	1a 97       	mov	r7,sp
8000070a:	20 5d       	sub	sp,20
	interruptDisable();
8000070c:	f0 1f 00 36 	mcall	800007e4 <timerISR+0xe0>
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000710:	fe 78 38 00 	mov	r8,-51200
80000714:	ef 48 ff f0 	st.w	r7[-16],r8
	ROSA_taskHandle_t tmptsk;
	ROSA_taskHandle_t tmp;
	bool interruptTask;
	
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000718:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000071c:	70 88       	ld.w	r8,r8[0x20]
8000071e:	ef 48 ff ec 	st.w	r7[-20],r8
	if (sr & AVR32_TC_CPCS_MASK)
80000722:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000726:	e2 18 00 10 	andl	r8,0x10,COH
8000072a:	c5 60       	breq	800007d6 <timerISR+0xd2>
	{
		systemTick++;
8000072c:	4a f8       	lddpc	r8,800007e8 <timerISR+0xe4>
8000072e:	f0 ea 00 00 	ld.d	r10,r8[0]
80000732:	30 18       	mov	r8,1
80000734:	30 09       	mov	r9,0
80000736:	f4 08 00 08 	add	r8,r10,r8
8000073a:	f6 09 00 49 	adc	r9,r11,r9
8000073e:	4a ba       	lddpc	r10,800007e8 <timerISR+0xe4>
80000740:	f4 e9 00 00 	st.d	r10[0],r8
		interruptTask = false;
80000744:	30 08       	mov	r8,0
80000746:	ef 68 ff ff 	st.b	r7[-1],r8
		
		while (DELAYQUEUE != NULL && DELAYQUEUE->delay <= systemTick)
8000074a:	c1 78       	rjmp	80000778 <timerISR+0x74>
		{
			tmptsk = DELAYQUEUE;
8000074c:	4a 88       	lddpc	r8,800007ec <timerISR+0xe8>
8000074e:	70 08       	ld.w	r8,r8[0x0]
80000750:	ef 48 ff f4 	st.w	r7[-12],r8
			removeDelayQueue(DELAYQUEUE);
80000754:	4a 68       	lddpc	r8,800007ec <timerISR+0xe8>
80000756:	70 08       	ld.w	r8,r8[0x0]
80000758:	10 9c       	mov	r12,r8
8000075a:	f0 1f 00 26 	mcall	800007f0 <timerISR+0xec>
			tmptsk->delay = 0;
8000075e:	ee fa ff f4 	ld.w	r10,r7[-12]
80000762:	30 08       	mov	r8,0
80000764:	30 09       	mov	r9,0
80000766:	f4 e9 00 68 	st.d	r10[104],r8
			readyQueueInsert(tmptsk);
8000076a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000076e:	f0 1f 00 22 	mcall	800007f4 <timerISR+0xf0>
			interruptTask = true;
80000772:	30 18       	mov	r8,1
80000774:	ef 68 ff ff 	st.b	r7[-1],r8
	if (sr & AVR32_TC_CPCS_MASK)
	{
		systemTick++;
		interruptTask = false;
		
		while (DELAYQUEUE != NULL && DELAYQUEUE->delay <= systemTick)
80000778:	49 d8       	lddpc	r8,800007ec <timerISR+0xe8>
8000077a:	70 08       	ld.w	r8,r8[0x0]
8000077c:	58 08       	cp.w	r8,0
8000077e:	c0 d0       	breq	80000798 <timerISR+0x94>
80000780:	49 b8       	lddpc	r8,800007ec <timerISR+0xe8>
80000782:	70 08       	ld.w	r8,r8[0x0]
80000784:	f0 ea 00 68 	ld.d	r10,r8[104]
80000788:	49 88       	lddpc	r8,800007e8 <timerISR+0xe4>
8000078a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000078e:	10 3a       	cp.w	r10,r8
80000790:	f2 0b 13 00 	cpc	r11,r9
80000794:	fe 98 ff dc 	brls	8000074c <timerISR+0x48>
			removeDelayQueue(DELAYQUEUE);
			tmptsk->delay = 0;
			readyQueueInsert(tmptsk);
			interruptTask = true;
		}
		if (interruptTask)
80000798:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000079c:	30 08       	mov	r8,0
8000079e:	f0 09 18 00 	cp.b	r9,r8
800007a2:	c1 a0       	breq	800007d6 <timerISR+0xd2>
		{
			tmp = readyQueueSearch();
800007a4:	f0 1f 00 15 	mcall	800007f8 <timerISR+0xf4>
800007a8:	18 98       	mov	r8,r12
800007aa:	ef 48 ff f8 	st.w	r7[-8],r8
			if (EXECTASK->priority < tmptsk->priority)
800007ae:	49 48       	lddpc	r8,800007fc <timerISR+0xf8>
800007b0:	70 08       	ld.w	r8,r8[0x0]
800007b2:	f1 39 00 64 	ld.ub	r9,r8[100]
800007b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800007ba:	f1 38 00 64 	ld.ub	r8,r8[100]
800007be:	f0 09 18 00 	cp.b	r9,r8
800007c2:	c0 a2       	brcc	800007d6 <timerISR+0xd2>
			{
				PREEMPTASK = tmp->nexttcb;
800007c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007c8:	70 09       	ld.w	r9,r8[0x0]
800007ca:	48 e8       	lddpc	r8,80000800 <timerISR+0xfc>
800007cc:	91 09       	st.w	r8[0x0],r9
				interruptEnable();
800007ce:	f0 1f 00 0e 	mcall	80000804 <timerISR+0x100>
				ROSA_yieldFromISR();
800007d2:	f0 1f 00 0e 	mcall	80000808 <timerISR+0x104>
			}
		}
	}
	//timerClearInterrupt(); //Disabled until we know what it actually does
	interruptEnable();
800007d6:	f0 1f 00 0c 	mcall	80000804 <timerISR+0x100>
}
800007da:	2f bd       	sub	sp,-20
800007dc:	e3 cd 40 80 	ldm	sp++,r7,lr
800007e0:	d6 03       	rete
800007e2:	00 00       	add	r0,r0
800007e4:	80 00       	ld.sh	r0,r0[0x0]
800007e6:	19 66       	ld.uh	r6,--r12
800007e8:	00 00       	add	r0,r0
800007ea:	06 94       	mov	r4,r3
800007ec:	00 00       	add	r0,r0
800007ee:	06 90       	mov	r0,r3
800007f0:	80 00       	ld.sh	r0,r0[0x0]
800007f2:	06 68       	and	r8,r3
800007f4:	80 00       	ld.sh	r0,r0[0x0]
800007f6:	01 58       	ld.sh	r8,--r0
800007f8:	80 00       	ld.sh	r0,r0[0x0]
800007fa:	01 ec       	ld.ub	r12,r0[0x6]
800007fc:	00 00       	add	r0,r0
800007fe:	06 18       	sub	r8,r3
80000800:	00 00       	add	r0,r0
80000802:	06 14       	sub	r4,r3
80000804:	80 00       	ld.sh	r0,r0[0x0]
80000806:	19 6a       	ld.uh	r10,--r12
80000808:	80 00       	ld.sh	r0,r0[0x0]
8000080a:	00 c4       	st.b	r0++,r4

8000080c <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
8000080c:	eb cd 40 80 	pushm	r7,lr
80000810:	1a 97       	mov	r7,sp
80000812:	20 7d       	sub	sp,28
80000814:	ef 4c ff e4 	st.w	r7[-28],r12
	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000818:	4a 48       	lddpc	r8,800008a8 <timerPeriodSet+0x9c>
8000081a:	ee ca 00 18 	sub	r10,r7,24
8000081e:	10 9b       	mov	r11,r8
80000820:	f6 e8 00 00 	ld.d	r8,r11[0]
80000824:	f4 e9 00 00 	st.d	r10[0],r8
80000828:	f6 e8 00 08 	ld.d	r8,r11[8]
8000082c:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000830:	30 48       	mov	r8,4
80000832:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80000836:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000083a:	20 18       	sub	r8,1
8000083c:	a3 68       	lsl	r8,0x2
8000083e:	ee 08 00 08 	add	r8,r7,r8
80000842:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000846:	e0 68 1b 00 	mov	r8,6912
8000084a:	ea 18 00 b7 	orh	r8,0xb7
8000084e:	f0 09 0c 08 	divs	r8,r8,r9
80000852:	10 99       	mov	r9,r8
80000854:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000858:	b1 39       	mul	r9,r8
8000085a:	e0 68 4d d3 	mov	r8,19923
8000085e:	ea 18 10 62 	orh	r8,0x1062
80000862:	f2 08 06 48 	mulu.d	r8,r9,r8
80000866:	f2 08 16 06 	lsr	r8,r9,0x6
8000086a:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
8000086e:	ee fc ff fc 	ld.w	r12,r7[-4]
80000872:	f0 1f 00 0f 	mcall	800008ac <timerPeriodSet+0xa0>
	timerRCSet(rc);
80000876:	ee fc ff f8 	ld.w	r12,r7[-8]
8000087a:	f0 1f 00 0e 	mcall	800008b0 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
8000087e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000882:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000886:	f2 08 02 4a 	mul	r10,r9,r8
8000088a:	e0 68 9f 81 	mov	r8,40833
8000088e:	ea 18 16 5e 	orh	r8,0x165e
80000892:	f4 08 04 48 	muls.d	r8,r10,r8
80000896:	b5 49       	asr	r9,0x14
80000898:	f4 08 14 1f 	asr	r8,r10,0x1f
8000089c:	f2 08 01 08 	sub	r8,r9,r8
}
800008a0:	10 9c       	mov	r12,r8
800008a2:	2f 9d       	sub	sp,-28
800008a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800008a8:	80 00       	ld.sh	r0,r0[0x0]
800008aa:	06 58       	eor	r8,r3
800008ac:	80 00       	ld.sh	r0,r0[0x0]
800008ae:	0f 54       	ld.sh	r4,--r7
800008b0:	80 00       	ld.sh	r0,r0[0x0]
800008b2:	0f 3e       	ld.ub	lr,r7++

800008b4 <buttonInit>:
800008b4:	eb cd 40 80 	pushm	r7,lr
800008b8:	1a 97       	mov	r7,sp
800008ba:	30 1b       	mov	r11,1
800008bc:	35 8c       	mov	r12,88
800008be:	f0 1f 00 07 	mcall	800008d8 <buttonInit+0x24>
800008c2:	30 1b       	mov	r11,1
800008c4:	35 5c       	mov	r12,85
800008c6:	f0 1f 00 05 	mcall	800008d8 <buttonInit+0x24>
800008ca:	30 1b       	mov	r11,1
800008cc:	35 2c       	mov	r12,82
800008ce:	f0 1f 00 03 	mcall	800008d8 <buttonInit+0x24>
800008d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800008d6:	00 00       	add	r0,r0
800008d8:	80 00       	ld.sh	r0,r0[0x0]
800008da:	09 48       	ld.w	r8,--r4

800008dc <joystickInit>:
800008dc:	eb cd 40 80 	pushm	r7,lr
800008e0:	1a 97       	mov	r7,sp
800008e2:	30 1b       	mov	r11,1
800008e4:	31 bc       	mov	r12,27
800008e6:	f0 1f 00 0b 	mcall	80000910 <joystickInit+0x34>
800008ea:	30 1b       	mov	r11,1
800008ec:	31 9c       	mov	r12,25
800008ee:	f0 1f 00 09 	mcall	80000910 <joystickInit+0x34>
800008f2:	30 1b       	mov	r11,1
800008f4:	31 cc       	mov	r12,28
800008f6:	f0 1f 00 07 	mcall	80000910 <joystickInit+0x34>
800008fa:	30 1b       	mov	r11,1
800008fc:	31 4c       	mov	r12,20
800008fe:	f0 1f 00 05 	mcall	80000910 <joystickInit+0x34>
80000902:	30 1b       	mov	r11,1
80000904:	31 ac       	mov	r12,26
80000906:	f0 1f 00 03 	mcall	80000910 <joystickInit+0x34>
8000090a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000090e:	00 00       	add	r0,r0
80000910:	80 00       	ld.sh	r0,r0[0x0]
80000912:	09 48       	ld.w	r8,--r4

80000914 <delay_ms>:
80000914:	eb cd 40 80 	pushm	r7,lr
80000918:	1a 97       	mov	r7,sp
8000091a:	20 2d       	sub	sp,8
8000091c:	ef 4c ff f8 	st.w	r7[-8],r12
80000920:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000924:	e0 69 04 42 	mov	r9,1090
80000928:	b3 38       	mul	r8,r9
8000092a:	ef 48 ff fc 	st.w	r7[-4],r8
8000092e:	c0 68       	rjmp	8000093a <delay_ms+0x26>
80000930:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000934:	20 18       	sub	r8,1
80000936:	ef 48 ff fc 	st.w	r7[-4],r8
8000093a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000093e:	58 08       	cp.w	r8,0
80000940:	cf 81       	brne	80000930 <delay_ms+0x1c>
80000942:	2f ed       	sub	sp,-8
80000944:	e3 cd 80 80 	ldm	sp++,r7,pc

80000948 <gpioInit>:
80000948:	eb cd 40 80 	pushm	r7,lr
8000094c:	1a 97       	mov	r7,sp
8000094e:	20 7d       	sub	sp,28
80000950:	ef 4c ff ec 	st.w	r7[-20],r12
80000954:	ef 4b ff e8 	st.w	r7[-24],r11
80000958:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000095c:	a5 58       	asr	r8,0x5
8000095e:	ef 48 ff f4 	st.w	r7[-12],r8
80000962:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000966:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000096a:	ef 48 ff fc 	st.w	r7[-4],r8
8000096e:	30 19       	mov	r9,1
80000970:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000974:	f2 08 09 48 	lsl	r8,r9,r8
80000978:	ef 48 ff f8 	st.w	r7[-8],r8
8000097c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000980:	a9 68       	lsl	r8,0x8
80000982:	e0 28 f0 00 	sub	r8,61440
80000986:	ef 48 ff f0 	st.w	r7[-16],r8
8000098a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000098e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000992:	91 19       	st.w	r8[0x4],r9
80000994:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000998:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000099c:	91 69       	st.w	r8[0x18],r9
8000099e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009a6:	91 a9       	st.w	r8[0x28],r9
800009a8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800009ac:	ef 48 ff e4 	st.w	r7[-28],r8
800009b0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800009b4:	58 08       	cp.w	r8,0
800009b6:	c0 60       	breq	800009c2 <gpioInit+0x7a>
800009b8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800009bc:	58 18       	cp.w	r8,1
800009be:	c0 90       	breq	800009d0 <gpioInit+0x88>
800009c0:	c0 f8       	rjmp	800009de <gpioInit+0x96>
800009c2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009ca:	f1 49 00 44 	st.w	r8[68],r9
800009ce:	c0 e8       	rjmp	800009ea <gpioInit+0xa2>
800009d0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009d8:	f1 49 00 48 	st.w	r8[72],r9
800009dc:	c0 78       	rjmp	800009ea <gpioInit+0xa2>
800009de:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009e2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009e6:	f1 49 00 48 	st.w	r8[72],r9
800009ea:	2f 9d       	sub	sp,-28
800009ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800009f0 <gpioClear>:
800009f0:	eb cd 40 80 	pushm	r7,lr
800009f4:	1a 97       	mov	r7,sp
800009f6:	20 5d       	sub	sp,20
800009f8:	ef 4c ff ec 	st.w	r7[-20],r12
800009fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000a00:	a5 58       	asr	r8,0x5
80000a02:	ef 48 ff f4 	st.w	r7[-12],r8
80000a06:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000a0a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000a0e:	ef 48 ff fc 	st.w	r7[-4],r8
80000a12:	30 19       	mov	r9,1
80000a14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a18:	f2 08 09 48 	lsl	r8,r9,r8
80000a1c:	ef 48 ff f8 	st.w	r7[-8],r8
80000a20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a24:	a9 68       	lsl	r8,0x8
80000a26:	e0 28 f0 00 	sub	r8,61440
80000a2a:	ef 48 ff f0 	st.w	r7[-16],r8
80000a2e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a32:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000a36:	f1 49 00 58 	st.w	r8[88],r9
80000a3a:	2f bd       	sub	sp,-20
80000a3c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000a40 <gpioSet>:
80000a40:	eb cd 40 80 	pushm	r7,lr
80000a44:	1a 97       	mov	r7,sp
80000a46:	20 5d       	sub	sp,20
80000a48:	ef 4c ff ec 	st.w	r7[-20],r12
80000a4c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000a50:	a5 58       	asr	r8,0x5
80000a52:	ef 48 ff f4 	st.w	r7[-12],r8
80000a56:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000a5a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000a5e:	ef 48 ff fc 	st.w	r7[-4],r8
80000a62:	30 19       	mov	r9,1
80000a64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a68:	f2 08 09 48 	lsl	r8,r9,r8
80000a6c:	ef 48 ff f8 	st.w	r7[-8],r8
80000a70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a74:	a9 68       	lsl	r8,0x8
80000a76:	e0 28 f0 00 	sub	r8,61440
80000a7a:	ef 48 ff f0 	st.w	r7[-16],r8
80000a7e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a82:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000a86:	f1 49 00 54 	st.w	r8[84],r9
80000a8a:	2f bd       	sub	sp,-20
80000a8c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000a90 <ledInit>:
80000a90:	eb cd 40 80 	pushm	r7,lr
80000a94:	1a 97       	mov	r7,sp
80000a96:	20 9d       	sub	sp,36
80000a98:	49 e8       	lddpc	r8,80000b10 <ledInit+0x80>
80000a9a:	ee cb 00 24 	sub	r11,r7,36
80000a9e:	10 9a       	mov	r10,r8
80000aa0:	f4 e8 00 00 	ld.d	r8,r10[0]
80000aa4:	f6 e9 00 00 	st.d	r11[0],r8
80000aa8:	f4 e8 00 08 	ld.d	r8,r10[8]
80000aac:	f6 e9 00 08 	st.d	r11[8],r8
80000ab0:	f4 e8 00 10 	ld.d	r8,r10[16]
80000ab4:	f6 e9 00 10 	st.d	r11[16],r8
80000ab8:	f4 e8 00 18 	ld.d	r8,r10[24]
80000abc:	f6 e9 00 18 	st.d	r11[24],r8
80000ac0:	30 08       	mov	r8,0
80000ac2:	ef 48 ff fc 	st.w	r7[-4],r8
80000ac6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000aca:	a3 68       	lsl	r8,0x2
80000acc:	ee 08 00 08 	add	r8,r7,r8
80000ad0:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000ad4:	10 9c       	mov	r12,r8
80000ad6:	f0 1f 00 10 	mcall	80000b14 <ledInit+0x84>
80000ada:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ade:	a3 68       	lsl	r8,0x2
80000ae0:	ee 08 00 08 	add	r8,r7,r8
80000ae4:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000ae8:	30 0b       	mov	r11,0
80000aea:	10 9c       	mov	r12,r8
80000aec:	f0 1f 00 0b 	mcall	80000b18 <ledInit+0x88>
80000af0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000af4:	58 78       	cp.w	r8,7
80000af6:	5f 18       	srne	r8
80000af8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000afc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b00:	2f f8       	sub	r8,-1
80000b02:	ef 48 ff fc 	st.w	r7[-4],r8
80000b06:	58 09       	cp.w	r9,0
80000b08:	cd f1       	brne	80000ac6 <ledInit+0x36>
80000b0a:	2f 7d       	sub	sp,-36
80000b0c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b10:	80 00       	ld.sh	r0,r0[0x0]
80000b12:	1c 00       	add	r0,lr
80000b14:	80 00       	ld.sh	r0,r0[0x0]
80000b16:	0b 3c       	ld.ub	r12,r5++
80000b18:	80 00       	ld.sh	r0,r0[0x0]
80000b1a:	09 48       	ld.w	r8,--r4

80000b1c <ledOn>:
80000b1c:	eb cd 40 80 	pushm	r7,lr
80000b20:	1a 97       	mov	r7,sp
80000b22:	20 1d       	sub	sp,4
80000b24:	ef 4c ff fc 	st.w	r7[-4],r12
80000b28:	ee fc ff fc 	ld.w	r12,r7[-4]
80000b2c:	f0 1f 00 03 	mcall	80000b38 <ledOn+0x1c>
80000b30:	2f fd       	sub	sp,-4
80000b32:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b36:	00 00       	add	r0,r0
80000b38:	80 00       	ld.sh	r0,r0[0x0]
80000b3a:	09 f0       	ld.ub	r0,r4[0x7]

80000b3c <ledOff>:
80000b3c:	eb cd 40 80 	pushm	r7,lr
80000b40:	1a 97       	mov	r7,sp
80000b42:	20 1d       	sub	sp,4
80000b44:	ef 4c ff fc 	st.w	r7[-4],r12
80000b48:	ee fc ff fc 	ld.w	r12,r7[-4]
80000b4c:	f0 1f 00 03 	mcall	80000b58 <ledOff+0x1c>
80000b50:	2f fd       	sub	sp,-4
80000b52:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b56:	00 00       	add	r0,r0
80000b58:	80 00       	ld.sh	r0,r0[0x0]
80000b5a:	0a 40       	or	r0,r5

80000b5c <potInit>:
80000b5c:	d3 01       	pushm	r11-r12
80000b5e:	e0 6c 10 00 	mov	r12,4096
80000b62:	ea 1c ff ff 	orh	r12,0xffff
80000b66:	31 6b       	mov	r11,22
80000b68:	99 2b       	st.w	r12[0x8],r11
80000b6a:	99 6b       	st.w	r12[0x18],r11
80000b6c:	99 6b       	st.w	r12[0x18],r11
80000b6e:	e0 6c 3c 00 	mov	r12,15360
80000b72:	ea 1c ff ff 	orh	r12,0xffff
80000b76:	30 1b       	mov	r11,1
80000b78:	99 0b       	st.w	r12[0x0],r11
80000b7a:	e0 6b 0f 1f 	mov	r11,3871
80000b7e:	b1 6b       	lsl	r11,0x10
80000b80:	99 1b       	st.w	r12[0x4],r11
80000b82:	30 2b       	mov	r11,2
80000b84:	99 4b       	st.w	r12[0x10],r11
80000b86:	d3 02       	popm	r11-r12
80000b88:	1c 9f       	mov	pc,lr

80000b8a <potGetValue>:
80000b8a:	d1 81       	pushm	r10-r11
80000b8c:	e0 6c 3c 00 	mov	r12,15360
80000b90:	ea 1c ff ff 	orh	r12,0xffff
80000b94:	30 2b       	mov	r11,2
80000b96:	99 0b       	st.w	r12[0x0],r11

80000b98 <a1>:
80000b98:	78 7a       	ld.w	r10,r12[0x1c]
80000b9a:	16 7a       	tst	r10,r11
80000b9c:	cf e0       	breq	80000b98 <a1>
80000b9e:	78 dc       	ld.w	r12,r12[0x34]
80000ba0:	d1 82       	popm	r10-r11
80000ba2:	1c 9f       	mov	pc,lr

80000ba4 <usartReset>:
80000ba4:	eb cd 40 80 	pushm	r7,lr
80000ba8:	1a 97       	mov	r7,sp
80000baa:	20 3d       	sub	sp,12
80000bac:	ef 4c ff f8 	st.w	r7[-8],r12
80000bb0:	f0 1f 00 16 	mcall	80000c08 <usartReset+0x64>
80000bb4:	18 98       	mov	r8,r12
80000bb6:	ef 48 ff fc 	st.w	r7[-4],r8
80000bba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bbe:	58 08       	cp.w	r8,0
80000bc0:	c0 30       	breq	80000bc6 <usartReset+0x22>
80000bc2:	f0 1f 00 13 	mcall	80000c0c <usartReset+0x68>
80000bc6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bca:	3f f8       	mov	r8,-1
80000bcc:	93 38       	st.w	r9[0xc],r8
80000bce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bd2:	70 58       	ld.w	r8,r8[0x14]
80000bd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bd8:	58 08       	cp.w	r8,0
80000bda:	c0 30       	breq	80000be0 <usartReset+0x3c>
80000bdc:	f0 1f 00 0d 	mcall	80000c10 <usartReset+0x6c>
80000be0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000be4:	30 08       	mov	r8,0
80000be6:	93 18       	st.w	r9[0x4],r8
80000be8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bec:	30 08       	mov	r8,0
80000bee:	93 98       	st.w	r9[0x24],r8
80000bf0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bf4:	30 08       	mov	r8,0
80000bf6:	93 a8       	st.w	r9[0x28],r8
80000bf8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bfc:	ea 68 61 0c 	mov	r8,680204
80000c00:	93 08       	st.w	r9[0x0],r8
80000c02:	2f dd       	sub	sp,-12
80000c04:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c08:	80 00       	ld.sh	r0,r0[0x0]
80000c0a:	19 6e       	ld.uh	lr,--r12
80000c0c:	80 00       	ld.sh	r0,r0[0x0]
80000c0e:	19 66       	ld.uh	r6,--r12
80000c10:	80 00       	ld.sh	r0,r0[0x0]
80000c12:	19 6a       	ld.uh	r10,--r12

80000c14 <usartSetBaudrate>:
80000c14:	eb cd 40 80 	pushm	r7,lr
80000c18:	1a 97       	mov	r7,sp
80000c1a:	20 bd       	sub	sp,44
80000c1c:	ef 4c ff ec 	st.w	r7[-20],r12
80000c20:	ef 4b ff e8 	st.w	r7[-24],r11
80000c24:	ef 4a ff e4 	st.w	r7[-28],r10
80000c28:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000c2c:	f0 09 15 04 	lsl	r9,r8,0x4
80000c30:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c34:	10 39       	cp.w	r9,r8
80000c36:	e0 8b 00 06 	brhi	80000c42 <usartSetBaudrate+0x2e>
80000c3a:	31 09       	mov	r9,16
80000c3c:	ef 49 ff d4 	st.w	r7[-44],r9
80000c40:	c0 48       	rjmp	80000c48 <usartSetBaudrate+0x34>
80000c42:	30 88       	mov	r8,8
80000c44:	ef 48 ff d4 	st.w	r7[-44],r8
80000c48:	ee f9 ff d4 	ld.w	r9,r7[-44]
80000c4c:	ef 49 ff f0 	st.w	r7[-16],r9
80000c50:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c54:	f0 0a 15 03 	lsl	r10,r8,0x3
80000c58:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000c5c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000c60:	f2 08 02 48 	mul	r8,r9,r8
80000c64:	a1 98       	lsr	r8,0x1
80000c66:	10 0a       	add	r10,r8
80000c68:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000c6c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000c70:	f2 08 02 48 	mul	r8,r9,r8
80000c74:	f4 08 0d 08 	divu	r8,r10,r8
80000c78:	ef 48 ff f4 	st.w	r7[-12],r8
80000c7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c80:	a3 98       	lsr	r8,0x3
80000c82:	ef 48 ff f8 	st.w	r7[-8],r8
80000c86:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c8a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000c8e:	ef 48 ff fc 	st.w	r7[-4],r8
80000c92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c96:	58 08       	cp.w	r8,0
80000c98:	c0 70       	breq	80000ca6 <usartSetBaudrate+0x92>
80000c9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c9e:	e0 48 ff ff 	cp.w	r8,65535
80000ca2:	e0 88 00 06 	brls	80000cae <usartSetBaudrate+0x9a>
80000ca6:	30 18       	mov	r8,1
80000ca8:	ef 48 ff d8 	st.w	r7[-40],r8
80000cac:	c2 c8       	rjmp	80000d04 <usartSetBaudrate+0xf0>
80000cae:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000cb2:	70 18       	ld.w	r8,r8[0x4]
80000cb4:	10 99       	mov	r9,r8
80000cb6:	e4 19 ff f7 	andh	r9,0xfff7
80000cba:	e0 19 fe cf 	andl	r9,0xfecf
80000cbe:	ef 49 ff dc 	st.w	r7[-36],r9
80000cc2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cc6:	59 08       	cp.w	r8,16
80000cc8:	c0 60       	breq	80000cd4 <usartSetBaudrate+0xc0>
80000cca:	e8 68 00 00 	mov	r8,524288
80000cce:	ef 48 ff e0 	st.w	r7[-32],r8
80000cd2:	c0 48       	rjmp	80000cda <usartSetBaudrate+0xc6>
80000cd4:	30 09       	mov	r9,0
80000cd6:	ef 49 ff e0 	st.w	r7[-32],r9
80000cda:	ee f9 ff dc 	ld.w	r9,r7[-36]
80000cde:	ee f8 ff e0 	ld.w	r8,r7[-32]
80000ce2:	10 49       	or	r9,r8
80000ce4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ce8:	91 19       	st.w	r8[0x4],r9
80000cea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cee:	f0 09 15 10 	lsl	r9,r8,0x10
80000cf2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cf6:	10 49       	or	r9,r8
80000cf8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000cfc:	91 89       	st.w	r8[0x20],r9
80000cfe:	30 09       	mov	r9,0
80000d00:	ef 49 ff d8 	st.w	r7[-40],r9
80000d04:	ee f8 ff d8 	ld.w	r8,r7[-40]
80000d08:	10 9c       	mov	r12,r8
80000d0a:	2f 5d       	sub	sp,-44
80000d0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000d10 <usartInit>:
80000d10:	eb cd 40 80 	pushm	r7,lr
80000d14:	1a 97       	mov	r7,sp
80000d16:	20 4d       	sub	sp,16
80000d18:	ef 4c ff f8 	st.w	r7[-8],r12
80000d1c:	ef 4b ff f4 	st.w	r7[-12],r11
80000d20:	ef 4a ff f0 	st.w	r7[-16],r10
80000d24:	fe 78 10 00 	mov	r8,-61440
80000d28:	ef 48 ff fc 	st.w	r7[-4],r8
80000d2c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000d30:	30 18       	mov	r8,1
80000d32:	93 28       	st.w	r9[0x8],r8
80000d34:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000d38:	30 28       	mov	r8,2
80000d3a:	93 28       	st.w	r9[0x8],r8
80000d3c:	ee fc ff f8 	ld.w	r12,r7[-8]
80000d40:	f0 1f 00 3b 	mcall	80000e2c <usartInit+0x11c>
80000d44:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000d48:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d4c:	70 08       	ld.w	r8,r8[0x0]
80000d4e:	12 9a       	mov	r10,r9
80000d50:	10 9b       	mov	r11,r8
80000d52:	ee fc ff f8 	ld.w	r12,r7[-8]
80000d56:	f0 1f 00 37 	mcall	80000e30 <usartInit+0x120>
80000d5a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d5e:	11 c9       	ld.ub	r9,r8[0x4]
80000d60:	30 98       	mov	r8,9
80000d62:	f0 09 18 00 	cp.b	r9,r8
80000d66:	c0 a1       	brne	80000d7a <usartInit+0x6a>
80000d68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d6c:	70 18       	ld.w	r8,r8[0x4]
80000d6e:	10 99       	mov	r9,r8
80000d70:	b1 b9       	sbr	r9,0x11
80000d72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d76:	91 19       	st.w	r8[0x4],r9
80000d78:	c0 d8       	rjmp	80000d92 <usartInit+0x82>
80000d7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d7e:	70 19       	ld.w	r9,r8[0x4]
80000d80:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d84:	11 c8       	ld.ub	r8,r8[0x4]
80000d86:	20 58       	sub	r8,5
80000d88:	a7 68       	lsl	r8,0x6
80000d8a:	10 49       	or	r9,r8
80000d8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d90:	91 19       	st.w	r8[0x4],r9
80000d92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d96:	70 1a       	ld.w	r10,r8[0x4]
80000d98:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d9c:	11 d8       	ld.ub	r8,r8[0x5]
80000d9e:	f0 09 15 09 	lsl	r9,r8,0x9
80000da2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000da6:	f1 38 00 08 	ld.ub	r8,r8[8]
80000daa:	af 68       	lsl	r8,0xe
80000dac:	f3 e8 10 08 	or	r8,r9,r8
80000db0:	f5 e8 10 09 	or	r9,r10,r8
80000db4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000db8:	91 19       	st.w	r8[0x4],r9
80000dba:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000dbe:	90 39       	ld.sh	r9,r8[0x6]
80000dc0:	30 28       	mov	r8,2
80000dc2:	f0 09 19 00 	cp.h	r9,r8
80000dc6:	e0 88 00 14 	brls	80000dee <usartInit+0xde>
80000dca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dce:	70 18       	ld.w	r8,r8[0x4]
80000dd0:	10 99       	mov	r9,r8
80000dd2:	ad b9       	sbr	r9,0xd
80000dd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dd8:	91 19       	st.w	r8[0x4],r9
80000dda:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000dde:	90 38       	ld.sh	r8,r8[0x6]
80000de0:	5c 78       	castu.h	r8
80000de2:	20 28       	sub	r8,2
80000de4:	10 99       	mov	r9,r8
80000de6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dea:	91 a9       	st.w	r8[0x28],r9
80000dec:	c0 d8       	rjmp	80000e06 <usartInit+0xf6>
80000dee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000df2:	70 19       	ld.w	r9,r8[0x4]
80000df4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000df8:	90 38       	ld.sh	r8,r8[0x6]
80000dfa:	5c 78       	castu.h	r8
80000dfc:	ad 68       	lsl	r8,0xc
80000dfe:	10 49       	or	r9,r8
80000e00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e04:	91 19       	st.w	r8[0x4],r9
80000e06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e0a:	70 18       	ld.w	r8,r8[0x4]
80000e0c:	10 99       	mov	r9,r8
80000e0e:	e0 19 ff f0 	andl	r9,0xfff0
80000e12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e16:	91 19       	st.w	r8[0x4],r9
80000e18:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e1c:	35 08       	mov	r8,80
80000e1e:	93 08       	st.w	r9[0x0],r8
80000e20:	30 08       	mov	r8,0
80000e22:	10 9c       	mov	r12,r8
80000e24:	2f cd       	sub	sp,-16
80000e26:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e2a:	00 00       	add	r0,r0
80000e2c:	80 00       	ld.sh	r0,r0[0x0]
80000e2e:	0b a4       	ld.ub	r4,r5[0x2]
80000e30:	80 00       	ld.sh	r0,r0[0x0]
80000e32:	0c 14       	sub	r4,r6

80000e34 <usartWriteChar>:
80000e34:	eb cd 40 80 	pushm	r7,lr
80000e38:	1a 97       	mov	r7,sp
80000e3a:	20 3d       	sub	sp,12
80000e3c:	ef 4c ff f8 	st.w	r7[-8],r12
80000e40:	16 98       	mov	r8,r11
80000e42:	ef 68 ff f4 	st.b	r7[-12],r8
80000e46:	e4 68 00 00 	mov	r8,262144
80000e4a:	ef 48 ff fc 	st.w	r7[-4],r8
80000e4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e52:	58 08       	cp.w	r8,0
80000e54:	5f 18       	srne	r8
80000e56:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000e5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e5e:	20 18       	sub	r8,1
80000e60:	ef 48 ff fc 	st.w	r7[-4],r8
80000e64:	12 98       	mov	r8,r9
80000e66:	ec 18 00 01 	eorl	r8,0x1
80000e6a:	5c 58       	castu.b	r8
80000e6c:	c0 71       	brne	80000e7a <usartWriteChar+0x46>
80000e6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e72:	70 58       	ld.w	r8,r8[0x14]
80000e74:	e2 18 00 02 	andl	r8,0x2,COH
80000e78:	ce b0       	breq	80000e4e <usartWriteChar+0x1a>
80000e7a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80000e7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e82:	91 79       	st.w	r8[0x1c],r9
80000e84:	2f dd       	sub	sp,-12
80000e86:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e8a:	d7 03       	nop

80000e8c <usartWriteLine>:
80000e8c:	eb cd 40 80 	pushm	r7,lr
80000e90:	1a 97       	mov	r7,sp
80000e92:	20 2d       	sub	sp,8
80000e94:	ef 4c ff fc 	st.w	r7[-4],r12
80000e98:	ef 4b ff f8 	st.w	r7[-8],r11
80000e9c:	c1 88       	rjmp	80000ecc <usartWriteLine+0x40>
80000e9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ea2:	11 88       	ld.ub	r8,r8[0x0]
80000ea4:	58 a8       	cp.w	r8,10
80000ea6:	c0 61       	brne	80000eb2 <usartWriteLine+0x26>
80000ea8:	30 db       	mov	r11,13
80000eaa:	ee fc ff fc 	ld.w	r12,r7[-4]
80000eae:	f0 1f 00 0c 	mcall	80000edc <usartWriteLine+0x50>
80000eb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000eb6:	11 88       	ld.ub	r8,r8[0x0]
80000eb8:	10 9b       	mov	r11,r8
80000eba:	ee fc ff fc 	ld.w	r12,r7[-4]
80000ebe:	f0 1f 00 08 	mcall	80000edc <usartWriteLine+0x50>
80000ec2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ec6:	2f f8       	sub	r8,-1
80000ec8:	ef 48 ff f8 	st.w	r7[-8],r8
80000ecc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ed0:	11 88       	ld.ub	r8,r8[0x0]
80000ed2:	58 08       	cp.w	r8,0
80000ed4:	ce 51       	brne	80000e9e <usartWriteLine+0x12>
80000ed6:	2f ed       	sub	sp,-8
80000ed8:	e3 cd 80 80 	ldm	sp++,r7,pc
80000edc:	80 00       	ld.sh	r0,r0[0x0]
80000ede:	0e 34       	cp.w	r4,r7

80000ee0 <timerInit>:
80000ee0:	d5 01       	pushm	r11,lr
80000ee2:	d2 01       	pushm	r12
80000ee4:	f0 1f 00 28 	mcall	80000f84 <timerClearInterrupt+0x10>
80000ee8:	f0 1f 00 28 	mcall	80000f88 <timerClearInterrupt+0x14>
80000eec:	e0 6c 38 00 	mov	r12,14336
80000ef0:	ea 1c ff ff 	orh	r12,0xffff
80000ef4:	e0 6b c0 00 	mov	r11,49152
80000ef8:	ea 1b 00 00 	orh	r11,0x0
80000efc:	99 1b       	st.w	r12[0x4],r11
80000efe:	30 1b       	mov	r11,1
80000f00:	a5 6b       	lsl	r11,0x4
80000f02:	99 9b       	st.w	r12[0x24],r11
80000f04:	d2 02       	popm	r12
80000f06:	f0 1f 00 22 	mcall	80000f8c <timerClearInterrupt+0x18>
80000f0a:	d5 02       	popm	r11,lr
80000f0c:	1c 9f       	mov	pc,lr

80000f0e <timerReset>:
80000f0e:	d3 01       	pushm	r11-r12
80000f10:	e0 6c 38 00 	mov	r12,14336
80000f14:	ea 1c ff ff 	orh	r12,0xffff
80000f18:	30 5b       	mov	r11,5
80000f1a:	99 0b       	st.w	r12[0x0],r11
80000f1c:	e0 6b 00 08 	mov	r11,8
80000f20:	ea 1b 00 00 	orh	r11,0x0
80000f24:	76 0b       	ld.w	r11,r11[0x0]
80000f26:	99 7b       	st.w	r12[0x1c],r11
80000f28:	d3 02       	popm	r11-r12
80000f2a:	1c 9f       	mov	pc,lr

80000f2c <timerStop>:
80000f2c:	d3 01       	pushm	r11-r12
80000f2e:	e0 6c 38 00 	mov	r12,14336
80000f32:	ea 1c ff ff 	orh	r12,0xffff
80000f36:	30 2b       	mov	r11,2
80000f38:	99 0b       	st.w	r12[0x0],r11
80000f3a:	d3 02       	popm	r11-r12
80000f3c:	1c 9f       	mov	pc,lr

80000f3e <timerRCSet>:
80000f3e:	d3 01       	pushm	r11-r12
80000f40:	49 4b       	lddpc	r11,80000f90 <timerClearInterrupt+0x1c>
80000f42:	97 0c       	st.w	r11[0x0],r12
80000f44:	e0 6c 38 00 	mov	r12,14336
80000f48:	ea 1c ff ff 	orh	r12,0xffff
80000f4c:	76 0b       	ld.w	r11,r11[0x0]
80000f4e:	99 7b       	st.w	r12[0x1c],r11
80000f50:	d3 02       	popm	r11-r12
80000f52:	1c 9f       	mov	pc,lr

80000f54 <timerPrescaleSet>:
80000f54:	d3 81       	pushm	r10-r12
80000f56:	49 0b       	lddpc	r11,80000f94 <timerClearInterrupt+0x20>
80000f58:	97 0c       	st.w	r11[0x0],r12
80000f5a:	e0 6c 38 00 	mov	r12,14336
80000f5e:	ea 1c ff ff 	orh	r12,0xffff
80000f62:	78 1a       	ld.w	r10,r12[0x4]
80000f64:	3f 8b       	mov	r11,-8
80000f66:	16 6a       	and	r10,r11
80000f68:	48 bb       	lddpc	r11,80000f94 <timerClearInterrupt+0x20>
80000f6a:	76 0b       	ld.w	r11,r11[0x0]
80000f6c:	14 4b       	or	r11,r10
80000f6e:	99 1b       	st.w	r12[0x4],r11
80000f70:	d3 82       	popm	r10-r12
80000f72:	1c 9f       	mov	pc,lr

80000f74 <timerClearInterrupt>:
80000f74:	d2 01       	pushm	r12
80000f76:	e0 6c 38 00 	mov	r12,14336
80000f7a:	ea 1c ff ff 	orh	r12,0xffff
80000f7e:	78 8c       	ld.w	r12,r12[0x20]
80000f80:	d2 02       	popm	r12
80000f82:	1c 9f       	mov	pc,lr
80000f84:	80 00       	ld.sh	r0,r0[0x0]
80000f86:	19 66       	ld.uh	r6,--r12
80000f88:	80 00       	ld.sh	r0,r0[0x0]
80000f8a:	0f 74       	ld.ub	r4,--r7
80000f8c:	80 00       	ld.sh	r0,r0[0x0]
80000f8e:	08 0c       	add	r12,r4
80000f90:	00 00       	add	r0,r0
80000f92:	00 08       	add	r8,r0
80000f94:	00 00       	add	r0,r0
80000f96:	00 0c       	add	r12,r0

80000f98 <_stext>:
80000f98:	49 7d       	lddpc	sp,80000ff4 <udata_end+0x4>
80000f9a:	49 80       	lddpc	r0,80000ff8 <udata_end+0x8>
80000f9c:	1a d0       	st.w	--sp,r0
80000f9e:	e5 cd 20 00 	ldmts	sp,sp
80000fa2:	1b 00       	ld.w	r0,sp++
80000fa4:	49 60       	lddpc	r0,80000ffc <udata_end+0xc>
80000fa6:	e3 b0 00 01 	mtsr	0x4,r0
80000faa:	d5 53       	csrf	0x15
80000fac:	e0 6c 0c 00 	mov	r12,3072
80000fb0:	ea 1c ff ff 	orh	r12,0xffff
80000fb4:	e0 6b 01 07 	mov	r11,263
80000fb8:	99 ab       	st.w	r12[0x28],r11
80000fba:	30 4b       	mov	r11,4
80000fbc:	99 0b       	st.w	r12[0x0],r11
80000fbe:	e0 6a 00 80 	mov	r10,128

80000fc2 <xw8>:
80000fc2:	79 5b       	ld.w	r11,r12[0x54]
80000fc4:	14 7b       	tst	r11,r10
80000fc6:	cf e0       	breq	80000fc2 <xw8>
80000fc8:	30 5b       	mov	r11,5
80000fca:	99 0b       	st.w	r12[0x0],r11

80000fcc <idata_>:
80000fcc:	48 d0       	lddpc	r0,80001000 <udata_end+0x10>
80000fce:	48 e1       	lddpc	r1,80001004 <udata_end+0x14>
80000fd0:	02 30       	cp.w	r0,r1
80000fd2:	c0 62       	brcc	80000fde <idata_end>
80000fd4:	48 d2       	lddpc	r2,80001008 <udata_end+0x18>

80000fd6 <idata_loop>:
80000fd6:	05 04       	ld.w	r4,r2++
80000fd8:	00 a4       	st.w	r0++,r4
80000fda:	02 30       	cp.w	r0,r1
80000fdc:	cf d3       	brcs	80000fd6 <idata_loop>

80000fde <idata_end>:
80000fde:	48 c0       	lddpc	r0,8000100c <udata_end+0x1c>
80000fe0:	48 c1       	lddpc	r1,80001010 <udata_end+0x20>
80000fe2:	02 30       	cp.w	r0,r1
80000fe4:	c0 62       	brcc	80000ff0 <udata_end>
80000fe6:	30 02       	mov	r2,0
80000fe8:	30 03       	mov	r3,0

80000fea <udata_loop>:
80000fea:	00 a2       	st.w	r0++,r2
80000fec:	02 30       	cp.w	r0,r1
80000fee:	cf e3       	brcs	80000fea <udata_loop>

80000ff0 <udata_end>:
80000ff0:	48 9f       	lddpc	pc,80001014 <udata_end+0x24>
80000ff2:	00 00       	add	r0,r0
80000ff4:	00 01       	add	r1,r0
80000ff6:	00 00       	add	r0,r0
80000ff8:	00 00       	add	r0,r0
80000ffa:	f0 00       	*unknown*
80000ffc:	80 00       	ld.sh	r0,r0[0x0]
80000ffe:	18 00       	add	r0,r12
80001000:	00 00       	add	r0,r0
80001002:	00 08       	add	r8,r0
80001004:	00 00       	add	r0,r0
80001006:	05 18       	ld.sh	r8,r2++
80001008:	80 00       	ld.sh	r0,r0[0x0]
8000100a:	1c 88       	andn	r8,lr
8000100c:	00 00       	add	r0,r0
8000100e:	05 18       	ld.sh	r8,r2++
80001010:	00 00       	add	r0,r0
80001012:	06 a0       	st.w	r3++,r0
80001014:	80 00       	ld.sh	r0,r0[0x0]
80001016:	00 74       	tst	r4,r0

80001018 <calloc>:
80001018:	d4 01       	pushm	lr
8000101a:	48 48       	lddpc	r8,80001028 <calloc+0x10>
8000101c:	16 9a       	mov	r10,r11
8000101e:	18 9b       	mov	r11,r12
80001020:	70 0c       	ld.w	r12,r8[0x0]
80001022:	f0 1f 00 03 	mcall	8000102c <calloc+0x14>
80001026:	d8 02       	popm	pc
80001028:	00 00       	add	r0,r0
8000102a:	01 00       	ld.w	r0,r0++
8000102c:	80 00       	ld.sh	r0,r0[0x0]
8000102e:	10 30       	cp.w	r0,r8

80001030 <_calloc_r>:
80001030:	d4 21       	pushm	r4-r7,lr
80001032:	f4 0b 02 4b 	mul	r11,r10,r11
80001036:	f0 1f 00 15 	mcall	80001088 <_calloc_r+0x58>
8000103a:	18 97       	mov	r7,r12
8000103c:	c2 30       	breq	80001082 <_calloc_r+0x52>
8000103e:	f8 fa ff fc 	ld.w	r10,r12[-4]
80001042:	e0 1a ff fc 	andl	r10,0xfffc
80001046:	20 4a       	sub	r10,4
80001048:	e0 4a 00 24 	cp.w	r10,36
8000104c:	e0 8b 00 18 	brhi	8000107c <_calloc_r+0x4c>
80001050:	18 98       	mov	r8,r12
80001052:	59 3a       	cp.w	r10,19
80001054:	e0 88 00 0f 	brls	80001072 <_calloc_r+0x42>
80001058:	30 09       	mov	r9,0
8000105a:	10 a9       	st.w	r8++,r9
8000105c:	10 a9       	st.w	r8++,r9
8000105e:	59 ba       	cp.w	r10,27
80001060:	e0 88 00 09 	brls	80001072 <_calloc_r+0x42>
80001064:	10 a9       	st.w	r8++,r9
80001066:	10 a9       	st.w	r8++,r9
80001068:	e0 4a 00 24 	cp.w	r10,36
8000106c:	c0 31       	brne	80001072 <_calloc_r+0x42>
8000106e:	10 a9       	st.w	r8++,r9
80001070:	10 a9       	st.w	r8++,r9
80001072:	30 09       	mov	r9,0
80001074:	10 a9       	st.w	r8++,r9
80001076:	91 19       	st.w	r8[0x4],r9
80001078:	91 09       	st.w	r8[0x0],r9
8000107a:	c0 48       	rjmp	80001082 <_calloc_r+0x52>
8000107c:	30 0b       	mov	r11,0
8000107e:	f0 1f 00 04 	mcall	8000108c <_calloc_r+0x5c>
80001082:	0e 9c       	mov	r12,r7
80001084:	d8 22       	popm	r4-r7,pc
80001086:	00 00       	add	r0,r0
80001088:	80 00       	ld.sh	r0,r0[0x0]
8000108a:	10 90       	mov	r0,r8
8000108c:	80 00       	ld.sh	r0,r0[0x0]
8000108e:	14 e0       	st.h	--r10,r0

80001090 <_malloc_r>:
80001090:	d4 31       	pushm	r0-r7,lr
80001092:	f6 c8 ff f5 	sub	r8,r11,-11
80001096:	18 95       	mov	r5,r12
80001098:	10 97       	mov	r7,r8
8000109a:	e0 17 ff f8 	andl	r7,0xfff8
8000109e:	59 68       	cp.w	r8,22
800010a0:	f9 b7 08 10 	movls	r7,16
800010a4:	16 37       	cp.w	r7,r11
800010a6:	5f 38       	srlo	r8
800010a8:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800010ac:	c0 50       	breq	800010b6 <_malloc_r+0x26>
800010ae:	30 c8       	mov	r8,12
800010b0:	99 38       	st.w	r12[0xc],r8
800010b2:	e0 8f 01 f3 	bral	80001498 <_malloc_r+0x408>
800010b6:	f0 1f 00 50 	mcall	800011f4 <_malloc_r+0x164>
800010ba:	e0 47 01 f7 	cp.w	r7,503
800010be:	e0 8b 00 1c 	brhi	800010f6 <_malloc_r+0x66>
800010c2:	ee 03 16 03 	lsr	r3,r7,0x3
800010c6:	4c d8       	lddpc	r8,800011f8 <_malloc_r+0x168>
800010c8:	f0 03 00 38 	add	r8,r8,r3<<0x3
800010cc:	70 36       	ld.w	r6,r8[0xc]
800010ce:	10 36       	cp.w	r6,r8
800010d0:	c0 61       	brne	800010dc <_malloc_r+0x4c>
800010d2:	ec c8 ff f8 	sub	r8,r6,-8
800010d6:	70 36       	ld.w	r6,r8[0xc]
800010d8:	10 36       	cp.w	r6,r8
800010da:	c0 c0       	breq	800010f2 <_malloc_r+0x62>
800010dc:	6c 18       	ld.w	r8,r6[0x4]
800010de:	e0 18 ff fc 	andl	r8,0xfffc
800010e2:	6c 3a       	ld.w	r10,r6[0xc]
800010e4:	ec 08 00 09 	add	r9,r6,r8
800010e8:	0a 9c       	mov	r12,r5
800010ea:	6c 28       	ld.w	r8,r6[0x8]
800010ec:	95 28       	st.w	r10[0x8],r8
800010ee:	91 3a       	st.w	r8[0xc],r10
800010f0:	c4 68       	rjmp	8000117c <_malloc_r+0xec>
800010f2:	2f e3       	sub	r3,-2
800010f4:	c4 c8       	rjmp	8000118c <_malloc_r+0xfc>
800010f6:	ee 03 16 09 	lsr	r3,r7,0x9
800010fa:	c0 41       	brne	80001102 <_malloc_r+0x72>
800010fc:	ee 03 16 03 	lsr	r3,r7,0x3
80001100:	c2 68       	rjmp	8000114c <_malloc_r+0xbc>
80001102:	58 43       	cp.w	r3,4
80001104:	e0 8b 00 06 	brhi	80001110 <_malloc_r+0x80>
80001108:	ee 03 16 06 	lsr	r3,r7,0x6
8000110c:	2c 83       	sub	r3,-56
8000110e:	c1 f8       	rjmp	8000114c <_malloc_r+0xbc>
80001110:	59 43       	cp.w	r3,20
80001112:	e0 8b 00 04 	brhi	8000111a <_malloc_r+0x8a>
80001116:	2a 53       	sub	r3,-91
80001118:	c1 a8       	rjmp	8000114c <_malloc_r+0xbc>
8000111a:	e0 43 00 54 	cp.w	r3,84
8000111e:	e0 8b 00 06 	brhi	8000112a <_malloc_r+0x9a>
80001122:	ee 03 16 0c 	lsr	r3,r7,0xc
80001126:	29 23       	sub	r3,-110
80001128:	c1 28       	rjmp	8000114c <_malloc_r+0xbc>
8000112a:	e0 43 01 54 	cp.w	r3,340
8000112e:	e0 8b 00 06 	brhi	8000113a <_malloc_r+0xaa>
80001132:	ee 03 16 0f 	lsr	r3,r7,0xf
80001136:	28 93       	sub	r3,-119
80001138:	c0 a8       	rjmp	8000114c <_malloc_r+0xbc>
8000113a:	e0 43 05 54 	cp.w	r3,1364
8000113e:	e0 88 00 04 	brls	80001146 <_malloc_r+0xb6>
80001142:	37 e3       	mov	r3,126
80001144:	c0 48       	rjmp	8000114c <_malloc_r+0xbc>
80001146:	ee 03 16 12 	lsr	r3,r7,0x12
8000114a:	28 43       	sub	r3,-124
8000114c:	4a ba       	lddpc	r10,800011f8 <_malloc_r+0x168>
8000114e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80001152:	74 36       	ld.w	r6,r10[0xc]
80001154:	c1 98       	rjmp	80001186 <_malloc_r+0xf6>
80001156:	6c 19       	ld.w	r9,r6[0x4]
80001158:	e0 19 ff fc 	andl	r9,0xfffc
8000115c:	f2 07 01 0b 	sub	r11,r9,r7
80001160:	58 fb       	cp.w	r11,15
80001162:	e0 8a 00 04 	brle	8000116a <_malloc_r+0xda>
80001166:	20 13       	sub	r3,1
80001168:	c1 18       	rjmp	8000118a <_malloc_r+0xfa>
8000116a:	6c 38       	ld.w	r8,r6[0xc]
8000116c:	58 0b       	cp.w	r11,0
8000116e:	c0 b5       	brlt	80001184 <_malloc_r+0xf4>
80001170:	6c 2a       	ld.w	r10,r6[0x8]
80001172:	ec 09 00 09 	add	r9,r6,r9
80001176:	0a 9c       	mov	r12,r5
80001178:	91 2a       	st.w	r8[0x8],r10
8000117a:	95 38       	st.w	r10[0xc],r8
8000117c:	72 18       	ld.w	r8,r9[0x4]
8000117e:	a1 a8       	sbr	r8,0x0
80001180:	93 18       	st.w	r9[0x4],r8
80001182:	cb c8       	rjmp	800012fa <_malloc_r+0x26a>
80001184:	10 96       	mov	r6,r8
80001186:	14 36       	cp.w	r6,r10
80001188:	ce 71       	brne	80001156 <_malloc_r+0xc6>
8000118a:	2f f3       	sub	r3,-1
8000118c:	49 ba       	lddpc	r10,800011f8 <_malloc_r+0x168>
8000118e:	f4 cc ff f8 	sub	r12,r10,-8
80001192:	78 26       	ld.w	r6,r12[0x8]
80001194:	18 36       	cp.w	r6,r12
80001196:	c6 e0       	breq	80001272 <_malloc_r+0x1e2>
80001198:	6c 19       	ld.w	r9,r6[0x4]
8000119a:	e0 19 ff fc 	andl	r9,0xfffc
8000119e:	f2 07 01 08 	sub	r8,r9,r7
800011a2:	58 f8       	cp.w	r8,15
800011a4:	e0 89 00 90 	brgt	800012c4 <_malloc_r+0x234>
800011a8:	99 3c       	st.w	r12[0xc],r12
800011aa:	99 2c       	st.w	r12[0x8],r12
800011ac:	58 08       	cp.w	r8,0
800011ae:	c0 55       	brlt	800011b8 <_malloc_r+0x128>
800011b0:	ec 09 00 09 	add	r9,r6,r9
800011b4:	0a 9c       	mov	r12,r5
800011b6:	ce 3b       	rjmp	8000117c <_malloc_r+0xec>
800011b8:	e0 49 01 ff 	cp.w	r9,511
800011bc:	e0 8b 00 13 	brhi	800011e2 <_malloc_r+0x152>
800011c0:	a3 99       	lsr	r9,0x3
800011c2:	f4 09 00 38 	add	r8,r10,r9<<0x3
800011c6:	70 2b       	ld.w	r11,r8[0x8]
800011c8:	8d 38       	st.w	r6[0xc],r8
800011ca:	8d 2b       	st.w	r6[0x8],r11
800011cc:	97 36       	st.w	r11[0xc],r6
800011ce:	91 26       	st.w	r8[0x8],r6
800011d0:	a3 49       	asr	r9,0x2
800011d2:	74 18       	ld.w	r8,r10[0x4]
800011d4:	30 1b       	mov	r11,1
800011d6:	f6 09 09 49 	lsl	r9,r11,r9
800011da:	f1 e9 10 09 	or	r9,r8,r9
800011de:	95 19       	st.w	r10[0x4],r9
800011e0:	c4 98       	rjmp	80001272 <_malloc_r+0x1e2>
800011e2:	f2 0a 16 09 	lsr	r10,r9,0x9
800011e6:	58 4a       	cp.w	r10,4
800011e8:	e0 8b 00 0a 	brhi	800011fc <_malloc_r+0x16c>
800011ec:	f2 0a 16 06 	lsr	r10,r9,0x6
800011f0:	2c 8a       	sub	r10,-56
800011f2:	c2 38       	rjmp	80001238 <_malloc_r+0x1a8>
800011f4:	80 00       	ld.sh	r0,r0[0x0]
800011f6:	14 ee       	st.h	--r10,lr
800011f8:	00 00       	add	r0,r0
800011fa:	01 04       	ld.w	r4,r0++
800011fc:	59 4a       	cp.w	r10,20
800011fe:	e0 8b 00 04 	brhi	80001206 <_malloc_r+0x176>
80001202:	2a 5a       	sub	r10,-91
80001204:	c1 a8       	rjmp	80001238 <_malloc_r+0x1a8>
80001206:	e0 4a 00 54 	cp.w	r10,84
8000120a:	e0 8b 00 06 	brhi	80001216 <_malloc_r+0x186>
8000120e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80001212:	29 2a       	sub	r10,-110
80001214:	c1 28       	rjmp	80001238 <_malloc_r+0x1a8>
80001216:	e0 4a 01 54 	cp.w	r10,340
8000121a:	e0 8b 00 06 	brhi	80001226 <_malloc_r+0x196>
8000121e:	f2 0a 16 0f 	lsr	r10,r9,0xf
80001222:	28 9a       	sub	r10,-119
80001224:	c0 a8       	rjmp	80001238 <_malloc_r+0x1a8>
80001226:	e0 4a 05 54 	cp.w	r10,1364
8000122a:	e0 88 00 04 	brls	80001232 <_malloc_r+0x1a2>
8000122e:	37 ea       	mov	r10,126
80001230:	c0 48       	rjmp	80001238 <_malloc_r+0x1a8>
80001232:	f2 0a 16 12 	lsr	r10,r9,0x12
80001236:	28 4a       	sub	r10,-124
80001238:	4c 8b       	lddpc	r11,80001358 <_malloc_r+0x2c8>
8000123a:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000123e:	68 28       	ld.w	r8,r4[0x8]
80001240:	08 38       	cp.w	r8,r4
80001242:	c0 e1       	brne	8000125e <_malloc_r+0x1ce>
80001244:	76 19       	ld.w	r9,r11[0x4]
80001246:	a3 4a       	asr	r10,0x2
80001248:	30 1e       	mov	lr,1
8000124a:	fc 0a 09 4a 	lsl	r10,lr,r10
8000124e:	f3 ea 10 0a 	or	r10,r9,r10
80001252:	10 99       	mov	r9,r8
80001254:	97 1a       	st.w	r11[0x4],r10
80001256:	c0 a8       	rjmp	8000126a <_malloc_r+0x1da>
80001258:	70 28       	ld.w	r8,r8[0x8]
8000125a:	08 38       	cp.w	r8,r4
8000125c:	c0 60       	breq	80001268 <_malloc_r+0x1d8>
8000125e:	70 1a       	ld.w	r10,r8[0x4]
80001260:	e0 1a ff fc 	andl	r10,0xfffc
80001264:	14 39       	cp.w	r9,r10
80001266:	cf 93       	brcs	80001258 <_malloc_r+0x1c8>
80001268:	70 39       	ld.w	r9,r8[0xc]
8000126a:	8d 39       	st.w	r6[0xc],r9
8000126c:	8d 28       	st.w	r6[0x8],r8
8000126e:	91 36       	st.w	r8[0xc],r6
80001270:	93 26       	st.w	r9[0x8],r6
80001272:	e6 08 14 02 	asr	r8,r3,0x2
80001276:	30 1b       	mov	r11,1
80001278:	4b 84       	lddpc	r4,80001358 <_malloc_r+0x2c8>
8000127a:	f6 08 09 4b 	lsl	r11,r11,r8
8000127e:	68 18       	ld.w	r8,r4[0x4]
80001280:	10 3b       	cp.w	r11,r8
80001282:	e0 8b 00 6f 	brhi	80001360 <_malloc_r+0x2d0>
80001286:	f7 e8 00 09 	and	r9,r11,r8
8000128a:	c0 b1       	brne	800012a0 <_malloc_r+0x210>
8000128c:	e0 13 ff fc 	andl	r3,0xfffc
80001290:	a1 7b       	lsl	r11,0x1
80001292:	2f c3       	sub	r3,-4
80001294:	c0 38       	rjmp	8000129a <_malloc_r+0x20a>
80001296:	2f c3       	sub	r3,-4
80001298:	a1 7b       	lsl	r11,0x1
8000129a:	f7 e8 00 09 	and	r9,r11,r8
8000129e:	cf c0       	breq	80001296 <_malloc_r+0x206>
800012a0:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800012a4:	06 92       	mov	r2,r3
800012a6:	1c 91       	mov	r1,lr
800012a8:	62 36       	ld.w	r6,r1[0xc]
800012aa:	c2 e8       	rjmp	80001306 <_malloc_r+0x276>
800012ac:	6c 1a       	ld.w	r10,r6[0x4]
800012ae:	e0 1a ff fc 	andl	r10,0xfffc
800012b2:	f4 07 01 08 	sub	r8,r10,r7
800012b6:	58 f8       	cp.w	r8,15
800012b8:	e0 8a 00 15 	brle	800012e2 <_malloc_r+0x252>
800012bc:	6c 3a       	ld.w	r10,r6[0xc]
800012be:	6c 29       	ld.w	r9,r6[0x8]
800012c0:	95 29       	st.w	r10[0x8],r9
800012c2:	93 3a       	st.w	r9[0xc],r10
800012c4:	0e 99       	mov	r9,r7
800012c6:	ec 07 00 07 	add	r7,r6,r7
800012ca:	a1 a9       	sbr	r9,0x0
800012cc:	99 37       	st.w	r12[0xc],r7
800012ce:	99 27       	st.w	r12[0x8],r7
800012d0:	8d 19       	st.w	r6[0x4],r9
800012d2:	ee 08 09 08 	st.w	r7[r8],r8
800012d6:	8f 2c       	st.w	r7[0x8],r12
800012d8:	8f 3c       	st.w	r7[0xc],r12
800012da:	a1 a8       	sbr	r8,0x0
800012dc:	0a 9c       	mov	r12,r5
800012de:	8f 18       	st.w	r7[0x4],r8
800012e0:	c0 d8       	rjmp	800012fa <_malloc_r+0x26a>
800012e2:	6c 39       	ld.w	r9,r6[0xc]
800012e4:	58 08       	cp.w	r8,0
800012e6:	c0 f5       	brlt	80001304 <_malloc_r+0x274>
800012e8:	ec 0a 00 0a 	add	r10,r6,r10
800012ec:	74 18       	ld.w	r8,r10[0x4]
800012ee:	a1 a8       	sbr	r8,0x0
800012f0:	0a 9c       	mov	r12,r5
800012f2:	95 18       	st.w	r10[0x4],r8
800012f4:	6c 28       	ld.w	r8,r6[0x8]
800012f6:	93 28       	st.w	r9[0x8],r8
800012f8:	91 39       	st.w	r8[0xc],r9
800012fa:	f0 1f 00 19 	mcall	8000135c <_malloc_r+0x2cc>
800012fe:	ec cc ff f8 	sub	r12,r6,-8
80001302:	d8 32       	popm	r0-r7,pc
80001304:	12 96       	mov	r6,r9
80001306:	02 36       	cp.w	r6,r1
80001308:	cd 21       	brne	800012ac <_malloc_r+0x21c>
8000130a:	2f f2       	sub	r2,-1
8000130c:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001310:	c0 30       	breq	80001316 <_malloc_r+0x286>
80001312:	2f 81       	sub	r1,-8
80001314:	cc ab       	rjmp	800012a8 <_malloc_r+0x218>
80001316:	1c 98       	mov	r8,lr
80001318:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000131c:	c0 81       	brne	8000132c <_malloc_r+0x29c>
8000131e:	68 19       	ld.w	r9,r4[0x4]
80001320:	f6 08 11 ff 	rsub	r8,r11,-1
80001324:	f3 e8 00 08 	and	r8,r9,r8
80001328:	89 18       	st.w	r4[0x4],r8
8000132a:	c0 78       	rjmp	80001338 <_malloc_r+0x2a8>
8000132c:	f0 c9 00 08 	sub	r9,r8,8
80001330:	20 13       	sub	r3,1
80001332:	70 08       	ld.w	r8,r8[0x0]
80001334:	12 38       	cp.w	r8,r9
80001336:	cf 10       	breq	80001318 <_malloc_r+0x288>
80001338:	a1 7b       	lsl	r11,0x1
8000133a:	68 18       	ld.w	r8,r4[0x4]
8000133c:	10 3b       	cp.w	r11,r8
8000133e:	e0 8b 00 11 	brhi	80001360 <_malloc_r+0x2d0>
80001342:	58 0b       	cp.w	r11,0
80001344:	c0 e0       	breq	80001360 <_malloc_r+0x2d0>
80001346:	04 93       	mov	r3,r2
80001348:	c0 38       	rjmp	8000134e <_malloc_r+0x2be>
8000134a:	2f c3       	sub	r3,-4
8000134c:	a1 7b       	lsl	r11,0x1
8000134e:	f7 e8 00 09 	and	r9,r11,r8
80001352:	ca 71       	brne	800012a0 <_malloc_r+0x210>
80001354:	cf bb       	rjmp	8000134a <_malloc_r+0x2ba>
80001356:	00 00       	add	r0,r0
80001358:	00 00       	add	r0,r0
8000135a:	01 04       	ld.w	r4,r0++
8000135c:	80 00       	ld.sh	r0,r0[0x0]
8000135e:	14 f0       	st.b	--r10,r0
80001360:	68 23       	ld.w	r3,r4[0x8]
80001362:	66 12       	ld.w	r2,r3[0x4]
80001364:	e0 12 ff fc 	andl	r2,0xfffc
80001368:	0e 32       	cp.w	r2,r7
8000136a:	5f 39       	srlo	r9
8000136c:	e4 07 01 08 	sub	r8,r2,r7
80001370:	58 f8       	cp.w	r8,15
80001372:	5f aa       	srle	r10
80001374:	f5 e9 10 09 	or	r9,r10,r9
80001378:	e0 80 00 a2 	breq	800014bc <_malloc_r+0x42c>
8000137c:	4c 88       	lddpc	r8,8000149c <_malloc_r+0x40c>
8000137e:	70 01       	ld.w	r1,r8[0x0]
80001380:	4c 88       	lddpc	r8,800014a0 <_malloc_r+0x410>
80001382:	2f 01       	sub	r1,-16
80001384:	70 08       	ld.w	r8,r8[0x0]
80001386:	0e 01       	add	r1,r7
80001388:	5b f8       	cp.w	r8,-1
8000138a:	c0 40       	breq	80001392 <_malloc_r+0x302>
8000138c:	28 11       	sub	r1,-127
8000138e:	e0 11 ff 80 	andl	r1,0xff80
80001392:	02 9b       	mov	r11,r1
80001394:	0a 9c       	mov	r12,r5
80001396:	f0 1f 00 44 	mcall	800014a4 <_malloc_r+0x414>
8000139a:	18 96       	mov	r6,r12
8000139c:	5b fc       	cp.w	r12,-1
8000139e:	c6 e0       	breq	8000147a <_malloc_r+0x3ea>
800013a0:	e6 02 00 08 	add	r8,r3,r2
800013a4:	10 3c       	cp.w	r12,r8
800013a6:	c0 32       	brcc	800013ac <_malloc_r+0x31c>
800013a8:	08 33       	cp.w	r3,r4
800013aa:	c6 81       	brne	8000147a <_malloc_r+0x3ea>
800013ac:	4b fa       	lddpc	r10,800014a8 <_malloc_r+0x418>
800013ae:	74 09       	ld.w	r9,r10[0x0]
800013b0:	e2 09 00 09 	add	r9,r1,r9
800013b4:	95 09       	st.w	r10[0x0],r9
800013b6:	10 36       	cp.w	r6,r8
800013b8:	c0 a1       	brne	800013cc <_malloc_r+0x33c>
800013ba:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800013be:	c0 71       	brne	800013cc <_malloc_r+0x33c>
800013c0:	e2 02 00 02 	add	r2,r1,r2
800013c4:	68 28       	ld.w	r8,r4[0x8]
800013c6:	a1 a2       	sbr	r2,0x0
800013c8:	91 12       	st.w	r8[0x4],r2
800013ca:	c4 c8       	rjmp	80001462 <_malloc_r+0x3d2>
800013cc:	4b 5a       	lddpc	r10,800014a0 <_malloc_r+0x410>
800013ce:	74 0b       	ld.w	r11,r10[0x0]
800013d0:	5b fb       	cp.w	r11,-1
800013d2:	c0 31       	brne	800013d8 <_malloc_r+0x348>
800013d4:	95 06       	st.w	r10[0x0],r6
800013d6:	c0 68       	rjmp	800013e2 <_malloc_r+0x352>
800013d8:	ec 09 00 09 	add	r9,r6,r9
800013dc:	4b 3a       	lddpc	r10,800014a8 <_malloc_r+0x418>
800013de:	10 19       	sub	r9,r8
800013e0:	95 09       	st.w	r10[0x0],r9
800013e2:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800013e6:	f0 09 11 08 	rsub	r9,r8,8
800013ea:	58 08       	cp.w	r8,0
800013ec:	f2 08 17 10 	movne	r8,r9
800013f0:	ed d8 e1 06 	addne	r6,r6,r8
800013f4:	28 08       	sub	r8,-128
800013f6:	ec 01 00 01 	add	r1,r6,r1
800013fa:	0a 9c       	mov	r12,r5
800013fc:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80001400:	f0 01 01 01 	sub	r1,r8,r1
80001404:	02 9b       	mov	r11,r1
80001406:	f0 1f 00 28 	mcall	800014a4 <_malloc_r+0x414>
8000140a:	4a 88       	lddpc	r8,800014a8 <_malloc_r+0x418>
8000140c:	5b fc       	cp.w	r12,-1
8000140e:	ec 0c 17 00 	moveq	r12,r6
80001412:	f9 b1 00 00 	moveq	r1,0
80001416:	70 09       	ld.w	r9,r8[0x0]
80001418:	0c 1c       	sub	r12,r6
8000141a:	89 26       	st.w	r4[0x8],r6
8000141c:	02 0c       	add	r12,r1
8000141e:	12 01       	add	r1,r9
80001420:	a1 ac       	sbr	r12,0x0
80001422:	91 01       	st.w	r8[0x0],r1
80001424:	8d 1c       	st.w	r6[0x4],r12
80001426:	08 33       	cp.w	r3,r4
80001428:	c1 d0       	breq	80001462 <_malloc_r+0x3d2>
8000142a:	58 f2       	cp.w	r2,15
8000142c:	e0 8b 00 05 	brhi	80001436 <_malloc_r+0x3a6>
80001430:	30 18       	mov	r8,1
80001432:	8d 18       	st.w	r6[0x4],r8
80001434:	c2 38       	rjmp	8000147a <_malloc_r+0x3ea>
80001436:	30 59       	mov	r9,5
80001438:	20 c2       	sub	r2,12
8000143a:	e0 12 ff f8 	andl	r2,0xfff8
8000143e:	e6 02 00 08 	add	r8,r3,r2
80001442:	91 29       	st.w	r8[0x8],r9
80001444:	91 19       	st.w	r8[0x4],r9
80001446:	66 18       	ld.w	r8,r3[0x4]
80001448:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000144c:	e5 e8 10 08 	or	r8,r2,r8
80001450:	87 18       	st.w	r3[0x4],r8
80001452:	58 f2       	cp.w	r2,15
80001454:	e0 88 00 07 	brls	80001462 <_malloc_r+0x3d2>
80001458:	e6 cb ff f8 	sub	r11,r3,-8
8000145c:	0a 9c       	mov	r12,r5
8000145e:	f0 1f 00 14 	mcall	800014ac <_malloc_r+0x41c>
80001462:	49 49       	lddpc	r9,800014b0 <_malloc_r+0x420>
80001464:	72 0a       	ld.w	r10,r9[0x0]
80001466:	49 18       	lddpc	r8,800014a8 <_malloc_r+0x418>
80001468:	70 08       	ld.w	r8,r8[0x0]
8000146a:	14 38       	cp.w	r8,r10
8000146c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001470:	49 19       	lddpc	r9,800014b4 <_malloc_r+0x424>
80001472:	72 0a       	ld.w	r10,r9[0x0]
80001474:	14 38       	cp.w	r8,r10
80001476:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000147a:	68 28       	ld.w	r8,r4[0x8]
8000147c:	70 18       	ld.w	r8,r8[0x4]
8000147e:	e0 18 ff fc 	andl	r8,0xfffc
80001482:	0e 38       	cp.w	r8,r7
80001484:	5f 39       	srlo	r9
80001486:	0e 18       	sub	r8,r7
80001488:	58 f8       	cp.w	r8,15
8000148a:	5f aa       	srle	r10
8000148c:	f5 e9 10 09 	or	r9,r10,r9
80001490:	c1 60       	breq	800014bc <_malloc_r+0x42c>
80001492:	0a 9c       	mov	r12,r5
80001494:	f0 1f 00 09 	mcall	800014b8 <_malloc_r+0x428>
80001498:	d8 3a       	popm	r0-r7,pc,r12=0
8000149a:	00 00       	add	r0,r0
8000149c:	00 00       	add	r0,r0
8000149e:	05 a0       	ld.ub	r0,r2[0x2]
800014a0:	00 00       	add	r0,r0
800014a2:	05 10       	ld.sh	r0,r2++
800014a4:	80 00       	ld.sh	r0,r0[0x0]
800014a6:	14 f4       	st.b	--r10,r4
800014a8:	00 00       	add	r0,r0
800014aa:	05 a4       	ld.ub	r4,r2[0x2]
800014ac:	80 00       	ld.sh	r0,r0[0x0]
800014ae:	16 10       	sub	r0,r11
800014b0:	00 00       	add	r0,r0
800014b2:	05 9c       	ld.ub	r12,r2[0x1]
800014b4:	00 00       	add	r0,r0
800014b6:	05 98       	ld.ub	r8,r2[0x1]
800014b8:	80 00       	ld.sh	r0,r0[0x0]
800014ba:	14 f0       	st.b	--r10,r0
800014bc:	68 26       	ld.w	r6,r4[0x8]
800014be:	a1 a8       	sbr	r8,0x0
800014c0:	0e 99       	mov	r9,r7
800014c2:	a1 a9       	sbr	r9,0x0
800014c4:	8d 19       	st.w	r6[0x4],r9
800014c6:	ec 07 00 07 	add	r7,r6,r7
800014ca:	0a 9c       	mov	r12,r5
800014cc:	89 27       	st.w	r4[0x8],r7
800014ce:	8f 18       	st.w	r7[0x4],r8
800014d0:	f0 1f 00 03 	mcall	800014dc <_malloc_r+0x44c>
800014d4:	ec cc ff f8 	sub	r12,r6,-8
800014d8:	d8 32       	popm	r0-r7,pc
800014da:	00 00       	add	r0,r0
800014dc:	80 00       	ld.sh	r0,r0[0x0]
800014de:	14 f0       	st.b	--r10,r0

800014e0 <memset>:
800014e0:	18 98       	mov	r8,r12
800014e2:	c0 38       	rjmp	800014e8 <memset+0x8>
800014e4:	10 cb       	st.b	r8++,r11
800014e6:	20 1a       	sub	r10,1
800014e8:	58 0a       	cp.w	r10,0
800014ea:	cf d1       	brne	800014e4 <memset+0x4>
800014ec:	5e fc       	retal	r12

800014ee <__malloc_lock>:
800014ee:	5e fc       	retal	r12

800014f0 <__malloc_unlock>:
800014f0:	5e fc       	retal	r12
800014f2:	d7 03       	nop

800014f4 <_sbrk_r>:
800014f4:	d4 21       	pushm	r4-r7,lr
800014f6:	30 08       	mov	r8,0
800014f8:	18 97       	mov	r7,r12
800014fa:	48 76       	lddpc	r6,80001514 <_sbrk_r+0x20>
800014fc:	16 9c       	mov	r12,r11
800014fe:	8d 08       	st.w	r6[0x0],r8
80001500:	f0 1f 00 06 	mcall	80001518 <_sbrk_r+0x24>
80001504:	5b fc       	cp.w	r12,-1
80001506:	c0 51       	brne	80001510 <_sbrk_r+0x1c>
80001508:	6c 08       	ld.w	r8,r6[0x0]
8000150a:	58 08       	cp.w	r8,0
8000150c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80001510:	d8 22       	popm	r4-r7,pc
80001512:	00 00       	add	r0,r0
80001514:	00 00       	add	r0,r0
80001516:	06 9c       	mov	r12,r3
80001518:	80 00       	ld.sh	r0,r0[0x0]
8000151a:	15 1c       	ld.sh	r12,r10++

8000151c <_sbrk>:
8000151c:	d4 01       	pushm	lr
8000151e:	48 c8       	lddpc	r8,8000154c <_sbrk+0x30>
80001520:	70 09       	ld.w	r9,r8[0x0]
80001522:	58 09       	cp.w	r9,0
80001524:	c0 31       	brne	8000152a <_sbrk+0xe>
80001526:	48 b9       	lddpc	r9,80001550 <_sbrk+0x34>
80001528:	91 09       	st.w	r8[0x0],r9
8000152a:	48 99       	lddpc	r9,8000154c <_sbrk+0x30>
8000152c:	48 aa       	lddpc	r10,80001554 <_sbrk+0x38>
8000152e:	72 08       	ld.w	r8,r9[0x0]
80001530:	f0 0c 00 0c 	add	r12,r8,r12
80001534:	14 3c       	cp.w	r12,r10
80001536:	e0 8b 00 04 	brhi	8000153e <_sbrk+0x22>
8000153a:	93 0c       	st.w	r9[0x0],r12
8000153c:	c0 68       	rjmp	80001548 <_sbrk+0x2c>
8000153e:	f0 1f 00 07 	mcall	80001558 <_sbrk+0x3c>
80001542:	30 c8       	mov	r8,12
80001544:	99 08       	st.w	r12[0x0],r8
80001546:	3f f8       	mov	r8,-1
80001548:	10 9c       	mov	r12,r8
8000154a:	d8 02       	popm	pc
8000154c:	00 00       	add	r0,r0
8000154e:	05 cc       	ld.ub	r12,r2[0x4]
80001550:	00 00       	add	r0,r0
80001552:	06 a0       	st.w	r3++,r0
80001554:	00 00       	add	r0,r0
80001556:	e0 00       	*unknown*
80001558:	80 00       	ld.sh	r0,r0[0x0]
8000155a:	15 5c       	ld.sh	r12,--r10

8000155c <__errno>:
8000155c:	48 28       	lddpc	r8,80001564 <__errno+0x8>
8000155e:	70 0c       	ld.w	r12,r8[0x0]
80001560:	2f 4c       	sub	r12,-12
80001562:	5e fc       	retal	r12
80001564:	00 00       	add	r0,r0
80001566:	01 00       	ld.w	r0,r0++

80001568 <_malloc_trim_r>:
80001568:	d4 21       	pushm	r4-r7,lr
8000156a:	16 95       	mov	r5,r11
8000156c:	18 97       	mov	r7,r12
8000156e:	f0 1f 00 23 	mcall	800015f8 <_malloc_trim_r+0x90>
80001572:	4a 34       	lddpc	r4,800015fc <_malloc_trim_r+0x94>
80001574:	68 28       	ld.w	r8,r4[0x8]
80001576:	70 16       	ld.w	r6,r8[0x4]
80001578:	e0 16 ff fc 	andl	r6,0xfffc
8000157c:	ec c8 ff 91 	sub	r8,r6,-111
80001580:	f0 05 01 05 	sub	r5,r8,r5
80001584:	e0 15 ff 80 	andl	r5,0xff80
80001588:	ea c5 00 80 	sub	r5,r5,128
8000158c:	e0 45 00 7f 	cp.w	r5,127
80001590:	e0 8a 00 23 	brle	800015d6 <_malloc_trim_r+0x6e>
80001594:	30 0b       	mov	r11,0
80001596:	0e 9c       	mov	r12,r7
80001598:	f0 1f 00 1a 	mcall	80001600 <_malloc_trim_r+0x98>
8000159c:	68 28       	ld.w	r8,r4[0x8]
8000159e:	0c 08       	add	r8,r6
800015a0:	10 3c       	cp.w	r12,r8
800015a2:	c1 a1       	brne	800015d6 <_malloc_trim_r+0x6e>
800015a4:	ea 0b 11 00 	rsub	r11,r5,0
800015a8:	0e 9c       	mov	r12,r7
800015aa:	f0 1f 00 16 	mcall	80001600 <_malloc_trim_r+0x98>
800015ae:	5b fc       	cp.w	r12,-1
800015b0:	c1 71       	brne	800015de <_malloc_trim_r+0x76>
800015b2:	30 0b       	mov	r11,0
800015b4:	0e 9c       	mov	r12,r7
800015b6:	f0 1f 00 13 	mcall	80001600 <_malloc_trim_r+0x98>
800015ba:	68 28       	ld.w	r8,r4[0x8]
800015bc:	f8 08 01 09 	sub	r9,r12,r8
800015c0:	58 f9       	cp.w	r9,15
800015c2:	e0 8a 00 0a 	brle	800015d6 <_malloc_trim_r+0x6e>
800015c6:	a1 a9       	sbr	r9,0x0
800015c8:	91 19       	st.w	r8[0x4],r9
800015ca:	48 f8       	lddpc	r8,80001604 <_malloc_trim_r+0x9c>
800015cc:	70 09       	ld.w	r9,r8[0x0]
800015ce:	48 f8       	lddpc	r8,80001608 <_malloc_trim_r+0xa0>
800015d0:	f8 09 01 09 	sub	r9,r12,r9
800015d4:	91 09       	st.w	r8[0x0],r9
800015d6:	0e 9c       	mov	r12,r7
800015d8:	f0 1f 00 0d 	mcall	8000160c <_malloc_trim_r+0xa4>
800015dc:	d8 2a       	popm	r4-r7,pc,r12=0
800015de:	68 28       	ld.w	r8,r4[0x8]
800015e0:	0a 16       	sub	r6,r5
800015e2:	a1 a6       	sbr	r6,0x0
800015e4:	91 16       	st.w	r8[0x4],r6
800015e6:	48 98       	lddpc	r8,80001608 <_malloc_trim_r+0xa0>
800015e8:	70 09       	ld.w	r9,r8[0x0]
800015ea:	0a 19       	sub	r9,r5
800015ec:	0e 9c       	mov	r12,r7
800015ee:	91 09       	st.w	r8[0x0],r9
800015f0:	f0 1f 00 07 	mcall	8000160c <_malloc_trim_r+0xa4>
800015f4:	da 2a       	popm	r4-r7,pc,r12=1
800015f6:	00 00       	add	r0,r0
800015f8:	80 00       	ld.sh	r0,r0[0x0]
800015fa:	14 ee       	st.h	--r10,lr
800015fc:	00 00       	add	r0,r0
800015fe:	01 04       	ld.w	r4,r0++
80001600:	80 00       	ld.sh	r0,r0[0x0]
80001602:	14 f4       	st.b	--r10,r4
80001604:	00 00       	add	r0,r0
80001606:	05 10       	ld.sh	r0,r2++
80001608:	00 00       	add	r0,r0
8000160a:	05 a4       	ld.ub	r4,r2[0x2]
8000160c:	80 00       	ld.sh	r0,r0[0x0]
8000160e:	14 f0       	st.b	--r10,r0

80001610 <_free_r>:
80001610:	d4 21       	pushm	r4-r7,lr
80001612:	16 96       	mov	r6,r11
80001614:	18 97       	mov	r7,r12
80001616:	58 0b       	cp.w	r11,0
80001618:	e0 80 00 c8 	breq	800017a8 <_free_r+0x198>
8000161c:	f0 1f 00 4c 	mcall	8000174c <_free_r+0x13c>
80001620:	20 86       	sub	r6,8
80001622:	4c ca       	lddpc	r10,80001750 <_free_r+0x140>
80001624:	6c 18       	ld.w	r8,r6[0x4]
80001626:	74 2e       	ld.w	lr,r10[0x8]
80001628:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000162c:	a1 c8       	cbr	r8,0x0
8000162e:	ec 08 00 09 	add	r9,r6,r8
80001632:	72 1b       	ld.w	r11,r9[0x4]
80001634:	e0 1b ff fc 	andl	r11,0xfffc
80001638:	1c 39       	cp.w	r9,lr
8000163a:	c1 d1       	brne	80001674 <_free_r+0x64>
8000163c:	f6 08 00 08 	add	r8,r11,r8
80001640:	58 0c       	cp.w	r12,0
80001642:	c0 81       	brne	80001652 <_free_r+0x42>
80001644:	6c 09       	ld.w	r9,r6[0x0]
80001646:	12 16       	sub	r6,r9
80001648:	12 08       	add	r8,r9
8000164a:	6c 3b       	ld.w	r11,r6[0xc]
8000164c:	6c 29       	ld.w	r9,r6[0x8]
8000164e:	97 29       	st.w	r11[0x8],r9
80001650:	93 3b       	st.w	r9[0xc],r11
80001652:	10 99       	mov	r9,r8
80001654:	95 26       	st.w	r10[0x8],r6
80001656:	a1 a9       	sbr	r9,0x0
80001658:	8d 19       	st.w	r6[0x4],r9
8000165a:	4b f9       	lddpc	r9,80001754 <_free_r+0x144>
8000165c:	72 09       	ld.w	r9,r9[0x0]
8000165e:	12 38       	cp.w	r8,r9
80001660:	c0 63       	brcs	8000166c <_free_r+0x5c>
80001662:	4b e8       	lddpc	r8,80001758 <_free_r+0x148>
80001664:	0e 9c       	mov	r12,r7
80001666:	70 0b       	ld.w	r11,r8[0x0]
80001668:	f0 1f 00 3d 	mcall	8000175c <_free_r+0x14c>
8000166c:	0e 9c       	mov	r12,r7
8000166e:	f0 1f 00 3d 	mcall	80001760 <_free_r+0x150>
80001672:	d8 22       	popm	r4-r7,pc
80001674:	93 1b       	st.w	r9[0x4],r11
80001676:	58 0c       	cp.w	r12,0
80001678:	c0 30       	breq	8000167e <_free_r+0x6e>
8000167a:	30 0c       	mov	r12,0
8000167c:	c1 08       	rjmp	8000169c <_free_r+0x8c>
8000167e:	6c 0e       	ld.w	lr,r6[0x0]
80001680:	f4 c5 ff f8 	sub	r5,r10,-8
80001684:	1c 16       	sub	r6,lr
80001686:	1c 08       	add	r8,lr
80001688:	6c 2e       	ld.w	lr,r6[0x8]
8000168a:	0a 3e       	cp.w	lr,r5
8000168c:	f9 bc 00 01 	moveq	r12,1
80001690:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001694:	eb fe 1a 02 	st.wne	r5[0x8],lr
80001698:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000169c:	f2 0b 00 0e 	add	lr,r9,r11
800016a0:	7c 1e       	ld.w	lr,lr[0x4]
800016a2:	ed be 00 00 	bld	lr,0x0
800016a6:	c1 30       	breq	800016cc <_free_r+0xbc>
800016a8:	16 08       	add	r8,r11
800016aa:	58 0c       	cp.w	r12,0
800016ac:	c0 c1       	brne	800016c4 <_free_r+0xb4>
800016ae:	4a 9e       	lddpc	lr,80001750 <_free_r+0x140>
800016b0:	72 2b       	ld.w	r11,r9[0x8]
800016b2:	2f 8e       	sub	lr,-8
800016b4:	1c 3b       	cp.w	r11,lr
800016b6:	c0 71       	brne	800016c4 <_free_r+0xb4>
800016b8:	97 36       	st.w	r11[0xc],r6
800016ba:	97 26       	st.w	r11[0x8],r6
800016bc:	8d 2b       	st.w	r6[0x8],r11
800016be:	8d 3b       	st.w	r6[0xc],r11
800016c0:	30 1c       	mov	r12,1
800016c2:	c0 58       	rjmp	800016cc <_free_r+0xbc>
800016c4:	72 2b       	ld.w	r11,r9[0x8]
800016c6:	72 39       	ld.w	r9,r9[0xc]
800016c8:	93 2b       	st.w	r9[0x8],r11
800016ca:	97 39       	st.w	r11[0xc],r9
800016cc:	10 99       	mov	r9,r8
800016ce:	ec 08 09 08 	st.w	r6[r8],r8
800016d2:	a1 a9       	sbr	r9,0x0
800016d4:	8d 19       	st.w	r6[0x4],r9
800016d6:	58 0c       	cp.w	r12,0
800016d8:	c6 51       	brne	800017a2 <_free_r+0x192>
800016da:	e0 48 01 ff 	cp.w	r8,511
800016de:	e0 8b 00 13 	brhi	80001704 <_free_r+0xf4>
800016e2:	a3 98       	lsr	r8,0x3
800016e4:	f4 08 00 39 	add	r9,r10,r8<<0x3
800016e8:	72 2b       	ld.w	r11,r9[0x8]
800016ea:	8d 39       	st.w	r6[0xc],r9
800016ec:	8d 2b       	st.w	r6[0x8],r11
800016ee:	97 36       	st.w	r11[0xc],r6
800016f0:	93 26       	st.w	r9[0x8],r6
800016f2:	a3 48       	asr	r8,0x2
800016f4:	74 19       	ld.w	r9,r10[0x4]
800016f6:	30 1b       	mov	r11,1
800016f8:	f6 08 09 48 	lsl	r8,r11,r8
800016fc:	f3 e8 10 08 	or	r8,r9,r8
80001700:	95 18       	st.w	r10[0x4],r8
80001702:	c5 08       	rjmp	800017a2 <_free_r+0x192>
80001704:	f0 0b 16 09 	lsr	r11,r8,0x9
80001708:	58 4b       	cp.w	r11,4
8000170a:	e0 8b 00 06 	brhi	80001716 <_free_r+0x106>
8000170e:	f0 0b 16 06 	lsr	r11,r8,0x6
80001712:	2c 8b       	sub	r11,-56
80001714:	c2 b8       	rjmp	8000176a <_free_r+0x15a>
80001716:	59 4b       	cp.w	r11,20
80001718:	e0 8b 00 04 	brhi	80001720 <_free_r+0x110>
8000171c:	2a 5b       	sub	r11,-91
8000171e:	c2 68       	rjmp	8000176a <_free_r+0x15a>
80001720:	e0 4b 00 54 	cp.w	r11,84
80001724:	e0 8b 00 06 	brhi	80001730 <_free_r+0x120>
80001728:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000172c:	29 2b       	sub	r11,-110
8000172e:	c1 e8       	rjmp	8000176a <_free_r+0x15a>
80001730:	e0 4b 01 54 	cp.w	r11,340
80001734:	e0 8b 00 06 	brhi	80001740 <_free_r+0x130>
80001738:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000173c:	28 9b       	sub	r11,-119
8000173e:	c1 68       	rjmp	8000176a <_free_r+0x15a>
80001740:	e0 4b 05 54 	cp.w	r11,1364
80001744:	e0 88 00 10 	brls	80001764 <_free_r+0x154>
80001748:	37 eb       	mov	r11,126
8000174a:	c1 08       	rjmp	8000176a <_free_r+0x15a>
8000174c:	80 00       	ld.sh	r0,r0[0x0]
8000174e:	14 ee       	st.h	--r10,lr
80001750:	00 00       	add	r0,r0
80001752:	01 04       	ld.w	r4,r0++
80001754:	00 00       	add	r0,r0
80001756:	05 0c       	ld.w	r12,r2++
80001758:	00 00       	add	r0,r0
8000175a:	05 a0       	ld.ub	r0,r2[0x2]
8000175c:	80 00       	ld.sh	r0,r0[0x0]
8000175e:	15 68       	ld.uh	r8,--r10
80001760:	80 00       	ld.sh	r0,r0[0x0]
80001762:	14 f0       	st.b	--r10,r0
80001764:	f0 0b 16 12 	lsr	r11,r8,0x12
80001768:	28 4b       	sub	r11,-124
8000176a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000176e:	78 29       	ld.w	r9,r12[0x8]
80001770:	18 39       	cp.w	r9,r12
80001772:	c0 e1       	brne	8000178e <_free_r+0x17e>
80001774:	74 18       	ld.w	r8,r10[0x4]
80001776:	a3 4b       	asr	r11,0x2
80001778:	30 1c       	mov	r12,1
8000177a:	f8 0b 09 4b 	lsl	r11,r12,r11
8000177e:	f1 eb 10 0b 	or	r11,r8,r11
80001782:	12 98       	mov	r8,r9
80001784:	95 1b       	st.w	r10[0x4],r11
80001786:	c0 a8       	rjmp	8000179a <_free_r+0x18a>
80001788:	72 29       	ld.w	r9,r9[0x8]
8000178a:	18 39       	cp.w	r9,r12
8000178c:	c0 60       	breq	80001798 <_free_r+0x188>
8000178e:	72 1a       	ld.w	r10,r9[0x4]
80001790:	e0 1a ff fc 	andl	r10,0xfffc
80001794:	14 38       	cp.w	r8,r10
80001796:	cf 93       	brcs	80001788 <_free_r+0x178>
80001798:	72 38       	ld.w	r8,r9[0xc]
8000179a:	8d 38       	st.w	r6[0xc],r8
8000179c:	8d 29       	st.w	r6[0x8],r9
8000179e:	93 36       	st.w	r9[0xc],r6
800017a0:	91 26       	st.w	r8[0x8],r6
800017a2:	0e 9c       	mov	r12,r7
800017a4:	f0 1f 00 02 	mcall	800017ac <_free_r+0x19c>
800017a8:	d8 22       	popm	r4-r7,pc
800017aa:	00 00       	add	r0,r0
800017ac:	80 00       	ld.sh	r0,r0[0x0]
800017ae:	14 f0       	st.b	--r10,r0

Disassembly of section .exception:

80001800 <_evba>:
	...

80001828 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001828:	c7 a8       	rjmp	8000191c <privilegedCalls>
	...

80001900 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001900:	1c 9f       	mov	pc,lr

80001902 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001902:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001906:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
8000190a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
8000190e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001912:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001914:	c0 31       	brne	8000191a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001916:	4b 9c       	lddpc	r12,800019f8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001918:	18 9f       	mov	pc,r12

8000191a <_int0_exit>:
_int0_exit:
	rete
8000191a:	d6 03       	rete

8000191c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
8000191c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
8000191e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001920:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001922:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001924:	9b 3c       	st.w	sp[0xc],r12

80001926 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001926:	4b 6c       	lddpc	r12,800019fc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001928:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
8000192a:	c0 61       	brne	80001936 <priv_interruptenable>
	ld.w r12,sp[USERSR]
8000192c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
8000192e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001930:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001932:	d3 02       	popm	r11-r12
	rete
80001934:	d6 03       	rete

80001936 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001936:	4b 3c       	lddpc	r12,80001a00 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001938:	18 3b       	cp.w	r11,r12
	brne privexception
8000193a:	c0 61       	brne	80001946 <privexception>
	ld.w r12,sp[USERSR]
8000193c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
8000193e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001940:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001942:	d3 02       	popm	r11-r12
	rete
80001944:	d6 03       	rete

80001946 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001946:	c0 08       	rjmp	80001946 <privexception>

80001948 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001948:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
8000194a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
8000194e:	4a ec       	lddpc	r12,80001a04 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001950:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001952:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001954:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001958:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
8000195c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001960:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001962:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001964:	1c 9f       	mov	pc,lr

80001966 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001966:	d3 03       	ssrf	0x10
	mov pc,lr
80001968:	1c 9f       	mov	pc,lr

8000196a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
8000196a:	d5 03       	csrf	0x10
	mov pc,lr
8000196c:	1c 9f       	mov	pc,lr

8000196e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
8000196e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001972:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001974:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001978:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
8000197c:	1c 9f       	mov	pc,lr

8000197e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000197e:	4a 3c       	lddpc	r12,80001a08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001980:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001982:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001984:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001986:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001988:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
8000198a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
8000198c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
8000198e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001990:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001992:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001994:	33 40       	mov	r0,52
	add r0,r12
80001996:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001998:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
8000199c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
8000199e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
800019a2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
800019a4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
800019a6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
800019a8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
800019aa:	1a 90       	mov	r0,sp
	st.w --sp,r0
800019ac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800019ae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
800019b2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
800019b4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
800019b6:	1c 9f       	mov	pc,lr

800019b8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800019b8:	49 4c       	lddpc	r12,80001a08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
800019ba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
800019bc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800019be:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800019c0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
800019c4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
800019c6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
800019c8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800019ca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
800019cc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800019ce:	33 40       	mov	r0,52
	add r0,r12
800019d0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800019d2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800019d6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
800019d8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
800019da:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
800019dc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
800019de:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
800019e0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
800019e2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
800019e4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
800019e6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
800019e8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800019ea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
800019ec:	d4 01       	pushm	lr
	call timerStart
800019ee:	f0 1f 00 08 	mcall	80001a0c <contextRestoreFromISR+0x54>
	popm lr
800019f2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
800019f4:	1c 9f       	mov	pc,lr
800019f6:	00 00       	add	r0,r0
800019f8:	80 00       	ld.sh	r0,r0[0x0]
800019fa:	07 04       	ld.w	r4,r3++
800019fc:	80 00       	ld.sh	r0,r0[0x0]
800019fe:	19 66       	ld.uh	r6,--r12
80001a00:	80 00       	ld.sh	r0,r0[0x0]
80001a02:	19 6a       	ld.uh	r10,--r12
80001a04:	80 00       	ld.sh	r0,r0[0x0]
80001a06:	18 00       	add	r0,r12
80001a08:	00 00       	add	r0,r0
80001a0a:	06 18       	sub	r8,r3
80001a0c:	80 00       	ld.sh	r0,r0[0x0]
80001a0e:	0f 0e       	ld.w	lr,r7++
	...
