
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001dfc  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80002000  80002000  00002400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80002400  80002400  00002800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002484  80002484  00002884  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80002488  00002c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002994  00003114  2**0
                  ALLOC
  9 .bss          000001a0  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000d948  000006b8  000006b8  00000000  2**0
                  ALLOC
 11 .comment      000000bc  00000000  00000000  00003114  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000005d0  00000000  00000000  000031d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000a58  00000000  00000000  000037a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000bee7  00000000  00000000  000041f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00001fad  00000000  00000000  000100df  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004643  00000000  00000000  0001208c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000c84  00000000  00000000  000166d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001d1a  00000000  00000000  00017354  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000195d  00000000  00000000  0001906e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00534590  00000000  00000000  0001a9cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 00000518  00000000  00000000  0054ef5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	15 ec       	ld.ub	r12,r10[0x6]

Disassembly of section .text:

80000008 <MaxLockedCeiling>:
 * Comment:
 * 	Returns a maximum ceiling of all currently locked semaphores
 *
 **********************************************************/
static uint8_t MaxLockedCeiling(void)
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 2d       	sub	sp,8
	if (LOCKEDSEMAPHORELIST==NULL)
80000010:	49 78       	lddpc	r8,8000006c <MaxLockedCeiling+0x64>
80000012:	70 08       	ld.w	r8,r8[0x0]
80000014:	58 08       	cp.w	r8,0
80000016:	c0 31       	brne	8000001c <MaxLockedCeiling+0x14>
	{
		return 0;
80000018:	30 08       	mov	r8,0
8000001a:	c2 48       	rjmp	80000062 <MaxLockedCeiling+0x5a>
	}
	else
	{
	uint8_t maxCeil=LOCKEDSEMAPHORELIST->ceiling;
8000001c:	49 48       	lddpc	r8,8000006c <MaxLockedCeiling+0x64>
8000001e:	70 08       	ld.w	r8,r8[0x0]
80000020:	11 c8       	ld.ub	r8,r8[0x4]
80000022:	ef 68 ff fb 	st.b	r7[-5],r8
	ROSA_semaphoreHandle * it = LOCKEDSEMAPHORELIST;
80000026:	49 28       	lddpc	r8,8000006c <MaxLockedCeiling+0x64>
80000028:	70 08       	ld.w	r8,r8[0x0]
8000002a:	ef 48 ff fc 	st.w	r7[-4],r8
	while (it->nextLockedSemaphore!=NULL)
8000002e:	c1 38       	rjmp	80000054 <MaxLockedCeiling+0x4c>
	{
		if (it->ceiling>maxCeil)
80000030:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000034:	11 c8       	ld.ub	r8,r8[0x4]
80000036:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000003a:	f0 09 18 00 	cp.b	r9,r8
8000003e:	c0 62       	brcc	8000004a <MaxLockedCeiling+0x42>
		{
			maxCeil=it->ceiling;
80000040:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000044:	11 c8       	ld.ub	r8,r8[0x4]
80000046:	ef 68 ff fb 	st.b	r7[-5],r8
		}
		it=it->nextLockedSemaphore;
8000004a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000004e:	70 28       	ld.w	r8,r8[0x8]
80000050:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
	uint8_t maxCeil=LOCKEDSEMAPHORELIST->ceiling;
	ROSA_semaphoreHandle * it = LOCKEDSEMAPHORELIST;
	while (it->nextLockedSemaphore!=NULL)
80000054:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000058:	70 28       	ld.w	r8,r8[0x8]
8000005a:	58 08       	cp.w	r8,0
8000005c:	ce a1       	brne	80000030 <MaxLockedCeiling+0x28>
			maxCeil=it->ceiling;
		}
		it=it->nextLockedSemaphore;
	}
	
	return maxCeil;
8000005e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
	}
}
80000062:	10 9c       	mov	r12,r8
80000064:	2f ed       	sub	sp,-8
80000066:	e3 cd 80 80 	ldm	sp++,r7,pc
8000006a:	00 00       	add	r0,r0
8000006c:	00 00       	add	r0,r0
8000006e:	05 d0       	ld.ub	r0,r2[0x5]

80000070 <ROSA_semaphoreCreate>:
 *
 * Comment:
 * 	Create a semaphore
 *
 **********************************************************/
int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t * mutex, uint8_t ceiling) {
80000070:	eb cd 40 c0 	pushm	r6-r7,lr
80000074:	1a 97       	mov	r7,sp
80000076:	20 2d       	sub	sp,8
80000078:	ef 4c ff fc 	st.w	r7[-4],r12
8000007c:	16 98       	mov	r8,r11
8000007e:	ef 68 ff f8 	st.b	r7[-8],r8
	**mutex = (ROSA_semaphoreHandle *) calloc(1, sizeof(***mutex));
80000082:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000086:	70 06       	ld.w	r6,r8[0x0]
80000088:	30 cb       	mov	r11,12
8000008a:	30 1c       	mov	r12,1
8000008c:	f0 1f 00 0e 	mcall	800000c4 <ROSA_semaphoreCreate+0x54>
80000090:	18 98       	mov	r8,r12
80000092:	8d 08       	st.w	r6[0x0],r8
	(**mutex)->holder = NULL;
80000094:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000098:	70 08       	ld.w	r8,r8[0x0]
8000009a:	70 08       	ld.w	r8,r8[0x0]
8000009c:	30 09       	mov	r9,0
8000009e:	91 09       	st.w	r8[0x0],r9
	(**mutex)->ceiling = ceiling;
800000a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000a4:	70 08       	ld.w	r8,r8[0x0]
800000a6:	70 09       	ld.w	r9,r8[0x0]
800000a8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800000ac:	b2 c8       	st.b	r9[0x4],r8
	(**mutex)->nextLockedSemaphore=NULL;	
800000ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000b2:	70 08       	ld.w	r8,r8[0x0]
800000b4:	70 08       	ld.w	r8,r8[0x0]
800000b6:	30 09       	mov	r9,0
800000b8:	91 29       	st.w	r8[0x8],r9
	
	return 0;
800000ba:	30 08       	mov	r8,0
}
800000bc:	10 9c       	mov	r12,r8
800000be:	2f ed       	sub	sp,-8
800000c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800000c4:	80 00       	ld.sh	r0,r0[0x0]
800000c6:	16 6c       	and	r12,r11

800000c8 <ROSA_semaphoreLock>:
 *
 * Comment:
 * 	Lock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t  mutex) {
800000c8:	eb cd 40 c0 	pushm	r6-r7,lr
800000cc:	1a 97       	mov	r7,sp
800000ce:	20 2d       	sub	sp,8
800000d0:	ef 4c ff f8 	st.w	r7[-8],r12
	
	if (*mutex==NULL)
800000d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000d8:	70 08       	ld.w	r8,r8[0x0]
800000da:	58 08       	cp.w	r8,0
800000dc:	c0 61       	brne	800000e8 <ROSA_semaphoreLock+0x20>
	{
		return -1; // if the passed pointer to the semaphore handle is non-existent
800000de:	3f f8       	mov	r8,-1
800000e0:	c5 88       	rjmp	80000190 <ROSA_semaphoreLock+0xc8>
	}
	
	while ((*mutex)->holder != NULL || EXECTASK->priority<=MaxLockedCeiling()) //if the semaphore is already locked or IPCP condition P(task)>maxLockedCeil
		ROSA_yield();		
800000e2:	f0 1f 00 2e 	mcall	80000198 <ROSA_semaphoreLock+0xd0>
800000e6:	c0 28       	rjmp	800000ea <ROSA_semaphoreLock+0x22>
	if (*mutex==NULL)
	{
		return -1; // if the passed pointer to the semaphore handle is non-existent
	}
	
	while ((*mutex)->holder != NULL || EXECTASK->priority<=MaxLockedCeiling()) //if the semaphore is already locked or IPCP condition P(task)>maxLockedCeil
800000e8:	d7 03       	nop
800000ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000ee:	70 08       	ld.w	r8,r8[0x0]
800000f0:	70 08       	ld.w	r8,r8[0x0]
800000f2:	58 08       	cp.w	r8,0
800000f4:	cf 71       	brne	800000e2 <ROSA_semaphoreLock+0x1a>
800000f6:	4a a8       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd4>
800000f8:	70 08       	ld.w	r8,r8[0x0]
800000fa:	f1 36 00 64 	ld.ub	r6,r8[100]
800000fe:	f0 1f 00 29 	mcall	800001a0 <ROSA_semaphoreLock+0xd8>
80000102:	18 98       	mov	r8,r12
80000104:	f0 06 18 00 	cp.b	r6,r8
80000108:	fe 98 ff ed 	brls	800000e2 <ROSA_semaphoreLock+0x1a>
		ROSA_yield();		
	
	(*mutex)->holder = EXECTASK;
8000010c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000110:	70 08       	ld.w	r8,r8[0x0]
80000112:	4a 39       	lddpc	r9,8000019c <ROSA_semaphoreLock+0xd4>
80000114:	72 09       	ld.w	r9,r9[0x0]
80000116:	91 09       	st.w	r8[0x0],r9
	if (EXECTASK->priority < (*mutex)->ceiling)
80000118:	4a 18       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd4>
8000011a:	70 08       	ld.w	r8,r8[0x0]
8000011c:	f1 39 00 64 	ld.ub	r9,r8[100]
80000120:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000124:	70 08       	ld.w	r8,r8[0x0]
80000126:	11 c8       	ld.ub	r8,r8[0x4]
80000128:	f0 09 18 00 	cp.b	r9,r8
8000012c:	c1 32       	brcc	80000152 <ROSA_semaphoreLock+0x8a>
	{
		readyQueueExtract(EXECTASK);
8000012e:	49 c8       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd4>
80000130:	70 08       	ld.w	r8,r8[0x0]
80000132:	10 9c       	mov	r12,r8
80000134:	f0 1f 00 1c 	mcall	800001a4 <ROSA_semaphoreLock+0xdc>
		EXECTASK->priority=(*mutex)->ceiling; //IPCP priority inheritance		
80000138:	49 98       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd4>
8000013a:	70 09       	ld.w	r9,r8[0x0]
8000013c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000140:	70 08       	ld.w	r8,r8[0x0]
80000142:	11 c8       	ld.ub	r8,r8[0x4]
80000144:	f3 68 00 64 	st.b	r9[100],r8
		readyQueueInsert(EXECTASK);
80000148:	49 58       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd4>
8000014a:	70 08       	ld.w	r8,r8[0x0]
8000014c:	10 9c       	mov	r12,r8
8000014e:	f0 1f 00 17 	mcall	800001a8 <ROSA_semaphoreLock+0xe0>
	}
		
	if (LOCKEDSEMAPHORELIST==NULL)
80000152:	49 78       	lddpc	r8,800001ac <ROSA_semaphoreLock+0xe4>
80000154:	70 08       	ld.w	r8,r8[0x0]
80000156:	58 08       	cp.w	r8,0
80000158:	c0 61       	brne	80000164 <ROSA_semaphoreLock+0x9c>
	{
		LOCKEDSEMAPHORELIST=mutex;
8000015a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000015e:	49 48       	lddpc	r8,800001ac <ROSA_semaphoreLock+0xe4>
80000160:	91 09       	st.w	r8[0x0],r9
80000162:	c1 68       	rjmp	8000018e <ROSA_semaphoreLock+0xc6>
	}
	else
	{
		ROSA_semaphoreHandle * it; //finding the last semaphore in the list and changing its nextLockedSemaphore field to point to the just locked semaphore
		
		it = LOCKEDSEMAPHORELIST;
80000164:	49 28       	lddpc	r8,800001ac <ROSA_semaphoreLock+0xe4>
80000166:	70 08       	ld.w	r8,r8[0x0]
80000168:	ef 48 ff fc 	st.w	r7[-4],r8
		
		while(it->nextLockedSemaphore!=NULL)
8000016c:	c0 68       	rjmp	80000178 <ROSA_semaphoreLock+0xb0>
		{
			it=it->nextLockedSemaphore;
8000016e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000172:	70 28       	ld.w	r8,r8[0x8]
80000174:	ef 48 ff fc 	st.w	r7[-4],r8
	{
		ROSA_semaphoreHandle * it; //finding the last semaphore in the list and changing its nextLockedSemaphore field to point to the just locked semaphore
		
		it = LOCKEDSEMAPHORELIST;
		
		while(it->nextLockedSemaphore!=NULL)
80000178:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000017c:	70 28       	ld.w	r8,r8[0x8]
8000017e:	58 08       	cp.w	r8,0
80000180:	cf 71       	brne	8000016e <ROSA_semaphoreLock+0xa6>
		{
			it=it->nextLockedSemaphore;
		}
		
		it->nextLockedSemaphore = *mutex;
80000182:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000186:	70 09       	ld.w	r9,r8[0x0]
80000188:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000018c:	91 29       	st.w	r8[0x8],r9
	}
	
	return 0;
8000018e:	30 08       	mov	r8,0
}
80000190:	10 9c       	mov	r12,r8
80000192:	2f ed       	sub	sp,-8
80000194:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80000198:	80 00       	ld.sh	r0,r0[0x0]
8000019a:	0a 42       	or	r2,r5
8000019c:	00 00       	add	r0,r0
8000019e:	06 28       	rsub	r8,r3
800001a0:	80 00       	ld.sh	r0,r0[0x0]
800001a2:	00 08       	add	r8,r0
800001a4:	80 00       	ld.sh	r0,r0[0x0]
800001a6:	05 a8       	ld.ub	r8,r2[0x2]
800001a8:	80 00       	ld.sh	r0,r0[0x0]
800001aa:	05 14       	ld.sh	r4,r2++
800001ac:	00 00       	add	r0,r0
800001ae:	05 d0       	ld.ub	r0,r2[0x5]

800001b0 <ROSA_semaphoreUnlock>:
 *
 * Comment:
 * 	Unlock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreUnlock(ROSA_semaphoreHandle_t  mutex) {
800001b0:	eb cd 40 80 	pushm	r7,lr
800001b4:	1a 97       	mov	r7,sp
800001b6:	20 2d       	sub	sp,8
800001b8:	ef 4c ff f8 	st.w	r7[-8],r12
	(*mutex)->holder = NULL;
800001bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001c0:	70 08       	ld.w	r8,r8[0x0]
800001c2:	30 09       	mov	r9,0
800001c4:	91 09       	st.w	r8[0x0],r9
	if (*mutex == LOCKEDSEMAPHORELIST)
800001c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001ca:	70 09       	ld.w	r9,r8[0x0]
800001cc:	49 e8       	lddpc	r8,80000244 <ROSA_semaphoreUnlock+0x94>
800001ce:	70 08       	ld.w	r8,r8[0x0]
800001d0:	10 39       	cp.w	r9,r8
800001d2:	c0 81       	brne	800001e2 <ROSA_semaphoreUnlock+0x32>
	{
		LOCKEDSEMAPHORELIST = (*mutex)->nextLockedSemaphore; //if first locked semaphore needs to be unlocked
800001d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001d8:	70 08       	ld.w	r8,r8[0x0]
800001da:	70 29       	ld.w	r9,r8[0x8]
800001dc:	49 a8       	lddpc	r8,80000244 <ROSA_semaphoreUnlock+0x94>
800001de:	91 09       	st.w	r8[0x0],r9
800001e0:	c1 a8       	rjmp	80000214 <ROSA_semaphoreUnlock+0x64>
	}
	else
	{
		ROSA_semaphoreHandle * it;
		it=LOCKEDSEMAPHORELIST;
800001e2:	49 98       	lddpc	r8,80000244 <ROSA_semaphoreUnlock+0x94>
800001e4:	70 08       	ld.w	r8,r8[0x0]
800001e6:	ef 48 ff fc 	st.w	r7[-4],r8
		while (it->nextLockedSemaphore != *mutex) //find the locked semaphore before the one that needs to be unlocked
800001ea:	c0 68       	rjmp	800001f6 <ROSA_semaphoreUnlock+0x46>
		{
			it=it->nextLockedSemaphore;
800001ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001f0:	70 28       	ld.w	r8,r8[0x8]
800001f2:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
		ROSA_semaphoreHandle * it;
		it=LOCKEDSEMAPHORELIST;
		while (it->nextLockedSemaphore != *mutex) //find the locked semaphore before the one that needs to be unlocked
800001f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001fa:	70 29       	ld.w	r9,r8[0x8]
800001fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000200:	70 08       	ld.w	r8,r8[0x0]
80000202:	10 39       	cp.w	r9,r8
80000204:	cf 41       	brne	800001ec <ROSA_semaphoreUnlock+0x3c>
		{
			it=it->nextLockedSemaphore;
		}
		it->nextLockedSemaphore=(*mutex)->nextLockedSemaphore;
80000206:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000020a:	70 08       	ld.w	r8,r8[0x0]
8000020c:	70 29       	ld.w	r9,r8[0x8]
8000020e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000212:	91 29       	st.w	r8[0x8],r9
	}
	readyQueueExtract(EXECTASK);
80000214:	48 d8       	lddpc	r8,80000248 <ROSA_semaphoreUnlock+0x98>
80000216:	70 08       	ld.w	r8,r8[0x0]
80000218:	10 9c       	mov	r12,r8
8000021a:	f0 1f 00 0d 	mcall	8000024c <ROSA_semaphoreUnlock+0x9c>
	EXECTASK->priority=EXECTASK->originalPriority; //IPCP priority inheritance
8000021e:	48 b8       	lddpc	r8,80000248 <ROSA_semaphoreUnlock+0x98>
80000220:	70 09       	ld.w	r9,r8[0x0]
80000222:	48 a8       	lddpc	r8,80000248 <ROSA_semaphoreUnlock+0x98>
80000224:	70 08       	ld.w	r8,r8[0x0]
80000226:	f1 38 00 71 	ld.ub	r8,r8[113]
8000022a:	f3 68 00 64 	st.b	r9[100],r8
	readyQueueInsert(EXECTASK);
8000022e:	48 78       	lddpc	r8,80000248 <ROSA_semaphoreUnlock+0x98>
80000230:	70 08       	ld.w	r8,r8[0x0]
80000232:	10 9c       	mov	r12,r8
80000234:	f0 1f 00 07 	mcall	80000250 <ROSA_semaphoreUnlock+0xa0>
	
	return 0;
80000238:	30 08       	mov	r8,0
}
8000023a:	10 9c       	mov	r12,r8
8000023c:	2f ed       	sub	sp,-8
8000023e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000242:	00 00       	add	r0,r0
80000244:	00 00       	add	r0,r0
80000246:	05 d0       	ld.ub	r0,r2[0x5]
80000248:	00 00       	add	r0,r0
8000024a:	06 28       	rsub	r8,r3
8000024c:	80 00       	ld.sh	r0,r0[0x0]
8000024e:	05 a8       	ld.ub	r8,r2[0x2]
80000250:	80 00       	ld.sh	r0,r0[0x0]
80000252:	05 14       	ld.sh	r4,r2++

80000254 <usart_options>:
80000254:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 31     ............tsk1
80000264:	00 00 00 00 74 73 6b 32 00 00 00 00 74 73 6b 33     ....tsk2....tsk3
80000274:	00 00 00 00                                         ....

80000278 <task1>:
ROSA_semaphoreHandle_t mutex3;



void task1(void)
{
80000278:	eb cd 40 80 	pushm	r7,lr
8000027c:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex3);
8000027e:	49 68       	lddpc	r8,800002d4 <task1+0x5c>
80000280:	70 08       	ld.w	r8,r8[0x0]
80000282:	10 9c       	mov	r12,r8
80000284:	f0 1f 00 15 	mcall	800002d8 <task1+0x60>
		ledOn(LED2_GPIO);
80000288:	33 dc       	mov	r12,61
8000028a:	f0 1f 00 15 	mcall	800002dc <task1+0x64>
		delay_ms(2100);
8000028e:	e0 6c 08 34 	mov	r12,2100
80000292:	f0 1f 00 14 	mcall	800002e0 <task1+0x68>
		ROSA_semaphoreLock(mutex2);
80000296:	49 48       	lddpc	r8,800002e4 <task1+0x6c>
80000298:	70 08       	ld.w	r8,r8[0x0]
8000029a:	10 9c       	mov	r12,r8
8000029c:	f0 1f 00 0f 	mcall	800002d8 <task1+0x60>
		ledOn(LED1_GPIO);
800002a0:	33 cc       	mov	r12,60
800002a2:	f0 1f 00 0f 	mcall	800002dc <task1+0x64>
		delay_ms(500);
800002a6:	e0 6c 01 f4 	mov	r12,500
800002aa:	f0 1f 00 0e 	mcall	800002e0 <task1+0x68>
		ledOff(LED1_GPIO);
800002ae:	33 cc       	mov	r12,60
800002b0:	f0 1f 00 0e 	mcall	800002e8 <task1+0x70>
		ROSA_semaphoreUnlock(mutex2);
800002b4:	48 c8       	lddpc	r8,800002e4 <task1+0x6c>
800002b6:	70 08       	ld.w	r8,r8[0x0]
800002b8:	10 9c       	mov	r12,r8
800002ba:	f0 1f 00 0d 	mcall	800002ec <task1+0x74>
		ledOff(LED2_GPIO);
800002be:	33 dc       	mov	r12,61
800002c0:	f0 1f 00 0a 	mcall	800002e8 <task1+0x70>
		ROSA_semaphoreUnlock(mutex3);
800002c4:	48 48       	lddpc	r8,800002d4 <task1+0x5c>
800002c6:	70 08       	ld.w	r8,r8[0x0]
800002c8:	10 9c       	mov	r12,r8
800002ca:	f0 1f 00 09 	mcall	800002ec <task1+0x74>
		ROSA_yield();
800002ce:	f0 1f 00 09 	mcall	800002f0 <task1+0x78>
	}
800002d2:	cd 6b       	rjmp	8000027e <task1+0x6>
800002d4:	00 00       	add	r0,r0
800002d6:	05 e4       	ld.ub	r4,r2[0x6]
800002d8:	80 00       	ld.sh	r0,r0[0x0]
800002da:	00 c8       	st.b	r0++,r8
800002dc:	80 00       	ld.sh	r0,r0[0x0]
800002de:	11 70       	ld.ub	r0,--r8
800002e0:	80 00       	ld.sh	r0,r0[0x0]
800002e2:	0f 68       	ld.uh	r8,--r7
800002e4:	00 00       	add	r0,r0
800002e6:	05 d8       	ld.ub	r8,r2[0x5]
800002e8:	80 00       	ld.sh	r0,r0[0x0]
800002ea:	11 90       	ld.ub	r0,r8[0x1]
800002ec:	80 00       	ld.sh	r0,r0[0x0]
800002ee:	01 b0       	ld.ub	r0,r0[0x3]
800002f0:	80 00       	ld.sh	r0,r0[0x0]
800002f2:	0a 42       	or	r2,r5

800002f4 <task2>:
}


void task2(void)
{
800002f4:	eb cd 40 80 	pushm	r7,lr
800002f8:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_delay(500);
800002fa:	e0 6a 01 f4 	mov	r10,500
800002fe:	30 0b       	mov	r11,0
80000300:	f0 1f 00 19 	mcall	80000364 <task2+0x70>
		ROSA_semaphoreLock(mutex2);
80000304:	49 98       	lddpc	r8,80000368 <task2+0x74>
80000306:	70 08       	ld.w	r8,r8[0x0]
80000308:	10 9c       	mov	r12,r8
8000030a:	f0 1f 00 19 	mcall	8000036c <task2+0x78>
		ledOn(LED1_GPIO);
8000030e:	33 cc       	mov	r12,60
80000310:	f0 1f 00 18 	mcall	80000370 <task2+0x7c>
		delay_ms(500);
80000314:	e0 6c 01 f4 	mov	r12,500
80000318:	f0 1f 00 17 	mcall	80000374 <task2+0x80>
		ROSA_semaphoreLock(mutex3);
8000031c:	49 78       	lddpc	r8,80000378 <task2+0x84>
8000031e:	70 08       	ld.w	r8,r8[0x0]
80000320:	10 9c       	mov	r12,r8
80000322:	f0 1f 00 13 	mcall	8000036c <task2+0x78>
		ledOn(LED2_GPIO);
80000326:	33 dc       	mov	r12,61
80000328:	f0 1f 00 12 	mcall	80000370 <task2+0x7c>
		delay_ms(500);
8000032c:	e0 6c 01 f4 	mov	r12,500
80000330:	f0 1f 00 11 	mcall	80000374 <task2+0x80>
		ledOff(LED2_GPIO);
80000334:	33 dc       	mov	r12,61
80000336:	f0 1f 00 12 	mcall	8000037c <task2+0x88>
		ROSA_semaphoreUnlock(mutex3);
8000033a:	49 08       	lddpc	r8,80000378 <task2+0x84>
8000033c:	70 08       	ld.w	r8,r8[0x0]
8000033e:	10 9c       	mov	r12,r8
80000340:	f0 1f 00 10 	mcall	80000380 <task2+0x8c>
		delay_ms(500);
80000344:	e0 6c 01 f4 	mov	r12,500
80000348:	f0 1f 00 0b 	mcall	80000374 <task2+0x80>
		ledOff(LED1_GPIO);
8000034c:	33 cc       	mov	r12,60
8000034e:	f0 1f 00 0c 	mcall	8000037c <task2+0x88>
		ROSA_semaphoreUnlock(mutex2);
80000352:	48 68       	lddpc	r8,80000368 <task2+0x74>
80000354:	70 08       	ld.w	r8,r8[0x0]
80000356:	10 9c       	mov	r12,r8
80000358:	f0 1f 00 0a 	mcall	80000380 <task2+0x8c>
		ROSA_yield();
8000035c:	f0 1f 00 0a 	mcall	80000384 <task2+0x90>
	}
80000360:	cc db       	rjmp	800002fa <task2+0x6>
80000362:	00 00       	add	r0,r0
80000364:	80 00       	ld.sh	r0,r0[0x0]
80000366:	0d f0       	ld.ub	r0,r6[0x7]
80000368:	00 00       	add	r0,r0
8000036a:	05 d8       	ld.ub	r8,r2[0x5]
8000036c:	80 00       	ld.sh	r0,r0[0x0]
8000036e:	00 c8       	st.b	r0++,r8
80000370:	80 00       	ld.sh	r0,r0[0x0]
80000372:	11 70       	ld.ub	r0,--r8
80000374:	80 00       	ld.sh	r0,r0[0x0]
80000376:	0f 68       	ld.uh	r8,--r7
80000378:	00 00       	add	r0,r0
8000037a:	05 e4       	ld.ub	r4,r2[0x6]
8000037c:	80 00       	ld.sh	r0,r0[0x0]
8000037e:	11 90       	ld.ub	r0,r8[0x1]
80000380:	80 00       	ld.sh	r0,r0[0x0]
80000382:	01 b0       	ld.ub	r0,r0[0x3]
80000384:	80 00       	ld.sh	r0,r0[0x0]
80000386:	0a 42       	or	r2,r5

80000388 <task3>:
}


void task3(void)
{
80000388:	eb cd 40 80 	pushm	r7,lr
8000038c:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_delay(1500);
8000038e:	e0 6a 05 dc 	mov	r10,1500
80000392:	30 0b       	mov	r11,0
80000394:	f0 1f 00 0d 	mcall	800003c8 <task3+0x40>
		ROSA_semaphoreLock(mutex1);
80000398:	48 d8       	lddpc	r8,800003cc <task3+0x44>
8000039a:	70 08       	ld.w	r8,r8[0x0]
8000039c:	10 9c       	mov	r12,r8
8000039e:	f0 1f 00 0d 	mcall	800003d0 <task3+0x48>
		ledOn(LED0_GPIO);
800003a2:	33 bc       	mov	r12,59
800003a4:	f0 1f 00 0c 	mcall	800003d4 <task3+0x4c>
		delay_ms(500);
800003a8:	e0 6c 01 f4 	mov	r12,500
800003ac:	f0 1f 00 0b 	mcall	800003d8 <task3+0x50>
		ledOff(LED0_GPIO);
800003b0:	33 bc       	mov	r12,59
800003b2:	f0 1f 00 0b 	mcall	800003dc <task3+0x54>
		ROSA_semaphoreUnlock(mutex1);
800003b6:	48 68       	lddpc	r8,800003cc <task3+0x44>
800003b8:	70 08       	ld.w	r8,r8[0x0]
800003ba:	10 9c       	mov	r12,r8
800003bc:	f0 1f 00 09 	mcall	800003e0 <task3+0x58>
		ROSA_yield();
800003c0:	f0 1f 00 09 	mcall	800003e4 <task3+0x5c>
	}
800003c4:	ce 5b       	rjmp	8000038e <task3+0x6>
800003c6:	00 00       	add	r0,r0
800003c8:	80 00       	ld.sh	r0,r0[0x0]
800003ca:	0d f0       	ld.ub	r0,r6[0x7]
800003cc:	00 00       	add	r0,r0
800003ce:	05 e8       	ld.ub	r8,r2[0x6]
800003d0:	80 00       	ld.sh	r0,r0[0x0]
800003d2:	00 c8       	st.b	r0++,r8
800003d4:	80 00       	ld.sh	r0,r0[0x0]
800003d6:	11 70       	ld.ub	r0,--r8
800003d8:	80 00       	ld.sh	r0,r0[0x0]
800003da:	0f 68       	ld.uh	r8,--r7
800003dc:	80 00       	ld.sh	r0,r0[0x0]
800003de:	11 90       	ld.ub	r0,r8[0x1]
800003e0:	80 00       	ld.sh	r0,r0[0x0]
800003e2:	01 b0       	ld.ub	r0,r0[0x3]
800003e4:	80 00       	ld.sh	r0,r0[0x0]
800003e6:	0a 42       	or	r2,r5

800003e8 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
800003e8:	eb cd 40 80 	pushm	r7,lr
800003ec:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
800003ee:	f0 1f 00 15 	mcall	80000440 <main+0x58>
	
	//Create tasks and install them into the ROSA kernel
	ROSA_taskCreate(t1_tcb, "tsk1", task1, T1_STACK_SIZE, 1);
800003f2:	49 58       	lddpc	r8,80000444 <main+0x5c>
800003f4:	70 0c       	ld.w	r12,r8[0x0]
800003f6:	30 18       	mov	r8,1
800003f8:	32 09       	mov	r9,32
800003fa:	49 4a       	lddpc	r10,80000448 <main+0x60>
800003fc:	49 4b       	lddpc	r11,8000044c <main+0x64>
800003fe:	f0 1f 00 15 	mcall	80000450 <main+0x68>
	ROSA_taskCreate(t2_tcb, "tsk2", task2, T2_STACK_SIZE, 2);
80000402:	49 58       	lddpc	r8,80000454 <main+0x6c>
80000404:	70 0c       	ld.w	r12,r8[0x0]
80000406:	30 28       	mov	r8,2
80000408:	32 09       	mov	r9,32
8000040a:	49 4a       	lddpc	r10,80000458 <main+0x70>
8000040c:	49 4b       	lddpc	r11,8000045c <main+0x74>
8000040e:	f0 1f 00 11 	mcall	80000450 <main+0x68>
	ROSA_taskCreate(t3_tcb, "tsk3", task3, T3_STACK_SIZE, 3);
80000412:	49 48       	lddpc	r8,80000460 <main+0x78>
80000414:	70 0c       	ld.w	r12,r8[0x0]
80000416:	30 38       	mov	r8,3
80000418:	32 09       	mov	r9,32
8000041a:	49 3a       	lddpc	r10,80000464 <main+0x7c>
8000041c:	49 3b       	lddpc	r11,80000468 <main+0x80>
8000041e:	f0 1f 00 0d 	mcall	80000450 <main+0x68>
	
	ROSA_semaphoreCreate(&mutex1, 3);
80000422:	30 3b       	mov	r11,3
80000424:	49 2c       	lddpc	r12,8000046c <main+0x84>
80000426:	f0 1f 00 13 	mcall	80000470 <main+0x88>
	ROSA_semaphoreCreate(&mutex2, 2);
8000042a:	30 2b       	mov	r11,2
8000042c:	49 2c       	lddpc	r12,80000474 <main+0x8c>
8000042e:	f0 1f 00 11 	mcall	80000470 <main+0x88>
	ROSA_semaphoreCreate(&mutex3, 2);
80000432:	30 2b       	mov	r11,2
80000434:	49 1c       	lddpc	r12,80000478 <main+0x90>
80000436:	f0 1f 00 0f 	mcall	80000470 <main+0x88>
	
	ROSA_startScheduler();
8000043a:	f0 1f 00 11 	mcall	8000047c <main+0x94>
	

	/* Execution will never return here */
	while(1);
8000043e:	c0 08       	rjmp	8000043e <main+0x56>
80000440:	80 00       	ld.sh	r0,r0[0x0]
80000442:	06 c4       	st.b	r3++,r4
80000444:	00 00       	add	r0,r0
80000446:	05 e0       	ld.ub	r0,r2[0x6]
80000448:	80 00       	ld.sh	r0,r0[0x0]
8000044a:	02 78       	tst	r8,r1
8000044c:	80 00       	ld.sh	r0,r0[0x0]
8000044e:	02 60       	and	r0,r1
80000450:	80 00       	ld.sh	r0,r0[0x0]
80000452:	08 64       	and	r4,r4
80000454:	00 00       	add	r0,r0
80000456:	05 dc       	ld.ub	r12,r2[0x5]
80000458:	80 00       	ld.sh	r0,r0[0x0]
8000045a:	02 f4       	st.b	--r1,r4
8000045c:	80 00       	ld.sh	r0,r0[0x0]
8000045e:	02 68       	and	r8,r1
80000460:	00 00       	add	r0,r0
80000462:	05 d4       	ld.ub	r4,r2[0x5]
80000464:	80 00       	ld.sh	r0,r0[0x0]
80000466:	03 88       	ld.ub	r8,r1[0x0]
80000468:	80 00       	ld.sh	r0,r0[0x0]
8000046a:	02 70       	tst	r0,r1
8000046c:	00 00       	add	r0,r0
8000046e:	05 e8       	ld.ub	r8,r2[0x6]
80000470:	80 00       	ld.sh	r0,r0[0x0]
80000472:	00 70       	tst	r0,r0
80000474:	00 00       	add	r0,r0
80000476:	05 d8       	ld.ub	r8,r2[0x5]
80000478:	00 00       	add	r0,r0
8000047a:	05 e4       	ld.ub	r4,r2[0x6]
8000047c:	80 00       	ld.sh	r0,r0[0x0]
8000047e:	0a ac       	st.w	r5++,r12

80000480 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
80000480:	eb cd 40 80 	pushm	r7,lr
80000484:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
80000486:	f0 1f 00 05 	mcall	80000498 <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
8000048a:	f0 1f 00 05 	mcall	8000049c <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it
8000048e:	f0 1f 00 05 	mcall	800004a0 <ROSA_yieldFromISR+0x20>
}
80000492:	e3 cd 80 80 	ldm	sp++,r7,pc
80000496:	00 00       	add	r0,r0
80000498:	80 00       	ld.sh	r0,r0[0x0]
8000049a:	21 7e       	sub	lr,23
8000049c:	80 00       	ld.sh	r0,r0[0x0]
8000049e:	0a 60       	and	r0,r5
800004a0:	80 00       	ld.sh	r0,r0[0x0]
800004a2:	21 b8       	sub	r8,27

800004a4 <usart_options>:
800004a4:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
800004b4:	0a 00 00 00 69 64 6c 65 00 00 00 00                 ....idle....

800004c0 <idle>:

/** @fn void idle(void)
	@brief Idle task body.
*/
void idle(void)
{
800004c0:	eb cd 40 80 	pushm	r7,lr
800004c4:	1a 97       	mov	r7,sp
	while(1)
	{
		usartWriteLine(USART, "idle\n");
800004c6:	48 4b       	lddpc	r11,800004d4 <idle+0x14>
800004c8:	fe 7c 14 00 	mov	r12,-60416
800004cc:	f0 1f 00 03 	mcall	800004d8 <idle+0x18>
	}
800004d0:	cf bb       	rjmp	800004c6 <idle+0x6>
800004d2:	00 00       	add	r0,r0
800004d4:	80 00       	ld.sh	r0,r0[0x0]
800004d6:	04 b0       	st.h	r2++,r0
800004d8:	80 00       	ld.sh	r0,r0[0x0]
800004da:	14 e0       	st.h	--r10,r0

800004dc <idleCreate>:

/** @fn void idleCreate(void)
	@brief Creation of the idle task.
*/
void idleCreate(void)
{
800004dc:	eb cd 40 80 	pushm	r7,lr
800004e0:	1a 97       	mov	r7,sp
	ROSA_tcbCreate(&IDLETASK_TCB, "idle", idle, idle_stack, IDLE_STACK_SIZE);
800004e2:	32 08       	mov	r8,32
800004e4:	48 69       	lddpc	r9,800004fc <idleCreate+0x20>
800004e6:	48 7a       	lddpc	r10,80000500 <idleCreate+0x24>
800004e8:	48 7b       	lddpc	r11,80000504 <idleCreate+0x28>
800004ea:	48 8c       	lddpc	r12,80000508 <idleCreate+0x2c>
800004ec:	f0 1f 00 08 	mcall	8000050c <idleCreate+0x30>
	IDLETASK = &IDLETASK_TCB;
800004f0:	48 88       	lddpc	r8,80000510 <idleCreate+0x34>
800004f2:	48 69       	lddpc	r9,80000508 <idleCreate+0x2c>
800004f4:	91 09       	st.w	r8[0x0],r9
}
800004f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800004fa:	00 00       	add	r0,r0
800004fc:	00 00       	add	r0,r0
800004fe:	05 18       	ld.sh	r8,r2++
80000500:	80 00       	ld.sh	r0,r0[0x0]
80000502:	04 c0       	st.b	r2++,r0
80000504:	80 00       	ld.sh	r0,r0[0x0]
80000506:	04 b8       	st.h	r2++,r8
80000508:	00 00       	add	r0,r0
8000050a:	06 30       	cp.w	r0,r3
8000050c:	80 00       	ld.sh	r0,r0[0x0]
8000050e:	07 b0       	ld.ub	r0,r3[0x3]
80000510:	00 00       	add	r0,r0
80000512:	05 ec       	ld.ub	r12,r2[0x6]

80000514 <readyQueueInsert>:
	@brief Inserts the given task into the ready queue by its priority.
	@param th Task structure (tcb structure).
	@return A status code (1 - item has been added to the empty queue, 0 - otherwise).
*/
int readyQueueInsert(ROSA_taskHandle_t pth)
{
80000514:	eb cd 40 80 	pushm	r7,lr
80000518:	1a 97       	mov	r7,sp
8000051a:	20 3d       	sub	sp,12
8000051c:	ef 4c ff f4 	st.w	r7[-12],r12
	uint8_t priority;
	int retval;
	
	priority = pth->priority;
80000520:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000524:	f1 38 00 64 	ld.ub	r8,r8[100]
80000528:	ef 68 ff fb 	st.b	r7[-5],r8
	
	/* Check the given queue for the emptiness */
	if (PA[priority] == NULL)
8000052c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000530:	49 d8       	lddpc	r8,800005a4 <readyQueueInsert+0x90>
80000532:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000536:	58 08       	cp.w	r8,0
80000538:	c1 41       	brne	80000560 <readyQueueInsert+0x4c>
	{
		PA[priority] = pth;
8000053a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000053e:	49 a8       	lddpc	r8,800005a4 <readyQueueInsert+0x90>
80000540:	ee fa ff f4 	ld.w	r10,r7[-12]
80000544:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		PA[priority]->nexttcb = pth;
80000548:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000054c:	49 68       	lddpc	r8,800005a4 <readyQueueInsert+0x90>
8000054e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000552:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000556:	91 09       	st.w	r8[0x0],r9
		
		retval = 1;
80000558:	30 18       	mov	r8,1
8000055a:	ef 48 ff fc 	st.w	r7[-4],r8
8000055e:	c1 c8       	rjmp	80000596 <readyQueueInsert+0x82>
	}
	else
	{
		pth->nexttcb = PA[priority]->nexttcb;
80000560:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000564:	49 08       	lddpc	r8,800005a4 <readyQueueInsert+0x90>
80000566:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000056a:	70 09       	ld.w	r9,r8[0x0]
8000056c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000570:	91 09       	st.w	r8[0x0],r9
		PA[priority]->nexttcb = pth;
80000572:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000576:	48 c8       	lddpc	r8,800005a4 <readyQueueInsert+0x90>
80000578:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000057c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000580:	91 09       	st.w	r8[0x0],r9
		PA[priority] = pth;
80000582:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000586:	48 88       	lddpc	r8,800005a4 <readyQueueInsert+0x90>
80000588:	ee fa ff f4 	ld.w	r10,r7[-12]
8000058c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		retval = 0;
80000590:	30 08       	mov	r8,0
80000592:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return retval;
80000596:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000059a:	10 9c       	mov	r12,r8
8000059c:	2f dd       	sub	sp,-12
8000059e:	e3 cd 80 80 	ldm	sp++,r7,pc
800005a2:	00 00       	add	r0,r0
800005a4:	00 00       	add	r0,r0
800005a6:	05 f4       	ld.ub	r4,r2[0x7]

800005a8 <readyQueueExtract>:
	@brief Extracts the given task from the ready queue by its priority.
	@param th Task structure (tcb structure).
	@return A status code (1 - queue is empty after extraction, 0 - otherwise).
*/
int readyQueueExtract(ROSA_taskHandle_t pth)
{
800005a8:	eb cd 40 80 	pushm	r7,lr
800005ac:	1a 97       	mov	r7,sp
800005ae:	20 4d       	sub	sp,16
800005b0:	ef 4c ff f0 	st.w	r7[-16],r12
	ROSA_taskHandle_t thTmp;
	uint8_t priority;
	int retval;
	
	priority = pth->priority;
800005b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800005b8:	f1 38 00 64 	ld.ub	r8,r8[100]
800005bc:	ef 68 ff fb 	st.b	r7[-5],r8
	thTmp = PA[priority];
800005c0:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800005c4:	4a 28       	lddpc	r8,8000064c <readyQueueExtract+0xa4>
800005c6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800005ca:	ef 48 ff f4 	st.w	r7[-12],r8
	
	/* Check whether the deleted task is the last in the queue or not */
	if (pth->nexttcb == pth) 
800005ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800005d2:	70 09       	ld.w	r9,r8[0x0]
800005d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800005d8:	10 39       	cp.w	r9,r8
800005da:	c1 11       	brne	800005fc <readyQueueExtract+0x54>
	{
		/* It's enough to extract the deleted task from the queue */
		PA[priority] = NULL;
800005dc:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800005e0:	49 b8       	lddpc	r8,8000064c <readyQueueExtract+0xa4>
800005e2:	30 0a       	mov	r10,0
800005e4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		retval = 1;
800005e8:	30 18       	mov	r8,1
800005ea:	ef 48 ff fc 	st.w	r7[-4],r8
800005ee:	c2 88       	rjmp	8000063e <readyQueueExtract+0x96>
	else 
	{
		/* Search for delete task */
		while (thTmp->nexttcb != pth) 
		{
			thTmp = thTmp->nexttcb;
800005f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800005f4:	70 08       	ld.w	r8,r8[0x0]
800005f6:	ef 48 ff f4 	st.w	r7[-12],r8
800005fa:	c0 28       	rjmp	800005fe <readyQueueExtract+0x56>
		retval = 1;
	}
	else 
	{
		/* Search for delete task */
		while (thTmp->nexttcb != pth) 
800005fc:	d7 03       	nop
800005fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000602:	70 09       	ld.w	r9,r8[0x0]
80000604:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000608:	10 39       	cp.w	r9,r8
8000060a:	cf 31       	brne	800005f0 <readyQueueExtract+0x48>
		{
			thTmp = thTmp->nexttcb;
		}
		
		/* Check whether the PA[priority] points to the deleted task or not */
		if (PA[priority] == pth)
8000060c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000610:	48 f8       	lddpc	r8,8000064c <readyQueueExtract+0xa4>
80000612:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000616:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000061a:	10 39       	cp.w	r9,r8
8000061c:	c0 81       	brne	8000062c <readyQueueExtract+0x84>
		{
			/* Move PA[priority] pointer to the previous task in the queue */ 
			PA[priority] = thTmp;
8000061e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000622:	48 b8       	lddpc	r8,8000064c <readyQueueExtract+0xa4>
80000624:	ee fa ff f4 	ld.w	r10,r7[-12]
80000628:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		}
		
		thTmp->nexttcb = pth->nexttcb;
8000062c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000630:	70 09       	ld.w	r9,r8[0x0]
80000632:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000636:	91 09       	st.w	r8[0x0],r9
		
		retval = 0;
80000638:	30 08       	mov	r8,0
8000063a:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return retval;
8000063e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80000642:	10 9c       	mov	r12,r8
80000644:	2f cd       	sub	sp,-16
80000646:	e3 cd 80 80 	ldm	sp++,r7,pc
8000064a:	00 00       	add	r0,r0
8000064c:	00 00       	add	r0,r0
8000064e:	05 f4       	ld.ub	r4,r2[0x7]

80000650 <readyQueueSearch>:
/** @fn int readyQueueSearch(void)
	@brief Search for the first non-empty highest priority queue.
	@return Pointer to the last tcb in the queue (in other words - PA[i]).
*/
ROSA_taskHandle_t readyQueueSearch(void)
{
80000650:	eb cd 40 80 	pushm	r7,lr
80000654:	1a 97       	mov	r7,sp
80000656:	20 2d       	sub	sp,8
	int i = MAXNPRIO;
80000658:	30 c8       	mov	r8,12
8000065a:	ef 48 ff f8 	st.w	r7[-8],r8
	tcb * rettcb;
	
	/* Search for the first non-empty queue. */
	while ( (PA[--i] == NULL) && (i > 0))
8000065e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000662:	20 18       	sub	r8,1
80000664:	ef 48 ff f8 	st.w	r7[-8],r8
80000668:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000066c:	49 48       	lddpc	r8,800006bc <readyQueueSearch+0x6c>
8000066e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000672:	58 08       	cp.w	r8,0
80000674:	c0 61       	brne	80000680 <readyQueueSearch+0x30>
80000676:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000067a:	58 08       	cp.w	r8,0
8000067c:	fe 99 ff f1 	brgt	8000065e <readyQueueSearch+0xe>
	{
		;
	}
		
	/* Check the PA for emptiness. */
	if ((i == 0) && (PA[i] == NULL))
80000680:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000684:	58 08       	cp.w	r8,0
80000686:	c0 d1       	brne	800006a0 <readyQueueSearch+0x50>
80000688:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000068c:	48 c8       	lddpc	r8,800006bc <readyQueueSearch+0x6c>
8000068e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000692:	58 08       	cp.w	r8,0
80000694:	c0 61       	brne	800006a0 <readyQueueSearch+0x50>
	{
		rettcb = IDLETASK;
80000696:	48 b8       	lddpc	r8,800006c0 <readyQueueSearch+0x70>
80000698:	70 08       	ld.w	r8,r8[0x0]
8000069a:	ef 48 ff fc 	st.w	r7[-4],r8
	{
		;
	}
		
	/* Check the PA for emptiness. */
	if ((i == 0) && (PA[i] == NULL))
8000069e:	c0 88       	rjmp	800006ae <readyQueueSearch+0x5e>
	{
		rettcb = IDLETASK;
	}
	else
	{
		rettcb = PA[i];
800006a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800006a4:	48 68       	lddpc	r8,800006bc <readyQueueSearch+0x6c>
800006a6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800006aa:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return rettcb;
800006ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800006b2:	10 9c       	mov	r12,r8
800006b4:	2f ed       	sub	sp,-8
800006b6:	e3 cd 80 80 	ldm	sp++,r7,pc
800006ba:	00 00       	add	r0,r0
800006bc:	00 00       	add	r0,r0
800006be:	05 f4       	ld.ub	r4,r2[0x7]
800006c0:	00 00       	add	r0,r0
800006c2:	05 ec       	ld.ub	r12,r2[0x6]

800006c4 <ROSA_init>:

void ROSA_init(void)
{	
800006c4:	eb cd 40 80 	pushm	r7,lr
800006c8:	1a 97       	mov	r7,sp
800006ca:	20 1d       	sub	sp,4
	int i = 0;
800006cc:	30 08       	mov	r8,0
800006ce:	ef 48 ff fc 	st.w	r7[-4],r8
	systemTick = 0;
800006d2:	4a 6a       	lddpc	r10,80000768 <ROSA_init+0xa4>
800006d4:	30 08       	mov	r8,0
800006d6:	30 09       	mov	r9,0
800006d8:	f4 e9 00 00 	st.d	r10[0],r8

	if (ROSA_INIT_GUARD == 0)
800006dc:	4a 48       	lddpc	r8,8000076c <ROSA_init+0xa8>
800006de:	70 08       	ld.w	r8,r8[0x0]
800006e0:	58 08       	cp.w	r8,0
800006e2:	c3 d1       	brne	8000075c <ROSA_init+0x98>
	{
		//Do initialization of I/O drivers
		ledInit();									//LEDs
800006e4:	f0 1f 00 23 	mcall	80000770 <ROSA_init+0xac>
		buttonInit();								//Buttons
800006e8:	f0 1f 00 23 	mcall	80000774 <ROSA_init+0xb0>
		joystickInit();								//Joystick
800006ec:	f0 1f 00 23 	mcall	80000778 <ROSA_init+0xb4>
		potInit();									//Potentiometer
800006f0:	f0 1f 00 23 	mcall	8000077c <ROSA_init+0xb8>
		usartInit(USART, &usart_options, FOSC0);	//Serial communication
800006f4:	e0 6a 1b 00 	mov	r10,6912
800006f8:	ea 1a 00 b7 	orh	r10,0xb7
800006fc:	4a 1b       	lddpc	r11,80000780 <ROSA_init+0xbc>
800006fe:	fe 7c 14 00 	mov	r12,-60416
80000702:	f0 1f 00 21 	mcall	80000784 <ROSA_init+0xc0>

		interruptInit();
80000706:	f0 1f 00 21 	mcall	80000788 <ROSA_init+0xc4>
		interruptEnable();
8000070a:	f0 1f 00 21 	mcall	8000078c <ROSA_init+0xc8>
		timerInit(1);
8000070e:	30 1c       	mov	r12,1
80000710:	f0 1f 00 20 	mcall	80000790 <ROSA_init+0xcc>
		timerStart();
80000714:	f0 1f 00 20 	mcall	80000794 <ROSA_init+0xd0>
	
		//Start with empty TCBLIST and no EXECTASK.
		TCBLIST = NULL;
80000718:	4a 08       	lddpc	r8,80000798 <ROSA_init+0xd4>
8000071a:	30 09       	mov	r9,0
8000071c:	91 09       	st.w	r8[0x0],r9
		EXECTASK = NULL;
8000071e:	4a 08       	lddpc	r8,8000079c <ROSA_init+0xd8>
80000720:	30 09       	mov	r9,0
80000722:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
80000724:	49 f8       	lddpc	r8,800007a0 <ROSA_init+0xdc>
80000726:	30 09       	mov	r9,0
80000728:	91 09       	st.w	r8[0x0],r9
		LOCKEDSEMAPHORELIST=NULL;
8000072a:	49 f8       	lddpc	r8,800007a4 <ROSA_init+0xe0>
8000072c:	30 09       	mov	r9,0
8000072e:	91 09       	st.w	r8[0x0],r9
	
		/* Create idle task. */
		idleCreate();
80000730:	f0 1f 00 1e 	mcall	800007a8 <ROSA_init+0xe4>
	
		for (i = 0; i < MAXNPRIO; i++) {
80000734:	30 08       	mov	r8,0
80000736:	ef 48 ff fc 	st.w	r7[-4],r8
8000073a:	c0 c8       	rjmp	80000752 <ROSA_init+0x8e>
			PA[i] = NULL;
8000073c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000740:	49 b8       	lddpc	r8,800007ac <ROSA_init+0xe8>
80000742:	30 0a       	mov	r10,0
80000744:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		LOCKEDSEMAPHORELIST=NULL;
	
		/* Create idle task. */
		idleCreate();
	
		for (i = 0; i < MAXNPRIO; i++) {
80000748:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000074c:	2f f8       	sub	r8,-1
8000074e:	ef 48 ff fc 	st.w	r7[-4],r8
80000752:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000756:	58 b8       	cp.w	r8,11
80000758:	fe 9a ff f2 	brle	8000073c <ROSA_init+0x78>
			PA[i] = NULL;
		}
	}
	
	ROSA_INIT_GUARD = 1;
8000075c:	48 48       	lddpc	r8,8000076c <ROSA_init+0xa8>
8000075e:	30 19       	mov	r9,1
80000760:	91 09       	st.w	r8[0x0],r9
}
80000762:	2f fd       	sub	sp,-4
80000764:	e3 cd 80 80 	ldm	sp++,r7,pc
80000768:	00 00       	add	r0,r0
8000076a:	06 a8       	st.w	r3++,r8
8000076c:	00 00       	add	r0,r0
8000076e:	06 2c       	rsub	r12,r3
80000770:	80 00       	ld.sh	r0,r0[0x0]
80000772:	10 e4       	st.h	--r8,r4
80000774:	80 00       	ld.sh	r0,r0[0x0]
80000776:	0f 08       	ld.w	r8,r7++
80000778:	80 00       	ld.sh	r0,r0[0x0]
8000077a:	0f 30       	ld.ub	r0,r7++
8000077c:	80 00       	ld.sh	r0,r0[0x0]
8000077e:	11 b0       	ld.ub	r0,r8[0x3]
80000780:	80 00       	ld.sh	r0,r0[0x0]
80000782:	04 a4       	st.w	r2++,r4
80000784:	80 00       	ld.sh	r0,r0[0x0]
80000786:	13 64       	ld.uh	r4,--r9
80000788:	80 00       	ld.sh	r0,r0[0x0]
8000078a:	21 48       	sub	r8,20
8000078c:	80 00       	ld.sh	r0,r0[0x0]
8000078e:	21 6a       	sub	r10,22
80000790:	80 00       	ld.sh	r0,r0[0x0]
80000792:	15 34       	ld.ub	r4,r10++
80000794:	80 00       	ld.sh	r0,r0[0x0]
80000796:	15 62       	ld.uh	r2,--r10
80000798:	00 00       	add	r0,r0
8000079a:	05 f0       	ld.ub	r0,r2[0x7]
8000079c:	00 00       	add	r0,r0
8000079e:	06 28       	rsub	r8,r3
800007a0:	00 00       	add	r0,r0
800007a2:	06 24       	rsub	r4,r3
800007a4:	00 00       	add	r0,r0
800007a6:	05 d0       	ld.ub	r0,r2[0x5]
800007a8:	80 00       	ld.sh	r0,r0[0x0]
800007aa:	04 dc       	st.w	--r2,r12
800007ac:	00 00       	add	r0,r0
800007ae:	05 f4       	ld.ub	r4,r2[0x7]

800007b0 <ROSA_tcbCreate>:

void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
800007b0:	eb cd 40 80 	pushm	r7,lr
800007b4:	1a 97       	mov	r7,sp
800007b6:	20 6d       	sub	sp,24
800007b8:	ef 4c ff f8 	st.w	r7[-8],r12
800007bc:	ef 4b ff f4 	st.w	r7[-12],r11
800007c0:	ef 4a ff f0 	st.w	r7[-16],r10
800007c4:	ef 49 ff ec 	st.w	r7[-20],r9
800007c8:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800007cc:	30 08       	mov	r8,0
800007ce:	ef 48 ff fc 	st.w	r7[-4],r8
800007d2:	c1 48       	rjmp	800007fa <ROSA_tcbCreate+0x4a>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
800007d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800007d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007dc:	ee fa ff f4 	ld.w	r10,r7[-12]
800007e0:	f4 08 00 08 	add	r8,r10,r8
800007e4:	11 88       	ld.ub	r8,r8[0x0]
800007e6:	ee fa ff f8 	ld.w	r10,r7[-8]
800007ea:	f4 09 00 09 	add	r9,r10,r9
800007ee:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800007f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007f4:	2f f8       	sub	r8,-1
800007f6:	ef 48 ff fc 	st.w	r7[-4],r8
800007fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007fe:	58 38       	cp.w	r8,3
80000800:	fe 9a ff ea 	brle	800007d4 <ROSA_tcbCreate+0x24>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
80000804:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000808:	30 09       	mov	r9,0
8000080a:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
8000080c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000810:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000814:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
80000816:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000081a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000081e:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
80000820:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000824:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000828:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
8000082a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000082e:	a3 68       	lsl	r8,0x2
80000830:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000834:	10 09       	add	r9,r8
80000836:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000083a:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
8000083c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000840:	70 39       	ld.w	r9,r8[0xc]
80000842:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000846:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
80000848:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000084c:	fc 19 00 1c 	movh	r9,0x1c
80000850:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
80000852:	ee fc ff f8 	ld.w	r12,r7[-8]
80000856:	f0 1f 00 03 	mcall	80000860 <ROSA_tcbCreate+0xb0>
}
8000085a:	2f ad       	sub	sp,-24
8000085c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000860:	80 00       	ld.sh	r0,r0[0x0]
80000862:	09 b6       	ld.ub	r6,r4[0x3]

80000864 <ROSA_taskCreate>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

int16_t ROSA_taskCreate(ROSA_taskHandle_t * pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
80000864:	eb cd 40 80 	pushm	r7,lr
80000868:	1a 97       	mov	r7,sp
8000086a:	20 6d       	sub	sp,24
8000086c:	ef 4c ff f8 	st.w	r7[-8],r12
80000870:	ef 4b ff f4 	st.w	r7[-12],r11
80000874:	ef 4a ff f0 	st.w	r7[-16],r10
80000878:	ef 49 ff ec 	st.w	r7[-20],r9
8000087c:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) calloc(stackSize, sizeof(uint32_t)); 
80000880:	30 4b       	mov	r11,4
80000882:	ee fc ff ec 	ld.w	r12,r7[-20]
80000886:	f0 1f 00 38 	mcall	80000964 <ROSA_taskCreate+0x100>
8000088a:	18 98       	mov	r8,r12
8000088c:	ef 48 ff fc 	st.w	r7[-4],r8
	ASSERT_MEM_ALLOC(tcbStack);
80000890:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000894:	58 08       	cp.w	r8,0
80000896:	c0 31       	brne	8000089c <ROSA_taskCreate+0x38>
80000898:	3f f8       	mov	r8,-1
8000089a:	c6 08       	rjmp	8000095a <ROSA_taskCreate+0xf6>
		
	*pth = (ROSA_taskHandle_t) calloc(1, sizeof(tcb));
8000089c:	37 4b       	mov	r11,116
8000089e:	30 1c       	mov	r12,1
800008a0:	f0 1f 00 31 	mcall	80000964 <ROSA_taskCreate+0x100>
800008a4:	18 98       	mov	r8,r12
800008a6:	10 99       	mov	r9,r8
800008a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008ac:	91 09       	st.w	r8[0x0],r9
	ASSERT_MEM_ALLOC(*pth);
800008ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008b2:	70 08       	ld.w	r8,r8[0x0]
800008b4:	58 08       	cp.w	r8,0
800008b6:	c0 31       	brne	800008bc <ROSA_taskCreate+0x58>
800008b8:	3f f8       	mov	r8,-1
800008ba:	c5 08       	rjmp	8000095a <ROSA_taskCreate+0xf6>

	if (priority > MAXNPRIO - 1)
800008bc:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800008c0:	30 b8       	mov	r8,11
800008c2:	f0 09 18 00 	cp.b	r9,r8
800008c6:	e0 88 00 04 	brls	800008ce <ROSA_taskCreate+0x6a>
	{
		return -1;
800008ca:	3f f8       	mov	r8,-1
800008cc:	c4 78       	rjmp	8000095a <ROSA_taskCreate+0xf6>
	}

	(*pth)->priority = priority;
800008ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008d2:	70 09       	ld.w	r9,r8[0x0]
800008d4:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800008d8:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
800008dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008e0:	70 0a       	ld.w	r10,r8[0x0]
800008e2:	30 08       	mov	r8,0
800008e4:	30 09       	mov	r9,0
800008e6:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
800008ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008ee:	70 09       	ld.w	r9,r8[0x0]
800008f0:	30 08       	mov	r8,0
800008f2:	f3 68 00 70 	st.b	r9[112],r8
	(*pth)->originalPriority = priority;
800008f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008fa:	70 09       	ld.w	r9,r8[0x0]
800008fc:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80000900:	f3 68 00 71 	st.b	r9[113],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
80000904:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000908:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000090c:	72 0c       	ld.w	r12,r9[0x0]
8000090e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000912:	ee fa ff f0 	ld.w	r10,r7[-16]
80000916:	ee fb ff f4 	ld.w	r11,r7[-12]
8000091a:	f0 1f 00 14 	mcall	80000968 <ROSA_taskCreate+0x104>
	
	readyQueueInsert(*pth);
8000091e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000922:	70 08       	ld.w	r8,r8[0x0]
80000924:	10 9c       	mov	r12,r8
80000926:	f0 1f 00 12 	mcall	8000096c <ROSA_taskCreate+0x108>
	
	if (EXECTASK != NULL) {
8000092a:	49 28       	lddpc	r8,80000970 <ROSA_taskCreate+0x10c>
8000092c:	70 08       	ld.w	r8,r8[0x0]
8000092e:	58 08       	cp.w	r8,0
80000930:	c1 40       	breq	80000958 <ROSA_taskCreate+0xf4>
		if (EXECTASK->priority < priority) {
80000932:	49 08       	lddpc	r8,80000970 <ROSA_taskCreate+0x10c>
80000934:	70 08       	ld.w	r8,r8[0x0]
80000936:	f1 38 00 64 	ld.ub	r8,r8[100]
8000093a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000093e:	f0 09 18 00 	cp.b	r9,r8
80000942:	e0 88 00 0b 	brls	80000958 <ROSA_taskCreate+0xf4>
			PREEMPTASK = PA[priority];
80000946:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000094a:	48 b8       	lddpc	r8,80000974 <ROSA_taskCreate+0x110>
8000094c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000950:	48 a8       	lddpc	r8,80000978 <ROSA_taskCreate+0x114>
80000952:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
80000954:	f0 1f 00 0a 	mcall	8000097c <ROSA_taskCreate+0x118>
		}	
	}
	
	return 0;
80000958:	30 08       	mov	r8,0
}
8000095a:	10 9c       	mov	r12,r8
8000095c:	2f ad       	sub	sp,-24
8000095e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000962:	00 00       	add	r0,r0
80000964:	80 00       	ld.sh	r0,r0[0x0]
80000966:	16 6c       	and	r12,r11
80000968:	80 00       	ld.sh	r0,r0[0x0]
8000096a:	07 b0       	ld.ub	r0,r3[0x3]
8000096c:	80 00       	ld.sh	r0,r0[0x0]
8000096e:	05 14       	ld.sh	r4,r2++
80000970:	00 00       	add	r0,r0
80000972:	06 28       	rsub	r8,r3
80000974:	00 00       	add	r0,r0
80000976:	05 f4       	ld.ub	r4,r2[0x7]
80000978:	00 00       	add	r0,r0
8000097a:	06 24       	rsub	r4,r3
8000097c:	80 00       	ld.sh	r0,r0[0x0]
8000097e:	0a 42       	or	r2,r5

80000980 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80000980:	4b 5c       	lddpc	r12,80000a54 <_yield+0xa>
	lda.w r11,EXECTASK
80000982:	4b 6b       	lddpc	r11,80000a58 <_yield+0xe>
	ld.w r12,r12[0x0]
80000984:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
80000986:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000988:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
8000098a:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
8000098c:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000990:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
80000992:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
80000994:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
80000996:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
8000099a:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
8000099c:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
8000099e:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
800009a0:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
800009a2:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
800009a4:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
800009a6:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
800009a8:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
800009aa:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
800009ac:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
800009ae:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
800009b0:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
800009b2:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
800009b4:	1c 9f       	mov	pc,lr

800009b6 <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
800009b6:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
800009b8:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
800009ba:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
800009bc:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
800009c0:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
800009c4:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
800009c8:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
800009cc:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
800009d0:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
800009d4:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
800009d8:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
800009dc:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
800009e0:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
800009e2:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
800009e4:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
800009e6:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
800009e8:	1c 9f       	mov	pc,lr

800009ea <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
800009ea:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
800009ec:	49 bc       	lddpc	r12,80000a58 <_yield+0xe>
	ld.w r12,r12[0x0]
800009ee:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
800009f0:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
800009f2:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
800009f4:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
800009f6:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
800009f8:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
800009fa:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
800009fc:	33 40       	mov	r0,52
	add r0,r12
800009fe:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000a00:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80000a04:	1a 90       	mov	r0,sp
	st.w --sp,r0
80000a06:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80000a08:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
80000a0c:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
80000a0e:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80000a10:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
80000a12:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
80000a14:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
80000a16:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80000a18:	1c 9f       	mov	pc,lr

80000a1a <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000a1a:	49 0c       	lddpc	r12,80000a58 <_yield+0xe>
	ld.w r12,r12[0x0]
80000a1c:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
80000a1e:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000a20:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
80000a22:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
80000a26:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80000a28:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80000a2a:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
80000a2c:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80000a2e:	33 40       	mov	r0,52
	add r0,r12
80000a30:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80000a32:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80000a36:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000a38:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80000a3a:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80000a3c:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000a3e:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80000a40:	d6 13       	rets

80000a42 <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
80000a42:	d4 01       	pushm	lr
	lda.w lr,_yield
80000a44:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000a48:	d7 33       	scall

80000a4a <_yield>:
_yield:
	call contextSave
80000a4a:	cd 0f       	rcall	800009ea <contextSave>
	call scheduler
80000a4c:	f0 1f 00 04 	mcall	80000a5c <_yield+0x12>
	call contextRestore
80000a50:	ce 5f       	rcall	80000a1a <contextRestore>
80000a52:	00 00       	add	r0,r0
80000a54:	00 00       	add	r0,r0
80000a56:	05 f0       	ld.ub	r0,r2[0x7]
80000a58:	00 00       	add	r0,r0
80000a5a:	06 28       	rsub	r8,r3
80000a5c:	80 00       	ld.sh	r0,r0[0x0]
80000a5e:	0a 60       	and	r0,r5

80000a60 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000a60:	eb cd 40 80 	pushm	r7,lr
80000a64:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK == NULL) {
80000a66:	48 f8       	lddpc	r8,80000aa0 <scheduler+0x40>
80000a68:	70 08       	ld.w	r8,r8[0x0]
80000a6a:	58 08       	cp.w	r8,0
80000a6c:	c1 11       	brne	80000a8e <scheduler+0x2e>
		PA[EXECTASK->priority] = EXECTASK;
80000a6e:	48 e8       	lddpc	r8,80000aa4 <scheduler+0x44>
80000a70:	70 08       	ld.w	r8,r8[0x0]
80000a72:	f1 38 00 64 	ld.ub	r8,r8[100]
80000a76:	10 99       	mov	r9,r8
80000a78:	48 b8       	lddpc	r8,80000aa4 <scheduler+0x44>
80000a7a:	70 0a       	ld.w	r10,r8[0x0]
80000a7c:	48 b8       	lddpc	r8,80000aa8 <scheduler+0x48>
80000a7e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		EXECTASK = EXECTASK->nexttcb;
80000a82:	48 98       	lddpc	r8,80000aa4 <scheduler+0x44>
80000a84:	70 08       	ld.w	r8,r8[0x0]
80000a86:	70 09       	ld.w	r9,r8[0x0]
80000a88:	48 78       	lddpc	r8,80000aa4 <scheduler+0x44>
80000a8a:	91 09       	st.w	r8[0x0],r9
80000a8c:	c0 88       	rjmp	80000a9c <scheduler+0x3c>
	}
	else {
		EXECTASK = PREEMPTASK;
80000a8e:	48 58       	lddpc	r8,80000aa0 <scheduler+0x40>
80000a90:	70 09       	ld.w	r9,r8[0x0]
80000a92:	48 58       	lddpc	r8,80000aa4 <scheduler+0x44>
80000a94:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
80000a96:	48 38       	lddpc	r8,80000aa0 <scheduler+0x40>
80000a98:	30 09       	mov	r9,0
80000a9a:	91 09       	st.w	r8[0x0],r9
	}
}
80000a9c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000aa0:	00 00       	add	r0,r0
80000aa2:	06 24       	rsub	r4,r3
80000aa4:	00 00       	add	r0,r0
80000aa6:	06 28       	rsub	r8,r3
80000aa8:	00 00       	add	r0,r0
80000aaa:	05 f4       	ld.ub	r4,r2[0x7]

80000aac <ROSA_startScheduler>:

void ROSA_startScheduler(void)
{
80000aac:	eb cd 40 80 	pushm	r7,lr
80000ab0:	1a 97       	mov	r7,sp
80000ab2:	20 1d       	sub	sp,4
	tcb * tmp = readyQueueSearch();	
80000ab4:	f0 1f 00 0a 	mcall	80000adc <ROSA_startScheduler+0x30>
80000ab8:	18 98       	mov	r8,r12
80000aba:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if (EXECTASK == NULL)
80000abe:	48 98       	lddpc	r8,80000ae0 <ROSA_startScheduler+0x34>
80000ac0:	70 08       	ld.w	r8,r8[0x0]
80000ac2:	58 08       	cp.w	r8,0
80000ac4:	c0 81       	brne	80000ad4 <ROSA_startScheduler+0x28>
	{
		TCBLIST = tmp->nexttcb;
80000ac6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000aca:	70 09       	ld.w	r9,r8[0x0]
80000acc:	48 68       	lddpc	r8,80000ae4 <ROSA_startScheduler+0x38>
80000ace:	91 09       	st.w	r8[0x0],r9
		ROSA_start();
80000ad0:	f0 1f 00 06 	mcall	80000ae8 <ROSA_startScheduler+0x3c>
	}
}
80000ad4:	2f fd       	sub	sp,-4
80000ad6:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ada:	00 00       	add	r0,r0
80000adc:	80 00       	ld.sh	r0,r0[0x0]
80000ade:	06 50       	eor	r0,r3
80000ae0:	00 00       	add	r0,r0
80000ae2:	06 28       	rsub	r8,r3
80000ae4:	00 00       	add	r0,r0
80000ae6:	05 f0       	ld.ub	r0,r2[0x7]
80000ae8:	80 00       	ld.sh	r0,r0[0x0]
80000aea:	09 80       	ld.ub	r0,r4[0x0]

80000aec <C.32.9661>:
80000aec:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000afc <insertDelayQueue>:
/* param pth: pointer to the task to be inserted in the delay queue		*/
/* param deadline: integer with the number of ticks at which the task	*/
/* needs to be woken up													*/
/************************************************************************/
int insertDelayQueue(ROSA_taskHandle_t pth, uint64_t deadline)
{
80000afc:	eb cd 40 80 	pushm	r7,lr
80000b00:	1a 97       	mov	r7,sp
80000b02:	20 5d       	sub	sp,20
80000b04:	ef 4c ff f4 	st.w	r7[-12],r12
80000b08:	ee eb ff ec 	st.d	r7[-20],r10
	pth->delay = deadline;
80000b0c:	ee fa ff f4 	ld.w	r10,r7[-12]
80000b10:	ee e8 ff ec 	ld.d	r8,r7[-20]
80000b14:	f4 e9 00 68 	st.d	r10[104],r8
	
	if (DELAYQUEUE == NULL) {
80000b18:	4b f8       	lddpc	r8,80000c14 <insertDelayQueue+0x118>
80000b1a:	70 08       	ld.w	r8,r8[0x0]
80000b1c:	58 08       	cp.w	r8,0
80000b1e:	c0 b1       	brne	80000b34 <insertDelayQueue+0x38>
		DELAYQUEUE = pth;
80000b20:	4b d8       	lddpc	r8,80000c14 <insertDelayQueue+0x118>
80000b22:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000b26:	91 09       	st.w	r8[0x0],r9
		DELAYQUEUE->nexttcb = NULL;
80000b28:	4b b8       	lddpc	r8,80000c14 <insertDelayQueue+0x118>
80000b2a:	70 08       	ld.w	r8,r8[0x0]
80000b2c:	30 09       	mov	r9,0
80000b2e:	91 09       	st.w	r8[0x0],r9
		return 0;
80000b30:	30 08       	mov	r8,0
80000b32:	c6 c8       	rjmp	80000c0a <insertDelayQueue+0x10e>
	}
	if (DELAYQUEUE->nexttcb == NULL && DELAYQUEUE->delay > pth->delay) {
80000b34:	4b 88       	lddpc	r8,80000c14 <insertDelayQueue+0x118>
80000b36:	70 08       	ld.w	r8,r8[0x0]
80000b38:	70 08       	ld.w	r8,r8[0x0]
80000b3a:	58 08       	cp.w	r8,0
80000b3c:	c1 91       	brne	80000b6e <insertDelayQueue+0x72>
80000b3e:	4b 68       	lddpc	r8,80000c14 <insertDelayQueue+0x118>
80000b40:	70 08       	ld.w	r8,r8[0x0]
80000b42:	f0 ea 00 68 	ld.d	r10,r8[104]
80000b46:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b4a:	f0 e8 00 68 	ld.d	r8,r8[104]
80000b4e:	10 3a       	cp.w	r10,r8
80000b50:	f2 0b 13 00 	cpc	r11,r9
80000b54:	e0 88 00 0d 	brls	80000b6e <insertDelayQueue+0x72>
		pth->nexttcb = DELAYQUEUE;
80000b58:	4a f8       	lddpc	r8,80000c14 <insertDelayQueue+0x118>
80000b5a:	70 09       	ld.w	r9,r8[0x0]
80000b5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b60:	91 09       	st.w	r8[0x0],r9
		DELAYQUEUE = pth;
80000b62:	4a d8       	lddpc	r8,80000c14 <insertDelayQueue+0x118>
80000b64:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000b68:	91 09       	st.w	r8[0x0],r9
		return 0;
80000b6a:	30 08       	mov	r8,0
80000b6c:	c4 f8       	rjmp	80000c0a <insertDelayQueue+0x10e>
	}
	
	ROSA_taskHandle_t next = DELAYQUEUE;
80000b6e:	4a a8       	lddpc	r8,80000c14 <insertDelayQueue+0x118>
80000b70:	70 08       	ld.w	r8,r8[0x0]
80000b72:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_taskHandle_t * prev;

	// While the next task in the list has an earlier deadline or higher priority and an equal deadline, move down the list
	while (next->delay <= pth->delay || (next->priority >= pth->priority && next->delay == pth->delay))
80000b76:	c1 a8       	rjmp	80000baa <insertDelayQueue+0xae>
	{
		prev = &next;
80000b78:	ee c8 00 08 	sub	r8,r7,8
80000b7c:	ef 48 ff fc 	st.w	r7[-4],r8
		next = next->nexttcb;
80000b80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b84:	70 08       	ld.w	r8,r8[0x0]
80000b86:	ef 48 ff f8 	st.w	r7[-8],r8
		
		// Reach the end of the list
		if (next == NULL) {
80000b8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b8e:	58 08       	cp.w	r8,0
80000b90:	c0 d1       	brne	80000baa <insertDelayQueue+0xae>
			(*prev)->nexttcb = pth;
80000b92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b96:	70 08       	ld.w	r8,r8[0x0]
80000b98:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000b9c:	91 09       	st.w	r8[0x0],r9
			pth->nexttcb = NULL;
80000b9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ba2:	30 09       	mov	r9,0
80000ba4:	91 09       	st.w	r8[0x0],r9
			return 0;
80000ba6:	30 08       	mov	r8,0
80000ba8:	c3 18       	rjmp	80000c0a <insertDelayQueue+0x10e>
	
	ROSA_taskHandle_t next = DELAYQUEUE;
	ROSA_taskHandle_t * prev;

	// While the next task in the list has an earlier deadline or higher priority and an equal deadline, move down the list
	while (next->delay <= pth->delay || (next->priority >= pth->priority && next->delay == pth->delay))
80000baa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bae:	f0 ea 00 68 	ld.d	r10,r8[104]
80000bb2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bb6:	f0 e8 00 68 	ld.d	r8,r8[104]
80000bba:	10 3a       	cp.w	r10,r8
80000bbc:	f2 0b 13 00 	cpc	r11,r9
80000bc0:	fe 98 ff dc 	brls	80000b78 <insertDelayQueue+0x7c>
80000bc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bc8:	f1 39 00 64 	ld.ub	r9,r8[100]
80000bcc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bd0:	f1 38 00 64 	ld.ub	r8,r8[100]
80000bd4:	f0 09 18 00 	cp.b	r9,r8
80000bd8:	c0 d3       	brcs	80000bf2 <insertDelayQueue+0xf6>
80000bda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bde:	f0 ea 00 68 	ld.d	r10,r8[104]
80000be2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000be6:	f0 e8 00 68 	ld.d	r8,r8[104]
80000bea:	10 3a       	cp.w	r10,r8
80000bec:	f2 0b 13 00 	cpc	r11,r9
80000bf0:	cc 40       	breq	80000b78 <insertDelayQueue+0x7c>
			pth->nexttcb = NULL;
			return 0;
		}
	}
	
	pth->nexttcb = next;
80000bf2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bf6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bfa:	91 09       	st.w	r8[0x0],r9
	(*prev)->nexttcb = pth;
80000bfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c00:	70 08       	ld.w	r8,r8[0x0]
80000c02:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000c06:	91 09       	st.w	r8[0x0],r9
	return 0;
80000c08:	30 08       	mov	r8,0
}
80000c0a:	10 9c       	mov	r12,r8
80000c0c:	2f bd       	sub	sp,-20
80000c0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c12:	00 00       	add	r0,r0
80000c14:	00 00       	add	r0,r0
80000c16:	06 a4       	st.w	r3++,r4

80000c18 <removeDelayQueue>:
/*																		*/
/* Removes the given task from the delay queue							*/
/* Param pth: pointer to the task to be removed from the delay queue	*/
/************************************************************************/
int removeDelayQueue(ROSA_taskHandle_t pth)
{
80000c18:	eb cd 40 80 	pushm	r7,lr
80000c1c:	1a 97       	mov	r7,sp
80000c1e:	20 3d       	sub	sp,12
80000c20:	ef 4c ff f4 	st.w	r7[-12],r12
	// If there are no tasks in the delay queue, return error code -1
	if (DELAYQUEUE == NULL)
80000c24:	4a 38       	lddpc	r8,80000cb0 <removeDelayQueue+0x98>
80000c26:	70 08       	ld.w	r8,r8[0x0]
80000c28:	58 08       	cp.w	r8,0
80000c2a:	c0 31       	brne	80000c30 <removeDelayQueue+0x18>
	{
		return -1;
80000c2c:	3f f8       	mov	r8,-1
80000c2e:	c3 c8       	rjmp	80000ca6 <removeDelayQueue+0x8e>
	}
	// If there is only one task in the status queue and this is pth, remove it from the queue
	if (DELAYQUEUE == pth)
80000c30:	4a 08       	lddpc	r8,80000cb0 <removeDelayQueue+0x98>
80000c32:	70 09       	ld.w	r9,r8[0x0]
80000c34:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c38:	10 39       	cp.w	r9,r8
80000c3a:	c1 11       	brne	80000c5c <removeDelayQueue+0x44>
	{
		if (DELAYQUEUE->nexttcb == NULL)
80000c3c:	49 d8       	lddpc	r8,80000cb0 <removeDelayQueue+0x98>
80000c3e:	70 08       	ld.w	r8,r8[0x0]
80000c40:	70 08       	ld.w	r8,r8[0x0]
80000c42:	58 08       	cp.w	r8,0
80000c44:	c0 51       	brne	80000c4e <removeDelayQueue+0x36>
		{
			DELAYQUEUE = NULL; // Task was the only one in the list
80000c46:	49 b8       	lddpc	r8,80000cb0 <removeDelayQueue+0x98>
80000c48:	30 09       	mov	r9,0
80000c4a:	91 09       	st.w	r8[0x0],r9
80000c4c:	c0 68       	rjmp	80000c58 <removeDelayQueue+0x40>
			} else {
			DELAYQUEUE = pth->nexttcb;
80000c4e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c52:	70 09       	ld.w	r9,r8[0x0]
80000c54:	49 78       	lddpc	r8,80000cb0 <removeDelayQueue+0x98>
80000c56:	91 09       	st.w	r8[0x0],r9
		}
		return 0;
80000c58:	30 08       	mov	r8,0
80000c5a:	c2 68       	rjmp	80000ca6 <removeDelayQueue+0x8e>
	}
	// Else, find the task before pth and point it to the task after pth, removing it
	ROSA_taskHandle_t next = DELAYQUEUE;
80000c5c:	49 58       	lddpc	r8,80000cb0 <removeDelayQueue+0x98>
80000c5e:	70 08       	ld.w	r8,r8[0x0]
80000c60:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_taskHandle_t prev;
	while (next != pth)
80000c64:	c1 08       	rjmp	80000c84 <removeDelayQueue+0x6c>
	{
		prev = next;
80000c66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c6a:	ef 48 ff fc 	st.w	r7[-4],r8
		next = next->nexttcb;
80000c6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c72:	70 08       	ld.w	r8,r8[0x0]
80000c74:	ef 48 ff f8 	st.w	r7[-8],r8
		if(next == NULL)
80000c78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c7c:	58 08       	cp.w	r8,0
80000c7e:	c0 31       	brne	80000c84 <removeDelayQueue+0x6c>
		{
			return -1; //Task is not in the list, so return error code -1
80000c80:	3f f8       	mov	r8,-1
80000c82:	c1 28       	rjmp	80000ca6 <removeDelayQueue+0x8e>
		return 0;
	}
	// Else, find the task before pth and point it to the task after pth, removing it
	ROSA_taskHandle_t next = DELAYQUEUE;
	ROSA_taskHandle_t prev;
	while (next != pth)
80000c84:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c88:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c8c:	10 39       	cp.w	r9,r8
80000c8e:	ce c1       	brne	80000c66 <removeDelayQueue+0x4e>
		if(next == NULL)
		{
			return -1; //Task is not in the list, so return error code -1
		}
	}
	prev->nexttcb = next->nexttcb;
80000c90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c94:	70 09       	ld.w	r9,r8[0x0]
80000c96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c9a:	91 09       	st.w	r8[0x0],r9
	next->nexttcb = NULL;
80000c9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ca0:	30 09       	mov	r9,0
80000ca2:	91 09       	st.w	r8[0x0],r9
	return 0;
80000ca4:	30 08       	mov	r8,0
}
80000ca6:	10 9c       	mov	r12,r8
80000ca8:	2f dd       	sub	sp,-12
80000caa:	e3 cd 80 80 	ldm	sp++,r7,pc
80000cae:	00 00       	add	r0,r0
80000cb0:	00 00       	add	r0,r0
80000cb2:	06 a4       	st.w	r3++,r4

80000cb4 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000cb4:	eb cd 40 80 	pushm	r7,lr
80000cb8:	1a 97       	mov	r7,sp
80000cba:	20 5d       	sub	sp,20
	interruptDisable();
80000cbc:	f0 1f 00 3c 	mcall	80000dac <timerISR+0xf8>
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000cc0:	fe 78 38 00 	mov	r8,-51200
80000cc4:	ef 48 ff f0 	st.w	r7[-16],r8
	ROSA_taskHandle_t tmptsk;
	ROSA_taskHandle_t tmp;
	bool interruptTask;
	
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000cc8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ccc:	70 88       	ld.w	r8,r8[0x20]
80000cce:	ef 48 ff ec 	st.w	r7[-20],r8
	if (sr & AVR32_TC_CPCS_MASK)
80000cd2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000cd6:	e2 18 00 10 	andl	r8,0x10,COH
80000cda:	c6 20       	breq	80000d9e <timerISR+0xea>
	{
		systemTick++;
80000cdc:	4b 58       	lddpc	r8,80000db0 <timerISR+0xfc>
80000cde:	f0 ea 00 00 	ld.d	r10,r8[0]
80000ce2:	30 18       	mov	r8,1
80000ce4:	30 09       	mov	r9,0
80000ce6:	f4 08 00 08 	add	r8,r10,r8
80000cea:	f6 09 00 49 	adc	r9,r11,r9
80000cee:	4b 1a       	lddpc	r10,80000db0 <timerISR+0xfc>
80000cf0:	f4 e9 00 00 	st.d	r10[0],r8
		interruptTask = false;
80000cf4:	30 08       	mov	r8,0
80000cf6:	ef 68 ff ff 	st.b	r7[-1],r8
		
		while (DELAYQUEUE != NULL && DELAYQUEUE->delay <= systemTick)
80000cfa:	c1 78       	rjmp	80000d28 <timerISR+0x74>
		{
			tmptsk = DELAYQUEUE;
80000cfc:	4a e8       	lddpc	r8,80000db4 <timerISR+0x100>
80000cfe:	70 08       	ld.w	r8,r8[0x0]
80000d00:	ef 48 ff f4 	st.w	r7[-12],r8
			removeDelayQueue(DELAYQUEUE);
80000d04:	4a c8       	lddpc	r8,80000db4 <timerISR+0x100>
80000d06:	70 08       	ld.w	r8,r8[0x0]
80000d08:	10 9c       	mov	r12,r8
80000d0a:	f0 1f 00 2c 	mcall	80000db8 <timerISR+0x104>
			tmptsk->delay = 0;
80000d0e:	ee fa ff f4 	ld.w	r10,r7[-12]
80000d12:	30 08       	mov	r8,0
80000d14:	30 09       	mov	r9,0
80000d16:	f4 e9 00 68 	st.d	r10[104],r8
			readyQueueInsert(tmptsk);
80000d1a:	ee fc ff f4 	ld.w	r12,r7[-12]
80000d1e:	f0 1f 00 28 	mcall	80000dbc <timerISR+0x108>
			interruptTask = true;
80000d22:	30 18       	mov	r8,1
80000d24:	ef 68 ff ff 	st.b	r7[-1],r8
	if (sr & AVR32_TC_CPCS_MASK)
	{
		systemTick++;
		interruptTask = false;
		
		while (DELAYQUEUE != NULL && DELAYQUEUE->delay <= systemTick)
80000d28:	4a 38       	lddpc	r8,80000db4 <timerISR+0x100>
80000d2a:	70 08       	ld.w	r8,r8[0x0]
80000d2c:	58 08       	cp.w	r8,0
80000d2e:	c0 d0       	breq	80000d48 <timerISR+0x94>
80000d30:	4a 18       	lddpc	r8,80000db4 <timerISR+0x100>
80000d32:	70 08       	ld.w	r8,r8[0x0]
80000d34:	f0 ea 00 68 	ld.d	r10,r8[104]
80000d38:	49 e8       	lddpc	r8,80000db0 <timerISR+0xfc>
80000d3a:	f0 e8 00 00 	ld.d	r8,r8[0]
80000d3e:	10 3a       	cp.w	r10,r8
80000d40:	f2 0b 13 00 	cpc	r11,r9
80000d44:	fe 98 ff dc 	brls	80000cfc <timerISR+0x48>
			removeDelayQueue(DELAYQUEUE);
			tmptsk->delay = 0;
			readyQueueInsert(tmptsk);
			interruptTask = true;
		}
		if (interruptTask)
80000d48:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000d4c:	30 08       	mov	r8,0
80000d4e:	f0 09 18 00 	cp.b	r9,r8
80000d52:	c2 60       	breq	80000d9e <timerISR+0xea>
		{
			tmp = readyQueueSearch();
80000d54:	f0 1f 00 1b 	mcall	80000dc0 <timerISR+0x10c>
80000d58:	18 98       	mov	r8,r12
80000d5a:	ef 48 ff f8 	st.w	r7[-8],r8
			if(EXECTASK != IDLETASK)
80000d5e:	49 a8       	lddpc	r8,80000dc4 <timerISR+0x110>
80000d60:	70 09       	ld.w	r9,r8[0x0]
80000d62:	49 a8       	lddpc	r8,80000dc8 <timerISR+0x114>
80000d64:	70 08       	ld.w	r8,r8[0x0]
80000d66:	10 39       	cp.w	r9,r8
80000d68:	c1 40       	breq	80000d90 <timerISR+0xdc>
			{
				if (EXECTASK->priority < tmp->priority)
80000d6a:	49 78       	lddpc	r8,80000dc4 <timerISR+0x110>
80000d6c:	70 08       	ld.w	r8,r8[0x0]
80000d6e:	f1 39 00 64 	ld.ub	r9,r8[100]
80000d72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d76:	f1 38 00 64 	ld.ub	r8,r8[100]
80000d7a:	f0 09 18 00 	cp.b	r9,r8
80000d7e:	c1 02       	brcc	80000d9e <timerISR+0xea>
				{
				PREEMPTASK = tmp->nexttcb;
80000d80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d84:	70 09       	ld.w	r9,r8[0x0]
80000d86:	49 28       	lddpc	r8,80000dcc <timerISR+0x118>
80000d88:	91 09       	st.w	r8[0x0],r9
				//interruptEnable();
				ROSA_yieldFromISR();
80000d8a:	f0 1f 00 12 	mcall	80000dd0 <timerISR+0x11c>
80000d8e:	c0 88       	rjmp	80000d9e <timerISR+0xea>
				}
			}
			else
			{
				PREEMPTASK = tmp->nexttcb;
80000d90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d94:	70 09       	ld.w	r9,r8[0x0]
80000d96:	48 e8       	lddpc	r8,80000dcc <timerISR+0x118>
80000d98:	91 09       	st.w	r8[0x0],r9
				ROSA_yieldFromISR();
80000d9a:	f0 1f 00 0e 	mcall	80000dd0 <timerISR+0x11c>
			}
			
		}
	}
	//timerClearInterrupt(); //Disabled until we know what it actually does
	interruptEnable();
80000d9e:	f0 1f 00 0e 	mcall	80000dd4 <timerISR+0x120>
}
80000da2:	2f bd       	sub	sp,-20
80000da4:	e3 cd 40 80 	ldm	sp++,r7,lr
80000da8:	d6 03       	rete
80000daa:	00 00       	add	r0,r0
80000dac:	80 00       	ld.sh	r0,r0[0x0]
80000dae:	21 66       	sub	r6,22
80000db0:	00 00       	add	r0,r0
80000db2:	06 a8       	st.w	r3++,r8
80000db4:	00 00       	add	r0,r0
80000db6:	06 a4       	st.w	r3++,r4
80000db8:	80 00       	ld.sh	r0,r0[0x0]
80000dba:	0c 18       	sub	r8,r6
80000dbc:	80 00       	ld.sh	r0,r0[0x0]
80000dbe:	05 14       	ld.sh	r4,r2++
80000dc0:	80 00       	ld.sh	r0,r0[0x0]
80000dc2:	06 50       	eor	r0,r3
80000dc4:	00 00       	add	r0,r0
80000dc6:	06 28       	rsub	r8,r3
80000dc8:	00 00       	add	r0,r0
80000dca:	05 ec       	ld.ub	r12,r2[0x6]
80000dcc:	00 00       	add	r0,r0
80000dce:	06 24       	rsub	r4,r3
80000dd0:	80 00       	ld.sh	r0,r0[0x0]
80000dd2:	04 80       	andn	r0,r2
80000dd4:	80 00       	ld.sh	r0,r0[0x0]
80000dd6:	21 6a       	sub	r10,22

80000dd8 <ROSA_getTickCount>:
/*																		*/
/* Returns the current number of system ticks, relative to start		*/
/* of the system.                                                       */
/************************************************************************/
uint64_t ROSA_getTickCount()
{
80000dd8:	eb cd 40 80 	pushm	r7,lr
80000ddc:	1a 97       	mov	r7,sp
	return systemTick;
80000dde:	48 48       	lddpc	r8,80000dec <ROSA_getTickCount+0x14>
80000de0:	f0 e8 00 00 	ld.d	r8,r8[0]
}
80000de4:	10 9a       	mov	r10,r8
80000de6:	12 9b       	mov	r11,r9
80000de8:	e3 cd 80 80 	ldm	sp++,r7,pc
80000dec:	00 00       	add	r0,r0
80000dee:	06 a8       	st.w	r3++,r8

80000df0 <ROSA_delay>:
/* ROSA_delay()															*/
/*																		*/
/* Suspends the calling task for the given number of ticks				*/
/************************************************************************/
int16_t ROSA_delay(uint64_t ticks)
{
80000df0:	eb cd 40 80 	pushm	r7,lr
80000df4:	1a 97       	mov	r7,sp
80000df6:	20 3d       	sub	sp,12
80000df8:	ee eb ff f4 	st.d	r7[-12],r10
	readyQueueExtract(EXECTASK);
80000dfc:	49 28       	lddpc	r8,80000e44 <ROSA_delay+0x54>
80000dfe:	70 08       	ld.w	r8,r8[0x0]
80000e00:	10 9c       	mov	r12,r8
80000e02:	f0 1f 00 12 	mcall	80000e48 <ROSA_delay+0x58>
	insertDelayQueue(EXECTASK, ROSA_getTickCount() + ticks);
80000e06:	f0 1f 00 12 	mcall	80000e4c <ROSA_delay+0x5c>
80000e0a:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000e0e:	f4 08 00 08 	add	r8,r10,r8
80000e12:	f6 09 00 49 	adc	r9,r11,r9
80000e16:	48 ca       	lddpc	r10,80000e44 <ROSA_delay+0x54>
80000e18:	74 0c       	ld.w	r12,r10[0x0]
80000e1a:	10 9a       	mov	r10,r8
80000e1c:	12 9b       	mov	r11,r9
80000e1e:	f0 1f 00 0d 	mcall	80000e50 <ROSA_delay+0x60>
	tcb * tmp = readyQueueSearch();
80000e22:	f0 1f 00 0d 	mcall	80000e54 <ROSA_delay+0x64>
80000e26:	18 98       	mov	r8,r12
80000e28:	ef 48 ff fc 	st.w	r7[-4],r8
	if (tmp->priority >= 0)
	{
		PREEMPTASK = tmp;
80000e2c:	48 b8       	lddpc	r8,80000e58 <ROSA_delay+0x68>
80000e2e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000e32:	91 09       	st.w	r8[0x0],r9
	} else {
		return -1;
	}
	ROSA_yield();
80000e34:	f0 1f 00 0a 	mcall	80000e5c <ROSA_delay+0x6c>
	return 0;
80000e38:	30 08       	mov	r8,0
}
80000e3a:	10 9c       	mov	r12,r8
80000e3c:	2f dd       	sub	sp,-12
80000e3e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e42:	00 00       	add	r0,r0
80000e44:	00 00       	add	r0,r0
80000e46:	06 28       	rsub	r8,r3
80000e48:	80 00       	ld.sh	r0,r0[0x0]
80000e4a:	05 a8       	ld.ub	r8,r2[0x2]
80000e4c:	80 00       	ld.sh	r0,r0[0x0]
80000e4e:	0d d8       	ld.ub	r8,r6[0x5]
80000e50:	80 00       	ld.sh	r0,r0[0x0]
80000e52:	0a fc       	st.b	--r5,r12
80000e54:	80 00       	ld.sh	r0,r0[0x0]
80000e56:	06 50       	eor	r0,r3
80000e58:	00 00       	add	r0,r0
80000e5a:	06 24       	rsub	r4,r3
80000e5c:	80 00       	ld.sh	r0,r0[0x0]
80000e5e:	0a 42       	or	r2,r5

80000e60 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80000e60:	eb cd 40 80 	pushm	r7,lr
80000e64:	1a 97       	mov	r7,sp
80000e66:	20 7d       	sub	sp,28
80000e68:	ef 4c ff e4 	st.w	r7[-28],r12
	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000e6c:	4a 48       	lddpc	r8,80000efc <timerPeriodSet+0x9c>
80000e6e:	ee ca 00 18 	sub	r10,r7,24
80000e72:	10 9b       	mov	r11,r8
80000e74:	f6 e8 00 00 	ld.d	r8,r11[0]
80000e78:	f4 e9 00 00 	st.d	r10[0],r8
80000e7c:	f6 e8 00 08 	ld.d	r8,r11[8]
80000e80:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000e84:	30 48       	mov	r8,4
80000e86:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80000e8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e8e:	20 18       	sub	r8,1
80000e90:	a3 68       	lsl	r8,0x2
80000e92:	ee 08 00 08 	add	r8,r7,r8
80000e96:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000e9a:	e0 68 1b 00 	mov	r8,6912
80000e9e:	ea 18 00 b7 	orh	r8,0xb7
80000ea2:	f0 09 0c 08 	divs	r8,r8,r9
80000ea6:	10 99       	mov	r9,r8
80000ea8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000eac:	b1 39       	mul	r9,r8
80000eae:	e0 68 4d d3 	mov	r8,19923
80000eb2:	ea 18 10 62 	orh	r8,0x1062
80000eb6:	f2 08 06 48 	mulu.d	r8,r9,r8
80000eba:	f2 08 16 06 	lsr	r8,r9,0x6
80000ebe:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80000ec2:	ee fc ff fc 	ld.w	r12,r7[-4]
80000ec6:	f0 1f 00 0f 	mcall	80000f00 <timerPeriodSet+0xa0>
	timerRCSet(rc);
80000eca:	ee fc ff f8 	ld.w	r12,r7[-8]
80000ece:	f0 1f 00 0e 	mcall	80000f04 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80000ed2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ed6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000eda:	f2 08 02 4a 	mul	r10,r9,r8
80000ede:	e0 68 9f 81 	mov	r8,40833
80000ee2:	ea 18 16 5e 	orh	r8,0x165e
80000ee6:	f4 08 04 48 	muls.d	r8,r10,r8
80000eea:	b5 49       	asr	r9,0x14
80000eec:	f4 08 14 1f 	asr	r8,r10,0x1f
80000ef0:	f2 08 01 08 	sub	r8,r9,r8
}
80000ef4:	10 9c       	mov	r12,r8
80000ef6:	2f 9d       	sub	sp,-28
80000ef8:	e3 cd 80 80 	ldm	sp++,r7,pc
80000efc:	80 00       	ld.sh	r0,r0[0x0]
80000efe:	0a ec       	st.h	--r5,r12
80000f00:	80 00       	ld.sh	r0,r0[0x0]
80000f02:	15 a8       	ld.ub	r8,r10[0x2]
80000f04:	80 00       	ld.sh	r0,r0[0x0]
80000f06:	15 92       	ld.ub	r2,r10[0x1]

80000f08 <buttonInit>:
80000f08:	eb cd 40 80 	pushm	r7,lr
80000f0c:	1a 97       	mov	r7,sp
80000f0e:	30 1b       	mov	r11,1
80000f10:	35 8c       	mov	r12,88
80000f12:	f0 1f 00 07 	mcall	80000f2c <buttonInit+0x24>
80000f16:	30 1b       	mov	r11,1
80000f18:	35 5c       	mov	r12,85
80000f1a:	f0 1f 00 05 	mcall	80000f2c <buttonInit+0x24>
80000f1e:	30 1b       	mov	r11,1
80000f20:	35 2c       	mov	r12,82
80000f22:	f0 1f 00 03 	mcall	80000f2c <buttonInit+0x24>
80000f26:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f2a:	00 00       	add	r0,r0
80000f2c:	80 00       	ld.sh	r0,r0[0x0]
80000f2e:	0f 9c       	ld.ub	r12,r7[0x1]

80000f30 <joystickInit>:
80000f30:	eb cd 40 80 	pushm	r7,lr
80000f34:	1a 97       	mov	r7,sp
80000f36:	30 1b       	mov	r11,1
80000f38:	31 bc       	mov	r12,27
80000f3a:	f0 1f 00 0b 	mcall	80000f64 <joystickInit+0x34>
80000f3e:	30 1b       	mov	r11,1
80000f40:	31 9c       	mov	r12,25
80000f42:	f0 1f 00 09 	mcall	80000f64 <joystickInit+0x34>
80000f46:	30 1b       	mov	r11,1
80000f48:	31 cc       	mov	r12,28
80000f4a:	f0 1f 00 07 	mcall	80000f64 <joystickInit+0x34>
80000f4e:	30 1b       	mov	r11,1
80000f50:	31 4c       	mov	r12,20
80000f52:	f0 1f 00 05 	mcall	80000f64 <joystickInit+0x34>
80000f56:	30 1b       	mov	r11,1
80000f58:	31 ac       	mov	r12,26
80000f5a:	f0 1f 00 03 	mcall	80000f64 <joystickInit+0x34>
80000f5e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f62:	00 00       	add	r0,r0
80000f64:	80 00       	ld.sh	r0,r0[0x0]
80000f66:	0f 9c       	ld.ub	r12,r7[0x1]

80000f68 <delay_ms>:
80000f68:	eb cd 40 80 	pushm	r7,lr
80000f6c:	1a 97       	mov	r7,sp
80000f6e:	20 2d       	sub	sp,8
80000f70:	ef 4c ff f8 	st.w	r7[-8],r12
80000f74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f78:	e0 69 04 42 	mov	r9,1090
80000f7c:	b3 38       	mul	r8,r9
80000f7e:	ef 48 ff fc 	st.w	r7[-4],r8
80000f82:	c0 68       	rjmp	80000f8e <delay_ms+0x26>
80000f84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f88:	20 18       	sub	r8,1
80000f8a:	ef 48 ff fc 	st.w	r7[-4],r8
80000f8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f92:	58 08       	cp.w	r8,0
80000f94:	cf 81       	brne	80000f84 <delay_ms+0x1c>
80000f96:	2f ed       	sub	sp,-8
80000f98:	e3 cd 80 80 	ldm	sp++,r7,pc

80000f9c <gpioInit>:
80000f9c:	eb cd 40 80 	pushm	r7,lr
80000fa0:	1a 97       	mov	r7,sp
80000fa2:	20 7d       	sub	sp,28
80000fa4:	ef 4c ff ec 	st.w	r7[-20],r12
80000fa8:	ef 4b ff e8 	st.w	r7[-24],r11
80000fac:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000fb0:	a5 58       	asr	r8,0x5
80000fb2:	ef 48 ff f4 	st.w	r7[-12],r8
80000fb6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000fba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000fbe:	ef 48 ff fc 	st.w	r7[-4],r8
80000fc2:	30 19       	mov	r9,1
80000fc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fc8:	f2 08 09 48 	lsl	r8,r9,r8
80000fcc:	ef 48 ff f8 	st.w	r7[-8],r8
80000fd0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000fd4:	a9 68       	lsl	r8,0x8
80000fd6:	e0 28 f0 00 	sub	r8,61440
80000fda:	ef 48 ff f0 	st.w	r7[-16],r8
80000fde:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000fe2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000fe6:	91 19       	st.w	r8[0x4],r9
80000fe8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000fec:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ff0:	91 69       	st.w	r8[0x18],r9
80000ff2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ff6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ffa:	91 a9       	st.w	r8[0x28],r9
80000ffc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001000:	ef 48 ff e4 	st.w	r7[-28],r8
80001004:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001008:	58 08       	cp.w	r8,0
8000100a:	c0 60       	breq	80001016 <gpioInit+0x7a>
8000100c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001010:	58 18       	cp.w	r8,1
80001012:	c0 90       	breq	80001024 <gpioInit+0x88>
80001014:	c0 f8       	rjmp	80001032 <gpioInit+0x96>
80001016:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000101a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000101e:	f1 49 00 44 	st.w	r8[68],r9
80001022:	c0 e8       	rjmp	8000103e <gpioInit+0xa2>
80001024:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001028:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000102c:	f1 49 00 48 	st.w	r8[72],r9
80001030:	c0 78       	rjmp	8000103e <gpioInit+0xa2>
80001032:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001036:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000103a:	f1 49 00 48 	st.w	r8[72],r9
8000103e:	2f 9d       	sub	sp,-28
80001040:	e3 cd 80 80 	ldm	sp++,r7,pc

80001044 <gpioClear>:
80001044:	eb cd 40 80 	pushm	r7,lr
80001048:	1a 97       	mov	r7,sp
8000104a:	20 5d       	sub	sp,20
8000104c:	ef 4c ff ec 	st.w	r7[-20],r12
80001050:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001054:	a5 58       	asr	r8,0x5
80001056:	ef 48 ff f4 	st.w	r7[-12],r8
8000105a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000105e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001062:	ef 48 ff fc 	st.w	r7[-4],r8
80001066:	30 19       	mov	r9,1
80001068:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000106c:	f2 08 09 48 	lsl	r8,r9,r8
80001070:	ef 48 ff f8 	st.w	r7[-8],r8
80001074:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001078:	a9 68       	lsl	r8,0x8
8000107a:	e0 28 f0 00 	sub	r8,61440
8000107e:	ef 48 ff f0 	st.w	r7[-16],r8
80001082:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001086:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000108a:	f1 49 00 58 	st.w	r8[88],r9
8000108e:	2f bd       	sub	sp,-20
80001090:	e3 cd 80 80 	ldm	sp++,r7,pc

80001094 <gpioSet>:
80001094:	eb cd 40 80 	pushm	r7,lr
80001098:	1a 97       	mov	r7,sp
8000109a:	20 5d       	sub	sp,20
8000109c:	ef 4c ff ec 	st.w	r7[-20],r12
800010a0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800010a4:	a5 58       	asr	r8,0x5
800010a6:	ef 48 ff f4 	st.w	r7[-12],r8
800010aa:	ee f8 ff ec 	ld.w	r8,r7[-20]
800010ae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800010b2:	ef 48 ff fc 	st.w	r7[-4],r8
800010b6:	30 19       	mov	r9,1
800010b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010bc:	f2 08 09 48 	lsl	r8,r9,r8
800010c0:	ef 48 ff f8 	st.w	r7[-8],r8
800010c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010c8:	a9 68       	lsl	r8,0x8
800010ca:	e0 28 f0 00 	sub	r8,61440
800010ce:	ef 48 ff f0 	st.w	r7[-16],r8
800010d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800010d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800010da:	f1 49 00 54 	st.w	r8[84],r9
800010de:	2f bd       	sub	sp,-20
800010e0:	e3 cd 80 80 	ldm	sp++,r7,pc

800010e4 <ledInit>:
800010e4:	eb cd 40 80 	pushm	r7,lr
800010e8:	1a 97       	mov	r7,sp
800010ea:	20 9d       	sub	sp,36
800010ec:	49 e8       	lddpc	r8,80001164 <ledInit+0x80>
800010ee:	ee cb 00 24 	sub	r11,r7,36
800010f2:	10 9a       	mov	r10,r8
800010f4:	f4 e8 00 00 	ld.d	r8,r10[0]
800010f8:	f6 e9 00 00 	st.d	r11[0],r8
800010fc:	f4 e8 00 08 	ld.d	r8,r10[8]
80001100:	f6 e9 00 08 	st.d	r11[8],r8
80001104:	f4 e8 00 10 	ld.d	r8,r10[16]
80001108:	f6 e9 00 10 	st.d	r11[16],r8
8000110c:	f4 e8 00 18 	ld.d	r8,r10[24]
80001110:	f6 e9 00 18 	st.d	r11[24],r8
80001114:	30 08       	mov	r8,0
80001116:	ef 48 ff fc 	st.w	r7[-4],r8
8000111a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000111e:	a3 68       	lsl	r8,0x2
80001120:	ee 08 00 08 	add	r8,r7,r8
80001124:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80001128:	10 9c       	mov	r12,r8
8000112a:	f0 1f 00 10 	mcall	80001168 <ledInit+0x84>
8000112e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001132:	a3 68       	lsl	r8,0x2
80001134:	ee 08 00 08 	add	r8,r7,r8
80001138:	f0 f8 ff dc 	ld.w	r8,r8[-36]
8000113c:	30 0b       	mov	r11,0
8000113e:	10 9c       	mov	r12,r8
80001140:	f0 1f 00 0b 	mcall	8000116c <ledInit+0x88>
80001144:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001148:	58 78       	cp.w	r8,7
8000114a:	5f 18       	srne	r8
8000114c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80001150:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001154:	2f f8       	sub	r8,-1
80001156:	ef 48 ff fc 	st.w	r7[-4],r8
8000115a:	58 09       	cp.w	r9,0
8000115c:	cd f1       	brne	8000111a <ledInit+0x36>
8000115e:	2f 7d       	sub	sp,-36
80001160:	e3 cd 80 80 	ldm	sp++,r7,pc
80001164:	80 00       	ld.sh	r0,r0[0x0]
80001166:	24 00       	sub	r0,64
80001168:	80 00       	ld.sh	r0,r0[0x0]
8000116a:	11 90       	ld.ub	r0,r8[0x1]
8000116c:	80 00       	ld.sh	r0,r0[0x0]
8000116e:	0f 9c       	ld.ub	r12,r7[0x1]

80001170 <ledOn>:
80001170:	eb cd 40 80 	pushm	r7,lr
80001174:	1a 97       	mov	r7,sp
80001176:	20 1d       	sub	sp,4
80001178:	ef 4c ff fc 	st.w	r7[-4],r12
8000117c:	ee fc ff fc 	ld.w	r12,r7[-4]
80001180:	f0 1f 00 03 	mcall	8000118c <ledOn+0x1c>
80001184:	2f fd       	sub	sp,-4
80001186:	e3 cd 80 80 	ldm	sp++,r7,pc
8000118a:	00 00       	add	r0,r0
8000118c:	80 00       	ld.sh	r0,r0[0x0]
8000118e:	10 44       	or	r4,r8

80001190 <ledOff>:
80001190:	eb cd 40 80 	pushm	r7,lr
80001194:	1a 97       	mov	r7,sp
80001196:	20 1d       	sub	sp,4
80001198:	ef 4c ff fc 	st.w	r7[-4],r12
8000119c:	ee fc ff fc 	ld.w	r12,r7[-4]
800011a0:	f0 1f 00 03 	mcall	800011ac <ledOff+0x1c>
800011a4:	2f fd       	sub	sp,-4
800011a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800011aa:	00 00       	add	r0,r0
800011ac:	80 00       	ld.sh	r0,r0[0x0]
800011ae:	10 94       	mov	r4,r8

800011b0 <potInit>:
800011b0:	d3 01       	pushm	r11-r12
800011b2:	e0 6c 10 00 	mov	r12,4096
800011b6:	ea 1c ff ff 	orh	r12,0xffff
800011ba:	31 6b       	mov	r11,22
800011bc:	99 2b       	st.w	r12[0x8],r11
800011be:	99 6b       	st.w	r12[0x18],r11
800011c0:	99 6b       	st.w	r12[0x18],r11
800011c2:	e0 6c 3c 00 	mov	r12,15360
800011c6:	ea 1c ff ff 	orh	r12,0xffff
800011ca:	30 1b       	mov	r11,1
800011cc:	99 0b       	st.w	r12[0x0],r11
800011ce:	e0 6b 0f 1f 	mov	r11,3871
800011d2:	b1 6b       	lsl	r11,0x10
800011d4:	99 1b       	st.w	r12[0x4],r11
800011d6:	30 2b       	mov	r11,2
800011d8:	99 4b       	st.w	r12[0x10],r11
800011da:	d3 02       	popm	r11-r12
800011dc:	1c 9f       	mov	pc,lr

800011de <potGetValue>:
800011de:	d1 81       	pushm	r10-r11
800011e0:	e0 6c 3c 00 	mov	r12,15360
800011e4:	ea 1c ff ff 	orh	r12,0xffff
800011e8:	30 2b       	mov	r11,2
800011ea:	99 0b       	st.w	r12[0x0],r11

800011ec <a1>:
800011ec:	78 7a       	ld.w	r10,r12[0x1c]
800011ee:	16 7a       	tst	r10,r11
800011f0:	cf e0       	breq	800011ec <a1>
800011f2:	78 dc       	ld.w	r12,r12[0x34]
800011f4:	d1 82       	popm	r10-r11
800011f6:	1c 9f       	mov	pc,lr

800011f8 <usartReset>:
800011f8:	eb cd 40 80 	pushm	r7,lr
800011fc:	1a 97       	mov	r7,sp
800011fe:	20 3d       	sub	sp,12
80001200:	ef 4c ff f8 	st.w	r7[-8],r12
80001204:	f0 1f 00 16 	mcall	8000125c <usartReset+0x64>
80001208:	18 98       	mov	r8,r12
8000120a:	ef 48 ff fc 	st.w	r7[-4],r8
8000120e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001212:	58 08       	cp.w	r8,0
80001214:	c0 30       	breq	8000121a <usartReset+0x22>
80001216:	f0 1f 00 13 	mcall	80001260 <usartReset+0x68>
8000121a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000121e:	3f f8       	mov	r8,-1
80001220:	93 38       	st.w	r9[0xc],r8
80001222:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001226:	70 58       	ld.w	r8,r8[0x14]
80001228:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000122c:	58 08       	cp.w	r8,0
8000122e:	c0 30       	breq	80001234 <usartReset+0x3c>
80001230:	f0 1f 00 0d 	mcall	80001264 <usartReset+0x6c>
80001234:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001238:	30 08       	mov	r8,0
8000123a:	93 18       	st.w	r9[0x4],r8
8000123c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001240:	30 08       	mov	r8,0
80001242:	93 98       	st.w	r9[0x24],r8
80001244:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001248:	30 08       	mov	r8,0
8000124a:	93 a8       	st.w	r9[0x28],r8
8000124c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001250:	ea 68 61 0c 	mov	r8,680204
80001254:	93 08       	st.w	r9[0x0],r8
80001256:	2f dd       	sub	sp,-12
80001258:	e3 cd 80 80 	ldm	sp++,r7,pc
8000125c:	80 00       	ld.sh	r0,r0[0x0]
8000125e:	21 6e       	sub	lr,22
80001260:	80 00       	ld.sh	r0,r0[0x0]
80001262:	21 66       	sub	r6,22
80001264:	80 00       	ld.sh	r0,r0[0x0]
80001266:	21 6a       	sub	r10,22

80001268 <usartSetBaudrate>:
80001268:	eb cd 40 80 	pushm	r7,lr
8000126c:	1a 97       	mov	r7,sp
8000126e:	20 bd       	sub	sp,44
80001270:	ef 4c ff ec 	st.w	r7[-20],r12
80001274:	ef 4b ff e8 	st.w	r7[-24],r11
80001278:	ef 4a ff e4 	st.w	r7[-28],r10
8000127c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001280:	f0 09 15 04 	lsl	r9,r8,0x4
80001284:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001288:	10 39       	cp.w	r9,r8
8000128a:	e0 8b 00 06 	brhi	80001296 <usartSetBaudrate+0x2e>
8000128e:	31 09       	mov	r9,16
80001290:	ef 49 ff d4 	st.w	r7[-44],r9
80001294:	c0 48       	rjmp	8000129c <usartSetBaudrate+0x34>
80001296:	30 88       	mov	r8,8
80001298:	ef 48 ff d4 	st.w	r7[-44],r8
8000129c:	ee f9 ff d4 	ld.w	r9,r7[-44]
800012a0:	ef 49 ff f0 	st.w	r7[-16],r9
800012a4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800012a8:	f0 0a 15 03 	lsl	r10,r8,0x3
800012ac:	ee f9 ff f0 	ld.w	r9,r7[-16]
800012b0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800012b4:	f2 08 02 48 	mul	r8,r9,r8
800012b8:	a1 98       	lsr	r8,0x1
800012ba:	10 0a       	add	r10,r8
800012bc:	ee f9 ff f0 	ld.w	r9,r7[-16]
800012c0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800012c4:	f2 08 02 48 	mul	r8,r9,r8
800012c8:	f4 08 0d 08 	divu	r8,r10,r8
800012cc:	ef 48 ff f4 	st.w	r7[-12],r8
800012d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800012d4:	a3 98       	lsr	r8,0x3
800012d6:	ef 48 ff f8 	st.w	r7[-8],r8
800012da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800012de:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800012e2:	ef 48 ff fc 	st.w	r7[-4],r8
800012e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012ea:	58 08       	cp.w	r8,0
800012ec:	c0 70       	breq	800012fa <usartSetBaudrate+0x92>
800012ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012f2:	e0 48 ff ff 	cp.w	r8,65535
800012f6:	e0 88 00 06 	brls	80001302 <usartSetBaudrate+0x9a>
800012fa:	30 18       	mov	r8,1
800012fc:	ef 48 ff d8 	st.w	r7[-40],r8
80001300:	c2 c8       	rjmp	80001358 <usartSetBaudrate+0xf0>
80001302:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001306:	70 18       	ld.w	r8,r8[0x4]
80001308:	10 99       	mov	r9,r8
8000130a:	e4 19 ff f7 	andh	r9,0xfff7
8000130e:	e0 19 fe cf 	andl	r9,0xfecf
80001312:	ef 49 ff dc 	st.w	r7[-36],r9
80001316:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000131a:	59 08       	cp.w	r8,16
8000131c:	c0 60       	breq	80001328 <usartSetBaudrate+0xc0>
8000131e:	e8 68 00 00 	mov	r8,524288
80001322:	ef 48 ff e0 	st.w	r7[-32],r8
80001326:	c0 48       	rjmp	8000132e <usartSetBaudrate+0xc6>
80001328:	30 09       	mov	r9,0
8000132a:	ef 49 ff e0 	st.w	r7[-32],r9
8000132e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80001332:	ee f8 ff e0 	ld.w	r8,r7[-32]
80001336:	10 49       	or	r9,r8
80001338:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000133c:	91 19       	st.w	r8[0x4],r9
8000133e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001342:	f0 09 15 10 	lsl	r9,r8,0x10
80001346:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000134a:	10 49       	or	r9,r8
8000134c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001350:	91 89       	st.w	r8[0x20],r9
80001352:	30 09       	mov	r9,0
80001354:	ef 49 ff d8 	st.w	r7[-40],r9
80001358:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000135c:	10 9c       	mov	r12,r8
8000135e:	2f 5d       	sub	sp,-44
80001360:	e3 cd 80 80 	ldm	sp++,r7,pc

80001364 <usartInit>:
80001364:	eb cd 40 80 	pushm	r7,lr
80001368:	1a 97       	mov	r7,sp
8000136a:	20 4d       	sub	sp,16
8000136c:	ef 4c ff f8 	st.w	r7[-8],r12
80001370:	ef 4b ff f4 	st.w	r7[-12],r11
80001374:	ef 4a ff f0 	st.w	r7[-16],r10
80001378:	fe 78 10 00 	mov	r8,-61440
8000137c:	ef 48 ff fc 	st.w	r7[-4],r8
80001380:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001384:	30 18       	mov	r8,1
80001386:	93 28       	st.w	r9[0x8],r8
80001388:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000138c:	30 28       	mov	r8,2
8000138e:	93 28       	st.w	r9[0x8],r8
80001390:	ee fc ff f8 	ld.w	r12,r7[-8]
80001394:	f0 1f 00 3b 	mcall	80001480 <usartInit+0x11c>
80001398:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000139c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800013a0:	70 08       	ld.w	r8,r8[0x0]
800013a2:	12 9a       	mov	r10,r9
800013a4:	10 9b       	mov	r11,r8
800013a6:	ee fc ff f8 	ld.w	r12,r7[-8]
800013aa:	f0 1f 00 37 	mcall	80001484 <usartInit+0x120>
800013ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
800013b2:	11 c9       	ld.ub	r9,r8[0x4]
800013b4:	30 98       	mov	r8,9
800013b6:	f0 09 18 00 	cp.b	r9,r8
800013ba:	c0 a1       	brne	800013ce <usartInit+0x6a>
800013bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800013c0:	70 18       	ld.w	r8,r8[0x4]
800013c2:	10 99       	mov	r9,r8
800013c4:	b1 b9       	sbr	r9,0x11
800013c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800013ca:	91 19       	st.w	r8[0x4],r9
800013cc:	c0 d8       	rjmp	800013e6 <usartInit+0x82>
800013ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800013d2:	70 19       	ld.w	r9,r8[0x4]
800013d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800013d8:	11 c8       	ld.ub	r8,r8[0x4]
800013da:	20 58       	sub	r8,5
800013dc:	a7 68       	lsl	r8,0x6
800013de:	10 49       	or	r9,r8
800013e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800013e4:	91 19       	st.w	r8[0x4],r9
800013e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800013ea:	70 1a       	ld.w	r10,r8[0x4]
800013ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800013f0:	11 d8       	ld.ub	r8,r8[0x5]
800013f2:	f0 09 15 09 	lsl	r9,r8,0x9
800013f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800013fa:	f1 38 00 08 	ld.ub	r8,r8[8]
800013fe:	af 68       	lsl	r8,0xe
80001400:	f3 e8 10 08 	or	r8,r9,r8
80001404:	f5 e8 10 09 	or	r9,r10,r8
80001408:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000140c:	91 19       	st.w	r8[0x4],r9
8000140e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001412:	90 39       	ld.sh	r9,r8[0x6]
80001414:	30 28       	mov	r8,2
80001416:	f0 09 19 00 	cp.h	r9,r8
8000141a:	e0 88 00 14 	brls	80001442 <usartInit+0xde>
8000141e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001422:	70 18       	ld.w	r8,r8[0x4]
80001424:	10 99       	mov	r9,r8
80001426:	ad b9       	sbr	r9,0xd
80001428:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000142c:	91 19       	st.w	r8[0x4],r9
8000142e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001432:	90 38       	ld.sh	r8,r8[0x6]
80001434:	5c 78       	castu.h	r8
80001436:	20 28       	sub	r8,2
80001438:	10 99       	mov	r9,r8
8000143a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000143e:	91 a9       	st.w	r8[0x28],r9
80001440:	c0 d8       	rjmp	8000145a <usartInit+0xf6>
80001442:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001446:	70 19       	ld.w	r9,r8[0x4]
80001448:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000144c:	90 38       	ld.sh	r8,r8[0x6]
8000144e:	5c 78       	castu.h	r8
80001450:	ad 68       	lsl	r8,0xc
80001452:	10 49       	or	r9,r8
80001454:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001458:	91 19       	st.w	r8[0x4],r9
8000145a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000145e:	70 18       	ld.w	r8,r8[0x4]
80001460:	10 99       	mov	r9,r8
80001462:	e0 19 ff f0 	andl	r9,0xfff0
80001466:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000146a:	91 19       	st.w	r8[0x4],r9
8000146c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001470:	35 08       	mov	r8,80
80001472:	93 08       	st.w	r9[0x0],r8
80001474:	30 08       	mov	r8,0
80001476:	10 9c       	mov	r12,r8
80001478:	2f cd       	sub	sp,-16
8000147a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000147e:	00 00       	add	r0,r0
80001480:	80 00       	ld.sh	r0,r0[0x0]
80001482:	11 f8       	ld.ub	r8,r8[0x7]
80001484:	80 00       	ld.sh	r0,r0[0x0]
80001486:	12 68       	and	r8,r9

80001488 <usartWriteChar>:
80001488:	eb cd 40 80 	pushm	r7,lr
8000148c:	1a 97       	mov	r7,sp
8000148e:	20 3d       	sub	sp,12
80001490:	ef 4c ff f8 	st.w	r7[-8],r12
80001494:	16 98       	mov	r8,r11
80001496:	ef 68 ff f4 	st.b	r7[-12],r8
8000149a:	e4 68 00 00 	mov	r8,262144
8000149e:	ef 48 ff fc 	st.w	r7[-4],r8
800014a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800014a6:	58 08       	cp.w	r8,0
800014a8:	5f 18       	srne	r8
800014aa:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800014ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800014b2:	20 18       	sub	r8,1
800014b4:	ef 48 ff fc 	st.w	r7[-4],r8
800014b8:	12 98       	mov	r8,r9
800014ba:	ec 18 00 01 	eorl	r8,0x1
800014be:	5c 58       	castu.b	r8
800014c0:	c0 71       	brne	800014ce <usartWriteChar+0x46>
800014c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014c6:	70 58       	ld.w	r8,r8[0x14]
800014c8:	e2 18 00 02 	andl	r8,0x2,COH
800014cc:	ce b0       	breq	800014a2 <usartWriteChar+0x1a>
800014ce:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800014d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014d6:	91 79       	st.w	r8[0x1c],r9
800014d8:	2f dd       	sub	sp,-12
800014da:	e3 cd 80 80 	ldm	sp++,r7,pc
800014de:	d7 03       	nop

800014e0 <usartWriteLine>:
800014e0:	eb cd 40 80 	pushm	r7,lr
800014e4:	1a 97       	mov	r7,sp
800014e6:	20 2d       	sub	sp,8
800014e8:	ef 4c ff fc 	st.w	r7[-4],r12
800014ec:	ef 4b ff f8 	st.w	r7[-8],r11
800014f0:	c1 88       	rjmp	80001520 <usartWriteLine+0x40>
800014f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014f6:	11 88       	ld.ub	r8,r8[0x0]
800014f8:	58 a8       	cp.w	r8,10
800014fa:	c0 61       	brne	80001506 <usartWriteLine+0x26>
800014fc:	30 db       	mov	r11,13
800014fe:	ee fc ff fc 	ld.w	r12,r7[-4]
80001502:	f0 1f 00 0c 	mcall	80001530 <usartWriteLine+0x50>
80001506:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000150a:	11 88       	ld.ub	r8,r8[0x0]
8000150c:	10 9b       	mov	r11,r8
8000150e:	ee fc ff fc 	ld.w	r12,r7[-4]
80001512:	f0 1f 00 08 	mcall	80001530 <usartWriteLine+0x50>
80001516:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000151a:	2f f8       	sub	r8,-1
8000151c:	ef 48 ff f8 	st.w	r7[-8],r8
80001520:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001524:	11 88       	ld.ub	r8,r8[0x0]
80001526:	58 08       	cp.w	r8,0
80001528:	ce 51       	brne	800014f2 <usartWriteLine+0x12>
8000152a:	2f ed       	sub	sp,-8
8000152c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001530:	80 00       	ld.sh	r0,r0[0x0]
80001532:	14 88       	andn	r8,r10

80001534 <timerInit>:
80001534:	d5 01       	pushm	r11,lr
80001536:	d2 01       	pushm	r12
80001538:	f0 1f 00 28 	mcall	800015d8 <timerClearInterrupt+0x10>
8000153c:	f0 1f 00 28 	mcall	800015dc <timerClearInterrupt+0x14>
80001540:	e0 6c 38 00 	mov	r12,14336
80001544:	ea 1c ff ff 	orh	r12,0xffff
80001548:	e0 6b c0 00 	mov	r11,49152
8000154c:	ea 1b 00 00 	orh	r11,0x0
80001550:	99 1b       	st.w	r12[0x4],r11
80001552:	30 1b       	mov	r11,1
80001554:	a5 6b       	lsl	r11,0x4
80001556:	99 9b       	st.w	r12[0x24],r11
80001558:	d2 02       	popm	r12
8000155a:	f0 1f 00 22 	mcall	800015e0 <timerClearInterrupt+0x18>
8000155e:	d5 02       	popm	r11,lr
80001560:	1c 9f       	mov	pc,lr

80001562 <timerReset>:
80001562:	d3 01       	pushm	r11-r12
80001564:	e0 6c 38 00 	mov	r12,14336
80001568:	ea 1c ff ff 	orh	r12,0xffff
8000156c:	30 5b       	mov	r11,5
8000156e:	99 0b       	st.w	r12[0x0],r11
80001570:	e0 6b 00 08 	mov	r11,8
80001574:	ea 1b 00 00 	orh	r11,0x0
80001578:	76 0b       	ld.w	r11,r11[0x0]
8000157a:	99 7b       	st.w	r12[0x1c],r11
8000157c:	d3 02       	popm	r11-r12
8000157e:	1c 9f       	mov	pc,lr

80001580 <timerStop>:
80001580:	d3 01       	pushm	r11-r12
80001582:	e0 6c 38 00 	mov	r12,14336
80001586:	ea 1c ff ff 	orh	r12,0xffff
8000158a:	30 2b       	mov	r11,2
8000158c:	99 0b       	st.w	r12[0x0],r11
8000158e:	d3 02       	popm	r11-r12
80001590:	1c 9f       	mov	pc,lr

80001592 <timerRCSet>:
80001592:	d3 01       	pushm	r11-r12
80001594:	49 4b       	lddpc	r11,800015e4 <timerClearInterrupt+0x1c>
80001596:	97 0c       	st.w	r11[0x0],r12
80001598:	e0 6c 38 00 	mov	r12,14336
8000159c:	ea 1c ff ff 	orh	r12,0xffff
800015a0:	76 0b       	ld.w	r11,r11[0x0]
800015a2:	99 7b       	st.w	r12[0x1c],r11
800015a4:	d3 02       	popm	r11-r12
800015a6:	1c 9f       	mov	pc,lr

800015a8 <timerPrescaleSet>:
800015a8:	d3 81       	pushm	r10-r12
800015aa:	49 0b       	lddpc	r11,800015e8 <timerClearInterrupt+0x20>
800015ac:	97 0c       	st.w	r11[0x0],r12
800015ae:	e0 6c 38 00 	mov	r12,14336
800015b2:	ea 1c ff ff 	orh	r12,0xffff
800015b6:	78 1a       	ld.w	r10,r12[0x4]
800015b8:	3f 8b       	mov	r11,-8
800015ba:	16 6a       	and	r10,r11
800015bc:	48 bb       	lddpc	r11,800015e8 <timerClearInterrupt+0x20>
800015be:	76 0b       	ld.w	r11,r11[0x0]
800015c0:	14 4b       	or	r11,r10
800015c2:	99 1b       	st.w	r12[0x4],r11
800015c4:	d3 82       	popm	r10-r12
800015c6:	1c 9f       	mov	pc,lr

800015c8 <timerClearInterrupt>:
800015c8:	d2 01       	pushm	r12
800015ca:	e0 6c 38 00 	mov	r12,14336
800015ce:	ea 1c ff ff 	orh	r12,0xffff
800015d2:	78 8c       	ld.w	r12,r12[0x20]
800015d4:	d2 02       	popm	r12
800015d6:	1c 9f       	mov	pc,lr
800015d8:	80 00       	ld.sh	r0,r0[0x0]
800015da:	21 66       	sub	r6,22
800015dc:	80 00       	ld.sh	r0,r0[0x0]
800015de:	15 c8       	ld.ub	r8,r10[0x4]
800015e0:	80 00       	ld.sh	r0,r0[0x0]
800015e2:	0e 60       	and	r0,r7
800015e4:	00 00       	add	r0,r0
800015e6:	00 08       	add	r8,r0
800015e8:	00 00       	add	r0,r0
800015ea:	00 0c       	add	r12,r0

800015ec <_stext>:
800015ec:	49 7d       	lddpc	sp,80001648 <udata_end+0x4>
800015ee:	49 80       	lddpc	r0,8000164c <udata_end+0x8>
800015f0:	1a d0       	st.w	--sp,r0
800015f2:	e5 cd 20 00 	ldmts	sp,sp
800015f6:	1b 00       	ld.w	r0,sp++
800015f8:	49 60       	lddpc	r0,80001650 <udata_end+0xc>
800015fa:	e3 b0 00 01 	mtsr	0x4,r0
800015fe:	d5 53       	csrf	0x15
80001600:	e0 6c 0c 00 	mov	r12,3072
80001604:	ea 1c ff ff 	orh	r12,0xffff
80001608:	e0 6b 01 07 	mov	r11,263
8000160c:	99 ab       	st.w	r12[0x28],r11
8000160e:	30 4b       	mov	r11,4
80001610:	99 0b       	st.w	r12[0x0],r11
80001612:	e0 6a 00 80 	mov	r10,128

80001616 <xw8>:
80001616:	79 5b       	ld.w	r11,r12[0x54]
80001618:	14 7b       	tst	r11,r10
8000161a:	cf e0       	breq	80001616 <xw8>
8000161c:	30 5b       	mov	r11,5
8000161e:	99 0b       	st.w	r12[0x0],r11

80001620 <idata_>:
80001620:	48 d0       	lddpc	r0,80001654 <udata_end+0x10>
80001622:	48 e1       	lddpc	r1,80001658 <udata_end+0x14>
80001624:	02 30       	cp.w	r0,r1
80001626:	c0 62       	brcc	80001632 <idata_end>
80001628:	48 d2       	lddpc	r2,8000165c <udata_end+0x18>

8000162a <idata_loop>:
8000162a:	05 04       	ld.w	r4,r2++
8000162c:	00 a4       	st.w	r0++,r4
8000162e:	02 30       	cp.w	r0,r1
80001630:	cf d3       	brcs	8000162a <idata_loop>

80001632 <idata_end>:
80001632:	48 c0       	lddpc	r0,80001660 <udata_end+0x1c>
80001634:	48 c1       	lddpc	r1,80001664 <udata_end+0x20>
80001636:	02 30       	cp.w	r0,r1
80001638:	c0 62       	brcc	80001644 <udata_end>
8000163a:	30 02       	mov	r2,0
8000163c:	30 03       	mov	r3,0

8000163e <udata_loop>:
8000163e:	00 a2       	st.w	r0++,r2
80001640:	02 30       	cp.w	r0,r1
80001642:	cf e3       	brcs	8000163e <udata_loop>

80001644 <udata_end>:
80001644:	48 9f       	lddpc	pc,80001668 <udata_end+0x24>
80001646:	00 00       	add	r0,r0
80001648:	00 01       	add	r1,r0
8000164a:	00 00       	add	r0,r0
8000164c:	00 00       	add	r0,r0
8000164e:	f0 00       	*unknown*
80001650:	80 00       	ld.sh	r0,r0[0x0]
80001652:	20 00       	sub	r0,0
80001654:	00 00       	add	r0,r0
80001656:	00 08       	add	r8,r0
80001658:	00 00       	add	r0,r0
8000165a:	05 18       	ld.sh	r8,r2++
8000165c:	80 00       	ld.sh	r0,r0[0x0]
8000165e:	24 88       	sub	r8,72
80001660:	00 00       	add	r0,r0
80001662:	05 18       	ld.sh	r8,r2++
80001664:	00 00       	add	r0,r0
80001666:	06 b8       	st.h	r3++,r8
80001668:	80 00       	ld.sh	r0,r0[0x0]
8000166a:	03 e8       	ld.ub	r8,r1[0x6]

8000166c <calloc>:
8000166c:	d4 01       	pushm	lr
8000166e:	48 48       	lddpc	r8,8000167c <calloc+0x10>
80001670:	16 9a       	mov	r10,r11
80001672:	18 9b       	mov	r11,r12
80001674:	70 0c       	ld.w	r12,r8[0x0]
80001676:	f0 1f 00 03 	mcall	80001680 <calloc+0x14>
8000167a:	d8 02       	popm	pc
8000167c:	00 00       	add	r0,r0
8000167e:	01 00       	ld.w	r0,r0++
80001680:	80 00       	ld.sh	r0,r0[0x0]
80001682:	16 84       	andn	r4,r11

80001684 <_calloc_r>:
80001684:	d4 21       	pushm	r4-r7,lr
80001686:	f4 0b 02 4b 	mul	r11,r10,r11
8000168a:	f0 1f 00 15 	mcall	800016dc <_calloc_r+0x58>
8000168e:	18 97       	mov	r7,r12
80001690:	c2 30       	breq	800016d6 <_calloc_r+0x52>
80001692:	f8 fa ff fc 	ld.w	r10,r12[-4]
80001696:	e0 1a ff fc 	andl	r10,0xfffc
8000169a:	20 4a       	sub	r10,4
8000169c:	e0 4a 00 24 	cp.w	r10,36
800016a0:	e0 8b 00 18 	brhi	800016d0 <_calloc_r+0x4c>
800016a4:	18 98       	mov	r8,r12
800016a6:	59 3a       	cp.w	r10,19
800016a8:	e0 88 00 0f 	brls	800016c6 <_calloc_r+0x42>
800016ac:	30 09       	mov	r9,0
800016ae:	10 a9       	st.w	r8++,r9
800016b0:	10 a9       	st.w	r8++,r9
800016b2:	59 ba       	cp.w	r10,27
800016b4:	e0 88 00 09 	brls	800016c6 <_calloc_r+0x42>
800016b8:	10 a9       	st.w	r8++,r9
800016ba:	10 a9       	st.w	r8++,r9
800016bc:	e0 4a 00 24 	cp.w	r10,36
800016c0:	c0 31       	brne	800016c6 <_calloc_r+0x42>
800016c2:	10 a9       	st.w	r8++,r9
800016c4:	10 a9       	st.w	r8++,r9
800016c6:	30 09       	mov	r9,0
800016c8:	10 a9       	st.w	r8++,r9
800016ca:	91 19       	st.w	r8[0x4],r9
800016cc:	91 09       	st.w	r8[0x0],r9
800016ce:	c0 48       	rjmp	800016d6 <_calloc_r+0x52>
800016d0:	30 0b       	mov	r11,0
800016d2:	f0 1f 00 04 	mcall	800016e0 <_calloc_r+0x5c>
800016d6:	0e 9c       	mov	r12,r7
800016d8:	d8 22       	popm	r4-r7,pc
800016da:	00 00       	add	r0,r0
800016dc:	80 00       	ld.sh	r0,r0[0x0]
800016de:	16 e4       	st.h	--r11,r4
800016e0:	80 00       	ld.sh	r0,r0[0x0]
800016e2:	1b 34       	ld.ub	r4,sp++

800016e4 <_malloc_r>:
800016e4:	d4 31       	pushm	r0-r7,lr
800016e6:	f6 c8 ff f5 	sub	r8,r11,-11
800016ea:	18 95       	mov	r5,r12
800016ec:	10 97       	mov	r7,r8
800016ee:	e0 17 ff f8 	andl	r7,0xfff8
800016f2:	59 68       	cp.w	r8,22
800016f4:	f9 b7 08 10 	movls	r7,16
800016f8:	16 37       	cp.w	r7,r11
800016fa:	5f 38       	srlo	r8
800016fc:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001700:	c0 50       	breq	8000170a <_malloc_r+0x26>
80001702:	30 c8       	mov	r8,12
80001704:	99 38       	st.w	r12[0xc],r8
80001706:	e0 8f 01 f3 	bral	80001aec <_malloc_r+0x408>
8000170a:	f0 1f 00 50 	mcall	80001848 <_malloc_r+0x164>
8000170e:	e0 47 01 f7 	cp.w	r7,503
80001712:	e0 8b 00 1c 	brhi	8000174a <_malloc_r+0x66>
80001716:	ee 03 16 03 	lsr	r3,r7,0x3
8000171a:	4c d8       	lddpc	r8,8000184c <_malloc_r+0x168>
8000171c:	f0 03 00 38 	add	r8,r8,r3<<0x3
80001720:	70 36       	ld.w	r6,r8[0xc]
80001722:	10 36       	cp.w	r6,r8
80001724:	c0 61       	brne	80001730 <_malloc_r+0x4c>
80001726:	ec c8 ff f8 	sub	r8,r6,-8
8000172a:	70 36       	ld.w	r6,r8[0xc]
8000172c:	10 36       	cp.w	r6,r8
8000172e:	c0 c0       	breq	80001746 <_malloc_r+0x62>
80001730:	6c 18       	ld.w	r8,r6[0x4]
80001732:	e0 18 ff fc 	andl	r8,0xfffc
80001736:	6c 3a       	ld.w	r10,r6[0xc]
80001738:	ec 08 00 09 	add	r9,r6,r8
8000173c:	0a 9c       	mov	r12,r5
8000173e:	6c 28       	ld.w	r8,r6[0x8]
80001740:	95 28       	st.w	r10[0x8],r8
80001742:	91 3a       	st.w	r8[0xc],r10
80001744:	c4 68       	rjmp	800017d0 <_malloc_r+0xec>
80001746:	2f e3       	sub	r3,-2
80001748:	c4 c8       	rjmp	800017e0 <_malloc_r+0xfc>
8000174a:	ee 03 16 09 	lsr	r3,r7,0x9
8000174e:	c0 41       	brne	80001756 <_malloc_r+0x72>
80001750:	ee 03 16 03 	lsr	r3,r7,0x3
80001754:	c2 68       	rjmp	800017a0 <_malloc_r+0xbc>
80001756:	58 43       	cp.w	r3,4
80001758:	e0 8b 00 06 	brhi	80001764 <_malloc_r+0x80>
8000175c:	ee 03 16 06 	lsr	r3,r7,0x6
80001760:	2c 83       	sub	r3,-56
80001762:	c1 f8       	rjmp	800017a0 <_malloc_r+0xbc>
80001764:	59 43       	cp.w	r3,20
80001766:	e0 8b 00 04 	brhi	8000176e <_malloc_r+0x8a>
8000176a:	2a 53       	sub	r3,-91
8000176c:	c1 a8       	rjmp	800017a0 <_malloc_r+0xbc>
8000176e:	e0 43 00 54 	cp.w	r3,84
80001772:	e0 8b 00 06 	brhi	8000177e <_malloc_r+0x9a>
80001776:	ee 03 16 0c 	lsr	r3,r7,0xc
8000177a:	29 23       	sub	r3,-110
8000177c:	c1 28       	rjmp	800017a0 <_malloc_r+0xbc>
8000177e:	e0 43 01 54 	cp.w	r3,340
80001782:	e0 8b 00 06 	brhi	8000178e <_malloc_r+0xaa>
80001786:	ee 03 16 0f 	lsr	r3,r7,0xf
8000178a:	28 93       	sub	r3,-119
8000178c:	c0 a8       	rjmp	800017a0 <_malloc_r+0xbc>
8000178e:	e0 43 05 54 	cp.w	r3,1364
80001792:	e0 88 00 04 	brls	8000179a <_malloc_r+0xb6>
80001796:	37 e3       	mov	r3,126
80001798:	c0 48       	rjmp	800017a0 <_malloc_r+0xbc>
8000179a:	ee 03 16 12 	lsr	r3,r7,0x12
8000179e:	28 43       	sub	r3,-124
800017a0:	4a ba       	lddpc	r10,8000184c <_malloc_r+0x168>
800017a2:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800017a6:	74 36       	ld.w	r6,r10[0xc]
800017a8:	c1 98       	rjmp	800017da <_malloc_r+0xf6>
800017aa:	6c 19       	ld.w	r9,r6[0x4]
800017ac:	e0 19 ff fc 	andl	r9,0xfffc
800017b0:	f2 07 01 0b 	sub	r11,r9,r7
800017b4:	58 fb       	cp.w	r11,15
800017b6:	e0 8a 00 04 	brle	800017be <_malloc_r+0xda>
800017ba:	20 13       	sub	r3,1
800017bc:	c1 18       	rjmp	800017de <_malloc_r+0xfa>
800017be:	6c 38       	ld.w	r8,r6[0xc]
800017c0:	58 0b       	cp.w	r11,0
800017c2:	c0 b5       	brlt	800017d8 <_malloc_r+0xf4>
800017c4:	6c 2a       	ld.w	r10,r6[0x8]
800017c6:	ec 09 00 09 	add	r9,r6,r9
800017ca:	0a 9c       	mov	r12,r5
800017cc:	91 2a       	st.w	r8[0x8],r10
800017ce:	95 38       	st.w	r10[0xc],r8
800017d0:	72 18       	ld.w	r8,r9[0x4]
800017d2:	a1 a8       	sbr	r8,0x0
800017d4:	93 18       	st.w	r9[0x4],r8
800017d6:	cb c8       	rjmp	8000194e <_malloc_r+0x26a>
800017d8:	10 96       	mov	r6,r8
800017da:	14 36       	cp.w	r6,r10
800017dc:	ce 71       	brne	800017aa <_malloc_r+0xc6>
800017de:	2f f3       	sub	r3,-1
800017e0:	49 ba       	lddpc	r10,8000184c <_malloc_r+0x168>
800017e2:	f4 cc ff f8 	sub	r12,r10,-8
800017e6:	78 26       	ld.w	r6,r12[0x8]
800017e8:	18 36       	cp.w	r6,r12
800017ea:	c6 e0       	breq	800018c6 <_malloc_r+0x1e2>
800017ec:	6c 19       	ld.w	r9,r6[0x4]
800017ee:	e0 19 ff fc 	andl	r9,0xfffc
800017f2:	f2 07 01 08 	sub	r8,r9,r7
800017f6:	58 f8       	cp.w	r8,15
800017f8:	e0 89 00 90 	brgt	80001918 <_malloc_r+0x234>
800017fc:	99 3c       	st.w	r12[0xc],r12
800017fe:	99 2c       	st.w	r12[0x8],r12
80001800:	58 08       	cp.w	r8,0
80001802:	c0 55       	brlt	8000180c <_malloc_r+0x128>
80001804:	ec 09 00 09 	add	r9,r6,r9
80001808:	0a 9c       	mov	r12,r5
8000180a:	ce 3b       	rjmp	800017d0 <_malloc_r+0xec>
8000180c:	e0 49 01 ff 	cp.w	r9,511
80001810:	e0 8b 00 13 	brhi	80001836 <_malloc_r+0x152>
80001814:	a3 99       	lsr	r9,0x3
80001816:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000181a:	70 2b       	ld.w	r11,r8[0x8]
8000181c:	8d 38       	st.w	r6[0xc],r8
8000181e:	8d 2b       	st.w	r6[0x8],r11
80001820:	97 36       	st.w	r11[0xc],r6
80001822:	91 26       	st.w	r8[0x8],r6
80001824:	a3 49       	asr	r9,0x2
80001826:	74 18       	ld.w	r8,r10[0x4]
80001828:	30 1b       	mov	r11,1
8000182a:	f6 09 09 49 	lsl	r9,r11,r9
8000182e:	f1 e9 10 09 	or	r9,r8,r9
80001832:	95 19       	st.w	r10[0x4],r9
80001834:	c4 98       	rjmp	800018c6 <_malloc_r+0x1e2>
80001836:	f2 0a 16 09 	lsr	r10,r9,0x9
8000183a:	58 4a       	cp.w	r10,4
8000183c:	e0 8b 00 0a 	brhi	80001850 <_malloc_r+0x16c>
80001840:	f2 0a 16 06 	lsr	r10,r9,0x6
80001844:	2c 8a       	sub	r10,-56
80001846:	c2 38       	rjmp	8000188c <_malloc_r+0x1a8>
80001848:	80 00       	ld.sh	r0,r0[0x0]
8000184a:	1b 42       	ld.w	r2,--sp
8000184c:	00 00       	add	r0,r0
8000184e:	01 04       	ld.w	r4,r0++
80001850:	59 4a       	cp.w	r10,20
80001852:	e0 8b 00 04 	brhi	8000185a <_malloc_r+0x176>
80001856:	2a 5a       	sub	r10,-91
80001858:	c1 a8       	rjmp	8000188c <_malloc_r+0x1a8>
8000185a:	e0 4a 00 54 	cp.w	r10,84
8000185e:	e0 8b 00 06 	brhi	8000186a <_malloc_r+0x186>
80001862:	f2 0a 16 0c 	lsr	r10,r9,0xc
80001866:	29 2a       	sub	r10,-110
80001868:	c1 28       	rjmp	8000188c <_malloc_r+0x1a8>
8000186a:	e0 4a 01 54 	cp.w	r10,340
8000186e:	e0 8b 00 06 	brhi	8000187a <_malloc_r+0x196>
80001872:	f2 0a 16 0f 	lsr	r10,r9,0xf
80001876:	28 9a       	sub	r10,-119
80001878:	c0 a8       	rjmp	8000188c <_malloc_r+0x1a8>
8000187a:	e0 4a 05 54 	cp.w	r10,1364
8000187e:	e0 88 00 04 	brls	80001886 <_malloc_r+0x1a2>
80001882:	37 ea       	mov	r10,126
80001884:	c0 48       	rjmp	8000188c <_malloc_r+0x1a8>
80001886:	f2 0a 16 12 	lsr	r10,r9,0x12
8000188a:	28 4a       	sub	r10,-124
8000188c:	4c 8b       	lddpc	r11,800019ac <_malloc_r+0x2c8>
8000188e:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80001892:	68 28       	ld.w	r8,r4[0x8]
80001894:	08 38       	cp.w	r8,r4
80001896:	c0 e1       	brne	800018b2 <_malloc_r+0x1ce>
80001898:	76 19       	ld.w	r9,r11[0x4]
8000189a:	a3 4a       	asr	r10,0x2
8000189c:	30 1e       	mov	lr,1
8000189e:	fc 0a 09 4a 	lsl	r10,lr,r10
800018a2:	f3 ea 10 0a 	or	r10,r9,r10
800018a6:	10 99       	mov	r9,r8
800018a8:	97 1a       	st.w	r11[0x4],r10
800018aa:	c0 a8       	rjmp	800018be <_malloc_r+0x1da>
800018ac:	70 28       	ld.w	r8,r8[0x8]
800018ae:	08 38       	cp.w	r8,r4
800018b0:	c0 60       	breq	800018bc <_malloc_r+0x1d8>
800018b2:	70 1a       	ld.w	r10,r8[0x4]
800018b4:	e0 1a ff fc 	andl	r10,0xfffc
800018b8:	14 39       	cp.w	r9,r10
800018ba:	cf 93       	brcs	800018ac <_malloc_r+0x1c8>
800018bc:	70 39       	ld.w	r9,r8[0xc]
800018be:	8d 39       	st.w	r6[0xc],r9
800018c0:	8d 28       	st.w	r6[0x8],r8
800018c2:	91 36       	st.w	r8[0xc],r6
800018c4:	93 26       	st.w	r9[0x8],r6
800018c6:	e6 08 14 02 	asr	r8,r3,0x2
800018ca:	30 1b       	mov	r11,1
800018cc:	4b 84       	lddpc	r4,800019ac <_malloc_r+0x2c8>
800018ce:	f6 08 09 4b 	lsl	r11,r11,r8
800018d2:	68 18       	ld.w	r8,r4[0x4]
800018d4:	10 3b       	cp.w	r11,r8
800018d6:	e0 8b 00 6f 	brhi	800019b4 <_malloc_r+0x2d0>
800018da:	f7 e8 00 09 	and	r9,r11,r8
800018de:	c0 b1       	brne	800018f4 <_malloc_r+0x210>
800018e0:	e0 13 ff fc 	andl	r3,0xfffc
800018e4:	a1 7b       	lsl	r11,0x1
800018e6:	2f c3       	sub	r3,-4
800018e8:	c0 38       	rjmp	800018ee <_malloc_r+0x20a>
800018ea:	2f c3       	sub	r3,-4
800018ec:	a1 7b       	lsl	r11,0x1
800018ee:	f7 e8 00 09 	and	r9,r11,r8
800018f2:	cf c0       	breq	800018ea <_malloc_r+0x206>
800018f4:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800018f8:	06 92       	mov	r2,r3
800018fa:	1c 91       	mov	r1,lr
800018fc:	62 36       	ld.w	r6,r1[0xc]
800018fe:	c2 e8       	rjmp	8000195a <_malloc_r+0x276>
80001900:	6c 1a       	ld.w	r10,r6[0x4]
80001902:	e0 1a ff fc 	andl	r10,0xfffc
80001906:	f4 07 01 08 	sub	r8,r10,r7
8000190a:	58 f8       	cp.w	r8,15
8000190c:	e0 8a 00 15 	brle	80001936 <_malloc_r+0x252>
80001910:	6c 3a       	ld.w	r10,r6[0xc]
80001912:	6c 29       	ld.w	r9,r6[0x8]
80001914:	95 29       	st.w	r10[0x8],r9
80001916:	93 3a       	st.w	r9[0xc],r10
80001918:	0e 99       	mov	r9,r7
8000191a:	ec 07 00 07 	add	r7,r6,r7
8000191e:	a1 a9       	sbr	r9,0x0
80001920:	99 37       	st.w	r12[0xc],r7
80001922:	99 27       	st.w	r12[0x8],r7
80001924:	8d 19       	st.w	r6[0x4],r9
80001926:	ee 08 09 08 	st.w	r7[r8],r8
8000192a:	8f 2c       	st.w	r7[0x8],r12
8000192c:	8f 3c       	st.w	r7[0xc],r12
8000192e:	a1 a8       	sbr	r8,0x0
80001930:	0a 9c       	mov	r12,r5
80001932:	8f 18       	st.w	r7[0x4],r8
80001934:	c0 d8       	rjmp	8000194e <_malloc_r+0x26a>
80001936:	6c 39       	ld.w	r9,r6[0xc]
80001938:	58 08       	cp.w	r8,0
8000193a:	c0 f5       	brlt	80001958 <_malloc_r+0x274>
8000193c:	ec 0a 00 0a 	add	r10,r6,r10
80001940:	74 18       	ld.w	r8,r10[0x4]
80001942:	a1 a8       	sbr	r8,0x0
80001944:	0a 9c       	mov	r12,r5
80001946:	95 18       	st.w	r10[0x4],r8
80001948:	6c 28       	ld.w	r8,r6[0x8]
8000194a:	93 28       	st.w	r9[0x8],r8
8000194c:	91 39       	st.w	r8[0xc],r9
8000194e:	f0 1f 00 19 	mcall	800019b0 <_malloc_r+0x2cc>
80001952:	ec cc ff f8 	sub	r12,r6,-8
80001956:	d8 32       	popm	r0-r7,pc
80001958:	12 96       	mov	r6,r9
8000195a:	02 36       	cp.w	r6,r1
8000195c:	cd 21       	brne	80001900 <_malloc_r+0x21c>
8000195e:	2f f2       	sub	r2,-1
80001960:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001964:	c0 30       	breq	8000196a <_malloc_r+0x286>
80001966:	2f 81       	sub	r1,-8
80001968:	cc ab       	rjmp	800018fc <_malloc_r+0x218>
8000196a:	1c 98       	mov	r8,lr
8000196c:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001970:	c0 81       	brne	80001980 <_malloc_r+0x29c>
80001972:	68 19       	ld.w	r9,r4[0x4]
80001974:	f6 08 11 ff 	rsub	r8,r11,-1
80001978:	f3 e8 00 08 	and	r8,r9,r8
8000197c:	89 18       	st.w	r4[0x4],r8
8000197e:	c0 78       	rjmp	8000198c <_malloc_r+0x2a8>
80001980:	f0 c9 00 08 	sub	r9,r8,8
80001984:	20 13       	sub	r3,1
80001986:	70 08       	ld.w	r8,r8[0x0]
80001988:	12 38       	cp.w	r8,r9
8000198a:	cf 10       	breq	8000196c <_malloc_r+0x288>
8000198c:	a1 7b       	lsl	r11,0x1
8000198e:	68 18       	ld.w	r8,r4[0x4]
80001990:	10 3b       	cp.w	r11,r8
80001992:	e0 8b 00 11 	brhi	800019b4 <_malloc_r+0x2d0>
80001996:	58 0b       	cp.w	r11,0
80001998:	c0 e0       	breq	800019b4 <_malloc_r+0x2d0>
8000199a:	04 93       	mov	r3,r2
8000199c:	c0 38       	rjmp	800019a2 <_malloc_r+0x2be>
8000199e:	2f c3       	sub	r3,-4
800019a0:	a1 7b       	lsl	r11,0x1
800019a2:	f7 e8 00 09 	and	r9,r11,r8
800019a6:	ca 71       	brne	800018f4 <_malloc_r+0x210>
800019a8:	cf bb       	rjmp	8000199e <_malloc_r+0x2ba>
800019aa:	00 00       	add	r0,r0
800019ac:	00 00       	add	r0,r0
800019ae:	01 04       	ld.w	r4,r0++
800019b0:	80 00       	ld.sh	r0,r0[0x0]
800019b2:	1b 44       	ld.w	r4,--sp
800019b4:	68 23       	ld.w	r3,r4[0x8]
800019b6:	66 12       	ld.w	r2,r3[0x4]
800019b8:	e0 12 ff fc 	andl	r2,0xfffc
800019bc:	0e 32       	cp.w	r2,r7
800019be:	5f 39       	srlo	r9
800019c0:	e4 07 01 08 	sub	r8,r2,r7
800019c4:	58 f8       	cp.w	r8,15
800019c6:	5f aa       	srle	r10
800019c8:	f5 e9 10 09 	or	r9,r10,r9
800019cc:	e0 80 00 a2 	breq	80001b10 <_malloc_r+0x42c>
800019d0:	4c 88       	lddpc	r8,80001af0 <_malloc_r+0x40c>
800019d2:	70 01       	ld.w	r1,r8[0x0]
800019d4:	4c 88       	lddpc	r8,80001af4 <_malloc_r+0x410>
800019d6:	2f 01       	sub	r1,-16
800019d8:	70 08       	ld.w	r8,r8[0x0]
800019da:	0e 01       	add	r1,r7
800019dc:	5b f8       	cp.w	r8,-1
800019de:	c0 40       	breq	800019e6 <_malloc_r+0x302>
800019e0:	28 11       	sub	r1,-127
800019e2:	e0 11 ff 80 	andl	r1,0xff80
800019e6:	02 9b       	mov	r11,r1
800019e8:	0a 9c       	mov	r12,r5
800019ea:	f0 1f 00 44 	mcall	80001af8 <_malloc_r+0x414>
800019ee:	18 96       	mov	r6,r12
800019f0:	5b fc       	cp.w	r12,-1
800019f2:	c6 e0       	breq	80001ace <_malloc_r+0x3ea>
800019f4:	e6 02 00 08 	add	r8,r3,r2
800019f8:	10 3c       	cp.w	r12,r8
800019fa:	c0 32       	brcc	80001a00 <_malloc_r+0x31c>
800019fc:	08 33       	cp.w	r3,r4
800019fe:	c6 81       	brne	80001ace <_malloc_r+0x3ea>
80001a00:	4b fa       	lddpc	r10,80001afc <_malloc_r+0x418>
80001a02:	74 09       	ld.w	r9,r10[0x0]
80001a04:	e2 09 00 09 	add	r9,r1,r9
80001a08:	95 09       	st.w	r10[0x0],r9
80001a0a:	10 36       	cp.w	r6,r8
80001a0c:	c0 a1       	brne	80001a20 <_malloc_r+0x33c>
80001a0e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80001a12:	c0 71       	brne	80001a20 <_malloc_r+0x33c>
80001a14:	e2 02 00 02 	add	r2,r1,r2
80001a18:	68 28       	ld.w	r8,r4[0x8]
80001a1a:	a1 a2       	sbr	r2,0x0
80001a1c:	91 12       	st.w	r8[0x4],r2
80001a1e:	c4 c8       	rjmp	80001ab6 <_malloc_r+0x3d2>
80001a20:	4b 5a       	lddpc	r10,80001af4 <_malloc_r+0x410>
80001a22:	74 0b       	ld.w	r11,r10[0x0]
80001a24:	5b fb       	cp.w	r11,-1
80001a26:	c0 31       	brne	80001a2c <_malloc_r+0x348>
80001a28:	95 06       	st.w	r10[0x0],r6
80001a2a:	c0 68       	rjmp	80001a36 <_malloc_r+0x352>
80001a2c:	ec 09 00 09 	add	r9,r6,r9
80001a30:	4b 3a       	lddpc	r10,80001afc <_malloc_r+0x418>
80001a32:	10 19       	sub	r9,r8
80001a34:	95 09       	st.w	r10[0x0],r9
80001a36:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80001a3a:	f0 09 11 08 	rsub	r9,r8,8
80001a3e:	58 08       	cp.w	r8,0
80001a40:	f2 08 17 10 	movne	r8,r9
80001a44:	ed d8 e1 06 	addne	r6,r6,r8
80001a48:	28 08       	sub	r8,-128
80001a4a:	ec 01 00 01 	add	r1,r6,r1
80001a4e:	0a 9c       	mov	r12,r5
80001a50:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80001a54:	f0 01 01 01 	sub	r1,r8,r1
80001a58:	02 9b       	mov	r11,r1
80001a5a:	f0 1f 00 28 	mcall	80001af8 <_malloc_r+0x414>
80001a5e:	4a 88       	lddpc	r8,80001afc <_malloc_r+0x418>
80001a60:	5b fc       	cp.w	r12,-1
80001a62:	ec 0c 17 00 	moveq	r12,r6
80001a66:	f9 b1 00 00 	moveq	r1,0
80001a6a:	70 09       	ld.w	r9,r8[0x0]
80001a6c:	0c 1c       	sub	r12,r6
80001a6e:	89 26       	st.w	r4[0x8],r6
80001a70:	02 0c       	add	r12,r1
80001a72:	12 01       	add	r1,r9
80001a74:	a1 ac       	sbr	r12,0x0
80001a76:	91 01       	st.w	r8[0x0],r1
80001a78:	8d 1c       	st.w	r6[0x4],r12
80001a7a:	08 33       	cp.w	r3,r4
80001a7c:	c1 d0       	breq	80001ab6 <_malloc_r+0x3d2>
80001a7e:	58 f2       	cp.w	r2,15
80001a80:	e0 8b 00 05 	brhi	80001a8a <_malloc_r+0x3a6>
80001a84:	30 18       	mov	r8,1
80001a86:	8d 18       	st.w	r6[0x4],r8
80001a88:	c2 38       	rjmp	80001ace <_malloc_r+0x3ea>
80001a8a:	30 59       	mov	r9,5
80001a8c:	20 c2       	sub	r2,12
80001a8e:	e0 12 ff f8 	andl	r2,0xfff8
80001a92:	e6 02 00 08 	add	r8,r3,r2
80001a96:	91 29       	st.w	r8[0x8],r9
80001a98:	91 19       	st.w	r8[0x4],r9
80001a9a:	66 18       	ld.w	r8,r3[0x4]
80001a9c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001aa0:	e5 e8 10 08 	or	r8,r2,r8
80001aa4:	87 18       	st.w	r3[0x4],r8
80001aa6:	58 f2       	cp.w	r2,15
80001aa8:	e0 88 00 07 	brls	80001ab6 <_malloc_r+0x3d2>
80001aac:	e6 cb ff f8 	sub	r11,r3,-8
80001ab0:	0a 9c       	mov	r12,r5
80001ab2:	f0 1f 00 14 	mcall	80001b00 <_malloc_r+0x41c>
80001ab6:	49 49       	lddpc	r9,80001b04 <_malloc_r+0x420>
80001ab8:	72 0a       	ld.w	r10,r9[0x0]
80001aba:	49 18       	lddpc	r8,80001afc <_malloc_r+0x418>
80001abc:	70 08       	ld.w	r8,r8[0x0]
80001abe:	14 38       	cp.w	r8,r10
80001ac0:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001ac4:	49 19       	lddpc	r9,80001b08 <_malloc_r+0x424>
80001ac6:	72 0a       	ld.w	r10,r9[0x0]
80001ac8:	14 38       	cp.w	r8,r10
80001aca:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001ace:	68 28       	ld.w	r8,r4[0x8]
80001ad0:	70 18       	ld.w	r8,r8[0x4]
80001ad2:	e0 18 ff fc 	andl	r8,0xfffc
80001ad6:	0e 38       	cp.w	r8,r7
80001ad8:	5f 39       	srlo	r9
80001ada:	0e 18       	sub	r8,r7
80001adc:	58 f8       	cp.w	r8,15
80001ade:	5f aa       	srle	r10
80001ae0:	f5 e9 10 09 	or	r9,r10,r9
80001ae4:	c1 60       	breq	80001b10 <_malloc_r+0x42c>
80001ae6:	0a 9c       	mov	r12,r5
80001ae8:	f0 1f 00 09 	mcall	80001b0c <_malloc_r+0x428>
80001aec:	d8 3a       	popm	r0-r7,pc,r12=0
80001aee:	00 00       	add	r0,r0
80001af0:	00 00       	add	r0,r0
80001af2:	05 a0       	ld.ub	r0,r2[0x2]
80001af4:	00 00       	add	r0,r0
80001af6:	05 10       	ld.sh	r0,r2++
80001af8:	80 00       	ld.sh	r0,r0[0x0]
80001afa:	1b 48       	ld.w	r8,--sp
80001afc:	00 00       	add	r0,r0
80001afe:	05 a4       	ld.ub	r4,r2[0x2]
80001b00:	80 00       	ld.sh	r0,r0[0x0]
80001b02:	1c 64       	and	r4,lr
80001b04:	00 00       	add	r0,r0
80001b06:	05 9c       	ld.ub	r12,r2[0x1]
80001b08:	00 00       	add	r0,r0
80001b0a:	05 98       	ld.ub	r8,r2[0x1]
80001b0c:	80 00       	ld.sh	r0,r0[0x0]
80001b0e:	1b 44       	ld.w	r4,--sp
80001b10:	68 26       	ld.w	r6,r4[0x8]
80001b12:	a1 a8       	sbr	r8,0x0
80001b14:	0e 99       	mov	r9,r7
80001b16:	a1 a9       	sbr	r9,0x0
80001b18:	8d 19       	st.w	r6[0x4],r9
80001b1a:	ec 07 00 07 	add	r7,r6,r7
80001b1e:	0a 9c       	mov	r12,r5
80001b20:	89 27       	st.w	r4[0x8],r7
80001b22:	8f 18       	st.w	r7[0x4],r8
80001b24:	f0 1f 00 03 	mcall	80001b30 <_malloc_r+0x44c>
80001b28:	ec cc ff f8 	sub	r12,r6,-8
80001b2c:	d8 32       	popm	r0-r7,pc
80001b2e:	00 00       	add	r0,r0
80001b30:	80 00       	ld.sh	r0,r0[0x0]
80001b32:	1b 44       	ld.w	r4,--sp

80001b34 <memset>:
80001b34:	18 98       	mov	r8,r12
80001b36:	c0 38       	rjmp	80001b3c <memset+0x8>
80001b38:	10 cb       	st.b	r8++,r11
80001b3a:	20 1a       	sub	r10,1
80001b3c:	58 0a       	cp.w	r10,0
80001b3e:	cf d1       	brne	80001b38 <memset+0x4>
80001b40:	5e fc       	retal	r12

80001b42 <__malloc_lock>:
80001b42:	5e fc       	retal	r12

80001b44 <__malloc_unlock>:
80001b44:	5e fc       	retal	r12
80001b46:	d7 03       	nop

80001b48 <_sbrk_r>:
80001b48:	d4 21       	pushm	r4-r7,lr
80001b4a:	30 08       	mov	r8,0
80001b4c:	18 97       	mov	r7,r12
80001b4e:	48 76       	lddpc	r6,80001b68 <_sbrk_r+0x20>
80001b50:	16 9c       	mov	r12,r11
80001b52:	8d 08       	st.w	r6[0x0],r8
80001b54:	f0 1f 00 06 	mcall	80001b6c <_sbrk_r+0x24>
80001b58:	5b fc       	cp.w	r12,-1
80001b5a:	c0 51       	brne	80001b64 <_sbrk_r+0x1c>
80001b5c:	6c 08       	ld.w	r8,r6[0x0]
80001b5e:	58 08       	cp.w	r8,0
80001b60:	ef f8 1a 03 	st.wne	r7[0xc],r8
80001b64:	d8 22       	popm	r4-r7,pc
80001b66:	00 00       	add	r0,r0
80001b68:	00 00       	add	r0,r0
80001b6a:	06 b0       	st.h	r3++,r0
80001b6c:	80 00       	ld.sh	r0,r0[0x0]
80001b6e:	1b 70       	ld.ub	r0,--sp

80001b70 <_sbrk>:
80001b70:	d4 01       	pushm	lr
80001b72:	48 c8       	lddpc	r8,80001ba0 <_sbrk+0x30>
80001b74:	70 09       	ld.w	r9,r8[0x0]
80001b76:	58 09       	cp.w	r9,0
80001b78:	c0 31       	brne	80001b7e <_sbrk+0xe>
80001b7a:	48 b9       	lddpc	r9,80001ba4 <_sbrk+0x34>
80001b7c:	91 09       	st.w	r8[0x0],r9
80001b7e:	48 99       	lddpc	r9,80001ba0 <_sbrk+0x30>
80001b80:	48 aa       	lddpc	r10,80001ba8 <_sbrk+0x38>
80001b82:	72 08       	ld.w	r8,r9[0x0]
80001b84:	f0 0c 00 0c 	add	r12,r8,r12
80001b88:	14 3c       	cp.w	r12,r10
80001b8a:	e0 8b 00 04 	brhi	80001b92 <_sbrk+0x22>
80001b8e:	93 0c       	st.w	r9[0x0],r12
80001b90:	c0 68       	rjmp	80001b9c <_sbrk+0x2c>
80001b92:	f0 1f 00 07 	mcall	80001bac <_sbrk+0x3c>
80001b96:	30 c8       	mov	r8,12
80001b98:	99 08       	st.w	r12[0x0],r8
80001b9a:	3f f8       	mov	r8,-1
80001b9c:	10 9c       	mov	r12,r8
80001b9e:	d8 02       	popm	pc
80001ba0:	00 00       	add	r0,r0
80001ba2:	05 cc       	ld.ub	r12,r2[0x4]
80001ba4:	00 00       	add	r0,r0
80001ba6:	06 b8       	st.h	r3++,r8
80001ba8:	00 00       	add	r0,r0
80001baa:	e0 00       	*unknown*
80001bac:	80 00       	ld.sh	r0,r0[0x0]
80001bae:	1b b0       	ld.ub	r0,sp[0x3]

80001bb0 <__errno>:
80001bb0:	48 28       	lddpc	r8,80001bb8 <__errno+0x8>
80001bb2:	70 0c       	ld.w	r12,r8[0x0]
80001bb4:	2f 4c       	sub	r12,-12
80001bb6:	5e fc       	retal	r12
80001bb8:	00 00       	add	r0,r0
80001bba:	01 00       	ld.w	r0,r0++

80001bbc <_malloc_trim_r>:
80001bbc:	d4 21       	pushm	r4-r7,lr
80001bbe:	16 95       	mov	r5,r11
80001bc0:	18 97       	mov	r7,r12
80001bc2:	f0 1f 00 23 	mcall	80001c4c <_malloc_trim_r+0x90>
80001bc6:	4a 34       	lddpc	r4,80001c50 <_malloc_trim_r+0x94>
80001bc8:	68 28       	ld.w	r8,r4[0x8]
80001bca:	70 16       	ld.w	r6,r8[0x4]
80001bcc:	e0 16 ff fc 	andl	r6,0xfffc
80001bd0:	ec c8 ff 91 	sub	r8,r6,-111
80001bd4:	f0 05 01 05 	sub	r5,r8,r5
80001bd8:	e0 15 ff 80 	andl	r5,0xff80
80001bdc:	ea c5 00 80 	sub	r5,r5,128
80001be0:	e0 45 00 7f 	cp.w	r5,127
80001be4:	e0 8a 00 23 	brle	80001c2a <_malloc_trim_r+0x6e>
80001be8:	30 0b       	mov	r11,0
80001bea:	0e 9c       	mov	r12,r7
80001bec:	f0 1f 00 1a 	mcall	80001c54 <_malloc_trim_r+0x98>
80001bf0:	68 28       	ld.w	r8,r4[0x8]
80001bf2:	0c 08       	add	r8,r6
80001bf4:	10 3c       	cp.w	r12,r8
80001bf6:	c1 a1       	brne	80001c2a <_malloc_trim_r+0x6e>
80001bf8:	ea 0b 11 00 	rsub	r11,r5,0
80001bfc:	0e 9c       	mov	r12,r7
80001bfe:	f0 1f 00 16 	mcall	80001c54 <_malloc_trim_r+0x98>
80001c02:	5b fc       	cp.w	r12,-1
80001c04:	c1 71       	brne	80001c32 <_malloc_trim_r+0x76>
80001c06:	30 0b       	mov	r11,0
80001c08:	0e 9c       	mov	r12,r7
80001c0a:	f0 1f 00 13 	mcall	80001c54 <_malloc_trim_r+0x98>
80001c0e:	68 28       	ld.w	r8,r4[0x8]
80001c10:	f8 08 01 09 	sub	r9,r12,r8
80001c14:	58 f9       	cp.w	r9,15
80001c16:	e0 8a 00 0a 	brle	80001c2a <_malloc_trim_r+0x6e>
80001c1a:	a1 a9       	sbr	r9,0x0
80001c1c:	91 19       	st.w	r8[0x4],r9
80001c1e:	48 f8       	lddpc	r8,80001c58 <_malloc_trim_r+0x9c>
80001c20:	70 09       	ld.w	r9,r8[0x0]
80001c22:	48 f8       	lddpc	r8,80001c5c <_malloc_trim_r+0xa0>
80001c24:	f8 09 01 09 	sub	r9,r12,r9
80001c28:	91 09       	st.w	r8[0x0],r9
80001c2a:	0e 9c       	mov	r12,r7
80001c2c:	f0 1f 00 0d 	mcall	80001c60 <_malloc_trim_r+0xa4>
80001c30:	d8 2a       	popm	r4-r7,pc,r12=0
80001c32:	68 28       	ld.w	r8,r4[0x8]
80001c34:	0a 16       	sub	r6,r5
80001c36:	a1 a6       	sbr	r6,0x0
80001c38:	91 16       	st.w	r8[0x4],r6
80001c3a:	48 98       	lddpc	r8,80001c5c <_malloc_trim_r+0xa0>
80001c3c:	70 09       	ld.w	r9,r8[0x0]
80001c3e:	0a 19       	sub	r9,r5
80001c40:	0e 9c       	mov	r12,r7
80001c42:	91 09       	st.w	r8[0x0],r9
80001c44:	f0 1f 00 07 	mcall	80001c60 <_malloc_trim_r+0xa4>
80001c48:	da 2a       	popm	r4-r7,pc,r12=1
80001c4a:	00 00       	add	r0,r0
80001c4c:	80 00       	ld.sh	r0,r0[0x0]
80001c4e:	1b 42       	ld.w	r2,--sp
80001c50:	00 00       	add	r0,r0
80001c52:	01 04       	ld.w	r4,r0++
80001c54:	80 00       	ld.sh	r0,r0[0x0]
80001c56:	1b 48       	ld.w	r8,--sp
80001c58:	00 00       	add	r0,r0
80001c5a:	05 10       	ld.sh	r0,r2++
80001c5c:	00 00       	add	r0,r0
80001c5e:	05 a4       	ld.ub	r4,r2[0x2]
80001c60:	80 00       	ld.sh	r0,r0[0x0]
80001c62:	1b 44       	ld.w	r4,--sp

80001c64 <_free_r>:
80001c64:	d4 21       	pushm	r4-r7,lr
80001c66:	16 96       	mov	r6,r11
80001c68:	18 97       	mov	r7,r12
80001c6a:	58 0b       	cp.w	r11,0
80001c6c:	e0 80 00 c8 	breq	80001dfc <_free_r+0x198>
80001c70:	f0 1f 00 4c 	mcall	80001da0 <_free_r+0x13c>
80001c74:	20 86       	sub	r6,8
80001c76:	4c ca       	lddpc	r10,80001da4 <_free_r+0x140>
80001c78:	6c 18       	ld.w	r8,r6[0x4]
80001c7a:	74 2e       	ld.w	lr,r10[0x8]
80001c7c:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001c80:	a1 c8       	cbr	r8,0x0
80001c82:	ec 08 00 09 	add	r9,r6,r8
80001c86:	72 1b       	ld.w	r11,r9[0x4]
80001c88:	e0 1b ff fc 	andl	r11,0xfffc
80001c8c:	1c 39       	cp.w	r9,lr
80001c8e:	c1 d1       	brne	80001cc8 <_free_r+0x64>
80001c90:	f6 08 00 08 	add	r8,r11,r8
80001c94:	58 0c       	cp.w	r12,0
80001c96:	c0 81       	brne	80001ca6 <_free_r+0x42>
80001c98:	6c 09       	ld.w	r9,r6[0x0]
80001c9a:	12 16       	sub	r6,r9
80001c9c:	12 08       	add	r8,r9
80001c9e:	6c 3b       	ld.w	r11,r6[0xc]
80001ca0:	6c 29       	ld.w	r9,r6[0x8]
80001ca2:	97 29       	st.w	r11[0x8],r9
80001ca4:	93 3b       	st.w	r9[0xc],r11
80001ca6:	10 99       	mov	r9,r8
80001ca8:	95 26       	st.w	r10[0x8],r6
80001caa:	a1 a9       	sbr	r9,0x0
80001cac:	8d 19       	st.w	r6[0x4],r9
80001cae:	4b f9       	lddpc	r9,80001da8 <_free_r+0x144>
80001cb0:	72 09       	ld.w	r9,r9[0x0]
80001cb2:	12 38       	cp.w	r8,r9
80001cb4:	c0 63       	brcs	80001cc0 <_free_r+0x5c>
80001cb6:	4b e8       	lddpc	r8,80001dac <_free_r+0x148>
80001cb8:	0e 9c       	mov	r12,r7
80001cba:	70 0b       	ld.w	r11,r8[0x0]
80001cbc:	f0 1f 00 3d 	mcall	80001db0 <_free_r+0x14c>
80001cc0:	0e 9c       	mov	r12,r7
80001cc2:	f0 1f 00 3d 	mcall	80001db4 <_free_r+0x150>
80001cc6:	d8 22       	popm	r4-r7,pc
80001cc8:	93 1b       	st.w	r9[0x4],r11
80001cca:	58 0c       	cp.w	r12,0
80001ccc:	c0 30       	breq	80001cd2 <_free_r+0x6e>
80001cce:	30 0c       	mov	r12,0
80001cd0:	c1 08       	rjmp	80001cf0 <_free_r+0x8c>
80001cd2:	6c 0e       	ld.w	lr,r6[0x0]
80001cd4:	f4 c5 ff f8 	sub	r5,r10,-8
80001cd8:	1c 16       	sub	r6,lr
80001cda:	1c 08       	add	r8,lr
80001cdc:	6c 2e       	ld.w	lr,r6[0x8]
80001cde:	0a 3e       	cp.w	lr,r5
80001ce0:	f9 bc 00 01 	moveq	r12,1
80001ce4:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001ce8:	eb fe 1a 02 	st.wne	r5[0x8],lr
80001cec:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001cf0:	f2 0b 00 0e 	add	lr,r9,r11
80001cf4:	7c 1e       	ld.w	lr,lr[0x4]
80001cf6:	ed be 00 00 	bld	lr,0x0
80001cfa:	c1 30       	breq	80001d20 <_free_r+0xbc>
80001cfc:	16 08       	add	r8,r11
80001cfe:	58 0c       	cp.w	r12,0
80001d00:	c0 c1       	brne	80001d18 <_free_r+0xb4>
80001d02:	4a 9e       	lddpc	lr,80001da4 <_free_r+0x140>
80001d04:	72 2b       	ld.w	r11,r9[0x8]
80001d06:	2f 8e       	sub	lr,-8
80001d08:	1c 3b       	cp.w	r11,lr
80001d0a:	c0 71       	brne	80001d18 <_free_r+0xb4>
80001d0c:	97 36       	st.w	r11[0xc],r6
80001d0e:	97 26       	st.w	r11[0x8],r6
80001d10:	8d 2b       	st.w	r6[0x8],r11
80001d12:	8d 3b       	st.w	r6[0xc],r11
80001d14:	30 1c       	mov	r12,1
80001d16:	c0 58       	rjmp	80001d20 <_free_r+0xbc>
80001d18:	72 2b       	ld.w	r11,r9[0x8]
80001d1a:	72 39       	ld.w	r9,r9[0xc]
80001d1c:	93 2b       	st.w	r9[0x8],r11
80001d1e:	97 39       	st.w	r11[0xc],r9
80001d20:	10 99       	mov	r9,r8
80001d22:	ec 08 09 08 	st.w	r6[r8],r8
80001d26:	a1 a9       	sbr	r9,0x0
80001d28:	8d 19       	st.w	r6[0x4],r9
80001d2a:	58 0c       	cp.w	r12,0
80001d2c:	c6 51       	brne	80001df6 <_free_r+0x192>
80001d2e:	e0 48 01 ff 	cp.w	r8,511
80001d32:	e0 8b 00 13 	brhi	80001d58 <_free_r+0xf4>
80001d36:	a3 98       	lsr	r8,0x3
80001d38:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001d3c:	72 2b       	ld.w	r11,r9[0x8]
80001d3e:	8d 39       	st.w	r6[0xc],r9
80001d40:	8d 2b       	st.w	r6[0x8],r11
80001d42:	97 36       	st.w	r11[0xc],r6
80001d44:	93 26       	st.w	r9[0x8],r6
80001d46:	a3 48       	asr	r8,0x2
80001d48:	74 19       	ld.w	r9,r10[0x4]
80001d4a:	30 1b       	mov	r11,1
80001d4c:	f6 08 09 48 	lsl	r8,r11,r8
80001d50:	f3 e8 10 08 	or	r8,r9,r8
80001d54:	95 18       	st.w	r10[0x4],r8
80001d56:	c5 08       	rjmp	80001df6 <_free_r+0x192>
80001d58:	f0 0b 16 09 	lsr	r11,r8,0x9
80001d5c:	58 4b       	cp.w	r11,4
80001d5e:	e0 8b 00 06 	brhi	80001d6a <_free_r+0x106>
80001d62:	f0 0b 16 06 	lsr	r11,r8,0x6
80001d66:	2c 8b       	sub	r11,-56
80001d68:	c2 b8       	rjmp	80001dbe <_free_r+0x15a>
80001d6a:	59 4b       	cp.w	r11,20
80001d6c:	e0 8b 00 04 	brhi	80001d74 <_free_r+0x110>
80001d70:	2a 5b       	sub	r11,-91
80001d72:	c2 68       	rjmp	80001dbe <_free_r+0x15a>
80001d74:	e0 4b 00 54 	cp.w	r11,84
80001d78:	e0 8b 00 06 	brhi	80001d84 <_free_r+0x120>
80001d7c:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001d80:	29 2b       	sub	r11,-110
80001d82:	c1 e8       	rjmp	80001dbe <_free_r+0x15a>
80001d84:	e0 4b 01 54 	cp.w	r11,340
80001d88:	e0 8b 00 06 	brhi	80001d94 <_free_r+0x130>
80001d8c:	f0 0b 16 0f 	lsr	r11,r8,0xf
80001d90:	28 9b       	sub	r11,-119
80001d92:	c1 68       	rjmp	80001dbe <_free_r+0x15a>
80001d94:	e0 4b 05 54 	cp.w	r11,1364
80001d98:	e0 88 00 10 	brls	80001db8 <_free_r+0x154>
80001d9c:	37 eb       	mov	r11,126
80001d9e:	c1 08       	rjmp	80001dbe <_free_r+0x15a>
80001da0:	80 00       	ld.sh	r0,r0[0x0]
80001da2:	1b 42       	ld.w	r2,--sp
80001da4:	00 00       	add	r0,r0
80001da6:	01 04       	ld.w	r4,r0++
80001da8:	00 00       	add	r0,r0
80001daa:	05 0c       	ld.w	r12,r2++
80001dac:	00 00       	add	r0,r0
80001dae:	05 a0       	ld.ub	r0,r2[0x2]
80001db0:	80 00       	ld.sh	r0,r0[0x0]
80001db2:	1b bc       	ld.ub	r12,sp[0x3]
80001db4:	80 00       	ld.sh	r0,r0[0x0]
80001db6:	1b 44       	ld.w	r4,--sp
80001db8:	f0 0b 16 12 	lsr	r11,r8,0x12
80001dbc:	28 4b       	sub	r11,-124
80001dbe:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80001dc2:	78 29       	ld.w	r9,r12[0x8]
80001dc4:	18 39       	cp.w	r9,r12
80001dc6:	c0 e1       	brne	80001de2 <_free_r+0x17e>
80001dc8:	74 18       	ld.w	r8,r10[0x4]
80001dca:	a3 4b       	asr	r11,0x2
80001dcc:	30 1c       	mov	r12,1
80001dce:	f8 0b 09 4b 	lsl	r11,r12,r11
80001dd2:	f1 eb 10 0b 	or	r11,r8,r11
80001dd6:	12 98       	mov	r8,r9
80001dd8:	95 1b       	st.w	r10[0x4],r11
80001dda:	c0 a8       	rjmp	80001dee <_free_r+0x18a>
80001ddc:	72 29       	ld.w	r9,r9[0x8]
80001dde:	18 39       	cp.w	r9,r12
80001de0:	c0 60       	breq	80001dec <_free_r+0x188>
80001de2:	72 1a       	ld.w	r10,r9[0x4]
80001de4:	e0 1a ff fc 	andl	r10,0xfffc
80001de8:	14 38       	cp.w	r8,r10
80001dea:	cf 93       	brcs	80001ddc <_free_r+0x178>
80001dec:	72 38       	ld.w	r8,r9[0xc]
80001dee:	8d 38       	st.w	r6[0xc],r8
80001df0:	8d 29       	st.w	r6[0x8],r9
80001df2:	93 36       	st.w	r9[0xc],r6
80001df4:	91 26       	st.w	r8[0x8],r6
80001df6:	0e 9c       	mov	r12,r7
80001df8:	f0 1f 00 02 	mcall	80001e00 <_free_r+0x19c>
80001dfc:	d8 22       	popm	r4-r7,pc
80001dfe:	00 00       	add	r0,r0
80001e00:	80 00       	ld.sh	r0,r0[0x0]
80001e02:	1b 44       	ld.w	r4,--sp

Disassembly of section .exception:

80002000 <_evba>:
	...

80002028 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80002028:	c7 a8       	rjmp	8000211c <privilegedCalls>
	...

80002100 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80002100:	1c 9f       	mov	pc,lr

80002102 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80002102:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80002106:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
8000210a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
8000210e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80002112:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80002114:	c0 31       	brne	8000211a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80002116:	4b 9c       	lddpc	r12,800021f8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80002118:	18 9f       	mov	pc,r12

8000211a <_int0_exit>:
_int0_exit:
	rete
8000211a:	d6 03       	rete

8000211c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
8000211c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
8000211e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80002120:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80002122:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80002124:	9b 3c       	st.w	sp[0xc],r12

80002126 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80002126:	4b 6c       	lddpc	r12,800021fc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80002128:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
8000212a:	c0 61       	brne	80002136 <priv_interruptenable>
	ld.w r12,sp[USERSR]
8000212c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
8000212e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80002130:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002132:	d3 02       	popm	r11-r12
	rete
80002134:	d6 03       	rete

80002136 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80002136:	4b 3c       	lddpc	r12,80002200 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80002138:	18 3b       	cp.w	r11,r12
	brne privexception
8000213a:	c0 61       	brne	80002146 <privexception>
	ld.w r12,sp[USERSR]
8000213c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
8000213e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80002140:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002142:	d3 02       	popm	r11-r12
	rete
80002144:	d6 03       	rete

80002146 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80002146:	c0 08       	rjmp	80002146 <privexception>

80002148 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80002148:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
8000214a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
8000214e:	4a ec       	lddpc	r12,80002204 <contextRestoreFromISR+0x4c>
	sub r11,r12
80002150:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80002152:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80002154:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80002158:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
8000215c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80002160:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80002162:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80002164:	1c 9f       	mov	pc,lr

80002166 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80002166:	d3 03       	ssrf	0x10
	mov pc,lr
80002168:	1c 9f       	mov	pc,lr

8000216a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
8000216a:	d5 03       	csrf	0x10
	mov pc,lr
8000216c:	1c 9f       	mov	pc,lr

8000216e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
8000216e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80002172:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80002174:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80002178:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
8000217c:	1c 9f       	mov	pc,lr

8000217e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000217e:	4a 3c       	lddpc	r12,80002208 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80002180:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80002182:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80002184:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80002186:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80002188:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
8000218a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
8000218c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
8000218e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80002190:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80002192:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80002194:	33 40       	mov	r0,52
	add r0,r12
80002196:	18 00       	add	r0,r12
	stmts r0,r0-r11
80002198:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
8000219c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
8000219e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
800021a2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
800021a4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
800021a6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
800021a8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
800021aa:	1a 90       	mov	r0,sp
	st.w --sp,r0
800021ac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800021ae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
800021b2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
800021b4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
800021b6:	1c 9f       	mov	pc,lr

800021b8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800021b8:	49 4c       	lddpc	r12,80002208 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
800021ba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
800021bc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800021be:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800021c0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
800021c4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
800021c6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
800021c8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800021ca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
800021cc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800021ce:	33 40       	mov	r0,52
	add r0,r12
800021d0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800021d2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800021d6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
800021d8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
800021da:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
800021dc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
800021de:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
800021e0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
800021e2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
800021e4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
800021e6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
800021e8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800021ea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
800021ec:	d4 01       	pushm	lr
	call timerStart
800021ee:	f0 1f 00 08 	mcall	8000220c <contextRestoreFromISR+0x54>
	popm lr
800021f2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
800021f4:	1c 9f       	mov	pc,lr
800021f6:	00 00       	add	r0,r0
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	0c b4       	st.h	r6++,r4
800021fc:	80 00       	ld.sh	r0,r0[0x0]
800021fe:	21 66       	sub	r6,22
80002200:	80 00       	ld.sh	r0,r0[0x0]
80002202:	21 6a       	sub	r10,22
80002204:	80 00       	ld.sh	r0,r0[0x0]
80002206:	20 00       	sub	r0,0
80002208:	00 00       	add	r0,r0
8000220a:	06 28       	rsub	r8,r3
8000220c:	80 00       	ld.sh	r0,r0[0x0]
8000220e:	15 62       	ld.uh	r2,--r10
	...
