
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001d30  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001e00  80001e00  00002200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80002200  80002200  00002600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002284  80002284  00002684  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80002288  00002808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002794  00002d14  2**0
                  ALLOC
  9 .bss          00000290  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000d858  000007a8  000007a8  00000000  2**0
                  ALLOC
 11 .comment      000000bc  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000005d0  00000000  00000000  00002dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000a0f  00000000  00000000  000033a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c672  00000000  00000000  00003daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000213c  00000000  00000000  00010421  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000480b  00000000  00000000  0001255d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000c34  00000000  00000000  00016d68  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001d14  00000000  00000000  0001799c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000018ea  00000000  00000000  000196b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00534577  00000000  00000000  0001af9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 00000510  00000000  00000000  0054f511  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	15 08       	ld.w	r8,r10++

Disassembly of section .text:

80000008 <MaxLockedCeiling>:
 * Comment:
 * 	Returns a maximum ceiling of all currently locked semaphores
 *
 **********************************************************/
static uint8_t MaxLockedCeiling(void)
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 2d       	sub	sp,8
	if (LOCKEDSEMAPHORELIST==NULL)
80000010:	49 c8       	lddpc	r8,80000080 <MaxLockedCeiling+0x78>
80000012:	70 08       	ld.w	r8,r8[0x0]
80000014:	58 08       	cp.w	r8,0
80000016:	c0 31       	brne	8000001c <MaxLockedCeiling+0x14>
	{
		return 0;
80000018:	30 08       	mov	r8,0
8000001a:	c2 e8       	rjmp	80000076 <MaxLockedCeiling+0x6e>
	}
	else
	{
	uint8_t maxCeil=LOCKEDSEMAPHORELIST->ceiling;
8000001c:	49 98       	lddpc	r8,80000080 <MaxLockedCeiling+0x78>
8000001e:	70 08       	ld.w	r8,r8[0x0]
80000020:	11 c8       	ld.ub	r8,r8[0x4]
80000022:	ef 68 ff fb 	st.b	r7[-5],r8
	ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
80000026:	49 78       	lddpc	r8,80000080 <MaxLockedCeiling+0x78>
80000028:	70 08       	ld.w	r8,r8[0x0]
8000002a:	ef 48 ff fc 	st.w	r7[-4],r8
	if (it->nextLockedSemaphore==NULL)
8000002e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000032:	70 28       	ld.w	r8,r8[0x8]
80000034:	58 08       	cp.w	r8,0
80000036:	c1 81       	brne	80000066 <MaxLockedCeiling+0x5e>
	{
		return it->ceiling;
80000038:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000003c:	11 c8       	ld.ub	r8,r8[0x4]
8000003e:	c1 c8       	rjmp	80000076 <MaxLockedCeiling+0x6e>
	}
	while (it->nextLockedSemaphore!=NULL)
	{
		if (it->ceiling>maxCeil)
80000040:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000044:	11 c8       	ld.ub	r8,r8[0x4]
80000046:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000004a:	f0 09 18 00 	cp.b	r9,r8
8000004e:	c0 62       	brcc	8000005a <MaxLockedCeiling+0x52>
		{
			maxCeil=it->ceiling;
80000050:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000054:	11 c8       	ld.ub	r8,r8[0x4]
80000056:	ef 68 ff fb 	st.b	r7[-5],r8
		}
		it=it->nextLockedSemaphore;
8000005a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000005e:	70 28       	ld.w	r8,r8[0x8]
80000060:	ef 48 ff fc 	st.w	r7[-4],r8
80000064:	c0 28       	rjmp	80000068 <MaxLockedCeiling+0x60>
	ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
	if (it->nextLockedSemaphore==NULL)
	{
		return it->ceiling;
	}
	while (it->nextLockedSemaphore!=NULL)
80000066:	d7 03       	nop
80000068:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000006c:	70 28       	ld.w	r8,r8[0x8]
8000006e:	58 08       	cp.w	r8,0
80000070:	ce 81       	brne	80000040 <MaxLockedCeiling+0x38>
			maxCeil=it->ceiling;
		}
		it=it->nextLockedSemaphore;
	}

	return maxCeil;
80000072:	ef 38 ff fb 	ld.ub	r8,r7[-5]
	}
}
80000076:	10 9c       	mov	r12,r8
80000078:	2f ed       	sub	sp,-8
8000007a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000007e:	00 00       	add	r0,r0
80000080:	00 00       	add	r0,r0
80000082:	06 50       	eor	r0,r3

80000084 <updatePriority>:

static void updatePriority(ROSA_taskHandle_t * task)
{
80000084:	eb cd 40 80 	pushm	r7,lr
80000088:	1a 97       	mov	r7,sp
8000008a:	20 4d       	sub	sp,16
8000008c:	ef 4c ff f0 	st.w	r7[-16],r12
	int maximum=0,counter=0;
80000090:	30 08       	mov	r8,0
80000092:	ef 48 ff f4 	st.w	r7[-12],r8
80000096:	30 08       	mov	r8,0
80000098:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
8000009c:	4b 88       	lddpc	r8,8000017c <updatePriority+0xf8>
8000009e:	70 08       	ld.w	r8,r8[0x0]
800000a0:	ef 48 ff fc 	st.w	r7[-4],r8
	if (it->nextLockedSemaphore==NULL && it->holder==task && it->ceiling > maximum && it!=NULL)
800000a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000a8:	70 28       	ld.w	r8,r8[0x8]
800000aa:	58 08       	cp.w	r8,0
800000ac:	c4 01       	brne	8000012c <updatePriority+0xa8>
800000ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000b2:	70 09       	ld.w	r9,r8[0x0]
800000b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800000b8:	10 39       	cp.w	r9,r8
800000ba:	c3 b1       	brne	80000130 <updatePriority+0xac>
800000bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000c0:	11 c8       	ld.ub	r8,r8[0x4]
800000c2:	10 99       	mov	r9,r8
800000c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800000c8:	10 39       	cp.w	r9,r8
800000ca:	e0 8a 00 35 	brle	80000134 <updatePriority+0xb0>
800000ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000d2:	58 08       	cp.w	r8,0
800000d4:	c3 20       	breq	80000138 <updatePriority+0xb4>
	{
		maximum=it->ceiling;
800000d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000da:	11 c8       	ld.ub	r8,r8[0x4]
800000dc:	ef 48 ff f4 	st.w	r7[-12],r8
		counter++; //are there any semaphores locked by this task?
800000e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000e4:	2f f8       	sub	r8,-1
800000e6:	ef 48 ff f8 	st.w	r7[-8],r8

static void updatePriority(ROSA_taskHandle_t * task)
{
	int maximum=0,counter=0;
	ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
	if (it->nextLockedSemaphore==NULL && it->holder==task && it->ceiling > maximum && it!=NULL)
800000ea:	c3 18       	rjmp	8000014c <updatePriority+0xc8>
	}
	else
	{
		while (it->nextLockedSemaphore!=NULL && it!=NULL)
	{
		if (it->holder==task && it->ceiling > maximum)
800000ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000f0:	70 09       	ld.w	r9,r8[0x0]
800000f2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800000f6:	10 39       	cp.w	r9,r8
800000f8:	c1 41       	brne	80000120 <updatePriority+0x9c>
800000fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000fe:	11 c8       	ld.ub	r8,r8[0x4]
80000100:	10 99       	mov	r9,r8
80000102:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000106:	10 39       	cp.w	r9,r8
80000108:	e0 8a 00 0c 	brle	80000120 <updatePriority+0x9c>
		{
			maximum=it->ceiling;
8000010c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000110:	11 c8       	ld.ub	r8,r8[0x4]
80000112:	ef 48 ff f4 	st.w	r7[-12],r8
			counter++; //are there any semaphores locked by this task?
80000116:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000011a:	2f f8       	sub	r8,-1
8000011c:	ef 48 ff f8 	st.w	r7[-8],r8
		}
		it=it->nextLockedSemaphore;
80000120:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000124:	70 28       	ld.w	r8,r8[0x8]
80000126:	ef 48 ff fc 	st.w	r7[-4],r8
8000012a:	c0 88       	rjmp	8000013a <updatePriority+0xb6>
		maximum=it->ceiling;
		counter++; //are there any semaphores locked by this task?
	}
	else
	{
		while (it->nextLockedSemaphore!=NULL && it!=NULL)
8000012c:	d7 03       	nop
8000012e:	c0 68       	rjmp	8000013a <updatePriority+0xb6>
80000130:	d7 03       	nop
80000132:	c0 48       	rjmp	8000013a <updatePriority+0xb6>
80000134:	d7 03       	nop
80000136:	c0 28       	rjmp	8000013a <updatePriority+0xb6>
80000138:	d7 03       	nop
8000013a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000013e:	70 28       	ld.w	r8,r8[0x8]
80000140:	58 08       	cp.w	r8,0
80000142:	c0 50       	breq	8000014c <updatePriority+0xc8>
80000144:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000148:	58 08       	cp.w	r8,0
8000014a:	cd 11       	brne	800000ec <updatePriority+0x68>
		}
		it=it->nextLockedSemaphore;
	}
	}
	
	if (counter!=0)
8000014c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000150:	58 08       	cp.w	r8,0
80000152:	c0 90       	breq	80000164 <updatePriority+0xe0>
	{
		task->priority=maximum;
80000154:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000158:	5c 58       	castu.b	r8
8000015a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000015e:	f3 68 00 64 	st.b	r9[100],r8
80000162:	c0 98       	rjmp	80000174 <updatePriority+0xf0>
	}
	else 
		{
			EXECTASK->priority=EXECTASK->originalPriority; //IPCP priority inheritance
80000164:	48 78       	lddpc	r8,80000180 <updatePriority+0xfc>
80000166:	70 09       	ld.w	r9,r8[0x0]
80000168:	48 68       	lddpc	r8,80000180 <updatePriority+0xfc>
8000016a:	70 08       	ld.w	r8,r8[0x0]
8000016c:	f1 38 00 71 	ld.ub	r8,r8[113]
80000170:	f3 68 00 64 	st.b	r9[100],r8
		}
	
}
80000174:	2f cd       	sub	sp,-16
80000176:	e3 cd 80 80 	ldm	sp++,r7,pc
8000017a:	00 00       	add	r0,r0
8000017c:	00 00       	add	r0,r0
8000017e:	06 50       	eor	r0,r3
80000180:	00 00       	add	r0,r0
80000182:	07 20       	ld.uh	r0,r3++

80000184 <ROSA_semaphoreCreate>:
 *
 * Comment:
 * 	Create a semaphore
 *
 **********************************************************/
int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t * mutex, uint8_t ceiling) {
80000184:	eb cd 40 80 	pushm	r7,lr
80000188:	1a 97       	mov	r7,sp
8000018a:	20 2d       	sub	sp,8
8000018c:	ef 4c ff fc 	st.w	r7[-4],r12
80000190:	16 98       	mov	r8,r11
80000192:	ef 68 ff f8 	st.b	r7[-8],r8
	*mutex = (ROSA_semaphoreHandle_t) calloc(1, sizeof(ROSA_semaphoreHandle_t));
80000196:	30 4b       	mov	r11,4
80000198:	30 1c       	mov	r12,1
8000019a:	f0 1f 00 0f 	mcall	800001d4 <ROSA_semaphoreCreate+0x50>
8000019e:	18 98       	mov	r8,r12
800001a0:	10 99       	mov	r9,r8
800001a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001a6:	91 09       	st.w	r8[0x0],r9
	(*mutex)->holder = NULL;
800001a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001ac:	70 08       	ld.w	r8,r8[0x0]
800001ae:	30 09       	mov	r9,0
800001b0:	91 09       	st.w	r8[0x0],r9
	(*mutex)->ceiling = ceiling;
800001b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001b6:	70 09       	ld.w	r9,r8[0x0]
800001b8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800001bc:	b2 c8       	st.b	r9[0x4],r8
	(*mutex)->nextLockedSemaphore=NULL;	
800001be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001c2:	70 08       	ld.w	r8,r8[0x0]
800001c4:	30 09       	mov	r9,0
800001c6:	91 29       	st.w	r8[0x8],r9
	
	return 0;
800001c8:	30 08       	mov	r8,0
}
800001ca:	10 9c       	mov	r12,r8
800001cc:	2f ed       	sub	sp,-8
800001ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800001d2:	00 00       	add	r0,r0
800001d4:	80 00       	ld.sh	r0,r0[0x0]
800001d6:	15 88       	ld.ub	r8,r10[0x0]

800001d8 <ROSA_semaphoreLock>:
 *
 * Comment:
 * 	Lock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t  mutex) {
800001d8:	eb cd 40 c0 	pushm	r6-r7,lr
800001dc:	1a 97       	mov	r7,sp
800001de:	20 2d       	sub	sp,8
800001e0:	ef 4c ff f8 	st.w	r7[-8],r12
	
	if (mutex==NULL)
800001e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001e8:	58 08       	cp.w	r8,0
800001ea:	c0 61       	brne	800001f6 <ROSA_semaphoreLock+0x1e>
	{
		return -1; // if the passed pointer to the semaphore handle is non-existent
800001ec:	3f f8       	mov	r8,-1
800001ee:	c8 48       	rjmp	800002f6 <ROSA_semaphoreLock+0x11e>
	}
	
	while (mutex->holder != NULL || EXECTASK->priority<=MaxLockedCeiling()) //if the semaphore is already locked or IPCP condition P(task)>maxLockedCeil
		ROSA_yield();		
800001f0:	f0 1f 00 44 	mcall	80000300 <ROSA_semaphoreLock+0x128>
800001f4:	c0 28       	rjmp	800001f8 <ROSA_semaphoreLock+0x20>
	if (mutex==NULL)
	{
		return -1; // if the passed pointer to the semaphore handle is non-existent
	}
	
	while (mutex->holder != NULL || EXECTASK->priority<=MaxLockedCeiling()) //if the semaphore is already locked or IPCP condition P(task)>maxLockedCeil
800001f6:	d7 03       	nop
800001f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001fc:	70 08       	ld.w	r8,r8[0x0]
800001fe:	58 08       	cp.w	r8,0
80000200:	cf 81       	brne	800001f0 <ROSA_semaphoreLock+0x18>
80000202:	4c 18       	lddpc	r8,80000304 <ROSA_semaphoreLock+0x12c>
80000204:	70 08       	ld.w	r8,r8[0x0]
80000206:	f1 36 00 64 	ld.ub	r6,r8[100]
8000020a:	f0 1f 00 40 	mcall	80000308 <ROSA_semaphoreLock+0x130>
8000020e:	18 98       	mov	r8,r12
80000210:	f0 06 18 00 	cp.b	r6,r8
80000214:	fe 98 ff ee 	brls	800001f0 <ROSA_semaphoreLock+0x18>
		ROSA_yield();		
	
	mutex->holder = EXECTASK;
80000218:	4b b8       	lddpc	r8,80000304 <ROSA_semaphoreLock+0x12c>
8000021a:	70 09       	ld.w	r9,r8[0x0]
8000021c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000220:	91 09       	st.w	r8[0x0],r9
		
	if (LOCKEDSEMAPHORELIST==NULL)
80000222:	4b b8       	lddpc	r8,8000030c <ROSA_semaphoreLock+0x134>
80000224:	70 08       	ld.w	r8,r8[0x0]
80000226:	58 08       	cp.w	r8,0
80000228:	c0 61       	brne	80000234 <ROSA_semaphoreLock+0x5c>
	{
		LOCKEDSEMAPHORELIST=mutex;
8000022a:	4b 98       	lddpc	r8,8000030c <ROSA_semaphoreLock+0x134>
8000022c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000230:	91 09       	st.w	r8[0x0],r9
80000232:	c1 b8       	rjmp	80000268 <ROSA_semaphoreLock+0x90>
	}
	else
	{
		ROSA_semaphoreHandle_t it; //finding the last semaphore in the list and changing its nextLockedSemaphore field to point to the just locked semaphore
		it=LOCKEDSEMAPHORELIST;
80000234:	4b 68       	lddpc	r8,8000030c <ROSA_semaphoreLock+0x134>
80000236:	70 08       	ld.w	r8,r8[0x0]
80000238:	ef 48 ff fc 	st.w	r7[-4],r8
		while(it->nextLockedSemaphore!=NULL)
8000023c:	c0 68       	rjmp	80000248 <ROSA_semaphoreLock+0x70>
		{
			it=it->nextLockedSemaphore;
8000023e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000242:	70 28       	ld.w	r8,r8[0x8]
80000244:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
		ROSA_semaphoreHandle_t it; //finding the last semaphore in the list and changing its nextLockedSemaphore field to point to the just locked semaphore
		it=LOCKEDSEMAPHORELIST;
		while(it->nextLockedSemaphore!=NULL)
80000248:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000024c:	70 28       	ld.w	r8,r8[0x8]
8000024e:	58 08       	cp.w	r8,0
80000250:	cf 71       	brne	8000023e <ROSA_semaphoreLock+0x66>
		{
			it=it->nextLockedSemaphore;
		}
		if (it!=mutex)
80000252:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000256:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000025a:	10 39       	cp.w	r9,r8
8000025c:	c0 60       	breq	80000268 <ROSA_semaphoreLock+0x90>
		{
			it->nextLockedSemaphore=mutex;
8000025e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000262:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000266:	91 29       	st.w	r8[0x8],r9
		}
		
	}
	if (EXECTASK->priority < mutex->ceiling)
80000268:	4a 78       	lddpc	r8,80000304 <ROSA_semaphoreLock+0x12c>
8000026a:	70 08       	ld.w	r8,r8[0x0]
8000026c:	f1 39 00 64 	ld.ub	r9,r8[100]
80000270:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000274:	11 c8       	ld.ub	r8,r8[0x4]
80000276:	f0 09 18 00 	cp.b	r9,r8
8000027a:	c3 d2       	brcc	800002f4 <ROSA_semaphoreLock+0x11c>
	{
		if (PA[EXECTASK->priority]!=EXECTASK->nexttcb)
8000027c:	4a 28       	lddpc	r8,80000304 <ROSA_semaphoreLock+0x12c>
8000027e:	70 08       	ld.w	r8,r8[0x0]
80000280:	f1 38 00 64 	ld.ub	r8,r8[100]
80000284:	10 99       	mov	r9,r8
80000286:	4a 38       	lddpc	r8,80000310 <ROSA_semaphoreLock+0x138>
80000288:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000028c:	49 e8       	lddpc	r8,80000304 <ROSA_semaphoreLock+0x12c>
8000028e:	70 08       	ld.w	r8,r8[0x0]
80000290:	70 08       	ld.w	r8,r8[0x0]
80000292:	10 39       	cp.w	r9,r8
80000294:	c0 d0       	breq	800002ae <ROSA_semaphoreLock+0xd6>
		{
			PA[EXECTASK->priority]=EXECTASK->nexttcb; //deattaching the EXECTASK from its current priority queue
80000296:	49 c8       	lddpc	r8,80000304 <ROSA_semaphoreLock+0x12c>
80000298:	70 08       	ld.w	r8,r8[0x0]
8000029a:	f1 38 00 64 	ld.ub	r8,r8[100]
8000029e:	10 99       	mov	r9,r8
800002a0:	49 98       	lddpc	r8,80000304 <ROSA_semaphoreLock+0x12c>
800002a2:	70 08       	ld.w	r8,r8[0x0]
800002a4:	70 0a       	ld.w	r10,r8[0x0]
800002a6:	49 b8       	lddpc	r8,80000310 <ROSA_semaphoreLock+0x138>
800002a8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800002ac:	c0 a8       	rjmp	800002c0 <ROSA_semaphoreLock+0xe8>
		}
		else
		{
			PA[EXECTASK->priority]=NULL; // if the task that is being removed from the queue is alone in the queue
800002ae:	49 68       	lddpc	r8,80000304 <ROSA_semaphoreLock+0x12c>
800002b0:	70 08       	ld.w	r8,r8[0x0]
800002b2:	f1 38 00 64 	ld.ub	r8,r8[100]
800002b6:	10 99       	mov	r9,r8
800002b8:	49 68       	lddpc	r8,80000310 <ROSA_semaphoreLock+0x138>
800002ba:	30 0a       	mov	r10,0
800002bc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		}
		
		updatePriority(EXECTASK); //IPCP priority inheritance
800002c0:	49 18       	lddpc	r8,80000304 <ROSA_semaphoreLock+0x12c>
800002c2:	70 08       	ld.w	r8,r8[0x0]
800002c4:	10 9c       	mov	r12,r8
800002c6:	f0 1f 00 14 	mcall	80000314 <ROSA_semaphoreLock+0x13c>
		PA[EXECTASK->priority]=EXECTASK;
800002ca:	48 f8       	lddpc	r8,80000304 <ROSA_semaphoreLock+0x12c>
800002cc:	70 08       	ld.w	r8,r8[0x0]
800002ce:	f1 38 00 64 	ld.ub	r8,r8[100]
800002d2:	10 99       	mov	r9,r8
800002d4:	48 c8       	lddpc	r8,80000304 <ROSA_semaphoreLock+0x12c>
800002d6:	70 0a       	ld.w	r10,r8[0x0]
800002d8:	48 e8       	lddpc	r8,80000310 <ROSA_semaphoreLock+0x138>
800002da:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		EXECTASK->nexttcb=PA[EXECTASK->priority];
800002de:	48 a8       	lddpc	r8,80000304 <ROSA_semaphoreLock+0x12c>
800002e0:	70 08       	ld.w	r8,r8[0x0]
800002e2:	48 99       	lddpc	r9,80000304 <ROSA_semaphoreLock+0x12c>
800002e4:	72 09       	ld.w	r9,r9[0x0]
800002e6:	f3 39 00 64 	ld.ub	r9,r9[100]
800002ea:	12 9a       	mov	r10,r9
800002ec:	48 99       	lddpc	r9,80000310 <ROSA_semaphoreLock+0x138>
800002ee:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800002f2:	91 09       	st.w	r8[0x0],r9
		
		//readyQueueInsert(EXECTASK);
	}
	
	return 0;
800002f4:	30 08       	mov	r8,0
}
800002f6:	10 9c       	mov	r12,r8
800002f8:	2f ed       	sub	sp,-8
800002fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800002fe:	00 00       	add	r0,r0
80000300:	80 00       	ld.sh	r0,r0[0x0]
80000302:	0b d6       	ld.ub	r6,r5[0x5]
80000304:	00 00       	add	r0,r0
80000306:	07 20       	ld.uh	r0,r3++
80000308:	80 00       	ld.sh	r0,r0[0x0]
8000030a:	00 08       	add	r8,r0
8000030c:	00 00       	add	r0,r0
8000030e:	06 50       	eor	r0,r3
80000310:	00 00       	add	r0,r0
80000312:	06 74       	tst	r4,r3
80000314:	80 00       	ld.sh	r0,r0[0x0]
80000316:	00 84       	andn	r4,r0

80000318 <ROSA_semaphoreUnlock>:
 *
 * Comment:
 * 	Unlock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreUnlock(ROSA_semaphoreHandle_t  mutex) {
80000318:	eb cd 40 80 	pushm	r7,lr
8000031c:	1a 97       	mov	r7,sp
8000031e:	20 2d       	sub	sp,8
80000320:	ef 4c ff f8 	st.w	r7[-8],r12
	mutex->holder = NULL;
80000324:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000328:	30 09       	mov	r9,0
8000032a:	91 09       	st.w	r8[0x0],r9
	if (mutex==LOCKEDSEMAPHORELIST)
8000032c:	4b 78       	lddpc	r8,80000408 <ROSA_semaphoreUnlock+0xf0>
8000032e:	70 08       	ld.w	r8,r8[0x0]
80000330:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000334:	10 39       	cp.w	r9,r8
80000336:	c0 71       	brne	80000344 <ROSA_semaphoreUnlock+0x2c>
	{
		LOCKEDSEMAPHORELIST=mutex->nextLockedSemaphore; //if first locked semaphore needs to be unlocked
80000338:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000033c:	70 29       	ld.w	r9,r8[0x8]
8000033e:	4b 38       	lddpc	r8,80000408 <ROSA_semaphoreUnlock+0xf0>
80000340:	91 09       	st.w	r8[0x0],r9
80000342:	c1 88       	rjmp	80000372 <ROSA_semaphoreUnlock+0x5a>
	}
	else
	{
		ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
80000344:	4b 18       	lddpc	r8,80000408 <ROSA_semaphoreUnlock+0xf0>
80000346:	70 08       	ld.w	r8,r8[0x0]
80000348:	ef 48 ff fc 	st.w	r7[-4],r8
		//it=LOCKEDSEMAPHORELIST;
		while (it->nextLockedSemaphore!=mutex) //find the locked semaphore before the one that needs to be unlocked
8000034c:	c0 68       	rjmp	80000358 <ROSA_semaphoreUnlock+0x40>
		{
			it=it->nextLockedSemaphore;
8000034e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000352:	70 28       	ld.w	r8,r8[0x8]
80000354:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
		ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
		//it=LOCKEDSEMAPHORELIST;
		while (it->nextLockedSemaphore!=mutex) //find the locked semaphore before the one that needs to be unlocked
80000358:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000035c:	70 29       	ld.w	r9,r8[0x8]
8000035e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000362:	10 39       	cp.w	r9,r8
80000364:	cf 51       	brne	8000034e <ROSA_semaphoreUnlock+0x36>
		{
			it=it->nextLockedSemaphore;
		}
		it->nextLockedSemaphore=mutex->nextLockedSemaphore;
80000366:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000036a:	70 29       	ld.w	r9,r8[0x8]
8000036c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000370:	91 29       	st.w	r8[0x8],r9
	}
	//readyQueueExtract(EXECTASK);
	if(mutex->ceiling >= EXECTASK->priority)
80000372:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000376:	11 c9       	ld.ub	r9,r8[0x4]
80000378:	4a 58       	lddpc	r8,8000040c <ROSA_semaphoreUnlock+0xf4>
8000037a:	70 08       	ld.w	r8,r8[0x0]
8000037c:	f1 38 00 64 	ld.ub	r8,r8[100]
80000380:	f0 09 18 00 	cp.b	r9,r8
80000384:	c3 d3       	brcs	800003fe <ROSA_semaphoreUnlock+0xe6>
	{
		if (PA[EXECTASK->priority]!=EXECTASK->nexttcb)
80000386:	4a 28       	lddpc	r8,8000040c <ROSA_semaphoreUnlock+0xf4>
80000388:	70 08       	ld.w	r8,r8[0x0]
8000038a:	f1 38 00 64 	ld.ub	r8,r8[100]
8000038e:	10 99       	mov	r9,r8
80000390:	4a 08       	lddpc	r8,80000410 <ROSA_semaphoreUnlock+0xf8>
80000392:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000396:	49 e8       	lddpc	r8,8000040c <ROSA_semaphoreUnlock+0xf4>
80000398:	70 08       	ld.w	r8,r8[0x0]
8000039a:	70 08       	ld.w	r8,r8[0x0]
8000039c:	10 39       	cp.w	r9,r8
8000039e:	c0 d0       	breq	800003b8 <ROSA_semaphoreUnlock+0xa0>
		{
			PA[EXECTASK->priority]=EXECTASK->nexttcb; //deattaching the EXECTASK from its current priority queue
800003a0:	49 b8       	lddpc	r8,8000040c <ROSA_semaphoreUnlock+0xf4>
800003a2:	70 08       	ld.w	r8,r8[0x0]
800003a4:	f1 38 00 64 	ld.ub	r8,r8[100]
800003a8:	10 99       	mov	r9,r8
800003aa:	49 98       	lddpc	r8,8000040c <ROSA_semaphoreUnlock+0xf4>
800003ac:	70 08       	ld.w	r8,r8[0x0]
800003ae:	70 0a       	ld.w	r10,r8[0x0]
800003b0:	49 88       	lddpc	r8,80000410 <ROSA_semaphoreUnlock+0xf8>
800003b2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800003b6:	c0 a8       	rjmp	800003ca <ROSA_semaphoreUnlock+0xb2>
		}
		else
		{
			PA[EXECTASK->priority]=NULL; // if the task that is being removed from the queue is alone in the queue
800003b8:	49 58       	lddpc	r8,8000040c <ROSA_semaphoreUnlock+0xf4>
800003ba:	70 08       	ld.w	r8,r8[0x0]
800003bc:	f1 38 00 64 	ld.ub	r8,r8[100]
800003c0:	10 99       	mov	r9,r8
800003c2:	49 48       	lddpc	r8,80000410 <ROSA_semaphoreUnlock+0xf8>
800003c4:	30 0a       	mov	r10,0
800003c6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		}
		updatePriority(EXECTASK);
800003ca:	49 18       	lddpc	r8,8000040c <ROSA_semaphoreUnlock+0xf4>
800003cc:	70 08       	ld.w	r8,r8[0x0]
800003ce:	10 9c       	mov	r12,r8
800003d0:	f0 1f 00 11 	mcall	80000414 <ROSA_semaphoreUnlock+0xfc>
		PA[EXECTASK->priority]=EXECTASK;
800003d4:	48 e8       	lddpc	r8,8000040c <ROSA_semaphoreUnlock+0xf4>
800003d6:	70 08       	ld.w	r8,r8[0x0]
800003d8:	f1 38 00 64 	ld.ub	r8,r8[100]
800003dc:	10 99       	mov	r9,r8
800003de:	48 c8       	lddpc	r8,8000040c <ROSA_semaphoreUnlock+0xf4>
800003e0:	70 0a       	ld.w	r10,r8[0x0]
800003e2:	48 c8       	lddpc	r8,80000410 <ROSA_semaphoreUnlock+0xf8>
800003e4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		EXECTASK->nexttcb=PA[EXECTASK->priority];
800003e8:	48 98       	lddpc	r8,8000040c <ROSA_semaphoreUnlock+0xf4>
800003ea:	70 08       	ld.w	r8,r8[0x0]
800003ec:	48 89       	lddpc	r9,8000040c <ROSA_semaphoreUnlock+0xf4>
800003ee:	72 09       	ld.w	r9,r9[0x0]
800003f0:	f3 39 00 64 	ld.ub	r9,r9[100]
800003f4:	12 9a       	mov	r10,r9
800003f6:	48 79       	lddpc	r9,80000410 <ROSA_semaphoreUnlock+0xf8>
800003f8:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800003fc:	91 09       	st.w	r8[0x0],r9
	}
	
	
	//readyQueueInsert(EXECTASK);
	
	return 0;
800003fe:	30 08       	mov	r8,0
}
80000400:	10 9c       	mov	r12,r8
80000402:	2f ed       	sub	sp,-8
80000404:	e3 cd 80 80 	ldm	sp++,r7,pc
80000408:	00 00       	add	r0,r0
8000040a:	06 50       	eor	r0,r3
8000040c:	00 00       	add	r0,r0
8000040e:	07 20       	ld.uh	r0,r3++
80000410:	00 00       	add	r0,r0
80000412:	06 74       	tst	r4,r3
80000414:	80 00       	ld.sh	r0,r0[0x0]
80000416:	00 84       	andn	r4,r0

80000418 <usart_options>:
80000418:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 31     ............tsk1
80000428:	00 00 00 00                                         ....

8000042c <task1>:
ROSA_semaphoreHandle_t mutex3;



void task1(void)
{
8000042c:	eb cd 40 80 	pushm	r7,lr
80000430:	1a 97       	mov	r7,sp
		while(1){
		ROSA_semaphoreLock(mutex3);
80000432:	4a 38       	lddpc	r8,800004bc <task1+0x90>
80000434:	70 08       	ld.w	r8,r8[0x0]
80000436:	10 9c       	mov	r12,r8
80000438:	f0 1f 00 22 	mcall	800004c0 <task1+0x94>
		ledOn(LED2_GPIO);
8000043c:	33 dc       	mov	r12,61
8000043e:	f0 1f 00 22 	mcall	800004c4 <task1+0x98>
		delay_ms(2100);
80000442:	e0 6c 08 34 	mov	r12,2100
80000446:	f0 1f 00 21 	mcall	800004c8 <task1+0x9c>
		ROSA_semaphoreLock(mutex2);
8000044a:	4a 18       	lddpc	r8,800004cc <task1+0xa0>
8000044c:	70 08       	ld.w	r8,r8[0x0]
8000044e:	10 9c       	mov	r12,r8
80000450:	f0 1f 00 1c 	mcall	800004c0 <task1+0x94>
		ledOn(LED1_GPIO);
80000454:	33 cc       	mov	r12,60
80000456:	f0 1f 00 1c 	mcall	800004c4 <task1+0x98>
		delay_ms(500);
8000045a:	e0 6c 01 f4 	mov	r12,500
8000045e:	f0 1f 00 1b 	mcall	800004c8 <task1+0x9c>
		ROSA_semaphoreLock(mutex1);
80000462:	49 c8       	lddpc	r8,800004d0 <task1+0xa4>
80000464:	70 08       	ld.w	r8,r8[0x0]
80000466:	10 9c       	mov	r12,r8
80000468:	f0 1f 00 16 	mcall	800004c0 <task1+0x94>
		ledOn(LED0_GPIO);
8000046c:	33 bc       	mov	r12,59
8000046e:	f0 1f 00 16 	mcall	800004c4 <task1+0x98>
		ROSA_semaphoreUnlock(mutex3);
80000472:	49 38       	lddpc	r8,800004bc <task1+0x90>
80000474:	70 08       	ld.w	r8,r8[0x0]
80000476:	10 9c       	mov	r12,r8
80000478:	f0 1f 00 17 	mcall	800004d4 <task1+0xa8>
		ledOff(LED2_GPIO);
8000047c:	33 dc       	mov	r12,61
8000047e:	f0 1f 00 17 	mcall	800004d8 <task1+0xac>
		delay_ms(500);
80000482:	e0 6c 01 f4 	mov	r12,500
80000486:	f0 1f 00 11 	mcall	800004c8 <task1+0x9c>
		ROSA_semaphoreUnlock(mutex1);
8000048a:	49 28       	lddpc	r8,800004d0 <task1+0xa4>
8000048c:	70 08       	ld.w	r8,r8[0x0]
8000048e:	10 9c       	mov	r12,r8
80000490:	f0 1f 00 11 	mcall	800004d4 <task1+0xa8>
		ledOff(LED0_GPIO);
80000494:	33 bc       	mov	r12,59
80000496:	f0 1f 00 11 	mcall	800004d8 <task1+0xac>
		delay_ms(500);
8000049a:	e0 6c 01 f4 	mov	r12,500
8000049e:	f0 1f 00 0b 	mcall	800004c8 <task1+0x9c>
		ROSA_semaphoreUnlock(mutex2);
800004a2:	48 b8       	lddpc	r8,800004cc <task1+0xa0>
800004a4:	70 08       	ld.w	r8,r8[0x0]
800004a6:	10 9c       	mov	r12,r8
800004a8:	f0 1f 00 0b 	mcall	800004d4 <task1+0xa8>
		ledOff(LED1_GPIO);
800004ac:	33 cc       	mov	r12,60
800004ae:	f0 1f 00 0b 	mcall	800004d8 <task1+0xac>
		delay_ms(500);
800004b2:	e0 6c 01 f4 	mov	r12,500
800004b6:	f0 1f 00 05 	mcall	800004c8 <task1+0x9c>
		//ROSA_yield();
		}
800004ba:	cb cb       	rjmp	80000432 <task1+0x6>
800004bc:	00 00       	add	r0,r0
800004be:	06 64       	and	r4,r3
800004c0:	80 00       	ld.sh	r0,r0[0x0]
800004c2:	01 d8       	ld.ub	r8,r0[0x5]
800004c4:	80 00       	ld.sh	r0,r0[0x0]
800004c6:	10 6c       	and	r12,r8
800004c8:	80 00       	ld.sh	r0,r0[0x0]
800004ca:	0e 14       	sub	r4,r7
800004cc:	00 00       	add	r0,r0
800004ce:	06 58       	eor	r8,r3
800004d0:	00 00       	add	r0,r0
800004d2:	06 68       	and	r8,r3
800004d4:	80 00       	ld.sh	r0,r0[0x0]
800004d6:	03 18       	ld.sh	r8,r1++
800004d8:	80 00       	ld.sh	r0,r0[0x0]
800004da:	10 8c       	andn	r12,r8

800004dc <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
800004dc:	eb cd 40 80 	pushm	r7,lr
800004e0:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
800004e2:	f0 1f 00 0d 	mcall	80000514 <main+0x38>
	
	//Create tasks and install them into the ROSA kernel
	ROSA_taskCreate(&t1_tcb, "tsk1", task1, T1_STACK_SIZE, 1);
800004e6:	30 18       	mov	r8,1
800004e8:	32 09       	mov	r9,32
800004ea:	48 ca       	lddpc	r10,80000518 <main+0x3c>
800004ec:	48 cb       	lddpc	r11,8000051c <main+0x40>
800004ee:	48 dc       	lddpc	r12,80000520 <main+0x44>
800004f0:	f0 1f 00 0d 	mcall	80000524 <main+0x48>
	//ROSA_taskCreate(&t2_tcb, "tsk2", task2, T2_STACK_SIZE, 2);
	//ROSA_taskCreate(&t3_tcb, "tsk3", task3, T3_STACK_SIZE, 3);
	
	ROSA_semaphoreCreate(&mutex1, 1);
800004f4:	30 1b       	mov	r11,1
800004f6:	48 dc       	lddpc	r12,80000528 <main+0x4c>
800004f8:	f0 1f 00 0d 	mcall	8000052c <main+0x50>
	ROSA_semaphoreCreate(&mutex2, 2);
800004fc:	30 2b       	mov	r11,2
800004fe:	48 dc       	lddpc	r12,80000530 <main+0x54>
80000500:	f0 1f 00 0b 	mcall	8000052c <main+0x50>
	ROSA_semaphoreCreate(&mutex3, 3);
80000504:	30 3b       	mov	r11,3
80000506:	48 cc       	lddpc	r12,80000534 <main+0x58>
80000508:	f0 1f 00 09 	mcall	8000052c <main+0x50>

	
	ROSA_startScheduler();
8000050c:	f0 1f 00 0b 	mcall	80000538 <main+0x5c>

	/* Execution will never return here */
	while(1);
80000510:	c0 08       	rjmp	80000510 <main+0x34>
80000512:	00 00       	add	r0,r0
80000514:	80 00       	ld.sh	r0,r0[0x0]
80000516:	08 20       	rsub	r0,r4
80000518:	80 00       	ld.sh	r0,r0[0x0]
8000051a:	04 2c       	rsub	r12,r2
8000051c:	80 00       	ld.sh	r0,r0[0x0]
8000051e:	04 24       	rsub	r4,r2
80000520:	00 00       	add	r0,r0
80000522:	06 60       	and	r0,r3
80000524:	80 00       	ld.sh	r0,r0[0x0]
80000526:	09 cc       	ld.ub	r12,r4[0x4]
80000528:	00 00       	add	r0,r0
8000052a:	06 68       	and	r8,r3
8000052c:	80 00       	ld.sh	r0,r0[0x0]
8000052e:	01 84       	ld.ub	r4,r0[0x0]
80000530:	00 00       	add	r0,r0
80000532:	06 58       	eor	r8,r3
80000534:	00 00       	add	r0,r0
80000536:	06 64       	and	r4,r3
80000538:	80 00       	ld.sh	r0,r0[0x0]
8000053a:	0c 40       	or	r0,r6

8000053c <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
8000053c:	eb cd 40 80 	pushm	r7,lr
80000540:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
80000542:	f0 1f 00 05 	mcall	80000554 <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
80000546:	f0 1f 00 05 	mcall	80000558 <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it
8000054a:	f0 1f 00 05 	mcall	8000055c <ROSA_yieldFromISR+0x20>
}
8000054e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000552:	00 00       	add	r0,r0
80000554:	80 00       	ld.sh	r0,r0[0x0]
80000556:	1f 7e       	ld.ub	lr,--pc
80000558:	80 00       	ld.sh	r0,r0[0x0]
8000055a:	0b f4       	ld.ub	r4,r5[0x7]
8000055c:	80 00       	ld.sh	r0,r0[0x0]
8000055e:	1f b8       	ld.ub	r8,pc[0x3]

80000560 <usart_options>:
80000560:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
80000570:	00 00 00 00 64 6c 61 79 00 00 00 00 55 53 41 52     ....dlay....USAR
80000580:	54 20 69 6e 69 74 69 61 6c 69 7a 65 64 0d 0a 00     T initialized...

80000590 <idle>:

/** @fn void idle(void)
	@brief Idle task body.
*/
void idle(void)
{
80000590:	eb cd 40 80 	pushm	r7,lr
80000594:	1a 97       	mov	r7,sp
	while(1)
	{
		ledToggle(LED7_GPIO);
80000596:	33 6c       	mov	r12,54
80000598:	f0 1f 00 02 	mcall	800005a0 <idle+0x10>
		//usartWriteLine(USART, "idle\n");
	}
8000059c:	cf db       	rjmp	80000596 <idle+0x6>
8000059e:	00 00       	add	r0,r0
800005a0:	80 00       	ld.sh	r0,r0[0x0]
800005a2:	10 ac       	st.w	r8++,r12

800005a4 <ROSA_tcbInstall>:
 * Comment:
 * 	Install the TCB into the TCBLIST.
 *
 **********************************************************/
void ROSA_tcbInstall(tcb * tcbTask)
{
800005a4:	eb cd 40 80 	pushm	r7,lr
800005a8:	1a 97       	mov	r7,sp
800005aa:	20 1d       	sub	sp,4
800005ac:	ef 4c ff fc 	st.w	r7[-4],r12
	/* Is this the first tcb installed? */
	if(TCBLIST == NULL)
800005b0:	49 38       	lddpc	r8,800005fc <ROSA_tcbInstall+0x58>
800005b2:	70 08       	ld.w	r8,r8[0x0]
800005b4:	58 08       	cp.w	r8,0
800005b6:	c1 01       	brne	800005d6 <ROSA_tcbInstall+0x32>
	{
		TCBLIST = tcbTask;
800005b8:	49 18       	lddpc	r8,800005fc <ROSA_tcbInstall+0x58>
800005ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
800005be:	91 09       	st.w	r8[0x0],r9
		TCBLIST->nexttcb = tcbTask;			//Install the first tcb
800005c0:	48 f8       	lddpc	r8,800005fc <ROSA_tcbInstall+0x58>
800005c2:	70 08       	ld.w	r8,r8[0x0]
800005c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800005c8:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
800005ca:	48 d8       	lddpc	r8,800005fc <ROSA_tcbInstall+0x58>
800005cc:	70 09       	ld.w	r9,r8[0x0]
800005ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005d2:	91 09       	st.w	r8[0x0],r9
800005d4:	c1 08       	rjmp	800005f4 <ROSA_tcbInstall+0x50>
	}
	else
	{
		tcbTask->nexttcb = TCBLIST->nexttcb;
800005d6:	48 a8       	lddpc	r8,800005fc <ROSA_tcbInstall+0x58>
800005d8:	70 08       	ld.w	r8,r8[0x0]
800005da:	70 09       	ld.w	r9,r8[0x0]
800005dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005e0:	91 09       	st.w	r8[0x0],r9
		TCBLIST->nexttcb = tcbTask;
800005e2:	48 78       	lddpc	r8,800005fc <ROSA_tcbInstall+0x58>
800005e4:	70 08       	ld.w	r8,r8[0x0]
800005e6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800005ea:	91 09       	st.w	r8[0x0],r9
		TCBLIST = tcbTask;
800005ec:	48 48       	lddpc	r8,800005fc <ROSA_tcbInstall+0x58>
800005ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
800005f2:	91 09       	st.w	r8[0x0],r9
	}
}
800005f4:	2f fd       	sub	sp,-4
800005f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800005fa:	00 00       	add	r0,r0
800005fc:	00 00       	add	r0,r0
800005fe:	06 70       	tst	r0,r3

80000600 <ROSA_tcbUninstall>:

void ROSA_tcbUninstall(tcb * tcbTask)
{
80000600:	eb cd 40 80 	pushm	r7,lr
80000604:	1a 97       	mov	r7,sp
80000606:	20 1d       	sub	sp,4
80000608:	ef 4c ff fc 	st.w	r7[-4],r12
	while (TCBLIST->nexttcb != tcbTask)
8000060c:	c0 68       	rjmp	80000618 <ROSA_tcbUninstall+0x18>
	{
		TCBLIST = TCBLIST->nexttcb;
8000060e:	49 88       	lddpc	r8,8000066c <ROSA_tcbUninstall+0x6c>
80000610:	70 08       	ld.w	r8,r8[0x0]
80000612:	70 09       	ld.w	r9,r8[0x0]
80000614:	49 68       	lddpc	r8,8000066c <ROSA_tcbUninstall+0x6c>
80000616:	91 09       	st.w	r8[0x0],r9
	}
}

void ROSA_tcbUninstall(tcb * tcbTask)
{
	while (TCBLIST->nexttcb != tcbTask)
80000618:	49 58       	lddpc	r8,8000066c <ROSA_tcbUninstall+0x6c>
8000061a:	70 08       	ld.w	r8,r8[0x0]
8000061c:	70 09       	ld.w	r9,r8[0x0]
8000061e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000622:	10 39       	cp.w	r9,r8
80000624:	cf 51       	brne	8000060e <ROSA_tcbUninstall+0xe>
	{
		TCBLIST = TCBLIST->nexttcb;
	}
	
	TCBLIST->nexttcb = tcbTask->nexttcb;
80000626:	49 28       	lddpc	r8,8000066c <ROSA_tcbUninstall+0x6c>
80000628:	70 08       	ld.w	r8,r8[0x0]
8000062a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000062e:	72 09       	ld.w	r9,r9[0x0]
80000630:	91 09       	st.w	r8[0x0],r9
	tcbTask->nexttcb = NULL;
80000632:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000636:	30 09       	mov	r9,0
80000638:	91 09       	st.w	r8[0x0],r9
	
	if (tcbTask->delay)	
8000063a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000063e:	f0 e8 00 68 	ld.d	r8,r8[104]
80000642:	58 08       	cp.w	r8,0
80000644:	5c 29       	cpc	r9
80000646:	c0 70       	breq	80000654 <ROSA_tcbUninstall+0x54>
	{
		TCBLIST = TCBLIST->nexttcb;
80000648:	48 98       	lddpc	r8,8000066c <ROSA_tcbUninstall+0x6c>
8000064a:	70 08       	ld.w	r8,r8[0x0]
8000064c:	70 09       	ld.w	r9,r8[0x0]
8000064e:	48 88       	lddpc	r8,8000066c <ROSA_tcbUninstall+0x6c>
80000650:	91 09       	st.w	r8[0x0],r9
80000652:	c0 a8       	rjmp	80000666 <ROSA_tcbUninstall+0x66>
	}
	else if (TCBLIST == tcbTask)
80000654:	48 68       	lddpc	r8,8000066c <ROSA_tcbUninstall+0x6c>
80000656:	70 09       	ld.w	r9,r8[0x0]
80000658:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000065c:	10 39       	cp.w	r9,r8
8000065e:	c0 41       	brne	80000666 <ROSA_tcbUninstall+0x66>
	{
		TCBLIST = NULL;	
80000660:	48 38       	lddpc	r8,8000066c <ROSA_tcbUninstall+0x6c>
80000662:	30 09       	mov	r9,0
80000664:	91 09       	st.w	r8[0x0],r9
	}
}
80000666:	2f fd       	sub	sp,-4
80000668:	e3 cd 80 80 	ldm	sp++,r7,pc
8000066c:	00 00       	add	r0,r0
8000066e:	06 70       	tst	r0,r3

80000670 <readyQueueSearch>:
/** @fn int readyQueueSearch(void)
	@brief Search for the first non-empty highest priority queue.
	@return Pointer to the last tcb in the queue (in other words - PA[i]).
*/
tcb * readyQueueSearch(void)
{
80000670:	eb cd 40 80 	pushm	r7,lr
80000674:	1a 97       	mov	r7,sp
80000676:	20 2d       	sub	sp,8
	int i = MAXNPRIO;
80000678:	30 c8       	mov	r8,12
8000067a:	ef 48 ff f8 	st.w	r7[-8],r8
	tcb * retval;
		
	interruptDisable();
8000067e:	f0 1f 00 1a 	mcall	800006e4 <readyQueueSearch+0x74>
	/* Search for the first non-empty queue. */
	while ( (PA[--i] == NULL) && (i > 0));
80000682:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000686:	20 18       	sub	r8,1
80000688:	ef 48 ff f8 	st.w	r7[-8],r8
8000068c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000690:	49 68       	lddpc	r8,800006e8 <readyQueueSearch+0x78>
80000692:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000696:	58 08       	cp.w	r8,0
80000698:	c0 61       	brne	800006a4 <readyQueueSearch+0x34>
8000069a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000069e:	58 08       	cp.w	r8,0
800006a0:	fe 99 ff f1 	brgt	80000682 <readyQueueSearch+0x12>
	
	if ((i == 0) && (PA[i] == NULL))
800006a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006a8:	58 08       	cp.w	r8,0
800006aa:	c0 d1       	brne	800006c4 <readyQueueSearch+0x54>
800006ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
800006b0:	48 e8       	lddpc	r8,800006e8 <readyQueueSearch+0x78>
800006b2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800006b6:	58 08       	cp.w	r8,0
800006b8:	c0 61       	brne	800006c4 <readyQueueSearch+0x54>
	{
		retval = IDLETASK;
800006ba:	48 d8       	lddpc	r8,800006ec <readyQueueSearch+0x7c>
800006bc:	70 08       	ld.w	r8,r8[0x0]
800006be:	ef 48 ff fc 	st.w	r7[-4],r8
		
	interruptDisable();
	/* Search for the first non-empty queue. */
	while ( (PA[--i] == NULL) && (i > 0));
	
	if ((i == 0) && (PA[i] == NULL))
800006c2:	c0 88       	rjmp	800006d2 <readyQueueSearch+0x62>
	{
		retval = IDLETASK;
	}
	else
	{
		retval = PA[i];
800006c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800006c8:	48 88       	lddpc	r8,800006e8 <readyQueueSearch+0x78>
800006ca:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800006ce:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	interruptEnable();
800006d2:	f0 1f 00 08 	mcall	800006f0 <readyQueueSearch+0x80>
	
	return retval;
800006d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800006da:	10 9c       	mov	r12,r8
800006dc:	2f ed       	sub	sp,-8
800006de:	e3 cd 80 80 	ldm	sp++,r7,pc
800006e2:	00 00       	add	r0,r0
800006e4:	80 00       	ld.sh	r0,r0[0x0]
800006e6:	1f 66       	ld.uh	r6,--pc
800006e8:	00 00       	add	r0,r0
800006ea:	06 74       	tst	r4,r3
800006ec:	00 00       	add	r0,r0
800006ee:	06 6c       	and	r12,r3
800006f0:	80 00       	ld.sh	r0,r0[0x0]
800006f2:	1f 6a       	ld.uh	r10,--pc

800006f4 <dlay>:

void dlay()
{
800006f4:	eb cd 40 80 	pushm	r7,lr
800006f8:	1a 97       	mov	r7,sp
800006fa:	20 1d       	sub	sp,4
	tcb * tmp;
	
	while (1)
	{	
		interruptDisable();
800006fc:	f0 1f 00 26 	mcall	80000794 <dlay+0xa0>
			
		while ((DQ) && (DQ->delay <= systemTick))
80000700:	c3 08       	rjmp	80000760 <dlay+0x6c>
		{	
			tmp = DQ;
80000702:	4a 68       	lddpc	r8,80000798 <dlay+0xa4>
80000704:	70 08       	ld.w	r8,r8[0x0]
80000706:	ef 48 ff fc 	st.w	r7[-4],r8

			ROSA_TM_ACTION(DQ, DQ, Uninstall);
8000070a:	4a 48       	lddpc	r8,80000798 <dlay+0xa4>
8000070c:	70 09       	ld.w	r9,r8[0x0]
8000070e:	4a 48       	lddpc	r8,8000079c <dlay+0xa8>
80000710:	91 09       	st.w	r8[0x0],r9
80000712:	4a 28       	lddpc	r8,80000798 <dlay+0xa4>
80000714:	70 08       	ld.w	r8,r8[0x0]
80000716:	10 9c       	mov	r12,r8
80000718:	f0 1f 00 22 	mcall	800007a0 <dlay+0xac>
8000071c:	4a 08       	lddpc	r8,8000079c <dlay+0xa8>
8000071e:	70 09       	ld.w	r9,r8[0x0]
80000720:	49 e8       	lddpc	r8,80000798 <dlay+0xa4>
80000722:	91 09       	st.w	r8[0x0],r9
		
			tmp->delay = 0;
80000724:	ee fa ff fc 	ld.w	r10,r7[-4]
80000728:	30 08       	mov	r8,0
8000072a:	30 09       	mov	r9,0
8000072c:	f4 e9 00 68 	st.d	r10[104],r8
			ROSA_TM_ACTION(PA[tmp->priority], tmp, Install);
80000730:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000734:	f1 38 00 64 	ld.ub	r8,r8[100]
80000738:	10 99       	mov	r9,r8
8000073a:	49 b8       	lddpc	r8,800007a4 <dlay+0xb0>
8000073c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000740:	49 78       	lddpc	r8,8000079c <dlay+0xa8>
80000742:	91 09       	st.w	r8[0x0],r9
80000744:	ee fc ff fc 	ld.w	r12,r7[-4]
80000748:	f0 1f 00 18 	mcall	800007a8 <dlay+0xb4>
8000074c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000750:	f1 38 00 64 	ld.ub	r8,r8[100]
80000754:	10 99       	mov	r9,r8
80000756:	49 28       	lddpc	r8,8000079c <dlay+0xa8>
80000758:	70 0a       	ld.w	r10,r8[0x0]
8000075a:	49 38       	lddpc	r8,800007a4 <dlay+0xb0>
8000075c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	
	while (1)
	{	
		interruptDisable();
			
		while ((DQ) && (DQ->delay <= systemTick))
80000760:	48 e8       	lddpc	r8,80000798 <dlay+0xa4>
80000762:	70 08       	ld.w	r8,r8[0x0]
80000764:	58 08       	cp.w	r8,0
80000766:	c0 d0       	breq	80000780 <dlay+0x8c>
80000768:	48 c8       	lddpc	r8,80000798 <dlay+0xa4>
8000076a:	70 08       	ld.w	r8,r8[0x0]
8000076c:	f0 ea 00 68 	ld.d	r10,r8[104]
80000770:	48 f8       	lddpc	r8,800007ac <dlay+0xb8>
80000772:	f0 e8 00 00 	ld.d	r8,r8[0]
80000776:	10 3a       	cp.w	r10,r8
80000778:	f2 0b 13 00 	cpc	r11,r9
8000077c:	fe 98 ff c3 	brls	80000702 <dlay+0xe>
		
			tmp->delay = 0;
			ROSA_TM_ACTION(PA[tmp->priority], tmp, Install);
		}

		PREEMPTASK = readyQueueSearch();
80000780:	f0 1f 00 0c 	mcall	800007b0 <dlay+0xbc>
80000784:	18 99       	mov	r9,r12
80000786:	48 c8       	lddpc	r8,800007b4 <dlay+0xc0>
80000788:	91 09       	st.w	r8[0x0],r9
		
		interruptEnable();
8000078a:	f0 1f 00 0c 	mcall	800007b8 <dlay+0xc4>
		
		ROSA_yield();
8000078e:	f0 1f 00 0c 	mcall	800007bc <dlay+0xc8>
	}
80000792:	cb 5b       	rjmp	800006fc <dlay+0x8>
80000794:	80 00       	ld.sh	r0,r0[0x0]
80000796:	1f 66       	ld.uh	r6,--pc
80000798:	00 00       	add	r0,r0
8000079a:	07 24       	ld.uh	r4,r3++
8000079c:	00 00       	add	r0,r0
8000079e:	06 70       	tst	r0,r3
800007a0:	80 00       	ld.sh	r0,r0[0x0]
800007a2:	06 00       	add	r0,r3
800007a4:	00 00       	add	r0,r0
800007a6:	06 74       	tst	r4,r3
800007a8:	80 00       	ld.sh	r0,r0[0x0]
800007aa:	05 a4       	ld.ub	r4,r2[0x2]
800007ac:	00 00       	add	r0,r0
800007ae:	07 9c       	ld.ub	r12,r3[0x1]
800007b0:	80 00       	ld.sh	r0,r0[0x0]
800007b2:	06 70       	tst	r0,r3
800007b4:	00 00       	add	r0,r0
800007b6:	06 a8       	st.w	r3++,r8
800007b8:	80 00       	ld.sh	r0,r0[0x0]
800007ba:	1f 6a       	ld.uh	r10,--pc
800007bc:	80 00       	ld.sh	r0,r0[0x0]
800007be:	0b d6       	ld.ub	r6,r5[0x5]

800007c0 <sysTasksCreate>:

/** @fn void idleCreate(void)
	@brief Creation of the idle task.
*/
void sysTasksCreate(void)
{
800007c0:	eb cd 40 80 	pushm	r7,lr
800007c4:	1a 97       	mov	r7,sp
	ROSA_tcbCreate(&IDLETASK_TCB, "idle", idle, idle_stack, SYS_TASK_STACK_SIZE);
800007c6:	32 08       	mov	r8,32
800007c8:	48 b9       	lddpc	r9,800007f4 <sysTasksCreate+0x34>
800007ca:	48 ca       	lddpc	r10,800007f8 <sysTasksCreate+0x38>
800007cc:	48 cb       	lddpc	r11,800007fc <sysTasksCreate+0x3c>
800007ce:	48 dc       	lddpc	r12,80000800 <sysTasksCreate+0x40>
800007d0:	f0 1f 00 0d 	mcall	80000804 <sysTasksCreate+0x44>
	IDLETASK = &IDLETASK_TCB;
800007d4:	48 d8       	lddpc	r8,80000808 <sysTasksCreate+0x48>
800007d6:	48 b9       	lddpc	r9,80000800 <sysTasksCreate+0x40>
800007d8:	91 09       	st.w	r8[0x0],r9
	
	ROSA_tcbCreate(&DELHANDL_TCB, "dlay", dlay, dlay_stack, SYS_TASK_STACK_SIZE);
800007da:	32 08       	mov	r8,32
800007dc:	48 c9       	lddpc	r9,8000080c <sysTasksCreate+0x4c>
800007de:	48 da       	lddpc	r10,80000810 <sysTasksCreate+0x50>
800007e0:	48 db       	lddpc	r11,80000814 <sysTasksCreate+0x54>
800007e2:	48 ec       	lddpc	r12,80000818 <sysTasksCreate+0x58>
800007e4:	f0 1f 00 08 	mcall	80000804 <sysTasksCreate+0x44>
	DELHANDL = &DELHANDL_TCB;
800007e8:	48 d8       	lddpc	r8,8000081c <sysTasksCreate+0x5c>
800007ea:	48 c9       	lddpc	r9,80000818 <sysTasksCreate+0x58>
800007ec:	91 09       	st.w	r8[0x0],r9
}
800007ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800007f2:	00 00       	add	r0,r0
800007f4:	00 00       	add	r0,r0
800007f6:	05 18       	ld.sh	r8,r2++
800007f8:	80 00       	ld.sh	r0,r0[0x0]
800007fa:	05 90       	ld.ub	r0,r2[0x1]
800007fc:	80 00       	ld.sh	r0,r0[0x0]
800007fe:	05 6c       	ld.uh	r12,--r2
80000800:	00 00       	add	r0,r0
80000802:	07 28       	ld.uh	r8,r3++
80000804:	80 00       	ld.sh	r0,r0[0x0]
80000806:	09 18       	ld.sh	r8,r4++
80000808:	00 00       	add	r0,r0
8000080a:	06 6c       	and	r12,r3
8000080c:	00 00       	add	r0,r0
8000080e:	05 98       	ld.ub	r8,r2[0x1]
80000810:	80 00       	ld.sh	r0,r0[0x0]
80000812:	06 f4       	st.b	--r3,r4
80000814:	80 00       	ld.sh	r0,r0[0x0]
80000816:	05 74       	ld.ub	r4,--r2
80000818:	00 00       	add	r0,r0
8000081a:	06 ac       	st.w	r3++,r12
8000081c:	00 00       	add	r0,r0
8000081e:	06 a4       	st.w	r3++,r4

80000820 <ROSA_init>:

void ROSA_init(void)
{
80000820:	eb cd 40 80 	pushm	r7,lr
80000824:	1a 97       	mov	r7,sp
80000826:	20 1d       	sub	sp,4
	int i = 0;
80000828:	30 08       	mov	r8,0
8000082a:	ef 48 ff fc 	st.w	r7[-4],r8
	systemTick = 0;
8000082e:	4a 7a       	lddpc	r10,800008c8 <ROSA_init+0xa8>
80000830:	30 08       	mov	r8,0
80000832:	30 09       	mov	r9,0
80000834:	f4 e9 00 00 	st.d	r10[0],r8
	
	//Do initialization of I/O drivers
	ledInit();									//LEDs
80000838:	f0 1f 00 25 	mcall	800008cc <ROSA_init+0xac>
	buttonInit();								//Buttons
8000083c:	f0 1f 00 25 	mcall	800008d0 <ROSA_init+0xb0>
	joystickInit();								//Joystick
80000840:	f0 1f 00 25 	mcall	800008d4 <ROSA_init+0xb4>
	potInit();									//Potentiometer
80000844:	f0 1f 00 25 	mcall	800008d8 <ROSA_init+0xb8>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
80000848:	e0 6a 1b 00 	mov	r10,6912
8000084c:	ea 1a 00 b7 	orh	r10,0xb7
80000850:	4a 3b       	lddpc	r11,800008dc <ROSA_init+0xbc>
80000852:	fe 7c 14 00 	mov	r12,-60416
80000856:	f0 1f 00 23 	mcall	800008e0 <ROSA_init+0xc0>
	usartWriteLine(USART, "USART initialized\r\n");
8000085a:	4a 3b       	lddpc	r11,800008e4 <ROSA_init+0xc4>
8000085c:	fe 7c 14 00 	mov	r12,-60416
80000860:	f0 1f 00 22 	mcall	800008e8 <ROSA_init+0xc8>

	interruptInit();
80000864:	f0 1f 00 22 	mcall	800008ec <ROSA_init+0xcc>
	interruptEnable();
80000868:	f0 1f 00 22 	mcall	800008f0 <ROSA_init+0xd0>
	timerInit(1);
8000086c:	30 1c       	mov	r12,1
8000086e:	f0 1f 00 22 	mcall	800008f4 <ROSA_init+0xd4>
	timerStart();
80000872:	f0 1f 00 22 	mcall	800008f8 <ROSA_init+0xd8>
	
	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
80000876:	4a 28       	lddpc	r8,800008fc <ROSA_init+0xdc>
80000878:	30 09       	mov	r9,0
8000087a:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
8000087c:	4a 18       	lddpc	r8,80000900 <ROSA_init+0xe0>
8000087e:	30 09       	mov	r9,0
80000880:	91 09       	st.w	r8[0x0],r9
	PREEMPTASK = NULL;
80000882:	4a 18       	lddpc	r8,80000904 <ROSA_init+0xe4>
80000884:	30 09       	mov	r9,0
80000886:	91 09       	st.w	r8[0x0],r9
	DQ = NULL;
80000888:	4a 08       	lddpc	r8,80000908 <ROSA_init+0xe8>
8000088a:	30 09       	mov	r9,0
8000088c:	91 09       	st.w	r8[0x0],r9
	LOCKEDSEMAPHORELIST=NULL;
8000088e:	4a 08       	lddpc	r8,8000090c <ROSA_init+0xec>
80000890:	30 09       	mov	r9,0
80000892:	91 09       	st.w	r8[0x0],r9
	
	/* Create system's tasks (idle, delay). */
	sysTasksCreate();
80000894:	f0 1f 00 1f 	mcall	80000910 <ROSA_init+0xf0>
	
	for (i = 0; i < MAXNPRIO; PA[i++] = NULL);
80000898:	30 08       	mov	r8,0
8000089a:	ef 48 ff fc 	st.w	r7[-4],r8
8000089e:	c0 c8       	rjmp	800008b6 <ROSA_init+0x96>
800008a0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800008a4:	49 c8       	lddpc	r8,80000914 <ROSA_init+0xf4>
800008a6:	30 0a       	mov	r10,0
800008a8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800008ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008b0:	2f f8       	sub	r8,-1
800008b2:	ef 48 ff fc 	st.w	r7[-4],r8
800008b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008ba:	58 b8       	cp.w	r8,11
800008bc:	fe 9a ff f2 	brle	800008a0 <ROSA_init+0x80>
}
800008c0:	2f fd       	sub	sp,-4
800008c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800008c6:	00 00       	add	r0,r0
800008c8:	00 00       	add	r0,r0
800008ca:	07 9c       	ld.ub	r12,r3[0x1]
800008cc:	80 00       	ld.sh	r0,r0[0x0]
800008ce:	0f e0       	ld.ub	r0,r7[0x6]
800008d0:	80 00       	ld.sh	r0,r0[0x0]
800008d2:	0d b4       	ld.ub	r4,r6[0x3]
800008d4:	80 00       	ld.sh	r0,r0[0x0]
800008d6:	0d dc       	ld.ub	r12,r6[0x5]
800008d8:	80 00       	ld.sh	r0,r0[0x0]
800008da:	10 cc       	st.b	r8++,r12
800008dc:	80 00       	ld.sh	r0,r0[0x0]
800008de:	05 60       	ld.uh	r0,--r2
800008e0:	80 00       	ld.sh	r0,r0[0x0]
800008e2:	12 80       	andn	r0,r9
800008e4:	80 00       	ld.sh	r0,r0[0x0]
800008e6:	05 7c       	ld.ub	r12,--r2
800008e8:	80 00       	ld.sh	r0,r0[0x0]
800008ea:	13 fc       	ld.ub	r12,r9[0x7]
800008ec:	80 00       	ld.sh	r0,r0[0x0]
800008ee:	1f 48       	ld.w	r8,--pc
800008f0:	80 00       	ld.sh	r0,r0[0x0]
800008f2:	1f 6a       	ld.uh	r10,--pc
800008f4:	80 00       	ld.sh	r0,r0[0x0]
800008f6:	14 50       	eor	r0,r10
800008f8:	80 00       	ld.sh	r0,r0[0x0]
800008fa:	14 7e       	tst	lr,r10
800008fc:	00 00       	add	r0,r0
800008fe:	06 70       	tst	r0,r3
80000900:	00 00       	add	r0,r0
80000902:	07 20       	ld.uh	r0,r3++
80000904:	00 00       	add	r0,r0
80000906:	06 a8       	st.w	r3++,r8
80000908:	00 00       	add	r0,r0
8000090a:	07 24       	ld.uh	r4,r3++
8000090c:	00 00       	add	r0,r0
8000090e:	06 50       	eor	r0,r3
80000910:	80 00       	ld.sh	r0,r0[0x0]
80000912:	07 c0       	ld.ub	r0,r3[0x4]
80000914:	00 00       	add	r0,r0
80000916:	06 74       	tst	r4,r3

80000918 <ROSA_tcbCreate>:

void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
80000918:	eb cd 40 80 	pushm	r7,lr
8000091c:	1a 97       	mov	r7,sp
8000091e:	20 6d       	sub	sp,24
80000920:	ef 4c ff f8 	st.w	r7[-8],r12
80000924:	ef 4b ff f4 	st.w	r7[-12],r11
80000928:	ef 4a ff f0 	st.w	r7[-16],r10
8000092c:	ef 49 ff ec 	st.w	r7[-20],r9
80000930:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++)
80000934:	30 08       	mov	r8,0
80000936:	ef 48 ff fc 	st.w	r7[-4],r8
8000093a:	c1 48       	rjmp	80000962 <ROSA_tcbCreate+0x4a>
	{
		tcbTask->id[i] = tcbName[i];
8000093c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000940:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000944:	ee fa ff f4 	ld.w	r10,r7[-12]
80000948:	f4 08 00 08 	add	r8,r10,r8
8000094c:	11 88       	ld.ub	r8,r8[0x0]
8000094e:	ee fa ff f8 	ld.w	r10,r7[-8]
80000952:	f4 09 00 09 	add	r9,r10,r9
80000956:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++)
80000958:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000095c:	2f f8       	sub	r8,-1
8000095e:	ef 48 ff fc 	st.w	r7[-4],r8
80000962:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000966:	58 38       	cp.w	r8,3
80000968:	fe 9a ff ea 	brle	8000093c <ROSA_tcbCreate+0x24>
	{
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
8000096c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000970:	30 09       	mov	r9,0
80000972:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
80000974:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000978:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000097c:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
8000097e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000982:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000986:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
80000988:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000098c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000990:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
80000992:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000996:	a3 68       	lsl	r8,0x2
80000998:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000099c:	10 09       	add	r9,r8
8000099e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009a2:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
800009a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009a8:	70 39       	ld.w	r9,r8[0xc]
800009aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009ae:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
800009b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009b4:	fc 19 00 1c 	movh	r9,0x1c
800009b8:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
800009ba:	ee fc ff f8 	ld.w	r12,r7[-8]
800009be:	f0 1f 00 03 	mcall	800009c8 <ROSA_tcbCreate+0xb0>
}
800009c2:	2f ad       	sub	sp,-24
800009c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800009c8:	80 00       	ld.sh	r0,r0[0x0]
800009ca:	0b 4a       	ld.w	r10,--r5

800009cc <ROSA_taskCreate>:

int16_t ROSA_taskCreate(ROSA_taskHandle_t ** pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t prio)
{
800009cc:	eb cd 40 80 	pushm	r7,lr
800009d0:	1a 97       	mov	r7,sp
800009d2:	20 6d       	sub	sp,24
800009d4:	ef 4c ff f8 	st.w	r7[-8],r12
800009d8:	ef 4b ff f4 	st.w	r7[-12],r11
800009dc:	ef 4a ff f0 	st.w	r7[-16],r10
800009e0:	ef 49 ff ec 	st.w	r7[-20],r9
800009e4:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) malloc(stackSize * sizeof(uint32_t)); 
800009e8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800009ec:	a3 68       	lsl	r8,0x2
800009ee:	10 9c       	mov	r12,r8
800009f0:	f0 1f 00 3f 	mcall	80000aec <ROSA_taskCreate+0x120>
800009f4:	18 98       	mov	r8,r12
800009f6:	ef 48 ff fc 	st.w	r7[-4],r8
	MEM_CHECK(tcbStack);
800009fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009fe:	58 08       	cp.w	r8,0
80000a00:	c0 31       	brne	80000a06 <ROSA_taskCreate+0x3a>
80000a02:	3f f8       	mov	r8,-1
80000a04:	c7 08       	rjmp	80000ae4 <ROSA_taskCreate+0x118>
	
	*pth = (ROSA_taskHandle_t *) malloc(sizeof(ROSA_taskHandle_t));
80000a06:	37 4c       	mov	r12,116
80000a08:	f0 1f 00 39 	mcall	80000aec <ROSA_taskCreate+0x120>
80000a0c:	18 98       	mov	r8,r12
80000a0e:	10 99       	mov	r9,r8
80000a10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a14:	91 09       	st.w	r8[0x0],r9
	MEM_CHECK(*pth);
80000a16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a1a:	70 08       	ld.w	r8,r8[0x0]
80000a1c:	58 08       	cp.w	r8,0
80000a1e:	c0 31       	brne	80000a24 <ROSA_taskCreate+0x58>
80000a20:	3f f8       	mov	r8,-1
80000a22:	c6 18       	rjmp	80000ae4 <ROSA_taskCreate+0x118>
	
	(*pth)->priority = prio;
80000a24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a28:	70 09       	ld.w	r9,r8[0x0]
80000a2a:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80000a2e:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
80000a32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a36:	70 0a       	ld.w	r10,r8[0x0]
80000a38:	30 08       	mov	r8,0
80000a3a:	30 09       	mov	r9,0
80000a3c:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
80000a40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a44:	70 09       	ld.w	r9,r8[0x0]
80000a46:	30 08       	mov	r8,0
80000a48:	f3 68 00 70 	st.b	r9[112],r8
	(*pth)->originalPriority = prio;
80000a4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a50:	70 09       	ld.w	r9,r8[0x0]
80000a52:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80000a56:	f3 68 00 71 	st.b	r9[113],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
80000a5a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000a5e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a62:	72 0c       	ld.w	r12,r9[0x0]
80000a64:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000a68:	ee fa ff f0 	ld.w	r10,r7[-16]
80000a6c:	ee fb ff f4 	ld.w	r11,r7[-12]
80000a70:	f0 1f 00 20 	mcall	80000af0 <ROSA_taskCreate+0x124>
	
	interruptDisable();
80000a74:	f0 1f 00 20 	mcall	80000af4 <ROSA_taskCreate+0x128>
	ROSA_TM_ACTION(PA[(*pth)->priority], *pth, Install);
80000a78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a7c:	70 08       	ld.w	r8,r8[0x0]
80000a7e:	f1 38 00 64 	ld.ub	r8,r8[100]
80000a82:	10 99       	mov	r9,r8
80000a84:	49 d8       	lddpc	r8,80000af8 <ROSA_taskCreate+0x12c>
80000a86:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000a8a:	49 d8       	lddpc	r8,80000afc <ROSA_taskCreate+0x130>
80000a8c:	91 09       	st.w	r8[0x0],r9
80000a8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a92:	70 08       	ld.w	r8,r8[0x0]
80000a94:	10 9c       	mov	r12,r8
80000a96:	f0 1f 00 1b 	mcall	80000b00 <ROSA_taskCreate+0x134>
80000a9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a9e:	70 08       	ld.w	r8,r8[0x0]
80000aa0:	f1 38 00 64 	ld.ub	r8,r8[100]
80000aa4:	10 99       	mov	r9,r8
80000aa6:	49 68       	lddpc	r8,80000afc <ROSA_taskCreate+0x130>
80000aa8:	70 0a       	ld.w	r10,r8[0x0]
80000aaa:	49 48       	lddpc	r8,80000af8 <ROSA_taskCreate+0x12c>
80000aac:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	interruptEnable();
80000ab0:	f0 1f 00 15 	mcall	80000b04 <ROSA_taskCreate+0x138>
			
	if ((EXECTASK) && (EXECTASK->priority < prio))
80000ab4:	49 58       	lddpc	r8,80000b08 <ROSA_taskCreate+0x13c>
80000ab6:	70 08       	ld.w	r8,r8[0x0]
80000ab8:	58 08       	cp.w	r8,0
80000aba:	c1 40       	breq	80000ae2 <ROSA_taskCreate+0x116>
80000abc:	49 38       	lddpc	r8,80000b08 <ROSA_taskCreate+0x13c>
80000abe:	70 08       	ld.w	r8,r8[0x0]
80000ac0:	f1 38 00 64 	ld.ub	r8,r8[100]
80000ac4:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000ac8:	f0 09 18 00 	cp.b	r9,r8
80000acc:	e0 88 00 0b 	brls	80000ae2 <ROSA_taskCreate+0x116>
	{
		PREEMPTASK = PA[prio];
80000ad0:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000ad4:	48 98       	lddpc	r8,80000af8 <ROSA_taskCreate+0x12c>
80000ad6:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000ada:	48 d8       	lddpc	r8,80000b0c <ROSA_taskCreate+0x140>
80000adc:	91 09       	st.w	r8[0x0],r9
		ROSA_yield();
80000ade:	f0 1f 00 0d 	mcall	80000b10 <ROSA_taskCreate+0x144>
	}	
	
	return 0;
80000ae2:	30 08       	mov	r8,0
}
80000ae4:	10 9c       	mov	r12,r8
80000ae6:	2f ad       	sub	sp,-24
80000ae8:	e3 cd 80 80 	ldm	sp++,r7,pc
80000aec:	80 00       	ld.sh	r0,r0[0x0]
80000aee:	16 00       	add	r0,r11
80000af0:	80 00       	ld.sh	r0,r0[0x0]
80000af2:	09 18       	ld.sh	r8,r4++
80000af4:	80 00       	ld.sh	r0,r0[0x0]
80000af6:	1f 66       	ld.uh	r6,--pc
80000af8:	00 00       	add	r0,r0
80000afa:	06 74       	tst	r4,r3
80000afc:	00 00       	add	r0,r0
80000afe:	06 70       	tst	r0,r3
80000b00:	80 00       	ld.sh	r0,r0[0x0]
80000b02:	05 a4       	ld.ub	r4,r2[0x2]
80000b04:	80 00       	ld.sh	r0,r0[0x0]
80000b06:	1f 6a       	ld.uh	r10,--pc
80000b08:	00 00       	add	r0,r0
80000b0a:	07 20       	ld.uh	r0,r3++
80000b0c:	00 00       	add	r0,r0
80000b0e:	06 a8       	st.w	r3++,r8
80000b10:	80 00       	ld.sh	r0,r0[0x0]
80000b12:	0b d6       	ld.ub	r6,r5[0x5]

80000b14 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80000b14:	4b 5c       	lddpc	r12,80000be8 <_yield+0xa>
	lda.w r11,EXECTASK
80000b16:	4b 6b       	lddpc	r11,80000bec <_yield+0xe>
	ld.w r12,r12[0x0]
80000b18:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
80000b1a:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000b1c:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000b1e:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000b20:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000b24:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
80000b26:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
80000b28:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
80000b2a:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80000b2e:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000b30:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80000b32:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000b34:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
80000b36:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
80000b38:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
80000b3a:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000b3c:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80000b3e:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000b40:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000b42:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000b44:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000b46:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000b48:	1c 9f       	mov	pc,lr

80000b4a <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
80000b4a:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000b4c:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80000b4e:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000b50:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000b54:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80000b58:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000b5c:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000b60:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000b64:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000b68:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000b6c:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000b70:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000b74:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
80000b76:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80000b78:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
80000b7a:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000b7c:	1c 9f       	mov	pc,lr

80000b7e <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
80000b7e:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000b80:	49 bc       	lddpc	r12,80000bec <_yield+0xe>
	ld.w r12,r12[0x0]
80000b82:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000b84:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
80000b86:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
80000b88:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
80000b8a:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
80000b8c:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
80000b8e:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
80000b90:	33 40       	mov	r0,52
	add r0,r12
80000b92:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000b94:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80000b98:	1a 90       	mov	r0,sp
	st.w --sp,r0
80000b9a:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80000b9c:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
80000ba0:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
80000ba2:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80000ba4:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
80000ba6:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
80000ba8:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
80000baa:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80000bac:	1c 9f       	mov	pc,lr

80000bae <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000bae:	49 0c       	lddpc	r12,80000bec <_yield+0xe>
	ld.w r12,r12[0x0]
80000bb0:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
80000bb2:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000bb4:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
80000bb6:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
80000bba:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80000bbc:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80000bbe:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
80000bc0:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80000bc2:	33 40       	mov	r0,52
	add r0,r12
80000bc4:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80000bc6:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80000bca:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000bcc:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80000bce:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80000bd0:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000bd2:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80000bd4:	d6 13       	rets

80000bd6 <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
80000bd6:	d4 01       	pushm	lr
	lda.w lr,_yield
80000bd8:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000bdc:	d7 33       	scall

80000bde <_yield>:
_yield:
	call contextSave
80000bde:	cd 0f       	rcall	80000b7e <contextSave>
	call scheduler
80000be0:	f0 1f 00 04 	mcall	80000bf0 <_yield+0x12>
	call contextRestore
80000be4:	ce 5f       	rcall	80000bae <contextRestore>
80000be6:	00 00       	add	r0,r0
80000be8:	00 00       	add	r0,r0
80000bea:	06 70       	tst	r0,r3
80000bec:	00 00       	add	r0,r0
80000bee:	07 20       	ld.uh	r0,r3++
80000bf0:	80 00       	ld.sh	r0,r0[0x0]
80000bf2:	0b f4       	ld.ub	r4,r5[0x7]

80000bf4 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000bf4:	eb cd 40 80 	pushm	r7,lr
80000bf8:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK) {
80000bfa:	48 f8       	lddpc	r8,80000c34 <scheduler+0x40>
80000bfc:	70 08       	ld.w	r8,r8[0x0]
80000bfe:	58 08       	cp.w	r8,0
80000c00:	c0 90       	breq	80000c12 <scheduler+0x1e>
		EXECTASK = PREEMPTASK;
80000c02:	48 d8       	lddpc	r8,80000c34 <scheduler+0x40>
80000c04:	70 09       	ld.w	r9,r8[0x0]
80000c06:	48 d8       	lddpc	r8,80000c38 <scheduler+0x44>
80000c08:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
80000c0a:	48 b8       	lddpc	r8,80000c34 <scheduler+0x40>
80000c0c:	30 09       	mov	r9,0
80000c0e:	91 09       	st.w	r8[0x0],r9
80000c10:	c1 08       	rjmp	80000c30 <scheduler+0x3c>
	}
	else {
		PA[EXECTASK->priority] = EXECTASK;
80000c12:	48 a8       	lddpc	r8,80000c38 <scheduler+0x44>
80000c14:	70 08       	ld.w	r8,r8[0x0]
80000c16:	f1 38 00 64 	ld.ub	r8,r8[100]
80000c1a:	10 99       	mov	r9,r8
80000c1c:	48 78       	lddpc	r8,80000c38 <scheduler+0x44>
80000c1e:	70 0a       	ld.w	r10,r8[0x0]
80000c20:	48 78       	lddpc	r8,80000c3c <scheduler+0x48>
80000c22:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		EXECTASK = EXECTASK->nexttcb;
80000c26:	48 58       	lddpc	r8,80000c38 <scheduler+0x44>
80000c28:	70 08       	ld.w	r8,r8[0x0]
80000c2a:	70 09       	ld.w	r9,r8[0x0]
80000c2c:	48 38       	lddpc	r8,80000c38 <scheduler+0x44>
80000c2e:	91 09       	st.w	r8[0x0],r9
	}
}
80000c30:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c34:	00 00       	add	r0,r0
80000c36:	06 a8       	st.w	r3++,r8
80000c38:	00 00       	add	r0,r0
80000c3a:	07 20       	ld.uh	r0,r3++
80000c3c:	00 00       	add	r0,r0
80000c3e:	06 74       	tst	r4,r3

80000c40 <ROSA_startScheduler>:

extern tcb * readyQueueSearch(void);

void ROSA_startScheduler(void)
{	
80000c40:	eb cd 40 80 	pushm	r7,lr
80000c44:	1a 97       	mov	r7,sp
	TCBLIST = ((tcb *) readyQueueSearch())->nexttcb;
80000c46:	f0 1f 00 06 	mcall	80000c5c <ROSA_startScheduler+0x1c>
80000c4a:	18 98       	mov	r8,r12
80000c4c:	70 09       	ld.w	r9,r8[0x0]
80000c4e:	48 58       	lddpc	r8,80000c60 <ROSA_startScheduler+0x20>
80000c50:	91 09       	st.w	r8[0x0],r9
	ROSA_start();
80000c52:	f0 1f 00 05 	mcall	80000c64 <ROSA_startScheduler+0x24>
}
80000c56:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c5a:	00 00       	add	r0,r0
80000c5c:	80 00       	ld.sh	r0,r0[0x0]
80000c5e:	06 70       	tst	r0,r3
80000c60:	00 00       	add	r0,r0
80000c62:	06 70       	tst	r0,r3
80000c64:	80 00       	ld.sh	r0,r0[0x0]
80000c66:	0b 14       	ld.sh	r4,r5++

80000c68 <C.6.9523>:
80000c68:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000c78 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000c78:	eb cd 40 80 	pushm	r7,lr
80000c7c:	1a 97       	mov	r7,sp
80000c7e:	20 2d       	sub	sp,8
	interruptDisable();
80000c80:	f0 1f 00 1c 	mcall	80000cf0 <timerISR+0x78>
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000c84:	fe 78 38 00 	mov	r8,-51200
80000c88:	ef 48 ff fc 	st.w	r7[-4],r8
	
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000c8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c90:	70 88       	ld.w	r8,r8[0x20]
80000c92:	ef 48 ff f8 	st.w	r7[-8],r8
	if (sr & AVR32_TC_CPCS_MASK)
80000c96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c9a:	e2 18 00 10 	andl	r8,0x10,COH
80000c9e:	c2 30       	breq	80000ce4 <timerISR+0x6c>
	{
		systemTick++;
80000ca0:	49 58       	lddpc	r8,80000cf4 <timerISR+0x7c>
80000ca2:	f0 ea 00 00 	ld.d	r10,r8[0]
80000ca6:	30 18       	mov	r8,1
80000ca8:	30 09       	mov	r9,0
80000caa:	f4 08 00 08 	add	r8,r10,r8
80000cae:	f6 09 00 49 	adc	r9,r11,r9
80000cb2:	49 1a       	lddpc	r10,80000cf4 <timerISR+0x7c>
80000cb4:	f4 e9 00 00 	st.d	r10[0],r8
		
		if ( (DQ) && (DQ->delay <= systemTick) ) 
80000cb8:	49 08       	lddpc	r8,80000cf8 <timerISR+0x80>
80000cba:	70 08       	ld.w	r8,r8[0x0]
80000cbc:	58 08       	cp.w	r8,0
80000cbe:	c1 30       	breq	80000ce4 <timerISR+0x6c>
80000cc0:	48 e8       	lddpc	r8,80000cf8 <timerISR+0x80>
80000cc2:	70 08       	ld.w	r8,r8[0x0]
80000cc4:	f0 ea 00 68 	ld.d	r10,r8[104]
80000cc8:	48 b8       	lddpc	r8,80000cf4 <timerISR+0x7c>
80000cca:	f0 e8 00 00 	ld.d	r8,r8[0]
80000cce:	10 3a       	cp.w	r10,r8
80000cd0:	f2 0b 13 00 	cpc	r11,r9
80000cd4:	e0 8b 00 08 	brhi	80000ce4 <timerISR+0x6c>
		{
			PREEMPTASK = DELHANDL;
80000cd8:	48 98       	lddpc	r8,80000cfc <timerISR+0x84>
80000cda:	70 09       	ld.w	r9,r8[0x0]
80000cdc:	48 98       	lddpc	r8,80000d00 <timerISR+0x88>
80000cde:	91 09       	st.w	r8[0x0],r9
			
			ROSA_yieldFromISR();
80000ce0:	f0 1f 00 09 	mcall	80000d04 <timerISR+0x8c>
		}
	}
	interruptEnable();
80000ce4:	f0 1f 00 09 	mcall	80000d08 <timerISR+0x90>
}
80000ce8:	2f ed       	sub	sp,-8
80000cea:	e3 cd 40 80 	ldm	sp++,r7,lr
80000cee:	d6 03       	rete
80000cf0:	80 00       	ld.sh	r0,r0[0x0]
80000cf2:	1f 66       	ld.uh	r6,--pc
80000cf4:	00 00       	add	r0,r0
80000cf6:	07 9c       	ld.ub	r12,r3[0x1]
80000cf8:	00 00       	add	r0,r0
80000cfa:	07 24       	ld.uh	r4,r3++
80000cfc:	00 00       	add	r0,r0
80000cfe:	06 a4       	st.w	r3++,r4
80000d00:	00 00       	add	r0,r0
80000d02:	06 a8       	st.w	r3++,r8
80000d04:	80 00       	ld.sh	r0,r0[0x0]
80000d06:	05 3c       	ld.ub	r12,r2++
80000d08:	80 00       	ld.sh	r0,r0[0x0]
80000d0a:	1f 6a       	ld.uh	r10,--pc

80000d0c <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80000d0c:	eb cd 40 80 	pushm	r7,lr
80000d10:	1a 97       	mov	r7,sp
80000d12:	20 7d       	sub	sp,28
80000d14:	ef 4c ff e4 	st.w	r7[-28],r12
	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000d18:	4a 48       	lddpc	r8,80000da8 <timerPeriodSet+0x9c>
80000d1a:	ee ca 00 18 	sub	r10,r7,24
80000d1e:	10 9b       	mov	r11,r8
80000d20:	f6 e8 00 00 	ld.d	r8,r11[0]
80000d24:	f4 e9 00 00 	st.d	r10[0],r8
80000d28:	f6 e8 00 08 	ld.d	r8,r11[8]
80000d2c:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000d30:	30 48       	mov	r8,4
80000d32:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80000d36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d3a:	20 18       	sub	r8,1
80000d3c:	a3 68       	lsl	r8,0x2
80000d3e:	ee 08 00 08 	add	r8,r7,r8
80000d42:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000d46:	e0 68 1b 00 	mov	r8,6912
80000d4a:	ea 18 00 b7 	orh	r8,0xb7
80000d4e:	f0 09 0c 08 	divs	r8,r8,r9
80000d52:	10 99       	mov	r9,r8
80000d54:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000d58:	b1 39       	mul	r9,r8
80000d5a:	e0 68 4d d3 	mov	r8,19923
80000d5e:	ea 18 10 62 	orh	r8,0x1062
80000d62:	f2 08 06 48 	mulu.d	r8,r9,r8
80000d66:	f2 08 16 06 	lsr	r8,r9,0x6
80000d6a:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80000d6e:	ee fc ff fc 	ld.w	r12,r7[-4]
80000d72:	f0 1f 00 0f 	mcall	80000dac <timerPeriodSet+0xa0>
	timerRCSet(rc);
80000d76:	ee fc ff f8 	ld.w	r12,r7[-8]
80000d7a:	f0 1f 00 0e 	mcall	80000db0 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80000d7e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d86:	f2 08 02 4a 	mul	r10,r9,r8
80000d8a:	e0 68 9f 81 	mov	r8,40833
80000d8e:	ea 18 16 5e 	orh	r8,0x165e
80000d92:	f4 08 04 48 	muls.d	r8,r10,r8
80000d96:	b5 49       	asr	r9,0x14
80000d98:	f4 08 14 1f 	asr	r8,r10,0x1f
80000d9c:	f2 08 01 08 	sub	r8,r9,r8
}
80000da0:	10 9c       	mov	r12,r8
80000da2:	2f 9d       	sub	sp,-28
80000da4:	e3 cd 80 80 	ldm	sp++,r7,pc
80000da8:	80 00       	ld.sh	r0,r0[0x0]
80000daa:	0c 68       	and	r8,r6
80000dac:	80 00       	ld.sh	r0,r0[0x0]
80000dae:	14 c4       	st.b	r10++,r4
80000db0:	80 00       	ld.sh	r0,r0[0x0]
80000db2:	14 ae       	st.w	r10++,lr

80000db4 <buttonInit>:
80000db4:	eb cd 40 80 	pushm	r7,lr
80000db8:	1a 97       	mov	r7,sp
80000dba:	30 1b       	mov	r11,1
80000dbc:	35 8c       	mov	r12,88
80000dbe:	f0 1f 00 07 	mcall	80000dd8 <buttonInit+0x24>
80000dc2:	30 1b       	mov	r11,1
80000dc4:	35 5c       	mov	r12,85
80000dc6:	f0 1f 00 05 	mcall	80000dd8 <buttonInit+0x24>
80000dca:	30 1b       	mov	r11,1
80000dcc:	35 2c       	mov	r12,82
80000dce:	f0 1f 00 03 	mcall	80000dd8 <buttonInit+0x24>
80000dd2:	e3 cd 80 80 	ldm	sp++,r7,pc
80000dd6:	00 00       	add	r0,r0
80000dd8:	80 00       	ld.sh	r0,r0[0x0]
80000dda:	0e 48       	or	r8,r7

80000ddc <joystickInit>:
80000ddc:	eb cd 40 80 	pushm	r7,lr
80000de0:	1a 97       	mov	r7,sp
80000de2:	30 1b       	mov	r11,1
80000de4:	31 bc       	mov	r12,27
80000de6:	f0 1f 00 0b 	mcall	80000e10 <joystickInit+0x34>
80000dea:	30 1b       	mov	r11,1
80000dec:	31 9c       	mov	r12,25
80000dee:	f0 1f 00 09 	mcall	80000e10 <joystickInit+0x34>
80000df2:	30 1b       	mov	r11,1
80000df4:	31 cc       	mov	r12,28
80000df6:	f0 1f 00 07 	mcall	80000e10 <joystickInit+0x34>
80000dfa:	30 1b       	mov	r11,1
80000dfc:	31 4c       	mov	r12,20
80000dfe:	f0 1f 00 05 	mcall	80000e10 <joystickInit+0x34>
80000e02:	30 1b       	mov	r11,1
80000e04:	31 ac       	mov	r12,26
80000e06:	f0 1f 00 03 	mcall	80000e10 <joystickInit+0x34>
80000e0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e0e:	00 00       	add	r0,r0
80000e10:	80 00       	ld.sh	r0,r0[0x0]
80000e12:	0e 48       	or	r8,r7

80000e14 <delay_ms>:
80000e14:	eb cd 40 80 	pushm	r7,lr
80000e18:	1a 97       	mov	r7,sp
80000e1a:	20 2d       	sub	sp,8
80000e1c:	ef 4c ff f8 	st.w	r7[-8],r12
80000e20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e24:	e0 69 04 42 	mov	r9,1090
80000e28:	b3 38       	mul	r8,r9
80000e2a:	ef 48 ff fc 	st.w	r7[-4],r8
80000e2e:	c0 68       	rjmp	80000e3a <delay_ms+0x26>
80000e30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e34:	20 18       	sub	r8,1
80000e36:	ef 48 ff fc 	st.w	r7[-4],r8
80000e3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e3e:	58 08       	cp.w	r8,0
80000e40:	cf 81       	brne	80000e30 <delay_ms+0x1c>
80000e42:	2f ed       	sub	sp,-8
80000e44:	e3 cd 80 80 	ldm	sp++,r7,pc

80000e48 <gpioInit>:
80000e48:	eb cd 40 80 	pushm	r7,lr
80000e4c:	1a 97       	mov	r7,sp
80000e4e:	20 7d       	sub	sp,28
80000e50:	ef 4c ff ec 	st.w	r7[-20],r12
80000e54:	ef 4b ff e8 	st.w	r7[-24],r11
80000e58:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e5c:	a5 58       	asr	r8,0x5
80000e5e:	ef 48 ff f4 	st.w	r7[-12],r8
80000e62:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e66:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000e6a:	ef 48 ff fc 	st.w	r7[-4],r8
80000e6e:	30 19       	mov	r9,1
80000e70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e74:	f2 08 09 48 	lsl	r8,r9,r8
80000e78:	ef 48 ff f8 	st.w	r7[-8],r8
80000e7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e80:	a9 68       	lsl	r8,0x8
80000e82:	e0 28 f0 00 	sub	r8,61440
80000e86:	ef 48 ff f0 	st.w	r7[-16],r8
80000e8a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e8e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e92:	91 19       	st.w	r8[0x4],r9
80000e94:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e98:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e9c:	91 69       	st.w	r8[0x18],r9
80000e9e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ea2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ea6:	91 a9       	st.w	r8[0x28],r9
80000ea8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000eac:	ef 48 ff e4 	st.w	r7[-28],r8
80000eb0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000eb4:	58 08       	cp.w	r8,0
80000eb6:	c0 60       	breq	80000ec2 <gpioInit+0x7a>
80000eb8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000ebc:	58 18       	cp.w	r8,1
80000ebe:	c0 90       	breq	80000ed0 <gpioInit+0x88>
80000ec0:	c0 f8       	rjmp	80000ede <gpioInit+0x96>
80000ec2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ec6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000eca:	f1 49 00 44 	st.w	r8[68],r9
80000ece:	c0 e8       	rjmp	80000eea <gpioInit+0xa2>
80000ed0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ed4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ed8:	f1 49 00 48 	st.w	r8[72],r9
80000edc:	c0 78       	rjmp	80000eea <gpioInit+0xa2>
80000ede:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ee2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ee6:	f1 49 00 48 	st.w	r8[72],r9
80000eea:	2f 9d       	sub	sp,-28
80000eec:	e3 cd 80 80 	ldm	sp++,r7,pc

80000ef0 <gpioClear>:
80000ef0:	eb cd 40 80 	pushm	r7,lr
80000ef4:	1a 97       	mov	r7,sp
80000ef6:	20 5d       	sub	sp,20
80000ef8:	ef 4c ff ec 	st.w	r7[-20],r12
80000efc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000f00:	a5 58       	asr	r8,0x5
80000f02:	ef 48 ff f4 	st.w	r7[-12],r8
80000f06:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000f0a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000f0e:	ef 48 ff fc 	st.w	r7[-4],r8
80000f12:	30 19       	mov	r9,1
80000f14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f18:	f2 08 09 48 	lsl	r8,r9,r8
80000f1c:	ef 48 ff f8 	st.w	r7[-8],r8
80000f20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f24:	a9 68       	lsl	r8,0x8
80000f26:	e0 28 f0 00 	sub	r8,61440
80000f2a:	ef 48 ff f0 	st.w	r7[-16],r8
80000f2e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f32:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f36:	f1 49 00 58 	st.w	r8[88],r9
80000f3a:	2f bd       	sub	sp,-20
80000f3c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000f40 <gpioSet>:
80000f40:	eb cd 40 80 	pushm	r7,lr
80000f44:	1a 97       	mov	r7,sp
80000f46:	20 5d       	sub	sp,20
80000f48:	ef 4c ff ec 	st.w	r7[-20],r12
80000f4c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000f50:	a5 58       	asr	r8,0x5
80000f52:	ef 48 ff f4 	st.w	r7[-12],r8
80000f56:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000f5a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000f5e:	ef 48 ff fc 	st.w	r7[-4],r8
80000f62:	30 19       	mov	r9,1
80000f64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f68:	f2 08 09 48 	lsl	r8,r9,r8
80000f6c:	ef 48 ff f8 	st.w	r7[-8],r8
80000f70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f74:	a9 68       	lsl	r8,0x8
80000f76:	e0 28 f0 00 	sub	r8,61440
80000f7a:	ef 48 ff f0 	st.w	r7[-16],r8
80000f7e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f82:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f86:	f1 49 00 54 	st.w	r8[84],r9
80000f8a:	2f bd       	sub	sp,-20
80000f8c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000f90 <gpioToggle>:
80000f90:	eb cd 40 80 	pushm	r7,lr
80000f94:	1a 97       	mov	r7,sp
80000f96:	20 5d       	sub	sp,20
80000f98:	ef 4c ff ec 	st.w	r7[-20],r12
80000f9c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000fa0:	a5 58       	asr	r8,0x5
80000fa2:	ef 48 ff f4 	st.w	r7[-12],r8
80000fa6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000faa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000fae:	ef 48 ff fc 	st.w	r7[-4],r8
80000fb2:	30 19       	mov	r9,1
80000fb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fb8:	f2 08 09 48 	lsl	r8,r9,r8
80000fbc:	ef 48 ff f8 	st.w	r7[-8],r8
80000fc0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000fc4:	a9 68       	lsl	r8,0x8
80000fc6:	e0 28 f0 00 	sub	r8,61440
80000fca:	ef 48 ff f0 	st.w	r7[-16],r8
80000fce:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000fd2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000fd6:	f1 49 00 5c 	st.w	r8[92],r9
80000fda:	2f bd       	sub	sp,-20
80000fdc:	e3 cd 80 80 	ldm	sp++,r7,pc

80000fe0 <ledInit>:
80000fe0:	eb cd 40 80 	pushm	r7,lr
80000fe4:	1a 97       	mov	r7,sp
80000fe6:	20 9d       	sub	sp,36
80000fe8:	49 e8       	lddpc	r8,80001060 <ledInit+0x80>
80000fea:	ee cb 00 24 	sub	r11,r7,36
80000fee:	10 9a       	mov	r10,r8
80000ff0:	f4 e8 00 00 	ld.d	r8,r10[0]
80000ff4:	f6 e9 00 00 	st.d	r11[0],r8
80000ff8:	f4 e8 00 08 	ld.d	r8,r10[8]
80000ffc:	f6 e9 00 08 	st.d	r11[8],r8
80001000:	f4 e8 00 10 	ld.d	r8,r10[16]
80001004:	f6 e9 00 10 	st.d	r11[16],r8
80001008:	f4 e8 00 18 	ld.d	r8,r10[24]
8000100c:	f6 e9 00 18 	st.d	r11[24],r8
80001010:	30 08       	mov	r8,0
80001012:	ef 48 ff fc 	st.w	r7[-4],r8
80001016:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000101a:	a3 68       	lsl	r8,0x2
8000101c:	ee 08 00 08 	add	r8,r7,r8
80001020:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80001024:	10 9c       	mov	r12,r8
80001026:	f0 1f 00 10 	mcall	80001064 <ledInit+0x84>
8000102a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000102e:	a3 68       	lsl	r8,0x2
80001030:	ee 08 00 08 	add	r8,r7,r8
80001034:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80001038:	30 0b       	mov	r11,0
8000103a:	10 9c       	mov	r12,r8
8000103c:	f0 1f 00 0b 	mcall	80001068 <ledInit+0x88>
80001040:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001044:	58 78       	cp.w	r8,7
80001046:	5f 18       	srne	r8
80001048:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000104c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001050:	2f f8       	sub	r8,-1
80001052:	ef 48 ff fc 	st.w	r7[-4],r8
80001056:	58 09       	cp.w	r9,0
80001058:	cd f1       	brne	80001016 <ledInit+0x36>
8000105a:	2f 7d       	sub	sp,-36
8000105c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001060:	80 00       	ld.sh	r0,r0[0x0]
80001062:	22 00       	sub	r0,32
80001064:	80 00       	ld.sh	r0,r0[0x0]
80001066:	10 8c       	andn	r12,r8
80001068:	80 00       	ld.sh	r0,r0[0x0]
8000106a:	0e 48       	or	r8,r7

8000106c <ledOn>:
8000106c:	eb cd 40 80 	pushm	r7,lr
80001070:	1a 97       	mov	r7,sp
80001072:	20 1d       	sub	sp,4
80001074:	ef 4c ff fc 	st.w	r7[-4],r12
80001078:	ee fc ff fc 	ld.w	r12,r7[-4]
8000107c:	f0 1f 00 03 	mcall	80001088 <ledOn+0x1c>
80001080:	2f fd       	sub	sp,-4
80001082:	e3 cd 80 80 	ldm	sp++,r7,pc
80001086:	00 00       	add	r0,r0
80001088:	80 00       	ld.sh	r0,r0[0x0]
8000108a:	0e f0       	st.b	--r7,r0

8000108c <ledOff>:
8000108c:	eb cd 40 80 	pushm	r7,lr
80001090:	1a 97       	mov	r7,sp
80001092:	20 1d       	sub	sp,4
80001094:	ef 4c ff fc 	st.w	r7[-4],r12
80001098:	ee fc ff fc 	ld.w	r12,r7[-4]
8000109c:	f0 1f 00 03 	mcall	800010a8 <ledOff+0x1c>
800010a0:	2f fd       	sub	sp,-4
800010a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800010a6:	00 00       	add	r0,r0
800010a8:	80 00       	ld.sh	r0,r0[0x0]
800010aa:	0f 40       	ld.w	r0,--r7

800010ac <ledToggle>:
800010ac:	eb cd 40 80 	pushm	r7,lr
800010b0:	1a 97       	mov	r7,sp
800010b2:	20 1d       	sub	sp,4
800010b4:	ef 4c ff fc 	st.w	r7[-4],r12
800010b8:	ee fc ff fc 	ld.w	r12,r7[-4]
800010bc:	f0 1f 00 03 	mcall	800010c8 <ledToggle+0x1c>
800010c0:	2f fd       	sub	sp,-4
800010c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800010c6:	00 00       	add	r0,r0
800010c8:	80 00       	ld.sh	r0,r0[0x0]
800010ca:	0f 90       	ld.ub	r0,r7[0x1]

800010cc <potInit>:
800010cc:	d3 01       	pushm	r11-r12
800010ce:	e0 6c 10 00 	mov	r12,4096
800010d2:	ea 1c ff ff 	orh	r12,0xffff
800010d6:	31 6b       	mov	r11,22
800010d8:	99 2b       	st.w	r12[0x8],r11
800010da:	99 6b       	st.w	r12[0x18],r11
800010dc:	99 6b       	st.w	r12[0x18],r11
800010de:	e0 6c 3c 00 	mov	r12,15360
800010e2:	ea 1c ff ff 	orh	r12,0xffff
800010e6:	30 1b       	mov	r11,1
800010e8:	99 0b       	st.w	r12[0x0],r11
800010ea:	e0 6b 0f 1f 	mov	r11,3871
800010ee:	b1 6b       	lsl	r11,0x10
800010f0:	99 1b       	st.w	r12[0x4],r11
800010f2:	30 2b       	mov	r11,2
800010f4:	99 4b       	st.w	r12[0x10],r11
800010f6:	d3 02       	popm	r11-r12
800010f8:	1c 9f       	mov	pc,lr

800010fa <potGetValue>:
800010fa:	d1 81       	pushm	r10-r11
800010fc:	e0 6c 3c 00 	mov	r12,15360
80001100:	ea 1c ff ff 	orh	r12,0xffff
80001104:	30 2b       	mov	r11,2
80001106:	99 0b       	st.w	r12[0x0],r11

80001108 <a1>:
80001108:	78 7a       	ld.w	r10,r12[0x1c]
8000110a:	16 7a       	tst	r10,r11
8000110c:	cf e0       	breq	80001108 <a1>
8000110e:	78 dc       	ld.w	r12,r12[0x34]
80001110:	d1 82       	popm	r10-r11
80001112:	1c 9f       	mov	pc,lr

80001114 <usartReset>:
80001114:	eb cd 40 80 	pushm	r7,lr
80001118:	1a 97       	mov	r7,sp
8000111a:	20 3d       	sub	sp,12
8000111c:	ef 4c ff f8 	st.w	r7[-8],r12
80001120:	f0 1f 00 16 	mcall	80001178 <usartReset+0x64>
80001124:	18 98       	mov	r8,r12
80001126:	ef 48 ff fc 	st.w	r7[-4],r8
8000112a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000112e:	58 08       	cp.w	r8,0
80001130:	c0 30       	breq	80001136 <usartReset+0x22>
80001132:	f0 1f 00 13 	mcall	8000117c <usartReset+0x68>
80001136:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000113a:	3f f8       	mov	r8,-1
8000113c:	93 38       	st.w	r9[0xc],r8
8000113e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001142:	70 58       	ld.w	r8,r8[0x14]
80001144:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001148:	58 08       	cp.w	r8,0
8000114a:	c0 30       	breq	80001150 <usartReset+0x3c>
8000114c:	f0 1f 00 0d 	mcall	80001180 <usartReset+0x6c>
80001150:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001154:	30 08       	mov	r8,0
80001156:	93 18       	st.w	r9[0x4],r8
80001158:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000115c:	30 08       	mov	r8,0
8000115e:	93 98       	st.w	r9[0x24],r8
80001160:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001164:	30 08       	mov	r8,0
80001166:	93 a8       	st.w	r9[0x28],r8
80001168:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000116c:	ea 68 61 0c 	mov	r8,680204
80001170:	93 08       	st.w	r9[0x0],r8
80001172:	2f dd       	sub	sp,-12
80001174:	e3 cd 80 80 	ldm	sp++,r7,pc
80001178:	80 00       	ld.sh	r0,r0[0x0]
8000117a:	1f 6e       	ld.uh	lr,--pc
8000117c:	80 00       	ld.sh	r0,r0[0x0]
8000117e:	1f 66       	ld.uh	r6,--pc
80001180:	80 00       	ld.sh	r0,r0[0x0]
80001182:	1f 6a       	ld.uh	r10,--pc

80001184 <usartSetBaudrate>:
80001184:	eb cd 40 80 	pushm	r7,lr
80001188:	1a 97       	mov	r7,sp
8000118a:	20 bd       	sub	sp,44
8000118c:	ef 4c ff ec 	st.w	r7[-20],r12
80001190:	ef 4b ff e8 	st.w	r7[-24],r11
80001194:	ef 4a ff e4 	st.w	r7[-28],r10
80001198:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000119c:	f0 09 15 04 	lsl	r9,r8,0x4
800011a0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800011a4:	10 39       	cp.w	r9,r8
800011a6:	e0 8b 00 06 	brhi	800011b2 <usartSetBaudrate+0x2e>
800011aa:	31 09       	mov	r9,16
800011ac:	ef 49 ff d4 	st.w	r7[-44],r9
800011b0:	c0 48       	rjmp	800011b8 <usartSetBaudrate+0x34>
800011b2:	30 88       	mov	r8,8
800011b4:	ef 48 ff d4 	st.w	r7[-44],r8
800011b8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800011bc:	ef 49 ff f0 	st.w	r7[-16],r9
800011c0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800011c4:	f0 0a 15 03 	lsl	r10,r8,0x3
800011c8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800011cc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800011d0:	f2 08 02 48 	mul	r8,r9,r8
800011d4:	a1 98       	lsr	r8,0x1
800011d6:	10 0a       	add	r10,r8
800011d8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800011dc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800011e0:	f2 08 02 48 	mul	r8,r9,r8
800011e4:	f4 08 0d 08 	divu	r8,r10,r8
800011e8:	ef 48 ff f4 	st.w	r7[-12],r8
800011ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800011f0:	a3 98       	lsr	r8,0x3
800011f2:	ef 48 ff f8 	st.w	r7[-8],r8
800011f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800011fa:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800011fe:	ef 48 ff fc 	st.w	r7[-4],r8
80001202:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001206:	58 08       	cp.w	r8,0
80001208:	c0 70       	breq	80001216 <usartSetBaudrate+0x92>
8000120a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000120e:	e0 48 ff ff 	cp.w	r8,65535
80001212:	e0 88 00 06 	brls	8000121e <usartSetBaudrate+0x9a>
80001216:	30 18       	mov	r8,1
80001218:	ef 48 ff d8 	st.w	r7[-40],r8
8000121c:	c2 c8       	rjmp	80001274 <usartSetBaudrate+0xf0>
8000121e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001222:	70 18       	ld.w	r8,r8[0x4]
80001224:	10 99       	mov	r9,r8
80001226:	e4 19 ff f7 	andh	r9,0xfff7
8000122a:	e0 19 fe cf 	andl	r9,0xfecf
8000122e:	ef 49 ff dc 	st.w	r7[-36],r9
80001232:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001236:	59 08       	cp.w	r8,16
80001238:	c0 60       	breq	80001244 <usartSetBaudrate+0xc0>
8000123a:	e8 68 00 00 	mov	r8,524288
8000123e:	ef 48 ff e0 	st.w	r7[-32],r8
80001242:	c0 48       	rjmp	8000124a <usartSetBaudrate+0xc6>
80001244:	30 09       	mov	r9,0
80001246:	ef 49 ff e0 	st.w	r7[-32],r9
8000124a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000124e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80001252:	10 49       	or	r9,r8
80001254:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001258:	91 19       	st.w	r8[0x4],r9
8000125a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000125e:	f0 09 15 10 	lsl	r9,r8,0x10
80001262:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001266:	10 49       	or	r9,r8
80001268:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000126c:	91 89       	st.w	r8[0x20],r9
8000126e:	30 09       	mov	r9,0
80001270:	ef 49 ff d8 	st.w	r7[-40],r9
80001274:	ee f8 ff d8 	ld.w	r8,r7[-40]
80001278:	10 9c       	mov	r12,r8
8000127a:	2f 5d       	sub	sp,-44
8000127c:	e3 cd 80 80 	ldm	sp++,r7,pc

80001280 <usartInit>:
80001280:	eb cd 40 80 	pushm	r7,lr
80001284:	1a 97       	mov	r7,sp
80001286:	20 4d       	sub	sp,16
80001288:	ef 4c ff f8 	st.w	r7[-8],r12
8000128c:	ef 4b ff f4 	st.w	r7[-12],r11
80001290:	ef 4a ff f0 	st.w	r7[-16],r10
80001294:	fe 78 10 00 	mov	r8,-61440
80001298:	ef 48 ff fc 	st.w	r7[-4],r8
8000129c:	ee f9 ff fc 	ld.w	r9,r7[-4]
800012a0:	30 18       	mov	r8,1
800012a2:	93 28       	st.w	r9[0x8],r8
800012a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800012a8:	30 28       	mov	r8,2
800012aa:	93 28       	st.w	r9[0x8],r8
800012ac:	ee fc ff f8 	ld.w	r12,r7[-8]
800012b0:	f0 1f 00 3b 	mcall	8000139c <usartInit+0x11c>
800012b4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800012b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800012bc:	70 08       	ld.w	r8,r8[0x0]
800012be:	12 9a       	mov	r10,r9
800012c0:	10 9b       	mov	r11,r8
800012c2:	ee fc ff f8 	ld.w	r12,r7[-8]
800012c6:	f0 1f 00 37 	mcall	800013a0 <usartInit+0x120>
800012ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800012ce:	11 c9       	ld.ub	r9,r8[0x4]
800012d0:	30 98       	mov	r8,9
800012d2:	f0 09 18 00 	cp.b	r9,r8
800012d6:	c0 a1       	brne	800012ea <usartInit+0x6a>
800012d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012dc:	70 18       	ld.w	r8,r8[0x4]
800012de:	10 99       	mov	r9,r8
800012e0:	b1 b9       	sbr	r9,0x11
800012e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012e6:	91 19       	st.w	r8[0x4],r9
800012e8:	c0 d8       	rjmp	80001302 <usartInit+0x82>
800012ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012ee:	70 19       	ld.w	r9,r8[0x4]
800012f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800012f4:	11 c8       	ld.ub	r8,r8[0x4]
800012f6:	20 58       	sub	r8,5
800012f8:	a7 68       	lsl	r8,0x6
800012fa:	10 49       	or	r9,r8
800012fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001300:	91 19       	st.w	r8[0x4],r9
80001302:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001306:	70 1a       	ld.w	r10,r8[0x4]
80001308:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000130c:	11 d8       	ld.ub	r8,r8[0x5]
8000130e:	f0 09 15 09 	lsl	r9,r8,0x9
80001312:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001316:	f1 38 00 08 	ld.ub	r8,r8[8]
8000131a:	af 68       	lsl	r8,0xe
8000131c:	f3 e8 10 08 	or	r8,r9,r8
80001320:	f5 e8 10 09 	or	r9,r10,r8
80001324:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001328:	91 19       	st.w	r8[0x4],r9
8000132a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000132e:	90 39       	ld.sh	r9,r8[0x6]
80001330:	30 28       	mov	r8,2
80001332:	f0 09 19 00 	cp.h	r9,r8
80001336:	e0 88 00 14 	brls	8000135e <usartInit+0xde>
8000133a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000133e:	70 18       	ld.w	r8,r8[0x4]
80001340:	10 99       	mov	r9,r8
80001342:	ad b9       	sbr	r9,0xd
80001344:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001348:	91 19       	st.w	r8[0x4],r9
8000134a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000134e:	90 38       	ld.sh	r8,r8[0x6]
80001350:	5c 78       	castu.h	r8
80001352:	20 28       	sub	r8,2
80001354:	10 99       	mov	r9,r8
80001356:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000135a:	91 a9       	st.w	r8[0x28],r9
8000135c:	c0 d8       	rjmp	80001376 <usartInit+0xf6>
8000135e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001362:	70 19       	ld.w	r9,r8[0x4]
80001364:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001368:	90 38       	ld.sh	r8,r8[0x6]
8000136a:	5c 78       	castu.h	r8
8000136c:	ad 68       	lsl	r8,0xc
8000136e:	10 49       	or	r9,r8
80001370:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001374:	91 19       	st.w	r8[0x4],r9
80001376:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000137a:	70 18       	ld.w	r8,r8[0x4]
8000137c:	10 99       	mov	r9,r8
8000137e:	e0 19 ff f0 	andl	r9,0xfff0
80001382:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001386:	91 19       	st.w	r8[0x4],r9
80001388:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000138c:	35 08       	mov	r8,80
8000138e:	93 08       	st.w	r9[0x0],r8
80001390:	30 08       	mov	r8,0
80001392:	10 9c       	mov	r12,r8
80001394:	2f cd       	sub	sp,-16
80001396:	e3 cd 80 80 	ldm	sp++,r7,pc
8000139a:	00 00       	add	r0,r0
8000139c:	80 00       	ld.sh	r0,r0[0x0]
8000139e:	11 14       	ld.sh	r4,r8++
800013a0:	80 00       	ld.sh	r0,r0[0x0]
800013a2:	11 84       	ld.ub	r4,r8[0x0]

800013a4 <usartWriteChar>:
800013a4:	eb cd 40 80 	pushm	r7,lr
800013a8:	1a 97       	mov	r7,sp
800013aa:	20 3d       	sub	sp,12
800013ac:	ef 4c ff f8 	st.w	r7[-8],r12
800013b0:	16 98       	mov	r8,r11
800013b2:	ef 68 ff f4 	st.b	r7[-12],r8
800013b6:	e4 68 00 00 	mov	r8,262144
800013ba:	ef 48 ff fc 	st.w	r7[-4],r8
800013be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013c2:	58 08       	cp.w	r8,0
800013c4:	5f 18       	srne	r8
800013c6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800013ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013ce:	20 18       	sub	r8,1
800013d0:	ef 48 ff fc 	st.w	r7[-4],r8
800013d4:	12 98       	mov	r8,r9
800013d6:	ec 18 00 01 	eorl	r8,0x1
800013da:	5c 58       	castu.b	r8
800013dc:	c0 71       	brne	800013ea <usartWriteChar+0x46>
800013de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800013e2:	70 58       	ld.w	r8,r8[0x14]
800013e4:	e2 18 00 02 	andl	r8,0x2,COH
800013e8:	ce b0       	breq	800013be <usartWriteChar+0x1a>
800013ea:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800013ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800013f2:	91 79       	st.w	r8[0x1c],r9
800013f4:	2f dd       	sub	sp,-12
800013f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800013fa:	d7 03       	nop

800013fc <usartWriteLine>:
800013fc:	eb cd 40 80 	pushm	r7,lr
80001400:	1a 97       	mov	r7,sp
80001402:	20 2d       	sub	sp,8
80001404:	ef 4c ff fc 	st.w	r7[-4],r12
80001408:	ef 4b ff f8 	st.w	r7[-8],r11
8000140c:	c1 88       	rjmp	8000143c <usartWriteLine+0x40>
8000140e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001412:	11 88       	ld.ub	r8,r8[0x0]
80001414:	58 a8       	cp.w	r8,10
80001416:	c0 61       	brne	80001422 <usartWriteLine+0x26>
80001418:	30 db       	mov	r11,13
8000141a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000141e:	f0 1f 00 0c 	mcall	8000144c <usartWriteLine+0x50>
80001422:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001426:	11 88       	ld.ub	r8,r8[0x0]
80001428:	10 9b       	mov	r11,r8
8000142a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000142e:	f0 1f 00 08 	mcall	8000144c <usartWriteLine+0x50>
80001432:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001436:	2f f8       	sub	r8,-1
80001438:	ef 48 ff f8 	st.w	r7[-8],r8
8000143c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001440:	11 88       	ld.ub	r8,r8[0x0]
80001442:	58 08       	cp.w	r8,0
80001444:	ce 51       	brne	8000140e <usartWriteLine+0x12>
80001446:	2f ed       	sub	sp,-8
80001448:	e3 cd 80 80 	ldm	sp++,r7,pc
8000144c:	80 00       	ld.sh	r0,r0[0x0]
8000144e:	13 a4       	ld.ub	r4,r9[0x2]

80001450 <timerInit>:
80001450:	d5 01       	pushm	r11,lr
80001452:	d2 01       	pushm	r12
80001454:	f0 1f 00 28 	mcall	800014f4 <timerClearInterrupt+0x10>
80001458:	f0 1f 00 28 	mcall	800014f8 <timerClearInterrupt+0x14>
8000145c:	e0 6c 38 00 	mov	r12,14336
80001460:	ea 1c ff ff 	orh	r12,0xffff
80001464:	e0 6b c0 00 	mov	r11,49152
80001468:	ea 1b 00 00 	orh	r11,0x0
8000146c:	99 1b       	st.w	r12[0x4],r11
8000146e:	30 1b       	mov	r11,1
80001470:	a5 6b       	lsl	r11,0x4
80001472:	99 9b       	st.w	r12[0x24],r11
80001474:	d2 02       	popm	r12
80001476:	f0 1f 00 22 	mcall	800014fc <timerClearInterrupt+0x18>
8000147a:	d5 02       	popm	r11,lr
8000147c:	1c 9f       	mov	pc,lr

8000147e <timerReset>:
8000147e:	d3 01       	pushm	r11-r12
80001480:	e0 6c 38 00 	mov	r12,14336
80001484:	ea 1c ff ff 	orh	r12,0xffff
80001488:	30 5b       	mov	r11,5
8000148a:	99 0b       	st.w	r12[0x0],r11
8000148c:	e0 6b 00 08 	mov	r11,8
80001490:	ea 1b 00 00 	orh	r11,0x0
80001494:	76 0b       	ld.w	r11,r11[0x0]
80001496:	99 7b       	st.w	r12[0x1c],r11
80001498:	d3 02       	popm	r11-r12
8000149a:	1c 9f       	mov	pc,lr

8000149c <timerStop>:
8000149c:	d3 01       	pushm	r11-r12
8000149e:	e0 6c 38 00 	mov	r12,14336
800014a2:	ea 1c ff ff 	orh	r12,0xffff
800014a6:	30 2b       	mov	r11,2
800014a8:	99 0b       	st.w	r12[0x0],r11
800014aa:	d3 02       	popm	r11-r12
800014ac:	1c 9f       	mov	pc,lr

800014ae <timerRCSet>:
800014ae:	d3 01       	pushm	r11-r12
800014b0:	49 4b       	lddpc	r11,80001500 <timerClearInterrupt+0x1c>
800014b2:	97 0c       	st.w	r11[0x0],r12
800014b4:	e0 6c 38 00 	mov	r12,14336
800014b8:	ea 1c ff ff 	orh	r12,0xffff
800014bc:	76 0b       	ld.w	r11,r11[0x0]
800014be:	99 7b       	st.w	r12[0x1c],r11
800014c0:	d3 02       	popm	r11-r12
800014c2:	1c 9f       	mov	pc,lr

800014c4 <timerPrescaleSet>:
800014c4:	d3 81       	pushm	r10-r12
800014c6:	49 0b       	lddpc	r11,80001504 <timerClearInterrupt+0x20>
800014c8:	97 0c       	st.w	r11[0x0],r12
800014ca:	e0 6c 38 00 	mov	r12,14336
800014ce:	ea 1c ff ff 	orh	r12,0xffff
800014d2:	78 1a       	ld.w	r10,r12[0x4]
800014d4:	3f 8b       	mov	r11,-8
800014d6:	16 6a       	and	r10,r11
800014d8:	48 bb       	lddpc	r11,80001504 <timerClearInterrupt+0x20>
800014da:	76 0b       	ld.w	r11,r11[0x0]
800014dc:	14 4b       	or	r11,r10
800014de:	99 1b       	st.w	r12[0x4],r11
800014e0:	d3 82       	popm	r10-r12
800014e2:	1c 9f       	mov	pc,lr

800014e4 <timerClearInterrupt>:
800014e4:	d2 01       	pushm	r12
800014e6:	e0 6c 38 00 	mov	r12,14336
800014ea:	ea 1c ff ff 	orh	r12,0xffff
800014ee:	78 8c       	ld.w	r12,r12[0x20]
800014f0:	d2 02       	popm	r12
800014f2:	1c 9f       	mov	pc,lr
800014f4:	80 00       	ld.sh	r0,r0[0x0]
800014f6:	1f 66       	ld.uh	r6,--pc
800014f8:	80 00       	ld.sh	r0,r0[0x0]
800014fa:	14 e4       	st.h	--r10,r4
800014fc:	80 00       	ld.sh	r0,r0[0x0]
800014fe:	0d 0c       	ld.w	r12,r6++
80001500:	00 00       	add	r0,r0
80001502:	00 08       	add	r8,r0
80001504:	00 00       	add	r0,r0
80001506:	00 0c       	add	r12,r0

80001508 <_stext>:
80001508:	49 7d       	lddpc	sp,80001564 <udata_end+0x4>
8000150a:	49 80       	lddpc	r0,80001568 <udata_end+0x8>
8000150c:	1a d0       	st.w	--sp,r0
8000150e:	e5 cd 20 00 	ldmts	sp,sp
80001512:	1b 00       	ld.w	r0,sp++
80001514:	49 60       	lddpc	r0,8000156c <udata_end+0xc>
80001516:	e3 b0 00 01 	mtsr	0x4,r0
8000151a:	d5 53       	csrf	0x15
8000151c:	e0 6c 0c 00 	mov	r12,3072
80001520:	ea 1c ff ff 	orh	r12,0xffff
80001524:	e0 6b 01 07 	mov	r11,263
80001528:	99 ab       	st.w	r12[0x28],r11
8000152a:	30 4b       	mov	r11,4
8000152c:	99 0b       	st.w	r12[0x0],r11
8000152e:	e0 6a 00 80 	mov	r10,128

80001532 <xw8>:
80001532:	79 5b       	ld.w	r11,r12[0x54]
80001534:	14 7b       	tst	r11,r10
80001536:	cf e0       	breq	80001532 <xw8>
80001538:	30 5b       	mov	r11,5
8000153a:	99 0b       	st.w	r12[0x0],r11

8000153c <idata_>:
8000153c:	48 d0       	lddpc	r0,80001570 <udata_end+0x10>
8000153e:	48 e1       	lddpc	r1,80001574 <udata_end+0x14>
80001540:	02 30       	cp.w	r0,r1
80001542:	c0 62       	brcc	8000154e <idata_end>
80001544:	48 d2       	lddpc	r2,80001578 <udata_end+0x18>

80001546 <idata_loop>:
80001546:	05 04       	ld.w	r4,r2++
80001548:	00 a4       	st.w	r0++,r4
8000154a:	02 30       	cp.w	r0,r1
8000154c:	cf d3       	brcs	80001546 <idata_loop>

8000154e <idata_end>:
8000154e:	48 c0       	lddpc	r0,8000157c <udata_end+0x1c>
80001550:	48 c1       	lddpc	r1,80001580 <udata_end+0x20>
80001552:	02 30       	cp.w	r0,r1
80001554:	c0 62       	brcc	80001560 <udata_end>
80001556:	30 02       	mov	r2,0
80001558:	30 03       	mov	r3,0

8000155a <udata_loop>:
8000155a:	00 a2       	st.w	r0++,r2
8000155c:	02 30       	cp.w	r0,r1
8000155e:	cf e3       	brcs	8000155a <udata_loop>

80001560 <udata_end>:
80001560:	48 9f       	lddpc	pc,80001584 <udata_end+0x24>
80001562:	00 00       	add	r0,r0
80001564:	00 01       	add	r1,r0
80001566:	00 00       	add	r0,r0
80001568:	00 00       	add	r0,r0
8000156a:	f0 00       	*unknown*
8000156c:	80 00       	ld.sh	r0,r0[0x0]
8000156e:	1e 00       	add	r0,pc
80001570:	00 00       	add	r0,r0
80001572:	00 08       	add	r8,r0
80001574:	00 00       	add	r0,r0
80001576:	05 18       	ld.sh	r8,r2++
80001578:	80 00       	ld.sh	r0,r0[0x0]
8000157a:	22 88       	sub	r8,40
8000157c:	00 00       	add	r0,r0
8000157e:	05 18       	ld.sh	r8,r2++
80001580:	00 00       	add	r0,r0
80001582:	07 a8       	ld.ub	r8,r3[0x2]
80001584:	80 00       	ld.sh	r0,r0[0x0]
80001586:	04 dc       	st.w	--r2,r12

80001588 <calloc>:
80001588:	d4 01       	pushm	lr
8000158a:	48 48       	lddpc	r8,80001598 <calloc+0x10>
8000158c:	16 9a       	mov	r10,r11
8000158e:	18 9b       	mov	r11,r12
80001590:	70 0c       	ld.w	r12,r8[0x0]
80001592:	f0 1f 00 03 	mcall	8000159c <calloc+0x14>
80001596:	d8 02       	popm	pc
80001598:	00 00       	add	r0,r0
8000159a:	01 00       	ld.w	r0,r0++
8000159c:	80 00       	ld.sh	r0,r0[0x0]
8000159e:	15 a0       	ld.ub	r0,r10[0x2]

800015a0 <_calloc_r>:
800015a0:	d4 21       	pushm	r4-r7,lr
800015a2:	f4 0b 02 4b 	mul	r11,r10,r11
800015a6:	f0 1f 00 15 	mcall	800015f8 <_calloc_r+0x58>
800015aa:	18 97       	mov	r7,r12
800015ac:	c2 30       	breq	800015f2 <_calloc_r+0x52>
800015ae:	f8 fa ff fc 	ld.w	r10,r12[-4]
800015b2:	e0 1a ff fc 	andl	r10,0xfffc
800015b6:	20 4a       	sub	r10,4
800015b8:	e0 4a 00 24 	cp.w	r10,36
800015bc:	e0 8b 00 18 	brhi	800015ec <_calloc_r+0x4c>
800015c0:	18 98       	mov	r8,r12
800015c2:	59 3a       	cp.w	r10,19
800015c4:	e0 88 00 0f 	brls	800015e2 <_calloc_r+0x42>
800015c8:	30 09       	mov	r9,0
800015ca:	10 a9       	st.w	r8++,r9
800015cc:	10 a9       	st.w	r8++,r9
800015ce:	59 ba       	cp.w	r10,27
800015d0:	e0 88 00 09 	brls	800015e2 <_calloc_r+0x42>
800015d4:	10 a9       	st.w	r8++,r9
800015d6:	10 a9       	st.w	r8++,r9
800015d8:	e0 4a 00 24 	cp.w	r10,36
800015dc:	c0 31       	brne	800015e2 <_calloc_r+0x42>
800015de:	10 a9       	st.w	r8++,r9
800015e0:	10 a9       	st.w	r8++,r9
800015e2:	30 09       	mov	r9,0
800015e4:	10 a9       	st.w	r8++,r9
800015e6:	91 19       	st.w	r8[0x4],r9
800015e8:	91 09       	st.w	r8[0x0],r9
800015ea:	c0 48       	rjmp	800015f2 <_calloc_r+0x52>
800015ec:	30 0b       	mov	r11,0
800015ee:	f0 1f 00 04 	mcall	800015fc <_calloc_r+0x5c>
800015f2:	0e 9c       	mov	r12,r7
800015f4:	d8 22       	popm	r4-r7,pc
800015f6:	00 00       	add	r0,r0
800015f8:	80 00       	ld.sh	r0,r0[0x0]
800015fa:	16 18       	sub	r8,r11
800015fc:	80 00       	ld.sh	r0,r0[0x0]
800015fe:	1a 68       	and	r8,sp

80001600 <malloc>:
80001600:	d4 01       	pushm	lr
80001602:	48 48       	lddpc	r8,80001610 <malloc+0x10>
80001604:	18 9b       	mov	r11,r12
80001606:	70 0c       	ld.w	r12,r8[0x0]
80001608:	f0 1f 00 03 	mcall	80001614 <malloc+0x14>
8000160c:	d8 02       	popm	pc
8000160e:	00 00       	add	r0,r0
80001610:	00 00       	add	r0,r0
80001612:	01 00       	ld.w	r0,r0++
80001614:	80 00       	ld.sh	r0,r0[0x0]
80001616:	16 18       	sub	r8,r11

80001618 <_malloc_r>:
80001618:	d4 31       	pushm	r0-r7,lr
8000161a:	f6 c8 ff f5 	sub	r8,r11,-11
8000161e:	18 95       	mov	r5,r12
80001620:	10 97       	mov	r7,r8
80001622:	e0 17 ff f8 	andl	r7,0xfff8
80001626:	59 68       	cp.w	r8,22
80001628:	f9 b7 08 10 	movls	r7,16
8000162c:	16 37       	cp.w	r7,r11
8000162e:	5f 38       	srlo	r8
80001630:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001634:	c0 50       	breq	8000163e <_malloc_r+0x26>
80001636:	30 c8       	mov	r8,12
80001638:	99 38       	st.w	r12[0xc],r8
8000163a:	e0 8f 01 f3 	bral	80001a20 <_malloc_r+0x408>
8000163e:	f0 1f 00 50 	mcall	8000177c <_malloc_r+0x164>
80001642:	e0 47 01 f7 	cp.w	r7,503
80001646:	e0 8b 00 1c 	brhi	8000167e <_malloc_r+0x66>
8000164a:	ee 03 16 03 	lsr	r3,r7,0x3
8000164e:	4c d8       	lddpc	r8,80001780 <_malloc_r+0x168>
80001650:	f0 03 00 38 	add	r8,r8,r3<<0x3
80001654:	70 36       	ld.w	r6,r8[0xc]
80001656:	10 36       	cp.w	r6,r8
80001658:	c0 61       	brne	80001664 <_malloc_r+0x4c>
8000165a:	ec c8 ff f8 	sub	r8,r6,-8
8000165e:	70 36       	ld.w	r6,r8[0xc]
80001660:	10 36       	cp.w	r6,r8
80001662:	c0 c0       	breq	8000167a <_malloc_r+0x62>
80001664:	6c 18       	ld.w	r8,r6[0x4]
80001666:	e0 18 ff fc 	andl	r8,0xfffc
8000166a:	6c 3a       	ld.w	r10,r6[0xc]
8000166c:	ec 08 00 09 	add	r9,r6,r8
80001670:	0a 9c       	mov	r12,r5
80001672:	6c 28       	ld.w	r8,r6[0x8]
80001674:	95 28       	st.w	r10[0x8],r8
80001676:	91 3a       	st.w	r8[0xc],r10
80001678:	c4 68       	rjmp	80001704 <_malloc_r+0xec>
8000167a:	2f e3       	sub	r3,-2
8000167c:	c4 c8       	rjmp	80001714 <_malloc_r+0xfc>
8000167e:	ee 03 16 09 	lsr	r3,r7,0x9
80001682:	c0 41       	brne	8000168a <_malloc_r+0x72>
80001684:	ee 03 16 03 	lsr	r3,r7,0x3
80001688:	c2 68       	rjmp	800016d4 <_malloc_r+0xbc>
8000168a:	58 43       	cp.w	r3,4
8000168c:	e0 8b 00 06 	brhi	80001698 <_malloc_r+0x80>
80001690:	ee 03 16 06 	lsr	r3,r7,0x6
80001694:	2c 83       	sub	r3,-56
80001696:	c1 f8       	rjmp	800016d4 <_malloc_r+0xbc>
80001698:	59 43       	cp.w	r3,20
8000169a:	e0 8b 00 04 	brhi	800016a2 <_malloc_r+0x8a>
8000169e:	2a 53       	sub	r3,-91
800016a0:	c1 a8       	rjmp	800016d4 <_malloc_r+0xbc>
800016a2:	e0 43 00 54 	cp.w	r3,84
800016a6:	e0 8b 00 06 	brhi	800016b2 <_malloc_r+0x9a>
800016aa:	ee 03 16 0c 	lsr	r3,r7,0xc
800016ae:	29 23       	sub	r3,-110
800016b0:	c1 28       	rjmp	800016d4 <_malloc_r+0xbc>
800016b2:	e0 43 01 54 	cp.w	r3,340
800016b6:	e0 8b 00 06 	brhi	800016c2 <_malloc_r+0xaa>
800016ba:	ee 03 16 0f 	lsr	r3,r7,0xf
800016be:	28 93       	sub	r3,-119
800016c0:	c0 a8       	rjmp	800016d4 <_malloc_r+0xbc>
800016c2:	e0 43 05 54 	cp.w	r3,1364
800016c6:	e0 88 00 04 	brls	800016ce <_malloc_r+0xb6>
800016ca:	37 e3       	mov	r3,126
800016cc:	c0 48       	rjmp	800016d4 <_malloc_r+0xbc>
800016ce:	ee 03 16 12 	lsr	r3,r7,0x12
800016d2:	28 43       	sub	r3,-124
800016d4:	4a ba       	lddpc	r10,80001780 <_malloc_r+0x168>
800016d6:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800016da:	74 36       	ld.w	r6,r10[0xc]
800016dc:	c1 98       	rjmp	8000170e <_malloc_r+0xf6>
800016de:	6c 19       	ld.w	r9,r6[0x4]
800016e0:	e0 19 ff fc 	andl	r9,0xfffc
800016e4:	f2 07 01 0b 	sub	r11,r9,r7
800016e8:	58 fb       	cp.w	r11,15
800016ea:	e0 8a 00 04 	brle	800016f2 <_malloc_r+0xda>
800016ee:	20 13       	sub	r3,1
800016f0:	c1 18       	rjmp	80001712 <_malloc_r+0xfa>
800016f2:	6c 38       	ld.w	r8,r6[0xc]
800016f4:	58 0b       	cp.w	r11,0
800016f6:	c0 b5       	brlt	8000170c <_malloc_r+0xf4>
800016f8:	6c 2a       	ld.w	r10,r6[0x8]
800016fa:	ec 09 00 09 	add	r9,r6,r9
800016fe:	0a 9c       	mov	r12,r5
80001700:	91 2a       	st.w	r8[0x8],r10
80001702:	95 38       	st.w	r10[0xc],r8
80001704:	72 18       	ld.w	r8,r9[0x4]
80001706:	a1 a8       	sbr	r8,0x0
80001708:	93 18       	st.w	r9[0x4],r8
8000170a:	cb c8       	rjmp	80001882 <_malloc_r+0x26a>
8000170c:	10 96       	mov	r6,r8
8000170e:	14 36       	cp.w	r6,r10
80001710:	ce 71       	brne	800016de <_malloc_r+0xc6>
80001712:	2f f3       	sub	r3,-1
80001714:	49 ba       	lddpc	r10,80001780 <_malloc_r+0x168>
80001716:	f4 cc ff f8 	sub	r12,r10,-8
8000171a:	78 26       	ld.w	r6,r12[0x8]
8000171c:	18 36       	cp.w	r6,r12
8000171e:	c6 e0       	breq	800017fa <_malloc_r+0x1e2>
80001720:	6c 19       	ld.w	r9,r6[0x4]
80001722:	e0 19 ff fc 	andl	r9,0xfffc
80001726:	f2 07 01 08 	sub	r8,r9,r7
8000172a:	58 f8       	cp.w	r8,15
8000172c:	e0 89 00 90 	brgt	8000184c <_malloc_r+0x234>
80001730:	99 3c       	st.w	r12[0xc],r12
80001732:	99 2c       	st.w	r12[0x8],r12
80001734:	58 08       	cp.w	r8,0
80001736:	c0 55       	brlt	80001740 <_malloc_r+0x128>
80001738:	ec 09 00 09 	add	r9,r6,r9
8000173c:	0a 9c       	mov	r12,r5
8000173e:	ce 3b       	rjmp	80001704 <_malloc_r+0xec>
80001740:	e0 49 01 ff 	cp.w	r9,511
80001744:	e0 8b 00 13 	brhi	8000176a <_malloc_r+0x152>
80001748:	a3 99       	lsr	r9,0x3
8000174a:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000174e:	70 2b       	ld.w	r11,r8[0x8]
80001750:	8d 38       	st.w	r6[0xc],r8
80001752:	8d 2b       	st.w	r6[0x8],r11
80001754:	97 36       	st.w	r11[0xc],r6
80001756:	91 26       	st.w	r8[0x8],r6
80001758:	a3 49       	asr	r9,0x2
8000175a:	74 18       	ld.w	r8,r10[0x4]
8000175c:	30 1b       	mov	r11,1
8000175e:	f6 09 09 49 	lsl	r9,r11,r9
80001762:	f1 e9 10 09 	or	r9,r8,r9
80001766:	95 19       	st.w	r10[0x4],r9
80001768:	c4 98       	rjmp	800017fa <_malloc_r+0x1e2>
8000176a:	f2 0a 16 09 	lsr	r10,r9,0x9
8000176e:	58 4a       	cp.w	r10,4
80001770:	e0 8b 00 0a 	brhi	80001784 <_malloc_r+0x16c>
80001774:	f2 0a 16 06 	lsr	r10,r9,0x6
80001778:	2c 8a       	sub	r10,-56
8000177a:	c2 38       	rjmp	800017c0 <_malloc_r+0x1a8>
8000177c:	80 00       	ld.sh	r0,r0[0x0]
8000177e:	1a 76       	tst	r6,sp
80001780:	00 00       	add	r0,r0
80001782:	01 04       	ld.w	r4,r0++
80001784:	59 4a       	cp.w	r10,20
80001786:	e0 8b 00 04 	brhi	8000178e <_malloc_r+0x176>
8000178a:	2a 5a       	sub	r10,-91
8000178c:	c1 a8       	rjmp	800017c0 <_malloc_r+0x1a8>
8000178e:	e0 4a 00 54 	cp.w	r10,84
80001792:	e0 8b 00 06 	brhi	8000179e <_malloc_r+0x186>
80001796:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000179a:	29 2a       	sub	r10,-110
8000179c:	c1 28       	rjmp	800017c0 <_malloc_r+0x1a8>
8000179e:	e0 4a 01 54 	cp.w	r10,340
800017a2:	e0 8b 00 06 	brhi	800017ae <_malloc_r+0x196>
800017a6:	f2 0a 16 0f 	lsr	r10,r9,0xf
800017aa:	28 9a       	sub	r10,-119
800017ac:	c0 a8       	rjmp	800017c0 <_malloc_r+0x1a8>
800017ae:	e0 4a 05 54 	cp.w	r10,1364
800017b2:	e0 88 00 04 	brls	800017ba <_malloc_r+0x1a2>
800017b6:	37 ea       	mov	r10,126
800017b8:	c0 48       	rjmp	800017c0 <_malloc_r+0x1a8>
800017ba:	f2 0a 16 12 	lsr	r10,r9,0x12
800017be:	28 4a       	sub	r10,-124
800017c0:	4c 8b       	lddpc	r11,800018e0 <_malloc_r+0x2c8>
800017c2:	f6 0a 00 34 	add	r4,r11,r10<<0x3
800017c6:	68 28       	ld.w	r8,r4[0x8]
800017c8:	08 38       	cp.w	r8,r4
800017ca:	c0 e1       	brne	800017e6 <_malloc_r+0x1ce>
800017cc:	76 19       	ld.w	r9,r11[0x4]
800017ce:	a3 4a       	asr	r10,0x2
800017d0:	30 1e       	mov	lr,1
800017d2:	fc 0a 09 4a 	lsl	r10,lr,r10
800017d6:	f3 ea 10 0a 	or	r10,r9,r10
800017da:	10 99       	mov	r9,r8
800017dc:	97 1a       	st.w	r11[0x4],r10
800017de:	c0 a8       	rjmp	800017f2 <_malloc_r+0x1da>
800017e0:	70 28       	ld.w	r8,r8[0x8]
800017e2:	08 38       	cp.w	r8,r4
800017e4:	c0 60       	breq	800017f0 <_malloc_r+0x1d8>
800017e6:	70 1a       	ld.w	r10,r8[0x4]
800017e8:	e0 1a ff fc 	andl	r10,0xfffc
800017ec:	14 39       	cp.w	r9,r10
800017ee:	cf 93       	brcs	800017e0 <_malloc_r+0x1c8>
800017f0:	70 39       	ld.w	r9,r8[0xc]
800017f2:	8d 39       	st.w	r6[0xc],r9
800017f4:	8d 28       	st.w	r6[0x8],r8
800017f6:	91 36       	st.w	r8[0xc],r6
800017f8:	93 26       	st.w	r9[0x8],r6
800017fa:	e6 08 14 02 	asr	r8,r3,0x2
800017fe:	30 1b       	mov	r11,1
80001800:	4b 84       	lddpc	r4,800018e0 <_malloc_r+0x2c8>
80001802:	f6 08 09 4b 	lsl	r11,r11,r8
80001806:	68 18       	ld.w	r8,r4[0x4]
80001808:	10 3b       	cp.w	r11,r8
8000180a:	e0 8b 00 6f 	brhi	800018e8 <_malloc_r+0x2d0>
8000180e:	f7 e8 00 09 	and	r9,r11,r8
80001812:	c0 b1       	brne	80001828 <_malloc_r+0x210>
80001814:	e0 13 ff fc 	andl	r3,0xfffc
80001818:	a1 7b       	lsl	r11,0x1
8000181a:	2f c3       	sub	r3,-4
8000181c:	c0 38       	rjmp	80001822 <_malloc_r+0x20a>
8000181e:	2f c3       	sub	r3,-4
80001820:	a1 7b       	lsl	r11,0x1
80001822:	f7 e8 00 09 	and	r9,r11,r8
80001826:	cf c0       	breq	8000181e <_malloc_r+0x206>
80001828:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000182c:	06 92       	mov	r2,r3
8000182e:	1c 91       	mov	r1,lr
80001830:	62 36       	ld.w	r6,r1[0xc]
80001832:	c2 e8       	rjmp	8000188e <_malloc_r+0x276>
80001834:	6c 1a       	ld.w	r10,r6[0x4]
80001836:	e0 1a ff fc 	andl	r10,0xfffc
8000183a:	f4 07 01 08 	sub	r8,r10,r7
8000183e:	58 f8       	cp.w	r8,15
80001840:	e0 8a 00 15 	brle	8000186a <_malloc_r+0x252>
80001844:	6c 3a       	ld.w	r10,r6[0xc]
80001846:	6c 29       	ld.w	r9,r6[0x8]
80001848:	95 29       	st.w	r10[0x8],r9
8000184a:	93 3a       	st.w	r9[0xc],r10
8000184c:	0e 99       	mov	r9,r7
8000184e:	ec 07 00 07 	add	r7,r6,r7
80001852:	a1 a9       	sbr	r9,0x0
80001854:	99 37       	st.w	r12[0xc],r7
80001856:	99 27       	st.w	r12[0x8],r7
80001858:	8d 19       	st.w	r6[0x4],r9
8000185a:	ee 08 09 08 	st.w	r7[r8],r8
8000185e:	8f 2c       	st.w	r7[0x8],r12
80001860:	8f 3c       	st.w	r7[0xc],r12
80001862:	a1 a8       	sbr	r8,0x0
80001864:	0a 9c       	mov	r12,r5
80001866:	8f 18       	st.w	r7[0x4],r8
80001868:	c0 d8       	rjmp	80001882 <_malloc_r+0x26a>
8000186a:	6c 39       	ld.w	r9,r6[0xc]
8000186c:	58 08       	cp.w	r8,0
8000186e:	c0 f5       	brlt	8000188c <_malloc_r+0x274>
80001870:	ec 0a 00 0a 	add	r10,r6,r10
80001874:	74 18       	ld.w	r8,r10[0x4]
80001876:	a1 a8       	sbr	r8,0x0
80001878:	0a 9c       	mov	r12,r5
8000187a:	95 18       	st.w	r10[0x4],r8
8000187c:	6c 28       	ld.w	r8,r6[0x8]
8000187e:	93 28       	st.w	r9[0x8],r8
80001880:	91 39       	st.w	r8[0xc],r9
80001882:	f0 1f 00 19 	mcall	800018e4 <_malloc_r+0x2cc>
80001886:	ec cc ff f8 	sub	r12,r6,-8
8000188a:	d8 32       	popm	r0-r7,pc
8000188c:	12 96       	mov	r6,r9
8000188e:	02 36       	cp.w	r6,r1
80001890:	cd 21       	brne	80001834 <_malloc_r+0x21c>
80001892:	2f f2       	sub	r2,-1
80001894:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001898:	c0 30       	breq	8000189e <_malloc_r+0x286>
8000189a:	2f 81       	sub	r1,-8
8000189c:	cc ab       	rjmp	80001830 <_malloc_r+0x218>
8000189e:	1c 98       	mov	r8,lr
800018a0:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800018a4:	c0 81       	brne	800018b4 <_malloc_r+0x29c>
800018a6:	68 19       	ld.w	r9,r4[0x4]
800018a8:	f6 08 11 ff 	rsub	r8,r11,-1
800018ac:	f3 e8 00 08 	and	r8,r9,r8
800018b0:	89 18       	st.w	r4[0x4],r8
800018b2:	c0 78       	rjmp	800018c0 <_malloc_r+0x2a8>
800018b4:	f0 c9 00 08 	sub	r9,r8,8
800018b8:	20 13       	sub	r3,1
800018ba:	70 08       	ld.w	r8,r8[0x0]
800018bc:	12 38       	cp.w	r8,r9
800018be:	cf 10       	breq	800018a0 <_malloc_r+0x288>
800018c0:	a1 7b       	lsl	r11,0x1
800018c2:	68 18       	ld.w	r8,r4[0x4]
800018c4:	10 3b       	cp.w	r11,r8
800018c6:	e0 8b 00 11 	brhi	800018e8 <_malloc_r+0x2d0>
800018ca:	58 0b       	cp.w	r11,0
800018cc:	c0 e0       	breq	800018e8 <_malloc_r+0x2d0>
800018ce:	04 93       	mov	r3,r2
800018d0:	c0 38       	rjmp	800018d6 <_malloc_r+0x2be>
800018d2:	2f c3       	sub	r3,-4
800018d4:	a1 7b       	lsl	r11,0x1
800018d6:	f7 e8 00 09 	and	r9,r11,r8
800018da:	ca 71       	brne	80001828 <_malloc_r+0x210>
800018dc:	cf bb       	rjmp	800018d2 <_malloc_r+0x2ba>
800018de:	00 00       	add	r0,r0
800018e0:	00 00       	add	r0,r0
800018e2:	01 04       	ld.w	r4,r0++
800018e4:	80 00       	ld.sh	r0,r0[0x0]
800018e6:	1a 78       	tst	r8,sp
800018e8:	68 23       	ld.w	r3,r4[0x8]
800018ea:	66 12       	ld.w	r2,r3[0x4]
800018ec:	e0 12 ff fc 	andl	r2,0xfffc
800018f0:	0e 32       	cp.w	r2,r7
800018f2:	5f 39       	srlo	r9
800018f4:	e4 07 01 08 	sub	r8,r2,r7
800018f8:	58 f8       	cp.w	r8,15
800018fa:	5f aa       	srle	r10
800018fc:	f5 e9 10 09 	or	r9,r10,r9
80001900:	e0 80 00 a2 	breq	80001a44 <_malloc_r+0x42c>
80001904:	4c 88       	lddpc	r8,80001a24 <_malloc_r+0x40c>
80001906:	70 01       	ld.w	r1,r8[0x0]
80001908:	4c 88       	lddpc	r8,80001a28 <_malloc_r+0x410>
8000190a:	2f 01       	sub	r1,-16
8000190c:	70 08       	ld.w	r8,r8[0x0]
8000190e:	0e 01       	add	r1,r7
80001910:	5b f8       	cp.w	r8,-1
80001912:	c0 40       	breq	8000191a <_malloc_r+0x302>
80001914:	28 11       	sub	r1,-127
80001916:	e0 11 ff 80 	andl	r1,0xff80
8000191a:	02 9b       	mov	r11,r1
8000191c:	0a 9c       	mov	r12,r5
8000191e:	f0 1f 00 44 	mcall	80001a2c <_malloc_r+0x414>
80001922:	18 96       	mov	r6,r12
80001924:	5b fc       	cp.w	r12,-1
80001926:	c6 e0       	breq	80001a02 <_malloc_r+0x3ea>
80001928:	e6 02 00 08 	add	r8,r3,r2
8000192c:	10 3c       	cp.w	r12,r8
8000192e:	c0 32       	brcc	80001934 <_malloc_r+0x31c>
80001930:	08 33       	cp.w	r3,r4
80001932:	c6 81       	brne	80001a02 <_malloc_r+0x3ea>
80001934:	4b fa       	lddpc	r10,80001a30 <_malloc_r+0x418>
80001936:	74 09       	ld.w	r9,r10[0x0]
80001938:	e2 09 00 09 	add	r9,r1,r9
8000193c:	95 09       	st.w	r10[0x0],r9
8000193e:	10 36       	cp.w	r6,r8
80001940:	c0 a1       	brne	80001954 <_malloc_r+0x33c>
80001942:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80001946:	c0 71       	brne	80001954 <_malloc_r+0x33c>
80001948:	e2 02 00 02 	add	r2,r1,r2
8000194c:	68 28       	ld.w	r8,r4[0x8]
8000194e:	a1 a2       	sbr	r2,0x0
80001950:	91 12       	st.w	r8[0x4],r2
80001952:	c4 c8       	rjmp	800019ea <_malloc_r+0x3d2>
80001954:	4b 5a       	lddpc	r10,80001a28 <_malloc_r+0x410>
80001956:	74 0b       	ld.w	r11,r10[0x0]
80001958:	5b fb       	cp.w	r11,-1
8000195a:	c0 31       	brne	80001960 <_malloc_r+0x348>
8000195c:	95 06       	st.w	r10[0x0],r6
8000195e:	c0 68       	rjmp	8000196a <_malloc_r+0x352>
80001960:	ec 09 00 09 	add	r9,r6,r9
80001964:	4b 3a       	lddpc	r10,80001a30 <_malloc_r+0x418>
80001966:	10 19       	sub	r9,r8
80001968:	95 09       	st.w	r10[0x0],r9
8000196a:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000196e:	f0 09 11 08 	rsub	r9,r8,8
80001972:	58 08       	cp.w	r8,0
80001974:	f2 08 17 10 	movne	r8,r9
80001978:	ed d8 e1 06 	addne	r6,r6,r8
8000197c:	28 08       	sub	r8,-128
8000197e:	ec 01 00 01 	add	r1,r6,r1
80001982:	0a 9c       	mov	r12,r5
80001984:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80001988:	f0 01 01 01 	sub	r1,r8,r1
8000198c:	02 9b       	mov	r11,r1
8000198e:	f0 1f 00 28 	mcall	80001a2c <_malloc_r+0x414>
80001992:	4a 88       	lddpc	r8,80001a30 <_malloc_r+0x418>
80001994:	5b fc       	cp.w	r12,-1
80001996:	ec 0c 17 00 	moveq	r12,r6
8000199a:	f9 b1 00 00 	moveq	r1,0
8000199e:	70 09       	ld.w	r9,r8[0x0]
800019a0:	0c 1c       	sub	r12,r6
800019a2:	89 26       	st.w	r4[0x8],r6
800019a4:	02 0c       	add	r12,r1
800019a6:	12 01       	add	r1,r9
800019a8:	a1 ac       	sbr	r12,0x0
800019aa:	91 01       	st.w	r8[0x0],r1
800019ac:	8d 1c       	st.w	r6[0x4],r12
800019ae:	08 33       	cp.w	r3,r4
800019b0:	c1 d0       	breq	800019ea <_malloc_r+0x3d2>
800019b2:	58 f2       	cp.w	r2,15
800019b4:	e0 8b 00 05 	brhi	800019be <_malloc_r+0x3a6>
800019b8:	30 18       	mov	r8,1
800019ba:	8d 18       	st.w	r6[0x4],r8
800019bc:	c2 38       	rjmp	80001a02 <_malloc_r+0x3ea>
800019be:	30 59       	mov	r9,5
800019c0:	20 c2       	sub	r2,12
800019c2:	e0 12 ff f8 	andl	r2,0xfff8
800019c6:	e6 02 00 08 	add	r8,r3,r2
800019ca:	91 29       	st.w	r8[0x8],r9
800019cc:	91 19       	st.w	r8[0x4],r9
800019ce:	66 18       	ld.w	r8,r3[0x4]
800019d0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800019d4:	e5 e8 10 08 	or	r8,r2,r8
800019d8:	87 18       	st.w	r3[0x4],r8
800019da:	58 f2       	cp.w	r2,15
800019dc:	e0 88 00 07 	brls	800019ea <_malloc_r+0x3d2>
800019e0:	e6 cb ff f8 	sub	r11,r3,-8
800019e4:	0a 9c       	mov	r12,r5
800019e6:	f0 1f 00 14 	mcall	80001a34 <_malloc_r+0x41c>
800019ea:	49 49       	lddpc	r9,80001a38 <_malloc_r+0x420>
800019ec:	72 0a       	ld.w	r10,r9[0x0]
800019ee:	49 18       	lddpc	r8,80001a30 <_malloc_r+0x418>
800019f0:	70 08       	ld.w	r8,r8[0x0]
800019f2:	14 38       	cp.w	r8,r10
800019f4:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800019f8:	49 19       	lddpc	r9,80001a3c <_malloc_r+0x424>
800019fa:	72 0a       	ld.w	r10,r9[0x0]
800019fc:	14 38       	cp.w	r8,r10
800019fe:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001a02:	68 28       	ld.w	r8,r4[0x8]
80001a04:	70 18       	ld.w	r8,r8[0x4]
80001a06:	e0 18 ff fc 	andl	r8,0xfffc
80001a0a:	0e 38       	cp.w	r8,r7
80001a0c:	5f 39       	srlo	r9
80001a0e:	0e 18       	sub	r8,r7
80001a10:	58 f8       	cp.w	r8,15
80001a12:	5f aa       	srle	r10
80001a14:	f5 e9 10 09 	or	r9,r10,r9
80001a18:	c1 60       	breq	80001a44 <_malloc_r+0x42c>
80001a1a:	0a 9c       	mov	r12,r5
80001a1c:	f0 1f 00 09 	mcall	80001a40 <_malloc_r+0x428>
80001a20:	d8 3a       	popm	r0-r7,pc,r12=0
80001a22:	00 00       	add	r0,r0
80001a24:	00 00       	add	r0,r0
80001a26:	06 20       	rsub	r0,r3
80001a28:	00 00       	add	r0,r0
80001a2a:	05 10       	ld.sh	r0,r2++
80001a2c:	80 00       	ld.sh	r0,r0[0x0]
80001a2e:	1a 7c       	tst	r12,sp
80001a30:	00 00       	add	r0,r0
80001a32:	06 24       	rsub	r4,r3
80001a34:	80 00       	ld.sh	r0,r0[0x0]
80001a36:	1b 98       	ld.ub	r8,sp[0x1]
80001a38:	00 00       	add	r0,r0
80001a3a:	06 1c       	sub	r12,r3
80001a3c:	00 00       	add	r0,r0
80001a3e:	06 18       	sub	r8,r3
80001a40:	80 00       	ld.sh	r0,r0[0x0]
80001a42:	1a 78       	tst	r8,sp
80001a44:	68 26       	ld.w	r6,r4[0x8]
80001a46:	a1 a8       	sbr	r8,0x0
80001a48:	0e 99       	mov	r9,r7
80001a4a:	a1 a9       	sbr	r9,0x0
80001a4c:	8d 19       	st.w	r6[0x4],r9
80001a4e:	ec 07 00 07 	add	r7,r6,r7
80001a52:	0a 9c       	mov	r12,r5
80001a54:	89 27       	st.w	r4[0x8],r7
80001a56:	8f 18       	st.w	r7[0x4],r8
80001a58:	f0 1f 00 03 	mcall	80001a64 <_malloc_r+0x44c>
80001a5c:	ec cc ff f8 	sub	r12,r6,-8
80001a60:	d8 32       	popm	r0-r7,pc
80001a62:	00 00       	add	r0,r0
80001a64:	80 00       	ld.sh	r0,r0[0x0]
80001a66:	1a 78       	tst	r8,sp

80001a68 <memset>:
80001a68:	18 98       	mov	r8,r12
80001a6a:	c0 38       	rjmp	80001a70 <memset+0x8>
80001a6c:	10 cb       	st.b	r8++,r11
80001a6e:	20 1a       	sub	r10,1
80001a70:	58 0a       	cp.w	r10,0
80001a72:	cf d1       	brne	80001a6c <memset+0x4>
80001a74:	5e fc       	retal	r12

80001a76 <__malloc_lock>:
80001a76:	5e fc       	retal	r12

80001a78 <__malloc_unlock>:
80001a78:	5e fc       	retal	r12
80001a7a:	d7 03       	nop

80001a7c <_sbrk_r>:
80001a7c:	d4 21       	pushm	r4-r7,lr
80001a7e:	30 08       	mov	r8,0
80001a80:	18 97       	mov	r7,r12
80001a82:	48 76       	lddpc	r6,80001a9c <_sbrk_r+0x20>
80001a84:	16 9c       	mov	r12,r11
80001a86:	8d 08       	st.w	r6[0x0],r8
80001a88:	f0 1f 00 06 	mcall	80001aa0 <_sbrk_r+0x24>
80001a8c:	5b fc       	cp.w	r12,-1
80001a8e:	c0 51       	brne	80001a98 <_sbrk_r+0x1c>
80001a90:	6c 08       	ld.w	r8,r6[0x0]
80001a92:	58 08       	cp.w	r8,0
80001a94:	ef f8 1a 03 	st.wne	r7[0xc],r8
80001a98:	d8 22       	popm	r4-r7,pc
80001a9a:	00 00       	add	r0,r0
80001a9c:	00 00       	add	r0,r0
80001a9e:	07 a4       	ld.ub	r4,r3[0x2]
80001aa0:	80 00       	ld.sh	r0,r0[0x0]
80001aa2:	1a a4       	st.w	sp++,r4

80001aa4 <_sbrk>:
80001aa4:	d4 01       	pushm	lr
80001aa6:	48 c8       	lddpc	r8,80001ad4 <_sbrk+0x30>
80001aa8:	70 09       	ld.w	r9,r8[0x0]
80001aaa:	58 09       	cp.w	r9,0
80001aac:	c0 31       	brne	80001ab2 <_sbrk+0xe>
80001aae:	48 b9       	lddpc	r9,80001ad8 <_sbrk+0x34>
80001ab0:	91 09       	st.w	r8[0x0],r9
80001ab2:	48 99       	lddpc	r9,80001ad4 <_sbrk+0x30>
80001ab4:	48 aa       	lddpc	r10,80001adc <_sbrk+0x38>
80001ab6:	72 08       	ld.w	r8,r9[0x0]
80001ab8:	f0 0c 00 0c 	add	r12,r8,r12
80001abc:	14 3c       	cp.w	r12,r10
80001abe:	e0 8b 00 04 	brhi	80001ac6 <_sbrk+0x22>
80001ac2:	93 0c       	st.w	r9[0x0],r12
80001ac4:	c0 68       	rjmp	80001ad0 <_sbrk+0x2c>
80001ac6:	f0 1f 00 07 	mcall	80001ae0 <_sbrk+0x3c>
80001aca:	30 c8       	mov	r8,12
80001acc:	99 08       	st.w	r12[0x0],r8
80001ace:	3f f8       	mov	r8,-1
80001ad0:	10 9c       	mov	r12,r8
80001ad2:	d8 02       	popm	pc
80001ad4:	00 00       	add	r0,r0
80001ad6:	06 4c       	or	r12,r3
80001ad8:	00 00       	add	r0,r0
80001ada:	07 a8       	ld.ub	r8,r3[0x2]
80001adc:	00 00       	add	r0,r0
80001ade:	e0 00       	*unknown*
80001ae0:	80 00       	ld.sh	r0,r0[0x0]
80001ae2:	1a e4       	st.h	--sp,r4

80001ae4 <__errno>:
80001ae4:	48 28       	lddpc	r8,80001aec <__errno+0x8>
80001ae6:	70 0c       	ld.w	r12,r8[0x0]
80001ae8:	2f 4c       	sub	r12,-12
80001aea:	5e fc       	retal	r12
80001aec:	00 00       	add	r0,r0
80001aee:	01 00       	ld.w	r0,r0++

80001af0 <_malloc_trim_r>:
80001af0:	d4 21       	pushm	r4-r7,lr
80001af2:	16 95       	mov	r5,r11
80001af4:	18 97       	mov	r7,r12
80001af6:	f0 1f 00 23 	mcall	80001b80 <_malloc_trim_r+0x90>
80001afa:	4a 34       	lddpc	r4,80001b84 <_malloc_trim_r+0x94>
80001afc:	68 28       	ld.w	r8,r4[0x8]
80001afe:	70 16       	ld.w	r6,r8[0x4]
80001b00:	e0 16 ff fc 	andl	r6,0xfffc
80001b04:	ec c8 ff 91 	sub	r8,r6,-111
80001b08:	f0 05 01 05 	sub	r5,r8,r5
80001b0c:	e0 15 ff 80 	andl	r5,0xff80
80001b10:	ea c5 00 80 	sub	r5,r5,128
80001b14:	e0 45 00 7f 	cp.w	r5,127
80001b18:	e0 8a 00 23 	brle	80001b5e <_malloc_trim_r+0x6e>
80001b1c:	30 0b       	mov	r11,0
80001b1e:	0e 9c       	mov	r12,r7
80001b20:	f0 1f 00 1a 	mcall	80001b88 <_malloc_trim_r+0x98>
80001b24:	68 28       	ld.w	r8,r4[0x8]
80001b26:	0c 08       	add	r8,r6
80001b28:	10 3c       	cp.w	r12,r8
80001b2a:	c1 a1       	brne	80001b5e <_malloc_trim_r+0x6e>
80001b2c:	ea 0b 11 00 	rsub	r11,r5,0
80001b30:	0e 9c       	mov	r12,r7
80001b32:	f0 1f 00 16 	mcall	80001b88 <_malloc_trim_r+0x98>
80001b36:	5b fc       	cp.w	r12,-1
80001b38:	c1 71       	brne	80001b66 <_malloc_trim_r+0x76>
80001b3a:	30 0b       	mov	r11,0
80001b3c:	0e 9c       	mov	r12,r7
80001b3e:	f0 1f 00 13 	mcall	80001b88 <_malloc_trim_r+0x98>
80001b42:	68 28       	ld.w	r8,r4[0x8]
80001b44:	f8 08 01 09 	sub	r9,r12,r8
80001b48:	58 f9       	cp.w	r9,15
80001b4a:	e0 8a 00 0a 	brle	80001b5e <_malloc_trim_r+0x6e>
80001b4e:	a1 a9       	sbr	r9,0x0
80001b50:	91 19       	st.w	r8[0x4],r9
80001b52:	48 f8       	lddpc	r8,80001b8c <_malloc_trim_r+0x9c>
80001b54:	70 09       	ld.w	r9,r8[0x0]
80001b56:	48 f8       	lddpc	r8,80001b90 <_malloc_trim_r+0xa0>
80001b58:	f8 09 01 09 	sub	r9,r12,r9
80001b5c:	91 09       	st.w	r8[0x0],r9
80001b5e:	0e 9c       	mov	r12,r7
80001b60:	f0 1f 00 0d 	mcall	80001b94 <_malloc_trim_r+0xa4>
80001b64:	d8 2a       	popm	r4-r7,pc,r12=0
80001b66:	68 28       	ld.w	r8,r4[0x8]
80001b68:	0a 16       	sub	r6,r5
80001b6a:	a1 a6       	sbr	r6,0x0
80001b6c:	91 16       	st.w	r8[0x4],r6
80001b6e:	48 98       	lddpc	r8,80001b90 <_malloc_trim_r+0xa0>
80001b70:	70 09       	ld.w	r9,r8[0x0]
80001b72:	0a 19       	sub	r9,r5
80001b74:	0e 9c       	mov	r12,r7
80001b76:	91 09       	st.w	r8[0x0],r9
80001b78:	f0 1f 00 07 	mcall	80001b94 <_malloc_trim_r+0xa4>
80001b7c:	da 2a       	popm	r4-r7,pc,r12=1
80001b7e:	00 00       	add	r0,r0
80001b80:	80 00       	ld.sh	r0,r0[0x0]
80001b82:	1a 76       	tst	r6,sp
80001b84:	00 00       	add	r0,r0
80001b86:	01 04       	ld.w	r4,r0++
80001b88:	80 00       	ld.sh	r0,r0[0x0]
80001b8a:	1a 7c       	tst	r12,sp
80001b8c:	00 00       	add	r0,r0
80001b8e:	05 10       	ld.sh	r0,r2++
80001b90:	00 00       	add	r0,r0
80001b92:	06 24       	rsub	r4,r3
80001b94:	80 00       	ld.sh	r0,r0[0x0]
80001b96:	1a 78       	tst	r8,sp

80001b98 <_free_r>:
80001b98:	d4 21       	pushm	r4-r7,lr
80001b9a:	16 96       	mov	r6,r11
80001b9c:	18 97       	mov	r7,r12
80001b9e:	58 0b       	cp.w	r11,0
80001ba0:	e0 80 00 c8 	breq	80001d30 <_free_r+0x198>
80001ba4:	f0 1f 00 4c 	mcall	80001cd4 <_free_r+0x13c>
80001ba8:	20 86       	sub	r6,8
80001baa:	4c ca       	lddpc	r10,80001cd8 <_free_r+0x140>
80001bac:	6c 18       	ld.w	r8,r6[0x4]
80001bae:	74 2e       	ld.w	lr,r10[0x8]
80001bb0:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001bb4:	a1 c8       	cbr	r8,0x0
80001bb6:	ec 08 00 09 	add	r9,r6,r8
80001bba:	72 1b       	ld.w	r11,r9[0x4]
80001bbc:	e0 1b ff fc 	andl	r11,0xfffc
80001bc0:	1c 39       	cp.w	r9,lr
80001bc2:	c1 d1       	brne	80001bfc <_free_r+0x64>
80001bc4:	f6 08 00 08 	add	r8,r11,r8
80001bc8:	58 0c       	cp.w	r12,0
80001bca:	c0 81       	brne	80001bda <_free_r+0x42>
80001bcc:	6c 09       	ld.w	r9,r6[0x0]
80001bce:	12 16       	sub	r6,r9
80001bd0:	12 08       	add	r8,r9
80001bd2:	6c 3b       	ld.w	r11,r6[0xc]
80001bd4:	6c 29       	ld.w	r9,r6[0x8]
80001bd6:	97 29       	st.w	r11[0x8],r9
80001bd8:	93 3b       	st.w	r9[0xc],r11
80001bda:	10 99       	mov	r9,r8
80001bdc:	95 26       	st.w	r10[0x8],r6
80001bde:	a1 a9       	sbr	r9,0x0
80001be0:	8d 19       	st.w	r6[0x4],r9
80001be2:	4b f9       	lddpc	r9,80001cdc <_free_r+0x144>
80001be4:	72 09       	ld.w	r9,r9[0x0]
80001be6:	12 38       	cp.w	r8,r9
80001be8:	c0 63       	brcs	80001bf4 <_free_r+0x5c>
80001bea:	4b e8       	lddpc	r8,80001ce0 <_free_r+0x148>
80001bec:	0e 9c       	mov	r12,r7
80001bee:	70 0b       	ld.w	r11,r8[0x0]
80001bf0:	f0 1f 00 3d 	mcall	80001ce4 <_free_r+0x14c>
80001bf4:	0e 9c       	mov	r12,r7
80001bf6:	f0 1f 00 3d 	mcall	80001ce8 <_free_r+0x150>
80001bfa:	d8 22       	popm	r4-r7,pc
80001bfc:	93 1b       	st.w	r9[0x4],r11
80001bfe:	58 0c       	cp.w	r12,0
80001c00:	c0 30       	breq	80001c06 <_free_r+0x6e>
80001c02:	30 0c       	mov	r12,0
80001c04:	c1 08       	rjmp	80001c24 <_free_r+0x8c>
80001c06:	6c 0e       	ld.w	lr,r6[0x0]
80001c08:	f4 c5 ff f8 	sub	r5,r10,-8
80001c0c:	1c 16       	sub	r6,lr
80001c0e:	1c 08       	add	r8,lr
80001c10:	6c 2e       	ld.w	lr,r6[0x8]
80001c12:	0a 3e       	cp.w	lr,r5
80001c14:	f9 bc 00 01 	moveq	r12,1
80001c18:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001c1c:	eb fe 1a 02 	st.wne	r5[0x8],lr
80001c20:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001c24:	f2 0b 00 0e 	add	lr,r9,r11
80001c28:	7c 1e       	ld.w	lr,lr[0x4]
80001c2a:	ed be 00 00 	bld	lr,0x0
80001c2e:	c1 30       	breq	80001c54 <_free_r+0xbc>
80001c30:	16 08       	add	r8,r11
80001c32:	58 0c       	cp.w	r12,0
80001c34:	c0 c1       	brne	80001c4c <_free_r+0xb4>
80001c36:	4a 9e       	lddpc	lr,80001cd8 <_free_r+0x140>
80001c38:	72 2b       	ld.w	r11,r9[0x8]
80001c3a:	2f 8e       	sub	lr,-8
80001c3c:	1c 3b       	cp.w	r11,lr
80001c3e:	c0 71       	brne	80001c4c <_free_r+0xb4>
80001c40:	97 36       	st.w	r11[0xc],r6
80001c42:	97 26       	st.w	r11[0x8],r6
80001c44:	8d 2b       	st.w	r6[0x8],r11
80001c46:	8d 3b       	st.w	r6[0xc],r11
80001c48:	30 1c       	mov	r12,1
80001c4a:	c0 58       	rjmp	80001c54 <_free_r+0xbc>
80001c4c:	72 2b       	ld.w	r11,r9[0x8]
80001c4e:	72 39       	ld.w	r9,r9[0xc]
80001c50:	93 2b       	st.w	r9[0x8],r11
80001c52:	97 39       	st.w	r11[0xc],r9
80001c54:	10 99       	mov	r9,r8
80001c56:	ec 08 09 08 	st.w	r6[r8],r8
80001c5a:	a1 a9       	sbr	r9,0x0
80001c5c:	8d 19       	st.w	r6[0x4],r9
80001c5e:	58 0c       	cp.w	r12,0
80001c60:	c6 51       	brne	80001d2a <_free_r+0x192>
80001c62:	e0 48 01 ff 	cp.w	r8,511
80001c66:	e0 8b 00 13 	brhi	80001c8c <_free_r+0xf4>
80001c6a:	a3 98       	lsr	r8,0x3
80001c6c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001c70:	72 2b       	ld.w	r11,r9[0x8]
80001c72:	8d 39       	st.w	r6[0xc],r9
80001c74:	8d 2b       	st.w	r6[0x8],r11
80001c76:	97 36       	st.w	r11[0xc],r6
80001c78:	93 26       	st.w	r9[0x8],r6
80001c7a:	a3 48       	asr	r8,0x2
80001c7c:	74 19       	ld.w	r9,r10[0x4]
80001c7e:	30 1b       	mov	r11,1
80001c80:	f6 08 09 48 	lsl	r8,r11,r8
80001c84:	f3 e8 10 08 	or	r8,r9,r8
80001c88:	95 18       	st.w	r10[0x4],r8
80001c8a:	c5 08       	rjmp	80001d2a <_free_r+0x192>
80001c8c:	f0 0b 16 09 	lsr	r11,r8,0x9
80001c90:	58 4b       	cp.w	r11,4
80001c92:	e0 8b 00 06 	brhi	80001c9e <_free_r+0x106>
80001c96:	f0 0b 16 06 	lsr	r11,r8,0x6
80001c9a:	2c 8b       	sub	r11,-56
80001c9c:	c2 b8       	rjmp	80001cf2 <_free_r+0x15a>
80001c9e:	59 4b       	cp.w	r11,20
80001ca0:	e0 8b 00 04 	brhi	80001ca8 <_free_r+0x110>
80001ca4:	2a 5b       	sub	r11,-91
80001ca6:	c2 68       	rjmp	80001cf2 <_free_r+0x15a>
80001ca8:	e0 4b 00 54 	cp.w	r11,84
80001cac:	e0 8b 00 06 	brhi	80001cb8 <_free_r+0x120>
80001cb0:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001cb4:	29 2b       	sub	r11,-110
80001cb6:	c1 e8       	rjmp	80001cf2 <_free_r+0x15a>
80001cb8:	e0 4b 01 54 	cp.w	r11,340
80001cbc:	e0 8b 00 06 	brhi	80001cc8 <_free_r+0x130>
80001cc0:	f0 0b 16 0f 	lsr	r11,r8,0xf
80001cc4:	28 9b       	sub	r11,-119
80001cc6:	c1 68       	rjmp	80001cf2 <_free_r+0x15a>
80001cc8:	e0 4b 05 54 	cp.w	r11,1364
80001ccc:	e0 88 00 10 	brls	80001cec <_free_r+0x154>
80001cd0:	37 eb       	mov	r11,126
80001cd2:	c1 08       	rjmp	80001cf2 <_free_r+0x15a>
80001cd4:	80 00       	ld.sh	r0,r0[0x0]
80001cd6:	1a 76       	tst	r6,sp
80001cd8:	00 00       	add	r0,r0
80001cda:	01 04       	ld.w	r4,r0++
80001cdc:	00 00       	add	r0,r0
80001cde:	05 0c       	ld.w	r12,r2++
80001ce0:	00 00       	add	r0,r0
80001ce2:	06 20       	rsub	r0,r3
80001ce4:	80 00       	ld.sh	r0,r0[0x0]
80001ce6:	1a f0       	st.b	--sp,r0
80001ce8:	80 00       	ld.sh	r0,r0[0x0]
80001cea:	1a 78       	tst	r8,sp
80001cec:	f0 0b 16 12 	lsr	r11,r8,0x12
80001cf0:	28 4b       	sub	r11,-124
80001cf2:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80001cf6:	78 29       	ld.w	r9,r12[0x8]
80001cf8:	18 39       	cp.w	r9,r12
80001cfa:	c0 e1       	brne	80001d16 <_free_r+0x17e>
80001cfc:	74 18       	ld.w	r8,r10[0x4]
80001cfe:	a3 4b       	asr	r11,0x2
80001d00:	30 1c       	mov	r12,1
80001d02:	f8 0b 09 4b 	lsl	r11,r12,r11
80001d06:	f1 eb 10 0b 	or	r11,r8,r11
80001d0a:	12 98       	mov	r8,r9
80001d0c:	95 1b       	st.w	r10[0x4],r11
80001d0e:	c0 a8       	rjmp	80001d22 <_free_r+0x18a>
80001d10:	72 29       	ld.w	r9,r9[0x8]
80001d12:	18 39       	cp.w	r9,r12
80001d14:	c0 60       	breq	80001d20 <_free_r+0x188>
80001d16:	72 1a       	ld.w	r10,r9[0x4]
80001d18:	e0 1a ff fc 	andl	r10,0xfffc
80001d1c:	14 38       	cp.w	r8,r10
80001d1e:	cf 93       	brcs	80001d10 <_free_r+0x178>
80001d20:	72 38       	ld.w	r8,r9[0xc]
80001d22:	8d 38       	st.w	r6[0xc],r8
80001d24:	8d 29       	st.w	r6[0x8],r9
80001d26:	93 36       	st.w	r9[0xc],r6
80001d28:	91 26       	st.w	r8[0x8],r6
80001d2a:	0e 9c       	mov	r12,r7
80001d2c:	f0 1f 00 02 	mcall	80001d34 <_free_r+0x19c>
80001d30:	d8 22       	popm	r4-r7,pc
80001d32:	00 00       	add	r0,r0
80001d34:	80 00       	ld.sh	r0,r0[0x0]
80001d36:	1a 78       	tst	r8,sp

Disassembly of section .exception:

80001e00 <_evba>:
	...

80001e28 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001e28:	c7 a8       	rjmp	80001f1c <privilegedCalls>
	...

80001f00 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001f00:	1c 9f       	mov	pc,lr

80001f02 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001f02:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001f06:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
80001f0a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
80001f0e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001f12:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001f14:	c0 31       	brne	80001f1a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001f16:	4b 9c       	lddpc	r12,80001ff8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001f18:	18 9f       	mov	pc,r12

80001f1a <_int0_exit>:
_int0_exit:
	rete
80001f1a:	d6 03       	rete

80001f1c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
80001f1c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
80001f1e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001f20:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001f22:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001f24:	9b 3c       	st.w	sp[0xc],r12

80001f26 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001f26:	4b 6c       	lddpc	r12,80001ffc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001f28:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
80001f2a:	c0 61       	brne	80001f36 <priv_interruptenable>
	ld.w r12,sp[USERSR]
80001f2c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
80001f2e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001f30:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001f32:	d3 02       	popm	r11-r12
	rete
80001f34:	d6 03       	rete

80001f36 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001f36:	4b 3c       	lddpc	r12,80002000 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001f38:	18 3b       	cp.w	r11,r12
	brne privexception
80001f3a:	c0 61       	brne	80001f46 <privexception>
	ld.w r12,sp[USERSR]
80001f3c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
80001f3e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001f40:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001f42:	d3 02       	popm	r11-r12
	rete
80001f44:	d6 03       	rete

80001f46 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001f46:	c0 08       	rjmp	80001f46 <privexception>

80001f48 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001f48:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
80001f4a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
80001f4e:	4a ec       	lddpc	r12,80002004 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001f50:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001f52:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001f54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001f58:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
80001f5c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001f60:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001f62:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001f64:	1c 9f       	mov	pc,lr

80001f66 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001f66:	d3 03       	ssrf	0x10
	mov pc,lr
80001f68:	1c 9f       	mov	pc,lr

80001f6a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
80001f6a:	d5 03       	csrf	0x10
	mov pc,lr
80001f6c:	1c 9f       	mov	pc,lr

80001f6e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
80001f6e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001f72:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001f74:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001f78:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
80001f7c:	1c 9f       	mov	pc,lr

80001f7e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001f7e:	4a 3c       	lddpc	r12,80002008 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001f80:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001f82:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001f84:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001f86:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001f88:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
80001f8a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
80001f8c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
80001f8e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001f90:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001f92:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001f94:	33 40       	mov	r0,52
	add r0,r12
80001f96:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001f98:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
80001f9c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
80001f9e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
80001fa2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
80001fa4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
80001fa6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
80001fa8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
80001faa:	1a 90       	mov	r0,sp
	st.w --sp,r0
80001fac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80001fae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
80001fb2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
80001fb4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
80001fb6:	1c 9f       	mov	pc,lr

80001fb8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001fb8:	49 4c       	lddpc	r12,80002008 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001fba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
80001fbc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80001fbe:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80001fc0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
80001fc4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
80001fc6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
80001fc8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80001fca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
80001fcc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80001fce:	33 40       	mov	r0,52
	add r0,r12
80001fd0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80001fd2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80001fd6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
80001fd8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
80001fda:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
80001fdc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
80001fde:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
80001fe0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
80001fe2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
80001fe4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
80001fe6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
80001fe8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80001fea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
80001fec:	d4 01       	pushm	lr
	call timerStart
80001fee:	f0 1f 00 08 	mcall	8000200c <contextRestoreFromISR+0x54>
	popm lr
80001ff2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
80001ff4:	1c 9f       	mov	pc,lr
80001ff6:	00 00       	add	r0,r0
80001ff8:	80 00       	ld.sh	r0,r0[0x0]
80001ffa:	0c 78       	tst	r8,r6
80001ffc:	80 00       	ld.sh	r0,r0[0x0]
80001ffe:	1f 66       	ld.uh	r6,--pc
80002000:	80 00       	ld.sh	r0,r0[0x0]
80002002:	1f 6a       	ld.uh	r10,--pc
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	1e 00       	add	r0,pc
80002008:	00 00       	add	r0,r0
8000200a:	07 20       	ld.uh	r0,r3++
8000200c:	80 00       	ld.sh	r0,r0[0x0]
8000200e:	14 7e       	tst	lr,r10
	...
