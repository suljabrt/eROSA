
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000183c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001a00  80001a00  00001e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80001e00  80001e00  00002200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80001e84  80001e84  00002284  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80001e88  00002408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002394  00002914  2**0
                  ALLOC
  9 .bss          00000098  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000da50  000005b0  000005b0  00000000  2**0
                  ALLOC
 11 .comment      000000bc  00000000  00000000  00002914  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000005c8  00000000  00000000  000029d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 000009d0  00000000  00000000  00002f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c547  00000000  00000000  00003968  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000020ee  00000000  00000000  0000feaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000477c  00000000  00000000  00011f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000c14  00000000  00000000  0001671c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001c7f  00000000  00000000  00017330  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000018bf  00000000  00000000  00018faf  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 005343c7  00000000  00000000  0001a86e  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 00000508  00000000  00000000  0054ec35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	10 14       	sub	r4,r8

Disassembly of section .text:

80000008 <ROSA_semaphoreCreate>:
 *
 * Comment:
 * 	Create a semaphore
 *
 **********************************************************/
int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t ** mutex, uint8_t ceiling) {
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 2d       	sub	sp,8
80000010:	ef 4c ff fc 	st.w	r7[-4],r12
80000014:	16 98       	mov	r8,r11
80000016:	ef 68 ff f8 	st.b	r7[-8],r8
	*mutex = (ROSA_semaphoreHandle_t*) malloc(sizeof(ROSA_semaphoreHandle_t*));
8000001a:	30 4c       	mov	r12,4
8000001c:	f0 1f 00 0c 	mcall	8000004c <ROSA_semaphoreCreate+0x44>
80000020:	18 98       	mov	r8,r12
80000022:	10 99       	mov	r9,r8
80000024:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000028:	91 09       	st.w	r8[0x0],r9
	(*mutex)->holder = NULL;
8000002a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000002e:	70 08       	ld.w	r8,r8[0x0]
80000030:	30 09       	mov	r9,0
80000032:	91 09       	st.w	r8[0x0],r9
	(*mutex)->ceiling = ceiling;
80000034:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000038:	70 09       	ld.w	r9,r8[0x0]
8000003a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000003e:	b2 c8       	st.b	r9[0x4],r8
	
	return 0;
80000040:	30 08       	mov	r8,0
}
80000042:	10 9c       	mov	r12,r8
80000044:	2f ed       	sub	sp,-8
80000046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000004a:	00 00       	add	r0,r0
8000004c:	80 00       	ld.sh	r0,r0[0x0]
8000004e:	11 0c       	ld.w	r12,r8++

80000050 <usart_options>:
80000050:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 31     ............tsk1
80000060:	00 00 00 00 74 73 6b 32 00 00 00 00                 ....tsk2....

8000006c <task1>:
 * Task1
 * LED0 lights up
 * LED1 goes dark
 ************************************************************/
void task1(void)
{
8000006c:	eb cd 40 80 	pushm	r7,lr
80000070:	1a 97       	mov	r7,sp
	while(1) {
//		ROSA_semaphoreLock(&mutex);
		ledOn(LED0_GPIO);
80000072:	33 bc       	mov	r12,59
80000074:	f0 1f 00 08 	mcall	80000094 <task1+0x28>
		delay_ms(350);
80000078:	e0 6c 01 5e 	mov	r12,350
8000007c:	f0 1f 00 07 	mcall	80000098 <task1+0x2c>
		ledOff(LED0_GPIO);
80000080:	33 bc       	mov	r12,59
80000082:	f0 1f 00 07 	mcall	8000009c <task1+0x30>
		delay_ms(350);
80000086:	e0 6c 01 5e 	mov	r12,350
8000008a:	f0 1f 00 04 	mcall	80000098 <task1+0x2c>
	//	ROSA_semaphoreUnlock(&mutex);
		ROSA_yield();
8000008e:	f0 1f 00 05 	mcall	800000a0 <task1+0x34>
	}
80000092:	cf 0b       	rjmp	80000072 <task1+0x6>
80000094:	80 00       	ld.sh	r0,r0[0x0]
80000096:	0c 44       	or	r4,r6
80000098:	80 00       	ld.sh	r0,r0[0x0]
8000009a:	0a 3c       	cp.w	r12,r5
8000009c:	80 00       	ld.sh	r0,r0[0x0]
8000009e:	0c 64       	and	r4,r6
800000a0:	80 00       	ld.sh	r0,r0[0x0]
800000a2:	05 ea       	ld.ub	r10,r2[0x6]

800000a4 <task2>:
 * Task2
 * LED0 goes dark
 * LED1 lights up
 ************************************************************/
void task2(void)
{
800000a4:	eb cd 40 80 	pushm	r7,lr
800000a8:	1a 97       	mov	r7,sp
	while(1) {
		//ROSA_semaphoreLock(&mutex);
		ledOn(LED1_GPIO);
800000aa:	33 cc       	mov	r12,60
800000ac:	f0 1f 00 0b 	mcall	800000d8 <task2+0x34>
		ROSA_delay(350);
800000b0:	e0 6a 01 5e 	mov	r10,350
800000b4:	30 0b       	mov	r11,0
800000b6:	f0 1f 00 0a 	mcall	800000dc <task2+0x38>
		ledOn(LED2_GPIO);
800000ba:	33 dc       	mov	r12,61
800000bc:	f0 1f 00 07 	mcall	800000d8 <task2+0x34>
		ledOff(LED1_GPIO);
800000c0:	33 cc       	mov	r12,60
800000c2:	f0 1f 00 08 	mcall	800000e0 <task2+0x3c>
		ROSA_delay(350);
800000c6:	e0 6a 01 5e 	mov	r10,350
800000ca:	30 0b       	mov	r11,0
800000cc:	f0 1f 00 04 	mcall	800000dc <task2+0x38>
		//ROSA_semaphoreUnlock(&mutex);
		ROSA_yield();
800000d0:	f0 1f 00 05 	mcall	800000e4 <task2+0x40>
	}
800000d4:	ce bb       	rjmp	800000aa <task2+0x6>
800000d6:	00 00       	add	r0,r0
800000d8:	80 00       	ld.sh	r0,r0[0x0]
800000da:	0c 44       	or	r4,r6
800000dc:	80 00       	ld.sh	r0,r0[0x0]
800000de:	07 88       	ld.ub	r8,r3[0x0]
800000e0:	80 00       	ld.sh	r0,r0[0x0]
800000e2:	0c 64       	and	r4,r6
800000e4:	80 00       	ld.sh	r0,r0[0x0]
800000e6:	05 ea       	ld.ub	r10,r2[0x6]

800000e8 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
800000e8:	eb cd 40 80 	pushm	r7,lr
800000ec:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
800000ee:	f0 1f 00 0c 	mcall	8000011c <main+0x34>
	
	//Create tasks and install them into the ROSA kernel
	ROSA_taskCreate(&t1_tcb, "tsk1", task1, T1_STACK_SIZE, 0);
800000f2:	30 08       	mov	r8,0
800000f4:	32 09       	mov	r9,32
800000f6:	48 ba       	lddpc	r10,80000120 <main+0x38>
800000f8:	48 bb       	lddpc	r11,80000124 <main+0x3c>
800000fa:	48 cc       	lddpc	r12,80000128 <main+0x40>
800000fc:	f0 1f 00 0c 	mcall	8000012c <main+0x44>
	ROSA_taskCreate(&t2_tcb, "tsk2", task2, T2_STACK_SIZE, 4);
80000100:	30 48       	mov	r8,4
80000102:	32 09       	mov	r9,32
80000104:	48 ba       	lddpc	r10,80000130 <main+0x48>
80000106:	48 cb       	lddpc	r11,80000134 <main+0x4c>
80000108:	48 cc       	lddpc	r12,80000138 <main+0x50>
8000010a:	f0 1f 00 09 	mcall	8000012c <main+0x44>
	ROSA_semaphoreCreate(&mutex, 1);
8000010e:	30 1b       	mov	r11,1
80000110:	48 bc       	lddpc	r12,8000013c <main+0x54>
80000112:	f0 1f 00 0c 	mcall	80000140 <main+0x58>
	ROSA_tcbInstall(&t2_tcb);*/

	//Start the ROSA kernel
	//TCBLIST = PA[2]->nexttcb;
	//ROSA_start();
	ROSA_startScheduler();
80000116:	f0 1f 00 0c 	mcall	80000144 <main+0x5c>
	//ledOn(LED1_GPIO);
	/* Execution will never return here */
	while(1);
8000011a:	c0 08       	rjmp	8000011a <main+0x32>
8000011c:	80 00       	ld.sh	r0,r0[0x0]
8000011e:	02 ec       	st.h	--r1,r12
80000120:	80 00       	ld.sh	r0,r0[0x0]
80000122:	00 6c       	and	r12,r0
80000124:	80 00       	ld.sh	r0,r0[0x0]
80000126:	00 5c       	eor	r12,r0
80000128:	00 00       	add	r0,r0
8000012a:	05 60       	ld.uh	r0,--r2
8000012c:	80 00       	ld.sh	r0,r0[0x0]
8000012e:	04 48       	or	r8,r2
80000130:	80 00       	ld.sh	r0,r0[0x0]
80000132:	00 a4       	st.w	r0++,r4
80000134:	80 00       	ld.sh	r0,r0[0x0]
80000136:	00 64       	and	r4,r0
80000138:	00 00       	add	r0,r0
8000013a:	05 58       	ld.sh	r8,--r2
8000013c:	00 00       	add	r0,r0
8000013e:	05 5c       	ld.sh	r12,--r2
80000140:	80 00       	ld.sh	r0,r0[0x0]
80000142:	00 08       	add	r8,r0
80000144:	80 00       	ld.sh	r0,r0[0x0]
80000146:	06 54       	eor	r4,r3

80000148 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
80000148:	eb cd 40 80 	pushm	r7,lr
8000014c:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
8000014e:	f0 1f 00 05 	mcall	80000160 <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
80000152:	f0 1f 00 05 	mcall	80000164 <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it.
80000156:	f0 1f 00 05 	mcall	80000168 <ROSA_yieldFromISR+0x20>
}
8000015a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000015e:	00 00       	add	r0,r0
80000160:	80 00       	ld.sh	r0,r0[0x0]
80000162:	1b 7e       	ld.ub	lr,--sp
80000164:	80 00       	ld.sh	r0,r0[0x0]
80000166:	06 08       	add	r8,r3
80000168:	80 00       	ld.sh	r0,r0[0x0]
8000016a:	1b b8       	ld.ub	r8,sp[0x3]

8000016c <usart_options>:
8000016c:	00 00 e1 00 08 04 00 00 00 00 00 00                 ............

80000178 <rqi>:
	@brief Inserts the given task into the ready queue by its priority.
	@param th Task structure (tcb structure).
	@return A status code (1 - item has been added to the empty queue, 0 - otherwise).
*/
int rqi(ROSA_taskHandle_t ** pth)
{
80000178:	eb cd 40 80 	pushm	r7,lr
8000017c:	1a 97       	mov	r7,sp
8000017e:	20 2d       	sub	sp,8
80000180:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t priority;
	
	priority = (*pth)->priority;
80000184:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000188:	70 08       	ld.w	r8,r8[0x0]
8000018a:	f1 38 00 64 	ld.ub	r8,r8[100]
8000018e:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (PA[priority] == NULL) {
80000192:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000196:	49 d8       	lddpc	r8,80000208 <rqi+0x90>
80000198:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000019c:	58 08       	cp.w	r8,0
8000019e:	c1 41       	brne	800001c6 <rqi+0x4e>
		PA[priority] = *pth;
800001a0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800001a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001a8:	70 0a       	ld.w	r10,r8[0x0]
800001aa:	49 88       	lddpc	r8,80000208 <rqi+0x90>
800001ac:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		PA[priority]->nexttcb = *pth;
800001b0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800001b4:	49 58       	lddpc	r8,80000208 <rqi+0x90>
800001b6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800001ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
800001be:	72 09       	ld.w	r9,r9[0x0]
800001c0:	91 09       	st.w	r8[0x0],r9
		return 1;
800001c2:	30 18       	mov	r8,1
800001c4:	c1 d8       	rjmp	800001fe <rqi+0x86>
	}
	else {
		(*pth)->nexttcb = PA[priority]->nexttcb;
800001c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001ca:	70 08       	ld.w	r8,r8[0x0]
800001cc:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800001d0:	48 e9       	lddpc	r9,80000208 <rqi+0x90>
800001d2:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800001d6:	72 09       	ld.w	r9,r9[0x0]
800001d8:	91 09       	st.w	r8[0x0],r9
		PA[priority]->nexttcb = *pth;
800001da:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800001de:	48 b8       	lddpc	r8,80000208 <rqi+0x90>
800001e0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800001e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800001e8:	72 09       	ld.w	r9,r9[0x0]
800001ea:	91 09       	st.w	r8[0x0],r9
		PA[priority] = *pth;
800001ec:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800001f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001f4:	70 0a       	ld.w	r10,r8[0x0]
800001f6:	48 58       	lddpc	r8,80000208 <rqi+0x90>
800001f8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		return 0;
800001fc:	30 08       	mov	r8,0
	}
}
800001fe:	10 9c       	mov	r12,r8
80000200:	2f ed       	sub	sp,-8
80000202:	e3 cd 80 80 	ldm	sp++,r7,pc
80000206:	00 00       	add	r0,r0
80000208:	00 00       	add	r0,r0
8000020a:	05 68       	ld.uh	r8,--r2

8000020c <rqe>:
	@brief Extracts the given task from the ready queue by its priority.
	@param th Task structure (tcb structure).
	@return A status code (1 - queue is empty after extraction, 0 - otherwise).
*/
int rqe(ROSA_taskHandle_t ** pth)
{
8000020c:	eb cd 40 80 	pushm	r7,lr
80000210:	1a 97       	mov	r7,sp
80000212:	20 3d       	sub	sp,12
80000214:	ef 4c ff f4 	st.w	r7[-12],r12
	ROSA_taskHandle_t * thTmp;
	
	uint8_t priority;
	
	priority = (*pth)->priority;
80000218:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000021c:	70 08       	ld.w	r8,r8[0x0]
8000021e:	f1 38 00 64 	ld.ub	r8,r8[100]
80000222:	ef 68 ff ff 	st.b	r7[-1],r8
	thTmp = PA[priority];
80000226:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000022a:	4a 28       	lddpc	r8,800002b0 <rqe+0xa4>
8000022c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000230:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if ((*pth)->nexttcb == *pth) 
80000234:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000238:	70 08       	ld.w	r8,r8[0x0]
8000023a:	70 09       	ld.w	r9,r8[0x0]
8000023c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000240:	70 08       	ld.w	r8,r8[0x0]
80000242:	10 39       	cp.w	r9,r8
80000244:	c0 f1       	brne	80000262 <rqe+0x56>
	{
		PA[priority] = NULL;
80000246:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000024a:	49 a8       	lddpc	r8,800002b0 <rqe+0xa4>
8000024c:	30 0a       	mov	r10,0
8000024e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		return 1;
80000252:	30 18       	mov	r8,1
80000254:	c2 98       	rjmp	800002a6 <rqe+0x9a>
	}
	else 
	{
		while (thTmp->nexttcb != (*pth)) 
		{
			thTmp = thTmp->nexttcb;
80000256:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000025a:	70 08       	ld.w	r8,r8[0x0]
8000025c:	ef 48 ff f8 	st.w	r7[-8],r8
80000260:	c0 28       	rjmp	80000264 <rqe+0x58>
		PA[priority] = NULL;
		return 1;
	}
	else 
	{
		while (thTmp->nexttcb != (*pth)) 
80000262:	d7 03       	nop
80000264:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000268:	70 09       	ld.w	r9,r8[0x0]
8000026a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000026e:	70 08       	ld.w	r8,r8[0x0]
80000270:	10 39       	cp.w	r9,r8
80000272:	cf 21       	brne	80000256 <rqe+0x4a>
		{
			thTmp = thTmp->nexttcb;
		}
		
		if (PA[priority] == *pth) 
80000274:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000278:	48 e8       	lddpc	r8,800002b0 <rqe+0xa4>
8000027a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000027e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000282:	70 08       	ld.w	r8,r8[0x0]
80000284:	10 39       	cp.w	r9,r8
80000286:	c0 81       	brne	80000296 <rqe+0x8a>
		{
			PA[priority] = thTmp;
80000288:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000028c:	48 98       	lddpc	r8,800002b0 <rqe+0xa4>
8000028e:	ee fa ff f8 	ld.w	r10,r7[-8]
80000292:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		}
		
		thTmp->nexttcb = (*pth)->nexttcb;
80000296:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000029a:	70 08       	ld.w	r8,r8[0x0]
8000029c:	70 09       	ld.w	r9,r8[0x0]
8000029e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002a2:	91 09       	st.w	r8[0x0],r9
		return 0;
800002a4:	30 08       	mov	r8,0
	}
}
800002a6:	10 9c       	mov	r12,r8
800002a8:	2f dd       	sub	sp,-12
800002aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800002ae:	00 00       	add	r0,r0
800002b0:	00 00       	add	r0,r0
800002b2:	05 68       	ld.uh	r8,--r2

800002b4 <rqsearch>:
	@brief Search for the first non-empty highest priority queue.
	@return A status code (reserved).
	@todo Check for empty PA.
*/
int rqsearch(void)
{
800002b4:	eb cd 40 80 	pushm	r7,lr
800002b8:	1a 97       	mov	r7,sp
800002ba:	20 1d       	sub	sp,4
	int i = MAXNPRIO;
800002bc:	30 c8       	mov	r8,12
800002be:	ef 48 ff fc 	st.w	r7[-4],r8
	
	while (PA[--i] == NULL) {
800002c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002c6:	20 18       	sub	r8,1
800002c8:	ef 48 ff fc 	st.w	r7[-4],r8
800002cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002d0:	48 68       	lddpc	r8,800002e8 <rqsearch+0x34>
800002d2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800002d6:	58 08       	cp.w	r8,0
800002d8:	cf 50       	breq	800002c2 <rqsearch+0xe>
		;
	}
	
	return i;
800002da:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800002de:	10 9c       	mov	r12,r8
800002e0:	2f fd       	sub	sp,-4
800002e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800002e6:	00 00       	add	r0,r0
800002e8:	00 00       	add	r0,r0
800002ea:	05 68       	ld.uh	r8,--r2

800002ec <ROSA_init>:

void ROSA_init(void)
{
800002ec:	eb cd 40 80 	pushm	r7,lr
800002f0:	1a 97       	mov	r7,sp
800002f2:	20 1d       	sub	sp,4
	int i = 0;
800002f4:	30 08       	mov	r8,0
800002f6:	ef 48 ff fc 	st.w	r7[-4],r8
	systemTick = 0;
800002fa:	49 ca       	lddpc	r10,80000368 <ROSA_init+0x7c>
800002fc:	30 08       	mov	r8,0
800002fe:	30 09       	mov	r9,0
80000300:	f4 e9 00 00 	st.d	r10[0],r8
	
	//Do initialization of I/O drivers
	ledInit();									//LEDs
80000304:	f0 1f 00 1a 	mcall	8000036c <ROSA_init+0x80>
	buttonInit();								//Buttons
80000308:	f0 1f 00 1a 	mcall	80000370 <ROSA_init+0x84>
	joystickInit();								//Joystick
8000030c:	f0 1f 00 1a 	mcall	80000374 <ROSA_init+0x88>
	potInit();									//Potentiometer
80000310:	f0 1f 00 1a 	mcall	80000378 <ROSA_init+0x8c>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
80000314:	e0 6a 1b 00 	mov	r10,6912
80000318:	ea 1a 00 b7 	orh	r10,0xb7
8000031c:	49 8b       	lddpc	r11,8000037c <ROSA_init+0x90>
8000031e:	fe 7c 14 00 	mov	r12,-60416
80000322:	f0 1f 00 18 	mcall	80000380 <ROSA_init+0x94>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
80000326:	49 88       	lddpc	r8,80000384 <ROSA_init+0x98>
80000328:	30 09       	mov	r9,0
8000032a:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
8000032c:	49 78       	lddpc	r8,80000388 <ROSA_init+0x9c>
8000032e:	30 09       	mov	r9,0
80000330:	91 09       	st.w	r8[0x0],r9
	PREEMPTASK = NULL;
80000332:	49 78       	lddpc	r8,8000038c <ROSA_init+0xa0>
80000334:	30 09       	mov	r9,0
80000336:	91 09       	st.w	r8[0x0],r9
	
	for (i = 0; i < MAXNPRIO; i++) {
80000338:	30 08       	mov	r8,0
8000033a:	ef 48 ff fc 	st.w	r7[-4],r8
8000033e:	c0 c8       	rjmp	80000356 <ROSA_init+0x6a>
		PA[i] = NULL;
80000340:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000344:	49 38       	lddpc	r8,80000390 <ROSA_init+0xa4>
80000346:	30 0a       	mov	r10,0
80000348:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
	EXECTASK = NULL;
	PREEMPTASK = NULL;
	
	for (i = 0; i < MAXNPRIO; i++) {
8000034c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000350:	2f f8       	sub	r8,-1
80000352:	ef 48 ff fc 	st.w	r7[-4],r8
80000356:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000035a:	58 b8       	cp.w	r8,11
8000035c:	fe 9a ff f2 	brle	80000340 <ROSA_init+0x54>
	
	//Initialize the timer to 100 ms period.
	//...
	//timerInit(100);
	//...
}
80000360:	2f fd       	sub	sp,-4
80000362:	e3 cd 80 80 	ldm	sp++,r7,pc
80000366:	00 00       	add	r0,r0
80000368:	00 00       	add	r0,r0
8000036a:	05 a4       	ld.ub	r4,r2[0x2]
8000036c:	80 00       	ld.sh	r0,r0[0x0]
8000036e:	0b b8       	ld.ub	r8,r5[0x3]
80000370:	80 00       	ld.sh	r0,r0[0x0]
80000372:	09 dc       	ld.ub	r12,r4[0x5]
80000374:	80 00       	ld.sh	r0,r0[0x0]
80000376:	0a 04       	add	r4,r5
80000378:	80 00       	ld.sh	r0,r0[0x0]
8000037a:	0c 84       	andn	r4,r6
8000037c:	80 00       	ld.sh	r0,r0[0x0]
8000037e:	01 6c       	ld.uh	r12,--r0
80000380:	80 00       	ld.sh	r0,r0[0x0]
80000382:	0e 38       	cp.w	r8,r7
80000384:	00 00       	add	r0,r0
80000386:	05 64       	ld.uh	r4,--r2
80000388:	00 00       	add	r0,r0
8000038a:	05 9c       	ld.ub	r12,r2[0x1]
8000038c:	00 00       	add	r0,r0
8000038e:	05 98       	ld.ub	r8,r2[0x1]
80000390:	00 00       	add	r0,r0
80000392:	05 68       	ld.uh	r8,--r2

80000394 <ROSA_tcbCreate>:

void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
80000394:	eb cd 40 80 	pushm	r7,lr
80000398:	1a 97       	mov	r7,sp
8000039a:	20 6d       	sub	sp,24
8000039c:	ef 4c ff f8 	st.w	r7[-8],r12
800003a0:	ef 4b ff f4 	st.w	r7[-12],r11
800003a4:	ef 4a ff f0 	st.w	r7[-16],r10
800003a8:	ef 49 ff ec 	st.w	r7[-20],r9
800003ac:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800003b0:	30 08       	mov	r8,0
800003b2:	ef 48 ff fc 	st.w	r7[-4],r8
800003b6:	c1 48       	rjmp	800003de <ROSA_tcbCreate+0x4a>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
800003b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800003bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003c0:	ee fa ff f4 	ld.w	r10,r7[-12]
800003c4:	f4 08 00 08 	add	r8,r10,r8
800003c8:	11 88       	ld.ub	r8,r8[0x0]
800003ca:	ee fa ff f8 	ld.w	r10,r7[-8]
800003ce:	f4 09 00 09 	add	r9,r10,r9
800003d2:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800003d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003d8:	2f f8       	sub	r8,-1
800003da:	ef 48 ff fc 	st.w	r7[-4],r8
800003de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003e2:	58 38       	cp.w	r8,3
800003e4:	fe 9a ff ea 	brle	800003b8 <ROSA_tcbCreate+0x24>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
800003e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003ec:	30 09       	mov	r9,0
800003ee:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
800003f0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800003f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003f8:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
800003fa:	ee f9 ff f0 	ld.w	r9,r7[-16]
800003fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000402:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
80000404:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000408:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000040c:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
8000040e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000412:	a3 68       	lsl	r8,0x2
80000414:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000418:	10 09       	add	r9,r8
8000041a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000041e:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
80000420:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000424:	70 39       	ld.w	r9,r8[0xc]
80000426:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000042a:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
8000042c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000430:	fc 19 00 1c 	movh	r9,0x1c
80000434:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
80000436:	ee fc ff f8 	ld.w	r12,r7[-8]
8000043a:	f0 1f 00 03 	mcall	80000444 <ROSA_tcbCreate+0xb0>
}
8000043e:	2f ad       	sub	sp,-24
80000440:	e3 cd 80 80 	ldm	sp++,r7,pc
80000444:	80 00       	ld.sh	r0,r0[0x0]
80000446:	05 5e       	ld.sh	lr,--r2

80000448 <ROSA_taskCreate>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

int16_t ROSA_taskCreate(ROSA_taskHandle_t ** pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
80000448:	eb cd 40 80 	pushm	r7,lr
8000044c:	1a 97       	mov	r7,sp
8000044e:	20 6d       	sub	sp,24
80000450:	ef 4c ff f8 	st.w	r7[-8],r12
80000454:	ef 4b ff f4 	st.w	r7[-12],r11
80000458:	ef 4a ff f0 	st.w	r7[-16],r10
8000045c:	ef 49 ff ec 	st.w	r7[-20],r9
80000460:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) calloc(stackSize, sizeof(uint32_t)); 
80000464:	30 4b       	mov	r11,4
80000466:	ee fc ff ec 	ld.w	r12,r7[-20]
8000046a:	f0 1f 00 28 	mcall	80000508 <ROSA_taskCreate+0xc0>
8000046e:	18 98       	mov	r8,r12
80000470:	ef 48 ff fc 	st.w	r7[-4],r8
	
	*pth = (ROSA_taskHandle_t *) malloc(sizeof(ROSA_taskHandle_t));			
80000474:	37 4c       	mov	r12,116
80000476:	f0 1f 00 26 	mcall	8000050c <ROSA_taskCreate+0xc4>
8000047a:	18 98       	mov	r8,r12
8000047c:	10 99       	mov	r9,r8
8000047e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000482:	91 09       	st.w	r8[0x0],r9
	(*pth)->priority = priority;
80000484:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000488:	70 09       	ld.w	r9,r8[0x0]
8000048a:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000048e:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
80000492:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000496:	70 0a       	ld.w	r10,r8[0x0]
80000498:	30 08       	mov	r8,0
8000049a:	30 09       	mov	r9,0
8000049c:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
800004a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004a4:	70 09       	ld.w	r9,r8[0x0]
800004a6:	30 08       	mov	r8,0
800004a8:	f3 68 00 70 	st.b	r9[112],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
800004ac:	ee f8 ff ec 	ld.w	r8,r7[-20]
800004b0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800004b4:	72 0c       	ld.w	r12,r9[0x0]
800004b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800004ba:	ee fa ff f0 	ld.w	r10,r7[-16]
800004be:	ee fb ff f4 	ld.w	r11,r7[-12]
800004c2:	f0 1f 00 14 	mcall	80000510 <ROSA_taskCreate+0xc8>
	
	rqi(pth);
800004c6:	ee fc ff f8 	ld.w	r12,r7[-8]
800004ca:	f0 1f 00 13 	mcall	80000514 <ROSA_taskCreate+0xcc>
	
	if (EXECTASK != NULL) {
800004ce:	49 38       	lddpc	r8,80000518 <ROSA_taskCreate+0xd0>
800004d0:	70 08       	ld.w	r8,r8[0x0]
800004d2:	58 08       	cp.w	r8,0
800004d4:	c1 40       	breq	800004fc <ROSA_taskCreate+0xb4>
		if (EXECTASK->priority < priority) {
800004d6:	49 18       	lddpc	r8,80000518 <ROSA_taskCreate+0xd0>
800004d8:	70 08       	ld.w	r8,r8[0x0]
800004da:	f1 38 00 64 	ld.ub	r8,r8[100]
800004de:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800004e2:	f0 09 18 00 	cp.b	r9,r8
800004e6:	e0 88 00 0b 	brls	800004fc <ROSA_taskCreate+0xb4>
			PREEMPTASK = PA[priority];
800004ea:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800004ee:	48 c8       	lddpc	r8,8000051c <ROSA_taskCreate+0xd4>
800004f0:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800004f4:	48 b8       	lddpc	r8,80000520 <ROSA_taskCreate+0xd8>
800004f6:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
800004f8:	f0 1f 00 0b 	mcall	80000524 <ROSA_taskCreate+0xdc>
		}	
	}
	
	return 0;
800004fc:	30 08       	mov	r8,0
}
800004fe:	10 9c       	mov	r12,r8
80000500:	2f ad       	sub	sp,-24
80000502:	e3 cd 80 80 	ldm	sp++,r7,pc
80000506:	00 00       	add	r0,r0
80000508:	80 00       	ld.sh	r0,r0[0x0]
8000050a:	10 94       	mov	r4,r8
8000050c:	80 00       	ld.sh	r0,r0[0x0]
8000050e:	11 0c       	ld.w	r12,r8++
80000510:	80 00       	ld.sh	r0,r0[0x0]
80000512:	03 94       	ld.ub	r4,r1[0x1]
80000514:	80 00       	ld.sh	r0,r0[0x0]
80000516:	01 78       	ld.ub	r8,--r0
80000518:	00 00       	add	r0,r0
8000051a:	05 9c       	ld.ub	r12,r2[0x1]
8000051c:	00 00       	add	r0,r0
8000051e:	05 68       	ld.uh	r8,--r2
80000520:	00 00       	add	r0,r0
80000522:	05 98       	ld.ub	r8,r2[0x1]
80000524:	80 00       	ld.sh	r0,r0[0x0]
80000526:	05 ea       	ld.ub	r10,r2[0x6]

80000528 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80000528:	4b 5c       	lddpc	r12,800005fc <_yield+0xa>
	lda.w r11,EXECTASK
8000052a:	4b 6b       	lddpc	r11,80000600 <_yield+0xe>
	ld.w r12,r12[0x0]
8000052c:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
8000052e:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000530:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000532:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000534:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000538:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
8000053a:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
8000053c:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
8000053e:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80000542:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000544:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80000546:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000548:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
8000054a:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
8000054c:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
8000054e:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000550:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80000552:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000554:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000556:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000558:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
8000055a:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
8000055c:	1c 9f       	mov	pc,lr

8000055e <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
8000055e:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000560:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80000562:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000564:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000568:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
8000056c:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000570:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000574:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000578:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
8000057c:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000580:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000584:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000588:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
8000058a:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
8000058c:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
8000058e:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000590:	1c 9f       	mov	pc,lr

80000592 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
80000592:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000594:	49 bc       	lddpc	r12,80000600 <_yield+0xe>
	ld.w r12,r12[0x0]
80000596:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000598:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
8000059a:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
8000059c:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
8000059e:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
800005a0:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
800005a2:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
800005a4:	33 40       	mov	r0,52
	add r0,r12
800005a6:	18 00       	add	r0,r12
	stmts r0,r0-r11
800005a8:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
800005ac:	1a 90       	mov	r0,sp
	st.w --sp,r0
800005ae:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800005b0:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
800005b4:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
800005b6:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
800005b8:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
800005ba:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
800005bc:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
800005be:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
800005c0:	1c 9f       	mov	pc,lr

800005c2 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800005c2:	49 0c       	lddpc	r12,80000600 <_yield+0xe>
	ld.w r12,r12[0x0]
800005c4:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
800005c6:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
800005c8:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
800005ca:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
800005ce:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
800005d0:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800005d2:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
800005d4:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800005d6:	33 40       	mov	r0,52
	add r0,r12
800005d8:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800005da:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800005de:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
800005e0:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800005e2:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
800005e4:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
800005e6:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
800005e8:	d6 13       	rets

800005ea <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
800005ea:	d4 01       	pushm	lr
	lda.w lr,_yield
800005ec:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
800005f0:	d7 33       	scall

800005f2 <_yield>:
_yield:
	call contextSave
800005f2:	cd 0f       	rcall	80000592 <contextSave>
	call scheduler
800005f4:	f0 1f 00 04 	mcall	80000604 <_yield+0x12>
	call contextRestore
800005f8:	ce 5f       	rcall	800005c2 <contextRestore>
800005fa:	00 00       	add	r0,r0
800005fc:	00 00       	add	r0,r0
800005fe:	05 64       	ld.uh	r4,--r2
80000600:	00 00       	add	r0,r0
80000602:	05 9c       	ld.ub	r12,r2[0x1]
80000604:	80 00       	ld.sh	r0,r0[0x0]
80000606:	06 08       	add	r8,r3

80000608 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000608:	eb cd 40 80 	pushm	r7,lr
8000060c:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK == NULL) {
8000060e:	48 f8       	lddpc	r8,80000648 <scheduler+0x40>
80000610:	70 08       	ld.w	r8,r8[0x0]
80000612:	58 08       	cp.w	r8,0
80000614:	c1 11       	brne	80000636 <scheduler+0x2e>
		PA[EXECTASK->priority] = EXECTASK;
80000616:	48 e8       	lddpc	r8,8000064c <scheduler+0x44>
80000618:	70 08       	ld.w	r8,r8[0x0]
8000061a:	f1 38 00 64 	ld.ub	r8,r8[100]
8000061e:	10 99       	mov	r9,r8
80000620:	48 b8       	lddpc	r8,8000064c <scheduler+0x44>
80000622:	70 0a       	ld.w	r10,r8[0x0]
80000624:	48 b8       	lddpc	r8,80000650 <scheduler+0x48>
80000626:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		EXECTASK = EXECTASK->nexttcb;
8000062a:	48 98       	lddpc	r8,8000064c <scheduler+0x44>
8000062c:	70 08       	ld.w	r8,r8[0x0]
8000062e:	70 09       	ld.w	r9,r8[0x0]
80000630:	48 78       	lddpc	r8,8000064c <scheduler+0x44>
80000632:	91 09       	st.w	r8[0x0],r9
80000634:	c0 88       	rjmp	80000644 <scheduler+0x3c>
	}
	else {
		EXECTASK = PREEMPTASK;
80000636:	48 58       	lddpc	r8,80000648 <scheduler+0x40>
80000638:	70 09       	ld.w	r9,r8[0x0]
8000063a:	48 58       	lddpc	r8,8000064c <scheduler+0x44>
8000063c:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
8000063e:	48 38       	lddpc	r8,80000648 <scheduler+0x40>
80000640:	30 09       	mov	r9,0
80000642:	91 09       	st.w	r8[0x0],r9
	}
}
80000644:	e3 cd 80 80 	ldm	sp++,r7,pc
80000648:	00 00       	add	r0,r0
8000064a:	05 98       	ld.ub	r8,r2[0x1]
8000064c:	00 00       	add	r0,r0
8000064e:	05 9c       	ld.ub	r12,r2[0x1]
80000650:	00 00       	add	r0,r0
80000652:	05 68       	ld.uh	r8,--r2

80000654 <ROSA_startScheduler>:

void ROSA_startScheduler(void)
{
80000654:	eb cd 40 80 	pushm	r7,lr
80000658:	1a 97       	mov	r7,sp
8000065a:	20 1d       	sub	sp,4
	int i = MAXNPRIO;
8000065c:	30 c8       	mov	r8,12
8000065e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	while (PA[--i] == NULL) {
80000662:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000666:	20 18       	sub	r8,1
80000668:	ef 48 ff fc 	st.w	r7[-4],r8
8000066c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000670:	48 98       	lddpc	r8,80000694 <ROSA_startScheduler+0x40>
80000672:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000676:	58 08       	cp.w	r8,0
80000678:	cf 50       	breq	80000662 <ROSA_startScheduler+0xe>
		;
	}
	
	TCBLIST = PA[i]->nexttcb;
8000067a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000067e:	48 68       	lddpc	r8,80000694 <ROSA_startScheduler+0x40>
80000680:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000684:	70 09       	ld.w	r9,r8[0x0]
80000686:	48 58       	lddpc	r8,80000698 <ROSA_startScheduler+0x44>
80000688:	91 09       	st.w	r8[0x0],r9
	
	ROSA_start();
8000068a:	f0 1f 00 05 	mcall	8000069c <ROSA_startScheduler+0x48>
}
8000068e:	2f fd       	sub	sp,-4
80000690:	e3 cd 80 80 	ldm	sp++,r7,pc
80000694:	00 00       	add	r0,r0
80000696:	05 68       	ld.uh	r8,--r2
80000698:	00 00       	add	r0,r0
8000069a:	05 64       	ld.uh	r4,--r2
8000069c:	80 00       	ld.sh	r0,r0[0x0]
8000069e:	05 28       	ld.uh	r8,r2++

800006a0 <C.11.9543>:
800006a0:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

800006b0 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
800006b0:	eb cd 40 80 	pushm	r7,lr
800006b4:	1a 97       	mov	r7,sp
800006b6:	20 5d       	sub	sp,20
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
800006b8:	fe 78 38 00 	mov	r8,-51200
800006bc:	ef 48 ff f4 	st.w	r7[-12],r8
	systemTick++;
800006c0:	4a 48       	lddpc	r8,80000750 <timerISR+0xa0>
800006c2:	f0 ea 00 00 	ld.d	r10,r8[0]
800006c6:	30 18       	mov	r8,1
800006c8:	30 09       	mov	r9,0
800006ca:	f4 08 00 08 	add	r8,r10,r8
800006ce:	f6 09 00 49 	adc	r9,r11,r9
800006d2:	4a 0a       	lddpc	r10,80000750 <timerISR+0xa0>
800006d4:	f4 e9 00 00 	st.d	r10[0],r8

	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
800006d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800006dc:	70 88       	ld.w	r8,r8[0x20]
800006de:	ef 48 ff f0 	st.w	r7[-16],r8
	
	bool interruptTask = false;
800006e2:	30 08       	mov	r8,0
800006e4:	ef 68 ff fb 	st.b	r7[-5],r8
	
	while (DELAYQUEUE->delay <= systemTick)
800006e8:	c1 c8       	rjmp	80000720 <timerISR+0x70>
	{
		ROSA_taskHandle_t * tmptsk = DELAYQUEUE;
800006ea:	49 b8       	lddpc	r8,80000754 <timerISR+0xa4>
800006ec:	70 08       	ld.w	r8,r8[0x0]
800006ee:	ef 48 ff ec 	st.w	r7[-20],r8
		removeDelayQueue(&DELAYQUEUE);
800006f2:	49 9c       	lddpc	r12,80000754 <timerISR+0xa4>
800006f4:	f0 1f 00 19 	mcall	80000758 <timerISR+0xa8>
		rqi(&tmptsk);
800006f8:	ee c8 00 14 	sub	r8,r7,20
800006fc:	10 9c       	mov	r12,r8
800006fe:	f0 1f 00 18 	mcall	8000075c <timerISR+0xac>
		int priority = rqsearch();
80000702:	f0 1f 00 18 	mcall	80000760 <timerISR+0xb0>
80000706:	18 98       	mov	r8,r12
80000708:	ef 48 ff fc 	st.w	r7[-4],r8
		PREEMPTASK = PA[priority];
8000070c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000710:	49 58       	lddpc	r8,80000764 <timerISR+0xb4>
80000712:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000716:	49 58       	lddpc	r8,80000768 <timerISR+0xb8>
80000718:	91 09       	st.w	r8[0x0],r9
		interruptTask = true;
8000071a:	30 18       	mov	r8,1
8000071c:	ef 68 ff fb 	st.b	r7[-5],r8
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
	
	bool interruptTask = false;
	
	while (DELAYQUEUE->delay <= systemTick)
80000720:	48 d8       	lddpc	r8,80000754 <timerISR+0xa4>
80000722:	70 08       	ld.w	r8,r8[0x0]
80000724:	f0 ea 00 68 	ld.d	r10,r8[104]
80000728:	48 a8       	lddpc	r8,80000750 <timerISR+0xa0>
8000072a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000072e:	10 3a       	cp.w	r10,r8
80000730:	f2 0b 13 00 	cpc	r11,r9
80000734:	fe 98 ff db 	brls	800006ea <timerISR+0x3a>
		rqi(&tmptsk);
		int priority = rqsearch();
		PREEMPTASK = PA[priority];
		interruptTask = true;
	}
	if (interruptTask)
80000738:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000073c:	30 08       	mov	r8,0
8000073e:	f0 09 18 00 	cp.b	r9,r8
80000742:	c0 30       	breq	80000748 <timerISR+0x98>
	{
		ROSA_yieldFromISR();
80000744:	f0 1f 00 0a 	mcall	8000076c <timerISR+0xbc>
	}

}
80000748:	2f bd       	sub	sp,-20
8000074a:	e3 cd 40 80 	ldm	sp++,r7,lr
8000074e:	d6 03       	rete
80000750:	00 00       	add	r0,r0
80000752:	05 a4       	ld.ub	r4,r2[0x2]
80000754:	00 00       	add	r0,r0
80000756:	05 a0       	ld.ub	r0,r2[0x2]
80000758:	80 00       	ld.sh	r0,r0[0x0]
8000075a:	09 78       	ld.ub	r8,--r4
8000075c:	80 00       	ld.sh	r0,r0[0x0]
8000075e:	01 78       	ld.ub	r8,--r0
80000760:	80 00       	ld.sh	r0,r0[0x0]
80000762:	02 b4       	st.h	r1++,r4
80000764:	00 00       	add	r0,r0
80000766:	05 68       	ld.uh	r8,--r2
80000768:	00 00       	add	r0,r0
8000076a:	05 98       	ld.ub	r8,r2[0x1]
8000076c:	80 00       	ld.sh	r0,r0[0x0]
8000076e:	01 48       	ld.w	r8,--r0

80000770 <ROSA_getTickCount>:
/*																		*/
/* Returns the current number of system ticks, relative to start		*/
/* of the system.                                                       */
/************************************************************************/
uint64_t ROSA_getTickCount()
{
80000770:	eb cd 40 80 	pushm	r7,lr
80000774:	1a 97       	mov	r7,sp
	return systemTick;
80000776:	48 48       	lddpc	r8,80000784 <ROSA_getTickCount+0x14>
80000778:	f0 e8 00 00 	ld.d	r8,r8[0]
}
8000077c:	10 9a       	mov	r10,r8
8000077e:	12 9b       	mov	r11,r9
80000780:	e3 cd 80 80 	ldm	sp++,r7,pc
80000784:	00 00       	add	r0,r0
80000786:	05 a4       	ld.ub	r4,r2[0x2]

80000788 <ROSA_delay>:
/* ROSA_delay()															*/
/*																		*/
/* Suspends the calling task for the given number of ticks				*/
/************************************************************************/
int16_t ROSA_delay(uint64_t ticks)
{
80000788:	eb cd 40 80 	pushm	r7,lr
8000078c:	1a 97       	mov	r7,sp
8000078e:	20 3d       	sub	sp,12
80000790:	ee eb ff f4 	st.d	r7[-12],r10
	rqe(&EXECTASK);
80000794:	49 2c       	lddpc	r12,800007dc <ROSA_delay+0x54>
80000796:	f0 1f 00 13 	mcall	800007e0 <ROSA_delay+0x58>
	insertDelayQueue(&EXECTASK, ROSA_getTickCount() + ticks);
8000079a:	f0 1f 00 13 	mcall	800007e4 <ROSA_delay+0x5c>
8000079e:	ee e8 ff f4 	ld.d	r8,r7[-12]
800007a2:	f4 08 00 08 	add	r8,r10,r8
800007a6:	f6 09 00 49 	adc	r9,r11,r9
800007aa:	10 9a       	mov	r10,r8
800007ac:	12 9b       	mov	r11,r9
800007ae:	48 cc       	lddpc	r12,800007dc <ROSA_delay+0x54>
800007b0:	f0 1f 00 0e 	mcall	800007e8 <ROSA_delay+0x60>
	int priority = rqsearch();
800007b4:	f0 1f 00 0e 	mcall	800007ec <ROSA_delay+0x64>
800007b8:	18 98       	mov	r8,r12
800007ba:	ef 48 ff fc 	st.w	r7[-4],r8
	PREEMPTASK = PA[priority];
800007be:	ee f9 ff fc 	ld.w	r9,r7[-4]
800007c2:	48 c8       	lddpc	r8,800007f0 <ROSA_delay+0x68>
800007c4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800007c8:	48 b8       	lddpc	r8,800007f4 <ROSA_delay+0x6c>
800007ca:	91 09       	st.w	r8[0x0],r9
	ROSA_yield();
800007cc:	f0 1f 00 0b 	mcall	800007f8 <ROSA_delay+0x70>
	return 0;
800007d0:	30 08       	mov	r8,0
}
800007d2:	10 9c       	mov	r12,r8
800007d4:	2f dd       	sub	sp,-12
800007d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800007da:	00 00       	add	r0,r0
800007dc:	00 00       	add	r0,r0
800007de:	05 9c       	ld.ub	r12,r2[0x1]
800007e0:	80 00       	ld.sh	r0,r0[0x0]
800007e2:	02 0c       	add	r12,r1
800007e4:	80 00       	ld.sh	r0,r0[0x0]
800007e6:	07 70       	ld.ub	r0,--r3
800007e8:	80 00       	ld.sh	r0,r0[0x0]
800007ea:	08 a4       	st.w	r4++,r4
800007ec:	80 00       	ld.sh	r0,r0[0x0]
800007ee:	02 b4       	st.h	r1++,r4
800007f0:	00 00       	add	r0,r0
800007f2:	05 68       	ld.uh	r8,--r2
800007f4:	00 00       	add	r0,r0
800007f6:	05 98       	ld.ub	r8,r2[0x1]
800007f8:	80 00       	ld.sh	r0,r0[0x0]
800007fa:	05 ea       	ld.ub	r10,r2[0x6]

800007fc <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
800007fc:	eb cd 40 80 	pushm	r7,lr
80000800:	1a 97       	mov	r7,sp
80000802:	20 7d       	sub	sp,28
80000804:	ef 4c ff e4 	st.w	r7[-28],r12

	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000808:	4a 48       	lddpc	r8,80000898 <timerPeriodSet+0x9c>
8000080a:	ee ca 00 18 	sub	r10,r7,24
8000080e:	10 9b       	mov	r11,r8
80000810:	f6 e8 00 00 	ld.d	r8,r11[0]
80000814:	f4 e9 00 00 	st.d	r10[0],r8
80000818:	f6 e8 00 08 	ld.d	r8,r11[8]
8000081c:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000820:	30 48       	mov	r8,4
80000822:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80000826:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000082a:	20 18       	sub	r8,1
8000082c:	a3 68       	lsl	r8,0x2
8000082e:	ee 08 00 08 	add	r8,r7,r8
80000832:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000836:	e0 68 1b 00 	mov	r8,6912
8000083a:	ea 18 00 b7 	orh	r8,0xb7
8000083e:	f0 09 0c 08 	divs	r8,r8,r9
80000842:	10 99       	mov	r9,r8
80000844:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000848:	b1 39       	mul	r9,r8
8000084a:	e0 68 4d d3 	mov	r8,19923
8000084e:	ea 18 10 62 	orh	r8,0x1062
80000852:	f2 08 06 48 	mulu.d	r8,r9,r8
80000856:	f2 08 16 06 	lsr	r8,r9,0x6
8000085a:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
8000085e:	ee fc ff fc 	ld.w	r12,r7[-4]
80000862:	f0 1f 00 0f 	mcall	8000089c <timerPeriodSet+0xa0>
	timerRCSet(rc);
80000866:	ee fc ff f8 	ld.w	r12,r7[-8]
8000086a:	f0 1f 00 0e 	mcall	800008a0 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
8000086e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000872:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000876:	f2 08 02 4a 	mul	r10,r9,r8
8000087a:	e0 68 9f 81 	mov	r8,40833
8000087e:	ea 18 16 5e 	orh	r8,0x165e
80000882:	f4 08 04 48 	muls.d	r8,r10,r8
80000886:	b5 49       	asr	r9,0x14
80000888:	f4 08 14 1f 	asr	r8,r10,0x1f
8000088c:	f2 08 01 08 	sub	r8,r9,r8
}
80000890:	10 9c       	mov	r12,r8
80000892:	2f 9d       	sub	sp,-28
80000894:	e3 cd 80 80 	ldm	sp++,r7,pc
80000898:	80 00       	ld.sh	r0,r0[0x0]
8000089a:	06 a0       	st.w	r3++,r0
8000089c:	80 00       	ld.sh	r0,r0[0x0]
8000089e:	0f d0       	ld.ub	r0,r7[0x5]
800008a0:	80 00       	ld.sh	r0,r0[0x0]
800008a2:	0f ba       	ld.ub	r10,r7[0x3]

800008a4 <insertDelayQueue>:
/*																		*/
/* Inserts the given task into the delay queue, before any tasks with	*/
/* a later deadline or lower priority									*/
/************************************************************************/
int insertDelayQueue(ROSA_taskHandle_t ** pth, uint64_t deadline)
{
800008a4:	eb cd 40 80 	pushm	r7,lr
800008a8:	1a 97       	mov	r7,sp
800008aa:	20 5d       	sub	sp,20
800008ac:	ef 4c ff f4 	st.w	r7[-12],r12
800008b0:	ee eb ff ec 	st.d	r7[-20],r10
	if (DELAYQUEUE == NULL) {
800008b4:	4b 08       	lddpc	r8,80000974 <insertDelayQueue+0xd0>
800008b6:	70 08       	ld.w	r8,r8[0x0]
800008b8:	58 08       	cp.w	r8,0
800008ba:	c0 c1       	brne	800008d2 <insertDelayQueue+0x2e>
		DELAYQUEUE = *pth;
800008bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008c0:	70 09       	ld.w	r9,r8[0x0]
800008c2:	4a d8       	lddpc	r8,80000974 <insertDelayQueue+0xd0>
800008c4:	91 09       	st.w	r8[0x0],r9
		DELAYQUEUE->nexttcb = NULL;
800008c6:	4a c8       	lddpc	r8,80000974 <insertDelayQueue+0xd0>
800008c8:	70 08       	ld.w	r8,r8[0x0]
800008ca:	30 09       	mov	r9,0
800008cc:	91 09       	st.w	r8[0x0],r9
		return 0;
800008ce:	30 08       	mov	r8,0
800008d0:	c4 d8       	rjmp	8000096a <insertDelayQueue+0xc6>
	}
	else {
		ROSA_taskHandle_t * next = DELAYQUEUE;
800008d2:	4a 98       	lddpc	r8,80000974 <insertDelayQueue+0xd0>
800008d4:	70 08       	ld.w	r8,r8[0x0]
800008d6:	ef 48 ff f8 	st.w	r7[-8],r8
		ROSA_taskHandle_t * prev;
		while (next->delay > (*pth)->delay)
800008da:	c0 a8       	rjmp	800008ee <insertDelayQueue+0x4a>
		{
			prev = next;
800008dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008e0:	ef 48 ff fc 	st.w	r7[-4],r8
			next = next->nexttcb;
800008e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008e8:	70 08       	ld.w	r8,r8[0x0]
800008ea:	ef 48 ff f8 	st.w	r7[-8],r8
		return 0;
	}
	else {
		ROSA_taskHandle_t * next = DELAYQUEUE;
		ROSA_taskHandle_t * prev;
		while (next->delay > (*pth)->delay)
800008ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008f2:	f0 ea 00 68 	ld.d	r10,r8[104]
800008f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008fa:	70 08       	ld.w	r8,r8[0x0]
800008fc:	f0 e8 00 68 	ld.d	r8,r8[104]
80000900:	10 3a       	cp.w	r10,r8
80000902:	f2 0b 13 00 	cpc	r11,r9
80000906:	fe 9b ff eb 	brhi	800008dc <insertDelayQueue+0x38>
		{
			prev = next;
			next = next->nexttcb;
		}
		while (next->priority >= (*pth)->priority && next->delay == (*pth)->delay)
8000090a:	c0 a8       	rjmp	8000091e <insertDelayQueue+0x7a>
		{
			prev = next;
8000090c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000910:	ef 48 ff fc 	st.w	r7[-4],r8
			next = next->nexttcb;
80000914:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000918:	70 08       	ld.w	r8,r8[0x0]
8000091a:	ef 48 ff f8 	st.w	r7[-8],r8
		while (next->delay > (*pth)->delay)
		{
			prev = next;
			next = next->nexttcb;
		}
		while (next->priority >= (*pth)->priority && next->delay == (*pth)->delay)
8000091e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000922:	f1 39 00 64 	ld.ub	r9,r8[100]
80000926:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000092a:	70 08       	ld.w	r8,r8[0x0]
8000092c:	f1 38 00 64 	ld.ub	r8,r8[100]
80000930:	f0 09 18 00 	cp.b	r9,r8
80000934:	c0 e3       	brcs	80000950 <insertDelayQueue+0xac>
80000936:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000093a:	f0 ea 00 68 	ld.d	r10,r8[104]
8000093e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000942:	70 08       	ld.w	r8,r8[0x0]
80000944:	f0 e8 00 68 	ld.d	r8,r8[104]
80000948:	10 3a       	cp.w	r10,r8
8000094a:	f2 0b 13 00 	cpc	r11,r9
8000094e:	cd f0       	breq	8000090c <insertDelayQueue+0x68>
		{
			prev = next;
			next = next->nexttcb;
		}
		(*pth)->nexttcb = next;
80000950:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000954:	70 08       	ld.w	r8,r8[0x0]
80000956:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000095a:	91 09       	st.w	r8[0x0],r9
		prev->nexttcb = *pth;
8000095c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000960:	70 09       	ld.w	r9,r8[0x0]
80000962:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000966:	91 09       	st.w	r8[0x0],r9
		return 0;
80000968:	30 08       	mov	r8,0
	}
}
8000096a:	10 9c       	mov	r12,r8
8000096c:	2f bd       	sub	sp,-20
8000096e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000972:	00 00       	add	r0,r0
80000974:	00 00       	add	r0,r0
80000976:	05 a0       	ld.ub	r0,r2[0x2]

80000978 <removeDelayQueue>:
/* removeDelayQueue()													*/
/*																		*/
/* Removes the given task from the delay queue							*/
/************************************************************************/
int removeDelayQueue(ROSA_taskHandle_t ** pth)
{
80000978:	eb cd 40 80 	pushm	r7,lr
8000097c:	1a 97       	mov	r7,sp
8000097e:	20 2d       	sub	sp,8
80000980:	ef 4c ff f8 	st.w	r7[-8],r12
	if (*pth == DELAYQUEUE)
80000984:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000988:	70 09       	ld.w	r9,r8[0x0]
8000098a:	49 48       	lddpc	r8,800009d8 <removeDelayQueue+0x60>
8000098c:	70 08       	ld.w	r8,r8[0x0]
8000098e:	10 39       	cp.w	r9,r8
80000990:	c0 61       	brne	8000099c <removeDelayQueue+0x24>
	{
		DELAYQUEUE = NULL;
80000992:	49 28       	lddpc	r8,800009d8 <removeDelayQueue+0x60>
80000994:	30 09       	mov	r9,0
80000996:	91 09       	st.w	r8[0x0],r9
		return 0;
80000998:	30 08       	mov	r8,0
8000099a:	c1 b8       	rjmp	800009d0 <removeDelayQueue+0x58>
	}
	ROSA_taskHandle_t * pt = DELAYQUEUE;
8000099c:	48 f8       	lddpc	r8,800009d8 <removeDelayQueue+0x60>
8000099e:	70 08       	ld.w	r8,r8[0x0]
800009a0:	ef 48 ff fc 	st.w	r7[-4],r8
	while (pt->nexttcb != *pth)
800009a4:	c0 68       	rjmp	800009b0 <removeDelayQueue+0x38>
	{
		pt = pt->nexttcb;
800009a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009aa:	70 08       	ld.w	r8,r8[0x0]
800009ac:	ef 48 ff fc 	st.w	r7[-4],r8
	{
		DELAYQUEUE = NULL;
		return 0;
	}
	ROSA_taskHandle_t * pt = DELAYQUEUE;
	while (pt->nexttcb != *pth)
800009b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009b4:	70 09       	ld.w	r9,r8[0x0]
800009b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009ba:	70 08       	ld.w	r8,r8[0x0]
800009bc:	10 39       	cp.w	r9,r8
800009be:	cf 41       	brne	800009a6 <removeDelayQueue+0x2e>
	{
		pt = pt->nexttcb;
	}
	pt->nexttcb = (*pth)->nexttcb;
800009c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009c4:	70 08       	ld.w	r8,r8[0x0]
800009c6:	70 09       	ld.w	r9,r8[0x0]
800009c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009cc:	91 09       	st.w	r8[0x0],r9
	return 0;
800009ce:	30 08       	mov	r8,0
800009d0:	10 9c       	mov	r12,r8
800009d2:	2f ed       	sub	sp,-8
800009d4:	e3 cd 80 80 	ldm	sp++,r7,pc
800009d8:	00 00       	add	r0,r0
800009da:	05 a0       	ld.ub	r0,r2[0x2]

800009dc <buttonInit>:
800009dc:	eb cd 40 80 	pushm	r7,lr
800009e0:	1a 97       	mov	r7,sp
800009e2:	30 1b       	mov	r11,1
800009e4:	35 8c       	mov	r12,88
800009e6:	f0 1f 00 07 	mcall	80000a00 <buttonInit+0x24>
800009ea:	30 1b       	mov	r11,1
800009ec:	35 5c       	mov	r12,85
800009ee:	f0 1f 00 05 	mcall	80000a00 <buttonInit+0x24>
800009f2:	30 1b       	mov	r11,1
800009f4:	35 2c       	mov	r12,82
800009f6:	f0 1f 00 03 	mcall	80000a00 <buttonInit+0x24>
800009fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800009fe:	00 00       	add	r0,r0
80000a00:	80 00       	ld.sh	r0,r0[0x0]
80000a02:	0a 70       	tst	r0,r5

80000a04 <joystickInit>:
80000a04:	eb cd 40 80 	pushm	r7,lr
80000a08:	1a 97       	mov	r7,sp
80000a0a:	30 1b       	mov	r11,1
80000a0c:	31 bc       	mov	r12,27
80000a0e:	f0 1f 00 0b 	mcall	80000a38 <joystickInit+0x34>
80000a12:	30 1b       	mov	r11,1
80000a14:	31 9c       	mov	r12,25
80000a16:	f0 1f 00 09 	mcall	80000a38 <joystickInit+0x34>
80000a1a:	30 1b       	mov	r11,1
80000a1c:	31 cc       	mov	r12,28
80000a1e:	f0 1f 00 07 	mcall	80000a38 <joystickInit+0x34>
80000a22:	30 1b       	mov	r11,1
80000a24:	31 4c       	mov	r12,20
80000a26:	f0 1f 00 05 	mcall	80000a38 <joystickInit+0x34>
80000a2a:	30 1b       	mov	r11,1
80000a2c:	31 ac       	mov	r12,26
80000a2e:	f0 1f 00 03 	mcall	80000a38 <joystickInit+0x34>
80000a32:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a36:	00 00       	add	r0,r0
80000a38:	80 00       	ld.sh	r0,r0[0x0]
80000a3a:	0a 70       	tst	r0,r5

80000a3c <delay_ms>:
80000a3c:	eb cd 40 80 	pushm	r7,lr
80000a40:	1a 97       	mov	r7,sp
80000a42:	20 2d       	sub	sp,8
80000a44:	ef 4c ff f8 	st.w	r7[-8],r12
80000a48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a4c:	e0 69 04 42 	mov	r9,1090
80000a50:	b3 38       	mul	r8,r9
80000a52:	ef 48 ff fc 	st.w	r7[-4],r8
80000a56:	c0 68       	rjmp	80000a62 <delay_ms+0x26>
80000a58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a5c:	20 18       	sub	r8,1
80000a5e:	ef 48 ff fc 	st.w	r7[-4],r8
80000a62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a66:	58 08       	cp.w	r8,0
80000a68:	cf 81       	brne	80000a58 <delay_ms+0x1c>
80000a6a:	2f ed       	sub	sp,-8
80000a6c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000a70 <gpioInit>:
80000a70:	eb cd 40 80 	pushm	r7,lr
80000a74:	1a 97       	mov	r7,sp
80000a76:	20 7d       	sub	sp,28
80000a78:	ef 4c ff ec 	st.w	r7[-20],r12
80000a7c:	ef 4b ff e8 	st.w	r7[-24],r11
80000a80:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000a84:	a5 58       	asr	r8,0x5
80000a86:	ef 48 ff f4 	st.w	r7[-12],r8
80000a8a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000a8e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000a92:	ef 48 ff fc 	st.w	r7[-4],r8
80000a96:	30 19       	mov	r9,1
80000a98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a9c:	f2 08 09 48 	lsl	r8,r9,r8
80000aa0:	ef 48 ff f8 	st.w	r7[-8],r8
80000aa4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000aa8:	a9 68       	lsl	r8,0x8
80000aaa:	e0 28 f0 00 	sub	r8,61440
80000aae:	ef 48 ff f0 	st.w	r7[-16],r8
80000ab2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ab6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000aba:	91 19       	st.w	r8[0x4],r9
80000abc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ac0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ac4:	91 69       	st.w	r8[0x18],r9
80000ac6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000aca:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ace:	91 a9       	st.w	r8[0x28],r9
80000ad0:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000ad4:	ef 48 ff e4 	st.w	r7[-28],r8
80000ad8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000adc:	58 08       	cp.w	r8,0
80000ade:	c0 60       	breq	80000aea <gpioInit+0x7a>
80000ae0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000ae4:	58 18       	cp.w	r8,1
80000ae6:	c0 90       	breq	80000af8 <gpioInit+0x88>
80000ae8:	c0 f8       	rjmp	80000b06 <gpioInit+0x96>
80000aea:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000aee:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000af2:	f1 49 00 44 	st.w	r8[68],r9
80000af6:	c0 e8       	rjmp	80000b12 <gpioInit+0xa2>
80000af8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000afc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b00:	f1 49 00 48 	st.w	r8[72],r9
80000b04:	c0 78       	rjmp	80000b12 <gpioInit+0xa2>
80000b06:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b0a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b0e:	f1 49 00 48 	st.w	r8[72],r9
80000b12:	2f 9d       	sub	sp,-28
80000b14:	e3 cd 80 80 	ldm	sp++,r7,pc

80000b18 <gpioClear>:
80000b18:	eb cd 40 80 	pushm	r7,lr
80000b1c:	1a 97       	mov	r7,sp
80000b1e:	20 5d       	sub	sp,20
80000b20:	ef 4c ff ec 	st.w	r7[-20],r12
80000b24:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000b28:	a5 58       	asr	r8,0x5
80000b2a:	ef 48 ff f4 	st.w	r7[-12],r8
80000b2e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000b32:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000b36:	ef 48 ff fc 	st.w	r7[-4],r8
80000b3a:	30 19       	mov	r9,1
80000b3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b40:	f2 08 09 48 	lsl	r8,r9,r8
80000b44:	ef 48 ff f8 	st.w	r7[-8],r8
80000b48:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b4c:	a9 68       	lsl	r8,0x8
80000b4e:	e0 28 f0 00 	sub	r8,61440
80000b52:	ef 48 ff f0 	st.w	r7[-16],r8
80000b56:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b5a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b5e:	f1 49 00 58 	st.w	r8[88],r9
80000b62:	2f bd       	sub	sp,-20
80000b64:	e3 cd 80 80 	ldm	sp++,r7,pc

80000b68 <gpioSet>:
80000b68:	eb cd 40 80 	pushm	r7,lr
80000b6c:	1a 97       	mov	r7,sp
80000b6e:	20 5d       	sub	sp,20
80000b70:	ef 4c ff ec 	st.w	r7[-20],r12
80000b74:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000b78:	a5 58       	asr	r8,0x5
80000b7a:	ef 48 ff f4 	st.w	r7[-12],r8
80000b7e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000b82:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000b86:	ef 48 ff fc 	st.w	r7[-4],r8
80000b8a:	30 19       	mov	r9,1
80000b8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b90:	f2 08 09 48 	lsl	r8,r9,r8
80000b94:	ef 48 ff f8 	st.w	r7[-8],r8
80000b98:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b9c:	a9 68       	lsl	r8,0x8
80000b9e:	e0 28 f0 00 	sub	r8,61440
80000ba2:	ef 48 ff f0 	st.w	r7[-16],r8
80000ba6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000baa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000bae:	f1 49 00 54 	st.w	r8[84],r9
80000bb2:	2f bd       	sub	sp,-20
80000bb4:	e3 cd 80 80 	ldm	sp++,r7,pc

80000bb8 <ledInit>:
80000bb8:	eb cd 40 80 	pushm	r7,lr
80000bbc:	1a 97       	mov	r7,sp
80000bbe:	20 9d       	sub	sp,36
80000bc0:	49 e8       	lddpc	r8,80000c38 <ledInit+0x80>
80000bc2:	ee cb 00 24 	sub	r11,r7,36
80000bc6:	10 9a       	mov	r10,r8
80000bc8:	f4 e8 00 00 	ld.d	r8,r10[0]
80000bcc:	f6 e9 00 00 	st.d	r11[0],r8
80000bd0:	f4 e8 00 08 	ld.d	r8,r10[8]
80000bd4:	f6 e9 00 08 	st.d	r11[8],r8
80000bd8:	f4 e8 00 10 	ld.d	r8,r10[16]
80000bdc:	f6 e9 00 10 	st.d	r11[16],r8
80000be0:	f4 e8 00 18 	ld.d	r8,r10[24]
80000be4:	f6 e9 00 18 	st.d	r11[24],r8
80000be8:	30 08       	mov	r8,0
80000bea:	ef 48 ff fc 	st.w	r7[-4],r8
80000bee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bf2:	a3 68       	lsl	r8,0x2
80000bf4:	ee 08 00 08 	add	r8,r7,r8
80000bf8:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000bfc:	10 9c       	mov	r12,r8
80000bfe:	f0 1f 00 10 	mcall	80000c3c <ledInit+0x84>
80000c02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c06:	a3 68       	lsl	r8,0x2
80000c08:	ee 08 00 08 	add	r8,r7,r8
80000c0c:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000c10:	30 0b       	mov	r11,0
80000c12:	10 9c       	mov	r12,r8
80000c14:	f0 1f 00 0b 	mcall	80000c40 <ledInit+0x88>
80000c18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c1c:	58 78       	cp.w	r8,7
80000c1e:	5f 18       	srne	r8
80000c20:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000c24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c28:	2f f8       	sub	r8,-1
80000c2a:	ef 48 ff fc 	st.w	r7[-4],r8
80000c2e:	58 09       	cp.w	r9,0
80000c30:	cd f1       	brne	80000bee <ledInit+0x36>
80000c32:	2f 7d       	sub	sp,-36
80000c34:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c38:	80 00       	ld.sh	r0,r0[0x0]
80000c3a:	1e 00       	add	r0,pc
80000c3c:	80 00       	ld.sh	r0,r0[0x0]
80000c3e:	0c 64       	and	r4,r6
80000c40:	80 00       	ld.sh	r0,r0[0x0]
80000c42:	0a 70       	tst	r0,r5

80000c44 <ledOn>:
80000c44:	eb cd 40 80 	pushm	r7,lr
80000c48:	1a 97       	mov	r7,sp
80000c4a:	20 1d       	sub	sp,4
80000c4c:	ef 4c ff fc 	st.w	r7[-4],r12
80000c50:	ee fc ff fc 	ld.w	r12,r7[-4]
80000c54:	f0 1f 00 03 	mcall	80000c60 <ledOn+0x1c>
80000c58:	2f fd       	sub	sp,-4
80000c5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c5e:	00 00       	add	r0,r0
80000c60:	80 00       	ld.sh	r0,r0[0x0]
80000c62:	0b 18       	ld.sh	r8,r5++

80000c64 <ledOff>:
80000c64:	eb cd 40 80 	pushm	r7,lr
80000c68:	1a 97       	mov	r7,sp
80000c6a:	20 1d       	sub	sp,4
80000c6c:	ef 4c ff fc 	st.w	r7[-4],r12
80000c70:	ee fc ff fc 	ld.w	r12,r7[-4]
80000c74:	f0 1f 00 03 	mcall	80000c80 <ledOff+0x1c>
80000c78:	2f fd       	sub	sp,-4
80000c7a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c7e:	00 00       	add	r0,r0
80000c80:	80 00       	ld.sh	r0,r0[0x0]
80000c82:	0b 68       	ld.uh	r8,--r5

80000c84 <potInit>:
80000c84:	d3 01       	pushm	r11-r12
80000c86:	e0 6c 10 00 	mov	r12,4096
80000c8a:	ea 1c ff ff 	orh	r12,0xffff
80000c8e:	31 6b       	mov	r11,22
80000c90:	99 2b       	st.w	r12[0x8],r11
80000c92:	99 6b       	st.w	r12[0x18],r11
80000c94:	99 6b       	st.w	r12[0x18],r11
80000c96:	e0 6c 3c 00 	mov	r12,15360
80000c9a:	ea 1c ff ff 	orh	r12,0xffff
80000c9e:	30 1b       	mov	r11,1
80000ca0:	99 0b       	st.w	r12[0x0],r11
80000ca2:	e0 6b 0f 1f 	mov	r11,3871
80000ca6:	b1 6b       	lsl	r11,0x10
80000ca8:	99 1b       	st.w	r12[0x4],r11
80000caa:	30 2b       	mov	r11,2
80000cac:	99 4b       	st.w	r12[0x10],r11
80000cae:	d3 02       	popm	r11-r12
80000cb0:	1c 9f       	mov	pc,lr

80000cb2 <potGetValue>:
80000cb2:	d1 81       	pushm	r10-r11
80000cb4:	e0 6c 3c 00 	mov	r12,15360
80000cb8:	ea 1c ff ff 	orh	r12,0xffff
80000cbc:	30 2b       	mov	r11,2
80000cbe:	99 0b       	st.w	r12[0x0],r11

80000cc0 <a1>:
80000cc0:	78 7a       	ld.w	r10,r12[0x1c]
80000cc2:	16 7a       	tst	r10,r11
80000cc4:	cf e0       	breq	80000cc0 <a1>
80000cc6:	78 dc       	ld.w	r12,r12[0x34]
80000cc8:	d1 82       	popm	r10-r11
80000cca:	1c 9f       	mov	pc,lr

80000ccc <usartReset>:
80000ccc:	eb cd 40 80 	pushm	r7,lr
80000cd0:	1a 97       	mov	r7,sp
80000cd2:	20 3d       	sub	sp,12
80000cd4:	ef 4c ff f8 	st.w	r7[-8],r12
80000cd8:	f0 1f 00 16 	mcall	80000d30 <usartReset+0x64>
80000cdc:	18 98       	mov	r8,r12
80000cde:	ef 48 ff fc 	st.w	r7[-4],r8
80000ce2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ce6:	58 08       	cp.w	r8,0
80000ce8:	c0 30       	breq	80000cee <usartReset+0x22>
80000cea:	f0 1f 00 13 	mcall	80000d34 <usartReset+0x68>
80000cee:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000cf2:	3f f8       	mov	r8,-1
80000cf4:	93 38       	st.w	r9[0xc],r8
80000cf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cfa:	70 58       	ld.w	r8,r8[0x14]
80000cfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d00:	58 08       	cp.w	r8,0
80000d02:	c0 30       	breq	80000d08 <usartReset+0x3c>
80000d04:	f0 1f 00 0d 	mcall	80000d38 <usartReset+0x6c>
80000d08:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d0c:	30 08       	mov	r8,0
80000d0e:	93 18       	st.w	r9[0x4],r8
80000d10:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d14:	30 08       	mov	r8,0
80000d16:	93 98       	st.w	r9[0x24],r8
80000d18:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d1c:	30 08       	mov	r8,0
80000d1e:	93 a8       	st.w	r9[0x28],r8
80000d20:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d24:	ea 68 61 0c 	mov	r8,680204
80000d28:	93 08       	st.w	r9[0x0],r8
80000d2a:	2f dd       	sub	sp,-12
80000d2c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d30:	80 00       	ld.sh	r0,r0[0x0]
80000d32:	1b 6e       	ld.uh	lr,--sp
80000d34:	80 00       	ld.sh	r0,r0[0x0]
80000d36:	1b 66       	ld.uh	r6,--sp
80000d38:	80 00       	ld.sh	r0,r0[0x0]
80000d3a:	1b 6a       	ld.uh	r10,--sp

80000d3c <usartSetBaudrate>:
80000d3c:	eb cd 40 80 	pushm	r7,lr
80000d40:	1a 97       	mov	r7,sp
80000d42:	20 bd       	sub	sp,44
80000d44:	ef 4c ff ec 	st.w	r7[-20],r12
80000d48:	ef 4b ff e8 	st.w	r7[-24],r11
80000d4c:	ef 4a ff e4 	st.w	r7[-28],r10
80000d50:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000d54:	f0 09 15 04 	lsl	r9,r8,0x4
80000d58:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000d5c:	10 39       	cp.w	r9,r8
80000d5e:	e0 8b 00 06 	brhi	80000d6a <usartSetBaudrate+0x2e>
80000d62:	31 09       	mov	r9,16
80000d64:	ef 49 ff d4 	st.w	r7[-44],r9
80000d68:	c0 48       	rjmp	80000d70 <usartSetBaudrate+0x34>
80000d6a:	30 88       	mov	r8,8
80000d6c:	ef 48 ff d4 	st.w	r7[-44],r8
80000d70:	ee f9 ff d4 	ld.w	r9,r7[-44]
80000d74:	ef 49 ff f0 	st.w	r7[-16],r9
80000d78:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000d7c:	f0 0a 15 03 	lsl	r10,r8,0x3
80000d80:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000d84:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000d88:	f2 08 02 48 	mul	r8,r9,r8
80000d8c:	a1 98       	lsr	r8,0x1
80000d8e:	10 0a       	add	r10,r8
80000d90:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000d94:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000d98:	f2 08 02 48 	mul	r8,r9,r8
80000d9c:	f4 08 0d 08 	divu	r8,r10,r8
80000da0:	ef 48 ff f4 	st.w	r7[-12],r8
80000da4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000da8:	a3 98       	lsr	r8,0x3
80000daa:	ef 48 ff f8 	st.w	r7[-8],r8
80000dae:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000db2:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000db6:	ef 48 ff fc 	st.w	r7[-4],r8
80000dba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dbe:	58 08       	cp.w	r8,0
80000dc0:	c0 70       	breq	80000dce <usartSetBaudrate+0x92>
80000dc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dc6:	e0 48 ff ff 	cp.w	r8,65535
80000dca:	e0 88 00 06 	brls	80000dd6 <usartSetBaudrate+0x9a>
80000dce:	30 18       	mov	r8,1
80000dd0:	ef 48 ff d8 	st.w	r7[-40],r8
80000dd4:	c2 c8       	rjmp	80000e2c <usartSetBaudrate+0xf0>
80000dd6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000dda:	70 18       	ld.w	r8,r8[0x4]
80000ddc:	10 99       	mov	r9,r8
80000dde:	e4 19 ff f7 	andh	r9,0xfff7
80000de2:	e0 19 fe cf 	andl	r9,0xfecf
80000de6:	ef 49 ff dc 	st.w	r7[-36],r9
80000dea:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000dee:	59 08       	cp.w	r8,16
80000df0:	c0 60       	breq	80000dfc <usartSetBaudrate+0xc0>
80000df2:	e8 68 00 00 	mov	r8,524288
80000df6:	ef 48 ff e0 	st.w	r7[-32],r8
80000dfa:	c0 48       	rjmp	80000e02 <usartSetBaudrate+0xc6>
80000dfc:	30 09       	mov	r9,0
80000dfe:	ef 49 ff e0 	st.w	r7[-32],r9
80000e02:	ee f9 ff dc 	ld.w	r9,r7[-36]
80000e06:	ee f8 ff e0 	ld.w	r8,r7[-32]
80000e0a:	10 49       	or	r9,r8
80000e0c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e10:	91 19       	st.w	r8[0x4],r9
80000e12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e16:	f0 09 15 10 	lsl	r9,r8,0x10
80000e1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e1e:	10 49       	or	r9,r8
80000e20:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e24:	91 89       	st.w	r8[0x20],r9
80000e26:	30 09       	mov	r9,0
80000e28:	ef 49 ff d8 	st.w	r7[-40],r9
80000e2c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80000e30:	10 9c       	mov	r12,r8
80000e32:	2f 5d       	sub	sp,-44
80000e34:	e3 cd 80 80 	ldm	sp++,r7,pc

80000e38 <usartInit>:
80000e38:	eb cd 40 80 	pushm	r7,lr
80000e3c:	1a 97       	mov	r7,sp
80000e3e:	20 4d       	sub	sp,16
80000e40:	ef 4c ff f8 	st.w	r7[-8],r12
80000e44:	ef 4b ff f4 	st.w	r7[-12],r11
80000e48:	ef 4a ff f0 	st.w	r7[-16],r10
80000e4c:	fe 78 10 00 	mov	r8,-61440
80000e50:	ef 48 ff fc 	st.w	r7[-4],r8
80000e54:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000e58:	30 18       	mov	r8,1
80000e5a:	93 28       	st.w	r9[0x8],r8
80000e5c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000e60:	30 28       	mov	r8,2
80000e62:	93 28       	st.w	r9[0x8],r8
80000e64:	ee fc ff f8 	ld.w	r12,r7[-8]
80000e68:	f0 1f 00 3b 	mcall	80000f54 <usartInit+0x11c>
80000e6c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000e70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e74:	70 08       	ld.w	r8,r8[0x0]
80000e76:	12 9a       	mov	r10,r9
80000e78:	10 9b       	mov	r11,r8
80000e7a:	ee fc ff f8 	ld.w	r12,r7[-8]
80000e7e:	f0 1f 00 37 	mcall	80000f58 <usartInit+0x120>
80000e82:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e86:	11 c9       	ld.ub	r9,r8[0x4]
80000e88:	30 98       	mov	r8,9
80000e8a:	f0 09 18 00 	cp.b	r9,r8
80000e8e:	c0 a1       	brne	80000ea2 <usartInit+0x6a>
80000e90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e94:	70 18       	ld.w	r8,r8[0x4]
80000e96:	10 99       	mov	r9,r8
80000e98:	b1 b9       	sbr	r9,0x11
80000e9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e9e:	91 19       	st.w	r8[0x4],r9
80000ea0:	c0 d8       	rjmp	80000eba <usartInit+0x82>
80000ea2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ea6:	70 19       	ld.w	r9,r8[0x4]
80000ea8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000eac:	11 c8       	ld.ub	r8,r8[0x4]
80000eae:	20 58       	sub	r8,5
80000eb0:	a7 68       	lsl	r8,0x6
80000eb2:	10 49       	or	r9,r8
80000eb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000eb8:	91 19       	st.w	r8[0x4],r9
80000eba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ebe:	70 1a       	ld.w	r10,r8[0x4]
80000ec0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ec4:	11 d8       	ld.ub	r8,r8[0x5]
80000ec6:	f0 09 15 09 	lsl	r9,r8,0x9
80000eca:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ece:	f1 38 00 08 	ld.ub	r8,r8[8]
80000ed2:	af 68       	lsl	r8,0xe
80000ed4:	f3 e8 10 08 	or	r8,r9,r8
80000ed8:	f5 e8 10 09 	or	r9,r10,r8
80000edc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ee0:	91 19       	st.w	r8[0x4],r9
80000ee2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ee6:	90 39       	ld.sh	r9,r8[0x6]
80000ee8:	30 28       	mov	r8,2
80000eea:	f0 09 19 00 	cp.h	r9,r8
80000eee:	e0 88 00 14 	brls	80000f16 <usartInit+0xde>
80000ef2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ef6:	70 18       	ld.w	r8,r8[0x4]
80000ef8:	10 99       	mov	r9,r8
80000efa:	ad b9       	sbr	r9,0xd
80000efc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f00:	91 19       	st.w	r8[0x4],r9
80000f02:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f06:	90 38       	ld.sh	r8,r8[0x6]
80000f08:	5c 78       	castu.h	r8
80000f0a:	20 28       	sub	r8,2
80000f0c:	10 99       	mov	r9,r8
80000f0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f12:	91 a9       	st.w	r8[0x28],r9
80000f14:	c0 d8       	rjmp	80000f2e <usartInit+0xf6>
80000f16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f1a:	70 19       	ld.w	r9,r8[0x4]
80000f1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f20:	90 38       	ld.sh	r8,r8[0x6]
80000f22:	5c 78       	castu.h	r8
80000f24:	ad 68       	lsl	r8,0xc
80000f26:	10 49       	or	r9,r8
80000f28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f2c:	91 19       	st.w	r8[0x4],r9
80000f2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f32:	70 18       	ld.w	r8,r8[0x4]
80000f34:	10 99       	mov	r9,r8
80000f36:	e0 19 ff f0 	andl	r9,0xfff0
80000f3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f3e:	91 19       	st.w	r8[0x4],r9
80000f40:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f44:	35 08       	mov	r8,80
80000f46:	93 08       	st.w	r9[0x0],r8
80000f48:	30 08       	mov	r8,0
80000f4a:	10 9c       	mov	r12,r8
80000f4c:	2f cd       	sub	sp,-16
80000f4e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f52:	00 00       	add	r0,r0
80000f54:	80 00       	ld.sh	r0,r0[0x0]
80000f56:	0c cc       	st.b	r6++,r12
80000f58:	80 00       	ld.sh	r0,r0[0x0]
80000f5a:	0d 3c       	ld.ub	r12,r6++

80000f5c <timerInit>:
80000f5c:	d5 01       	pushm	r11,lr
80000f5e:	d2 01       	pushm	r12
80000f60:	f0 1f 00 28 	mcall	80001000 <timerClearInterrupt+0x10>
80000f64:	f0 1f 00 28 	mcall	80001004 <timerClearInterrupt+0x14>
80000f68:	e0 6c 38 00 	mov	r12,14336
80000f6c:	ea 1c ff ff 	orh	r12,0xffff
80000f70:	e0 6b c0 00 	mov	r11,49152
80000f74:	ea 1b 00 00 	orh	r11,0x0
80000f78:	99 1b       	st.w	r12[0x4],r11
80000f7a:	30 1b       	mov	r11,1
80000f7c:	a5 6b       	lsl	r11,0x4
80000f7e:	99 9b       	st.w	r12[0x24],r11
80000f80:	d2 02       	popm	r12
80000f82:	f0 1f 00 22 	mcall	80001008 <timerClearInterrupt+0x18>
80000f86:	d5 02       	popm	r11,lr
80000f88:	1c 9f       	mov	pc,lr

80000f8a <timerReset>:
80000f8a:	d3 01       	pushm	r11-r12
80000f8c:	e0 6c 38 00 	mov	r12,14336
80000f90:	ea 1c ff ff 	orh	r12,0xffff
80000f94:	30 5b       	mov	r11,5
80000f96:	99 0b       	st.w	r12[0x0],r11
80000f98:	e0 6b 00 08 	mov	r11,8
80000f9c:	ea 1b 00 00 	orh	r11,0x0
80000fa0:	76 0b       	ld.w	r11,r11[0x0]
80000fa2:	99 7b       	st.w	r12[0x1c],r11
80000fa4:	d3 02       	popm	r11-r12
80000fa6:	1c 9f       	mov	pc,lr

80000fa8 <timerStop>:
80000fa8:	d3 01       	pushm	r11-r12
80000faa:	e0 6c 38 00 	mov	r12,14336
80000fae:	ea 1c ff ff 	orh	r12,0xffff
80000fb2:	30 2b       	mov	r11,2
80000fb4:	99 0b       	st.w	r12[0x0],r11
80000fb6:	d3 02       	popm	r11-r12
80000fb8:	1c 9f       	mov	pc,lr

80000fba <timerRCSet>:
80000fba:	d3 01       	pushm	r11-r12
80000fbc:	49 4b       	lddpc	r11,8000100c <timerClearInterrupt+0x1c>
80000fbe:	97 0c       	st.w	r11[0x0],r12
80000fc0:	e0 6c 38 00 	mov	r12,14336
80000fc4:	ea 1c ff ff 	orh	r12,0xffff
80000fc8:	76 0b       	ld.w	r11,r11[0x0]
80000fca:	99 7b       	st.w	r12[0x1c],r11
80000fcc:	d3 02       	popm	r11-r12
80000fce:	1c 9f       	mov	pc,lr

80000fd0 <timerPrescaleSet>:
80000fd0:	d3 81       	pushm	r10-r12
80000fd2:	49 0b       	lddpc	r11,80001010 <timerClearInterrupt+0x20>
80000fd4:	97 0c       	st.w	r11[0x0],r12
80000fd6:	e0 6c 38 00 	mov	r12,14336
80000fda:	ea 1c ff ff 	orh	r12,0xffff
80000fde:	78 1a       	ld.w	r10,r12[0x4]
80000fe0:	3f 8b       	mov	r11,-8
80000fe2:	16 6a       	and	r10,r11
80000fe4:	48 bb       	lddpc	r11,80001010 <timerClearInterrupt+0x20>
80000fe6:	76 0b       	ld.w	r11,r11[0x0]
80000fe8:	14 4b       	or	r11,r10
80000fea:	99 1b       	st.w	r12[0x4],r11
80000fec:	d3 82       	popm	r10-r12
80000fee:	1c 9f       	mov	pc,lr

80000ff0 <timerClearInterrupt>:
80000ff0:	d2 01       	pushm	r12
80000ff2:	e0 6c 38 00 	mov	r12,14336
80000ff6:	ea 1c ff ff 	orh	r12,0xffff
80000ffa:	78 8c       	ld.w	r12,r12[0x20]
80000ffc:	d2 02       	popm	r12
80000ffe:	1c 9f       	mov	pc,lr
80001000:	80 00       	ld.sh	r0,r0[0x0]
80001002:	1b 66       	ld.uh	r6,--sp
80001004:	80 00       	ld.sh	r0,r0[0x0]
80001006:	0f f0       	ld.ub	r0,r7[0x7]
80001008:	80 00       	ld.sh	r0,r0[0x0]
8000100a:	07 fc       	ld.ub	r12,r3[0x7]
8000100c:	00 00       	add	r0,r0
8000100e:	00 08       	add	r8,r0
80001010:	00 00       	add	r0,r0
80001012:	00 0c       	add	r12,r0

80001014 <_stext>:
80001014:	49 7d       	lddpc	sp,80001070 <udata_end+0x4>
80001016:	49 80       	lddpc	r0,80001074 <udata_end+0x8>
80001018:	1a d0       	st.w	--sp,r0
8000101a:	e5 cd 20 00 	ldmts	sp,sp
8000101e:	1b 00       	ld.w	r0,sp++
80001020:	49 60       	lddpc	r0,80001078 <udata_end+0xc>
80001022:	e3 b0 00 01 	mtsr	0x4,r0
80001026:	d5 53       	csrf	0x15
80001028:	e0 6c 0c 00 	mov	r12,3072
8000102c:	ea 1c ff ff 	orh	r12,0xffff
80001030:	e0 6b 01 07 	mov	r11,263
80001034:	99 ab       	st.w	r12[0x28],r11
80001036:	30 4b       	mov	r11,4
80001038:	99 0b       	st.w	r12[0x0],r11
8000103a:	e0 6a 00 80 	mov	r10,128

8000103e <xw8>:
8000103e:	79 5b       	ld.w	r11,r12[0x54]
80001040:	14 7b       	tst	r11,r10
80001042:	cf e0       	breq	8000103e <xw8>
80001044:	30 5b       	mov	r11,5
80001046:	99 0b       	st.w	r12[0x0],r11

80001048 <idata_>:
80001048:	48 d0       	lddpc	r0,8000107c <udata_end+0x10>
8000104a:	48 e1       	lddpc	r1,80001080 <udata_end+0x14>
8000104c:	02 30       	cp.w	r0,r1
8000104e:	c0 62       	brcc	8000105a <idata_end>
80001050:	48 d2       	lddpc	r2,80001084 <udata_end+0x18>

80001052 <idata_loop>:
80001052:	05 04       	ld.w	r4,r2++
80001054:	00 a4       	st.w	r0++,r4
80001056:	02 30       	cp.w	r0,r1
80001058:	cf d3       	brcs	80001052 <idata_loop>

8000105a <idata_end>:
8000105a:	48 c0       	lddpc	r0,80001088 <udata_end+0x1c>
8000105c:	48 c1       	lddpc	r1,8000108c <udata_end+0x20>
8000105e:	02 30       	cp.w	r0,r1
80001060:	c0 62       	brcc	8000106c <udata_end>
80001062:	30 02       	mov	r2,0
80001064:	30 03       	mov	r3,0

80001066 <udata_loop>:
80001066:	00 a2       	st.w	r0++,r2
80001068:	02 30       	cp.w	r0,r1
8000106a:	cf e3       	brcs	80001066 <udata_loop>

8000106c <udata_end>:
8000106c:	48 9f       	lddpc	pc,80001090 <udata_end+0x24>
8000106e:	00 00       	add	r0,r0
80001070:	00 01       	add	r1,r0
80001072:	00 00       	add	r0,r0
80001074:	00 00       	add	r0,r0
80001076:	f0 00       	*unknown*
80001078:	80 00       	ld.sh	r0,r0[0x0]
8000107a:	1a 00       	add	r0,sp
8000107c:	00 00       	add	r0,r0
8000107e:	00 08       	add	r8,r0
80001080:	00 00       	add	r0,r0
80001082:	05 18       	ld.sh	r8,r2++
80001084:	80 00       	ld.sh	r0,r0[0x0]
80001086:	1e 88       	andn	r8,pc
80001088:	00 00       	add	r0,r0
8000108a:	05 18       	ld.sh	r8,r2++
8000108c:	00 00       	add	r0,r0
8000108e:	05 b0       	ld.ub	r0,r2[0x3]
80001090:	80 00       	ld.sh	r0,r0[0x0]
80001092:	00 e8       	st.h	--r0,r8

80001094 <calloc>:
80001094:	d4 01       	pushm	lr
80001096:	48 48       	lddpc	r8,800010a4 <calloc+0x10>
80001098:	16 9a       	mov	r10,r11
8000109a:	18 9b       	mov	r11,r12
8000109c:	70 0c       	ld.w	r12,r8[0x0]
8000109e:	f0 1f 00 03 	mcall	800010a8 <calloc+0x14>
800010a2:	d8 02       	popm	pc
800010a4:	00 00       	add	r0,r0
800010a6:	01 00       	ld.w	r0,r0++
800010a8:	80 00       	ld.sh	r0,r0[0x0]
800010aa:	10 ac       	st.w	r8++,r12

800010ac <_calloc_r>:
800010ac:	d4 21       	pushm	r4-r7,lr
800010ae:	f4 0b 02 4b 	mul	r11,r10,r11
800010b2:	f0 1f 00 15 	mcall	80001104 <_calloc_r+0x58>
800010b6:	18 97       	mov	r7,r12
800010b8:	c2 30       	breq	800010fe <_calloc_r+0x52>
800010ba:	f8 fa ff fc 	ld.w	r10,r12[-4]
800010be:	e0 1a ff fc 	andl	r10,0xfffc
800010c2:	20 4a       	sub	r10,4
800010c4:	e0 4a 00 24 	cp.w	r10,36
800010c8:	e0 8b 00 18 	brhi	800010f8 <_calloc_r+0x4c>
800010cc:	18 98       	mov	r8,r12
800010ce:	59 3a       	cp.w	r10,19
800010d0:	e0 88 00 0f 	brls	800010ee <_calloc_r+0x42>
800010d4:	30 09       	mov	r9,0
800010d6:	10 a9       	st.w	r8++,r9
800010d8:	10 a9       	st.w	r8++,r9
800010da:	59 ba       	cp.w	r10,27
800010dc:	e0 88 00 09 	brls	800010ee <_calloc_r+0x42>
800010e0:	10 a9       	st.w	r8++,r9
800010e2:	10 a9       	st.w	r8++,r9
800010e4:	e0 4a 00 24 	cp.w	r10,36
800010e8:	c0 31       	brne	800010ee <_calloc_r+0x42>
800010ea:	10 a9       	st.w	r8++,r9
800010ec:	10 a9       	st.w	r8++,r9
800010ee:	30 09       	mov	r9,0
800010f0:	10 a9       	st.w	r8++,r9
800010f2:	91 19       	st.w	r8[0x4],r9
800010f4:	91 09       	st.w	r8[0x0],r9
800010f6:	c0 48       	rjmp	800010fe <_calloc_r+0x52>
800010f8:	30 0b       	mov	r11,0
800010fa:	f0 1f 00 04 	mcall	80001108 <_calloc_r+0x5c>
800010fe:	0e 9c       	mov	r12,r7
80001100:	d8 22       	popm	r4-r7,pc
80001102:	00 00       	add	r0,r0
80001104:	80 00       	ld.sh	r0,r0[0x0]
80001106:	11 24       	ld.uh	r4,r8++
80001108:	80 00       	ld.sh	r0,r0[0x0]
8000110a:	15 74       	ld.ub	r4,--r10

8000110c <malloc>:
8000110c:	d4 01       	pushm	lr
8000110e:	48 48       	lddpc	r8,8000111c <malloc+0x10>
80001110:	18 9b       	mov	r11,r12
80001112:	70 0c       	ld.w	r12,r8[0x0]
80001114:	f0 1f 00 03 	mcall	80001120 <malloc+0x14>
80001118:	d8 02       	popm	pc
8000111a:	00 00       	add	r0,r0
8000111c:	00 00       	add	r0,r0
8000111e:	01 00       	ld.w	r0,r0++
80001120:	80 00       	ld.sh	r0,r0[0x0]
80001122:	11 24       	ld.uh	r4,r8++

80001124 <_malloc_r>:
80001124:	d4 31       	pushm	r0-r7,lr
80001126:	f6 c8 ff f5 	sub	r8,r11,-11
8000112a:	18 95       	mov	r5,r12
8000112c:	10 97       	mov	r7,r8
8000112e:	e0 17 ff f8 	andl	r7,0xfff8
80001132:	59 68       	cp.w	r8,22
80001134:	f9 b7 08 10 	movls	r7,16
80001138:	16 37       	cp.w	r7,r11
8000113a:	5f 38       	srlo	r8
8000113c:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001140:	c0 50       	breq	8000114a <_malloc_r+0x26>
80001142:	30 c8       	mov	r8,12
80001144:	99 38       	st.w	r12[0xc],r8
80001146:	e0 8f 01 f3 	bral	8000152c <_malloc_r+0x408>
8000114a:	f0 1f 00 50 	mcall	80001288 <_malloc_r+0x164>
8000114e:	e0 47 01 f7 	cp.w	r7,503
80001152:	e0 8b 00 1c 	brhi	8000118a <_malloc_r+0x66>
80001156:	ee 03 16 03 	lsr	r3,r7,0x3
8000115a:	4c d8       	lddpc	r8,8000128c <_malloc_r+0x168>
8000115c:	f0 03 00 38 	add	r8,r8,r3<<0x3
80001160:	70 36       	ld.w	r6,r8[0xc]
80001162:	10 36       	cp.w	r6,r8
80001164:	c0 61       	brne	80001170 <_malloc_r+0x4c>
80001166:	ec c8 ff f8 	sub	r8,r6,-8
8000116a:	70 36       	ld.w	r6,r8[0xc]
8000116c:	10 36       	cp.w	r6,r8
8000116e:	c0 c0       	breq	80001186 <_malloc_r+0x62>
80001170:	6c 18       	ld.w	r8,r6[0x4]
80001172:	e0 18 ff fc 	andl	r8,0xfffc
80001176:	6c 3a       	ld.w	r10,r6[0xc]
80001178:	ec 08 00 09 	add	r9,r6,r8
8000117c:	0a 9c       	mov	r12,r5
8000117e:	6c 28       	ld.w	r8,r6[0x8]
80001180:	95 28       	st.w	r10[0x8],r8
80001182:	91 3a       	st.w	r8[0xc],r10
80001184:	c4 68       	rjmp	80001210 <_malloc_r+0xec>
80001186:	2f e3       	sub	r3,-2
80001188:	c4 c8       	rjmp	80001220 <_malloc_r+0xfc>
8000118a:	ee 03 16 09 	lsr	r3,r7,0x9
8000118e:	c0 41       	brne	80001196 <_malloc_r+0x72>
80001190:	ee 03 16 03 	lsr	r3,r7,0x3
80001194:	c2 68       	rjmp	800011e0 <_malloc_r+0xbc>
80001196:	58 43       	cp.w	r3,4
80001198:	e0 8b 00 06 	brhi	800011a4 <_malloc_r+0x80>
8000119c:	ee 03 16 06 	lsr	r3,r7,0x6
800011a0:	2c 83       	sub	r3,-56
800011a2:	c1 f8       	rjmp	800011e0 <_malloc_r+0xbc>
800011a4:	59 43       	cp.w	r3,20
800011a6:	e0 8b 00 04 	brhi	800011ae <_malloc_r+0x8a>
800011aa:	2a 53       	sub	r3,-91
800011ac:	c1 a8       	rjmp	800011e0 <_malloc_r+0xbc>
800011ae:	e0 43 00 54 	cp.w	r3,84
800011b2:	e0 8b 00 06 	brhi	800011be <_malloc_r+0x9a>
800011b6:	ee 03 16 0c 	lsr	r3,r7,0xc
800011ba:	29 23       	sub	r3,-110
800011bc:	c1 28       	rjmp	800011e0 <_malloc_r+0xbc>
800011be:	e0 43 01 54 	cp.w	r3,340
800011c2:	e0 8b 00 06 	brhi	800011ce <_malloc_r+0xaa>
800011c6:	ee 03 16 0f 	lsr	r3,r7,0xf
800011ca:	28 93       	sub	r3,-119
800011cc:	c0 a8       	rjmp	800011e0 <_malloc_r+0xbc>
800011ce:	e0 43 05 54 	cp.w	r3,1364
800011d2:	e0 88 00 04 	brls	800011da <_malloc_r+0xb6>
800011d6:	37 e3       	mov	r3,126
800011d8:	c0 48       	rjmp	800011e0 <_malloc_r+0xbc>
800011da:	ee 03 16 12 	lsr	r3,r7,0x12
800011de:	28 43       	sub	r3,-124
800011e0:	4a ba       	lddpc	r10,8000128c <_malloc_r+0x168>
800011e2:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800011e6:	74 36       	ld.w	r6,r10[0xc]
800011e8:	c1 98       	rjmp	8000121a <_malloc_r+0xf6>
800011ea:	6c 19       	ld.w	r9,r6[0x4]
800011ec:	e0 19 ff fc 	andl	r9,0xfffc
800011f0:	f2 07 01 0b 	sub	r11,r9,r7
800011f4:	58 fb       	cp.w	r11,15
800011f6:	e0 8a 00 04 	brle	800011fe <_malloc_r+0xda>
800011fa:	20 13       	sub	r3,1
800011fc:	c1 18       	rjmp	8000121e <_malloc_r+0xfa>
800011fe:	6c 38       	ld.w	r8,r6[0xc]
80001200:	58 0b       	cp.w	r11,0
80001202:	c0 b5       	brlt	80001218 <_malloc_r+0xf4>
80001204:	6c 2a       	ld.w	r10,r6[0x8]
80001206:	ec 09 00 09 	add	r9,r6,r9
8000120a:	0a 9c       	mov	r12,r5
8000120c:	91 2a       	st.w	r8[0x8],r10
8000120e:	95 38       	st.w	r10[0xc],r8
80001210:	72 18       	ld.w	r8,r9[0x4]
80001212:	a1 a8       	sbr	r8,0x0
80001214:	93 18       	st.w	r9[0x4],r8
80001216:	cb c8       	rjmp	8000138e <_malloc_r+0x26a>
80001218:	10 96       	mov	r6,r8
8000121a:	14 36       	cp.w	r6,r10
8000121c:	ce 71       	brne	800011ea <_malloc_r+0xc6>
8000121e:	2f f3       	sub	r3,-1
80001220:	49 ba       	lddpc	r10,8000128c <_malloc_r+0x168>
80001222:	f4 cc ff f8 	sub	r12,r10,-8
80001226:	78 26       	ld.w	r6,r12[0x8]
80001228:	18 36       	cp.w	r6,r12
8000122a:	c6 e0       	breq	80001306 <_malloc_r+0x1e2>
8000122c:	6c 19       	ld.w	r9,r6[0x4]
8000122e:	e0 19 ff fc 	andl	r9,0xfffc
80001232:	f2 07 01 08 	sub	r8,r9,r7
80001236:	58 f8       	cp.w	r8,15
80001238:	e0 89 00 90 	brgt	80001358 <_malloc_r+0x234>
8000123c:	99 3c       	st.w	r12[0xc],r12
8000123e:	99 2c       	st.w	r12[0x8],r12
80001240:	58 08       	cp.w	r8,0
80001242:	c0 55       	brlt	8000124c <_malloc_r+0x128>
80001244:	ec 09 00 09 	add	r9,r6,r9
80001248:	0a 9c       	mov	r12,r5
8000124a:	ce 3b       	rjmp	80001210 <_malloc_r+0xec>
8000124c:	e0 49 01 ff 	cp.w	r9,511
80001250:	e0 8b 00 13 	brhi	80001276 <_malloc_r+0x152>
80001254:	a3 99       	lsr	r9,0x3
80001256:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000125a:	70 2b       	ld.w	r11,r8[0x8]
8000125c:	8d 38       	st.w	r6[0xc],r8
8000125e:	8d 2b       	st.w	r6[0x8],r11
80001260:	97 36       	st.w	r11[0xc],r6
80001262:	91 26       	st.w	r8[0x8],r6
80001264:	a3 49       	asr	r9,0x2
80001266:	74 18       	ld.w	r8,r10[0x4]
80001268:	30 1b       	mov	r11,1
8000126a:	f6 09 09 49 	lsl	r9,r11,r9
8000126e:	f1 e9 10 09 	or	r9,r8,r9
80001272:	95 19       	st.w	r10[0x4],r9
80001274:	c4 98       	rjmp	80001306 <_malloc_r+0x1e2>
80001276:	f2 0a 16 09 	lsr	r10,r9,0x9
8000127a:	58 4a       	cp.w	r10,4
8000127c:	e0 8b 00 0a 	brhi	80001290 <_malloc_r+0x16c>
80001280:	f2 0a 16 06 	lsr	r10,r9,0x6
80001284:	2c 8a       	sub	r10,-56
80001286:	c2 38       	rjmp	800012cc <_malloc_r+0x1a8>
80001288:	80 00       	ld.sh	r0,r0[0x0]
8000128a:	15 82       	ld.ub	r2,r10[0x0]
8000128c:	00 00       	add	r0,r0
8000128e:	01 04       	ld.w	r4,r0++
80001290:	59 4a       	cp.w	r10,20
80001292:	e0 8b 00 04 	brhi	8000129a <_malloc_r+0x176>
80001296:	2a 5a       	sub	r10,-91
80001298:	c1 a8       	rjmp	800012cc <_malloc_r+0x1a8>
8000129a:	e0 4a 00 54 	cp.w	r10,84
8000129e:	e0 8b 00 06 	brhi	800012aa <_malloc_r+0x186>
800012a2:	f2 0a 16 0c 	lsr	r10,r9,0xc
800012a6:	29 2a       	sub	r10,-110
800012a8:	c1 28       	rjmp	800012cc <_malloc_r+0x1a8>
800012aa:	e0 4a 01 54 	cp.w	r10,340
800012ae:	e0 8b 00 06 	brhi	800012ba <_malloc_r+0x196>
800012b2:	f2 0a 16 0f 	lsr	r10,r9,0xf
800012b6:	28 9a       	sub	r10,-119
800012b8:	c0 a8       	rjmp	800012cc <_malloc_r+0x1a8>
800012ba:	e0 4a 05 54 	cp.w	r10,1364
800012be:	e0 88 00 04 	brls	800012c6 <_malloc_r+0x1a2>
800012c2:	37 ea       	mov	r10,126
800012c4:	c0 48       	rjmp	800012cc <_malloc_r+0x1a8>
800012c6:	f2 0a 16 12 	lsr	r10,r9,0x12
800012ca:	28 4a       	sub	r10,-124
800012cc:	4c 8b       	lddpc	r11,800013ec <_malloc_r+0x2c8>
800012ce:	f6 0a 00 34 	add	r4,r11,r10<<0x3
800012d2:	68 28       	ld.w	r8,r4[0x8]
800012d4:	08 38       	cp.w	r8,r4
800012d6:	c0 e1       	brne	800012f2 <_malloc_r+0x1ce>
800012d8:	76 19       	ld.w	r9,r11[0x4]
800012da:	a3 4a       	asr	r10,0x2
800012dc:	30 1e       	mov	lr,1
800012de:	fc 0a 09 4a 	lsl	r10,lr,r10
800012e2:	f3 ea 10 0a 	or	r10,r9,r10
800012e6:	10 99       	mov	r9,r8
800012e8:	97 1a       	st.w	r11[0x4],r10
800012ea:	c0 a8       	rjmp	800012fe <_malloc_r+0x1da>
800012ec:	70 28       	ld.w	r8,r8[0x8]
800012ee:	08 38       	cp.w	r8,r4
800012f0:	c0 60       	breq	800012fc <_malloc_r+0x1d8>
800012f2:	70 1a       	ld.w	r10,r8[0x4]
800012f4:	e0 1a ff fc 	andl	r10,0xfffc
800012f8:	14 39       	cp.w	r9,r10
800012fa:	cf 93       	brcs	800012ec <_malloc_r+0x1c8>
800012fc:	70 39       	ld.w	r9,r8[0xc]
800012fe:	8d 39       	st.w	r6[0xc],r9
80001300:	8d 28       	st.w	r6[0x8],r8
80001302:	91 36       	st.w	r8[0xc],r6
80001304:	93 26       	st.w	r9[0x8],r6
80001306:	e6 08 14 02 	asr	r8,r3,0x2
8000130a:	30 1b       	mov	r11,1
8000130c:	4b 84       	lddpc	r4,800013ec <_malloc_r+0x2c8>
8000130e:	f6 08 09 4b 	lsl	r11,r11,r8
80001312:	68 18       	ld.w	r8,r4[0x4]
80001314:	10 3b       	cp.w	r11,r8
80001316:	e0 8b 00 6f 	brhi	800013f4 <_malloc_r+0x2d0>
8000131a:	f7 e8 00 09 	and	r9,r11,r8
8000131e:	c0 b1       	brne	80001334 <_malloc_r+0x210>
80001320:	e0 13 ff fc 	andl	r3,0xfffc
80001324:	a1 7b       	lsl	r11,0x1
80001326:	2f c3       	sub	r3,-4
80001328:	c0 38       	rjmp	8000132e <_malloc_r+0x20a>
8000132a:	2f c3       	sub	r3,-4
8000132c:	a1 7b       	lsl	r11,0x1
8000132e:	f7 e8 00 09 	and	r9,r11,r8
80001332:	cf c0       	breq	8000132a <_malloc_r+0x206>
80001334:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001338:	06 92       	mov	r2,r3
8000133a:	1c 91       	mov	r1,lr
8000133c:	62 36       	ld.w	r6,r1[0xc]
8000133e:	c2 e8       	rjmp	8000139a <_malloc_r+0x276>
80001340:	6c 1a       	ld.w	r10,r6[0x4]
80001342:	e0 1a ff fc 	andl	r10,0xfffc
80001346:	f4 07 01 08 	sub	r8,r10,r7
8000134a:	58 f8       	cp.w	r8,15
8000134c:	e0 8a 00 15 	brle	80001376 <_malloc_r+0x252>
80001350:	6c 3a       	ld.w	r10,r6[0xc]
80001352:	6c 29       	ld.w	r9,r6[0x8]
80001354:	95 29       	st.w	r10[0x8],r9
80001356:	93 3a       	st.w	r9[0xc],r10
80001358:	0e 99       	mov	r9,r7
8000135a:	ec 07 00 07 	add	r7,r6,r7
8000135e:	a1 a9       	sbr	r9,0x0
80001360:	99 37       	st.w	r12[0xc],r7
80001362:	99 27       	st.w	r12[0x8],r7
80001364:	8d 19       	st.w	r6[0x4],r9
80001366:	ee 08 09 08 	st.w	r7[r8],r8
8000136a:	8f 2c       	st.w	r7[0x8],r12
8000136c:	8f 3c       	st.w	r7[0xc],r12
8000136e:	a1 a8       	sbr	r8,0x0
80001370:	0a 9c       	mov	r12,r5
80001372:	8f 18       	st.w	r7[0x4],r8
80001374:	c0 d8       	rjmp	8000138e <_malloc_r+0x26a>
80001376:	6c 39       	ld.w	r9,r6[0xc]
80001378:	58 08       	cp.w	r8,0
8000137a:	c0 f5       	brlt	80001398 <_malloc_r+0x274>
8000137c:	ec 0a 00 0a 	add	r10,r6,r10
80001380:	74 18       	ld.w	r8,r10[0x4]
80001382:	a1 a8       	sbr	r8,0x0
80001384:	0a 9c       	mov	r12,r5
80001386:	95 18       	st.w	r10[0x4],r8
80001388:	6c 28       	ld.w	r8,r6[0x8]
8000138a:	93 28       	st.w	r9[0x8],r8
8000138c:	91 39       	st.w	r8[0xc],r9
8000138e:	f0 1f 00 19 	mcall	800013f0 <_malloc_r+0x2cc>
80001392:	ec cc ff f8 	sub	r12,r6,-8
80001396:	d8 32       	popm	r0-r7,pc
80001398:	12 96       	mov	r6,r9
8000139a:	02 36       	cp.w	r6,r1
8000139c:	cd 21       	brne	80001340 <_malloc_r+0x21c>
8000139e:	2f f2       	sub	r2,-1
800013a0:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800013a4:	c0 30       	breq	800013aa <_malloc_r+0x286>
800013a6:	2f 81       	sub	r1,-8
800013a8:	cc ab       	rjmp	8000133c <_malloc_r+0x218>
800013aa:	1c 98       	mov	r8,lr
800013ac:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800013b0:	c0 81       	brne	800013c0 <_malloc_r+0x29c>
800013b2:	68 19       	ld.w	r9,r4[0x4]
800013b4:	f6 08 11 ff 	rsub	r8,r11,-1
800013b8:	f3 e8 00 08 	and	r8,r9,r8
800013bc:	89 18       	st.w	r4[0x4],r8
800013be:	c0 78       	rjmp	800013cc <_malloc_r+0x2a8>
800013c0:	f0 c9 00 08 	sub	r9,r8,8
800013c4:	20 13       	sub	r3,1
800013c6:	70 08       	ld.w	r8,r8[0x0]
800013c8:	12 38       	cp.w	r8,r9
800013ca:	cf 10       	breq	800013ac <_malloc_r+0x288>
800013cc:	a1 7b       	lsl	r11,0x1
800013ce:	68 18       	ld.w	r8,r4[0x4]
800013d0:	10 3b       	cp.w	r11,r8
800013d2:	e0 8b 00 11 	brhi	800013f4 <_malloc_r+0x2d0>
800013d6:	58 0b       	cp.w	r11,0
800013d8:	c0 e0       	breq	800013f4 <_malloc_r+0x2d0>
800013da:	04 93       	mov	r3,r2
800013dc:	c0 38       	rjmp	800013e2 <_malloc_r+0x2be>
800013de:	2f c3       	sub	r3,-4
800013e0:	a1 7b       	lsl	r11,0x1
800013e2:	f7 e8 00 09 	and	r9,r11,r8
800013e6:	ca 71       	brne	80001334 <_malloc_r+0x210>
800013e8:	cf bb       	rjmp	800013de <_malloc_r+0x2ba>
800013ea:	00 00       	add	r0,r0
800013ec:	00 00       	add	r0,r0
800013ee:	01 04       	ld.w	r4,r0++
800013f0:	80 00       	ld.sh	r0,r0[0x0]
800013f2:	15 84       	ld.ub	r4,r10[0x0]
800013f4:	68 23       	ld.w	r3,r4[0x8]
800013f6:	66 12       	ld.w	r2,r3[0x4]
800013f8:	e0 12 ff fc 	andl	r2,0xfffc
800013fc:	0e 32       	cp.w	r2,r7
800013fe:	5f 39       	srlo	r9
80001400:	e4 07 01 08 	sub	r8,r2,r7
80001404:	58 f8       	cp.w	r8,15
80001406:	5f aa       	srle	r10
80001408:	f5 e9 10 09 	or	r9,r10,r9
8000140c:	e0 80 00 a2 	breq	80001550 <_malloc_r+0x42c>
80001410:	4c 88       	lddpc	r8,80001530 <_malloc_r+0x40c>
80001412:	70 01       	ld.w	r1,r8[0x0]
80001414:	4c 88       	lddpc	r8,80001534 <_malloc_r+0x410>
80001416:	2f 01       	sub	r1,-16
80001418:	70 08       	ld.w	r8,r8[0x0]
8000141a:	0e 01       	add	r1,r7
8000141c:	5b f8       	cp.w	r8,-1
8000141e:	c0 40       	breq	80001426 <_malloc_r+0x302>
80001420:	28 11       	sub	r1,-127
80001422:	e0 11 ff 80 	andl	r1,0xff80
80001426:	02 9b       	mov	r11,r1
80001428:	0a 9c       	mov	r12,r5
8000142a:	f0 1f 00 44 	mcall	80001538 <_malloc_r+0x414>
8000142e:	18 96       	mov	r6,r12
80001430:	5b fc       	cp.w	r12,-1
80001432:	c6 e0       	breq	8000150e <_malloc_r+0x3ea>
80001434:	e6 02 00 08 	add	r8,r3,r2
80001438:	10 3c       	cp.w	r12,r8
8000143a:	c0 32       	brcc	80001440 <_malloc_r+0x31c>
8000143c:	08 33       	cp.w	r3,r4
8000143e:	c6 81       	brne	8000150e <_malloc_r+0x3ea>
80001440:	4b fa       	lddpc	r10,8000153c <_malloc_r+0x418>
80001442:	74 09       	ld.w	r9,r10[0x0]
80001444:	e2 09 00 09 	add	r9,r1,r9
80001448:	95 09       	st.w	r10[0x0],r9
8000144a:	10 36       	cp.w	r6,r8
8000144c:	c0 a1       	brne	80001460 <_malloc_r+0x33c>
8000144e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80001452:	c0 71       	brne	80001460 <_malloc_r+0x33c>
80001454:	e2 02 00 02 	add	r2,r1,r2
80001458:	68 28       	ld.w	r8,r4[0x8]
8000145a:	a1 a2       	sbr	r2,0x0
8000145c:	91 12       	st.w	r8[0x4],r2
8000145e:	c4 c8       	rjmp	800014f6 <_malloc_r+0x3d2>
80001460:	4b 5a       	lddpc	r10,80001534 <_malloc_r+0x410>
80001462:	74 0b       	ld.w	r11,r10[0x0]
80001464:	5b fb       	cp.w	r11,-1
80001466:	c0 31       	brne	8000146c <_malloc_r+0x348>
80001468:	95 06       	st.w	r10[0x0],r6
8000146a:	c0 68       	rjmp	80001476 <_malloc_r+0x352>
8000146c:	ec 09 00 09 	add	r9,r6,r9
80001470:	4b 3a       	lddpc	r10,8000153c <_malloc_r+0x418>
80001472:	10 19       	sub	r9,r8
80001474:	95 09       	st.w	r10[0x0],r9
80001476:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000147a:	f0 09 11 08 	rsub	r9,r8,8
8000147e:	58 08       	cp.w	r8,0
80001480:	f2 08 17 10 	movne	r8,r9
80001484:	ed d8 e1 06 	addne	r6,r6,r8
80001488:	28 08       	sub	r8,-128
8000148a:	ec 01 00 01 	add	r1,r6,r1
8000148e:	0a 9c       	mov	r12,r5
80001490:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80001494:	f0 01 01 01 	sub	r1,r8,r1
80001498:	02 9b       	mov	r11,r1
8000149a:	f0 1f 00 28 	mcall	80001538 <_malloc_r+0x414>
8000149e:	4a 88       	lddpc	r8,8000153c <_malloc_r+0x418>
800014a0:	5b fc       	cp.w	r12,-1
800014a2:	ec 0c 17 00 	moveq	r12,r6
800014a6:	f9 b1 00 00 	moveq	r1,0
800014aa:	70 09       	ld.w	r9,r8[0x0]
800014ac:	0c 1c       	sub	r12,r6
800014ae:	89 26       	st.w	r4[0x8],r6
800014b0:	02 0c       	add	r12,r1
800014b2:	12 01       	add	r1,r9
800014b4:	a1 ac       	sbr	r12,0x0
800014b6:	91 01       	st.w	r8[0x0],r1
800014b8:	8d 1c       	st.w	r6[0x4],r12
800014ba:	08 33       	cp.w	r3,r4
800014bc:	c1 d0       	breq	800014f6 <_malloc_r+0x3d2>
800014be:	58 f2       	cp.w	r2,15
800014c0:	e0 8b 00 05 	brhi	800014ca <_malloc_r+0x3a6>
800014c4:	30 18       	mov	r8,1
800014c6:	8d 18       	st.w	r6[0x4],r8
800014c8:	c2 38       	rjmp	8000150e <_malloc_r+0x3ea>
800014ca:	30 59       	mov	r9,5
800014cc:	20 c2       	sub	r2,12
800014ce:	e0 12 ff f8 	andl	r2,0xfff8
800014d2:	e6 02 00 08 	add	r8,r3,r2
800014d6:	91 29       	st.w	r8[0x8],r9
800014d8:	91 19       	st.w	r8[0x4],r9
800014da:	66 18       	ld.w	r8,r3[0x4]
800014dc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800014e0:	e5 e8 10 08 	or	r8,r2,r8
800014e4:	87 18       	st.w	r3[0x4],r8
800014e6:	58 f2       	cp.w	r2,15
800014e8:	e0 88 00 07 	brls	800014f6 <_malloc_r+0x3d2>
800014ec:	e6 cb ff f8 	sub	r11,r3,-8
800014f0:	0a 9c       	mov	r12,r5
800014f2:	f0 1f 00 14 	mcall	80001540 <_malloc_r+0x41c>
800014f6:	49 49       	lddpc	r9,80001544 <_malloc_r+0x420>
800014f8:	72 0a       	ld.w	r10,r9[0x0]
800014fa:	49 18       	lddpc	r8,8000153c <_malloc_r+0x418>
800014fc:	70 08       	ld.w	r8,r8[0x0]
800014fe:	14 38       	cp.w	r8,r10
80001500:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001504:	49 19       	lddpc	r9,80001548 <_malloc_r+0x424>
80001506:	72 0a       	ld.w	r10,r9[0x0]
80001508:	14 38       	cp.w	r8,r10
8000150a:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000150e:	68 28       	ld.w	r8,r4[0x8]
80001510:	70 18       	ld.w	r8,r8[0x4]
80001512:	e0 18 ff fc 	andl	r8,0xfffc
80001516:	0e 38       	cp.w	r8,r7
80001518:	5f 39       	srlo	r9
8000151a:	0e 18       	sub	r8,r7
8000151c:	58 f8       	cp.w	r8,15
8000151e:	5f aa       	srle	r10
80001520:	f5 e9 10 09 	or	r9,r10,r9
80001524:	c1 60       	breq	80001550 <_malloc_r+0x42c>
80001526:	0a 9c       	mov	r12,r5
80001528:	f0 1f 00 09 	mcall	8000154c <_malloc_r+0x428>
8000152c:	d8 3a       	popm	r0-r7,pc,r12=0
8000152e:	00 00       	add	r0,r0
80001530:	00 00       	add	r0,r0
80001532:	05 20       	ld.uh	r0,r2++
80001534:	00 00       	add	r0,r0
80001536:	05 10       	ld.sh	r0,r2++
80001538:	80 00       	ld.sh	r0,r0[0x0]
8000153a:	15 88       	ld.ub	r8,r10[0x0]
8000153c:	00 00       	add	r0,r0
8000153e:	05 24       	ld.uh	r4,r2++
80001540:	80 00       	ld.sh	r0,r0[0x0]
80001542:	16 a4       	st.w	r11++,r4
80001544:	00 00       	add	r0,r0
80001546:	05 1c       	ld.sh	r12,r2++
80001548:	00 00       	add	r0,r0
8000154a:	05 18       	ld.sh	r8,r2++
8000154c:	80 00       	ld.sh	r0,r0[0x0]
8000154e:	15 84       	ld.ub	r4,r10[0x0]
80001550:	68 26       	ld.w	r6,r4[0x8]
80001552:	a1 a8       	sbr	r8,0x0
80001554:	0e 99       	mov	r9,r7
80001556:	a1 a9       	sbr	r9,0x0
80001558:	8d 19       	st.w	r6[0x4],r9
8000155a:	ec 07 00 07 	add	r7,r6,r7
8000155e:	0a 9c       	mov	r12,r5
80001560:	89 27       	st.w	r4[0x8],r7
80001562:	8f 18       	st.w	r7[0x4],r8
80001564:	f0 1f 00 03 	mcall	80001570 <_malloc_r+0x44c>
80001568:	ec cc ff f8 	sub	r12,r6,-8
8000156c:	d8 32       	popm	r0-r7,pc
8000156e:	00 00       	add	r0,r0
80001570:	80 00       	ld.sh	r0,r0[0x0]
80001572:	15 84       	ld.ub	r4,r10[0x0]

80001574 <memset>:
80001574:	18 98       	mov	r8,r12
80001576:	c0 38       	rjmp	8000157c <memset+0x8>
80001578:	10 cb       	st.b	r8++,r11
8000157a:	20 1a       	sub	r10,1
8000157c:	58 0a       	cp.w	r10,0
8000157e:	cf d1       	brne	80001578 <memset+0x4>
80001580:	5e fc       	retal	r12

80001582 <__malloc_lock>:
80001582:	5e fc       	retal	r12

80001584 <__malloc_unlock>:
80001584:	5e fc       	retal	r12
80001586:	d7 03       	nop

80001588 <_sbrk_r>:
80001588:	d4 21       	pushm	r4-r7,lr
8000158a:	30 08       	mov	r8,0
8000158c:	18 97       	mov	r7,r12
8000158e:	48 76       	lddpc	r6,800015a8 <_sbrk_r+0x20>
80001590:	16 9c       	mov	r12,r11
80001592:	8d 08       	st.w	r6[0x0],r8
80001594:	f0 1f 00 06 	mcall	800015ac <_sbrk_r+0x24>
80001598:	5b fc       	cp.w	r12,-1
8000159a:	c0 51       	brne	800015a4 <_sbrk_r+0x1c>
8000159c:	6c 08       	ld.w	r8,r6[0x0]
8000159e:	58 08       	cp.w	r8,0
800015a0:	ef f8 1a 03 	st.wne	r7[0xc],r8
800015a4:	d8 22       	popm	r4-r7,pc
800015a6:	00 00       	add	r0,r0
800015a8:	00 00       	add	r0,r0
800015aa:	05 ac       	ld.ub	r12,r2[0x2]
800015ac:	80 00       	ld.sh	r0,r0[0x0]
800015ae:	15 b0       	ld.ub	r0,r10[0x3]

800015b0 <_sbrk>:
800015b0:	d4 01       	pushm	lr
800015b2:	48 c8       	lddpc	r8,800015e0 <_sbrk+0x30>
800015b4:	70 09       	ld.w	r9,r8[0x0]
800015b6:	58 09       	cp.w	r9,0
800015b8:	c0 31       	brne	800015be <_sbrk+0xe>
800015ba:	48 b9       	lddpc	r9,800015e4 <_sbrk+0x34>
800015bc:	91 09       	st.w	r8[0x0],r9
800015be:	48 99       	lddpc	r9,800015e0 <_sbrk+0x30>
800015c0:	48 aa       	lddpc	r10,800015e8 <_sbrk+0x38>
800015c2:	72 08       	ld.w	r8,r9[0x0]
800015c4:	f0 0c 00 0c 	add	r12,r8,r12
800015c8:	14 3c       	cp.w	r12,r10
800015ca:	e0 8b 00 04 	brhi	800015d2 <_sbrk+0x22>
800015ce:	93 0c       	st.w	r9[0x0],r12
800015d0:	c0 68       	rjmp	800015dc <_sbrk+0x2c>
800015d2:	f0 1f 00 07 	mcall	800015ec <_sbrk+0x3c>
800015d6:	30 c8       	mov	r8,12
800015d8:	99 08       	st.w	r12[0x0],r8
800015da:	3f f8       	mov	r8,-1
800015dc:	10 9c       	mov	r12,r8
800015de:	d8 02       	popm	pc
800015e0:	00 00       	add	r0,r0
800015e2:	05 4c       	ld.w	r12,--r2
800015e4:	00 00       	add	r0,r0
800015e6:	05 b0       	ld.ub	r0,r2[0x3]
800015e8:	00 00       	add	r0,r0
800015ea:	e0 00       	*unknown*
800015ec:	80 00       	ld.sh	r0,r0[0x0]
800015ee:	15 f0       	ld.ub	r0,r10[0x7]

800015f0 <__errno>:
800015f0:	48 28       	lddpc	r8,800015f8 <__errno+0x8>
800015f2:	70 0c       	ld.w	r12,r8[0x0]
800015f4:	2f 4c       	sub	r12,-12
800015f6:	5e fc       	retal	r12
800015f8:	00 00       	add	r0,r0
800015fa:	01 00       	ld.w	r0,r0++

800015fc <_malloc_trim_r>:
800015fc:	d4 21       	pushm	r4-r7,lr
800015fe:	16 95       	mov	r5,r11
80001600:	18 97       	mov	r7,r12
80001602:	f0 1f 00 23 	mcall	8000168c <_malloc_trim_r+0x90>
80001606:	4a 34       	lddpc	r4,80001690 <_malloc_trim_r+0x94>
80001608:	68 28       	ld.w	r8,r4[0x8]
8000160a:	70 16       	ld.w	r6,r8[0x4]
8000160c:	e0 16 ff fc 	andl	r6,0xfffc
80001610:	ec c8 ff 91 	sub	r8,r6,-111
80001614:	f0 05 01 05 	sub	r5,r8,r5
80001618:	e0 15 ff 80 	andl	r5,0xff80
8000161c:	ea c5 00 80 	sub	r5,r5,128
80001620:	e0 45 00 7f 	cp.w	r5,127
80001624:	e0 8a 00 23 	brle	8000166a <_malloc_trim_r+0x6e>
80001628:	30 0b       	mov	r11,0
8000162a:	0e 9c       	mov	r12,r7
8000162c:	f0 1f 00 1a 	mcall	80001694 <_malloc_trim_r+0x98>
80001630:	68 28       	ld.w	r8,r4[0x8]
80001632:	0c 08       	add	r8,r6
80001634:	10 3c       	cp.w	r12,r8
80001636:	c1 a1       	brne	8000166a <_malloc_trim_r+0x6e>
80001638:	ea 0b 11 00 	rsub	r11,r5,0
8000163c:	0e 9c       	mov	r12,r7
8000163e:	f0 1f 00 16 	mcall	80001694 <_malloc_trim_r+0x98>
80001642:	5b fc       	cp.w	r12,-1
80001644:	c1 71       	brne	80001672 <_malloc_trim_r+0x76>
80001646:	30 0b       	mov	r11,0
80001648:	0e 9c       	mov	r12,r7
8000164a:	f0 1f 00 13 	mcall	80001694 <_malloc_trim_r+0x98>
8000164e:	68 28       	ld.w	r8,r4[0x8]
80001650:	f8 08 01 09 	sub	r9,r12,r8
80001654:	58 f9       	cp.w	r9,15
80001656:	e0 8a 00 0a 	brle	8000166a <_malloc_trim_r+0x6e>
8000165a:	a1 a9       	sbr	r9,0x0
8000165c:	91 19       	st.w	r8[0x4],r9
8000165e:	48 f8       	lddpc	r8,80001698 <_malloc_trim_r+0x9c>
80001660:	70 09       	ld.w	r9,r8[0x0]
80001662:	48 f8       	lddpc	r8,8000169c <_malloc_trim_r+0xa0>
80001664:	f8 09 01 09 	sub	r9,r12,r9
80001668:	91 09       	st.w	r8[0x0],r9
8000166a:	0e 9c       	mov	r12,r7
8000166c:	f0 1f 00 0d 	mcall	800016a0 <_malloc_trim_r+0xa4>
80001670:	d8 2a       	popm	r4-r7,pc,r12=0
80001672:	68 28       	ld.w	r8,r4[0x8]
80001674:	0a 16       	sub	r6,r5
80001676:	a1 a6       	sbr	r6,0x0
80001678:	91 16       	st.w	r8[0x4],r6
8000167a:	48 98       	lddpc	r8,8000169c <_malloc_trim_r+0xa0>
8000167c:	70 09       	ld.w	r9,r8[0x0]
8000167e:	0a 19       	sub	r9,r5
80001680:	0e 9c       	mov	r12,r7
80001682:	91 09       	st.w	r8[0x0],r9
80001684:	f0 1f 00 07 	mcall	800016a0 <_malloc_trim_r+0xa4>
80001688:	da 2a       	popm	r4-r7,pc,r12=1
8000168a:	00 00       	add	r0,r0
8000168c:	80 00       	ld.sh	r0,r0[0x0]
8000168e:	15 82       	ld.ub	r2,r10[0x0]
80001690:	00 00       	add	r0,r0
80001692:	01 04       	ld.w	r4,r0++
80001694:	80 00       	ld.sh	r0,r0[0x0]
80001696:	15 88       	ld.ub	r8,r10[0x0]
80001698:	00 00       	add	r0,r0
8000169a:	05 10       	ld.sh	r0,r2++
8000169c:	00 00       	add	r0,r0
8000169e:	05 24       	ld.uh	r4,r2++
800016a0:	80 00       	ld.sh	r0,r0[0x0]
800016a2:	15 84       	ld.ub	r4,r10[0x0]

800016a4 <_free_r>:
800016a4:	d4 21       	pushm	r4-r7,lr
800016a6:	16 96       	mov	r6,r11
800016a8:	18 97       	mov	r7,r12
800016aa:	58 0b       	cp.w	r11,0
800016ac:	e0 80 00 c8 	breq	8000183c <_free_r+0x198>
800016b0:	f0 1f 00 4c 	mcall	800017e0 <_free_r+0x13c>
800016b4:	20 86       	sub	r6,8
800016b6:	4c ca       	lddpc	r10,800017e4 <_free_r+0x140>
800016b8:	6c 18       	ld.w	r8,r6[0x4]
800016ba:	74 2e       	ld.w	lr,r10[0x8]
800016bc:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800016c0:	a1 c8       	cbr	r8,0x0
800016c2:	ec 08 00 09 	add	r9,r6,r8
800016c6:	72 1b       	ld.w	r11,r9[0x4]
800016c8:	e0 1b ff fc 	andl	r11,0xfffc
800016cc:	1c 39       	cp.w	r9,lr
800016ce:	c1 d1       	brne	80001708 <_free_r+0x64>
800016d0:	f6 08 00 08 	add	r8,r11,r8
800016d4:	58 0c       	cp.w	r12,0
800016d6:	c0 81       	brne	800016e6 <_free_r+0x42>
800016d8:	6c 09       	ld.w	r9,r6[0x0]
800016da:	12 16       	sub	r6,r9
800016dc:	12 08       	add	r8,r9
800016de:	6c 3b       	ld.w	r11,r6[0xc]
800016e0:	6c 29       	ld.w	r9,r6[0x8]
800016e2:	97 29       	st.w	r11[0x8],r9
800016e4:	93 3b       	st.w	r9[0xc],r11
800016e6:	10 99       	mov	r9,r8
800016e8:	95 26       	st.w	r10[0x8],r6
800016ea:	a1 a9       	sbr	r9,0x0
800016ec:	8d 19       	st.w	r6[0x4],r9
800016ee:	4b f9       	lddpc	r9,800017e8 <_free_r+0x144>
800016f0:	72 09       	ld.w	r9,r9[0x0]
800016f2:	12 38       	cp.w	r8,r9
800016f4:	c0 63       	brcs	80001700 <_free_r+0x5c>
800016f6:	4b e8       	lddpc	r8,800017ec <_free_r+0x148>
800016f8:	0e 9c       	mov	r12,r7
800016fa:	70 0b       	ld.w	r11,r8[0x0]
800016fc:	f0 1f 00 3d 	mcall	800017f0 <_free_r+0x14c>
80001700:	0e 9c       	mov	r12,r7
80001702:	f0 1f 00 3d 	mcall	800017f4 <_free_r+0x150>
80001706:	d8 22       	popm	r4-r7,pc
80001708:	93 1b       	st.w	r9[0x4],r11
8000170a:	58 0c       	cp.w	r12,0
8000170c:	c0 30       	breq	80001712 <_free_r+0x6e>
8000170e:	30 0c       	mov	r12,0
80001710:	c1 08       	rjmp	80001730 <_free_r+0x8c>
80001712:	6c 0e       	ld.w	lr,r6[0x0]
80001714:	f4 c5 ff f8 	sub	r5,r10,-8
80001718:	1c 16       	sub	r6,lr
8000171a:	1c 08       	add	r8,lr
8000171c:	6c 2e       	ld.w	lr,r6[0x8]
8000171e:	0a 3e       	cp.w	lr,r5
80001720:	f9 bc 00 01 	moveq	r12,1
80001724:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001728:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000172c:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001730:	f2 0b 00 0e 	add	lr,r9,r11
80001734:	7c 1e       	ld.w	lr,lr[0x4]
80001736:	ed be 00 00 	bld	lr,0x0
8000173a:	c1 30       	breq	80001760 <_free_r+0xbc>
8000173c:	16 08       	add	r8,r11
8000173e:	58 0c       	cp.w	r12,0
80001740:	c0 c1       	brne	80001758 <_free_r+0xb4>
80001742:	4a 9e       	lddpc	lr,800017e4 <_free_r+0x140>
80001744:	72 2b       	ld.w	r11,r9[0x8]
80001746:	2f 8e       	sub	lr,-8
80001748:	1c 3b       	cp.w	r11,lr
8000174a:	c0 71       	brne	80001758 <_free_r+0xb4>
8000174c:	97 36       	st.w	r11[0xc],r6
8000174e:	97 26       	st.w	r11[0x8],r6
80001750:	8d 2b       	st.w	r6[0x8],r11
80001752:	8d 3b       	st.w	r6[0xc],r11
80001754:	30 1c       	mov	r12,1
80001756:	c0 58       	rjmp	80001760 <_free_r+0xbc>
80001758:	72 2b       	ld.w	r11,r9[0x8]
8000175a:	72 39       	ld.w	r9,r9[0xc]
8000175c:	93 2b       	st.w	r9[0x8],r11
8000175e:	97 39       	st.w	r11[0xc],r9
80001760:	10 99       	mov	r9,r8
80001762:	ec 08 09 08 	st.w	r6[r8],r8
80001766:	a1 a9       	sbr	r9,0x0
80001768:	8d 19       	st.w	r6[0x4],r9
8000176a:	58 0c       	cp.w	r12,0
8000176c:	c6 51       	brne	80001836 <_free_r+0x192>
8000176e:	e0 48 01 ff 	cp.w	r8,511
80001772:	e0 8b 00 13 	brhi	80001798 <_free_r+0xf4>
80001776:	a3 98       	lsr	r8,0x3
80001778:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000177c:	72 2b       	ld.w	r11,r9[0x8]
8000177e:	8d 39       	st.w	r6[0xc],r9
80001780:	8d 2b       	st.w	r6[0x8],r11
80001782:	97 36       	st.w	r11[0xc],r6
80001784:	93 26       	st.w	r9[0x8],r6
80001786:	a3 48       	asr	r8,0x2
80001788:	74 19       	ld.w	r9,r10[0x4]
8000178a:	30 1b       	mov	r11,1
8000178c:	f6 08 09 48 	lsl	r8,r11,r8
80001790:	f3 e8 10 08 	or	r8,r9,r8
80001794:	95 18       	st.w	r10[0x4],r8
80001796:	c5 08       	rjmp	80001836 <_free_r+0x192>
80001798:	f0 0b 16 09 	lsr	r11,r8,0x9
8000179c:	58 4b       	cp.w	r11,4
8000179e:	e0 8b 00 06 	brhi	800017aa <_free_r+0x106>
800017a2:	f0 0b 16 06 	lsr	r11,r8,0x6
800017a6:	2c 8b       	sub	r11,-56
800017a8:	c2 b8       	rjmp	800017fe <_free_r+0x15a>
800017aa:	59 4b       	cp.w	r11,20
800017ac:	e0 8b 00 04 	brhi	800017b4 <_free_r+0x110>
800017b0:	2a 5b       	sub	r11,-91
800017b2:	c2 68       	rjmp	800017fe <_free_r+0x15a>
800017b4:	e0 4b 00 54 	cp.w	r11,84
800017b8:	e0 8b 00 06 	brhi	800017c4 <_free_r+0x120>
800017bc:	f0 0b 16 0c 	lsr	r11,r8,0xc
800017c0:	29 2b       	sub	r11,-110
800017c2:	c1 e8       	rjmp	800017fe <_free_r+0x15a>
800017c4:	e0 4b 01 54 	cp.w	r11,340
800017c8:	e0 8b 00 06 	brhi	800017d4 <_free_r+0x130>
800017cc:	f0 0b 16 0f 	lsr	r11,r8,0xf
800017d0:	28 9b       	sub	r11,-119
800017d2:	c1 68       	rjmp	800017fe <_free_r+0x15a>
800017d4:	e0 4b 05 54 	cp.w	r11,1364
800017d8:	e0 88 00 10 	brls	800017f8 <_free_r+0x154>
800017dc:	37 eb       	mov	r11,126
800017de:	c1 08       	rjmp	800017fe <_free_r+0x15a>
800017e0:	80 00       	ld.sh	r0,r0[0x0]
800017e2:	15 82       	ld.ub	r2,r10[0x0]
800017e4:	00 00       	add	r0,r0
800017e6:	01 04       	ld.w	r4,r0++
800017e8:	00 00       	add	r0,r0
800017ea:	05 0c       	ld.w	r12,r2++
800017ec:	00 00       	add	r0,r0
800017ee:	05 20       	ld.uh	r0,r2++
800017f0:	80 00       	ld.sh	r0,r0[0x0]
800017f2:	15 fc       	ld.ub	r12,r10[0x7]
800017f4:	80 00       	ld.sh	r0,r0[0x0]
800017f6:	15 84       	ld.ub	r4,r10[0x0]
800017f8:	f0 0b 16 12 	lsr	r11,r8,0x12
800017fc:	28 4b       	sub	r11,-124
800017fe:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80001802:	78 29       	ld.w	r9,r12[0x8]
80001804:	18 39       	cp.w	r9,r12
80001806:	c0 e1       	brne	80001822 <_free_r+0x17e>
80001808:	74 18       	ld.w	r8,r10[0x4]
8000180a:	a3 4b       	asr	r11,0x2
8000180c:	30 1c       	mov	r12,1
8000180e:	f8 0b 09 4b 	lsl	r11,r12,r11
80001812:	f1 eb 10 0b 	or	r11,r8,r11
80001816:	12 98       	mov	r8,r9
80001818:	95 1b       	st.w	r10[0x4],r11
8000181a:	c0 a8       	rjmp	8000182e <_free_r+0x18a>
8000181c:	72 29       	ld.w	r9,r9[0x8]
8000181e:	18 39       	cp.w	r9,r12
80001820:	c0 60       	breq	8000182c <_free_r+0x188>
80001822:	72 1a       	ld.w	r10,r9[0x4]
80001824:	e0 1a ff fc 	andl	r10,0xfffc
80001828:	14 38       	cp.w	r8,r10
8000182a:	cf 93       	brcs	8000181c <_free_r+0x178>
8000182c:	72 38       	ld.w	r8,r9[0xc]
8000182e:	8d 38       	st.w	r6[0xc],r8
80001830:	8d 29       	st.w	r6[0x8],r9
80001832:	93 36       	st.w	r9[0xc],r6
80001834:	91 26       	st.w	r8[0x8],r6
80001836:	0e 9c       	mov	r12,r7
80001838:	f0 1f 00 02 	mcall	80001840 <_free_r+0x19c>
8000183c:	d8 22       	popm	r4-r7,pc
8000183e:	00 00       	add	r0,r0
80001840:	80 00       	ld.sh	r0,r0[0x0]
80001842:	15 84       	ld.ub	r4,r10[0x0]

Disassembly of section .exception:

80001a00 <_evba>:
	...

80001a28 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001a28:	c7 a8       	rjmp	80001b1c <privilegedCalls>
	...

80001b00 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001b00:	1c 9f       	mov	pc,lr

80001b02 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001b02:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001b06:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
80001b0a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
80001b0e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001b12:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001b14:	c0 31       	brne	80001b1a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001b16:	4b 9c       	lddpc	r12,80001bf8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001b18:	18 9f       	mov	pc,r12

80001b1a <_int0_exit>:
_int0_exit:
	rete
80001b1a:	d6 03       	rete

80001b1c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
80001b1c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
80001b1e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001b20:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001b22:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001b24:	9b 3c       	st.w	sp[0xc],r12

80001b26 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001b26:	4b 6c       	lddpc	r12,80001bfc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001b28:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
80001b2a:	c0 61       	brne	80001b36 <priv_interruptenable>
	ld.w r12,sp[USERSR]
80001b2c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
80001b2e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001b30:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001b32:	d3 02       	popm	r11-r12
	rete
80001b34:	d6 03       	rete

80001b36 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001b36:	4b 3c       	lddpc	r12,80001c00 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001b38:	18 3b       	cp.w	r11,r12
	brne privexception
80001b3a:	c0 61       	brne	80001b46 <privexception>
	ld.w r12,sp[USERSR]
80001b3c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
80001b3e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001b40:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001b42:	d3 02       	popm	r11-r12
	rete
80001b44:	d6 03       	rete

80001b46 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001b46:	c0 08       	rjmp	80001b46 <privexception>

80001b48 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001b48:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
80001b4a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
80001b4e:	4a ec       	lddpc	r12,80001c04 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001b50:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001b52:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001b54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001b58:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
80001b5c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001b60:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001b62:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001b64:	1c 9f       	mov	pc,lr

80001b66 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001b66:	d3 03       	ssrf	0x10
	mov pc,lr
80001b68:	1c 9f       	mov	pc,lr

80001b6a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
80001b6a:	d5 03       	csrf	0x10
	mov pc,lr
80001b6c:	1c 9f       	mov	pc,lr

80001b6e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
80001b6e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001b72:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001b74:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001b78:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
80001b7c:	1c 9f       	mov	pc,lr

80001b7e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001b7e:	4a 3c       	lddpc	r12,80001c08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001b80:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001b82:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001b84:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001b86:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001b88:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
80001b8a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
80001b8c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
80001b8e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001b90:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001b92:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001b94:	33 40       	mov	r0,52
	add r0,r12
80001b96:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001b98:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
80001b9c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
80001b9e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
80001ba2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
80001ba4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
80001ba6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
80001ba8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
80001baa:	1a 90       	mov	r0,sp
	st.w --sp,r0
80001bac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80001bae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
80001bb2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
80001bb4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
80001bb6:	1c 9f       	mov	pc,lr

80001bb8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001bb8:	49 4c       	lddpc	r12,80001c08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001bba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
80001bbc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80001bbe:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80001bc0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
80001bc4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
80001bc6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
80001bc8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80001bca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
80001bcc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80001bce:	33 40       	mov	r0,52
	add r0,r12
80001bd0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80001bd2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80001bd6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
80001bd8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
80001bda:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
80001bdc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
80001bde:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
80001be0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
80001be2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
80001be4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
80001be6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
80001be8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80001bea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
80001bec:	d4 01       	pushm	lr
	call timerStart
80001bee:	f0 1f 00 08 	mcall	80001c0c <contextRestoreFromISR+0x54>
	popm lr
80001bf2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
80001bf4:	1c 9f       	mov	pc,lr
80001bf6:	00 00       	add	r0,r0
80001bf8:	80 00       	ld.sh	r0,r0[0x0]
80001bfa:	06 b0       	st.h	r3++,r0
80001bfc:	80 00       	ld.sh	r0,r0[0x0]
80001bfe:	1b 66       	ld.uh	r6,--sp
80001c00:	80 00       	ld.sh	r0,r0[0x0]
80001c02:	1b 6a       	ld.uh	r10,--sp
80001c04:	80 00       	ld.sh	r0,r0[0x0]
80001c06:	1a 00       	add	r0,sp
80001c08:	00 00       	add	r0,r0
80001c0a:	05 9c       	ld.ub	r12,r2[0x1]
80001c0c:	80 00       	ld.sh	r0,r0[0x0]
80001c0e:	0f 8a       	ld.ub	r10,r7[0x0]
	...
