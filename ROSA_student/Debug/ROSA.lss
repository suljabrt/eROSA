
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000172c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001800  80001800  00001c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80001c00  80001c00  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80001c84  80001c84  00002084  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80001c88  00002408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002194  00002914  2**0
                  ALLOC
  9 .bss          00000098  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000da50  000005b0  000005b0  00000000  2**0
                  ALLOC
 11 .comment      000000a0  00000000  00000000  00002914  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000005b0  00000000  00000000  000029b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 000009bb  00000000  00000000  00002f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c4b9  00000000  00000000  00003923  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00002088  00000000  00000000  0000fddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000475f  00000000  00000000  00011e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000c04  00000000  00000000  000165c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001c39  00000000  00000000  000171c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000018bf  00000000  00000000  00018e01  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00534509  00000000  00000000  0001a6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 000004f8  00000000  00000000  0054ebc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	0e ec       	st.h	--r7,r12

Disassembly of section .text:

80000008 <ROSA_semaphoreCreate>:
 *
 * Comment:
 * 	Create a semaphore
 *
 **********************************************************/
int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t ** mutex, uint8_t ceiling) {
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 2d       	sub	sp,8
80000010:	ef 4c ff fc 	st.w	r7[-4],r12
80000014:	16 98       	mov	r8,r11
80000016:	ef 68 ff f8 	st.b	r7[-8],r8
	*mutex = (ROSA_semaphoreHandle_t*) malloc(sizeof(ROSA_semaphoreHandle_t*));
8000001a:	30 4c       	mov	r12,4
8000001c:	f0 1f 00 0c 	mcall	8000004c <ROSA_semaphoreCreate+0x44>
80000020:	18 98       	mov	r8,r12
80000022:	10 99       	mov	r9,r8
80000024:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000028:	91 09       	st.w	r8[0x0],r9
	(*mutex)->holder = NULL;
8000002a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000002e:	70 08       	ld.w	r8,r8[0x0]
80000030:	30 09       	mov	r9,0
80000032:	91 09       	st.w	r8[0x0],r9
	(*mutex)->ceiling = ceiling;
80000034:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000038:	70 09       	ld.w	r9,r8[0x0]
8000003a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000003e:	b2 c8       	st.b	r9[0x4],r8
	
	return 0;
80000040:	30 08       	mov	r8,0
}
80000042:	10 9c       	mov	r12,r8
80000044:	2f ed       	sub	sp,-8
80000046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000004a:	00 00       	add	r0,r0
8000004c:	80 00       	ld.sh	r0,r0[0x0]
8000004e:	0f fc       	ld.ub	r12,r7[0x7]

80000050 <usart_options>:
80000050:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 33     ............tsk3
80000060:	00 00 00 00 74 73 6b 31 00 00 00 00 74 73 6b 32     ....tsk1....tsk2
80000070:	00 00 00 00                                         ....

80000074 <task1>:
/*************************************************************
 * Task1
 * Blink LED0
 ************************************************************/
void task1(void)
{
80000074:	eb cd 40 80 	pushm	r7,lr
80000078:	1a 97       	mov	r7,sp
	while(1) {
		ledOn(LED0_GPIO);
8000007a:	33 bc       	mov	r12,59
8000007c:	f0 1f 00 02 	mcall	80000084 <task1+0x10>
	}
80000080:	cf db       	rjmp	8000007a <task1+0x6>
80000082:	00 00       	add	r0,r0
80000084:	80 00       	ld.sh	r0,r0[0x0]
80000086:	0b 1c       	ld.sh	r12,r5++

80000088 <task3>:
/*************************************************************
 * Task 3
 * Idle
 ************************************************************/
void task3(void)
{
80000088:	eb cd 40 80 	pushm	r7,lr
8000008c:	1a 97       	mov	r7,sp
	while(1) {
		ledOff(LED0_GPIO);
8000008e:	33 bc       	mov	r12,59
80000090:	f0 1f 00 02 	mcall	80000098 <task3+0x10>
	}
80000094:	cf db       	rjmp	8000008e <task3+0x6>
80000096:	00 00       	add	r0,r0
80000098:	80 00       	ld.sh	r0,r0[0x0]
8000009a:	0b 3c       	ld.ub	r12,r5++

8000009c <task2>:
/*************************************************************
 * Task2
 * Blink LED1
 ************************************************************/
void task2(void)
{
8000009c:	eb cd 40 80 	pushm	r7,lr
800000a0:	1a 97       	mov	r7,sp
	while(1) {
		ledOff(LED0_GPIO);
800000a2:	33 bc       	mov	r12,59
800000a4:	f0 1f 00 07 	mcall	800000c0 <task2+0x24>
		ROSA_taskCreate(&t3_tcb, "tsk3", task3, T3_STACK_SIZE, 1);
800000a8:	30 18       	mov	r8,1
800000aa:	32 09       	mov	r9,32
800000ac:	48 6a       	lddpc	r10,800000c4 <task2+0x28>
800000ae:	48 7b       	lddpc	r11,800000c8 <task2+0x2c>
800000b0:	48 7c       	lddpc	r12,800000cc <task2+0x30>
800000b2:	f0 1f 00 08 	mcall	800000d0 <task2+0x34>
		ROSA_taskDelete(&t2_tcb);
800000b6:	48 8c       	lddpc	r12,800000d4 <task2+0x38>
800000b8:	f0 1f 00 08 	mcall	800000d8 <task2+0x3c>
	}
800000bc:	cf 3b       	rjmp	800000a2 <task2+0x6>
800000be:	00 00       	add	r0,r0
800000c0:	80 00       	ld.sh	r0,r0[0x0]
800000c2:	0b 3c       	ld.ub	r12,r5++
800000c4:	80 00       	ld.sh	r0,r0[0x0]
800000c6:	00 88       	andn	r8,r0
800000c8:	80 00       	ld.sh	r0,r0[0x0]
800000ca:	00 5c       	eor	r12,r0
800000cc:	00 00       	add	r0,r0
800000ce:	05 50       	ld.sh	r0,--r2
800000d0:	80 00       	ld.sh	r0,r0[0x0]
800000d2:	04 60       	and	r0,r2
800000d4:	00 00       	add	r0,r0
800000d6:	05 58       	ld.sh	r8,--r2
800000d8:	80 00       	ld.sh	r0,r0[0x0]
800000da:	05 40       	ld.w	r0,--r2

800000dc <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
800000dc:	eb cd 40 80 	pushm	r7,lr
800000e0:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
800000e2:	f0 1f 00 0d 	mcall	80000114 <main+0x38>
	
	//Create tasks and install them into the ROSA kernel
	ROSA_taskCreate(&t1_tcb, "tsk1", task1, T1_STACK_SIZE, 1);
800000e6:	30 18       	mov	r8,1
800000e8:	e0 69 01 00 	mov	r9,256
800000ec:	48 ba       	lddpc	r10,80000118 <main+0x3c>
800000ee:	48 cb       	lddpc	r11,8000011c <main+0x40>
800000f0:	48 cc       	lddpc	r12,80000120 <main+0x44>
800000f2:	f0 1f 00 0d 	mcall	80000124 <main+0x48>
	ROSA_taskCreate(&t2_tcb, "tsk2", task2, T2_STACK_SIZE, 1);
800000f6:	30 18       	mov	r8,1
800000f8:	e0 69 01 00 	mov	r9,256
800000fc:	48 ba       	lddpc	r10,80000128 <main+0x4c>
800000fe:	48 cb       	lddpc	r11,8000012c <main+0x50>
80000100:	48 cc       	lddpc	r12,80000130 <main+0x54>
80000102:	f0 1f 00 09 	mcall	80000124 <main+0x48>
	//ROSA_taskCreate(&t3_tcb, "tsk3", task3, T3_STACK_SIZE, 1);
	ROSA_semaphoreCreate(&mutex, 1);
80000106:	30 1b       	mov	r11,1
80000108:	48 bc       	lddpc	r12,80000134 <main+0x58>
8000010a:	f0 1f 00 0c 	mcall	80000138 <main+0x5c>
	ROSA_tcbInstall(&t2_tcb);*/

	//Start the ROSA kernel
	//TCBLIST = PA[2]->nexttcb;
	//ROSA_start();
	ROSA_startScheduler();
8000010e:	f0 1f 00 0c 	mcall	8000013c <main+0x60>
	//ledOn(LED1_GPIO);
	/* Execution will never return here */
	while(1);
80000112:	c0 08       	rjmp	80000112 <main+0x36>
80000114:	80 00       	ld.sh	r0,r0[0x0]
80000116:	02 e4       	st.h	--r1,r4
80000118:	80 00       	ld.sh	r0,r0[0x0]
8000011a:	00 74       	tst	r4,r0
8000011c:	80 00       	ld.sh	r0,r0[0x0]
8000011e:	00 64       	and	r4,r0
80000120:	00 00       	add	r0,r0
80000122:	05 60       	ld.uh	r0,--r2
80000124:	80 00       	ld.sh	r0,r0[0x0]
80000126:	04 60       	and	r0,r2
80000128:	80 00       	ld.sh	r0,r0[0x0]
8000012a:	00 9c       	mov	r12,r0
8000012c:	80 00       	ld.sh	r0,r0[0x0]
8000012e:	00 6c       	and	r12,r0
80000130:	00 00       	add	r0,r0
80000132:	05 58       	ld.sh	r8,--r2
80000134:	00 00       	add	r0,r0
80000136:	05 5c       	ld.sh	r12,--r2
80000138:	80 00       	ld.sh	r0,r0[0x0]
8000013a:	00 08       	add	r8,r0
8000013c:	80 00       	ld.sh	r0,r0[0x0]
8000013e:	07 94       	ld.ub	r4,r3[0x1]

80000140 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
80000140:	eb cd 40 80 	pushm	r7,lr
80000144:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
80000146:	f0 1f 00 05 	mcall	80000158 <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
8000014a:	f0 1f 00 05 	mcall	8000015c <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it
8000014e:	f0 1f 00 05 	mcall	80000160 <ROSA_yieldFromISR+0x20>
}
80000152:	e3 cd 80 80 	ldm	sp++,r7,pc
80000156:	00 00       	add	r0,r0
80000158:	80 00       	ld.sh	r0,r0[0x0]
8000015a:	19 7e       	ld.ub	lr,--r12
8000015c:	80 00       	ld.sh	r0,r0[0x0]
8000015e:	07 48       	ld.w	r8,--r3
80000160:	80 00       	ld.sh	r0,r0[0x0]
80000162:	19 b8       	ld.ub	r8,r12[0x3]

80000164 <usart_options>:
80000164:	00 00 e1 00 08 04 00 00 00 00 00 00                 ............

80000170 <rqi>:
	@brief Inserts the given task into the ready queue by its priority.
	@param th Task structure (tcb structure).
	@return A status code (1 - item has been added to the empty queue, 0 - otherwise).
*/
int rqi(ROSA_taskHandle_t ** pth)
{
80000170:	eb cd 40 80 	pushm	r7,lr
80000174:	1a 97       	mov	r7,sp
80000176:	20 2d       	sub	sp,8
80000178:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t priority;
	
	priority = (*pth)->priority;
8000017c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000180:	70 08       	ld.w	r8,r8[0x0]
80000182:	f1 38 00 64 	ld.ub	r8,r8[100]
80000186:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (PA[priority] == NULL) {
8000018a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000018e:	49 d8       	lddpc	r8,80000200 <rqi+0x90>
80000190:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000194:	58 08       	cp.w	r8,0
80000196:	c1 41       	brne	800001be <rqi+0x4e>
		PA[priority] = *pth;
80000198:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000019c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001a0:	70 0a       	ld.w	r10,r8[0x0]
800001a2:	49 88       	lddpc	r8,80000200 <rqi+0x90>
800001a4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		PA[priority]->nexttcb = *pth;
800001a8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800001ac:	49 58       	lddpc	r8,80000200 <rqi+0x90>
800001ae:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800001b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800001b6:	72 09       	ld.w	r9,r9[0x0]
800001b8:	91 09       	st.w	r8[0x0],r9
		return 1;
800001ba:	30 18       	mov	r8,1
800001bc:	c1 d8       	rjmp	800001f6 <rqi+0x86>
	}
	else {
		(*pth)->nexttcb = PA[priority]->nexttcb;
800001be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001c2:	70 08       	ld.w	r8,r8[0x0]
800001c4:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800001c8:	48 e9       	lddpc	r9,80000200 <rqi+0x90>
800001ca:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800001ce:	72 09       	ld.w	r9,r9[0x0]
800001d0:	91 09       	st.w	r8[0x0],r9
		PA[priority]->nexttcb = *pth;
800001d2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800001d6:	48 b8       	lddpc	r8,80000200 <rqi+0x90>
800001d8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800001dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800001e0:	72 09       	ld.w	r9,r9[0x0]
800001e2:	91 09       	st.w	r8[0x0],r9
		PA[priority] = *pth;
800001e4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800001e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001ec:	70 0a       	ld.w	r10,r8[0x0]
800001ee:	48 58       	lddpc	r8,80000200 <rqi+0x90>
800001f0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		return 0;
800001f4:	30 08       	mov	r8,0
	}
}
800001f6:	10 9c       	mov	r12,r8
800001f8:	2f ed       	sub	sp,-8
800001fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800001fe:	00 00       	add	r0,r0
80000200:	00 00       	add	r0,r0
80000202:	05 68       	ld.uh	r8,--r2

80000204 <rqe>:
	@brief Extracts the given task from the ready queue by its priority.
	@param th Task structure (tcb structure).
	@return A status code (1 - queue is empty after extraction, 0 - otherwise).
*/
int rqe(ROSA_taskHandle_t ** pth)
{
80000204:	eb cd 40 80 	pushm	r7,lr
80000208:	1a 97       	mov	r7,sp
8000020a:	20 3d       	sub	sp,12
8000020c:	ef 4c ff f4 	st.w	r7[-12],r12
	ROSA_taskHandle_t * thTmp;
	
	uint8_t priority;
	
	priority = (*pth)->priority;
80000210:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000214:	70 08       	ld.w	r8,r8[0x0]
80000216:	f1 38 00 64 	ld.ub	r8,r8[100]
8000021a:	ef 68 ff ff 	st.b	r7[-1],r8
	thTmp = PA[priority];
8000021e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000222:	4a 28       	lddpc	r8,800002a8 <rqe+0xa4>
80000224:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000228:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if ((*pth)->nexttcb == *pth) 
8000022c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000230:	70 08       	ld.w	r8,r8[0x0]
80000232:	70 09       	ld.w	r9,r8[0x0]
80000234:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000238:	70 08       	ld.w	r8,r8[0x0]
8000023a:	10 39       	cp.w	r9,r8
8000023c:	c0 f1       	brne	8000025a <rqe+0x56>
	{
		PA[priority] = NULL;
8000023e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000242:	49 a8       	lddpc	r8,800002a8 <rqe+0xa4>
80000244:	30 0a       	mov	r10,0
80000246:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		return 1;
8000024a:	30 18       	mov	r8,1
8000024c:	c2 98       	rjmp	8000029e <rqe+0x9a>
	}
	else 
	{
		while (thTmp->nexttcb != (*pth)) 
		{
			thTmp = thTmp->nexttcb;
8000024e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000252:	70 08       	ld.w	r8,r8[0x0]
80000254:	ef 48 ff f8 	st.w	r7[-8],r8
80000258:	c0 28       	rjmp	8000025c <rqe+0x58>
		PA[priority] = NULL;
		return 1;
	}
	else 
	{
		while (thTmp->nexttcb != (*pth)) 
8000025a:	d7 03       	nop
8000025c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000260:	70 09       	ld.w	r9,r8[0x0]
80000262:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000266:	70 08       	ld.w	r8,r8[0x0]
80000268:	10 39       	cp.w	r9,r8
8000026a:	cf 21       	brne	8000024e <rqe+0x4a>
		{
			thTmp = thTmp->nexttcb;
		}
		
		if (PA[priority] == *pth) 
8000026c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000270:	48 e8       	lddpc	r8,800002a8 <rqe+0xa4>
80000272:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000276:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000027a:	70 08       	ld.w	r8,r8[0x0]
8000027c:	10 39       	cp.w	r9,r8
8000027e:	c0 81       	brne	8000028e <rqe+0x8a>
		{
			PA[priority] = thTmp;
80000280:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000284:	48 98       	lddpc	r8,800002a8 <rqe+0xa4>
80000286:	ee fa ff f8 	ld.w	r10,r7[-8]
8000028a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		}
		
		thTmp->nexttcb = (*pth)->nexttcb;
8000028e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000292:	70 08       	ld.w	r8,r8[0x0]
80000294:	70 09       	ld.w	r9,r8[0x0]
80000296:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000029a:	91 09       	st.w	r8[0x0],r9
		return 0;
8000029c:	30 08       	mov	r8,0
	}
}
8000029e:	10 9c       	mov	r12,r8
800002a0:	2f dd       	sub	sp,-12
800002a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800002a6:	00 00       	add	r0,r0
800002a8:	00 00       	add	r0,r0
800002aa:	05 68       	ld.uh	r8,--r2

800002ac <rqsearch>:
	@brief Search for the first non-empty highest priority queue.
	@return A status code (reserved).
	@todo Check for empty PA.
*/
int rqsearch(void)
{
800002ac:	eb cd 40 80 	pushm	r7,lr
800002b0:	1a 97       	mov	r7,sp
800002b2:	20 1d       	sub	sp,4
	int i = MAXNPRIO;
800002b4:	30 c8       	mov	r8,12
800002b6:	ef 48 ff fc 	st.w	r7[-4],r8
	
	while (PA[--i] == NULL) {
800002ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002be:	20 18       	sub	r8,1
800002c0:	ef 48 ff fc 	st.w	r7[-4],r8
800002c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002c8:	48 68       	lddpc	r8,800002e0 <rqsearch+0x34>
800002ca:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800002ce:	58 08       	cp.w	r8,0
800002d0:	cf 50       	breq	800002ba <rqsearch+0xe>
		;
	}
	
	return i;
800002d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800002d6:	10 9c       	mov	r12,r8
800002d8:	2f fd       	sub	sp,-4
800002da:	e3 cd 80 80 	ldm	sp++,r7,pc
800002de:	00 00       	add	r0,r0
800002e0:	00 00       	add	r0,r0
800002e2:	05 68       	ld.uh	r8,--r2

800002e4 <ROSA_init>:

void ROSA_init(void)
{
800002e4:	eb cd 40 80 	pushm	r7,lr
800002e8:	1a 97       	mov	r7,sp
800002ea:	20 1d       	sub	sp,4
	int i = 0;
800002ec:	30 08       	mov	r8,0
800002ee:	ef 48 ff fc 	st.w	r7[-4],r8
	systemTick = 0;
800002f2:	4a 0a       	lddpc	r10,80000370 <ROSA_init+0x8c>
800002f4:	30 08       	mov	r8,0
800002f6:	30 09       	mov	r9,0
800002f8:	f4 e9 00 00 	st.d	r10[0],r8
	
	//Do initialization of I/O drivers
	ledInit();									//LEDs
800002fc:	f0 1f 00 1e 	mcall	80000374 <ROSA_init+0x90>
	buttonInit();								//Buttons
80000300:	f0 1f 00 1e 	mcall	80000378 <ROSA_init+0x94>
	joystickInit();								//Joystick
80000304:	f0 1f 00 1e 	mcall	8000037c <ROSA_init+0x98>
	potInit();									//Potentiometer
80000308:	f0 1f 00 1e 	mcall	80000380 <ROSA_init+0x9c>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
8000030c:	e0 6a 1b 00 	mov	r10,6912
80000310:	ea 1a 00 b7 	orh	r10,0xb7
80000314:	49 cb       	lddpc	r11,80000384 <ROSA_init+0xa0>
80000316:	fe 7c 14 00 	mov	r12,-60416
8000031a:	f0 1f 00 1c 	mcall	80000388 <ROSA_init+0xa4>

	interruptInit();
8000031e:	f0 1f 00 1c 	mcall	8000038c <ROSA_init+0xa8>
	interruptEnable();
80000322:	f0 1f 00 1c 	mcall	80000390 <ROSA_init+0xac>
	timerInit(100);
80000326:	36 4c       	mov	r12,100
80000328:	f0 1f 00 1b 	mcall	80000394 <ROSA_init+0xb0>
	timerStart();
8000032c:	f0 1f 00 1b 	mcall	80000398 <ROSA_init+0xb4>
	
	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
80000330:	49 b8       	lddpc	r8,8000039c <ROSA_init+0xb8>
80000332:	30 09       	mov	r9,0
80000334:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
80000336:	49 b8       	lddpc	r8,800003a0 <ROSA_init+0xbc>
80000338:	30 09       	mov	r9,0
8000033a:	91 09       	st.w	r8[0x0],r9
	PREEMPTASK = NULL;
8000033c:	49 a8       	lddpc	r8,800003a4 <ROSA_init+0xc0>
8000033e:	30 09       	mov	r9,0
80000340:	91 09       	st.w	r8[0x0],r9
	
	for (i = 0; i < MAXNPRIO; i++) {
80000342:	30 08       	mov	r8,0
80000344:	ef 48 ff fc 	st.w	r7[-4],r8
80000348:	c0 c8       	rjmp	80000360 <ROSA_init+0x7c>
		PA[i] = NULL;
8000034a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000034e:	49 78       	lddpc	r8,800003a8 <ROSA_init+0xc4>
80000350:	30 0a       	mov	r10,0
80000352:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
	EXECTASK = NULL;
	PREEMPTASK = NULL;
	
	for (i = 0; i < MAXNPRIO; i++) {
80000356:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000035a:	2f f8       	sub	r8,-1
8000035c:	ef 48 ff fc 	st.w	r7[-4],r8
80000360:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000364:	58 b8       	cp.w	r8,11
80000366:	fe 9a ff f2 	brle	8000034a <ROSA_init+0x66>
		PA[i] = NULL;
	}
	
	//Initialize the timer to 1 ms period.
	
}
8000036a:	2f fd       	sub	sp,-4
8000036c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000370:	00 00       	add	r0,r0
80000372:	05 a4       	ld.ub	r4,r2[0x2]
80000374:	80 00       	ld.sh	r0,r0[0x0]
80000376:	0a 90       	mov	r0,r5
80000378:	80 00       	ld.sh	r0,r0[0x0]
8000037a:	08 e8       	st.h	--r4,r8
8000037c:	80 00       	ld.sh	r0,r0[0x0]
8000037e:	09 10       	ld.sh	r0,r4++
80000380:	80 00       	ld.sh	r0,r0[0x0]
80000382:	0b 5c       	ld.sh	r12,--r5
80000384:	80 00       	ld.sh	r0,r0[0x0]
80000386:	01 64       	ld.uh	r4,--r0
80000388:	80 00       	ld.sh	r0,r0[0x0]
8000038a:	0d 10       	ld.sh	r0,r6++
8000038c:	80 00       	ld.sh	r0,r0[0x0]
8000038e:	19 48       	ld.w	r8,--r12
80000390:	80 00       	ld.sh	r0,r0[0x0]
80000392:	19 6a       	ld.uh	r10,--r12
80000394:	80 00       	ld.sh	r0,r0[0x0]
80000396:	0e 34       	cp.w	r4,r7
80000398:	80 00       	ld.sh	r0,r0[0x0]
8000039a:	0e 62       	and	r2,r7
8000039c:	00 00       	add	r0,r0
8000039e:	05 64       	ld.uh	r4,--r2
800003a0:	00 00       	add	r0,r0
800003a2:	05 9c       	ld.ub	r12,r2[0x1]
800003a4:	00 00       	add	r0,r0
800003a6:	05 98       	ld.ub	r8,r2[0x1]
800003a8:	00 00       	add	r0,r0
800003aa:	05 68       	ld.uh	r8,--r2

800003ac <ROSA_tcbCreate>:

void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
800003ac:	eb cd 40 80 	pushm	r7,lr
800003b0:	1a 97       	mov	r7,sp
800003b2:	20 6d       	sub	sp,24
800003b4:	ef 4c ff f8 	st.w	r7[-8],r12
800003b8:	ef 4b ff f4 	st.w	r7[-12],r11
800003bc:	ef 4a ff f0 	st.w	r7[-16],r10
800003c0:	ef 49 ff ec 	st.w	r7[-20],r9
800003c4:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800003c8:	30 08       	mov	r8,0
800003ca:	ef 48 ff fc 	st.w	r7[-4],r8
800003ce:	c1 48       	rjmp	800003f6 <ROSA_tcbCreate+0x4a>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
800003d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800003d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003d8:	ee fa ff f4 	ld.w	r10,r7[-12]
800003dc:	f4 08 00 08 	add	r8,r10,r8
800003e0:	11 88       	ld.ub	r8,r8[0x0]
800003e2:	ee fa ff f8 	ld.w	r10,r7[-8]
800003e6:	f4 09 00 09 	add	r9,r10,r9
800003ea:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800003ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003f0:	2f f8       	sub	r8,-1
800003f2:	ef 48 ff fc 	st.w	r7[-4],r8
800003f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003fa:	58 38       	cp.w	r8,3
800003fc:	fe 9a ff ea 	brle	800003d0 <ROSA_tcbCreate+0x24>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
80000400:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000404:	30 09       	mov	r9,0
80000406:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
80000408:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000040c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000410:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
80000412:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000416:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000041a:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
8000041c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000420:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000424:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
80000426:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000042a:	a3 68       	lsl	r8,0x2
8000042c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000430:	10 09       	add	r9,r8
80000432:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000436:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
80000438:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000043c:	70 39       	ld.w	r9,r8[0xc]
8000043e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000442:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
80000444:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000448:	fc 19 00 1c 	movh	r9,0x1c
8000044c:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
8000044e:	ee fc ff f8 	ld.w	r12,r7[-8]
80000452:	f0 1f 00 03 	mcall	8000045c <ROSA_tcbCreate+0xb0>
}
80000456:	2f ad       	sub	sp,-24
80000458:	e3 cd 80 80 	ldm	sp++,r7,pc
8000045c:	80 00       	ld.sh	r0,r0[0x0]
8000045e:	06 9e       	mov	lr,r3

80000460 <ROSA_taskCreate>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

int16_t ROSA_taskCreate(ROSA_taskHandle_t ** pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
80000460:	eb cd 40 80 	pushm	r7,lr
80000464:	1a 97       	mov	r7,sp
80000466:	20 6d       	sub	sp,24
80000468:	ef 4c ff f8 	st.w	r7[-8],r12
8000046c:	ef 4b ff f4 	st.w	r7[-12],r11
80000470:	ef 4a ff f0 	st.w	r7[-16],r10
80000474:	ef 49 ff ec 	st.w	r7[-20],r9
80000478:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) calloc(stackSize, sizeof(uint32_t)); 
8000047c:	30 4b       	mov	r11,4
8000047e:	ee fc ff ec 	ld.w	r12,r7[-20]
80000482:	f0 1f 00 28 	mcall	80000520 <ROSA_taskCreate+0xc0>
80000486:	18 98       	mov	r8,r12
80000488:	ef 48 ff fc 	st.w	r7[-4],r8
	
	*pth = (ROSA_taskHandle_t *) malloc(sizeof(ROSA_taskHandle_t));			
8000048c:	37 4c       	mov	r12,116
8000048e:	f0 1f 00 26 	mcall	80000524 <ROSA_taskCreate+0xc4>
80000492:	18 98       	mov	r8,r12
80000494:	10 99       	mov	r9,r8
80000496:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000049a:	91 09       	st.w	r8[0x0],r9
	(*pth)->priority = priority;
8000049c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004a0:	70 09       	ld.w	r9,r8[0x0]
800004a2:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800004a6:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
800004aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004ae:	70 0a       	ld.w	r10,r8[0x0]
800004b0:	30 08       	mov	r8,0
800004b2:	30 09       	mov	r9,0
800004b4:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
800004b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004bc:	70 09       	ld.w	r9,r8[0x0]
800004be:	30 08       	mov	r8,0
800004c0:	f3 68 00 70 	st.b	r9[112],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
800004c4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800004c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800004cc:	72 0c       	ld.w	r12,r9[0x0]
800004ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
800004d2:	ee fa ff f0 	ld.w	r10,r7[-16]
800004d6:	ee fb ff f4 	ld.w	r11,r7[-12]
800004da:	f0 1f 00 14 	mcall	80000528 <ROSA_taskCreate+0xc8>
	
	rqi(pth);
800004de:	ee fc ff f8 	ld.w	r12,r7[-8]
800004e2:	f0 1f 00 13 	mcall	8000052c <ROSA_taskCreate+0xcc>
	
	if (EXECTASK != NULL) {
800004e6:	49 38       	lddpc	r8,80000530 <ROSA_taskCreate+0xd0>
800004e8:	70 08       	ld.w	r8,r8[0x0]
800004ea:	58 08       	cp.w	r8,0
800004ec:	c1 40       	breq	80000514 <ROSA_taskCreate+0xb4>
		if (EXECTASK->priority < priority) {
800004ee:	49 18       	lddpc	r8,80000530 <ROSA_taskCreate+0xd0>
800004f0:	70 08       	ld.w	r8,r8[0x0]
800004f2:	f1 38 00 64 	ld.ub	r8,r8[100]
800004f6:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800004fa:	f0 09 18 00 	cp.b	r9,r8
800004fe:	e0 88 00 0b 	brls	80000514 <ROSA_taskCreate+0xb4>
			PREEMPTASK = PA[priority];
80000502:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000506:	48 c8       	lddpc	r8,80000534 <ROSA_taskCreate+0xd4>
80000508:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000050c:	48 b8       	lddpc	r8,80000538 <ROSA_taskCreate+0xd8>
8000050e:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
80000510:	f0 1f 00 0b 	mcall	8000053c <ROSA_taskCreate+0xdc>
		}	
	}
	
	return 0;
80000514:	30 08       	mov	r8,0
}
80000516:	10 9c       	mov	r12,r8
80000518:	2f ad       	sub	sp,-24
8000051a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000051e:	00 00       	add	r0,r0
80000520:	80 00       	ld.sh	r0,r0[0x0]
80000522:	0f 6c       	ld.uh	r12,--r7
80000524:	80 00       	ld.sh	r0,r0[0x0]
80000526:	0f fc       	ld.ub	r12,r7[0x7]
80000528:	80 00       	ld.sh	r0,r0[0x0]
8000052a:	03 ac       	ld.ub	r12,r1[0x2]
8000052c:	80 00       	ld.sh	r0,r0[0x0]
8000052e:	01 70       	ld.ub	r0,--r0
80000530:	00 00       	add	r0,r0
80000532:	05 9c       	ld.ub	r12,r2[0x1]
80000534:	00 00       	add	r0,r0
80000536:	05 68       	ld.uh	r8,--r2
80000538:	00 00       	add	r0,r0
8000053a:	05 98       	ld.ub	r8,r2[0x1]
8000053c:	80 00       	ld.sh	r0,r0[0x0]
8000053e:	07 2a       	ld.uh	r10,r3++

80000540 <ROSA_taskDelete>:

int16_t ROSA_taskDelete(ROSA_taskHandle_t ** pth)
{	
80000540:	eb cd 40 80 	pushm	r7,lr
80000544:	1a 97       	mov	r7,sp
80000546:	20 2d       	sub	sp,8
80000548:	ef 4c ff f8 	st.w	r7[-8],r12
	rqe(pth);
8000054c:	ee fc ff f8 	ld.w	r12,r7[-8]
80000550:	f0 1f 00 3f 	mcall	8000064c <ROSA_taskDelete+0x10c>
	uint8_t priority;
	
	priority = (*pth)->priority;
80000554:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000558:	70 08       	ld.w	r8,r8[0x0]
8000055a:	f1 38 00 64 	ld.ub	r8,r8[100]
8000055e:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (EXECTASK == (*pth)) {
80000562:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000566:	70 09       	ld.w	r9,r8[0x0]
80000568:	4b a8       	lddpc	r8,80000650 <ROSA_taskDelete+0x110>
8000056a:	70 08       	ld.w	r8,r8[0x0]
8000056c:	10 39       	cp.w	r9,r8
8000056e:	c5 01       	brne	8000060e <ROSA_taskDelete+0xce>
		if (PA[priority] == NULL) {
80000570:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000574:	4b 88       	lddpc	r8,80000654 <ROSA_taskDelete+0x114>
80000576:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000057a:	58 08       	cp.w	r8,0
8000057c:	c2 91       	brne	800005ce <ROSA_taskDelete+0x8e>
			priority = rqsearch();
8000057e:	f0 1f 00 37 	mcall	80000658 <ROSA_taskDelete+0x118>
80000582:	18 98       	mov	r8,r12
80000584:	ef 68 ff ff 	st.b	r7[-1],r8
			PREEMPTASK = PA[priority];
80000588:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000058c:	4b 28       	lddpc	r8,80000654 <ROSA_taskDelete+0x114>
8000058e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000592:	4b 38       	lddpc	r8,8000065c <ROSA_taskDelete+0x11c>
80000594:	91 09       	st.w	r8[0x0],r9
			free( (*pth)->dataarea - (*pth)->datasize);
80000596:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000059a:	70 08       	ld.w	r8,r8[0x0]
8000059c:	70 39       	ld.w	r9,r8[0xc]
8000059e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005a2:	70 08       	ld.w	r8,r8[0x0]
800005a4:	70 48       	ld.w	r8,r8[0x10]
800005a6:	a3 68       	lsl	r8,0x2
800005a8:	5c 38       	neg	r8
800005aa:	f2 08 00 08 	add	r8,r9,r8
800005ae:	10 9c       	mov	r12,r8
800005b0:	f0 1f 00 2c 	mcall	80000660 <ROSA_taskDelete+0x120>
			free(*pth);
800005b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005b8:	70 08       	ld.w	r8,r8[0x0]
800005ba:	10 9c       	mov	r12,r8
800005bc:	f0 1f 00 29 	mcall	80000660 <ROSA_taskDelete+0x120>
			*pth = NULL;
800005c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005c4:	30 09       	mov	r9,0
800005c6:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
800005c8:	f0 1f 00 27 	mcall	80000664 <ROSA_taskDelete+0x124>
800005cc:	c2 18       	rjmp	8000060e <ROSA_taskDelete+0xce>
		}		
		else {
			PREEMPTASK = EXECTASK->nexttcb;
800005ce:	4a 18       	lddpc	r8,80000650 <ROSA_taskDelete+0x110>
800005d0:	70 08       	ld.w	r8,r8[0x0]
800005d2:	70 09       	ld.w	r9,r8[0x0]
800005d4:	4a 28       	lddpc	r8,8000065c <ROSA_taskDelete+0x11c>
800005d6:	91 09       	st.w	r8[0x0],r9
			free( (*pth)->dataarea - (*pth)->datasize);
800005d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005dc:	70 08       	ld.w	r8,r8[0x0]
800005de:	70 39       	ld.w	r9,r8[0xc]
800005e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005e4:	70 08       	ld.w	r8,r8[0x0]
800005e6:	70 48       	ld.w	r8,r8[0x10]
800005e8:	a3 68       	lsl	r8,0x2
800005ea:	5c 38       	neg	r8
800005ec:	f2 08 00 08 	add	r8,r9,r8
800005f0:	10 9c       	mov	r12,r8
800005f2:	f0 1f 00 1c 	mcall	80000660 <ROSA_taskDelete+0x120>
			free(*pth);
800005f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005fa:	70 08       	ld.w	r8,r8[0x0]
800005fc:	10 9c       	mov	r12,r8
800005fe:	f0 1f 00 19 	mcall	80000660 <ROSA_taskDelete+0x120>
			*pth = NULL;
80000602:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000606:	30 09       	mov	r9,0
80000608:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
8000060a:	f0 1f 00 17 	mcall	80000664 <ROSA_taskDelete+0x124>
		}
	}
	
	free( (*pth)->dataarea - (*pth)->datasize);
8000060e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000612:	70 08       	ld.w	r8,r8[0x0]
80000614:	70 39       	ld.w	r9,r8[0xc]
80000616:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000061a:	70 08       	ld.w	r8,r8[0x0]
8000061c:	70 48       	ld.w	r8,r8[0x10]
8000061e:	a3 68       	lsl	r8,0x2
80000620:	5c 38       	neg	r8
80000622:	f2 08 00 08 	add	r8,r9,r8
80000626:	10 9c       	mov	r12,r8
80000628:	f0 1f 00 0e 	mcall	80000660 <ROSA_taskDelete+0x120>
	free(*pth);
8000062c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000630:	70 08       	ld.w	r8,r8[0x0]
80000632:	10 9c       	mov	r12,r8
80000634:	f0 1f 00 0b 	mcall	80000660 <ROSA_taskDelete+0x120>
	*pth = NULL;
80000638:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000063c:	30 09       	mov	r9,0
8000063e:	91 09       	st.w	r8[0x0],r9
	
	return 0;
80000640:	30 08       	mov	r8,0
80000642:	10 9c       	mov	r12,r8
80000644:	2f ed       	sub	sp,-8
80000646:	e3 cd 80 80 	ldm	sp++,r7,pc
8000064a:	00 00       	add	r0,r0
8000064c:	80 00       	ld.sh	r0,r0[0x0]
8000064e:	02 04       	add	r4,r1
80000650:	00 00       	add	r0,r0
80000652:	05 9c       	ld.ub	r12,r2[0x1]
80000654:	00 00       	add	r0,r0
80000656:	05 68       	ld.uh	r8,--r2
80000658:	80 00       	ld.sh	r0,r0[0x0]
8000065a:	02 ac       	st.w	r1++,r12
8000065c:	00 00       	add	r0,r0
8000065e:	05 98       	ld.ub	r8,r2[0x1]
80000660:	80 00       	ld.sh	r0,r0[0x0]
80000662:	0f e4       	ld.ub	r4,r7[0x6]
80000664:	80 00       	ld.sh	r0,r0[0x0]
80000666:	07 2a       	ld.uh	r10,r3++

80000668 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80000668:	4b 5c       	lddpc	r12,8000073c <_yield+0xa>
	lda.w r11,EXECTASK
8000066a:	4b 6b       	lddpc	r11,80000740 <_yield+0xe>
	ld.w r12,r12[0x0]
8000066c:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
8000066e:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000670:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000672:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000674:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000678:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
8000067a:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
8000067c:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
8000067e:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80000682:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000684:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80000686:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000688:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
8000068a:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
8000068c:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
8000068e:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000690:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80000692:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000694:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000696:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000698:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
8000069a:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
8000069c:	1c 9f       	mov	pc,lr

8000069e <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
8000069e:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
800006a0:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
800006a2:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
800006a4:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
800006a8:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
800006ac:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
800006b0:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
800006b4:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
800006b8:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
800006bc:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
800006c0:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
800006c4:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
800006c8:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
800006ca:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
800006cc:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
800006ce:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
800006d0:	1c 9f       	mov	pc,lr

800006d2 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
800006d2:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
800006d4:	49 bc       	lddpc	r12,80000740 <_yield+0xe>
	ld.w r12,r12[0x0]
800006d6:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
800006d8:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
800006da:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
800006dc:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
800006de:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
800006e0:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
800006e2:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
800006e4:	33 40       	mov	r0,52
	add r0,r12
800006e6:	18 00       	add	r0,r12
	stmts r0,r0-r11
800006e8:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
800006ec:	1a 90       	mov	r0,sp
	st.w --sp,r0
800006ee:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800006f0:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
800006f4:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
800006f6:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
800006f8:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
800006fa:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
800006fc:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
800006fe:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80000700:	1c 9f       	mov	pc,lr

80000702 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000702:	49 0c       	lddpc	r12,80000740 <_yield+0xe>
	ld.w r12,r12[0x0]
80000704:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
80000706:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000708:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
8000070a:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
8000070e:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80000710:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80000712:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
80000714:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80000716:	33 40       	mov	r0,52
	add r0,r12
80000718:	18 00       	add	r0,r12
	ldmts r0,r0-r11
8000071a:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
8000071e:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000720:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80000722:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80000724:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000726:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80000728:	d6 13       	rets

8000072a <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
8000072a:	d4 01       	pushm	lr
	lda.w lr,_yield
8000072c:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000730:	d7 33       	scall

80000732 <_yield>:
_yield:
	call contextSave
80000732:	cd 0f       	rcall	800006d2 <contextSave>
	call scheduler
80000734:	f0 1f 00 04 	mcall	80000744 <_yield+0x12>
	call contextRestore
80000738:	ce 5f       	rcall	80000702 <contextRestore>
8000073a:	00 00       	add	r0,r0
8000073c:	00 00       	add	r0,r0
8000073e:	05 64       	ld.uh	r4,--r2
80000740:	00 00       	add	r0,r0
80000742:	05 9c       	ld.ub	r12,r2[0x1]
80000744:	80 00       	ld.sh	r0,r0[0x0]
80000746:	07 48       	ld.w	r8,--r3

80000748 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000748:	eb cd 40 80 	pushm	r7,lr
8000074c:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK == NULL) {
8000074e:	48 f8       	lddpc	r8,80000788 <scheduler+0x40>
80000750:	70 08       	ld.w	r8,r8[0x0]
80000752:	58 08       	cp.w	r8,0
80000754:	c1 11       	brne	80000776 <scheduler+0x2e>
		PA[EXECTASK->priority] = EXECTASK;
80000756:	48 e8       	lddpc	r8,8000078c <scheduler+0x44>
80000758:	70 08       	ld.w	r8,r8[0x0]
8000075a:	f1 38 00 64 	ld.ub	r8,r8[100]
8000075e:	10 99       	mov	r9,r8
80000760:	48 b8       	lddpc	r8,8000078c <scheduler+0x44>
80000762:	70 0a       	ld.w	r10,r8[0x0]
80000764:	48 b8       	lddpc	r8,80000790 <scheduler+0x48>
80000766:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		EXECTASK = EXECTASK->nexttcb;
8000076a:	48 98       	lddpc	r8,8000078c <scheduler+0x44>
8000076c:	70 08       	ld.w	r8,r8[0x0]
8000076e:	70 09       	ld.w	r9,r8[0x0]
80000770:	48 78       	lddpc	r8,8000078c <scheduler+0x44>
80000772:	91 09       	st.w	r8[0x0],r9
80000774:	c0 88       	rjmp	80000784 <scheduler+0x3c>
	}
	else {
		EXECTASK = PREEMPTASK;
80000776:	48 58       	lddpc	r8,80000788 <scheduler+0x40>
80000778:	70 09       	ld.w	r9,r8[0x0]
8000077a:	48 58       	lddpc	r8,8000078c <scheduler+0x44>
8000077c:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
8000077e:	48 38       	lddpc	r8,80000788 <scheduler+0x40>
80000780:	30 09       	mov	r9,0
80000782:	91 09       	st.w	r8[0x0],r9
	}
}
80000784:	e3 cd 80 80 	ldm	sp++,r7,pc
80000788:	00 00       	add	r0,r0
8000078a:	05 98       	ld.ub	r8,r2[0x1]
8000078c:	00 00       	add	r0,r0
8000078e:	05 9c       	ld.ub	r12,r2[0x1]
80000790:	00 00       	add	r0,r0
80000792:	05 68       	ld.uh	r8,--r2

80000794 <ROSA_startScheduler>:

void ROSA_startScheduler(void)
{
80000794:	eb cd 40 80 	pushm	r7,lr
80000798:	1a 97       	mov	r7,sp
8000079a:	20 1d       	sub	sp,4
	int i = MAXNPRIO;
8000079c:	30 c8       	mov	r8,12
8000079e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	while (PA[--i] == NULL) {
800007a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007a6:	20 18       	sub	r8,1
800007a8:	ef 48 ff fc 	st.w	r7[-4],r8
800007ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800007b0:	48 98       	lddpc	r8,800007d4 <ROSA_startScheduler+0x40>
800007b2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800007b6:	58 08       	cp.w	r8,0
800007b8:	cf 50       	breq	800007a2 <ROSA_startScheduler+0xe>
		;
	}
	
	TCBLIST = PA[i]->nexttcb;
800007ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
800007be:	48 68       	lddpc	r8,800007d4 <ROSA_startScheduler+0x40>
800007c0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800007c4:	70 09       	ld.w	r9,r8[0x0]
800007c6:	48 58       	lddpc	r8,800007d8 <ROSA_startScheduler+0x44>
800007c8:	91 09       	st.w	r8[0x0],r9
	
	ROSA_start();
800007ca:	f0 1f 00 05 	mcall	800007dc <ROSA_startScheduler+0x48>
}
800007ce:	2f fd       	sub	sp,-4
800007d0:	e3 cd 80 80 	ldm	sp++,r7,pc
800007d4:	00 00       	add	r0,r0
800007d6:	05 68       	ld.uh	r8,--r2
800007d8:	00 00       	add	r0,r0
800007da:	05 64       	ld.uh	r4,--r2
800007dc:	80 00       	ld.sh	r0,r0[0x0]
800007de:	06 68       	and	r8,r3

800007e0 <C.5.9537>:
800007e0:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

800007f0 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
800007f0:	eb cd 40 80 	pushm	r7,lr
800007f4:	1a 97       	mov	r7,sp
800007f6:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
800007f8:	fe 78 38 00 	mov	r8,-51200
800007fc:	ef 48 ff fc 	st.w	r7[-4],r8
	
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000800:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000804:	70 88       	ld.w	r8,r8[0x20]
80000806:	ef 48 ff f8 	st.w	r7[-8],r8
	if (sr & AVR32_TC_CPCS_MASK)
8000080a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000080e:	e2 18 00 10 	andl	r8,0x10,COH
80000812:	c0 f0       	breq	80000830 <timerISR+0x40>
	{
		systemTick++;
80000814:	48 98       	lddpc	r8,80000838 <timerISR+0x48>
80000816:	f0 ea 00 00 	ld.d	r10,r8[0]
8000081a:	30 18       	mov	r8,1
8000081c:	30 09       	mov	r9,0
8000081e:	f4 08 00 08 	add	r8,r10,r8
80000822:	f6 09 00 49 	adc	r9,r11,r9
80000826:	48 5a       	lddpc	r10,80000838 <timerISR+0x48>
80000828:	f4 e9 00 00 	st.d	r10[0],r8
		ROSA_yieldFromISR();
8000082c:	f0 1f 00 04 	mcall	8000083c <timerISR+0x4c>
			ledOff(LED2_GPIO);
		}*/
	}
	//timerClearInterrupt(); //Disabled until we know what it actually does
	
}
80000830:	2f ed       	sub	sp,-8
80000832:	e3 cd 40 80 	ldm	sp++,r7,lr
80000836:	d6 03       	rete
80000838:	00 00       	add	r0,r0
8000083a:	05 a4       	ld.ub	r4,r2[0x2]
8000083c:	80 00       	ld.sh	r0,r0[0x0]
8000083e:	01 40       	ld.w	r0,--r0

80000840 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80000840:	eb cd 40 80 	pushm	r7,lr
80000844:	1a 97       	mov	r7,sp
80000846:	20 7d       	sub	sp,28
80000848:	ef 4c ff e4 	st.w	r7[-28],r12
	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
8000084c:	4a 48       	lddpc	r8,800008dc <timerPeriodSet+0x9c>
8000084e:	ee ca 00 18 	sub	r10,r7,24
80000852:	10 9b       	mov	r11,r8
80000854:	f6 e8 00 00 	ld.d	r8,r11[0]
80000858:	f4 e9 00 00 	st.d	r10[0],r8
8000085c:	f6 e8 00 08 	ld.d	r8,r11[8]
80000860:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000864:	30 48       	mov	r8,4
80000866:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
8000086a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000086e:	20 18       	sub	r8,1
80000870:	a3 68       	lsl	r8,0x2
80000872:	ee 08 00 08 	add	r8,r7,r8
80000876:	f0 f9 ff e8 	ld.w	r9,r8[-24]
8000087a:	e0 68 1b 00 	mov	r8,6912
8000087e:	ea 18 00 b7 	orh	r8,0xb7
80000882:	f0 09 0c 08 	divs	r8,r8,r9
80000886:	10 99       	mov	r9,r8
80000888:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000088c:	b1 39       	mul	r9,r8
8000088e:	e0 68 4d d3 	mov	r8,19923
80000892:	ea 18 10 62 	orh	r8,0x1062
80000896:	f2 08 06 48 	mulu.d	r8,r9,r8
8000089a:	f2 08 16 06 	lsr	r8,r9,0x6
8000089e:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
800008a2:	ee fc ff fc 	ld.w	r12,r7[-4]
800008a6:	f0 1f 00 0f 	mcall	800008e0 <timerPeriodSet+0xa0>
	timerRCSet(rc);
800008aa:	ee fc ff f8 	ld.w	r12,r7[-8]
800008ae:	f0 1f 00 0e 	mcall	800008e4 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
800008b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800008b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008ba:	f2 08 02 4a 	mul	r10,r9,r8
800008be:	e0 68 9f 81 	mov	r8,40833
800008c2:	ea 18 16 5e 	orh	r8,0x165e
800008c6:	f4 08 04 48 	muls.d	r8,r10,r8
800008ca:	b5 49       	asr	r9,0x14
800008cc:	f4 08 14 1f 	asr	r8,r10,0x1f
800008d0:	f2 08 01 08 	sub	r8,r9,r8
}
800008d4:	10 9c       	mov	r12,r8
800008d6:	2f 9d       	sub	sp,-28
800008d8:	e3 cd 80 80 	ldm	sp++,r7,pc
800008dc:	80 00       	ld.sh	r0,r0[0x0]
800008de:	07 e0       	ld.ub	r0,r3[0x6]
800008e0:	80 00       	ld.sh	r0,r0[0x0]
800008e2:	0e a8       	st.w	r7++,r8
800008e4:	80 00       	ld.sh	r0,r0[0x0]
800008e6:	0e 92       	mov	r2,r7

800008e8 <buttonInit>:
800008e8:	eb cd 40 80 	pushm	r7,lr
800008ec:	1a 97       	mov	r7,sp
800008ee:	30 1b       	mov	r11,1
800008f0:	35 8c       	mov	r12,88
800008f2:	f0 1f 00 07 	mcall	8000090c <buttonInit+0x24>
800008f6:	30 1b       	mov	r11,1
800008f8:	35 5c       	mov	r12,85
800008fa:	f0 1f 00 05 	mcall	8000090c <buttonInit+0x24>
800008fe:	30 1b       	mov	r11,1
80000900:	35 2c       	mov	r12,82
80000902:	f0 1f 00 03 	mcall	8000090c <buttonInit+0x24>
80000906:	e3 cd 80 80 	ldm	sp++,r7,pc
8000090a:	00 00       	add	r0,r0
8000090c:	80 00       	ld.sh	r0,r0[0x0]
8000090e:	09 48       	ld.w	r8,--r4

80000910 <joystickInit>:
80000910:	eb cd 40 80 	pushm	r7,lr
80000914:	1a 97       	mov	r7,sp
80000916:	30 1b       	mov	r11,1
80000918:	31 bc       	mov	r12,27
8000091a:	f0 1f 00 0b 	mcall	80000944 <joystickInit+0x34>
8000091e:	30 1b       	mov	r11,1
80000920:	31 9c       	mov	r12,25
80000922:	f0 1f 00 09 	mcall	80000944 <joystickInit+0x34>
80000926:	30 1b       	mov	r11,1
80000928:	31 cc       	mov	r12,28
8000092a:	f0 1f 00 07 	mcall	80000944 <joystickInit+0x34>
8000092e:	30 1b       	mov	r11,1
80000930:	31 4c       	mov	r12,20
80000932:	f0 1f 00 05 	mcall	80000944 <joystickInit+0x34>
80000936:	30 1b       	mov	r11,1
80000938:	31 ac       	mov	r12,26
8000093a:	f0 1f 00 03 	mcall	80000944 <joystickInit+0x34>
8000093e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000942:	00 00       	add	r0,r0
80000944:	80 00       	ld.sh	r0,r0[0x0]
80000946:	09 48       	ld.w	r8,--r4

80000948 <gpioInit>:
80000948:	eb cd 40 80 	pushm	r7,lr
8000094c:	1a 97       	mov	r7,sp
8000094e:	20 7d       	sub	sp,28
80000950:	ef 4c ff ec 	st.w	r7[-20],r12
80000954:	ef 4b ff e8 	st.w	r7[-24],r11
80000958:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000095c:	a5 58       	asr	r8,0x5
8000095e:	ef 48 ff f4 	st.w	r7[-12],r8
80000962:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000966:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000096a:	ef 48 ff fc 	st.w	r7[-4],r8
8000096e:	30 19       	mov	r9,1
80000970:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000974:	f2 08 09 48 	lsl	r8,r9,r8
80000978:	ef 48 ff f8 	st.w	r7[-8],r8
8000097c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000980:	a9 68       	lsl	r8,0x8
80000982:	e0 28 f0 00 	sub	r8,61440
80000986:	ef 48 ff f0 	st.w	r7[-16],r8
8000098a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000098e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000992:	91 19       	st.w	r8[0x4],r9
80000994:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000998:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000099c:	91 69       	st.w	r8[0x18],r9
8000099e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009a6:	91 a9       	st.w	r8[0x28],r9
800009a8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800009ac:	ef 48 ff e4 	st.w	r7[-28],r8
800009b0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800009b4:	58 08       	cp.w	r8,0
800009b6:	c0 60       	breq	800009c2 <gpioInit+0x7a>
800009b8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800009bc:	58 18       	cp.w	r8,1
800009be:	c0 90       	breq	800009d0 <gpioInit+0x88>
800009c0:	c0 f8       	rjmp	800009de <gpioInit+0x96>
800009c2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009ca:	f1 49 00 44 	st.w	r8[68],r9
800009ce:	c0 e8       	rjmp	800009ea <gpioInit+0xa2>
800009d0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009d8:	f1 49 00 48 	st.w	r8[72],r9
800009dc:	c0 78       	rjmp	800009ea <gpioInit+0xa2>
800009de:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009e2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009e6:	f1 49 00 48 	st.w	r8[72],r9
800009ea:	2f 9d       	sub	sp,-28
800009ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800009f0 <gpioClear>:
800009f0:	eb cd 40 80 	pushm	r7,lr
800009f4:	1a 97       	mov	r7,sp
800009f6:	20 5d       	sub	sp,20
800009f8:	ef 4c ff ec 	st.w	r7[-20],r12
800009fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000a00:	a5 58       	asr	r8,0x5
80000a02:	ef 48 ff f4 	st.w	r7[-12],r8
80000a06:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000a0a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000a0e:	ef 48 ff fc 	st.w	r7[-4],r8
80000a12:	30 19       	mov	r9,1
80000a14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a18:	f2 08 09 48 	lsl	r8,r9,r8
80000a1c:	ef 48 ff f8 	st.w	r7[-8],r8
80000a20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a24:	a9 68       	lsl	r8,0x8
80000a26:	e0 28 f0 00 	sub	r8,61440
80000a2a:	ef 48 ff f0 	st.w	r7[-16],r8
80000a2e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a32:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000a36:	f1 49 00 58 	st.w	r8[88],r9
80000a3a:	2f bd       	sub	sp,-20
80000a3c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000a40 <gpioSet>:
80000a40:	eb cd 40 80 	pushm	r7,lr
80000a44:	1a 97       	mov	r7,sp
80000a46:	20 5d       	sub	sp,20
80000a48:	ef 4c ff ec 	st.w	r7[-20],r12
80000a4c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000a50:	a5 58       	asr	r8,0x5
80000a52:	ef 48 ff f4 	st.w	r7[-12],r8
80000a56:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000a5a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000a5e:	ef 48 ff fc 	st.w	r7[-4],r8
80000a62:	30 19       	mov	r9,1
80000a64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a68:	f2 08 09 48 	lsl	r8,r9,r8
80000a6c:	ef 48 ff f8 	st.w	r7[-8],r8
80000a70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a74:	a9 68       	lsl	r8,0x8
80000a76:	e0 28 f0 00 	sub	r8,61440
80000a7a:	ef 48 ff f0 	st.w	r7[-16],r8
80000a7e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a82:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000a86:	f1 49 00 54 	st.w	r8[84],r9
80000a8a:	2f bd       	sub	sp,-20
80000a8c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000a90 <ledInit>:
80000a90:	eb cd 40 80 	pushm	r7,lr
80000a94:	1a 97       	mov	r7,sp
80000a96:	20 9d       	sub	sp,36
80000a98:	49 e8       	lddpc	r8,80000b10 <ledInit+0x80>
80000a9a:	ee cb 00 24 	sub	r11,r7,36
80000a9e:	10 9a       	mov	r10,r8
80000aa0:	f4 e8 00 00 	ld.d	r8,r10[0]
80000aa4:	f6 e9 00 00 	st.d	r11[0],r8
80000aa8:	f4 e8 00 08 	ld.d	r8,r10[8]
80000aac:	f6 e9 00 08 	st.d	r11[8],r8
80000ab0:	f4 e8 00 10 	ld.d	r8,r10[16]
80000ab4:	f6 e9 00 10 	st.d	r11[16],r8
80000ab8:	f4 e8 00 18 	ld.d	r8,r10[24]
80000abc:	f6 e9 00 18 	st.d	r11[24],r8
80000ac0:	30 08       	mov	r8,0
80000ac2:	ef 48 ff fc 	st.w	r7[-4],r8
80000ac6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000aca:	a3 68       	lsl	r8,0x2
80000acc:	ee 08 00 08 	add	r8,r7,r8
80000ad0:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000ad4:	10 9c       	mov	r12,r8
80000ad6:	f0 1f 00 10 	mcall	80000b14 <ledInit+0x84>
80000ada:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ade:	a3 68       	lsl	r8,0x2
80000ae0:	ee 08 00 08 	add	r8,r7,r8
80000ae4:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000ae8:	30 0b       	mov	r11,0
80000aea:	10 9c       	mov	r12,r8
80000aec:	f0 1f 00 0b 	mcall	80000b18 <ledInit+0x88>
80000af0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000af4:	58 78       	cp.w	r8,7
80000af6:	5f 18       	srne	r8
80000af8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000afc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b00:	2f f8       	sub	r8,-1
80000b02:	ef 48 ff fc 	st.w	r7[-4],r8
80000b06:	58 09       	cp.w	r9,0
80000b08:	cd f1       	brne	80000ac6 <ledInit+0x36>
80000b0a:	2f 7d       	sub	sp,-36
80000b0c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b10:	80 00       	ld.sh	r0,r0[0x0]
80000b12:	1c 00       	add	r0,lr
80000b14:	80 00       	ld.sh	r0,r0[0x0]
80000b16:	0b 3c       	ld.ub	r12,r5++
80000b18:	80 00       	ld.sh	r0,r0[0x0]
80000b1a:	09 48       	ld.w	r8,--r4

80000b1c <ledOn>:
80000b1c:	eb cd 40 80 	pushm	r7,lr
80000b20:	1a 97       	mov	r7,sp
80000b22:	20 1d       	sub	sp,4
80000b24:	ef 4c ff fc 	st.w	r7[-4],r12
80000b28:	ee fc ff fc 	ld.w	r12,r7[-4]
80000b2c:	f0 1f 00 03 	mcall	80000b38 <ledOn+0x1c>
80000b30:	2f fd       	sub	sp,-4
80000b32:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b36:	00 00       	add	r0,r0
80000b38:	80 00       	ld.sh	r0,r0[0x0]
80000b3a:	09 f0       	ld.ub	r0,r4[0x7]

80000b3c <ledOff>:
80000b3c:	eb cd 40 80 	pushm	r7,lr
80000b40:	1a 97       	mov	r7,sp
80000b42:	20 1d       	sub	sp,4
80000b44:	ef 4c ff fc 	st.w	r7[-4],r12
80000b48:	ee fc ff fc 	ld.w	r12,r7[-4]
80000b4c:	f0 1f 00 03 	mcall	80000b58 <ledOff+0x1c>
80000b50:	2f fd       	sub	sp,-4
80000b52:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b56:	00 00       	add	r0,r0
80000b58:	80 00       	ld.sh	r0,r0[0x0]
80000b5a:	0a 40       	or	r0,r5

80000b5c <potInit>:
80000b5c:	d3 01       	pushm	r11-r12
80000b5e:	e0 6c 10 00 	mov	r12,4096
80000b62:	ea 1c ff ff 	orh	r12,0xffff
80000b66:	31 6b       	mov	r11,22
80000b68:	99 2b       	st.w	r12[0x8],r11
80000b6a:	99 6b       	st.w	r12[0x18],r11
80000b6c:	99 6b       	st.w	r12[0x18],r11
80000b6e:	e0 6c 3c 00 	mov	r12,15360
80000b72:	ea 1c ff ff 	orh	r12,0xffff
80000b76:	30 1b       	mov	r11,1
80000b78:	99 0b       	st.w	r12[0x0],r11
80000b7a:	e0 6b 0f 1f 	mov	r11,3871
80000b7e:	b1 6b       	lsl	r11,0x10
80000b80:	99 1b       	st.w	r12[0x4],r11
80000b82:	30 2b       	mov	r11,2
80000b84:	99 4b       	st.w	r12[0x10],r11
80000b86:	d3 02       	popm	r11-r12
80000b88:	1c 9f       	mov	pc,lr

80000b8a <potGetValue>:
80000b8a:	d1 81       	pushm	r10-r11
80000b8c:	e0 6c 3c 00 	mov	r12,15360
80000b90:	ea 1c ff ff 	orh	r12,0xffff
80000b94:	30 2b       	mov	r11,2
80000b96:	99 0b       	st.w	r12[0x0],r11

80000b98 <a1>:
80000b98:	78 7a       	ld.w	r10,r12[0x1c]
80000b9a:	16 7a       	tst	r10,r11
80000b9c:	cf e0       	breq	80000b98 <a1>
80000b9e:	78 dc       	ld.w	r12,r12[0x34]
80000ba0:	d1 82       	popm	r10-r11
80000ba2:	1c 9f       	mov	pc,lr

80000ba4 <usartReset>:
80000ba4:	eb cd 40 80 	pushm	r7,lr
80000ba8:	1a 97       	mov	r7,sp
80000baa:	20 3d       	sub	sp,12
80000bac:	ef 4c ff f8 	st.w	r7[-8],r12
80000bb0:	f0 1f 00 16 	mcall	80000c08 <usartReset+0x64>
80000bb4:	18 98       	mov	r8,r12
80000bb6:	ef 48 ff fc 	st.w	r7[-4],r8
80000bba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bbe:	58 08       	cp.w	r8,0
80000bc0:	c0 30       	breq	80000bc6 <usartReset+0x22>
80000bc2:	f0 1f 00 13 	mcall	80000c0c <usartReset+0x68>
80000bc6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bca:	3f f8       	mov	r8,-1
80000bcc:	93 38       	st.w	r9[0xc],r8
80000bce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bd2:	70 58       	ld.w	r8,r8[0x14]
80000bd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bd8:	58 08       	cp.w	r8,0
80000bda:	c0 30       	breq	80000be0 <usartReset+0x3c>
80000bdc:	f0 1f 00 0d 	mcall	80000c10 <usartReset+0x6c>
80000be0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000be4:	30 08       	mov	r8,0
80000be6:	93 18       	st.w	r9[0x4],r8
80000be8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bec:	30 08       	mov	r8,0
80000bee:	93 98       	st.w	r9[0x24],r8
80000bf0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bf4:	30 08       	mov	r8,0
80000bf6:	93 a8       	st.w	r9[0x28],r8
80000bf8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bfc:	ea 68 61 0c 	mov	r8,680204
80000c00:	93 08       	st.w	r9[0x0],r8
80000c02:	2f dd       	sub	sp,-12
80000c04:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c08:	80 00       	ld.sh	r0,r0[0x0]
80000c0a:	19 6e       	ld.uh	lr,--r12
80000c0c:	80 00       	ld.sh	r0,r0[0x0]
80000c0e:	19 66       	ld.uh	r6,--r12
80000c10:	80 00       	ld.sh	r0,r0[0x0]
80000c12:	19 6a       	ld.uh	r10,--r12

80000c14 <usartSetBaudrate>:
80000c14:	eb cd 40 80 	pushm	r7,lr
80000c18:	1a 97       	mov	r7,sp
80000c1a:	20 bd       	sub	sp,44
80000c1c:	ef 4c ff ec 	st.w	r7[-20],r12
80000c20:	ef 4b ff e8 	st.w	r7[-24],r11
80000c24:	ef 4a ff e4 	st.w	r7[-28],r10
80000c28:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000c2c:	f0 09 15 04 	lsl	r9,r8,0x4
80000c30:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c34:	10 39       	cp.w	r9,r8
80000c36:	e0 8b 00 06 	brhi	80000c42 <usartSetBaudrate+0x2e>
80000c3a:	31 09       	mov	r9,16
80000c3c:	ef 49 ff d4 	st.w	r7[-44],r9
80000c40:	c0 48       	rjmp	80000c48 <usartSetBaudrate+0x34>
80000c42:	30 88       	mov	r8,8
80000c44:	ef 48 ff d4 	st.w	r7[-44],r8
80000c48:	ee f9 ff d4 	ld.w	r9,r7[-44]
80000c4c:	ef 49 ff f0 	st.w	r7[-16],r9
80000c50:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c54:	f0 0a 15 03 	lsl	r10,r8,0x3
80000c58:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000c5c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000c60:	f2 08 02 48 	mul	r8,r9,r8
80000c64:	a1 98       	lsr	r8,0x1
80000c66:	10 0a       	add	r10,r8
80000c68:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000c6c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000c70:	f2 08 02 48 	mul	r8,r9,r8
80000c74:	f4 08 0d 08 	divu	r8,r10,r8
80000c78:	ef 48 ff f4 	st.w	r7[-12],r8
80000c7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c80:	a3 98       	lsr	r8,0x3
80000c82:	ef 48 ff f8 	st.w	r7[-8],r8
80000c86:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c8a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000c8e:	ef 48 ff fc 	st.w	r7[-4],r8
80000c92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c96:	58 08       	cp.w	r8,0
80000c98:	c0 70       	breq	80000ca6 <usartSetBaudrate+0x92>
80000c9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c9e:	e0 48 ff ff 	cp.w	r8,65535
80000ca2:	e0 88 00 06 	brls	80000cae <usartSetBaudrate+0x9a>
80000ca6:	30 18       	mov	r8,1
80000ca8:	ef 48 ff d8 	st.w	r7[-40],r8
80000cac:	c2 c8       	rjmp	80000d04 <usartSetBaudrate+0xf0>
80000cae:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000cb2:	70 18       	ld.w	r8,r8[0x4]
80000cb4:	10 99       	mov	r9,r8
80000cb6:	e4 19 ff f7 	andh	r9,0xfff7
80000cba:	e0 19 fe cf 	andl	r9,0xfecf
80000cbe:	ef 49 ff dc 	st.w	r7[-36],r9
80000cc2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cc6:	59 08       	cp.w	r8,16
80000cc8:	c0 60       	breq	80000cd4 <usartSetBaudrate+0xc0>
80000cca:	e8 68 00 00 	mov	r8,524288
80000cce:	ef 48 ff e0 	st.w	r7[-32],r8
80000cd2:	c0 48       	rjmp	80000cda <usartSetBaudrate+0xc6>
80000cd4:	30 09       	mov	r9,0
80000cd6:	ef 49 ff e0 	st.w	r7[-32],r9
80000cda:	ee f9 ff dc 	ld.w	r9,r7[-36]
80000cde:	ee f8 ff e0 	ld.w	r8,r7[-32]
80000ce2:	10 49       	or	r9,r8
80000ce4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ce8:	91 19       	st.w	r8[0x4],r9
80000cea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cee:	f0 09 15 10 	lsl	r9,r8,0x10
80000cf2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cf6:	10 49       	or	r9,r8
80000cf8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000cfc:	91 89       	st.w	r8[0x20],r9
80000cfe:	30 09       	mov	r9,0
80000d00:	ef 49 ff d8 	st.w	r7[-40],r9
80000d04:	ee f8 ff d8 	ld.w	r8,r7[-40]
80000d08:	10 9c       	mov	r12,r8
80000d0a:	2f 5d       	sub	sp,-44
80000d0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000d10 <usartInit>:
80000d10:	eb cd 40 80 	pushm	r7,lr
80000d14:	1a 97       	mov	r7,sp
80000d16:	20 4d       	sub	sp,16
80000d18:	ef 4c ff f8 	st.w	r7[-8],r12
80000d1c:	ef 4b ff f4 	st.w	r7[-12],r11
80000d20:	ef 4a ff f0 	st.w	r7[-16],r10
80000d24:	fe 78 10 00 	mov	r8,-61440
80000d28:	ef 48 ff fc 	st.w	r7[-4],r8
80000d2c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000d30:	30 18       	mov	r8,1
80000d32:	93 28       	st.w	r9[0x8],r8
80000d34:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000d38:	30 28       	mov	r8,2
80000d3a:	93 28       	st.w	r9[0x8],r8
80000d3c:	ee fc ff f8 	ld.w	r12,r7[-8]
80000d40:	f0 1f 00 3b 	mcall	80000e2c <usartInit+0x11c>
80000d44:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000d48:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d4c:	70 08       	ld.w	r8,r8[0x0]
80000d4e:	12 9a       	mov	r10,r9
80000d50:	10 9b       	mov	r11,r8
80000d52:	ee fc ff f8 	ld.w	r12,r7[-8]
80000d56:	f0 1f 00 37 	mcall	80000e30 <usartInit+0x120>
80000d5a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d5e:	11 c9       	ld.ub	r9,r8[0x4]
80000d60:	30 98       	mov	r8,9
80000d62:	f0 09 18 00 	cp.b	r9,r8
80000d66:	c0 a1       	brne	80000d7a <usartInit+0x6a>
80000d68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d6c:	70 18       	ld.w	r8,r8[0x4]
80000d6e:	10 99       	mov	r9,r8
80000d70:	b1 b9       	sbr	r9,0x11
80000d72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d76:	91 19       	st.w	r8[0x4],r9
80000d78:	c0 d8       	rjmp	80000d92 <usartInit+0x82>
80000d7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d7e:	70 19       	ld.w	r9,r8[0x4]
80000d80:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d84:	11 c8       	ld.ub	r8,r8[0x4]
80000d86:	20 58       	sub	r8,5
80000d88:	a7 68       	lsl	r8,0x6
80000d8a:	10 49       	or	r9,r8
80000d8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d90:	91 19       	st.w	r8[0x4],r9
80000d92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d96:	70 1a       	ld.w	r10,r8[0x4]
80000d98:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d9c:	11 d8       	ld.ub	r8,r8[0x5]
80000d9e:	f0 09 15 09 	lsl	r9,r8,0x9
80000da2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000da6:	f1 38 00 08 	ld.ub	r8,r8[8]
80000daa:	af 68       	lsl	r8,0xe
80000dac:	f3 e8 10 08 	or	r8,r9,r8
80000db0:	f5 e8 10 09 	or	r9,r10,r8
80000db4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000db8:	91 19       	st.w	r8[0x4],r9
80000dba:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000dbe:	90 39       	ld.sh	r9,r8[0x6]
80000dc0:	30 28       	mov	r8,2
80000dc2:	f0 09 19 00 	cp.h	r9,r8
80000dc6:	e0 88 00 14 	brls	80000dee <usartInit+0xde>
80000dca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dce:	70 18       	ld.w	r8,r8[0x4]
80000dd0:	10 99       	mov	r9,r8
80000dd2:	ad b9       	sbr	r9,0xd
80000dd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dd8:	91 19       	st.w	r8[0x4],r9
80000dda:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000dde:	90 38       	ld.sh	r8,r8[0x6]
80000de0:	5c 78       	castu.h	r8
80000de2:	20 28       	sub	r8,2
80000de4:	10 99       	mov	r9,r8
80000de6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dea:	91 a9       	st.w	r8[0x28],r9
80000dec:	c0 d8       	rjmp	80000e06 <usartInit+0xf6>
80000dee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000df2:	70 19       	ld.w	r9,r8[0x4]
80000df4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000df8:	90 38       	ld.sh	r8,r8[0x6]
80000dfa:	5c 78       	castu.h	r8
80000dfc:	ad 68       	lsl	r8,0xc
80000dfe:	10 49       	or	r9,r8
80000e00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e04:	91 19       	st.w	r8[0x4],r9
80000e06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e0a:	70 18       	ld.w	r8,r8[0x4]
80000e0c:	10 99       	mov	r9,r8
80000e0e:	e0 19 ff f0 	andl	r9,0xfff0
80000e12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e16:	91 19       	st.w	r8[0x4],r9
80000e18:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e1c:	35 08       	mov	r8,80
80000e1e:	93 08       	st.w	r9[0x0],r8
80000e20:	30 08       	mov	r8,0
80000e22:	10 9c       	mov	r12,r8
80000e24:	2f cd       	sub	sp,-16
80000e26:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e2a:	00 00       	add	r0,r0
80000e2c:	80 00       	ld.sh	r0,r0[0x0]
80000e2e:	0b a4       	ld.ub	r4,r5[0x2]
80000e30:	80 00       	ld.sh	r0,r0[0x0]
80000e32:	0c 14       	sub	r4,r6

80000e34 <timerInit>:
80000e34:	d5 01       	pushm	r11,lr
80000e36:	d2 01       	pushm	r12
80000e38:	f0 1f 00 28 	mcall	80000ed8 <timerClearInterrupt+0x10>
80000e3c:	f0 1f 00 28 	mcall	80000edc <timerClearInterrupt+0x14>
80000e40:	e0 6c 38 00 	mov	r12,14336
80000e44:	ea 1c ff ff 	orh	r12,0xffff
80000e48:	e0 6b c0 00 	mov	r11,49152
80000e4c:	ea 1b 00 00 	orh	r11,0x0
80000e50:	99 1b       	st.w	r12[0x4],r11
80000e52:	30 1b       	mov	r11,1
80000e54:	a5 6b       	lsl	r11,0x4
80000e56:	99 9b       	st.w	r12[0x24],r11
80000e58:	d2 02       	popm	r12
80000e5a:	f0 1f 00 22 	mcall	80000ee0 <timerClearInterrupt+0x18>
80000e5e:	d5 02       	popm	r11,lr
80000e60:	1c 9f       	mov	pc,lr

80000e62 <timerReset>:
80000e62:	d3 01       	pushm	r11-r12
80000e64:	e0 6c 38 00 	mov	r12,14336
80000e68:	ea 1c ff ff 	orh	r12,0xffff
80000e6c:	30 5b       	mov	r11,5
80000e6e:	99 0b       	st.w	r12[0x0],r11
80000e70:	e0 6b 00 08 	mov	r11,8
80000e74:	ea 1b 00 00 	orh	r11,0x0
80000e78:	76 0b       	ld.w	r11,r11[0x0]
80000e7a:	99 7b       	st.w	r12[0x1c],r11
80000e7c:	d3 02       	popm	r11-r12
80000e7e:	1c 9f       	mov	pc,lr

80000e80 <timerStop>:
80000e80:	d3 01       	pushm	r11-r12
80000e82:	e0 6c 38 00 	mov	r12,14336
80000e86:	ea 1c ff ff 	orh	r12,0xffff
80000e8a:	30 2b       	mov	r11,2
80000e8c:	99 0b       	st.w	r12[0x0],r11
80000e8e:	d3 02       	popm	r11-r12
80000e90:	1c 9f       	mov	pc,lr

80000e92 <timerRCSet>:
80000e92:	d3 01       	pushm	r11-r12
80000e94:	49 4b       	lddpc	r11,80000ee4 <timerClearInterrupt+0x1c>
80000e96:	97 0c       	st.w	r11[0x0],r12
80000e98:	e0 6c 38 00 	mov	r12,14336
80000e9c:	ea 1c ff ff 	orh	r12,0xffff
80000ea0:	76 0b       	ld.w	r11,r11[0x0]
80000ea2:	99 7b       	st.w	r12[0x1c],r11
80000ea4:	d3 02       	popm	r11-r12
80000ea6:	1c 9f       	mov	pc,lr

80000ea8 <timerPrescaleSet>:
80000ea8:	d3 81       	pushm	r10-r12
80000eaa:	49 0b       	lddpc	r11,80000ee8 <timerClearInterrupt+0x20>
80000eac:	97 0c       	st.w	r11[0x0],r12
80000eae:	e0 6c 38 00 	mov	r12,14336
80000eb2:	ea 1c ff ff 	orh	r12,0xffff
80000eb6:	78 1a       	ld.w	r10,r12[0x4]
80000eb8:	3f 8b       	mov	r11,-8
80000eba:	16 6a       	and	r10,r11
80000ebc:	48 bb       	lddpc	r11,80000ee8 <timerClearInterrupt+0x20>
80000ebe:	76 0b       	ld.w	r11,r11[0x0]
80000ec0:	14 4b       	or	r11,r10
80000ec2:	99 1b       	st.w	r12[0x4],r11
80000ec4:	d3 82       	popm	r10-r12
80000ec6:	1c 9f       	mov	pc,lr

80000ec8 <timerClearInterrupt>:
80000ec8:	d2 01       	pushm	r12
80000eca:	e0 6c 38 00 	mov	r12,14336
80000ece:	ea 1c ff ff 	orh	r12,0xffff
80000ed2:	78 8c       	ld.w	r12,r12[0x20]
80000ed4:	d2 02       	popm	r12
80000ed6:	1c 9f       	mov	pc,lr
80000ed8:	80 00       	ld.sh	r0,r0[0x0]
80000eda:	19 66       	ld.uh	r6,--r12
80000edc:	80 00       	ld.sh	r0,r0[0x0]
80000ede:	0e c8       	st.b	r7++,r8
80000ee0:	80 00       	ld.sh	r0,r0[0x0]
80000ee2:	08 40       	or	r0,r4
80000ee4:	00 00       	add	r0,r0
80000ee6:	00 08       	add	r8,r0
80000ee8:	00 00       	add	r0,r0
80000eea:	00 0c       	add	r12,r0

80000eec <_stext>:
80000eec:	49 7d       	lddpc	sp,80000f48 <udata_end+0x4>
80000eee:	49 80       	lddpc	r0,80000f4c <udata_end+0x8>
80000ef0:	1a d0       	st.w	--sp,r0
80000ef2:	e5 cd 20 00 	ldmts	sp,sp
80000ef6:	1b 00       	ld.w	r0,sp++
80000ef8:	49 60       	lddpc	r0,80000f50 <udata_end+0xc>
80000efa:	e3 b0 00 01 	mtsr	0x4,r0
80000efe:	d5 53       	csrf	0x15
80000f00:	e0 6c 0c 00 	mov	r12,3072
80000f04:	ea 1c ff ff 	orh	r12,0xffff
80000f08:	e0 6b 01 07 	mov	r11,263
80000f0c:	99 ab       	st.w	r12[0x28],r11
80000f0e:	30 4b       	mov	r11,4
80000f10:	99 0b       	st.w	r12[0x0],r11
80000f12:	e0 6a 00 80 	mov	r10,128

80000f16 <xw8>:
80000f16:	79 5b       	ld.w	r11,r12[0x54]
80000f18:	14 7b       	tst	r11,r10
80000f1a:	cf e0       	breq	80000f16 <xw8>
80000f1c:	30 5b       	mov	r11,5
80000f1e:	99 0b       	st.w	r12[0x0],r11

80000f20 <idata_>:
80000f20:	48 d0       	lddpc	r0,80000f54 <udata_end+0x10>
80000f22:	48 e1       	lddpc	r1,80000f58 <udata_end+0x14>
80000f24:	02 30       	cp.w	r0,r1
80000f26:	c0 62       	brcc	80000f32 <idata_end>
80000f28:	48 d2       	lddpc	r2,80000f5c <udata_end+0x18>

80000f2a <idata_loop>:
80000f2a:	05 04       	ld.w	r4,r2++
80000f2c:	00 a4       	st.w	r0++,r4
80000f2e:	02 30       	cp.w	r0,r1
80000f30:	cf d3       	brcs	80000f2a <idata_loop>

80000f32 <idata_end>:
80000f32:	48 c0       	lddpc	r0,80000f60 <udata_end+0x1c>
80000f34:	48 c1       	lddpc	r1,80000f64 <udata_end+0x20>
80000f36:	02 30       	cp.w	r0,r1
80000f38:	c0 62       	brcc	80000f44 <udata_end>
80000f3a:	30 02       	mov	r2,0
80000f3c:	30 03       	mov	r3,0

80000f3e <udata_loop>:
80000f3e:	00 a2       	st.w	r0++,r2
80000f40:	02 30       	cp.w	r0,r1
80000f42:	cf e3       	brcs	80000f3e <udata_loop>

80000f44 <udata_end>:
80000f44:	48 9f       	lddpc	pc,80000f68 <udata_end+0x24>
80000f46:	00 00       	add	r0,r0
80000f48:	00 01       	add	r1,r0
80000f4a:	00 00       	add	r0,r0
80000f4c:	00 00       	add	r0,r0
80000f4e:	f0 00       	*unknown*
80000f50:	80 00       	ld.sh	r0,r0[0x0]
80000f52:	18 00       	add	r0,r12
80000f54:	00 00       	add	r0,r0
80000f56:	00 08       	add	r8,r0
80000f58:	00 00       	add	r0,r0
80000f5a:	05 18       	ld.sh	r8,r2++
80000f5c:	80 00       	ld.sh	r0,r0[0x0]
80000f5e:	1c 88       	andn	r8,lr
80000f60:	00 00       	add	r0,r0
80000f62:	05 18       	ld.sh	r8,r2++
80000f64:	00 00       	add	r0,r0
80000f66:	05 b0       	ld.ub	r0,r2[0x3]
80000f68:	80 00       	ld.sh	r0,r0[0x0]
80000f6a:	00 dc       	st.w	--r0,r12

80000f6c <calloc>:
80000f6c:	d4 01       	pushm	lr
80000f6e:	48 48       	lddpc	r8,80000f7c <calloc+0x10>
80000f70:	16 9a       	mov	r10,r11
80000f72:	18 9b       	mov	r11,r12
80000f74:	70 0c       	ld.w	r12,r8[0x0]
80000f76:	f0 1f 00 03 	mcall	80000f80 <calloc+0x14>
80000f7a:	d8 02       	popm	pc
80000f7c:	00 00       	add	r0,r0
80000f7e:	01 00       	ld.w	r0,r0++
80000f80:	80 00       	ld.sh	r0,r0[0x0]
80000f82:	0f 84       	ld.ub	r4,r7[0x0]

80000f84 <_calloc_r>:
80000f84:	d4 21       	pushm	r4-r7,lr
80000f86:	f4 0b 02 4b 	mul	r11,r10,r11
80000f8a:	f0 1f 00 15 	mcall	80000fdc <_calloc_r+0x58>
80000f8e:	18 97       	mov	r7,r12
80000f90:	c2 30       	breq	80000fd6 <_calloc_r+0x52>
80000f92:	f8 fa ff fc 	ld.w	r10,r12[-4]
80000f96:	e0 1a ff fc 	andl	r10,0xfffc
80000f9a:	20 4a       	sub	r10,4
80000f9c:	e0 4a 00 24 	cp.w	r10,36
80000fa0:	e0 8b 00 18 	brhi	80000fd0 <_calloc_r+0x4c>
80000fa4:	18 98       	mov	r8,r12
80000fa6:	59 3a       	cp.w	r10,19
80000fa8:	e0 88 00 0f 	brls	80000fc6 <_calloc_r+0x42>
80000fac:	30 09       	mov	r9,0
80000fae:	10 a9       	st.w	r8++,r9
80000fb0:	10 a9       	st.w	r8++,r9
80000fb2:	59 ba       	cp.w	r10,27
80000fb4:	e0 88 00 09 	brls	80000fc6 <_calloc_r+0x42>
80000fb8:	10 a9       	st.w	r8++,r9
80000fba:	10 a9       	st.w	r8++,r9
80000fbc:	e0 4a 00 24 	cp.w	r10,36
80000fc0:	c0 31       	brne	80000fc6 <_calloc_r+0x42>
80000fc2:	10 a9       	st.w	r8++,r9
80000fc4:	10 a9       	st.w	r8++,r9
80000fc6:	30 09       	mov	r9,0
80000fc8:	10 a9       	st.w	r8++,r9
80000fca:	91 19       	st.w	r8[0x4],r9
80000fcc:	91 09       	st.w	r8[0x0],r9
80000fce:	c0 48       	rjmp	80000fd6 <_calloc_r+0x52>
80000fd0:	30 0b       	mov	r11,0
80000fd2:	f0 1f 00 04 	mcall	80000fe0 <_calloc_r+0x5c>
80000fd6:	0e 9c       	mov	r12,r7
80000fd8:	d8 22       	popm	r4-r7,pc
80000fda:	00 00       	add	r0,r0
80000fdc:	80 00       	ld.sh	r0,r0[0x0]
80000fde:	10 14       	sub	r4,r8
80000fe0:	80 00       	ld.sh	r0,r0[0x0]
80000fe2:	14 64       	and	r4,r10

80000fe4 <free>:
80000fe4:	d4 01       	pushm	lr
80000fe6:	48 48       	lddpc	r8,80000ff4 <free+0x10>
80000fe8:	18 9b       	mov	r11,r12
80000fea:	70 0c       	ld.w	r12,r8[0x0]
80000fec:	f0 1f 00 03 	mcall	80000ff8 <free+0x14>
80000ff0:	d8 02       	popm	pc
80000ff2:	00 00       	add	r0,r0
80000ff4:	00 00       	add	r0,r0
80000ff6:	01 00       	ld.w	r0,r0++
80000ff8:	80 00       	ld.sh	r0,r0[0x0]
80000ffa:	15 94       	ld.ub	r4,r10[0x1]

80000ffc <malloc>:
80000ffc:	d4 01       	pushm	lr
80000ffe:	48 48       	lddpc	r8,8000100c <malloc+0x10>
80001000:	18 9b       	mov	r11,r12
80001002:	70 0c       	ld.w	r12,r8[0x0]
80001004:	f0 1f 00 03 	mcall	80001010 <malloc+0x14>
80001008:	d8 02       	popm	pc
8000100a:	00 00       	add	r0,r0
8000100c:	00 00       	add	r0,r0
8000100e:	01 00       	ld.w	r0,r0++
80001010:	80 00       	ld.sh	r0,r0[0x0]
80001012:	10 14       	sub	r4,r8

80001014 <_malloc_r>:
80001014:	d4 31       	pushm	r0-r7,lr
80001016:	f6 c8 ff f5 	sub	r8,r11,-11
8000101a:	18 95       	mov	r5,r12
8000101c:	10 97       	mov	r7,r8
8000101e:	e0 17 ff f8 	andl	r7,0xfff8
80001022:	59 68       	cp.w	r8,22
80001024:	f9 b7 08 10 	movls	r7,16
80001028:	16 37       	cp.w	r7,r11
8000102a:	5f 38       	srlo	r8
8000102c:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001030:	c0 50       	breq	8000103a <_malloc_r+0x26>
80001032:	30 c8       	mov	r8,12
80001034:	99 38       	st.w	r12[0xc],r8
80001036:	e0 8f 01 f3 	bral	8000141c <_malloc_r+0x408>
8000103a:	f0 1f 00 50 	mcall	80001178 <_malloc_r+0x164>
8000103e:	e0 47 01 f7 	cp.w	r7,503
80001042:	e0 8b 00 1c 	brhi	8000107a <_malloc_r+0x66>
80001046:	ee 03 16 03 	lsr	r3,r7,0x3
8000104a:	4c d8       	lddpc	r8,8000117c <_malloc_r+0x168>
8000104c:	f0 03 00 38 	add	r8,r8,r3<<0x3
80001050:	70 36       	ld.w	r6,r8[0xc]
80001052:	10 36       	cp.w	r6,r8
80001054:	c0 61       	brne	80001060 <_malloc_r+0x4c>
80001056:	ec c8 ff f8 	sub	r8,r6,-8
8000105a:	70 36       	ld.w	r6,r8[0xc]
8000105c:	10 36       	cp.w	r6,r8
8000105e:	c0 c0       	breq	80001076 <_malloc_r+0x62>
80001060:	6c 18       	ld.w	r8,r6[0x4]
80001062:	e0 18 ff fc 	andl	r8,0xfffc
80001066:	6c 3a       	ld.w	r10,r6[0xc]
80001068:	ec 08 00 09 	add	r9,r6,r8
8000106c:	0a 9c       	mov	r12,r5
8000106e:	6c 28       	ld.w	r8,r6[0x8]
80001070:	95 28       	st.w	r10[0x8],r8
80001072:	91 3a       	st.w	r8[0xc],r10
80001074:	c4 68       	rjmp	80001100 <_malloc_r+0xec>
80001076:	2f e3       	sub	r3,-2
80001078:	c4 c8       	rjmp	80001110 <_malloc_r+0xfc>
8000107a:	ee 03 16 09 	lsr	r3,r7,0x9
8000107e:	c0 41       	brne	80001086 <_malloc_r+0x72>
80001080:	ee 03 16 03 	lsr	r3,r7,0x3
80001084:	c2 68       	rjmp	800010d0 <_malloc_r+0xbc>
80001086:	58 43       	cp.w	r3,4
80001088:	e0 8b 00 06 	brhi	80001094 <_malloc_r+0x80>
8000108c:	ee 03 16 06 	lsr	r3,r7,0x6
80001090:	2c 83       	sub	r3,-56
80001092:	c1 f8       	rjmp	800010d0 <_malloc_r+0xbc>
80001094:	59 43       	cp.w	r3,20
80001096:	e0 8b 00 04 	brhi	8000109e <_malloc_r+0x8a>
8000109a:	2a 53       	sub	r3,-91
8000109c:	c1 a8       	rjmp	800010d0 <_malloc_r+0xbc>
8000109e:	e0 43 00 54 	cp.w	r3,84
800010a2:	e0 8b 00 06 	brhi	800010ae <_malloc_r+0x9a>
800010a6:	ee 03 16 0c 	lsr	r3,r7,0xc
800010aa:	29 23       	sub	r3,-110
800010ac:	c1 28       	rjmp	800010d0 <_malloc_r+0xbc>
800010ae:	e0 43 01 54 	cp.w	r3,340
800010b2:	e0 8b 00 06 	brhi	800010be <_malloc_r+0xaa>
800010b6:	ee 03 16 0f 	lsr	r3,r7,0xf
800010ba:	28 93       	sub	r3,-119
800010bc:	c0 a8       	rjmp	800010d0 <_malloc_r+0xbc>
800010be:	e0 43 05 54 	cp.w	r3,1364
800010c2:	e0 88 00 04 	brls	800010ca <_malloc_r+0xb6>
800010c6:	37 e3       	mov	r3,126
800010c8:	c0 48       	rjmp	800010d0 <_malloc_r+0xbc>
800010ca:	ee 03 16 12 	lsr	r3,r7,0x12
800010ce:	28 43       	sub	r3,-124
800010d0:	4a ba       	lddpc	r10,8000117c <_malloc_r+0x168>
800010d2:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800010d6:	74 36       	ld.w	r6,r10[0xc]
800010d8:	c1 98       	rjmp	8000110a <_malloc_r+0xf6>
800010da:	6c 19       	ld.w	r9,r6[0x4]
800010dc:	e0 19 ff fc 	andl	r9,0xfffc
800010e0:	f2 07 01 0b 	sub	r11,r9,r7
800010e4:	58 fb       	cp.w	r11,15
800010e6:	e0 8a 00 04 	brle	800010ee <_malloc_r+0xda>
800010ea:	20 13       	sub	r3,1
800010ec:	c1 18       	rjmp	8000110e <_malloc_r+0xfa>
800010ee:	6c 38       	ld.w	r8,r6[0xc]
800010f0:	58 0b       	cp.w	r11,0
800010f2:	c0 b5       	brlt	80001108 <_malloc_r+0xf4>
800010f4:	6c 2a       	ld.w	r10,r6[0x8]
800010f6:	ec 09 00 09 	add	r9,r6,r9
800010fa:	0a 9c       	mov	r12,r5
800010fc:	91 2a       	st.w	r8[0x8],r10
800010fe:	95 38       	st.w	r10[0xc],r8
80001100:	72 18       	ld.w	r8,r9[0x4]
80001102:	a1 a8       	sbr	r8,0x0
80001104:	93 18       	st.w	r9[0x4],r8
80001106:	cb c8       	rjmp	8000127e <_malloc_r+0x26a>
80001108:	10 96       	mov	r6,r8
8000110a:	14 36       	cp.w	r6,r10
8000110c:	ce 71       	brne	800010da <_malloc_r+0xc6>
8000110e:	2f f3       	sub	r3,-1
80001110:	49 ba       	lddpc	r10,8000117c <_malloc_r+0x168>
80001112:	f4 cc ff f8 	sub	r12,r10,-8
80001116:	78 26       	ld.w	r6,r12[0x8]
80001118:	18 36       	cp.w	r6,r12
8000111a:	c6 e0       	breq	800011f6 <_malloc_r+0x1e2>
8000111c:	6c 19       	ld.w	r9,r6[0x4]
8000111e:	e0 19 ff fc 	andl	r9,0xfffc
80001122:	f2 07 01 08 	sub	r8,r9,r7
80001126:	58 f8       	cp.w	r8,15
80001128:	e0 89 00 90 	brgt	80001248 <_malloc_r+0x234>
8000112c:	99 3c       	st.w	r12[0xc],r12
8000112e:	99 2c       	st.w	r12[0x8],r12
80001130:	58 08       	cp.w	r8,0
80001132:	c0 55       	brlt	8000113c <_malloc_r+0x128>
80001134:	ec 09 00 09 	add	r9,r6,r9
80001138:	0a 9c       	mov	r12,r5
8000113a:	ce 3b       	rjmp	80001100 <_malloc_r+0xec>
8000113c:	e0 49 01 ff 	cp.w	r9,511
80001140:	e0 8b 00 13 	brhi	80001166 <_malloc_r+0x152>
80001144:	a3 99       	lsr	r9,0x3
80001146:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000114a:	70 2b       	ld.w	r11,r8[0x8]
8000114c:	8d 38       	st.w	r6[0xc],r8
8000114e:	8d 2b       	st.w	r6[0x8],r11
80001150:	97 36       	st.w	r11[0xc],r6
80001152:	91 26       	st.w	r8[0x8],r6
80001154:	a3 49       	asr	r9,0x2
80001156:	74 18       	ld.w	r8,r10[0x4]
80001158:	30 1b       	mov	r11,1
8000115a:	f6 09 09 49 	lsl	r9,r11,r9
8000115e:	f1 e9 10 09 	or	r9,r8,r9
80001162:	95 19       	st.w	r10[0x4],r9
80001164:	c4 98       	rjmp	800011f6 <_malloc_r+0x1e2>
80001166:	f2 0a 16 09 	lsr	r10,r9,0x9
8000116a:	58 4a       	cp.w	r10,4
8000116c:	e0 8b 00 0a 	brhi	80001180 <_malloc_r+0x16c>
80001170:	f2 0a 16 06 	lsr	r10,r9,0x6
80001174:	2c 8a       	sub	r10,-56
80001176:	c2 38       	rjmp	800011bc <_malloc_r+0x1a8>
80001178:	80 00       	ld.sh	r0,r0[0x0]
8000117a:	14 72       	tst	r2,r10
8000117c:	00 00       	add	r0,r0
8000117e:	01 04       	ld.w	r4,r0++
80001180:	59 4a       	cp.w	r10,20
80001182:	e0 8b 00 04 	brhi	8000118a <_malloc_r+0x176>
80001186:	2a 5a       	sub	r10,-91
80001188:	c1 a8       	rjmp	800011bc <_malloc_r+0x1a8>
8000118a:	e0 4a 00 54 	cp.w	r10,84
8000118e:	e0 8b 00 06 	brhi	8000119a <_malloc_r+0x186>
80001192:	f2 0a 16 0c 	lsr	r10,r9,0xc
80001196:	29 2a       	sub	r10,-110
80001198:	c1 28       	rjmp	800011bc <_malloc_r+0x1a8>
8000119a:	e0 4a 01 54 	cp.w	r10,340
8000119e:	e0 8b 00 06 	brhi	800011aa <_malloc_r+0x196>
800011a2:	f2 0a 16 0f 	lsr	r10,r9,0xf
800011a6:	28 9a       	sub	r10,-119
800011a8:	c0 a8       	rjmp	800011bc <_malloc_r+0x1a8>
800011aa:	e0 4a 05 54 	cp.w	r10,1364
800011ae:	e0 88 00 04 	brls	800011b6 <_malloc_r+0x1a2>
800011b2:	37 ea       	mov	r10,126
800011b4:	c0 48       	rjmp	800011bc <_malloc_r+0x1a8>
800011b6:	f2 0a 16 12 	lsr	r10,r9,0x12
800011ba:	28 4a       	sub	r10,-124
800011bc:	4c 8b       	lddpc	r11,800012dc <_malloc_r+0x2c8>
800011be:	f6 0a 00 34 	add	r4,r11,r10<<0x3
800011c2:	68 28       	ld.w	r8,r4[0x8]
800011c4:	08 38       	cp.w	r8,r4
800011c6:	c0 e1       	brne	800011e2 <_malloc_r+0x1ce>
800011c8:	76 19       	ld.w	r9,r11[0x4]
800011ca:	a3 4a       	asr	r10,0x2
800011cc:	30 1e       	mov	lr,1
800011ce:	fc 0a 09 4a 	lsl	r10,lr,r10
800011d2:	f3 ea 10 0a 	or	r10,r9,r10
800011d6:	10 99       	mov	r9,r8
800011d8:	97 1a       	st.w	r11[0x4],r10
800011da:	c0 a8       	rjmp	800011ee <_malloc_r+0x1da>
800011dc:	70 28       	ld.w	r8,r8[0x8]
800011de:	08 38       	cp.w	r8,r4
800011e0:	c0 60       	breq	800011ec <_malloc_r+0x1d8>
800011e2:	70 1a       	ld.w	r10,r8[0x4]
800011e4:	e0 1a ff fc 	andl	r10,0xfffc
800011e8:	14 39       	cp.w	r9,r10
800011ea:	cf 93       	brcs	800011dc <_malloc_r+0x1c8>
800011ec:	70 39       	ld.w	r9,r8[0xc]
800011ee:	8d 39       	st.w	r6[0xc],r9
800011f0:	8d 28       	st.w	r6[0x8],r8
800011f2:	91 36       	st.w	r8[0xc],r6
800011f4:	93 26       	st.w	r9[0x8],r6
800011f6:	e6 08 14 02 	asr	r8,r3,0x2
800011fa:	30 1b       	mov	r11,1
800011fc:	4b 84       	lddpc	r4,800012dc <_malloc_r+0x2c8>
800011fe:	f6 08 09 4b 	lsl	r11,r11,r8
80001202:	68 18       	ld.w	r8,r4[0x4]
80001204:	10 3b       	cp.w	r11,r8
80001206:	e0 8b 00 6f 	brhi	800012e4 <_malloc_r+0x2d0>
8000120a:	f7 e8 00 09 	and	r9,r11,r8
8000120e:	c0 b1       	brne	80001224 <_malloc_r+0x210>
80001210:	e0 13 ff fc 	andl	r3,0xfffc
80001214:	a1 7b       	lsl	r11,0x1
80001216:	2f c3       	sub	r3,-4
80001218:	c0 38       	rjmp	8000121e <_malloc_r+0x20a>
8000121a:	2f c3       	sub	r3,-4
8000121c:	a1 7b       	lsl	r11,0x1
8000121e:	f7 e8 00 09 	and	r9,r11,r8
80001222:	cf c0       	breq	8000121a <_malloc_r+0x206>
80001224:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001228:	06 92       	mov	r2,r3
8000122a:	1c 91       	mov	r1,lr
8000122c:	62 36       	ld.w	r6,r1[0xc]
8000122e:	c2 e8       	rjmp	8000128a <_malloc_r+0x276>
80001230:	6c 1a       	ld.w	r10,r6[0x4]
80001232:	e0 1a ff fc 	andl	r10,0xfffc
80001236:	f4 07 01 08 	sub	r8,r10,r7
8000123a:	58 f8       	cp.w	r8,15
8000123c:	e0 8a 00 15 	brle	80001266 <_malloc_r+0x252>
80001240:	6c 3a       	ld.w	r10,r6[0xc]
80001242:	6c 29       	ld.w	r9,r6[0x8]
80001244:	95 29       	st.w	r10[0x8],r9
80001246:	93 3a       	st.w	r9[0xc],r10
80001248:	0e 99       	mov	r9,r7
8000124a:	ec 07 00 07 	add	r7,r6,r7
8000124e:	a1 a9       	sbr	r9,0x0
80001250:	99 37       	st.w	r12[0xc],r7
80001252:	99 27       	st.w	r12[0x8],r7
80001254:	8d 19       	st.w	r6[0x4],r9
80001256:	ee 08 09 08 	st.w	r7[r8],r8
8000125a:	8f 2c       	st.w	r7[0x8],r12
8000125c:	8f 3c       	st.w	r7[0xc],r12
8000125e:	a1 a8       	sbr	r8,0x0
80001260:	0a 9c       	mov	r12,r5
80001262:	8f 18       	st.w	r7[0x4],r8
80001264:	c0 d8       	rjmp	8000127e <_malloc_r+0x26a>
80001266:	6c 39       	ld.w	r9,r6[0xc]
80001268:	58 08       	cp.w	r8,0
8000126a:	c0 f5       	brlt	80001288 <_malloc_r+0x274>
8000126c:	ec 0a 00 0a 	add	r10,r6,r10
80001270:	74 18       	ld.w	r8,r10[0x4]
80001272:	a1 a8       	sbr	r8,0x0
80001274:	0a 9c       	mov	r12,r5
80001276:	95 18       	st.w	r10[0x4],r8
80001278:	6c 28       	ld.w	r8,r6[0x8]
8000127a:	93 28       	st.w	r9[0x8],r8
8000127c:	91 39       	st.w	r8[0xc],r9
8000127e:	f0 1f 00 19 	mcall	800012e0 <_malloc_r+0x2cc>
80001282:	ec cc ff f8 	sub	r12,r6,-8
80001286:	d8 32       	popm	r0-r7,pc
80001288:	12 96       	mov	r6,r9
8000128a:	02 36       	cp.w	r6,r1
8000128c:	cd 21       	brne	80001230 <_malloc_r+0x21c>
8000128e:	2f f2       	sub	r2,-1
80001290:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001294:	c0 30       	breq	8000129a <_malloc_r+0x286>
80001296:	2f 81       	sub	r1,-8
80001298:	cc ab       	rjmp	8000122c <_malloc_r+0x218>
8000129a:	1c 98       	mov	r8,lr
8000129c:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800012a0:	c0 81       	brne	800012b0 <_malloc_r+0x29c>
800012a2:	68 19       	ld.w	r9,r4[0x4]
800012a4:	f6 08 11 ff 	rsub	r8,r11,-1
800012a8:	f3 e8 00 08 	and	r8,r9,r8
800012ac:	89 18       	st.w	r4[0x4],r8
800012ae:	c0 78       	rjmp	800012bc <_malloc_r+0x2a8>
800012b0:	f0 c9 00 08 	sub	r9,r8,8
800012b4:	20 13       	sub	r3,1
800012b6:	70 08       	ld.w	r8,r8[0x0]
800012b8:	12 38       	cp.w	r8,r9
800012ba:	cf 10       	breq	8000129c <_malloc_r+0x288>
800012bc:	a1 7b       	lsl	r11,0x1
800012be:	68 18       	ld.w	r8,r4[0x4]
800012c0:	10 3b       	cp.w	r11,r8
800012c2:	e0 8b 00 11 	brhi	800012e4 <_malloc_r+0x2d0>
800012c6:	58 0b       	cp.w	r11,0
800012c8:	c0 e0       	breq	800012e4 <_malloc_r+0x2d0>
800012ca:	04 93       	mov	r3,r2
800012cc:	c0 38       	rjmp	800012d2 <_malloc_r+0x2be>
800012ce:	2f c3       	sub	r3,-4
800012d0:	a1 7b       	lsl	r11,0x1
800012d2:	f7 e8 00 09 	and	r9,r11,r8
800012d6:	ca 71       	brne	80001224 <_malloc_r+0x210>
800012d8:	cf bb       	rjmp	800012ce <_malloc_r+0x2ba>
800012da:	00 00       	add	r0,r0
800012dc:	00 00       	add	r0,r0
800012de:	01 04       	ld.w	r4,r0++
800012e0:	80 00       	ld.sh	r0,r0[0x0]
800012e2:	14 74       	tst	r4,r10
800012e4:	68 23       	ld.w	r3,r4[0x8]
800012e6:	66 12       	ld.w	r2,r3[0x4]
800012e8:	e0 12 ff fc 	andl	r2,0xfffc
800012ec:	0e 32       	cp.w	r2,r7
800012ee:	5f 39       	srlo	r9
800012f0:	e4 07 01 08 	sub	r8,r2,r7
800012f4:	58 f8       	cp.w	r8,15
800012f6:	5f aa       	srle	r10
800012f8:	f5 e9 10 09 	or	r9,r10,r9
800012fc:	e0 80 00 a2 	breq	80001440 <_malloc_r+0x42c>
80001300:	4c 88       	lddpc	r8,80001420 <_malloc_r+0x40c>
80001302:	70 01       	ld.w	r1,r8[0x0]
80001304:	4c 88       	lddpc	r8,80001424 <_malloc_r+0x410>
80001306:	2f 01       	sub	r1,-16
80001308:	70 08       	ld.w	r8,r8[0x0]
8000130a:	0e 01       	add	r1,r7
8000130c:	5b f8       	cp.w	r8,-1
8000130e:	c0 40       	breq	80001316 <_malloc_r+0x302>
80001310:	28 11       	sub	r1,-127
80001312:	e0 11 ff 80 	andl	r1,0xff80
80001316:	02 9b       	mov	r11,r1
80001318:	0a 9c       	mov	r12,r5
8000131a:	f0 1f 00 44 	mcall	80001428 <_malloc_r+0x414>
8000131e:	18 96       	mov	r6,r12
80001320:	5b fc       	cp.w	r12,-1
80001322:	c6 e0       	breq	800013fe <_malloc_r+0x3ea>
80001324:	e6 02 00 08 	add	r8,r3,r2
80001328:	10 3c       	cp.w	r12,r8
8000132a:	c0 32       	brcc	80001330 <_malloc_r+0x31c>
8000132c:	08 33       	cp.w	r3,r4
8000132e:	c6 81       	brne	800013fe <_malloc_r+0x3ea>
80001330:	4b fa       	lddpc	r10,8000142c <_malloc_r+0x418>
80001332:	74 09       	ld.w	r9,r10[0x0]
80001334:	e2 09 00 09 	add	r9,r1,r9
80001338:	95 09       	st.w	r10[0x0],r9
8000133a:	10 36       	cp.w	r6,r8
8000133c:	c0 a1       	brne	80001350 <_malloc_r+0x33c>
8000133e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80001342:	c0 71       	brne	80001350 <_malloc_r+0x33c>
80001344:	e2 02 00 02 	add	r2,r1,r2
80001348:	68 28       	ld.w	r8,r4[0x8]
8000134a:	a1 a2       	sbr	r2,0x0
8000134c:	91 12       	st.w	r8[0x4],r2
8000134e:	c4 c8       	rjmp	800013e6 <_malloc_r+0x3d2>
80001350:	4b 5a       	lddpc	r10,80001424 <_malloc_r+0x410>
80001352:	74 0b       	ld.w	r11,r10[0x0]
80001354:	5b fb       	cp.w	r11,-1
80001356:	c0 31       	brne	8000135c <_malloc_r+0x348>
80001358:	95 06       	st.w	r10[0x0],r6
8000135a:	c0 68       	rjmp	80001366 <_malloc_r+0x352>
8000135c:	ec 09 00 09 	add	r9,r6,r9
80001360:	4b 3a       	lddpc	r10,8000142c <_malloc_r+0x418>
80001362:	10 19       	sub	r9,r8
80001364:	95 09       	st.w	r10[0x0],r9
80001366:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000136a:	f0 09 11 08 	rsub	r9,r8,8
8000136e:	58 08       	cp.w	r8,0
80001370:	f2 08 17 10 	movne	r8,r9
80001374:	ed d8 e1 06 	addne	r6,r6,r8
80001378:	28 08       	sub	r8,-128
8000137a:	ec 01 00 01 	add	r1,r6,r1
8000137e:	0a 9c       	mov	r12,r5
80001380:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80001384:	f0 01 01 01 	sub	r1,r8,r1
80001388:	02 9b       	mov	r11,r1
8000138a:	f0 1f 00 28 	mcall	80001428 <_malloc_r+0x414>
8000138e:	4a 88       	lddpc	r8,8000142c <_malloc_r+0x418>
80001390:	5b fc       	cp.w	r12,-1
80001392:	ec 0c 17 00 	moveq	r12,r6
80001396:	f9 b1 00 00 	moveq	r1,0
8000139a:	70 09       	ld.w	r9,r8[0x0]
8000139c:	0c 1c       	sub	r12,r6
8000139e:	89 26       	st.w	r4[0x8],r6
800013a0:	02 0c       	add	r12,r1
800013a2:	12 01       	add	r1,r9
800013a4:	a1 ac       	sbr	r12,0x0
800013a6:	91 01       	st.w	r8[0x0],r1
800013a8:	8d 1c       	st.w	r6[0x4],r12
800013aa:	08 33       	cp.w	r3,r4
800013ac:	c1 d0       	breq	800013e6 <_malloc_r+0x3d2>
800013ae:	58 f2       	cp.w	r2,15
800013b0:	e0 8b 00 05 	brhi	800013ba <_malloc_r+0x3a6>
800013b4:	30 18       	mov	r8,1
800013b6:	8d 18       	st.w	r6[0x4],r8
800013b8:	c2 38       	rjmp	800013fe <_malloc_r+0x3ea>
800013ba:	30 59       	mov	r9,5
800013bc:	20 c2       	sub	r2,12
800013be:	e0 12 ff f8 	andl	r2,0xfff8
800013c2:	e6 02 00 08 	add	r8,r3,r2
800013c6:	91 29       	st.w	r8[0x8],r9
800013c8:	91 19       	st.w	r8[0x4],r9
800013ca:	66 18       	ld.w	r8,r3[0x4]
800013cc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800013d0:	e5 e8 10 08 	or	r8,r2,r8
800013d4:	87 18       	st.w	r3[0x4],r8
800013d6:	58 f2       	cp.w	r2,15
800013d8:	e0 88 00 07 	brls	800013e6 <_malloc_r+0x3d2>
800013dc:	e6 cb ff f8 	sub	r11,r3,-8
800013e0:	0a 9c       	mov	r12,r5
800013e2:	f0 1f 00 14 	mcall	80001430 <_malloc_r+0x41c>
800013e6:	49 49       	lddpc	r9,80001434 <_malloc_r+0x420>
800013e8:	72 0a       	ld.w	r10,r9[0x0]
800013ea:	49 18       	lddpc	r8,8000142c <_malloc_r+0x418>
800013ec:	70 08       	ld.w	r8,r8[0x0]
800013ee:	14 38       	cp.w	r8,r10
800013f0:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800013f4:	49 19       	lddpc	r9,80001438 <_malloc_r+0x424>
800013f6:	72 0a       	ld.w	r10,r9[0x0]
800013f8:	14 38       	cp.w	r8,r10
800013fa:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800013fe:	68 28       	ld.w	r8,r4[0x8]
80001400:	70 18       	ld.w	r8,r8[0x4]
80001402:	e0 18 ff fc 	andl	r8,0xfffc
80001406:	0e 38       	cp.w	r8,r7
80001408:	5f 39       	srlo	r9
8000140a:	0e 18       	sub	r8,r7
8000140c:	58 f8       	cp.w	r8,15
8000140e:	5f aa       	srle	r10
80001410:	f5 e9 10 09 	or	r9,r10,r9
80001414:	c1 60       	breq	80001440 <_malloc_r+0x42c>
80001416:	0a 9c       	mov	r12,r5
80001418:	f0 1f 00 09 	mcall	8000143c <_malloc_r+0x428>
8000141c:	d8 3a       	popm	r0-r7,pc,r12=0
8000141e:	00 00       	add	r0,r0
80001420:	00 00       	add	r0,r0
80001422:	05 20       	ld.uh	r0,r2++
80001424:	00 00       	add	r0,r0
80001426:	05 10       	ld.sh	r0,r2++
80001428:	80 00       	ld.sh	r0,r0[0x0]
8000142a:	14 78       	tst	r8,r10
8000142c:	00 00       	add	r0,r0
8000142e:	05 24       	ld.uh	r4,r2++
80001430:	80 00       	ld.sh	r0,r0[0x0]
80001432:	15 94       	ld.ub	r4,r10[0x1]
80001434:	00 00       	add	r0,r0
80001436:	05 1c       	ld.sh	r12,r2++
80001438:	00 00       	add	r0,r0
8000143a:	05 18       	ld.sh	r8,r2++
8000143c:	80 00       	ld.sh	r0,r0[0x0]
8000143e:	14 74       	tst	r4,r10
80001440:	68 26       	ld.w	r6,r4[0x8]
80001442:	a1 a8       	sbr	r8,0x0
80001444:	0e 99       	mov	r9,r7
80001446:	a1 a9       	sbr	r9,0x0
80001448:	8d 19       	st.w	r6[0x4],r9
8000144a:	ec 07 00 07 	add	r7,r6,r7
8000144e:	0a 9c       	mov	r12,r5
80001450:	89 27       	st.w	r4[0x8],r7
80001452:	8f 18       	st.w	r7[0x4],r8
80001454:	f0 1f 00 03 	mcall	80001460 <_malloc_r+0x44c>
80001458:	ec cc ff f8 	sub	r12,r6,-8
8000145c:	d8 32       	popm	r0-r7,pc
8000145e:	00 00       	add	r0,r0
80001460:	80 00       	ld.sh	r0,r0[0x0]
80001462:	14 74       	tst	r4,r10

80001464 <memset>:
80001464:	18 98       	mov	r8,r12
80001466:	c0 38       	rjmp	8000146c <memset+0x8>
80001468:	10 cb       	st.b	r8++,r11
8000146a:	20 1a       	sub	r10,1
8000146c:	58 0a       	cp.w	r10,0
8000146e:	cf d1       	brne	80001468 <memset+0x4>
80001470:	5e fc       	retal	r12

80001472 <__malloc_lock>:
80001472:	5e fc       	retal	r12

80001474 <__malloc_unlock>:
80001474:	5e fc       	retal	r12
80001476:	d7 03       	nop

80001478 <_sbrk_r>:
80001478:	d4 21       	pushm	r4-r7,lr
8000147a:	30 08       	mov	r8,0
8000147c:	18 97       	mov	r7,r12
8000147e:	48 76       	lddpc	r6,80001498 <_sbrk_r+0x20>
80001480:	16 9c       	mov	r12,r11
80001482:	8d 08       	st.w	r6[0x0],r8
80001484:	f0 1f 00 06 	mcall	8000149c <_sbrk_r+0x24>
80001488:	5b fc       	cp.w	r12,-1
8000148a:	c0 51       	brne	80001494 <_sbrk_r+0x1c>
8000148c:	6c 08       	ld.w	r8,r6[0x0]
8000148e:	58 08       	cp.w	r8,0
80001490:	ef f8 1a 03 	st.wne	r7[0xc],r8
80001494:	d8 22       	popm	r4-r7,pc
80001496:	00 00       	add	r0,r0
80001498:	00 00       	add	r0,r0
8000149a:	05 ac       	ld.ub	r12,r2[0x2]
8000149c:	80 00       	ld.sh	r0,r0[0x0]
8000149e:	14 a0       	st.w	r10++,r0

800014a0 <_sbrk>:
800014a0:	d4 01       	pushm	lr
800014a2:	48 c8       	lddpc	r8,800014d0 <_sbrk+0x30>
800014a4:	70 09       	ld.w	r9,r8[0x0]
800014a6:	58 09       	cp.w	r9,0
800014a8:	c0 31       	brne	800014ae <_sbrk+0xe>
800014aa:	48 b9       	lddpc	r9,800014d4 <_sbrk+0x34>
800014ac:	91 09       	st.w	r8[0x0],r9
800014ae:	48 99       	lddpc	r9,800014d0 <_sbrk+0x30>
800014b0:	48 aa       	lddpc	r10,800014d8 <_sbrk+0x38>
800014b2:	72 08       	ld.w	r8,r9[0x0]
800014b4:	f0 0c 00 0c 	add	r12,r8,r12
800014b8:	14 3c       	cp.w	r12,r10
800014ba:	e0 8b 00 04 	brhi	800014c2 <_sbrk+0x22>
800014be:	93 0c       	st.w	r9[0x0],r12
800014c0:	c0 68       	rjmp	800014cc <_sbrk+0x2c>
800014c2:	f0 1f 00 07 	mcall	800014dc <_sbrk+0x3c>
800014c6:	30 c8       	mov	r8,12
800014c8:	99 08       	st.w	r12[0x0],r8
800014ca:	3f f8       	mov	r8,-1
800014cc:	10 9c       	mov	r12,r8
800014ce:	d8 02       	popm	pc
800014d0:	00 00       	add	r0,r0
800014d2:	05 4c       	ld.w	r12,--r2
800014d4:	00 00       	add	r0,r0
800014d6:	05 b0       	ld.ub	r0,r2[0x3]
800014d8:	00 00       	add	r0,r0
800014da:	e0 00       	*unknown*
800014dc:	80 00       	ld.sh	r0,r0[0x0]
800014de:	14 e0       	st.h	--r10,r0

800014e0 <__errno>:
800014e0:	48 28       	lddpc	r8,800014e8 <__errno+0x8>
800014e2:	70 0c       	ld.w	r12,r8[0x0]
800014e4:	2f 4c       	sub	r12,-12
800014e6:	5e fc       	retal	r12
800014e8:	00 00       	add	r0,r0
800014ea:	01 00       	ld.w	r0,r0++

800014ec <_malloc_trim_r>:
800014ec:	d4 21       	pushm	r4-r7,lr
800014ee:	16 95       	mov	r5,r11
800014f0:	18 97       	mov	r7,r12
800014f2:	f0 1f 00 23 	mcall	8000157c <_malloc_trim_r+0x90>
800014f6:	4a 34       	lddpc	r4,80001580 <_malloc_trim_r+0x94>
800014f8:	68 28       	ld.w	r8,r4[0x8]
800014fa:	70 16       	ld.w	r6,r8[0x4]
800014fc:	e0 16 ff fc 	andl	r6,0xfffc
80001500:	ec c8 ff 91 	sub	r8,r6,-111
80001504:	f0 05 01 05 	sub	r5,r8,r5
80001508:	e0 15 ff 80 	andl	r5,0xff80
8000150c:	ea c5 00 80 	sub	r5,r5,128
80001510:	e0 45 00 7f 	cp.w	r5,127
80001514:	e0 8a 00 23 	brle	8000155a <_malloc_trim_r+0x6e>
80001518:	30 0b       	mov	r11,0
8000151a:	0e 9c       	mov	r12,r7
8000151c:	f0 1f 00 1a 	mcall	80001584 <_malloc_trim_r+0x98>
80001520:	68 28       	ld.w	r8,r4[0x8]
80001522:	0c 08       	add	r8,r6
80001524:	10 3c       	cp.w	r12,r8
80001526:	c1 a1       	brne	8000155a <_malloc_trim_r+0x6e>
80001528:	ea 0b 11 00 	rsub	r11,r5,0
8000152c:	0e 9c       	mov	r12,r7
8000152e:	f0 1f 00 16 	mcall	80001584 <_malloc_trim_r+0x98>
80001532:	5b fc       	cp.w	r12,-1
80001534:	c1 71       	brne	80001562 <_malloc_trim_r+0x76>
80001536:	30 0b       	mov	r11,0
80001538:	0e 9c       	mov	r12,r7
8000153a:	f0 1f 00 13 	mcall	80001584 <_malloc_trim_r+0x98>
8000153e:	68 28       	ld.w	r8,r4[0x8]
80001540:	f8 08 01 09 	sub	r9,r12,r8
80001544:	58 f9       	cp.w	r9,15
80001546:	e0 8a 00 0a 	brle	8000155a <_malloc_trim_r+0x6e>
8000154a:	a1 a9       	sbr	r9,0x0
8000154c:	91 19       	st.w	r8[0x4],r9
8000154e:	48 f8       	lddpc	r8,80001588 <_malloc_trim_r+0x9c>
80001550:	70 09       	ld.w	r9,r8[0x0]
80001552:	48 f8       	lddpc	r8,8000158c <_malloc_trim_r+0xa0>
80001554:	f8 09 01 09 	sub	r9,r12,r9
80001558:	91 09       	st.w	r8[0x0],r9
8000155a:	0e 9c       	mov	r12,r7
8000155c:	f0 1f 00 0d 	mcall	80001590 <_malloc_trim_r+0xa4>
80001560:	d8 2a       	popm	r4-r7,pc,r12=0
80001562:	68 28       	ld.w	r8,r4[0x8]
80001564:	0a 16       	sub	r6,r5
80001566:	a1 a6       	sbr	r6,0x0
80001568:	91 16       	st.w	r8[0x4],r6
8000156a:	48 98       	lddpc	r8,8000158c <_malloc_trim_r+0xa0>
8000156c:	70 09       	ld.w	r9,r8[0x0]
8000156e:	0a 19       	sub	r9,r5
80001570:	0e 9c       	mov	r12,r7
80001572:	91 09       	st.w	r8[0x0],r9
80001574:	f0 1f 00 07 	mcall	80001590 <_malloc_trim_r+0xa4>
80001578:	da 2a       	popm	r4-r7,pc,r12=1
8000157a:	00 00       	add	r0,r0
8000157c:	80 00       	ld.sh	r0,r0[0x0]
8000157e:	14 72       	tst	r2,r10
80001580:	00 00       	add	r0,r0
80001582:	01 04       	ld.w	r4,r0++
80001584:	80 00       	ld.sh	r0,r0[0x0]
80001586:	14 78       	tst	r8,r10
80001588:	00 00       	add	r0,r0
8000158a:	05 10       	ld.sh	r0,r2++
8000158c:	00 00       	add	r0,r0
8000158e:	05 24       	ld.uh	r4,r2++
80001590:	80 00       	ld.sh	r0,r0[0x0]
80001592:	14 74       	tst	r4,r10

80001594 <_free_r>:
80001594:	d4 21       	pushm	r4-r7,lr
80001596:	16 96       	mov	r6,r11
80001598:	18 97       	mov	r7,r12
8000159a:	58 0b       	cp.w	r11,0
8000159c:	e0 80 00 c8 	breq	8000172c <_free_r+0x198>
800015a0:	f0 1f 00 4c 	mcall	800016d0 <_free_r+0x13c>
800015a4:	20 86       	sub	r6,8
800015a6:	4c ca       	lddpc	r10,800016d4 <_free_r+0x140>
800015a8:	6c 18       	ld.w	r8,r6[0x4]
800015aa:	74 2e       	ld.w	lr,r10[0x8]
800015ac:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800015b0:	a1 c8       	cbr	r8,0x0
800015b2:	ec 08 00 09 	add	r9,r6,r8
800015b6:	72 1b       	ld.w	r11,r9[0x4]
800015b8:	e0 1b ff fc 	andl	r11,0xfffc
800015bc:	1c 39       	cp.w	r9,lr
800015be:	c1 d1       	brne	800015f8 <_free_r+0x64>
800015c0:	f6 08 00 08 	add	r8,r11,r8
800015c4:	58 0c       	cp.w	r12,0
800015c6:	c0 81       	brne	800015d6 <_free_r+0x42>
800015c8:	6c 09       	ld.w	r9,r6[0x0]
800015ca:	12 16       	sub	r6,r9
800015cc:	12 08       	add	r8,r9
800015ce:	6c 3b       	ld.w	r11,r6[0xc]
800015d0:	6c 29       	ld.w	r9,r6[0x8]
800015d2:	97 29       	st.w	r11[0x8],r9
800015d4:	93 3b       	st.w	r9[0xc],r11
800015d6:	10 99       	mov	r9,r8
800015d8:	95 26       	st.w	r10[0x8],r6
800015da:	a1 a9       	sbr	r9,0x0
800015dc:	8d 19       	st.w	r6[0x4],r9
800015de:	4b f9       	lddpc	r9,800016d8 <_free_r+0x144>
800015e0:	72 09       	ld.w	r9,r9[0x0]
800015e2:	12 38       	cp.w	r8,r9
800015e4:	c0 63       	brcs	800015f0 <_free_r+0x5c>
800015e6:	4b e8       	lddpc	r8,800016dc <_free_r+0x148>
800015e8:	0e 9c       	mov	r12,r7
800015ea:	70 0b       	ld.w	r11,r8[0x0]
800015ec:	f0 1f 00 3d 	mcall	800016e0 <_free_r+0x14c>
800015f0:	0e 9c       	mov	r12,r7
800015f2:	f0 1f 00 3d 	mcall	800016e4 <_free_r+0x150>
800015f6:	d8 22       	popm	r4-r7,pc
800015f8:	93 1b       	st.w	r9[0x4],r11
800015fa:	58 0c       	cp.w	r12,0
800015fc:	c0 30       	breq	80001602 <_free_r+0x6e>
800015fe:	30 0c       	mov	r12,0
80001600:	c1 08       	rjmp	80001620 <_free_r+0x8c>
80001602:	6c 0e       	ld.w	lr,r6[0x0]
80001604:	f4 c5 ff f8 	sub	r5,r10,-8
80001608:	1c 16       	sub	r6,lr
8000160a:	1c 08       	add	r8,lr
8000160c:	6c 2e       	ld.w	lr,r6[0x8]
8000160e:	0a 3e       	cp.w	lr,r5
80001610:	f9 bc 00 01 	moveq	r12,1
80001614:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001618:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000161c:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001620:	f2 0b 00 0e 	add	lr,r9,r11
80001624:	7c 1e       	ld.w	lr,lr[0x4]
80001626:	ed be 00 00 	bld	lr,0x0
8000162a:	c1 30       	breq	80001650 <_free_r+0xbc>
8000162c:	16 08       	add	r8,r11
8000162e:	58 0c       	cp.w	r12,0
80001630:	c0 c1       	brne	80001648 <_free_r+0xb4>
80001632:	4a 9e       	lddpc	lr,800016d4 <_free_r+0x140>
80001634:	72 2b       	ld.w	r11,r9[0x8]
80001636:	2f 8e       	sub	lr,-8
80001638:	1c 3b       	cp.w	r11,lr
8000163a:	c0 71       	brne	80001648 <_free_r+0xb4>
8000163c:	97 36       	st.w	r11[0xc],r6
8000163e:	97 26       	st.w	r11[0x8],r6
80001640:	8d 2b       	st.w	r6[0x8],r11
80001642:	8d 3b       	st.w	r6[0xc],r11
80001644:	30 1c       	mov	r12,1
80001646:	c0 58       	rjmp	80001650 <_free_r+0xbc>
80001648:	72 2b       	ld.w	r11,r9[0x8]
8000164a:	72 39       	ld.w	r9,r9[0xc]
8000164c:	93 2b       	st.w	r9[0x8],r11
8000164e:	97 39       	st.w	r11[0xc],r9
80001650:	10 99       	mov	r9,r8
80001652:	ec 08 09 08 	st.w	r6[r8],r8
80001656:	a1 a9       	sbr	r9,0x0
80001658:	8d 19       	st.w	r6[0x4],r9
8000165a:	58 0c       	cp.w	r12,0
8000165c:	c6 51       	brne	80001726 <_free_r+0x192>
8000165e:	e0 48 01 ff 	cp.w	r8,511
80001662:	e0 8b 00 13 	brhi	80001688 <_free_r+0xf4>
80001666:	a3 98       	lsr	r8,0x3
80001668:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000166c:	72 2b       	ld.w	r11,r9[0x8]
8000166e:	8d 39       	st.w	r6[0xc],r9
80001670:	8d 2b       	st.w	r6[0x8],r11
80001672:	97 36       	st.w	r11[0xc],r6
80001674:	93 26       	st.w	r9[0x8],r6
80001676:	a3 48       	asr	r8,0x2
80001678:	74 19       	ld.w	r9,r10[0x4]
8000167a:	30 1b       	mov	r11,1
8000167c:	f6 08 09 48 	lsl	r8,r11,r8
80001680:	f3 e8 10 08 	or	r8,r9,r8
80001684:	95 18       	st.w	r10[0x4],r8
80001686:	c5 08       	rjmp	80001726 <_free_r+0x192>
80001688:	f0 0b 16 09 	lsr	r11,r8,0x9
8000168c:	58 4b       	cp.w	r11,4
8000168e:	e0 8b 00 06 	brhi	8000169a <_free_r+0x106>
80001692:	f0 0b 16 06 	lsr	r11,r8,0x6
80001696:	2c 8b       	sub	r11,-56
80001698:	c2 b8       	rjmp	800016ee <_free_r+0x15a>
8000169a:	59 4b       	cp.w	r11,20
8000169c:	e0 8b 00 04 	brhi	800016a4 <_free_r+0x110>
800016a0:	2a 5b       	sub	r11,-91
800016a2:	c2 68       	rjmp	800016ee <_free_r+0x15a>
800016a4:	e0 4b 00 54 	cp.w	r11,84
800016a8:	e0 8b 00 06 	brhi	800016b4 <_free_r+0x120>
800016ac:	f0 0b 16 0c 	lsr	r11,r8,0xc
800016b0:	29 2b       	sub	r11,-110
800016b2:	c1 e8       	rjmp	800016ee <_free_r+0x15a>
800016b4:	e0 4b 01 54 	cp.w	r11,340
800016b8:	e0 8b 00 06 	brhi	800016c4 <_free_r+0x130>
800016bc:	f0 0b 16 0f 	lsr	r11,r8,0xf
800016c0:	28 9b       	sub	r11,-119
800016c2:	c1 68       	rjmp	800016ee <_free_r+0x15a>
800016c4:	e0 4b 05 54 	cp.w	r11,1364
800016c8:	e0 88 00 10 	brls	800016e8 <_free_r+0x154>
800016cc:	37 eb       	mov	r11,126
800016ce:	c1 08       	rjmp	800016ee <_free_r+0x15a>
800016d0:	80 00       	ld.sh	r0,r0[0x0]
800016d2:	14 72       	tst	r2,r10
800016d4:	00 00       	add	r0,r0
800016d6:	01 04       	ld.w	r4,r0++
800016d8:	00 00       	add	r0,r0
800016da:	05 0c       	ld.w	r12,r2++
800016dc:	00 00       	add	r0,r0
800016de:	05 20       	ld.uh	r0,r2++
800016e0:	80 00       	ld.sh	r0,r0[0x0]
800016e2:	14 ec       	st.h	--r10,r12
800016e4:	80 00       	ld.sh	r0,r0[0x0]
800016e6:	14 74       	tst	r4,r10
800016e8:	f0 0b 16 12 	lsr	r11,r8,0x12
800016ec:	28 4b       	sub	r11,-124
800016ee:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800016f2:	78 29       	ld.w	r9,r12[0x8]
800016f4:	18 39       	cp.w	r9,r12
800016f6:	c0 e1       	brne	80001712 <_free_r+0x17e>
800016f8:	74 18       	ld.w	r8,r10[0x4]
800016fa:	a3 4b       	asr	r11,0x2
800016fc:	30 1c       	mov	r12,1
800016fe:	f8 0b 09 4b 	lsl	r11,r12,r11
80001702:	f1 eb 10 0b 	or	r11,r8,r11
80001706:	12 98       	mov	r8,r9
80001708:	95 1b       	st.w	r10[0x4],r11
8000170a:	c0 a8       	rjmp	8000171e <_free_r+0x18a>
8000170c:	72 29       	ld.w	r9,r9[0x8]
8000170e:	18 39       	cp.w	r9,r12
80001710:	c0 60       	breq	8000171c <_free_r+0x188>
80001712:	72 1a       	ld.w	r10,r9[0x4]
80001714:	e0 1a ff fc 	andl	r10,0xfffc
80001718:	14 38       	cp.w	r8,r10
8000171a:	cf 93       	brcs	8000170c <_free_r+0x178>
8000171c:	72 38       	ld.w	r8,r9[0xc]
8000171e:	8d 38       	st.w	r6[0xc],r8
80001720:	8d 29       	st.w	r6[0x8],r9
80001722:	93 36       	st.w	r9[0xc],r6
80001724:	91 26       	st.w	r8[0x8],r6
80001726:	0e 9c       	mov	r12,r7
80001728:	f0 1f 00 02 	mcall	80001730 <_free_r+0x19c>
8000172c:	d8 22       	popm	r4-r7,pc
8000172e:	00 00       	add	r0,r0
80001730:	80 00       	ld.sh	r0,r0[0x0]
80001732:	14 74       	tst	r4,r10

Disassembly of section .exception:

80001800 <_evba>:
	...

80001828 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001828:	c7 a8       	rjmp	8000191c <privilegedCalls>
	...

80001900 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001900:	1c 9f       	mov	pc,lr

80001902 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001902:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001906:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
8000190a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
8000190e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001912:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001914:	c0 31       	brne	8000191a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001916:	4b 9c       	lddpc	r12,800019f8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001918:	18 9f       	mov	pc,r12

8000191a <_int0_exit>:
_int0_exit:
	rete
8000191a:	d6 03       	rete

8000191c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
8000191c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
8000191e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001920:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001922:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001924:	9b 3c       	st.w	sp[0xc],r12

80001926 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001926:	4b 6c       	lddpc	r12,800019fc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001928:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
8000192a:	c0 61       	brne	80001936 <priv_interruptenable>
	ld.w r12,sp[USERSR]
8000192c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
8000192e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001930:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001932:	d3 02       	popm	r11-r12
	rete
80001934:	d6 03       	rete

80001936 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001936:	4b 3c       	lddpc	r12,80001a00 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001938:	18 3b       	cp.w	r11,r12
	brne privexception
8000193a:	c0 61       	brne	80001946 <privexception>
	ld.w r12,sp[USERSR]
8000193c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
8000193e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001940:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001942:	d3 02       	popm	r11-r12
	rete
80001944:	d6 03       	rete

80001946 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001946:	c0 08       	rjmp	80001946 <privexception>

80001948 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001948:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
8000194a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
8000194e:	4a ec       	lddpc	r12,80001a04 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001950:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001952:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001954:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001958:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
8000195c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001960:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001962:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001964:	1c 9f       	mov	pc,lr

80001966 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001966:	d3 03       	ssrf	0x10
	mov pc,lr
80001968:	1c 9f       	mov	pc,lr

8000196a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
8000196a:	d5 03       	csrf	0x10
	mov pc,lr
8000196c:	1c 9f       	mov	pc,lr

8000196e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
8000196e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001972:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001974:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001978:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
8000197c:	1c 9f       	mov	pc,lr

8000197e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000197e:	4a 3c       	lddpc	r12,80001a08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001980:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001982:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001984:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001986:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001988:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
8000198a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
8000198c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
8000198e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001990:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001992:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001994:	33 40       	mov	r0,52
	add r0,r12
80001996:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001998:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
8000199c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
8000199e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
800019a2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
800019a4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
800019a6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
800019a8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
800019aa:	1a 90       	mov	r0,sp
	st.w --sp,r0
800019ac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800019ae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
800019b2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
800019b4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
800019b6:	1c 9f       	mov	pc,lr

800019b8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800019b8:	49 4c       	lddpc	r12,80001a08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
800019ba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
800019bc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800019be:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800019c0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
800019c4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
800019c6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
800019c8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800019ca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
800019cc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800019ce:	33 40       	mov	r0,52
	add r0,r12
800019d0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800019d2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800019d6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
800019d8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
800019da:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
800019dc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
800019de:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
800019e0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
800019e2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
800019e4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
800019e6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
800019e8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800019ea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
800019ec:	d4 01       	pushm	lr
	call timerStart
800019ee:	f0 1f 00 08 	mcall	80001a0c <contextRestoreFromISR+0x54>
	popm lr
800019f2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
800019f4:	1c 9f       	mov	pc,lr
800019f6:	00 00       	add	r0,r0
800019f8:	80 00       	ld.sh	r0,r0[0x0]
800019fa:	07 f0       	ld.ub	r0,r3[0x7]
800019fc:	80 00       	ld.sh	r0,r0[0x0]
800019fe:	19 66       	ld.uh	r6,--r12
80001a00:	80 00       	ld.sh	r0,r0[0x0]
80001a02:	19 6a       	ld.uh	r10,--r12
80001a04:	80 00       	ld.sh	r0,r0[0x0]
80001a06:	18 00       	add	r0,r12
80001a08:	00 00       	add	r0,r0
80001a0a:	05 9c       	ld.ub	r12,r2[0x1]
80001a0c:	80 00       	ld.sh	r0,r0[0x0]
80001a0e:	0e 62       	and	r2,r7
	...
