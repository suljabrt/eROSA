
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000018c4  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001a00  80001a00  00001e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80001e00  80001e00  00002200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80001e84  80001e84  00002284  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80001e88  00002408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002394  00002914  2**0
                  ALLOC
  9 .bss          00000098  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000da50  000005b0  000005b0  00000000  2**0
                  ALLOC
 11 .comment      000000a0  00000000  00000000  00002914  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000005b0  00000000  00000000  000029b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 000009bb  00000000  00000000  00002f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c51b  00000000  00000000  00003923  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00002051  00000000  00000000  0000fe3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000476f  00000000  00000000  00011e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000c04  00000000  00000000  00016600  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001c6e  00000000  00000000  00017204  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000018bf  00000000  00000000  00018e72  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 0053456d  00000000  00000000  0001a731  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 000004f8  00000000  00000000  0054ec9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	10 9c       	mov	r12,r8

Disassembly of section .text:

80000008 <ROSA_semaphoreCreate>:
 *
 * Comment:
 * 	Create a semaphore
 *
 **********************************************************/
int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t ** mutex, uint8_t ceiling) {
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 2d       	sub	sp,8
80000010:	ef 4c ff fc 	st.w	r7[-4],r12
80000014:	16 98       	mov	r8,r11
80000016:	ef 68 ff f8 	st.b	r7[-8],r8
	*mutex = (ROSA_semaphoreHandle_t*) malloc(sizeof(ROSA_semaphoreHandle_t*));
8000001a:	30 4c       	mov	r12,4
8000001c:	f0 1f 00 0c 	mcall	8000004c <ROSA_semaphoreCreate+0x44>
80000020:	18 98       	mov	r8,r12
80000022:	10 99       	mov	r9,r8
80000024:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000028:	91 09       	st.w	r8[0x0],r9
	(*mutex)->holder = NULL;
8000002a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000002e:	70 08       	ld.w	r8,r8[0x0]
80000030:	30 09       	mov	r9,0
80000032:	91 09       	st.w	r8[0x0],r9
	(*mutex)->ceiling = ceiling;
80000034:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000038:	70 09       	ld.w	r9,r8[0x0]
8000003a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000003e:	b2 c8       	st.b	r9[0x4],r8
	
	return 0;
80000040:	30 08       	mov	r8,0
}
80000042:	10 9c       	mov	r12,r8
80000044:	2f ed       	sub	sp,-8
80000046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000004a:	00 00       	add	r0,r0
8000004c:	80 00       	ld.sh	r0,r0[0x0]
8000004e:	11 94       	ld.ub	r4,r8[0x1]

80000050 <usart_options>:
80000050:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 31     ............tsk1
80000060:	00 00 00 00 74 73 6b 32 00 00 00 00 74 73 6b 33     ....tsk2....tsk3
80000070:	00 00 00 00                                         ....

80000074 <task1>:
/*************************************************************
 * Task1
 * Blink LED0
 ************************************************************/
void task1(void)
{
80000074:	eb cd 40 80 	pushm	r7,lr
80000078:	1a 97       	mov	r7,sp
	while(1) {
		ledOn(LED0_GPIO);
8000007a:	33 bc       	mov	r12,59
8000007c:	f0 1f 00 08 	mcall	8000009c <task1+0x28>
		ROSA_delay(500);
80000080:	e0 6a 01 f4 	mov	r10,500
80000084:	30 0b       	mov	r11,0
80000086:	f0 1f 00 07 	mcall	800000a0 <task1+0x2c>
		ledOff(LED0_GPIO);
8000008a:	33 bc       	mov	r12,59
8000008c:	f0 1f 00 06 	mcall	800000a4 <task1+0x30>
		ROSA_delay(500);
80000090:	e0 6a 01 f4 	mov	r10,500
80000094:	30 0b       	mov	r11,0
80000096:	f0 1f 00 03 	mcall	800000a0 <task1+0x2c>
		//ROSA_yield();
	}
8000009a:	cf 0b       	rjmp	8000007a <task1+0x6>
8000009c:	80 00       	ld.sh	r0,r0[0x0]
8000009e:	0c cc       	st.b	r6++,r12
800000a0:	80 00       	ld.sh	r0,r0[0x0]
800000a2:	07 e0       	ld.ub	r0,r3[0x6]
800000a4:	80 00       	ld.sh	r0,r0[0x0]
800000a6:	0c ec       	st.h	--r6,r12

800000a8 <task2>:
/*************************************************************
 * Task2
 * Blink LED1
 ************************************************************/
void task2(void)
{
800000a8:	eb cd 40 80 	pushm	r7,lr
800000ac:	1a 97       	mov	r7,sp
	while(1) {
		ledOn(LED1_GPIO);
800000ae:	33 cc       	mov	r12,60
800000b0:	f0 1f 00 08 	mcall	800000d0 <task2+0x28>
		ROSA_delay(500);
800000b4:	e0 6a 01 f4 	mov	r10,500
800000b8:	30 0b       	mov	r11,0
800000ba:	f0 1f 00 07 	mcall	800000d4 <task2+0x2c>
		ledOff(LED1_GPIO);
800000be:	33 cc       	mov	r12,60
800000c0:	f0 1f 00 06 	mcall	800000d8 <task2+0x30>
		ROSA_delay(500);
800000c4:	e0 6a 01 f4 	mov	r10,500
800000c8:	30 0b       	mov	r11,0
800000ca:	f0 1f 00 03 	mcall	800000d4 <task2+0x2c>
		//ROSA_yield();
	}
800000ce:	cf 0b       	rjmp	800000ae <task2+0x6>
800000d0:	80 00       	ld.sh	r0,r0[0x0]
800000d2:	0c cc       	st.b	r6++,r12
800000d4:	80 00       	ld.sh	r0,r0[0x0]
800000d6:	07 e0       	ld.ub	r0,r3[0x6]
800000d8:	80 00       	ld.sh	r0,r0[0x0]
800000da:	0c ec       	st.h	--r6,r12

800000dc <task3>:
/*************************************************************
 * Task 3
 * Idle
 ************************************************************/
void task3(void)
{
800000dc:	eb cd 40 80 	pushm	r7,lr
800000e0:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_yield();
800000e2:	f0 1f 00 02 	mcall	800000e8 <task3+0xc>
	}
800000e6:	cf eb       	rjmp	800000e2 <task3+0x6>
800000e8:	80 00       	ld.sh	r0,r0[0x0]
800000ea:	06 22       	rsub	r2,r3

800000ec <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
800000ec:	eb cd 40 80 	pushm	r7,lr
800000f0:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
800000f2:	f0 1f 00 10 	mcall	80000130 <main+0x44>
	
	//Create tasks and install them into the ROSA kernel
	ROSA_taskCreate(&t1_tcb, "tsk1", task1, T1_STACK_SIZE, 4);
800000f6:	30 48       	mov	r8,4
800000f8:	32 09       	mov	r9,32
800000fa:	48 fa       	lddpc	r10,80000134 <main+0x48>
800000fc:	48 fb       	lddpc	r11,80000138 <main+0x4c>
800000fe:	49 0c       	lddpc	r12,8000013c <main+0x50>
80000100:	f0 1f 00 10 	mcall	80000140 <main+0x54>
	ROSA_taskCreate(&t2_tcb, "tsk2", task2, T2_STACK_SIZE, 4);
80000104:	30 48       	mov	r8,4
80000106:	32 09       	mov	r9,32
80000108:	48 fa       	lddpc	r10,80000144 <main+0x58>
8000010a:	49 0b       	lddpc	r11,80000148 <main+0x5c>
8000010c:	49 0c       	lddpc	r12,8000014c <main+0x60>
8000010e:	f0 1f 00 0d 	mcall	80000140 <main+0x54>
	ROSA_taskCreate(&t3_tcb, "tsk3", task3, T3_STACK_SIZE, 1);
80000112:	30 18       	mov	r8,1
80000114:	32 09       	mov	r9,32
80000116:	48 fa       	lddpc	r10,80000150 <main+0x64>
80000118:	48 fb       	lddpc	r11,80000154 <main+0x68>
8000011a:	49 0c       	lddpc	r12,80000158 <main+0x6c>
8000011c:	f0 1f 00 09 	mcall	80000140 <main+0x54>
	ROSA_semaphoreCreate(&mutex, 1);
80000120:	30 1b       	mov	r11,1
80000122:	48 fc       	lddpc	r12,8000015c <main+0x70>
80000124:	f0 1f 00 0f 	mcall	80000160 <main+0x74>
	ROSA_tcbInstall(&t2_tcb);*/

	//Start the ROSA kernel
	//TCBLIST = PA[2]->nexttcb;
	//ROSA_start();
	ROSA_startScheduler();
80000128:	f0 1f 00 0f 	mcall	80000164 <main+0x78>
	//ledOn(LED1_GPIO);
	/* Execution will never return here */
	while(1);
8000012c:	c0 08       	rjmp	8000012c <main+0x40>
8000012e:	00 00       	add	r0,r0
80000130:	80 00       	ld.sh	r0,r0[0x0]
80000132:	03 0c       	ld.w	r12,r1++
80000134:	80 00       	ld.sh	r0,r0[0x0]
80000136:	00 74       	tst	r4,r0
80000138:	80 00       	ld.sh	r0,r0[0x0]
8000013a:	00 5c       	eor	r12,r0
8000013c:	00 00       	add	r0,r0
8000013e:	05 60       	ld.uh	r0,--r2
80000140:	80 00       	ld.sh	r0,r0[0x0]
80000142:	04 80       	andn	r0,r2
80000144:	80 00       	ld.sh	r0,r0[0x0]
80000146:	00 a8       	st.w	r0++,r8
80000148:	80 00       	ld.sh	r0,r0[0x0]
8000014a:	00 64       	and	r4,r0
8000014c:	00 00       	add	r0,r0
8000014e:	05 58       	ld.sh	r8,--r2
80000150:	80 00       	ld.sh	r0,r0[0x0]
80000152:	00 dc       	st.w	--r0,r12
80000154:	80 00       	ld.sh	r0,r0[0x0]
80000156:	00 6c       	and	r12,r0
80000158:	00 00       	add	r0,r0
8000015a:	05 50       	ld.sh	r0,--r2
8000015c:	00 00       	add	r0,r0
8000015e:	05 5c       	ld.sh	r12,--r2
80000160:	80 00       	ld.sh	r0,r0[0x0]
80000162:	00 08       	add	r8,r0
80000164:	80 00       	ld.sh	r0,r0[0x0]
80000166:	06 8c       	andn	r12,r3

80000168 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
80000168:	eb cd 40 80 	pushm	r7,lr
8000016c:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
8000016e:	f0 1f 00 05 	mcall	80000180 <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
80000172:	f0 1f 00 05 	mcall	80000184 <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it
80000176:	f0 1f 00 05 	mcall	80000188 <ROSA_yieldFromISR+0x20>
}
8000017a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000017e:	00 00       	add	r0,r0
80000180:	80 00       	ld.sh	r0,r0[0x0]
80000182:	1b 7e       	ld.ub	lr,--sp
80000184:	80 00       	ld.sh	r0,r0[0x0]
80000186:	06 40       	or	r0,r3
80000188:	80 00       	ld.sh	r0,r0[0x0]
8000018a:	1b b8       	ld.ub	r8,sp[0x3]

8000018c <usart_options>:
8000018c:	00 00 e1 00 08 04 00 00 00 00 00 00                 ............

80000198 <rqsearch>:

int rqi(ROSA_taskHandle_t ** th);  // Insert task th into queue pQ
int rqe(ROSA_taskHandle_t ** th); // Extract task th from queue pQ

int rqsearch(void)
{
80000198:	eb cd 40 80 	pushm	r7,lr
8000019c:	1a 97       	mov	r7,sp
8000019e:	20 1d       	sub	sp,4
	int i = MAXNPRIO;
800001a0:	30 c8       	mov	r8,12
800001a2:	ef 48 ff fc 	st.w	r7[-4],r8
	
	while (PA[--i] == NULL) {
800001a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001aa:	20 18       	sub	r8,1
800001ac:	ef 48 ff fc 	st.w	r7[-4],r8
800001b0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800001b4:	48 68       	lddpc	r8,800001cc <rqsearch+0x34>
800001b6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800001ba:	58 08       	cp.w	r8,0
800001bc:	cf 50       	breq	800001a6 <rqsearch+0xe>
		;
	}
	
	return i;
800001be:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800001c2:	10 9c       	mov	r12,r8
800001c4:	2f fd       	sub	sp,-4
800001c6:	e3 cd 80 80 	ldm	sp++,r7,pc
800001ca:	00 00       	add	r0,r0
800001cc:	00 00       	add	r0,r0
800001ce:	05 68       	ld.uh	r8,--r2

800001d0 <rqi>:

int rqi(ROSA_taskHandle_t ** pth)
{
800001d0:	eb cd 40 80 	pushm	r7,lr
800001d4:	1a 97       	mov	r7,sp
800001d6:	20 2d       	sub	sp,8
800001d8:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t priority;
	
	priority = (*pth)->priority;
800001dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001e0:	70 08       	ld.w	r8,r8[0x0]
800001e2:	f1 38 00 64 	ld.ub	r8,r8[100]
800001e6:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (PA[priority] == NULL) {
800001ea:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800001ee:	49 d8       	lddpc	r8,80000260 <rqi+0x90>
800001f0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800001f4:	58 08       	cp.w	r8,0
800001f6:	c1 41       	brne	8000021e <rqi+0x4e>
		PA[priority] = *pth;
800001f8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800001fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000200:	70 0a       	ld.w	r10,r8[0x0]
80000202:	49 88       	lddpc	r8,80000260 <rqi+0x90>
80000204:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		PA[priority]->nexttcb = *pth;
80000208:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000020c:	49 58       	lddpc	r8,80000260 <rqi+0x90>
8000020e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000212:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000216:	72 09       	ld.w	r9,r9[0x0]
80000218:	91 09       	st.w	r8[0x0],r9
		return 0;
8000021a:	30 08       	mov	r8,0
8000021c:	c1 d8       	rjmp	80000256 <rqi+0x86>
	}
	else {
		(*pth)->nexttcb = PA[priority]->nexttcb;
8000021e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000222:	70 08       	ld.w	r8,r8[0x0]
80000224:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80000228:	48 e9       	lddpc	r9,80000260 <rqi+0x90>
8000022a:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000022e:	72 09       	ld.w	r9,r9[0x0]
80000230:	91 09       	st.w	r8[0x0],r9
		PA[priority]->nexttcb = *pth;
80000232:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000236:	48 b8       	lddpc	r8,80000260 <rqi+0x90>
80000238:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000023c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000240:	72 09       	ld.w	r9,r9[0x0]
80000242:	91 09       	st.w	r8[0x0],r9
		PA[priority] = *pth;
80000244:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000248:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000024c:	70 0a       	ld.w	r10,r8[0x0]
8000024e:	48 58       	lddpc	r8,80000260 <rqi+0x90>
80000250:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		return 0;
80000254:	30 08       	mov	r8,0
	}
}
80000256:	10 9c       	mov	r12,r8
80000258:	2f ed       	sub	sp,-8
8000025a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000025e:	00 00       	add	r0,r0
80000260:	00 00       	add	r0,r0
80000262:	05 68       	ld.uh	r8,--r2

80000264 <rqe>:

int rqe(ROSA_taskHandle_t ** pth)
{
80000264:	eb cd 40 80 	pushm	r7,lr
80000268:	1a 97       	mov	r7,sp
8000026a:	20 3d       	sub	sp,12
8000026c:	ef 4c ff f4 	st.w	r7[-12],r12
	ROSA_taskHandle_t * thTmp;
	
	uint8_t priority;
	
	priority = (*pth)->priority;
80000270:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000274:	70 08       	ld.w	r8,r8[0x0]
80000276:	f1 38 00 64 	ld.ub	r8,r8[100]
8000027a:	ef 68 ff ff 	st.b	r7[-1],r8
	thTmp = PA[priority];
8000027e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000282:	4a 28       	lddpc	r8,80000308 <rqe+0xa4>
80000284:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000288:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if ((*pth)->nexttcb == *pth) {
8000028c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000290:	70 08       	ld.w	r8,r8[0x0]
80000292:	70 09       	ld.w	r9,r8[0x0]
80000294:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000298:	70 08       	ld.w	r8,r8[0x0]
8000029a:	10 39       	cp.w	r9,r8
8000029c:	c0 f1       	brne	800002ba <rqe+0x56>
		PA[priority] = NULL;
8000029e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800002a2:	49 a8       	lddpc	r8,80000308 <rqe+0xa4>
800002a4:	30 0a       	mov	r10,0
800002a6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		return 1;
800002aa:	30 18       	mov	r8,1
800002ac:	c2 98       	rjmp	800002fe <rqe+0x9a>
	}
	else {
		while (thTmp->nexttcb != (*pth)) {
			thTmp = thTmp->nexttcb;
800002ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002b2:	70 08       	ld.w	r8,r8[0x0]
800002b4:	ef 48 ff f8 	st.w	r7[-8],r8
800002b8:	c0 28       	rjmp	800002bc <rqe+0x58>
	if ((*pth)->nexttcb == *pth) {
		PA[priority] = NULL;
		return 1;
	}
	else {
		while (thTmp->nexttcb != (*pth)) {
800002ba:	d7 03       	nop
800002bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002c0:	70 09       	ld.w	r9,r8[0x0]
800002c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002c6:	70 08       	ld.w	r8,r8[0x0]
800002c8:	10 39       	cp.w	r9,r8
800002ca:	cf 21       	brne	800002ae <rqe+0x4a>
			thTmp = thTmp->nexttcb;
		}
		if (PA[priority] == *pth) {
800002cc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800002d0:	48 e8       	lddpc	r8,80000308 <rqe+0xa4>
800002d2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800002d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002da:	70 08       	ld.w	r8,r8[0x0]
800002dc:	10 39       	cp.w	r9,r8
800002de:	c0 81       	brne	800002ee <rqe+0x8a>
			PA[priority] = thTmp;
800002e0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800002e4:	48 98       	lddpc	r8,80000308 <rqe+0xa4>
800002e6:	ee fa ff f8 	ld.w	r10,r7[-8]
800002ea:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		}
		thTmp->nexttcb = (*pth)->nexttcb;
800002ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002f2:	70 08       	ld.w	r8,r8[0x0]
800002f4:	70 09       	ld.w	r9,r8[0x0]
800002f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002fa:	91 09       	st.w	r8[0x0],r9
		return 0;
800002fc:	30 08       	mov	r8,0
	}
}
800002fe:	10 9c       	mov	r12,r8
80000300:	2f dd       	sub	sp,-12
80000302:	e3 cd 80 80 	ldm	sp++,r7,pc
80000306:	00 00       	add	r0,r0
80000308:	00 00       	add	r0,r0
8000030a:	05 68       	ld.uh	r8,--r2

8000030c <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
8000030c:	eb cd 40 80 	pushm	r7,lr
80000310:	1a 97       	mov	r7,sp
80000312:	20 1d       	sub	sp,4
	int i = 0;
80000314:	30 08       	mov	r8,0
80000316:	ef 48 ff fc 	st.w	r7[-4],r8
	systemTick = 0;
8000031a:	49 fa       	lddpc	r10,80000394 <ROSA_init+0x88>
8000031c:	30 08       	mov	r8,0
8000031e:	30 09       	mov	r9,0
80000320:	f4 e9 00 00 	st.d	r10[0],r8
	
	//Do initialization of I/O drivers
	ledInit();									//LEDs
80000324:	f0 1f 00 1d 	mcall	80000398 <ROSA_init+0x8c>
	buttonInit();								//Buttons
80000328:	f0 1f 00 1d 	mcall	8000039c <ROSA_init+0x90>
	joystickInit();								//Joystick
8000032c:	f0 1f 00 1d 	mcall	800003a0 <ROSA_init+0x94>
	potInit();									//Potentiometer
80000330:	f0 1f 00 1d 	mcall	800003a4 <ROSA_init+0x98>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
80000334:	e0 6a 1b 00 	mov	r10,6912
80000338:	ea 1a 00 b7 	orh	r10,0xb7
8000033c:	49 bb       	lddpc	r11,800003a8 <ROSA_init+0x9c>
8000033e:	fe 7c 14 00 	mov	r12,-60416
80000342:	f0 1f 00 1b 	mcall	800003ac <ROSA_init+0xa0>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
80000346:	49 b8       	lddpc	r8,800003b0 <ROSA_init+0xa4>
80000348:	30 09       	mov	r9,0
8000034a:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
8000034c:	49 a8       	lddpc	r8,800003b4 <ROSA_init+0xa8>
8000034e:	30 09       	mov	r9,0
80000350:	91 09       	st.w	r8[0x0],r9
	PREEMPTASK = NULL;
80000352:	49 a8       	lddpc	r8,800003b8 <ROSA_init+0xac>
80000354:	30 09       	mov	r9,0
80000356:	91 09       	st.w	r8[0x0],r9
	
	for (i = 0; i < MAXNPRIO; i++) {
80000358:	30 08       	mov	r8,0
8000035a:	ef 48 ff fc 	st.w	r7[-4],r8
8000035e:	c0 c8       	rjmp	80000376 <ROSA_init+0x6a>
		PA[i] = NULL;
80000360:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000364:	49 68       	lddpc	r8,800003bc <ROSA_init+0xb0>
80000366:	30 0a       	mov	r10,0
80000368:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
	EXECTASK = NULL;
	PREEMPTASK = NULL;
	
	for (i = 0; i < MAXNPRIO; i++) {
8000036c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000370:	2f f8       	sub	r8,-1
80000372:	ef 48 ff fc 	st.w	r7[-4],r8
80000376:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000037a:	58 b8       	cp.w	r8,11
8000037c:	fe 9a ff f2 	brle	80000360 <ROSA_init+0x54>
		PA[i] = NULL;
	}
	
	//Initialize the timer to 1 ms period.
	interruptInit();
80000380:	f0 1f 00 10 	mcall	800003c0 <ROSA_init+0xb4>
	timerInit(10);
80000384:	30 ac       	mov	r12,10
80000386:	f0 1f 00 10 	mcall	800003c4 <ROSA_init+0xb8>
	timerStart();
8000038a:	f0 1f 00 10 	mcall	800003c8 <ROSA_init+0xbc>
}
8000038e:	2f fd       	sub	sp,-4
80000390:	e3 cd 80 80 	ldm	sp++,r7,pc
80000394:	00 00       	add	r0,r0
80000396:	05 a4       	ld.ub	r4,r2[0x2]
80000398:	80 00       	ld.sh	r0,r0[0x0]
8000039a:	0c 40       	or	r0,r6
8000039c:	80 00       	ld.sh	r0,r0[0x0]
8000039e:	0a 98       	mov	r8,r5
800003a0:	80 00       	ld.sh	r0,r0[0x0]
800003a2:	0a c0       	st.b	r5++,r0
800003a4:	80 00       	ld.sh	r0,r0[0x0]
800003a6:	0d 0c       	ld.w	r12,r6++
800003a8:	80 00       	ld.sh	r0,r0[0x0]
800003aa:	01 8c       	ld.ub	r12,r0[0x0]
800003ac:	80 00       	ld.sh	r0,r0[0x0]
800003ae:	0e c0       	st.b	r7++,r0
800003b0:	00 00       	add	r0,r0
800003b2:	05 64       	ld.uh	r4,--r2
800003b4:	00 00       	add	r0,r0
800003b6:	05 9c       	ld.ub	r12,r2[0x1]
800003b8:	00 00       	add	r0,r0
800003ba:	05 98       	ld.ub	r8,r2[0x1]
800003bc:	00 00       	add	r0,r0
800003be:	05 68       	ld.uh	r8,--r2
800003c0:	80 00       	ld.sh	r0,r0[0x0]
800003c2:	1b 48       	ld.w	r8,--sp
800003c4:	80 00       	ld.sh	r0,r0[0x0]
800003c6:	0f e4       	ld.ub	r4,r7[0x6]
800003c8:	80 00       	ld.sh	r0,r0[0x0]
800003ca:	10 12       	sub	r2,r8

800003cc <ROSA_tcbCreate>:
 * Comment:
 * 	Create the TCB with correct values.
 *
 **********************************************************/
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
800003cc:	eb cd 40 80 	pushm	r7,lr
800003d0:	1a 97       	mov	r7,sp
800003d2:	20 6d       	sub	sp,24
800003d4:	ef 4c ff f8 	st.w	r7[-8],r12
800003d8:	ef 4b ff f4 	st.w	r7[-12],r11
800003dc:	ef 4a ff f0 	st.w	r7[-16],r10
800003e0:	ef 49 ff ec 	st.w	r7[-20],r9
800003e4:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800003e8:	30 08       	mov	r8,0
800003ea:	ef 48 ff fc 	st.w	r7[-4],r8
800003ee:	c1 48       	rjmp	80000416 <ROSA_tcbCreate+0x4a>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
800003f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800003f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003f8:	ee fa ff f4 	ld.w	r10,r7[-12]
800003fc:	f4 08 00 08 	add	r8,r10,r8
80000400:	11 88       	ld.ub	r8,r8[0x0]
80000402:	ee fa ff f8 	ld.w	r10,r7[-8]
80000406:	f4 09 00 09 	add	r9,r10,r9
8000040a:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
8000040c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000410:	2f f8       	sub	r8,-1
80000412:	ef 48 ff fc 	st.w	r7[-4],r8
80000416:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000041a:	58 38       	cp.w	r8,3
8000041c:	fe 9a ff ea 	brle	800003f0 <ROSA_tcbCreate+0x24>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
80000420:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000424:	30 09       	mov	r9,0
80000426:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
80000428:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000042c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000430:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
80000432:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000436:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000043a:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
8000043c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000440:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000444:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
80000446:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000044a:	a3 68       	lsl	r8,0x2
8000044c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000450:	10 09       	add	r9,r8
80000452:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000456:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
80000458:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000045c:	70 39       	ld.w	r9,r8[0xc]
8000045e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000462:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
80000464:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000468:	fc 19 00 1c 	movh	r9,0x1c
8000046c:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
8000046e:	ee fc ff f8 	ld.w	r12,r7[-8]
80000472:	f0 1f 00 03 	mcall	8000047c <ROSA_tcbCreate+0xb0>
}
80000476:	2f ad       	sub	sp,-24
80000478:	e3 cd 80 80 	ldm	sp++,r7,pc
8000047c:	80 00       	ld.sh	r0,r0[0x0]
8000047e:	05 96       	ld.ub	r6,r2[0x1]

80000480 <ROSA_taskCreate>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

int16_t ROSA_taskCreate(ROSA_taskHandle_t ** pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
80000480:	eb cd 40 80 	pushm	r7,lr
80000484:	1a 97       	mov	r7,sp
80000486:	20 6d       	sub	sp,24
80000488:	ef 4c ff f8 	st.w	r7[-8],r12
8000048c:	ef 4b ff f4 	st.w	r7[-12],r11
80000490:	ef 4a ff f0 	st.w	r7[-16],r10
80000494:	ef 49 ff ec 	st.w	r7[-20],r9
80000498:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) calloc(stackSize, sizeof(uint32_t)); 
8000049c:	30 4b       	mov	r11,4
8000049e:	ee fc ff ec 	ld.w	r12,r7[-20]
800004a2:	f0 1f 00 28 	mcall	80000540 <ROSA_taskCreate+0xc0>
800004a6:	18 98       	mov	r8,r12
800004a8:	ef 48 ff fc 	st.w	r7[-4],r8
	
	*pth = (ROSA_taskHandle_t *) malloc(sizeof(ROSA_taskHandle_t));			
800004ac:	37 4c       	mov	r12,116
800004ae:	f0 1f 00 26 	mcall	80000544 <ROSA_taskCreate+0xc4>
800004b2:	18 98       	mov	r8,r12
800004b4:	10 99       	mov	r9,r8
800004b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004ba:	91 09       	st.w	r8[0x0],r9
	(*pth)->priority = priority;
800004bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004c0:	70 09       	ld.w	r9,r8[0x0]
800004c2:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800004c6:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
800004ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004ce:	70 0a       	ld.w	r10,r8[0x0]
800004d0:	30 08       	mov	r8,0
800004d2:	30 09       	mov	r9,0
800004d4:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
800004d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004dc:	70 09       	ld.w	r9,r8[0x0]
800004de:	30 08       	mov	r8,0
800004e0:	f3 68 00 70 	st.b	r9[112],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
800004e4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800004e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800004ec:	72 0c       	ld.w	r12,r9[0x0]
800004ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
800004f2:	ee fa ff f0 	ld.w	r10,r7[-16]
800004f6:	ee fb ff f4 	ld.w	r11,r7[-12]
800004fa:	f0 1f 00 14 	mcall	80000548 <ROSA_taskCreate+0xc8>
	
	rqi(pth);
800004fe:	ee fc ff f8 	ld.w	r12,r7[-8]
80000502:	f0 1f 00 13 	mcall	8000054c <ROSA_taskCreate+0xcc>
	
	if (EXECTASK != NULL) {
80000506:	49 38       	lddpc	r8,80000550 <ROSA_taskCreate+0xd0>
80000508:	70 08       	ld.w	r8,r8[0x0]
8000050a:	58 08       	cp.w	r8,0
8000050c:	c1 40       	breq	80000534 <ROSA_taskCreate+0xb4>
		if (EXECTASK->priority < priority) {
8000050e:	49 18       	lddpc	r8,80000550 <ROSA_taskCreate+0xd0>
80000510:	70 08       	ld.w	r8,r8[0x0]
80000512:	f1 38 00 64 	ld.ub	r8,r8[100]
80000516:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000051a:	f0 09 18 00 	cp.b	r9,r8
8000051e:	e0 88 00 0b 	brls	80000534 <ROSA_taskCreate+0xb4>
			PREEMPTASK = PA[priority];
80000522:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000526:	48 c8       	lddpc	r8,80000554 <ROSA_taskCreate+0xd4>
80000528:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000052c:	48 b8       	lddpc	r8,80000558 <ROSA_taskCreate+0xd8>
8000052e:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
80000530:	f0 1f 00 0b 	mcall	8000055c <ROSA_taskCreate+0xdc>
		}	
	}
	
	return 0;
80000534:	30 08       	mov	r8,0
}
80000536:	10 9c       	mov	r12,r8
80000538:	2f ad       	sub	sp,-24
8000053a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000053e:	00 00       	add	r0,r0
80000540:	80 00       	ld.sh	r0,r0[0x0]
80000542:	11 1c       	ld.sh	r12,r8++
80000544:	80 00       	ld.sh	r0,r0[0x0]
80000546:	11 94       	ld.ub	r4,r8[0x1]
80000548:	80 00       	ld.sh	r0,r0[0x0]
8000054a:	03 cc       	ld.ub	r12,r1[0x4]
8000054c:	80 00       	ld.sh	r0,r0[0x0]
8000054e:	01 d0       	ld.ub	r0,r0[0x5]
80000550:	00 00       	add	r0,r0
80000552:	05 9c       	ld.ub	r12,r2[0x1]
80000554:	00 00       	add	r0,r0
80000556:	05 68       	ld.uh	r8,--r2
80000558:	00 00       	add	r0,r0
8000055a:	05 98       	ld.ub	r8,r2[0x1]
8000055c:	80 00       	ld.sh	r0,r0[0x0]
8000055e:	06 22       	rsub	r2,r3

80000560 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80000560:	4b 5c       	lddpc	r12,80000634 <_yield+0xa>
	lda.w r11,EXECTASK
80000562:	4b 6b       	lddpc	r11,80000638 <_yield+0xe>
	ld.w r12,r12[0x0]
80000564:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
80000566:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000568:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
8000056a:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
8000056c:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000570:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
80000572:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
80000574:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
80000576:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
8000057a:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
8000057c:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
8000057e:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000580:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
80000582:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
80000584:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
80000586:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000588:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
8000058a:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
8000058c:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
8000058e:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000590:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000592:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000594:	1c 9f       	mov	pc,lr

80000596 <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
80000596:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000598:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
8000059a:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
8000059c:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
800005a0:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
800005a4:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
800005a8:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
800005ac:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
800005b0:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
800005b4:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
800005b8:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
800005bc:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
800005c0:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
800005c2:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
800005c4:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
800005c6:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
800005c8:	1c 9f       	mov	pc,lr

800005ca <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
800005ca:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
800005cc:	49 bc       	lddpc	r12,80000638 <_yield+0xe>
	ld.w r12,r12[0x0]
800005ce:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
800005d0:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
800005d2:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
800005d4:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
800005d6:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
800005d8:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
800005da:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
800005dc:	33 40       	mov	r0,52
	add r0,r12
800005de:	18 00       	add	r0,r12
	stmts r0,r0-r11
800005e0:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
800005e4:	1a 90       	mov	r0,sp
	st.w --sp,r0
800005e6:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800005e8:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
800005ec:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
800005ee:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
800005f0:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
800005f2:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
800005f4:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
800005f6:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
800005f8:	1c 9f       	mov	pc,lr

800005fa <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800005fa:	49 0c       	lddpc	r12,80000638 <_yield+0xe>
	ld.w r12,r12[0x0]
800005fc:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
800005fe:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000600:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
80000602:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
80000606:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80000608:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
8000060a:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
8000060c:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
8000060e:	33 40       	mov	r0,52
	add r0,r12
80000610:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80000612:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80000616:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000618:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
8000061a:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
8000061c:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
8000061e:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80000620:	d6 13       	rets

80000622 <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
80000622:	d4 01       	pushm	lr
	lda.w lr,_yield
80000624:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000628:	d7 33       	scall

8000062a <_yield>:
_yield:
	call contextSave
8000062a:	cd 0f       	rcall	800005ca <contextSave>
	call scheduler
8000062c:	f0 1f 00 04 	mcall	8000063c <_yield+0x12>
	call contextRestore
80000630:	ce 5f       	rcall	800005fa <contextRestore>
80000632:	00 00       	add	r0,r0
80000634:	00 00       	add	r0,r0
80000636:	05 64       	ld.uh	r4,--r2
80000638:	00 00       	add	r0,r0
8000063a:	05 9c       	ld.ub	r12,r2[0x1]
8000063c:	80 00       	ld.sh	r0,r0[0x0]
8000063e:	06 40       	or	r0,r3

80000640 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000640:	eb cd 40 80 	pushm	r7,lr
80000644:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK == NULL) {
80000646:	48 f8       	lddpc	r8,80000680 <scheduler+0x40>
80000648:	70 08       	ld.w	r8,r8[0x0]
8000064a:	58 08       	cp.w	r8,0
8000064c:	c1 11       	brne	8000066e <scheduler+0x2e>
		PA[EXECTASK->priority] = EXECTASK;
8000064e:	48 e8       	lddpc	r8,80000684 <scheduler+0x44>
80000650:	70 08       	ld.w	r8,r8[0x0]
80000652:	f1 38 00 64 	ld.ub	r8,r8[100]
80000656:	10 99       	mov	r9,r8
80000658:	48 b8       	lddpc	r8,80000684 <scheduler+0x44>
8000065a:	70 0a       	ld.w	r10,r8[0x0]
8000065c:	48 b8       	lddpc	r8,80000688 <scheduler+0x48>
8000065e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		EXECTASK = EXECTASK->nexttcb;
80000662:	48 98       	lddpc	r8,80000684 <scheduler+0x44>
80000664:	70 08       	ld.w	r8,r8[0x0]
80000666:	70 09       	ld.w	r9,r8[0x0]
80000668:	48 78       	lddpc	r8,80000684 <scheduler+0x44>
8000066a:	91 09       	st.w	r8[0x0],r9
8000066c:	c0 88       	rjmp	8000067c <scheduler+0x3c>
	}
	else {
		EXECTASK = PREEMPTASK;
8000066e:	48 58       	lddpc	r8,80000680 <scheduler+0x40>
80000670:	70 09       	ld.w	r9,r8[0x0]
80000672:	48 58       	lddpc	r8,80000684 <scheduler+0x44>
80000674:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
80000676:	48 38       	lddpc	r8,80000680 <scheduler+0x40>
80000678:	30 09       	mov	r9,0
8000067a:	91 09       	st.w	r8[0x0],r9
	}
}
8000067c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000680:	00 00       	add	r0,r0
80000682:	05 98       	ld.ub	r8,r2[0x1]
80000684:	00 00       	add	r0,r0
80000686:	05 9c       	ld.ub	r12,r2[0x1]
80000688:	00 00       	add	r0,r0
8000068a:	05 68       	ld.uh	r8,--r2

8000068c <ROSA_startScheduler>:

void ROSA_startScheduler(void)
{
8000068c:	eb cd 40 80 	pushm	r7,lr
80000690:	1a 97       	mov	r7,sp
80000692:	20 1d       	sub	sp,4
	int i = MAXNPRIO;
80000694:	30 c8       	mov	r8,12
80000696:	ef 48 ff fc 	st.w	r7[-4],r8
	
	while (PA[--i] == NULL) {
8000069a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000069e:	20 18       	sub	r8,1
800006a0:	ef 48 ff fc 	st.w	r7[-4],r8
800006a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800006a8:	48 98       	lddpc	r8,800006cc <ROSA_startScheduler+0x40>
800006aa:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800006ae:	58 08       	cp.w	r8,0
800006b0:	cf 50       	breq	8000069a <ROSA_startScheduler+0xe>
		;
	}
	
	TCBLIST = PA[i]->nexttcb;
800006b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800006b6:	48 68       	lddpc	r8,800006cc <ROSA_startScheduler+0x40>
800006b8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800006bc:	70 09       	ld.w	r9,r8[0x0]
800006be:	48 58       	lddpc	r8,800006d0 <ROSA_startScheduler+0x44>
800006c0:	91 09       	st.w	r8[0x0],r9
	
	ROSA_start();
800006c2:	f0 1f 00 05 	mcall	800006d4 <ROSA_startScheduler+0x48>
}
800006c6:	2f fd       	sub	sp,-4
800006c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800006cc:	00 00       	add	r0,r0
800006ce:	05 68       	ld.uh	r8,--r2
800006d0:	00 00       	add	r0,r0
800006d2:	05 64       	ld.uh	r4,--r2
800006d4:	80 00       	ld.sh	r0,r0[0x0]
800006d6:	05 60       	ld.uh	r0,--r2

800006d8 <C.13.9557>:
800006d8:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

800006e8 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
800006e8:	eb cd 40 80 	pushm	r7,lr
800006ec:	1a 97       	mov	r7,sp
800006ee:	20 5d       	sub	sp,20
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
800006f0:	fe 78 38 00 	mov	r8,-51200
800006f4:	ef 48 ff f4 	st.w	r7[-12],r8
	ROSA_taskHandle_t * tmptsk;
	bool interruptTask;
	int priority;
	
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
800006f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800006fc:	70 88       	ld.w	r8,r8[0x20]
800006fe:	ef 48 ff f0 	st.w	r7[-16],r8
	if (sr & AVR32_TC_CPCS_MASK)
80000702:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000706:	e2 18 00 10 	andl	r8,0x10,COH
8000070a:	c4 a0       	breq	8000079e <timerISR+0xb6>
	{
		systemTick++;
8000070c:	4a 78       	lddpc	r8,800007a8 <timerISR+0xc0>
8000070e:	f0 ea 00 00 	ld.d	r10,r8[0]
80000712:	30 18       	mov	r8,1
80000714:	30 09       	mov	r9,0
80000716:	f4 08 00 08 	add	r8,r10,r8
8000071a:	f6 09 00 49 	adc	r9,r11,r9
8000071e:	4a 3a       	lddpc	r10,800007a8 <timerISR+0xc0>
80000720:	f4 e9 00 00 	st.d	r10[0],r8
		
		interruptTask = false;
80000724:	30 08       	mov	r8,0
80000726:	ef 68 ff fb 	st.b	r7[-5],r8
		
		while (DELAYQUEUE != NULL && DELAYQUEUE->delay <= systemTick)
8000072a:	c1 68       	rjmp	80000756 <timerISR+0x6e>
		{
			tmptsk = DELAYQUEUE;
8000072c:	4a 08       	lddpc	r8,800007ac <timerISR+0xc4>
8000072e:	70 08       	ld.w	r8,r8[0x0]
80000730:	ef 48 ff ec 	st.w	r7[-20],r8
			removeDelayQueue(&DELAYQUEUE);
80000734:	49 ec       	lddpc	r12,800007ac <timerISR+0xc4>
80000736:	f0 1f 00 1f 	mcall	800007b0 <timerISR+0xc8>
			tmptsk->delay = 0;
8000073a:	ee fa ff ec 	ld.w	r10,r7[-20]
8000073e:	30 08       	mov	r8,0
80000740:	30 09       	mov	r9,0
80000742:	f4 e9 00 68 	st.d	r10[104],r8
			rqi(&tmptsk);
80000746:	ee c8 00 14 	sub	r8,r7,20
8000074a:	10 9c       	mov	r12,r8
8000074c:	f0 1f 00 1a 	mcall	800007b4 <timerISR+0xcc>
			interruptTask = true;
80000750:	30 18       	mov	r8,1
80000752:	ef 68 ff fb 	st.b	r7[-5],r8
	{
		systemTick++;
		
		interruptTask = false;
		
		while (DELAYQUEUE != NULL && DELAYQUEUE->delay <= systemTick)
80000756:	49 68       	lddpc	r8,800007ac <timerISR+0xc4>
80000758:	70 08       	ld.w	r8,r8[0x0]
8000075a:	58 08       	cp.w	r8,0
8000075c:	c0 d0       	breq	80000776 <timerISR+0x8e>
8000075e:	49 48       	lddpc	r8,800007ac <timerISR+0xc4>
80000760:	70 08       	ld.w	r8,r8[0x0]
80000762:	f0 ea 00 68 	ld.d	r10,r8[104]
80000766:	49 18       	lddpc	r8,800007a8 <timerISR+0xc0>
80000768:	f0 e8 00 00 	ld.d	r8,r8[0]
8000076c:	10 3a       	cp.w	r10,r8
8000076e:	f2 0b 13 00 	cpc	r11,r9
80000772:	fe 98 ff dd 	brls	8000072c <timerISR+0x44>
			removeDelayQueue(&DELAYQUEUE);
			tmptsk->delay = 0;
			rqi(&tmptsk);
			interruptTask = true;
		}
		if (interruptTask)
80000776:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000077a:	30 08       	mov	r8,0
8000077c:	f0 09 18 00 	cp.b	r9,r8
80000780:	c0 f0       	breq	8000079e <timerISR+0xb6>
		{
			priority = rqsearch();
80000782:	f0 1f 00 0e 	mcall	800007b8 <timerISR+0xd0>
80000786:	18 98       	mov	r8,r12
80000788:	ef 48 ff fc 	st.w	r7[-4],r8
			PREEMPTASK = PA[priority];
8000078c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000790:	48 b8       	lddpc	r8,800007bc <timerISR+0xd4>
80000792:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000796:	48 b8       	lddpc	r8,800007c0 <timerISR+0xd8>
80000798:	91 09       	st.w	r8[0x0],r9
			ROSA_yieldFromISR();
8000079a:	f0 1f 00 0b 	mcall	800007c4 <timerISR+0xdc>
		}
	}
	//timerClearInterrupt(); //Disabled until we know what it actually does
	
}
8000079e:	2f bd       	sub	sp,-20
800007a0:	e3 cd 40 80 	ldm	sp++,r7,lr
800007a4:	d6 03       	rete
800007a6:	00 00       	add	r0,r0
800007a8:	00 00       	add	r0,r0
800007aa:	05 a4       	ld.ub	r4,r2[0x2]
800007ac:	00 00       	add	r0,r0
800007ae:	05 a0       	ld.ub	r0,r2[0x2]
800007b0:	80 00       	ld.sh	r0,r0[0x0]
800007b2:	09 f8       	ld.ub	r8,r4[0x7]
800007b4:	80 00       	ld.sh	r0,r0[0x0]
800007b6:	01 d0       	ld.ub	r0,r0[0x5]
800007b8:	80 00       	ld.sh	r0,r0[0x0]
800007ba:	01 98       	ld.ub	r8,r0[0x1]
800007bc:	00 00       	add	r0,r0
800007be:	05 68       	ld.uh	r8,--r2
800007c0:	00 00       	add	r0,r0
800007c2:	05 98       	ld.ub	r8,r2[0x1]
800007c4:	80 00       	ld.sh	r0,r0[0x0]
800007c6:	01 68       	ld.uh	r8,--r0

800007c8 <ROSA_getTickCount>:
/*																		*/
/* Returns the current number of system ticks, relative to start		*/
/* of the system.                                                       */
/************************************************************************/
uint64_t ROSA_getTickCount()
{
800007c8:	eb cd 40 80 	pushm	r7,lr
800007cc:	1a 97       	mov	r7,sp
	return systemTick;
800007ce:	48 48       	lddpc	r8,800007dc <ROSA_getTickCount+0x14>
800007d0:	f0 e8 00 00 	ld.d	r8,r8[0]
}
800007d4:	10 9a       	mov	r10,r8
800007d6:	12 9b       	mov	r11,r9
800007d8:	e3 cd 80 80 	ldm	sp++,r7,pc
800007dc:	00 00       	add	r0,r0
800007de:	05 a4       	ld.ub	r4,r2[0x2]

800007e0 <ROSA_delay>:
/* ROSA_delay()															*/
/*																		*/
/* Suspends the calling task for the given number of ticks				*/
/************************************************************************/
int16_t ROSA_delay(uint64_t ticks)
{
800007e0:	eb cd 40 80 	pushm	r7,lr
800007e4:	1a 97       	mov	r7,sp
800007e6:	20 3d       	sub	sp,12
800007e8:	ee eb ff f4 	st.d	r7[-12],r10
	rqe(&EXECTASK);
800007ec:	49 5c       	lddpc	r12,80000840 <ROSA_delay+0x60>
800007ee:	f0 1f 00 16 	mcall	80000844 <ROSA_delay+0x64>
	insertDelayQueue(&EXECTASK, ROSA_getTickCount() + ticks);
800007f2:	f0 1f 00 16 	mcall	80000848 <ROSA_delay+0x68>
800007f6:	ee e8 ff f4 	ld.d	r8,r7[-12]
800007fa:	f4 08 00 08 	add	r8,r10,r8
800007fe:	f6 09 00 49 	adc	r9,r11,r9
80000802:	10 9a       	mov	r10,r8
80000804:	12 9b       	mov	r11,r9
80000806:	48 fc       	lddpc	r12,80000840 <ROSA_delay+0x60>
80000808:	f0 1f 00 11 	mcall	8000084c <ROSA_delay+0x6c>
	int priority = rqsearch();
8000080c:	f0 1f 00 11 	mcall	80000850 <ROSA_delay+0x70>
80000810:	18 98       	mov	r8,r12
80000812:	ef 48 ff fc 	st.w	r7[-4],r8
	if (priority >= 0)
80000816:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000081a:	58 08       	cp.w	r8,0
8000081c:	c0 c5       	brlt	80000834 <ROSA_delay+0x54>
	{
		PREEMPTASK = PA[priority];
8000081e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000822:	48 d8       	lddpc	r8,80000854 <ROSA_delay+0x74>
80000824:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000828:	48 c8       	lddpc	r8,80000858 <ROSA_delay+0x78>
8000082a:	91 09       	st.w	r8[0x0],r9
	} else {
		return -1;
	}
	ROSA_yield();
8000082c:	f0 1f 00 0c 	mcall	8000085c <ROSA_delay+0x7c>
	return 0;
80000830:	30 08       	mov	r8,0
80000832:	c0 28       	rjmp	80000836 <ROSA_delay+0x56>
	int priority = rqsearch();
	if (priority >= 0)
	{
		PREEMPTASK = PA[priority];
	} else {
		return -1;
80000834:	3f f8       	mov	r8,-1
	}
	ROSA_yield();
	return 0;
}
80000836:	10 9c       	mov	r12,r8
80000838:	2f dd       	sub	sp,-12
8000083a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000083e:	00 00       	add	r0,r0
80000840:	00 00       	add	r0,r0
80000842:	05 9c       	ld.ub	r12,r2[0x1]
80000844:	80 00       	ld.sh	r0,r0[0x0]
80000846:	02 64       	and	r4,r1
80000848:	80 00       	ld.sh	r0,r0[0x0]
8000084a:	07 c8       	ld.ub	r8,r3[0x4]
8000084c:	80 00       	ld.sh	r0,r0[0x0]
8000084e:	09 08       	ld.w	r8,r4++
80000850:	80 00       	ld.sh	r0,r0[0x0]
80000852:	01 98       	ld.ub	r8,r0[0x1]
80000854:	00 00       	add	r0,r0
80000856:	05 68       	ld.uh	r8,--r2
80000858:	00 00       	add	r0,r0
8000085a:	05 98       	ld.ub	r8,r2[0x1]
8000085c:	80 00       	ld.sh	r0,r0[0x0]
8000085e:	06 22       	rsub	r2,r3

80000860 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80000860:	eb cd 40 80 	pushm	r7,lr
80000864:	1a 97       	mov	r7,sp
80000866:	20 7d       	sub	sp,28
80000868:	ef 4c ff e4 	st.w	r7[-28],r12
	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
8000086c:	4a 48       	lddpc	r8,800008fc <timerPeriodSet+0x9c>
8000086e:	ee ca 00 18 	sub	r10,r7,24
80000872:	10 9b       	mov	r11,r8
80000874:	f6 e8 00 00 	ld.d	r8,r11[0]
80000878:	f4 e9 00 00 	st.d	r10[0],r8
8000087c:	f6 e8 00 08 	ld.d	r8,r11[8]
80000880:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000884:	30 48       	mov	r8,4
80000886:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
8000088a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000088e:	20 18       	sub	r8,1
80000890:	a3 68       	lsl	r8,0x2
80000892:	ee 08 00 08 	add	r8,r7,r8
80000896:	f0 f9 ff e8 	ld.w	r9,r8[-24]
8000089a:	e0 68 1b 00 	mov	r8,6912
8000089e:	ea 18 00 b7 	orh	r8,0xb7
800008a2:	f0 09 0c 08 	divs	r8,r8,r9
800008a6:	10 99       	mov	r9,r8
800008a8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800008ac:	b1 39       	mul	r9,r8
800008ae:	e0 68 4d d3 	mov	r8,19923
800008b2:	ea 18 10 62 	orh	r8,0x1062
800008b6:	f2 08 06 48 	mulu.d	r8,r9,r8
800008ba:	f2 08 16 06 	lsr	r8,r9,0x6
800008be:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
800008c2:	ee fc ff fc 	ld.w	r12,r7[-4]
800008c6:	f0 1f 00 0f 	mcall	80000900 <timerPeriodSet+0xa0>
	timerRCSet(rc);
800008ca:	ee fc ff f8 	ld.w	r12,r7[-8]
800008ce:	f0 1f 00 0e 	mcall	80000904 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
800008d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800008d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008da:	f2 08 02 4a 	mul	r10,r9,r8
800008de:	e0 68 9f 81 	mov	r8,40833
800008e2:	ea 18 16 5e 	orh	r8,0x165e
800008e6:	f4 08 04 48 	muls.d	r8,r10,r8
800008ea:	b5 49       	asr	r9,0x14
800008ec:	f4 08 14 1f 	asr	r8,r10,0x1f
800008f0:	f2 08 01 08 	sub	r8,r9,r8
}
800008f4:	10 9c       	mov	r12,r8
800008f6:	2f 9d       	sub	sp,-28
800008f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800008fc:	80 00       	ld.sh	r0,r0[0x0]
800008fe:	06 d8       	st.w	--r3,r8
80000900:	80 00       	ld.sh	r0,r0[0x0]
80000902:	10 58       	eor	r8,r8
80000904:	80 00       	ld.sh	r0,r0[0x0]
80000906:	10 42       	or	r2,r8

80000908 <insertDelayQueue>:
/*																		*/
/* Inserts the given task into the delay queue, before any tasks with	*/
/* a later deadline or lower priority									*/
/************************************************************************/
int insertDelayQueue(ROSA_taskHandle_t ** pth, uint64_t deadline)
{
80000908:	eb cd 40 80 	pushm	r7,lr
8000090c:	1a 97       	mov	r7,sp
8000090e:	20 5d       	sub	sp,20
80000910:	ef 4c ff f4 	st.w	r7[-12],r12
80000914:	ee eb ff ec 	st.d	r7[-20],r10
	(*pth)->delay = deadline;
80000918:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000091c:	70 0a       	ld.w	r10,r8[0x0]
8000091e:	ee e8 ff ec 	ld.d	r8,r7[-20]
80000922:	f4 e9 00 68 	st.d	r10[104],r8
	
	if (DELAYQUEUE == NULL) {
80000926:	4b 48       	lddpc	r8,800009f4 <insertDelayQueue+0xec>
80000928:	70 08       	ld.w	r8,r8[0x0]
8000092a:	58 08       	cp.w	r8,0
8000092c:	c0 c1       	brne	80000944 <insertDelayQueue+0x3c>
		DELAYQUEUE = *pth;
8000092e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000932:	70 09       	ld.w	r9,r8[0x0]
80000934:	4b 08       	lddpc	r8,800009f4 <insertDelayQueue+0xec>
80000936:	91 09       	st.w	r8[0x0],r9
		DELAYQUEUE->nexttcb = NULL;
80000938:	4a f8       	lddpc	r8,800009f4 <insertDelayQueue+0xec>
8000093a:	70 08       	ld.w	r8,r8[0x0]
8000093c:	30 09       	mov	r9,0
8000093e:	91 09       	st.w	r8[0x0],r9
		return 0;
80000940:	30 08       	mov	r8,0
80000942:	c5 48       	rjmp	800009ea <insertDelayQueue+0xe2>
	}
	
	ROSA_taskHandle_t * next = DELAYQUEUE;
80000944:	4a c8       	lddpc	r8,800009f4 <insertDelayQueue+0xec>
80000946:	70 08       	ld.w	r8,r8[0x0]
80000948:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_taskHandle_t * prev;

	while (next->delay <= (*pth)->delay || (next->priority >= (*pth)->priority && next->delay == (*pth)->delay))
8000094c:	c1 b8       	rjmp	80000982 <insertDelayQueue+0x7a>
	{
		prev = next;
8000094e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000952:	ef 48 ff fc 	st.w	r7[-4],r8
		next = next->nexttcb;
80000956:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000095a:	70 08       	ld.w	r8,r8[0x0]
8000095c:	ef 48 ff f8 	st.w	r7[-8],r8
		
		// Reach the end of the list
		if (next == NULL) {
80000960:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000964:	58 08       	cp.w	r8,0
80000966:	c0 e1       	brne	80000982 <insertDelayQueue+0x7a>
			prev->nexttcb = *pth;
80000968:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000096c:	70 09       	ld.w	r9,r8[0x0]
8000096e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000972:	91 09       	st.w	r8[0x0],r9
			(*pth)->nexttcb = NULL;
80000974:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000978:	70 08       	ld.w	r8,r8[0x0]
8000097a:	30 09       	mov	r9,0
8000097c:	91 09       	st.w	r8[0x0],r9
			return 0;
8000097e:	30 08       	mov	r8,0
80000980:	c3 58       	rjmp	800009ea <insertDelayQueue+0xe2>
	}
	
	ROSA_taskHandle_t * next = DELAYQUEUE;
	ROSA_taskHandle_t * prev;

	while (next->delay <= (*pth)->delay || (next->priority >= (*pth)->priority && next->delay == (*pth)->delay))
80000982:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000986:	f0 ea 00 68 	ld.d	r10,r8[104]
8000098a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000098e:	70 08       	ld.w	r8,r8[0x0]
80000990:	f0 e8 00 68 	ld.d	r8,r8[104]
80000994:	10 3a       	cp.w	r10,r8
80000996:	f2 0b 13 00 	cpc	r11,r9
8000099a:	fe 98 ff da 	brls	8000094e <insertDelayQueue+0x46>
8000099e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009a2:	f1 39 00 64 	ld.ub	r9,r8[100]
800009a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009aa:	70 08       	ld.w	r8,r8[0x0]
800009ac:	f1 38 00 64 	ld.ub	r8,r8[100]
800009b0:	f0 09 18 00 	cp.b	r9,r8
800009b4:	c0 e3       	brcs	800009d0 <insertDelayQueue+0xc8>
800009b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009ba:	f0 ea 00 68 	ld.d	r10,r8[104]
800009be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009c2:	70 08       	ld.w	r8,r8[0x0]
800009c4:	f0 e8 00 68 	ld.d	r8,r8[104]
800009c8:	10 3a       	cp.w	r10,r8
800009ca:	f2 0b 13 00 	cpc	r11,r9
800009ce:	cc 00       	breq	8000094e <insertDelayQueue+0x46>
			(*pth)->nexttcb = NULL;
			return 0;
		}
	}
	
	(*pth)->nexttcb = next;
800009d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009d4:	70 08       	ld.w	r8,r8[0x0]
800009d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009da:	91 09       	st.w	r8[0x0],r9
	prev->nexttcb = *pth;
800009dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009e0:	70 09       	ld.w	r9,r8[0x0]
800009e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009e6:	91 09       	st.w	r8[0x0],r9
	return 0;
800009e8:	30 08       	mov	r8,0
}
800009ea:	10 9c       	mov	r12,r8
800009ec:	2f bd       	sub	sp,-20
800009ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800009f2:	00 00       	add	r0,r0
800009f4:	00 00       	add	r0,r0
800009f6:	05 a0       	ld.ub	r0,r2[0x2]

800009f8 <removeDelayQueue>:
/* removeDelayQueue()													*/
/*																		*/
/* Removes the given task from the delay queue							*/
/************************************************************************/
int removeDelayQueue(ROSA_taskHandle_t ** pth)
{
800009f8:	eb cd 40 80 	pushm	r7,lr
800009fc:	1a 97       	mov	r7,sp
800009fe:	20 3d       	sub	sp,12
80000a00:	ef 4c ff f4 	st.w	r7[-12],r12
	// If there are no tasks in the delay queue, return error code -1
	if (DELAYQUEUE == NULL)
80000a04:	4a 48       	lddpc	r8,80000a94 <removeDelayQueue+0x9c>
80000a06:	70 08       	ld.w	r8,r8[0x0]
80000a08:	58 08       	cp.w	r8,0
80000a0a:	c0 31       	brne	80000a10 <removeDelayQueue+0x18>
	{
		return -1;
80000a0c:	3f f8       	mov	r8,-1
80000a0e:	c3 f8       	rjmp	80000a8c <removeDelayQueue+0x94>
	}
	// If there is only one task in the status queue and this is pth, remove it from the queue
	if (DELAYQUEUE->id == (*pth)->id)
80000a10:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a14:	70 09       	ld.w	r9,r8[0x0]
80000a16:	4a 08       	lddpc	r8,80000a94 <removeDelayQueue+0x9c>
80000a18:	70 08       	ld.w	r8,r8[0x0]
80000a1a:	10 39       	cp.w	r9,r8
80000a1c:	c1 21       	brne	80000a40 <removeDelayQueue+0x48>
	{
		if (DELAYQUEUE->nexttcb == NULL)
80000a1e:	49 e8       	lddpc	r8,80000a94 <removeDelayQueue+0x9c>
80000a20:	70 08       	ld.w	r8,r8[0x0]
80000a22:	70 08       	ld.w	r8,r8[0x0]
80000a24:	58 08       	cp.w	r8,0
80000a26:	c0 51       	brne	80000a30 <removeDelayQueue+0x38>
		{
			DELAYQUEUE = NULL; // Task was the only one in the list
80000a28:	49 b8       	lddpc	r8,80000a94 <removeDelayQueue+0x9c>
80000a2a:	30 09       	mov	r9,0
80000a2c:	91 09       	st.w	r8[0x0],r9
80000a2e:	c0 78       	rjmp	80000a3c <removeDelayQueue+0x44>
		} else {
			DELAYQUEUE = (*pth)->nexttcb;
80000a30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a34:	70 08       	ld.w	r8,r8[0x0]
80000a36:	70 09       	ld.w	r9,r8[0x0]
80000a38:	49 78       	lddpc	r8,80000a94 <removeDelayQueue+0x9c>
80000a3a:	91 09       	st.w	r8[0x0],r9
		}
		return 0;
80000a3c:	30 08       	mov	r8,0
80000a3e:	c2 78       	rjmp	80000a8c <removeDelayQueue+0x94>
	}
	// Else, find the task before pth and point it to the task after pth, removing it
	ROSA_taskHandle_t * next = DELAYQUEUE;
80000a40:	49 58       	lddpc	r8,80000a94 <removeDelayQueue+0x9c>
80000a42:	70 08       	ld.w	r8,r8[0x0]
80000a44:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_taskHandle_t * prev;
	while (next->id != (*pth)->id)
80000a48:	c1 08       	rjmp	80000a68 <removeDelayQueue+0x70>
	{
		prev = next;
80000a4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a4e:	ef 48 ff fc 	st.w	r7[-4],r8
		next = next->nexttcb;
80000a52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a56:	70 08       	ld.w	r8,r8[0x0]
80000a58:	ef 48 ff f8 	st.w	r7[-8],r8
		if(next == NULL)
80000a5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a60:	58 08       	cp.w	r8,0
80000a62:	c0 31       	brne	80000a68 <removeDelayQueue+0x70>
		{
			return -1; //Task is not in the list, so return error code -1
80000a64:	3f f8       	mov	r8,-1
80000a66:	c1 38       	rjmp	80000a8c <removeDelayQueue+0x94>
		return 0;
	}
	// Else, find the task before pth and point it to the task after pth, removing it
	ROSA_taskHandle_t * next = DELAYQUEUE;
	ROSA_taskHandle_t * prev;
	while (next->id != (*pth)->id)
80000a68:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a6c:	70 09       	ld.w	r9,r8[0x0]
80000a6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a72:	10 39       	cp.w	r9,r8
80000a74:	ce b1       	brne	80000a4a <removeDelayQueue+0x52>
		if(next == NULL)
		{
			return -1; //Task is not in the list, so return error code -1
		}
	}
	prev->nexttcb = next->nexttcb;
80000a76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a7a:	70 09       	ld.w	r9,r8[0x0]
80000a7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a80:	91 09       	st.w	r8[0x0],r9
	next->nexttcb = NULL;
80000a82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a86:	30 09       	mov	r9,0
80000a88:	91 09       	st.w	r8[0x0],r9
	return 0;
80000a8a:	30 08       	mov	r8,0
}
80000a8c:	10 9c       	mov	r12,r8
80000a8e:	2f dd       	sub	sp,-12
80000a90:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a94:	00 00       	add	r0,r0
80000a96:	05 a0       	ld.ub	r0,r2[0x2]

80000a98 <buttonInit>:
80000a98:	eb cd 40 80 	pushm	r7,lr
80000a9c:	1a 97       	mov	r7,sp
80000a9e:	30 1b       	mov	r11,1
80000aa0:	35 8c       	mov	r12,88
80000aa2:	f0 1f 00 07 	mcall	80000abc <buttonInit+0x24>
80000aa6:	30 1b       	mov	r11,1
80000aa8:	35 5c       	mov	r12,85
80000aaa:	f0 1f 00 05 	mcall	80000abc <buttonInit+0x24>
80000aae:	30 1b       	mov	r11,1
80000ab0:	35 2c       	mov	r12,82
80000ab2:	f0 1f 00 03 	mcall	80000abc <buttonInit+0x24>
80000ab6:	e3 cd 80 80 	ldm	sp++,r7,pc
80000aba:	00 00       	add	r0,r0
80000abc:	80 00       	ld.sh	r0,r0[0x0]
80000abe:	0a f8       	st.b	--r5,r8

80000ac0 <joystickInit>:
80000ac0:	eb cd 40 80 	pushm	r7,lr
80000ac4:	1a 97       	mov	r7,sp
80000ac6:	30 1b       	mov	r11,1
80000ac8:	31 bc       	mov	r12,27
80000aca:	f0 1f 00 0b 	mcall	80000af4 <joystickInit+0x34>
80000ace:	30 1b       	mov	r11,1
80000ad0:	31 9c       	mov	r12,25
80000ad2:	f0 1f 00 09 	mcall	80000af4 <joystickInit+0x34>
80000ad6:	30 1b       	mov	r11,1
80000ad8:	31 cc       	mov	r12,28
80000ada:	f0 1f 00 07 	mcall	80000af4 <joystickInit+0x34>
80000ade:	30 1b       	mov	r11,1
80000ae0:	31 4c       	mov	r12,20
80000ae2:	f0 1f 00 05 	mcall	80000af4 <joystickInit+0x34>
80000ae6:	30 1b       	mov	r11,1
80000ae8:	31 ac       	mov	r12,26
80000aea:	f0 1f 00 03 	mcall	80000af4 <joystickInit+0x34>
80000aee:	e3 cd 80 80 	ldm	sp++,r7,pc
80000af2:	00 00       	add	r0,r0
80000af4:	80 00       	ld.sh	r0,r0[0x0]
80000af6:	0a f8       	st.b	--r5,r8

80000af8 <gpioInit>:
80000af8:	eb cd 40 80 	pushm	r7,lr
80000afc:	1a 97       	mov	r7,sp
80000afe:	20 7d       	sub	sp,28
80000b00:	ef 4c ff ec 	st.w	r7[-20],r12
80000b04:	ef 4b ff e8 	st.w	r7[-24],r11
80000b08:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000b0c:	a5 58       	asr	r8,0x5
80000b0e:	ef 48 ff f4 	st.w	r7[-12],r8
80000b12:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000b16:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000b1a:	ef 48 ff fc 	st.w	r7[-4],r8
80000b1e:	30 19       	mov	r9,1
80000b20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b24:	f2 08 09 48 	lsl	r8,r9,r8
80000b28:	ef 48 ff f8 	st.w	r7[-8],r8
80000b2c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b30:	a9 68       	lsl	r8,0x8
80000b32:	e0 28 f0 00 	sub	r8,61440
80000b36:	ef 48 ff f0 	st.w	r7[-16],r8
80000b3a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b3e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b42:	91 19       	st.w	r8[0x4],r9
80000b44:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b48:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b4c:	91 69       	st.w	r8[0x18],r9
80000b4e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b52:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b56:	91 a9       	st.w	r8[0x28],r9
80000b58:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000b5c:	ef 48 ff e4 	st.w	r7[-28],r8
80000b60:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b64:	58 08       	cp.w	r8,0
80000b66:	c0 60       	breq	80000b72 <gpioInit+0x7a>
80000b68:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b6c:	58 18       	cp.w	r8,1
80000b6e:	c0 90       	breq	80000b80 <gpioInit+0x88>
80000b70:	c0 f8       	rjmp	80000b8e <gpioInit+0x96>
80000b72:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b76:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b7a:	f1 49 00 44 	st.w	r8[68],r9
80000b7e:	c0 e8       	rjmp	80000b9a <gpioInit+0xa2>
80000b80:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b84:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b88:	f1 49 00 48 	st.w	r8[72],r9
80000b8c:	c0 78       	rjmp	80000b9a <gpioInit+0xa2>
80000b8e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b92:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b96:	f1 49 00 48 	st.w	r8[72],r9
80000b9a:	2f 9d       	sub	sp,-28
80000b9c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000ba0 <gpioClear>:
80000ba0:	eb cd 40 80 	pushm	r7,lr
80000ba4:	1a 97       	mov	r7,sp
80000ba6:	20 5d       	sub	sp,20
80000ba8:	ef 4c ff ec 	st.w	r7[-20],r12
80000bac:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000bb0:	a5 58       	asr	r8,0x5
80000bb2:	ef 48 ff f4 	st.w	r7[-12],r8
80000bb6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000bba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000bbe:	ef 48 ff fc 	st.w	r7[-4],r8
80000bc2:	30 19       	mov	r9,1
80000bc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bc8:	f2 08 09 48 	lsl	r8,r9,r8
80000bcc:	ef 48 ff f8 	st.w	r7[-8],r8
80000bd0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bd4:	a9 68       	lsl	r8,0x8
80000bd6:	e0 28 f0 00 	sub	r8,61440
80000bda:	ef 48 ff f0 	st.w	r7[-16],r8
80000bde:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000be2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000be6:	f1 49 00 58 	st.w	r8[88],r9
80000bea:	2f bd       	sub	sp,-20
80000bec:	e3 cd 80 80 	ldm	sp++,r7,pc

80000bf0 <gpioSet>:
80000bf0:	eb cd 40 80 	pushm	r7,lr
80000bf4:	1a 97       	mov	r7,sp
80000bf6:	20 5d       	sub	sp,20
80000bf8:	ef 4c ff ec 	st.w	r7[-20],r12
80000bfc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c00:	a5 58       	asr	r8,0x5
80000c02:	ef 48 ff f4 	st.w	r7[-12],r8
80000c06:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c0a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000c0e:	ef 48 ff fc 	st.w	r7[-4],r8
80000c12:	30 19       	mov	r9,1
80000c14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c18:	f2 08 09 48 	lsl	r8,r9,r8
80000c1c:	ef 48 ff f8 	st.w	r7[-8],r8
80000c20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c24:	a9 68       	lsl	r8,0x8
80000c26:	e0 28 f0 00 	sub	r8,61440
80000c2a:	ef 48 ff f0 	st.w	r7[-16],r8
80000c2e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c32:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c36:	f1 49 00 54 	st.w	r8[84],r9
80000c3a:	2f bd       	sub	sp,-20
80000c3c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000c40 <ledInit>:
80000c40:	eb cd 40 80 	pushm	r7,lr
80000c44:	1a 97       	mov	r7,sp
80000c46:	20 9d       	sub	sp,36
80000c48:	49 e8       	lddpc	r8,80000cc0 <ledInit+0x80>
80000c4a:	ee cb 00 24 	sub	r11,r7,36
80000c4e:	10 9a       	mov	r10,r8
80000c50:	f4 e8 00 00 	ld.d	r8,r10[0]
80000c54:	f6 e9 00 00 	st.d	r11[0],r8
80000c58:	f4 e8 00 08 	ld.d	r8,r10[8]
80000c5c:	f6 e9 00 08 	st.d	r11[8],r8
80000c60:	f4 e8 00 10 	ld.d	r8,r10[16]
80000c64:	f6 e9 00 10 	st.d	r11[16],r8
80000c68:	f4 e8 00 18 	ld.d	r8,r10[24]
80000c6c:	f6 e9 00 18 	st.d	r11[24],r8
80000c70:	30 08       	mov	r8,0
80000c72:	ef 48 ff fc 	st.w	r7[-4],r8
80000c76:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c7a:	a3 68       	lsl	r8,0x2
80000c7c:	ee 08 00 08 	add	r8,r7,r8
80000c80:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000c84:	10 9c       	mov	r12,r8
80000c86:	f0 1f 00 10 	mcall	80000cc4 <ledInit+0x84>
80000c8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c8e:	a3 68       	lsl	r8,0x2
80000c90:	ee 08 00 08 	add	r8,r7,r8
80000c94:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000c98:	30 0b       	mov	r11,0
80000c9a:	10 9c       	mov	r12,r8
80000c9c:	f0 1f 00 0b 	mcall	80000cc8 <ledInit+0x88>
80000ca0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ca4:	58 78       	cp.w	r8,7
80000ca6:	5f 18       	srne	r8
80000ca8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000cac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cb0:	2f f8       	sub	r8,-1
80000cb2:	ef 48 ff fc 	st.w	r7[-4],r8
80000cb6:	58 09       	cp.w	r9,0
80000cb8:	cd f1       	brne	80000c76 <ledInit+0x36>
80000cba:	2f 7d       	sub	sp,-36
80000cbc:	e3 cd 80 80 	ldm	sp++,r7,pc
80000cc0:	80 00       	ld.sh	r0,r0[0x0]
80000cc2:	1e 00       	add	r0,pc
80000cc4:	80 00       	ld.sh	r0,r0[0x0]
80000cc6:	0c ec       	st.h	--r6,r12
80000cc8:	80 00       	ld.sh	r0,r0[0x0]
80000cca:	0a f8       	st.b	--r5,r8

80000ccc <ledOn>:
80000ccc:	eb cd 40 80 	pushm	r7,lr
80000cd0:	1a 97       	mov	r7,sp
80000cd2:	20 1d       	sub	sp,4
80000cd4:	ef 4c ff fc 	st.w	r7[-4],r12
80000cd8:	ee fc ff fc 	ld.w	r12,r7[-4]
80000cdc:	f0 1f 00 03 	mcall	80000ce8 <ledOn+0x1c>
80000ce0:	2f fd       	sub	sp,-4
80000ce2:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ce6:	00 00       	add	r0,r0
80000ce8:	80 00       	ld.sh	r0,r0[0x0]
80000cea:	0b a0       	ld.ub	r0,r5[0x2]

80000cec <ledOff>:
80000cec:	eb cd 40 80 	pushm	r7,lr
80000cf0:	1a 97       	mov	r7,sp
80000cf2:	20 1d       	sub	sp,4
80000cf4:	ef 4c ff fc 	st.w	r7[-4],r12
80000cf8:	ee fc ff fc 	ld.w	r12,r7[-4]
80000cfc:	f0 1f 00 03 	mcall	80000d08 <ledOff+0x1c>
80000d00:	2f fd       	sub	sp,-4
80000d02:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d06:	00 00       	add	r0,r0
80000d08:	80 00       	ld.sh	r0,r0[0x0]
80000d0a:	0b f0       	ld.ub	r0,r5[0x7]

80000d0c <potInit>:
80000d0c:	d3 01       	pushm	r11-r12
80000d0e:	e0 6c 10 00 	mov	r12,4096
80000d12:	ea 1c ff ff 	orh	r12,0xffff
80000d16:	31 6b       	mov	r11,22
80000d18:	99 2b       	st.w	r12[0x8],r11
80000d1a:	99 6b       	st.w	r12[0x18],r11
80000d1c:	99 6b       	st.w	r12[0x18],r11
80000d1e:	e0 6c 3c 00 	mov	r12,15360
80000d22:	ea 1c ff ff 	orh	r12,0xffff
80000d26:	30 1b       	mov	r11,1
80000d28:	99 0b       	st.w	r12[0x0],r11
80000d2a:	e0 6b 0f 1f 	mov	r11,3871
80000d2e:	b1 6b       	lsl	r11,0x10
80000d30:	99 1b       	st.w	r12[0x4],r11
80000d32:	30 2b       	mov	r11,2
80000d34:	99 4b       	st.w	r12[0x10],r11
80000d36:	d3 02       	popm	r11-r12
80000d38:	1c 9f       	mov	pc,lr

80000d3a <potGetValue>:
80000d3a:	d1 81       	pushm	r10-r11
80000d3c:	e0 6c 3c 00 	mov	r12,15360
80000d40:	ea 1c ff ff 	orh	r12,0xffff
80000d44:	30 2b       	mov	r11,2
80000d46:	99 0b       	st.w	r12[0x0],r11

80000d48 <a1>:
80000d48:	78 7a       	ld.w	r10,r12[0x1c]
80000d4a:	16 7a       	tst	r10,r11
80000d4c:	cf e0       	breq	80000d48 <a1>
80000d4e:	78 dc       	ld.w	r12,r12[0x34]
80000d50:	d1 82       	popm	r10-r11
80000d52:	1c 9f       	mov	pc,lr

80000d54 <usartReset>:
80000d54:	eb cd 40 80 	pushm	r7,lr
80000d58:	1a 97       	mov	r7,sp
80000d5a:	20 3d       	sub	sp,12
80000d5c:	ef 4c ff f8 	st.w	r7[-8],r12
80000d60:	f0 1f 00 16 	mcall	80000db8 <usartReset+0x64>
80000d64:	18 98       	mov	r8,r12
80000d66:	ef 48 ff fc 	st.w	r7[-4],r8
80000d6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d6e:	58 08       	cp.w	r8,0
80000d70:	c0 30       	breq	80000d76 <usartReset+0x22>
80000d72:	f0 1f 00 13 	mcall	80000dbc <usartReset+0x68>
80000d76:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d7a:	3f f8       	mov	r8,-1
80000d7c:	93 38       	st.w	r9[0xc],r8
80000d7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d82:	70 58       	ld.w	r8,r8[0x14]
80000d84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d88:	58 08       	cp.w	r8,0
80000d8a:	c0 30       	breq	80000d90 <usartReset+0x3c>
80000d8c:	f0 1f 00 0d 	mcall	80000dc0 <usartReset+0x6c>
80000d90:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d94:	30 08       	mov	r8,0
80000d96:	93 18       	st.w	r9[0x4],r8
80000d98:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d9c:	30 08       	mov	r8,0
80000d9e:	93 98       	st.w	r9[0x24],r8
80000da0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000da4:	30 08       	mov	r8,0
80000da6:	93 a8       	st.w	r9[0x28],r8
80000da8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000dac:	ea 68 61 0c 	mov	r8,680204
80000db0:	93 08       	st.w	r9[0x0],r8
80000db2:	2f dd       	sub	sp,-12
80000db4:	e3 cd 80 80 	ldm	sp++,r7,pc
80000db8:	80 00       	ld.sh	r0,r0[0x0]
80000dba:	1b 6e       	ld.uh	lr,--sp
80000dbc:	80 00       	ld.sh	r0,r0[0x0]
80000dbe:	1b 66       	ld.uh	r6,--sp
80000dc0:	80 00       	ld.sh	r0,r0[0x0]
80000dc2:	1b 6a       	ld.uh	r10,--sp

80000dc4 <usartSetBaudrate>:
80000dc4:	eb cd 40 80 	pushm	r7,lr
80000dc8:	1a 97       	mov	r7,sp
80000dca:	20 bd       	sub	sp,44
80000dcc:	ef 4c ff ec 	st.w	r7[-20],r12
80000dd0:	ef 4b ff e8 	st.w	r7[-24],r11
80000dd4:	ef 4a ff e4 	st.w	r7[-28],r10
80000dd8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000ddc:	f0 09 15 04 	lsl	r9,r8,0x4
80000de0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000de4:	10 39       	cp.w	r9,r8
80000de6:	e0 8b 00 06 	brhi	80000df2 <usartSetBaudrate+0x2e>
80000dea:	31 09       	mov	r9,16
80000dec:	ef 49 ff d4 	st.w	r7[-44],r9
80000df0:	c0 48       	rjmp	80000df8 <usartSetBaudrate+0x34>
80000df2:	30 88       	mov	r8,8
80000df4:	ef 48 ff d4 	st.w	r7[-44],r8
80000df8:	ee f9 ff d4 	ld.w	r9,r7[-44]
80000dfc:	ef 49 ff f0 	st.w	r7[-16],r9
80000e00:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000e04:	f0 0a 15 03 	lsl	r10,r8,0x3
80000e08:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000e0c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000e10:	f2 08 02 48 	mul	r8,r9,r8
80000e14:	a1 98       	lsr	r8,0x1
80000e16:	10 0a       	add	r10,r8
80000e18:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000e1c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000e20:	f2 08 02 48 	mul	r8,r9,r8
80000e24:	f4 08 0d 08 	divu	r8,r10,r8
80000e28:	ef 48 ff f4 	st.w	r7[-12],r8
80000e2c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e30:	a3 98       	lsr	r8,0x3
80000e32:	ef 48 ff f8 	st.w	r7[-8],r8
80000e36:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e3a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000e3e:	ef 48 ff fc 	st.w	r7[-4],r8
80000e42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e46:	58 08       	cp.w	r8,0
80000e48:	c0 70       	breq	80000e56 <usartSetBaudrate+0x92>
80000e4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e4e:	e0 48 ff ff 	cp.w	r8,65535
80000e52:	e0 88 00 06 	brls	80000e5e <usartSetBaudrate+0x9a>
80000e56:	30 18       	mov	r8,1
80000e58:	ef 48 ff d8 	st.w	r7[-40],r8
80000e5c:	c2 c8       	rjmp	80000eb4 <usartSetBaudrate+0xf0>
80000e5e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e62:	70 18       	ld.w	r8,r8[0x4]
80000e64:	10 99       	mov	r9,r8
80000e66:	e4 19 ff f7 	andh	r9,0xfff7
80000e6a:	e0 19 fe cf 	andl	r9,0xfecf
80000e6e:	ef 49 ff dc 	st.w	r7[-36],r9
80000e72:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e76:	59 08       	cp.w	r8,16
80000e78:	c0 60       	breq	80000e84 <usartSetBaudrate+0xc0>
80000e7a:	e8 68 00 00 	mov	r8,524288
80000e7e:	ef 48 ff e0 	st.w	r7[-32],r8
80000e82:	c0 48       	rjmp	80000e8a <usartSetBaudrate+0xc6>
80000e84:	30 09       	mov	r9,0
80000e86:	ef 49 ff e0 	st.w	r7[-32],r9
80000e8a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80000e8e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80000e92:	10 49       	or	r9,r8
80000e94:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e98:	91 19       	st.w	r8[0x4],r9
80000e9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e9e:	f0 09 15 10 	lsl	r9,r8,0x10
80000ea2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ea6:	10 49       	or	r9,r8
80000ea8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000eac:	91 89       	st.w	r8[0x20],r9
80000eae:	30 09       	mov	r9,0
80000eb0:	ef 49 ff d8 	st.w	r7[-40],r9
80000eb4:	ee f8 ff d8 	ld.w	r8,r7[-40]
80000eb8:	10 9c       	mov	r12,r8
80000eba:	2f 5d       	sub	sp,-44
80000ebc:	e3 cd 80 80 	ldm	sp++,r7,pc

80000ec0 <usartInit>:
80000ec0:	eb cd 40 80 	pushm	r7,lr
80000ec4:	1a 97       	mov	r7,sp
80000ec6:	20 4d       	sub	sp,16
80000ec8:	ef 4c ff f8 	st.w	r7[-8],r12
80000ecc:	ef 4b ff f4 	st.w	r7[-12],r11
80000ed0:	ef 4a ff f0 	st.w	r7[-16],r10
80000ed4:	fe 78 10 00 	mov	r8,-61440
80000ed8:	ef 48 ff fc 	st.w	r7[-4],r8
80000edc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000ee0:	30 18       	mov	r8,1
80000ee2:	93 28       	st.w	r9[0x8],r8
80000ee4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000ee8:	30 28       	mov	r8,2
80000eea:	93 28       	st.w	r9[0x8],r8
80000eec:	ee fc ff f8 	ld.w	r12,r7[-8]
80000ef0:	f0 1f 00 3b 	mcall	80000fdc <usartInit+0x11c>
80000ef4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000ef8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000efc:	70 08       	ld.w	r8,r8[0x0]
80000efe:	12 9a       	mov	r10,r9
80000f00:	10 9b       	mov	r11,r8
80000f02:	ee fc ff f8 	ld.w	r12,r7[-8]
80000f06:	f0 1f 00 37 	mcall	80000fe0 <usartInit+0x120>
80000f0a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f0e:	11 c9       	ld.ub	r9,r8[0x4]
80000f10:	30 98       	mov	r8,9
80000f12:	f0 09 18 00 	cp.b	r9,r8
80000f16:	c0 a1       	brne	80000f2a <usartInit+0x6a>
80000f18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f1c:	70 18       	ld.w	r8,r8[0x4]
80000f1e:	10 99       	mov	r9,r8
80000f20:	b1 b9       	sbr	r9,0x11
80000f22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f26:	91 19       	st.w	r8[0x4],r9
80000f28:	c0 d8       	rjmp	80000f42 <usartInit+0x82>
80000f2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f2e:	70 19       	ld.w	r9,r8[0x4]
80000f30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f34:	11 c8       	ld.ub	r8,r8[0x4]
80000f36:	20 58       	sub	r8,5
80000f38:	a7 68       	lsl	r8,0x6
80000f3a:	10 49       	or	r9,r8
80000f3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f40:	91 19       	st.w	r8[0x4],r9
80000f42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f46:	70 1a       	ld.w	r10,r8[0x4]
80000f48:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f4c:	11 d8       	ld.ub	r8,r8[0x5]
80000f4e:	f0 09 15 09 	lsl	r9,r8,0x9
80000f52:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f56:	f1 38 00 08 	ld.ub	r8,r8[8]
80000f5a:	af 68       	lsl	r8,0xe
80000f5c:	f3 e8 10 08 	or	r8,r9,r8
80000f60:	f5 e8 10 09 	or	r9,r10,r8
80000f64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f68:	91 19       	st.w	r8[0x4],r9
80000f6a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f6e:	90 39       	ld.sh	r9,r8[0x6]
80000f70:	30 28       	mov	r8,2
80000f72:	f0 09 19 00 	cp.h	r9,r8
80000f76:	e0 88 00 14 	brls	80000f9e <usartInit+0xde>
80000f7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f7e:	70 18       	ld.w	r8,r8[0x4]
80000f80:	10 99       	mov	r9,r8
80000f82:	ad b9       	sbr	r9,0xd
80000f84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f88:	91 19       	st.w	r8[0x4],r9
80000f8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f8e:	90 38       	ld.sh	r8,r8[0x6]
80000f90:	5c 78       	castu.h	r8
80000f92:	20 28       	sub	r8,2
80000f94:	10 99       	mov	r9,r8
80000f96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f9a:	91 a9       	st.w	r8[0x28],r9
80000f9c:	c0 d8       	rjmp	80000fb6 <usartInit+0xf6>
80000f9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fa2:	70 19       	ld.w	r9,r8[0x4]
80000fa4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000fa8:	90 38       	ld.sh	r8,r8[0x6]
80000faa:	5c 78       	castu.h	r8
80000fac:	ad 68       	lsl	r8,0xc
80000fae:	10 49       	or	r9,r8
80000fb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fb4:	91 19       	st.w	r8[0x4],r9
80000fb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fba:	70 18       	ld.w	r8,r8[0x4]
80000fbc:	10 99       	mov	r9,r8
80000fbe:	e0 19 ff f0 	andl	r9,0xfff0
80000fc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fc6:	91 19       	st.w	r8[0x4],r9
80000fc8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000fcc:	35 08       	mov	r8,80
80000fce:	93 08       	st.w	r9[0x0],r8
80000fd0:	30 08       	mov	r8,0
80000fd2:	10 9c       	mov	r12,r8
80000fd4:	2f cd       	sub	sp,-16
80000fd6:	e3 cd 80 80 	ldm	sp++,r7,pc
80000fda:	00 00       	add	r0,r0
80000fdc:	80 00       	ld.sh	r0,r0[0x0]
80000fde:	0d 54       	ld.sh	r4,--r6
80000fe0:	80 00       	ld.sh	r0,r0[0x0]
80000fe2:	0d c4       	ld.ub	r4,r6[0x4]

80000fe4 <timerInit>:
80000fe4:	d5 01       	pushm	r11,lr
80000fe6:	d2 01       	pushm	r12
80000fe8:	f0 1f 00 28 	mcall	80001088 <timerClearInterrupt+0x10>
80000fec:	f0 1f 00 28 	mcall	8000108c <timerClearInterrupt+0x14>
80000ff0:	e0 6c 38 00 	mov	r12,14336
80000ff4:	ea 1c ff ff 	orh	r12,0xffff
80000ff8:	e0 6b c0 00 	mov	r11,49152
80000ffc:	ea 1b 00 00 	orh	r11,0x0
80001000:	99 1b       	st.w	r12[0x4],r11
80001002:	30 1b       	mov	r11,1
80001004:	a5 6b       	lsl	r11,0x4
80001006:	99 9b       	st.w	r12[0x24],r11
80001008:	d2 02       	popm	r12
8000100a:	f0 1f 00 22 	mcall	80001090 <timerClearInterrupt+0x18>
8000100e:	d5 02       	popm	r11,lr
80001010:	1c 9f       	mov	pc,lr

80001012 <timerReset>:
80001012:	d3 01       	pushm	r11-r12
80001014:	e0 6c 38 00 	mov	r12,14336
80001018:	ea 1c ff ff 	orh	r12,0xffff
8000101c:	30 5b       	mov	r11,5
8000101e:	99 0b       	st.w	r12[0x0],r11
80001020:	e0 6b 00 08 	mov	r11,8
80001024:	ea 1b 00 00 	orh	r11,0x0
80001028:	76 0b       	ld.w	r11,r11[0x0]
8000102a:	99 7b       	st.w	r12[0x1c],r11
8000102c:	d3 02       	popm	r11-r12
8000102e:	1c 9f       	mov	pc,lr

80001030 <timerStop>:
80001030:	d3 01       	pushm	r11-r12
80001032:	e0 6c 38 00 	mov	r12,14336
80001036:	ea 1c ff ff 	orh	r12,0xffff
8000103a:	30 2b       	mov	r11,2
8000103c:	99 0b       	st.w	r12[0x0],r11
8000103e:	d3 02       	popm	r11-r12
80001040:	1c 9f       	mov	pc,lr

80001042 <timerRCSet>:
80001042:	d3 01       	pushm	r11-r12
80001044:	49 4b       	lddpc	r11,80001094 <timerClearInterrupt+0x1c>
80001046:	97 0c       	st.w	r11[0x0],r12
80001048:	e0 6c 38 00 	mov	r12,14336
8000104c:	ea 1c ff ff 	orh	r12,0xffff
80001050:	76 0b       	ld.w	r11,r11[0x0]
80001052:	99 7b       	st.w	r12[0x1c],r11
80001054:	d3 02       	popm	r11-r12
80001056:	1c 9f       	mov	pc,lr

80001058 <timerPrescaleSet>:
80001058:	d3 81       	pushm	r10-r12
8000105a:	49 0b       	lddpc	r11,80001098 <timerClearInterrupt+0x20>
8000105c:	97 0c       	st.w	r11[0x0],r12
8000105e:	e0 6c 38 00 	mov	r12,14336
80001062:	ea 1c ff ff 	orh	r12,0xffff
80001066:	78 1a       	ld.w	r10,r12[0x4]
80001068:	3f 8b       	mov	r11,-8
8000106a:	16 6a       	and	r10,r11
8000106c:	48 bb       	lddpc	r11,80001098 <timerClearInterrupt+0x20>
8000106e:	76 0b       	ld.w	r11,r11[0x0]
80001070:	14 4b       	or	r11,r10
80001072:	99 1b       	st.w	r12[0x4],r11
80001074:	d3 82       	popm	r10-r12
80001076:	1c 9f       	mov	pc,lr

80001078 <timerClearInterrupt>:
80001078:	d2 01       	pushm	r12
8000107a:	e0 6c 38 00 	mov	r12,14336
8000107e:	ea 1c ff ff 	orh	r12,0xffff
80001082:	78 8c       	ld.w	r12,r12[0x20]
80001084:	d2 02       	popm	r12
80001086:	1c 9f       	mov	pc,lr
80001088:	80 00       	ld.sh	r0,r0[0x0]
8000108a:	1b 66       	ld.uh	r6,--sp
8000108c:	80 00       	ld.sh	r0,r0[0x0]
8000108e:	10 78       	tst	r8,r8
80001090:	80 00       	ld.sh	r0,r0[0x0]
80001092:	08 60       	and	r0,r4
80001094:	00 00       	add	r0,r0
80001096:	00 08       	add	r8,r0
80001098:	00 00       	add	r0,r0
8000109a:	00 0c       	add	r12,r0

8000109c <_stext>:
8000109c:	49 7d       	lddpc	sp,800010f8 <udata_end+0x4>
8000109e:	49 80       	lddpc	r0,800010fc <udata_end+0x8>
800010a0:	1a d0       	st.w	--sp,r0
800010a2:	e5 cd 20 00 	ldmts	sp,sp
800010a6:	1b 00       	ld.w	r0,sp++
800010a8:	49 60       	lddpc	r0,80001100 <udata_end+0xc>
800010aa:	e3 b0 00 01 	mtsr	0x4,r0
800010ae:	d5 53       	csrf	0x15
800010b0:	e0 6c 0c 00 	mov	r12,3072
800010b4:	ea 1c ff ff 	orh	r12,0xffff
800010b8:	e0 6b 01 07 	mov	r11,263
800010bc:	99 ab       	st.w	r12[0x28],r11
800010be:	30 4b       	mov	r11,4
800010c0:	99 0b       	st.w	r12[0x0],r11
800010c2:	e0 6a 00 80 	mov	r10,128

800010c6 <xw8>:
800010c6:	79 5b       	ld.w	r11,r12[0x54]
800010c8:	14 7b       	tst	r11,r10
800010ca:	cf e0       	breq	800010c6 <xw8>
800010cc:	30 5b       	mov	r11,5
800010ce:	99 0b       	st.w	r12[0x0],r11

800010d0 <idata_>:
800010d0:	48 d0       	lddpc	r0,80001104 <udata_end+0x10>
800010d2:	48 e1       	lddpc	r1,80001108 <udata_end+0x14>
800010d4:	02 30       	cp.w	r0,r1
800010d6:	c0 62       	brcc	800010e2 <idata_end>
800010d8:	48 d2       	lddpc	r2,8000110c <udata_end+0x18>

800010da <idata_loop>:
800010da:	05 04       	ld.w	r4,r2++
800010dc:	00 a4       	st.w	r0++,r4
800010de:	02 30       	cp.w	r0,r1
800010e0:	cf d3       	brcs	800010da <idata_loop>

800010e2 <idata_end>:
800010e2:	48 c0       	lddpc	r0,80001110 <udata_end+0x1c>
800010e4:	48 c1       	lddpc	r1,80001114 <udata_end+0x20>
800010e6:	02 30       	cp.w	r0,r1
800010e8:	c0 62       	brcc	800010f4 <udata_end>
800010ea:	30 02       	mov	r2,0
800010ec:	30 03       	mov	r3,0

800010ee <udata_loop>:
800010ee:	00 a2       	st.w	r0++,r2
800010f0:	02 30       	cp.w	r0,r1
800010f2:	cf e3       	brcs	800010ee <udata_loop>

800010f4 <udata_end>:
800010f4:	48 9f       	lddpc	pc,80001118 <udata_end+0x24>
800010f6:	00 00       	add	r0,r0
800010f8:	00 01       	add	r1,r0
800010fa:	00 00       	add	r0,r0
800010fc:	00 00       	add	r0,r0
800010fe:	f0 00       	*unknown*
80001100:	80 00       	ld.sh	r0,r0[0x0]
80001102:	1a 00       	add	r0,sp
80001104:	00 00       	add	r0,r0
80001106:	00 08       	add	r8,r0
80001108:	00 00       	add	r0,r0
8000110a:	05 18       	ld.sh	r8,r2++
8000110c:	80 00       	ld.sh	r0,r0[0x0]
8000110e:	1e 88       	andn	r8,pc
80001110:	00 00       	add	r0,r0
80001112:	05 18       	ld.sh	r8,r2++
80001114:	00 00       	add	r0,r0
80001116:	05 b0       	ld.ub	r0,r2[0x3]
80001118:	80 00       	ld.sh	r0,r0[0x0]
8000111a:	00 ec       	st.h	--r0,r12

8000111c <calloc>:
8000111c:	d4 01       	pushm	lr
8000111e:	48 48       	lddpc	r8,8000112c <calloc+0x10>
80001120:	16 9a       	mov	r10,r11
80001122:	18 9b       	mov	r11,r12
80001124:	70 0c       	ld.w	r12,r8[0x0]
80001126:	f0 1f 00 03 	mcall	80001130 <calloc+0x14>
8000112a:	d8 02       	popm	pc
8000112c:	00 00       	add	r0,r0
8000112e:	01 00       	ld.w	r0,r0++
80001130:	80 00       	ld.sh	r0,r0[0x0]
80001132:	11 34       	ld.ub	r4,r8++

80001134 <_calloc_r>:
80001134:	d4 21       	pushm	r4-r7,lr
80001136:	f4 0b 02 4b 	mul	r11,r10,r11
8000113a:	f0 1f 00 15 	mcall	8000118c <_calloc_r+0x58>
8000113e:	18 97       	mov	r7,r12
80001140:	c2 30       	breq	80001186 <_calloc_r+0x52>
80001142:	f8 fa ff fc 	ld.w	r10,r12[-4]
80001146:	e0 1a ff fc 	andl	r10,0xfffc
8000114a:	20 4a       	sub	r10,4
8000114c:	e0 4a 00 24 	cp.w	r10,36
80001150:	e0 8b 00 18 	brhi	80001180 <_calloc_r+0x4c>
80001154:	18 98       	mov	r8,r12
80001156:	59 3a       	cp.w	r10,19
80001158:	e0 88 00 0f 	brls	80001176 <_calloc_r+0x42>
8000115c:	30 09       	mov	r9,0
8000115e:	10 a9       	st.w	r8++,r9
80001160:	10 a9       	st.w	r8++,r9
80001162:	59 ba       	cp.w	r10,27
80001164:	e0 88 00 09 	brls	80001176 <_calloc_r+0x42>
80001168:	10 a9       	st.w	r8++,r9
8000116a:	10 a9       	st.w	r8++,r9
8000116c:	e0 4a 00 24 	cp.w	r10,36
80001170:	c0 31       	brne	80001176 <_calloc_r+0x42>
80001172:	10 a9       	st.w	r8++,r9
80001174:	10 a9       	st.w	r8++,r9
80001176:	30 09       	mov	r9,0
80001178:	10 a9       	st.w	r8++,r9
8000117a:	91 19       	st.w	r8[0x4],r9
8000117c:	91 09       	st.w	r8[0x0],r9
8000117e:	c0 48       	rjmp	80001186 <_calloc_r+0x52>
80001180:	30 0b       	mov	r11,0
80001182:	f0 1f 00 04 	mcall	80001190 <_calloc_r+0x5c>
80001186:	0e 9c       	mov	r12,r7
80001188:	d8 22       	popm	r4-r7,pc
8000118a:	00 00       	add	r0,r0
8000118c:	80 00       	ld.sh	r0,r0[0x0]
8000118e:	11 ac       	ld.ub	r12,r8[0x2]
80001190:	80 00       	ld.sh	r0,r0[0x0]
80001192:	15 fc       	ld.ub	r12,r10[0x7]

80001194 <malloc>:
80001194:	d4 01       	pushm	lr
80001196:	48 48       	lddpc	r8,800011a4 <malloc+0x10>
80001198:	18 9b       	mov	r11,r12
8000119a:	70 0c       	ld.w	r12,r8[0x0]
8000119c:	f0 1f 00 03 	mcall	800011a8 <malloc+0x14>
800011a0:	d8 02       	popm	pc
800011a2:	00 00       	add	r0,r0
800011a4:	00 00       	add	r0,r0
800011a6:	01 00       	ld.w	r0,r0++
800011a8:	80 00       	ld.sh	r0,r0[0x0]
800011aa:	11 ac       	ld.ub	r12,r8[0x2]

800011ac <_malloc_r>:
800011ac:	d4 31       	pushm	r0-r7,lr
800011ae:	f6 c8 ff f5 	sub	r8,r11,-11
800011b2:	18 95       	mov	r5,r12
800011b4:	10 97       	mov	r7,r8
800011b6:	e0 17 ff f8 	andl	r7,0xfff8
800011ba:	59 68       	cp.w	r8,22
800011bc:	f9 b7 08 10 	movls	r7,16
800011c0:	16 37       	cp.w	r7,r11
800011c2:	5f 38       	srlo	r8
800011c4:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800011c8:	c0 50       	breq	800011d2 <_malloc_r+0x26>
800011ca:	30 c8       	mov	r8,12
800011cc:	99 38       	st.w	r12[0xc],r8
800011ce:	e0 8f 01 f3 	bral	800015b4 <_malloc_r+0x408>
800011d2:	f0 1f 00 50 	mcall	80001310 <_malloc_r+0x164>
800011d6:	e0 47 01 f7 	cp.w	r7,503
800011da:	e0 8b 00 1c 	brhi	80001212 <_malloc_r+0x66>
800011de:	ee 03 16 03 	lsr	r3,r7,0x3
800011e2:	4c d8       	lddpc	r8,80001314 <_malloc_r+0x168>
800011e4:	f0 03 00 38 	add	r8,r8,r3<<0x3
800011e8:	70 36       	ld.w	r6,r8[0xc]
800011ea:	10 36       	cp.w	r6,r8
800011ec:	c0 61       	brne	800011f8 <_malloc_r+0x4c>
800011ee:	ec c8 ff f8 	sub	r8,r6,-8
800011f2:	70 36       	ld.w	r6,r8[0xc]
800011f4:	10 36       	cp.w	r6,r8
800011f6:	c0 c0       	breq	8000120e <_malloc_r+0x62>
800011f8:	6c 18       	ld.w	r8,r6[0x4]
800011fa:	e0 18 ff fc 	andl	r8,0xfffc
800011fe:	6c 3a       	ld.w	r10,r6[0xc]
80001200:	ec 08 00 09 	add	r9,r6,r8
80001204:	0a 9c       	mov	r12,r5
80001206:	6c 28       	ld.w	r8,r6[0x8]
80001208:	95 28       	st.w	r10[0x8],r8
8000120a:	91 3a       	st.w	r8[0xc],r10
8000120c:	c4 68       	rjmp	80001298 <_malloc_r+0xec>
8000120e:	2f e3       	sub	r3,-2
80001210:	c4 c8       	rjmp	800012a8 <_malloc_r+0xfc>
80001212:	ee 03 16 09 	lsr	r3,r7,0x9
80001216:	c0 41       	brne	8000121e <_malloc_r+0x72>
80001218:	ee 03 16 03 	lsr	r3,r7,0x3
8000121c:	c2 68       	rjmp	80001268 <_malloc_r+0xbc>
8000121e:	58 43       	cp.w	r3,4
80001220:	e0 8b 00 06 	brhi	8000122c <_malloc_r+0x80>
80001224:	ee 03 16 06 	lsr	r3,r7,0x6
80001228:	2c 83       	sub	r3,-56
8000122a:	c1 f8       	rjmp	80001268 <_malloc_r+0xbc>
8000122c:	59 43       	cp.w	r3,20
8000122e:	e0 8b 00 04 	brhi	80001236 <_malloc_r+0x8a>
80001232:	2a 53       	sub	r3,-91
80001234:	c1 a8       	rjmp	80001268 <_malloc_r+0xbc>
80001236:	e0 43 00 54 	cp.w	r3,84
8000123a:	e0 8b 00 06 	brhi	80001246 <_malloc_r+0x9a>
8000123e:	ee 03 16 0c 	lsr	r3,r7,0xc
80001242:	29 23       	sub	r3,-110
80001244:	c1 28       	rjmp	80001268 <_malloc_r+0xbc>
80001246:	e0 43 01 54 	cp.w	r3,340
8000124a:	e0 8b 00 06 	brhi	80001256 <_malloc_r+0xaa>
8000124e:	ee 03 16 0f 	lsr	r3,r7,0xf
80001252:	28 93       	sub	r3,-119
80001254:	c0 a8       	rjmp	80001268 <_malloc_r+0xbc>
80001256:	e0 43 05 54 	cp.w	r3,1364
8000125a:	e0 88 00 04 	brls	80001262 <_malloc_r+0xb6>
8000125e:	37 e3       	mov	r3,126
80001260:	c0 48       	rjmp	80001268 <_malloc_r+0xbc>
80001262:	ee 03 16 12 	lsr	r3,r7,0x12
80001266:	28 43       	sub	r3,-124
80001268:	4a ba       	lddpc	r10,80001314 <_malloc_r+0x168>
8000126a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000126e:	74 36       	ld.w	r6,r10[0xc]
80001270:	c1 98       	rjmp	800012a2 <_malloc_r+0xf6>
80001272:	6c 19       	ld.w	r9,r6[0x4]
80001274:	e0 19 ff fc 	andl	r9,0xfffc
80001278:	f2 07 01 0b 	sub	r11,r9,r7
8000127c:	58 fb       	cp.w	r11,15
8000127e:	e0 8a 00 04 	brle	80001286 <_malloc_r+0xda>
80001282:	20 13       	sub	r3,1
80001284:	c1 18       	rjmp	800012a6 <_malloc_r+0xfa>
80001286:	6c 38       	ld.w	r8,r6[0xc]
80001288:	58 0b       	cp.w	r11,0
8000128a:	c0 b5       	brlt	800012a0 <_malloc_r+0xf4>
8000128c:	6c 2a       	ld.w	r10,r6[0x8]
8000128e:	ec 09 00 09 	add	r9,r6,r9
80001292:	0a 9c       	mov	r12,r5
80001294:	91 2a       	st.w	r8[0x8],r10
80001296:	95 38       	st.w	r10[0xc],r8
80001298:	72 18       	ld.w	r8,r9[0x4]
8000129a:	a1 a8       	sbr	r8,0x0
8000129c:	93 18       	st.w	r9[0x4],r8
8000129e:	cb c8       	rjmp	80001416 <_malloc_r+0x26a>
800012a0:	10 96       	mov	r6,r8
800012a2:	14 36       	cp.w	r6,r10
800012a4:	ce 71       	brne	80001272 <_malloc_r+0xc6>
800012a6:	2f f3       	sub	r3,-1
800012a8:	49 ba       	lddpc	r10,80001314 <_malloc_r+0x168>
800012aa:	f4 cc ff f8 	sub	r12,r10,-8
800012ae:	78 26       	ld.w	r6,r12[0x8]
800012b0:	18 36       	cp.w	r6,r12
800012b2:	c6 e0       	breq	8000138e <_malloc_r+0x1e2>
800012b4:	6c 19       	ld.w	r9,r6[0x4]
800012b6:	e0 19 ff fc 	andl	r9,0xfffc
800012ba:	f2 07 01 08 	sub	r8,r9,r7
800012be:	58 f8       	cp.w	r8,15
800012c0:	e0 89 00 90 	brgt	800013e0 <_malloc_r+0x234>
800012c4:	99 3c       	st.w	r12[0xc],r12
800012c6:	99 2c       	st.w	r12[0x8],r12
800012c8:	58 08       	cp.w	r8,0
800012ca:	c0 55       	brlt	800012d4 <_malloc_r+0x128>
800012cc:	ec 09 00 09 	add	r9,r6,r9
800012d0:	0a 9c       	mov	r12,r5
800012d2:	ce 3b       	rjmp	80001298 <_malloc_r+0xec>
800012d4:	e0 49 01 ff 	cp.w	r9,511
800012d8:	e0 8b 00 13 	brhi	800012fe <_malloc_r+0x152>
800012dc:	a3 99       	lsr	r9,0x3
800012de:	f4 09 00 38 	add	r8,r10,r9<<0x3
800012e2:	70 2b       	ld.w	r11,r8[0x8]
800012e4:	8d 38       	st.w	r6[0xc],r8
800012e6:	8d 2b       	st.w	r6[0x8],r11
800012e8:	97 36       	st.w	r11[0xc],r6
800012ea:	91 26       	st.w	r8[0x8],r6
800012ec:	a3 49       	asr	r9,0x2
800012ee:	74 18       	ld.w	r8,r10[0x4]
800012f0:	30 1b       	mov	r11,1
800012f2:	f6 09 09 49 	lsl	r9,r11,r9
800012f6:	f1 e9 10 09 	or	r9,r8,r9
800012fa:	95 19       	st.w	r10[0x4],r9
800012fc:	c4 98       	rjmp	8000138e <_malloc_r+0x1e2>
800012fe:	f2 0a 16 09 	lsr	r10,r9,0x9
80001302:	58 4a       	cp.w	r10,4
80001304:	e0 8b 00 0a 	brhi	80001318 <_malloc_r+0x16c>
80001308:	f2 0a 16 06 	lsr	r10,r9,0x6
8000130c:	2c 8a       	sub	r10,-56
8000130e:	c2 38       	rjmp	80001354 <_malloc_r+0x1a8>
80001310:	80 00       	ld.sh	r0,r0[0x0]
80001312:	16 0a       	add	r10,r11
80001314:	00 00       	add	r0,r0
80001316:	01 04       	ld.w	r4,r0++
80001318:	59 4a       	cp.w	r10,20
8000131a:	e0 8b 00 04 	brhi	80001322 <_malloc_r+0x176>
8000131e:	2a 5a       	sub	r10,-91
80001320:	c1 a8       	rjmp	80001354 <_malloc_r+0x1a8>
80001322:	e0 4a 00 54 	cp.w	r10,84
80001326:	e0 8b 00 06 	brhi	80001332 <_malloc_r+0x186>
8000132a:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000132e:	29 2a       	sub	r10,-110
80001330:	c1 28       	rjmp	80001354 <_malloc_r+0x1a8>
80001332:	e0 4a 01 54 	cp.w	r10,340
80001336:	e0 8b 00 06 	brhi	80001342 <_malloc_r+0x196>
8000133a:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000133e:	28 9a       	sub	r10,-119
80001340:	c0 a8       	rjmp	80001354 <_malloc_r+0x1a8>
80001342:	e0 4a 05 54 	cp.w	r10,1364
80001346:	e0 88 00 04 	brls	8000134e <_malloc_r+0x1a2>
8000134a:	37 ea       	mov	r10,126
8000134c:	c0 48       	rjmp	80001354 <_malloc_r+0x1a8>
8000134e:	f2 0a 16 12 	lsr	r10,r9,0x12
80001352:	28 4a       	sub	r10,-124
80001354:	4c 8b       	lddpc	r11,80001474 <_malloc_r+0x2c8>
80001356:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000135a:	68 28       	ld.w	r8,r4[0x8]
8000135c:	08 38       	cp.w	r8,r4
8000135e:	c0 e1       	brne	8000137a <_malloc_r+0x1ce>
80001360:	76 19       	ld.w	r9,r11[0x4]
80001362:	a3 4a       	asr	r10,0x2
80001364:	30 1e       	mov	lr,1
80001366:	fc 0a 09 4a 	lsl	r10,lr,r10
8000136a:	f3 ea 10 0a 	or	r10,r9,r10
8000136e:	10 99       	mov	r9,r8
80001370:	97 1a       	st.w	r11[0x4],r10
80001372:	c0 a8       	rjmp	80001386 <_malloc_r+0x1da>
80001374:	70 28       	ld.w	r8,r8[0x8]
80001376:	08 38       	cp.w	r8,r4
80001378:	c0 60       	breq	80001384 <_malloc_r+0x1d8>
8000137a:	70 1a       	ld.w	r10,r8[0x4]
8000137c:	e0 1a ff fc 	andl	r10,0xfffc
80001380:	14 39       	cp.w	r9,r10
80001382:	cf 93       	brcs	80001374 <_malloc_r+0x1c8>
80001384:	70 39       	ld.w	r9,r8[0xc]
80001386:	8d 39       	st.w	r6[0xc],r9
80001388:	8d 28       	st.w	r6[0x8],r8
8000138a:	91 36       	st.w	r8[0xc],r6
8000138c:	93 26       	st.w	r9[0x8],r6
8000138e:	e6 08 14 02 	asr	r8,r3,0x2
80001392:	30 1b       	mov	r11,1
80001394:	4b 84       	lddpc	r4,80001474 <_malloc_r+0x2c8>
80001396:	f6 08 09 4b 	lsl	r11,r11,r8
8000139a:	68 18       	ld.w	r8,r4[0x4]
8000139c:	10 3b       	cp.w	r11,r8
8000139e:	e0 8b 00 6f 	brhi	8000147c <_malloc_r+0x2d0>
800013a2:	f7 e8 00 09 	and	r9,r11,r8
800013a6:	c0 b1       	brne	800013bc <_malloc_r+0x210>
800013a8:	e0 13 ff fc 	andl	r3,0xfffc
800013ac:	a1 7b       	lsl	r11,0x1
800013ae:	2f c3       	sub	r3,-4
800013b0:	c0 38       	rjmp	800013b6 <_malloc_r+0x20a>
800013b2:	2f c3       	sub	r3,-4
800013b4:	a1 7b       	lsl	r11,0x1
800013b6:	f7 e8 00 09 	and	r9,r11,r8
800013ba:	cf c0       	breq	800013b2 <_malloc_r+0x206>
800013bc:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800013c0:	06 92       	mov	r2,r3
800013c2:	1c 91       	mov	r1,lr
800013c4:	62 36       	ld.w	r6,r1[0xc]
800013c6:	c2 e8       	rjmp	80001422 <_malloc_r+0x276>
800013c8:	6c 1a       	ld.w	r10,r6[0x4]
800013ca:	e0 1a ff fc 	andl	r10,0xfffc
800013ce:	f4 07 01 08 	sub	r8,r10,r7
800013d2:	58 f8       	cp.w	r8,15
800013d4:	e0 8a 00 15 	brle	800013fe <_malloc_r+0x252>
800013d8:	6c 3a       	ld.w	r10,r6[0xc]
800013da:	6c 29       	ld.w	r9,r6[0x8]
800013dc:	95 29       	st.w	r10[0x8],r9
800013de:	93 3a       	st.w	r9[0xc],r10
800013e0:	0e 99       	mov	r9,r7
800013e2:	ec 07 00 07 	add	r7,r6,r7
800013e6:	a1 a9       	sbr	r9,0x0
800013e8:	99 37       	st.w	r12[0xc],r7
800013ea:	99 27       	st.w	r12[0x8],r7
800013ec:	8d 19       	st.w	r6[0x4],r9
800013ee:	ee 08 09 08 	st.w	r7[r8],r8
800013f2:	8f 2c       	st.w	r7[0x8],r12
800013f4:	8f 3c       	st.w	r7[0xc],r12
800013f6:	a1 a8       	sbr	r8,0x0
800013f8:	0a 9c       	mov	r12,r5
800013fa:	8f 18       	st.w	r7[0x4],r8
800013fc:	c0 d8       	rjmp	80001416 <_malloc_r+0x26a>
800013fe:	6c 39       	ld.w	r9,r6[0xc]
80001400:	58 08       	cp.w	r8,0
80001402:	c0 f5       	brlt	80001420 <_malloc_r+0x274>
80001404:	ec 0a 00 0a 	add	r10,r6,r10
80001408:	74 18       	ld.w	r8,r10[0x4]
8000140a:	a1 a8       	sbr	r8,0x0
8000140c:	0a 9c       	mov	r12,r5
8000140e:	95 18       	st.w	r10[0x4],r8
80001410:	6c 28       	ld.w	r8,r6[0x8]
80001412:	93 28       	st.w	r9[0x8],r8
80001414:	91 39       	st.w	r8[0xc],r9
80001416:	f0 1f 00 19 	mcall	80001478 <_malloc_r+0x2cc>
8000141a:	ec cc ff f8 	sub	r12,r6,-8
8000141e:	d8 32       	popm	r0-r7,pc
80001420:	12 96       	mov	r6,r9
80001422:	02 36       	cp.w	r6,r1
80001424:	cd 21       	brne	800013c8 <_malloc_r+0x21c>
80001426:	2f f2       	sub	r2,-1
80001428:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000142c:	c0 30       	breq	80001432 <_malloc_r+0x286>
8000142e:	2f 81       	sub	r1,-8
80001430:	cc ab       	rjmp	800013c4 <_malloc_r+0x218>
80001432:	1c 98       	mov	r8,lr
80001434:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001438:	c0 81       	brne	80001448 <_malloc_r+0x29c>
8000143a:	68 19       	ld.w	r9,r4[0x4]
8000143c:	f6 08 11 ff 	rsub	r8,r11,-1
80001440:	f3 e8 00 08 	and	r8,r9,r8
80001444:	89 18       	st.w	r4[0x4],r8
80001446:	c0 78       	rjmp	80001454 <_malloc_r+0x2a8>
80001448:	f0 c9 00 08 	sub	r9,r8,8
8000144c:	20 13       	sub	r3,1
8000144e:	70 08       	ld.w	r8,r8[0x0]
80001450:	12 38       	cp.w	r8,r9
80001452:	cf 10       	breq	80001434 <_malloc_r+0x288>
80001454:	a1 7b       	lsl	r11,0x1
80001456:	68 18       	ld.w	r8,r4[0x4]
80001458:	10 3b       	cp.w	r11,r8
8000145a:	e0 8b 00 11 	brhi	8000147c <_malloc_r+0x2d0>
8000145e:	58 0b       	cp.w	r11,0
80001460:	c0 e0       	breq	8000147c <_malloc_r+0x2d0>
80001462:	04 93       	mov	r3,r2
80001464:	c0 38       	rjmp	8000146a <_malloc_r+0x2be>
80001466:	2f c3       	sub	r3,-4
80001468:	a1 7b       	lsl	r11,0x1
8000146a:	f7 e8 00 09 	and	r9,r11,r8
8000146e:	ca 71       	brne	800013bc <_malloc_r+0x210>
80001470:	cf bb       	rjmp	80001466 <_malloc_r+0x2ba>
80001472:	00 00       	add	r0,r0
80001474:	00 00       	add	r0,r0
80001476:	01 04       	ld.w	r4,r0++
80001478:	80 00       	ld.sh	r0,r0[0x0]
8000147a:	16 0c       	add	r12,r11
8000147c:	68 23       	ld.w	r3,r4[0x8]
8000147e:	66 12       	ld.w	r2,r3[0x4]
80001480:	e0 12 ff fc 	andl	r2,0xfffc
80001484:	0e 32       	cp.w	r2,r7
80001486:	5f 39       	srlo	r9
80001488:	e4 07 01 08 	sub	r8,r2,r7
8000148c:	58 f8       	cp.w	r8,15
8000148e:	5f aa       	srle	r10
80001490:	f5 e9 10 09 	or	r9,r10,r9
80001494:	e0 80 00 a2 	breq	800015d8 <_malloc_r+0x42c>
80001498:	4c 88       	lddpc	r8,800015b8 <_malloc_r+0x40c>
8000149a:	70 01       	ld.w	r1,r8[0x0]
8000149c:	4c 88       	lddpc	r8,800015bc <_malloc_r+0x410>
8000149e:	2f 01       	sub	r1,-16
800014a0:	70 08       	ld.w	r8,r8[0x0]
800014a2:	0e 01       	add	r1,r7
800014a4:	5b f8       	cp.w	r8,-1
800014a6:	c0 40       	breq	800014ae <_malloc_r+0x302>
800014a8:	28 11       	sub	r1,-127
800014aa:	e0 11 ff 80 	andl	r1,0xff80
800014ae:	02 9b       	mov	r11,r1
800014b0:	0a 9c       	mov	r12,r5
800014b2:	f0 1f 00 44 	mcall	800015c0 <_malloc_r+0x414>
800014b6:	18 96       	mov	r6,r12
800014b8:	5b fc       	cp.w	r12,-1
800014ba:	c6 e0       	breq	80001596 <_malloc_r+0x3ea>
800014bc:	e6 02 00 08 	add	r8,r3,r2
800014c0:	10 3c       	cp.w	r12,r8
800014c2:	c0 32       	brcc	800014c8 <_malloc_r+0x31c>
800014c4:	08 33       	cp.w	r3,r4
800014c6:	c6 81       	brne	80001596 <_malloc_r+0x3ea>
800014c8:	4b fa       	lddpc	r10,800015c4 <_malloc_r+0x418>
800014ca:	74 09       	ld.w	r9,r10[0x0]
800014cc:	e2 09 00 09 	add	r9,r1,r9
800014d0:	95 09       	st.w	r10[0x0],r9
800014d2:	10 36       	cp.w	r6,r8
800014d4:	c0 a1       	brne	800014e8 <_malloc_r+0x33c>
800014d6:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800014da:	c0 71       	brne	800014e8 <_malloc_r+0x33c>
800014dc:	e2 02 00 02 	add	r2,r1,r2
800014e0:	68 28       	ld.w	r8,r4[0x8]
800014e2:	a1 a2       	sbr	r2,0x0
800014e4:	91 12       	st.w	r8[0x4],r2
800014e6:	c4 c8       	rjmp	8000157e <_malloc_r+0x3d2>
800014e8:	4b 5a       	lddpc	r10,800015bc <_malloc_r+0x410>
800014ea:	74 0b       	ld.w	r11,r10[0x0]
800014ec:	5b fb       	cp.w	r11,-1
800014ee:	c0 31       	brne	800014f4 <_malloc_r+0x348>
800014f0:	95 06       	st.w	r10[0x0],r6
800014f2:	c0 68       	rjmp	800014fe <_malloc_r+0x352>
800014f4:	ec 09 00 09 	add	r9,r6,r9
800014f8:	4b 3a       	lddpc	r10,800015c4 <_malloc_r+0x418>
800014fa:	10 19       	sub	r9,r8
800014fc:	95 09       	st.w	r10[0x0],r9
800014fe:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80001502:	f0 09 11 08 	rsub	r9,r8,8
80001506:	58 08       	cp.w	r8,0
80001508:	f2 08 17 10 	movne	r8,r9
8000150c:	ed d8 e1 06 	addne	r6,r6,r8
80001510:	28 08       	sub	r8,-128
80001512:	ec 01 00 01 	add	r1,r6,r1
80001516:	0a 9c       	mov	r12,r5
80001518:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000151c:	f0 01 01 01 	sub	r1,r8,r1
80001520:	02 9b       	mov	r11,r1
80001522:	f0 1f 00 28 	mcall	800015c0 <_malloc_r+0x414>
80001526:	4a 88       	lddpc	r8,800015c4 <_malloc_r+0x418>
80001528:	5b fc       	cp.w	r12,-1
8000152a:	ec 0c 17 00 	moveq	r12,r6
8000152e:	f9 b1 00 00 	moveq	r1,0
80001532:	70 09       	ld.w	r9,r8[0x0]
80001534:	0c 1c       	sub	r12,r6
80001536:	89 26       	st.w	r4[0x8],r6
80001538:	02 0c       	add	r12,r1
8000153a:	12 01       	add	r1,r9
8000153c:	a1 ac       	sbr	r12,0x0
8000153e:	91 01       	st.w	r8[0x0],r1
80001540:	8d 1c       	st.w	r6[0x4],r12
80001542:	08 33       	cp.w	r3,r4
80001544:	c1 d0       	breq	8000157e <_malloc_r+0x3d2>
80001546:	58 f2       	cp.w	r2,15
80001548:	e0 8b 00 05 	brhi	80001552 <_malloc_r+0x3a6>
8000154c:	30 18       	mov	r8,1
8000154e:	8d 18       	st.w	r6[0x4],r8
80001550:	c2 38       	rjmp	80001596 <_malloc_r+0x3ea>
80001552:	30 59       	mov	r9,5
80001554:	20 c2       	sub	r2,12
80001556:	e0 12 ff f8 	andl	r2,0xfff8
8000155a:	e6 02 00 08 	add	r8,r3,r2
8000155e:	91 29       	st.w	r8[0x8],r9
80001560:	91 19       	st.w	r8[0x4],r9
80001562:	66 18       	ld.w	r8,r3[0x4]
80001564:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001568:	e5 e8 10 08 	or	r8,r2,r8
8000156c:	87 18       	st.w	r3[0x4],r8
8000156e:	58 f2       	cp.w	r2,15
80001570:	e0 88 00 07 	brls	8000157e <_malloc_r+0x3d2>
80001574:	e6 cb ff f8 	sub	r11,r3,-8
80001578:	0a 9c       	mov	r12,r5
8000157a:	f0 1f 00 14 	mcall	800015c8 <_malloc_r+0x41c>
8000157e:	49 49       	lddpc	r9,800015cc <_malloc_r+0x420>
80001580:	72 0a       	ld.w	r10,r9[0x0]
80001582:	49 18       	lddpc	r8,800015c4 <_malloc_r+0x418>
80001584:	70 08       	ld.w	r8,r8[0x0]
80001586:	14 38       	cp.w	r8,r10
80001588:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000158c:	49 19       	lddpc	r9,800015d0 <_malloc_r+0x424>
8000158e:	72 0a       	ld.w	r10,r9[0x0]
80001590:	14 38       	cp.w	r8,r10
80001592:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001596:	68 28       	ld.w	r8,r4[0x8]
80001598:	70 18       	ld.w	r8,r8[0x4]
8000159a:	e0 18 ff fc 	andl	r8,0xfffc
8000159e:	0e 38       	cp.w	r8,r7
800015a0:	5f 39       	srlo	r9
800015a2:	0e 18       	sub	r8,r7
800015a4:	58 f8       	cp.w	r8,15
800015a6:	5f aa       	srle	r10
800015a8:	f5 e9 10 09 	or	r9,r10,r9
800015ac:	c1 60       	breq	800015d8 <_malloc_r+0x42c>
800015ae:	0a 9c       	mov	r12,r5
800015b0:	f0 1f 00 09 	mcall	800015d4 <_malloc_r+0x428>
800015b4:	d8 3a       	popm	r0-r7,pc,r12=0
800015b6:	00 00       	add	r0,r0
800015b8:	00 00       	add	r0,r0
800015ba:	05 20       	ld.uh	r0,r2++
800015bc:	00 00       	add	r0,r0
800015be:	05 10       	ld.sh	r0,r2++
800015c0:	80 00       	ld.sh	r0,r0[0x0]
800015c2:	16 10       	sub	r0,r11
800015c4:	00 00       	add	r0,r0
800015c6:	05 24       	ld.uh	r4,r2++
800015c8:	80 00       	ld.sh	r0,r0[0x0]
800015ca:	17 2c       	ld.uh	r12,r11++
800015cc:	00 00       	add	r0,r0
800015ce:	05 1c       	ld.sh	r12,r2++
800015d0:	00 00       	add	r0,r0
800015d2:	05 18       	ld.sh	r8,r2++
800015d4:	80 00       	ld.sh	r0,r0[0x0]
800015d6:	16 0c       	add	r12,r11
800015d8:	68 26       	ld.w	r6,r4[0x8]
800015da:	a1 a8       	sbr	r8,0x0
800015dc:	0e 99       	mov	r9,r7
800015de:	a1 a9       	sbr	r9,0x0
800015e0:	8d 19       	st.w	r6[0x4],r9
800015e2:	ec 07 00 07 	add	r7,r6,r7
800015e6:	0a 9c       	mov	r12,r5
800015e8:	89 27       	st.w	r4[0x8],r7
800015ea:	8f 18       	st.w	r7[0x4],r8
800015ec:	f0 1f 00 03 	mcall	800015f8 <_malloc_r+0x44c>
800015f0:	ec cc ff f8 	sub	r12,r6,-8
800015f4:	d8 32       	popm	r0-r7,pc
800015f6:	00 00       	add	r0,r0
800015f8:	80 00       	ld.sh	r0,r0[0x0]
800015fa:	16 0c       	add	r12,r11

800015fc <memset>:
800015fc:	18 98       	mov	r8,r12
800015fe:	c0 38       	rjmp	80001604 <memset+0x8>
80001600:	10 cb       	st.b	r8++,r11
80001602:	20 1a       	sub	r10,1
80001604:	58 0a       	cp.w	r10,0
80001606:	cf d1       	brne	80001600 <memset+0x4>
80001608:	5e fc       	retal	r12

8000160a <__malloc_lock>:
8000160a:	5e fc       	retal	r12

8000160c <__malloc_unlock>:
8000160c:	5e fc       	retal	r12
8000160e:	d7 03       	nop

80001610 <_sbrk_r>:
80001610:	d4 21       	pushm	r4-r7,lr
80001612:	30 08       	mov	r8,0
80001614:	18 97       	mov	r7,r12
80001616:	48 76       	lddpc	r6,80001630 <_sbrk_r+0x20>
80001618:	16 9c       	mov	r12,r11
8000161a:	8d 08       	st.w	r6[0x0],r8
8000161c:	f0 1f 00 06 	mcall	80001634 <_sbrk_r+0x24>
80001620:	5b fc       	cp.w	r12,-1
80001622:	c0 51       	brne	8000162c <_sbrk_r+0x1c>
80001624:	6c 08       	ld.w	r8,r6[0x0]
80001626:	58 08       	cp.w	r8,0
80001628:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000162c:	d8 22       	popm	r4-r7,pc
8000162e:	00 00       	add	r0,r0
80001630:	00 00       	add	r0,r0
80001632:	05 ac       	ld.ub	r12,r2[0x2]
80001634:	80 00       	ld.sh	r0,r0[0x0]
80001636:	16 38       	cp.w	r8,r11

80001638 <_sbrk>:
80001638:	d4 01       	pushm	lr
8000163a:	48 c8       	lddpc	r8,80001668 <_sbrk+0x30>
8000163c:	70 09       	ld.w	r9,r8[0x0]
8000163e:	58 09       	cp.w	r9,0
80001640:	c0 31       	brne	80001646 <_sbrk+0xe>
80001642:	48 b9       	lddpc	r9,8000166c <_sbrk+0x34>
80001644:	91 09       	st.w	r8[0x0],r9
80001646:	48 99       	lddpc	r9,80001668 <_sbrk+0x30>
80001648:	48 aa       	lddpc	r10,80001670 <_sbrk+0x38>
8000164a:	72 08       	ld.w	r8,r9[0x0]
8000164c:	f0 0c 00 0c 	add	r12,r8,r12
80001650:	14 3c       	cp.w	r12,r10
80001652:	e0 8b 00 04 	brhi	8000165a <_sbrk+0x22>
80001656:	93 0c       	st.w	r9[0x0],r12
80001658:	c0 68       	rjmp	80001664 <_sbrk+0x2c>
8000165a:	f0 1f 00 07 	mcall	80001674 <_sbrk+0x3c>
8000165e:	30 c8       	mov	r8,12
80001660:	99 08       	st.w	r12[0x0],r8
80001662:	3f f8       	mov	r8,-1
80001664:	10 9c       	mov	r12,r8
80001666:	d8 02       	popm	pc
80001668:	00 00       	add	r0,r0
8000166a:	05 4c       	ld.w	r12,--r2
8000166c:	00 00       	add	r0,r0
8000166e:	05 b0       	ld.ub	r0,r2[0x3]
80001670:	00 00       	add	r0,r0
80001672:	e0 00       	*unknown*
80001674:	80 00       	ld.sh	r0,r0[0x0]
80001676:	16 78       	tst	r8,r11

80001678 <__errno>:
80001678:	48 28       	lddpc	r8,80001680 <__errno+0x8>
8000167a:	70 0c       	ld.w	r12,r8[0x0]
8000167c:	2f 4c       	sub	r12,-12
8000167e:	5e fc       	retal	r12
80001680:	00 00       	add	r0,r0
80001682:	01 00       	ld.w	r0,r0++

80001684 <_malloc_trim_r>:
80001684:	d4 21       	pushm	r4-r7,lr
80001686:	16 95       	mov	r5,r11
80001688:	18 97       	mov	r7,r12
8000168a:	f0 1f 00 23 	mcall	80001714 <_malloc_trim_r+0x90>
8000168e:	4a 34       	lddpc	r4,80001718 <_malloc_trim_r+0x94>
80001690:	68 28       	ld.w	r8,r4[0x8]
80001692:	70 16       	ld.w	r6,r8[0x4]
80001694:	e0 16 ff fc 	andl	r6,0xfffc
80001698:	ec c8 ff 91 	sub	r8,r6,-111
8000169c:	f0 05 01 05 	sub	r5,r8,r5
800016a0:	e0 15 ff 80 	andl	r5,0xff80
800016a4:	ea c5 00 80 	sub	r5,r5,128
800016a8:	e0 45 00 7f 	cp.w	r5,127
800016ac:	e0 8a 00 23 	brle	800016f2 <_malloc_trim_r+0x6e>
800016b0:	30 0b       	mov	r11,0
800016b2:	0e 9c       	mov	r12,r7
800016b4:	f0 1f 00 1a 	mcall	8000171c <_malloc_trim_r+0x98>
800016b8:	68 28       	ld.w	r8,r4[0x8]
800016ba:	0c 08       	add	r8,r6
800016bc:	10 3c       	cp.w	r12,r8
800016be:	c1 a1       	brne	800016f2 <_malloc_trim_r+0x6e>
800016c0:	ea 0b 11 00 	rsub	r11,r5,0
800016c4:	0e 9c       	mov	r12,r7
800016c6:	f0 1f 00 16 	mcall	8000171c <_malloc_trim_r+0x98>
800016ca:	5b fc       	cp.w	r12,-1
800016cc:	c1 71       	brne	800016fa <_malloc_trim_r+0x76>
800016ce:	30 0b       	mov	r11,0
800016d0:	0e 9c       	mov	r12,r7
800016d2:	f0 1f 00 13 	mcall	8000171c <_malloc_trim_r+0x98>
800016d6:	68 28       	ld.w	r8,r4[0x8]
800016d8:	f8 08 01 09 	sub	r9,r12,r8
800016dc:	58 f9       	cp.w	r9,15
800016de:	e0 8a 00 0a 	brle	800016f2 <_malloc_trim_r+0x6e>
800016e2:	a1 a9       	sbr	r9,0x0
800016e4:	91 19       	st.w	r8[0x4],r9
800016e6:	48 f8       	lddpc	r8,80001720 <_malloc_trim_r+0x9c>
800016e8:	70 09       	ld.w	r9,r8[0x0]
800016ea:	48 f8       	lddpc	r8,80001724 <_malloc_trim_r+0xa0>
800016ec:	f8 09 01 09 	sub	r9,r12,r9
800016f0:	91 09       	st.w	r8[0x0],r9
800016f2:	0e 9c       	mov	r12,r7
800016f4:	f0 1f 00 0d 	mcall	80001728 <_malloc_trim_r+0xa4>
800016f8:	d8 2a       	popm	r4-r7,pc,r12=0
800016fa:	68 28       	ld.w	r8,r4[0x8]
800016fc:	0a 16       	sub	r6,r5
800016fe:	a1 a6       	sbr	r6,0x0
80001700:	91 16       	st.w	r8[0x4],r6
80001702:	48 98       	lddpc	r8,80001724 <_malloc_trim_r+0xa0>
80001704:	70 09       	ld.w	r9,r8[0x0]
80001706:	0a 19       	sub	r9,r5
80001708:	0e 9c       	mov	r12,r7
8000170a:	91 09       	st.w	r8[0x0],r9
8000170c:	f0 1f 00 07 	mcall	80001728 <_malloc_trim_r+0xa4>
80001710:	da 2a       	popm	r4-r7,pc,r12=1
80001712:	00 00       	add	r0,r0
80001714:	80 00       	ld.sh	r0,r0[0x0]
80001716:	16 0a       	add	r10,r11
80001718:	00 00       	add	r0,r0
8000171a:	01 04       	ld.w	r4,r0++
8000171c:	80 00       	ld.sh	r0,r0[0x0]
8000171e:	16 10       	sub	r0,r11
80001720:	00 00       	add	r0,r0
80001722:	05 10       	ld.sh	r0,r2++
80001724:	00 00       	add	r0,r0
80001726:	05 24       	ld.uh	r4,r2++
80001728:	80 00       	ld.sh	r0,r0[0x0]
8000172a:	16 0c       	add	r12,r11

8000172c <_free_r>:
8000172c:	d4 21       	pushm	r4-r7,lr
8000172e:	16 96       	mov	r6,r11
80001730:	18 97       	mov	r7,r12
80001732:	58 0b       	cp.w	r11,0
80001734:	e0 80 00 c8 	breq	800018c4 <_free_r+0x198>
80001738:	f0 1f 00 4c 	mcall	80001868 <_free_r+0x13c>
8000173c:	20 86       	sub	r6,8
8000173e:	4c ca       	lddpc	r10,8000186c <_free_r+0x140>
80001740:	6c 18       	ld.w	r8,r6[0x4]
80001742:	74 2e       	ld.w	lr,r10[0x8]
80001744:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001748:	a1 c8       	cbr	r8,0x0
8000174a:	ec 08 00 09 	add	r9,r6,r8
8000174e:	72 1b       	ld.w	r11,r9[0x4]
80001750:	e0 1b ff fc 	andl	r11,0xfffc
80001754:	1c 39       	cp.w	r9,lr
80001756:	c1 d1       	brne	80001790 <_free_r+0x64>
80001758:	f6 08 00 08 	add	r8,r11,r8
8000175c:	58 0c       	cp.w	r12,0
8000175e:	c0 81       	brne	8000176e <_free_r+0x42>
80001760:	6c 09       	ld.w	r9,r6[0x0]
80001762:	12 16       	sub	r6,r9
80001764:	12 08       	add	r8,r9
80001766:	6c 3b       	ld.w	r11,r6[0xc]
80001768:	6c 29       	ld.w	r9,r6[0x8]
8000176a:	97 29       	st.w	r11[0x8],r9
8000176c:	93 3b       	st.w	r9[0xc],r11
8000176e:	10 99       	mov	r9,r8
80001770:	95 26       	st.w	r10[0x8],r6
80001772:	a1 a9       	sbr	r9,0x0
80001774:	8d 19       	st.w	r6[0x4],r9
80001776:	4b f9       	lddpc	r9,80001870 <_free_r+0x144>
80001778:	72 09       	ld.w	r9,r9[0x0]
8000177a:	12 38       	cp.w	r8,r9
8000177c:	c0 63       	brcs	80001788 <_free_r+0x5c>
8000177e:	4b e8       	lddpc	r8,80001874 <_free_r+0x148>
80001780:	0e 9c       	mov	r12,r7
80001782:	70 0b       	ld.w	r11,r8[0x0]
80001784:	f0 1f 00 3d 	mcall	80001878 <_free_r+0x14c>
80001788:	0e 9c       	mov	r12,r7
8000178a:	f0 1f 00 3d 	mcall	8000187c <_free_r+0x150>
8000178e:	d8 22       	popm	r4-r7,pc
80001790:	93 1b       	st.w	r9[0x4],r11
80001792:	58 0c       	cp.w	r12,0
80001794:	c0 30       	breq	8000179a <_free_r+0x6e>
80001796:	30 0c       	mov	r12,0
80001798:	c1 08       	rjmp	800017b8 <_free_r+0x8c>
8000179a:	6c 0e       	ld.w	lr,r6[0x0]
8000179c:	f4 c5 ff f8 	sub	r5,r10,-8
800017a0:	1c 16       	sub	r6,lr
800017a2:	1c 08       	add	r8,lr
800017a4:	6c 2e       	ld.w	lr,r6[0x8]
800017a6:	0a 3e       	cp.w	lr,r5
800017a8:	f9 bc 00 01 	moveq	r12,1
800017ac:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800017b0:	eb fe 1a 02 	st.wne	r5[0x8],lr
800017b4:	fd f5 1a 03 	st.wne	lr[0xc],r5
800017b8:	f2 0b 00 0e 	add	lr,r9,r11
800017bc:	7c 1e       	ld.w	lr,lr[0x4]
800017be:	ed be 00 00 	bld	lr,0x0
800017c2:	c1 30       	breq	800017e8 <_free_r+0xbc>
800017c4:	16 08       	add	r8,r11
800017c6:	58 0c       	cp.w	r12,0
800017c8:	c0 c1       	brne	800017e0 <_free_r+0xb4>
800017ca:	4a 9e       	lddpc	lr,8000186c <_free_r+0x140>
800017cc:	72 2b       	ld.w	r11,r9[0x8]
800017ce:	2f 8e       	sub	lr,-8
800017d0:	1c 3b       	cp.w	r11,lr
800017d2:	c0 71       	brne	800017e0 <_free_r+0xb4>
800017d4:	97 36       	st.w	r11[0xc],r6
800017d6:	97 26       	st.w	r11[0x8],r6
800017d8:	8d 2b       	st.w	r6[0x8],r11
800017da:	8d 3b       	st.w	r6[0xc],r11
800017dc:	30 1c       	mov	r12,1
800017de:	c0 58       	rjmp	800017e8 <_free_r+0xbc>
800017e0:	72 2b       	ld.w	r11,r9[0x8]
800017e2:	72 39       	ld.w	r9,r9[0xc]
800017e4:	93 2b       	st.w	r9[0x8],r11
800017e6:	97 39       	st.w	r11[0xc],r9
800017e8:	10 99       	mov	r9,r8
800017ea:	ec 08 09 08 	st.w	r6[r8],r8
800017ee:	a1 a9       	sbr	r9,0x0
800017f0:	8d 19       	st.w	r6[0x4],r9
800017f2:	58 0c       	cp.w	r12,0
800017f4:	c6 51       	brne	800018be <_free_r+0x192>
800017f6:	e0 48 01 ff 	cp.w	r8,511
800017fa:	e0 8b 00 13 	brhi	80001820 <_free_r+0xf4>
800017fe:	a3 98       	lsr	r8,0x3
80001800:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001804:	72 2b       	ld.w	r11,r9[0x8]
80001806:	8d 39       	st.w	r6[0xc],r9
80001808:	8d 2b       	st.w	r6[0x8],r11
8000180a:	97 36       	st.w	r11[0xc],r6
8000180c:	93 26       	st.w	r9[0x8],r6
8000180e:	a3 48       	asr	r8,0x2
80001810:	74 19       	ld.w	r9,r10[0x4]
80001812:	30 1b       	mov	r11,1
80001814:	f6 08 09 48 	lsl	r8,r11,r8
80001818:	f3 e8 10 08 	or	r8,r9,r8
8000181c:	95 18       	st.w	r10[0x4],r8
8000181e:	c5 08       	rjmp	800018be <_free_r+0x192>
80001820:	f0 0b 16 09 	lsr	r11,r8,0x9
80001824:	58 4b       	cp.w	r11,4
80001826:	e0 8b 00 06 	brhi	80001832 <_free_r+0x106>
8000182a:	f0 0b 16 06 	lsr	r11,r8,0x6
8000182e:	2c 8b       	sub	r11,-56
80001830:	c2 b8       	rjmp	80001886 <_free_r+0x15a>
80001832:	59 4b       	cp.w	r11,20
80001834:	e0 8b 00 04 	brhi	8000183c <_free_r+0x110>
80001838:	2a 5b       	sub	r11,-91
8000183a:	c2 68       	rjmp	80001886 <_free_r+0x15a>
8000183c:	e0 4b 00 54 	cp.w	r11,84
80001840:	e0 8b 00 06 	brhi	8000184c <_free_r+0x120>
80001844:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001848:	29 2b       	sub	r11,-110
8000184a:	c1 e8       	rjmp	80001886 <_free_r+0x15a>
8000184c:	e0 4b 01 54 	cp.w	r11,340
80001850:	e0 8b 00 06 	brhi	8000185c <_free_r+0x130>
80001854:	f0 0b 16 0f 	lsr	r11,r8,0xf
80001858:	28 9b       	sub	r11,-119
8000185a:	c1 68       	rjmp	80001886 <_free_r+0x15a>
8000185c:	e0 4b 05 54 	cp.w	r11,1364
80001860:	e0 88 00 10 	brls	80001880 <_free_r+0x154>
80001864:	37 eb       	mov	r11,126
80001866:	c1 08       	rjmp	80001886 <_free_r+0x15a>
80001868:	80 00       	ld.sh	r0,r0[0x0]
8000186a:	16 0a       	add	r10,r11
8000186c:	00 00       	add	r0,r0
8000186e:	01 04       	ld.w	r4,r0++
80001870:	00 00       	add	r0,r0
80001872:	05 0c       	ld.w	r12,r2++
80001874:	00 00       	add	r0,r0
80001876:	05 20       	ld.uh	r0,r2++
80001878:	80 00       	ld.sh	r0,r0[0x0]
8000187a:	16 84       	andn	r4,r11
8000187c:	80 00       	ld.sh	r0,r0[0x0]
8000187e:	16 0c       	add	r12,r11
80001880:	f0 0b 16 12 	lsr	r11,r8,0x12
80001884:	28 4b       	sub	r11,-124
80001886:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000188a:	78 29       	ld.w	r9,r12[0x8]
8000188c:	18 39       	cp.w	r9,r12
8000188e:	c0 e1       	brne	800018aa <_free_r+0x17e>
80001890:	74 18       	ld.w	r8,r10[0x4]
80001892:	a3 4b       	asr	r11,0x2
80001894:	30 1c       	mov	r12,1
80001896:	f8 0b 09 4b 	lsl	r11,r12,r11
8000189a:	f1 eb 10 0b 	or	r11,r8,r11
8000189e:	12 98       	mov	r8,r9
800018a0:	95 1b       	st.w	r10[0x4],r11
800018a2:	c0 a8       	rjmp	800018b6 <_free_r+0x18a>
800018a4:	72 29       	ld.w	r9,r9[0x8]
800018a6:	18 39       	cp.w	r9,r12
800018a8:	c0 60       	breq	800018b4 <_free_r+0x188>
800018aa:	72 1a       	ld.w	r10,r9[0x4]
800018ac:	e0 1a ff fc 	andl	r10,0xfffc
800018b0:	14 38       	cp.w	r8,r10
800018b2:	cf 93       	brcs	800018a4 <_free_r+0x178>
800018b4:	72 38       	ld.w	r8,r9[0xc]
800018b6:	8d 38       	st.w	r6[0xc],r8
800018b8:	8d 29       	st.w	r6[0x8],r9
800018ba:	93 36       	st.w	r9[0xc],r6
800018bc:	91 26       	st.w	r8[0x8],r6
800018be:	0e 9c       	mov	r12,r7
800018c0:	f0 1f 00 02 	mcall	800018c8 <_free_r+0x19c>
800018c4:	d8 22       	popm	r4-r7,pc
800018c6:	00 00       	add	r0,r0
800018c8:	80 00       	ld.sh	r0,r0[0x0]
800018ca:	16 0c       	add	r12,r11

Disassembly of section .exception:

80001a00 <_evba>:
	...

80001a28 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001a28:	c7 a8       	rjmp	80001b1c <privilegedCalls>
	...

80001b00 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001b00:	1c 9f       	mov	pc,lr

80001b02 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001b02:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001b06:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
80001b0a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
80001b0e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001b12:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001b14:	c0 31       	brne	80001b1a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001b16:	4b 9c       	lddpc	r12,80001bf8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001b18:	18 9f       	mov	pc,r12

80001b1a <_int0_exit>:
_int0_exit:
	rete
80001b1a:	d6 03       	rete

80001b1c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
80001b1c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
80001b1e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001b20:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001b22:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001b24:	9b 3c       	st.w	sp[0xc],r12

80001b26 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001b26:	4b 6c       	lddpc	r12,80001bfc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001b28:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
80001b2a:	c0 61       	brne	80001b36 <priv_interruptenable>
	ld.w r12,sp[USERSR]
80001b2c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
80001b2e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001b30:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001b32:	d3 02       	popm	r11-r12
	rete
80001b34:	d6 03       	rete

80001b36 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001b36:	4b 3c       	lddpc	r12,80001c00 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001b38:	18 3b       	cp.w	r11,r12
	brne privexception
80001b3a:	c0 61       	brne	80001b46 <privexception>
	ld.w r12,sp[USERSR]
80001b3c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
80001b3e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001b40:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001b42:	d3 02       	popm	r11-r12
	rete
80001b44:	d6 03       	rete

80001b46 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001b46:	c0 08       	rjmp	80001b46 <privexception>

80001b48 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001b48:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
80001b4a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
80001b4e:	4a ec       	lddpc	r12,80001c04 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001b50:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001b52:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001b54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001b58:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
80001b5c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001b60:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001b62:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001b64:	1c 9f       	mov	pc,lr

80001b66 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001b66:	d3 03       	ssrf	0x10
	mov pc,lr
80001b68:	1c 9f       	mov	pc,lr

80001b6a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
80001b6a:	d5 03       	csrf	0x10
	mov pc,lr
80001b6c:	1c 9f       	mov	pc,lr

80001b6e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
80001b6e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001b72:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001b74:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001b78:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
80001b7c:	1c 9f       	mov	pc,lr

80001b7e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001b7e:	4a 3c       	lddpc	r12,80001c08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001b80:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001b82:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001b84:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001b86:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001b88:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
80001b8a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
80001b8c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
80001b8e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001b90:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001b92:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001b94:	33 40       	mov	r0,52
	add r0,r12
80001b96:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001b98:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
80001b9c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
80001b9e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
80001ba2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
80001ba4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
80001ba6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
80001ba8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
80001baa:	1a 90       	mov	r0,sp
	st.w --sp,r0
80001bac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80001bae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
80001bb2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
80001bb4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
80001bb6:	1c 9f       	mov	pc,lr

80001bb8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001bb8:	49 4c       	lddpc	r12,80001c08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001bba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
80001bbc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80001bbe:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80001bc0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
80001bc4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
80001bc6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
80001bc8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80001bca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
80001bcc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80001bce:	33 40       	mov	r0,52
	add r0,r12
80001bd0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80001bd2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80001bd6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
80001bd8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
80001bda:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
80001bdc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
80001bde:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
80001be0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
80001be2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
80001be4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
80001be6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
80001be8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80001bea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
80001bec:	d4 01       	pushm	lr
	call timerStart
80001bee:	f0 1f 00 08 	mcall	80001c0c <contextRestoreFromISR+0x54>
	popm lr
80001bf2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
80001bf4:	1c 9f       	mov	pc,lr
80001bf6:	00 00       	add	r0,r0
80001bf8:	80 00       	ld.sh	r0,r0[0x0]
80001bfa:	06 e8       	st.h	--r3,r8
80001bfc:	80 00       	ld.sh	r0,r0[0x0]
80001bfe:	1b 66       	ld.uh	r6,--sp
80001c00:	80 00       	ld.sh	r0,r0[0x0]
80001c02:	1b 6a       	ld.uh	r10,--sp
80001c04:	80 00       	ld.sh	r0,r0[0x0]
80001c06:	1a 00       	add	r0,sp
80001c08:	00 00       	add	r0,r0
80001c0a:	05 9c       	ld.ub	r12,r2[0x1]
80001c0c:	80 00       	ld.sh	r0,r0[0x0]
80001c0e:	10 12       	sub	r2,r8
	...
