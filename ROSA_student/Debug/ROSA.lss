
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002448  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80002600  80002600  00002a00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000018c  80002a00  80002a00  00002e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002b8c  80002b8c  00002f8c  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80002b90  00003008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  8000309c  00003514  2**0
                  ALLOC
  9 .bss          00000298  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000d850  000007b0  000007b0  00000000  2**0
                  ALLOC
 11 .comment      000000bc  00000000  00000000  00003514  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000005e8  00000000  00000000  000035d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000a89  00000000  00000000  00003bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c75d  00000000  00000000  00004641  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00002169  00000000  00000000  00010d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004863  00000000  00000000  00012f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000c88  00000000  00000000  0001776c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001d91  00000000  00000000  000183f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000196b  00000000  00000000  0001a185  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00534577  00000000  00000000  0001baf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 00000528  00000000  00000000  00550067  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	1c 20       	rsub	r0,lr

Disassembly of section .text:

80000008 <MaxLockedCeiling>:
 *
 **********************************************************/


static MaxSemHandle_t MaxLockedCeiling(void)
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 3d       	sub	sp,12
	MaxSemHandle_t MaxT;
	MaxT.Ceil=0;
80000010:	30 08       	mov	r8,0
80000012:	ef 68 ff f4 	st.b	r7[-12],r8
	MaxT.Mutex=NULL;
80000016:	30 08       	mov	r8,0
80000018:	ef 48 ff f8 	st.w	r7[-8],r8
	if (LOCKEDSEMAPHORELIST==NULL)
8000001c:	4a 08       	lddpc	r8,8000009c <MaxLockedCeiling+0x94>
8000001e:	70 08       	ld.w	r8,r8[0x0]
80000020:	58 08       	cp.w	r8,0
80000022:	c0 41       	brne	8000002a <MaxLockedCeiling+0x22>
	{
		
		return MaxT;
80000024:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000028:	c3 58       	rjmp	80000092 <MaxLockedCeiling+0x8a>
	}
	else
	{
	MaxT.Ceil=LOCKEDSEMAPHORELIST->ceiling;
8000002a:	49 d8       	lddpc	r8,8000009c <MaxLockedCeiling+0x94>
8000002c:	70 08       	ld.w	r8,r8[0x0]
8000002e:	11 c8       	ld.ub	r8,r8[0x4]
80000030:	ef 68 ff f4 	st.b	r7[-12],r8
	//uint8_t maxCeil=LOCKEDSEMAPHORELIST->ceiling;
	ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
80000034:	49 a8       	lddpc	r8,8000009c <MaxLockedCeiling+0x94>
80000036:	70 08       	ld.w	r8,r8[0x0]
80000038:	ef 48 ff fc 	st.w	r7[-4],r8
	MaxT.Mutex=it;
8000003c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000040:	ef 48 ff f8 	st.w	r7[-8],r8
	if (it->nextLockedSemaphore==NULL)
80000044:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000048:	70 28       	ld.w	r8,r8[0x8]
8000004a:	58 08       	cp.w	r8,0
8000004c:	c1 b1       	brne	80000082 <MaxLockedCeiling+0x7a>
	{
		return MaxT;
8000004e:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000052:	c2 08       	rjmp	80000092 <MaxLockedCeiling+0x8a>
	}
	while (it->nextLockedSemaphore!=NULL)
	{
		if (it->ceiling>=MaxT.Ceil)
80000054:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000058:	11 c9       	ld.ub	r9,r8[0x4]
8000005a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000005e:	f0 09 18 00 	cp.b	r9,r8
80000062:	c0 a3       	brcs	80000076 <MaxLockedCeiling+0x6e>
		{
			MaxT.Ceil=it->ceiling;
80000064:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000068:	11 c8       	ld.ub	r8,r8[0x4]
8000006a:	ef 68 ff f4 	st.b	r7[-12],r8
			MaxT.Mutex=it;
8000006e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000072:	ef 48 ff f8 	st.w	r7[-8],r8
		}
		it=it->nextLockedSemaphore;
80000076:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000007a:	70 28       	ld.w	r8,r8[0x8]
8000007c:	ef 48 ff fc 	st.w	r7[-4],r8
80000080:	c0 28       	rjmp	80000084 <MaxLockedCeiling+0x7c>
	MaxT.Mutex=it;
	if (it->nextLockedSemaphore==NULL)
	{
		return MaxT;
	}
	while (it->nextLockedSemaphore!=NULL)
80000082:	d7 03       	nop
80000084:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000088:	70 28       	ld.w	r8,r8[0x8]
8000008a:	58 08       	cp.w	r8,0
8000008c:	ce 41       	brne	80000054 <MaxLockedCeiling+0x4c>
			MaxT.Mutex=it;
		}
		it=it->nextLockedSemaphore;
	}

	return MaxT;
8000008e:	ee e8 ff f4 	ld.d	r8,r7[-12]
	}
}
80000092:	10 9a       	mov	r10,r8
80000094:	12 9b       	mov	r11,r9
80000096:	2f dd       	sub	sp,-12
80000098:	e3 cd 80 80 	ldm	sp++,r7,pc
8000009c:	00 00       	add	r0,r0
8000009e:	06 64       	and	r4,r3

800000a0 <updatePriority>:

static void updatePriority(ROSA_taskHandle_t * task)
{
800000a0:	eb cd 40 80 	pushm	r7,lr
800000a4:	1a 97       	mov	r7,sp
800000a6:	20 4d       	sub	sp,16
800000a8:	ef 4c ff f0 	st.w	r7[-16],r12
	int maximum=0,counter=0;
800000ac:	30 08       	mov	r8,0
800000ae:	ef 48 ff f4 	st.w	r7[-12],r8
800000b2:	30 08       	mov	r8,0
800000b4:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
800000b8:	4b 18       	lddpc	r8,8000017c <updatePriority+0xdc>
800000ba:	70 08       	ld.w	r8,r8[0x0]
800000bc:	ef 48 ff fc 	st.w	r7[-4],r8
	if (it->nextLockedSemaphore==NULL && it->holder==task && it->ceiling > maximum && it!=NULL)
800000c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000c4:	70 28       	ld.w	r8,r8[0x8]
800000c6:	58 08       	cp.w	r8,0
800000c8:	c3 f1       	brne	80000146 <updatePriority+0xa6>
800000ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000ce:	70 09       	ld.w	r9,r8[0x0]
800000d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800000d4:	10 39       	cp.w	r9,r8
800000d6:	c3 81       	brne	80000146 <updatePriority+0xa6>
800000d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000dc:	11 c8       	ld.ub	r8,r8[0x4]
800000de:	10 99       	mov	r9,r8
800000e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800000e4:	10 39       	cp.w	r9,r8
800000e6:	e0 8a 00 30 	brle	80000146 <updatePriority+0xa6>
800000ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000ee:	58 08       	cp.w	r8,0
800000f0:	c2 b0       	breq	80000146 <updatePriority+0xa6>
	{
		maximum=it->ceiling;
800000f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000f6:	11 c8       	ld.ub	r8,r8[0x4]
800000f8:	ef 48 ff f4 	st.w	r7[-12],r8
		counter++; //are there any semaphores locked by this task?
800000fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000100:	2f f8       	sub	r8,-1
80000102:	ef 48 ff f8 	st.w	r7[-8],r8

static void updatePriority(ROSA_taskHandle_t * task)
{
	int maximum=0,counter=0;
	ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
	if (it->nextLockedSemaphore==NULL && it->holder==task && it->ceiling > maximum && it!=NULL)
80000106:	c2 48       	rjmp	8000014e <updatePriority+0xae>
	}
	else
	{
		while ( it!=NULL)
	{
		if (it->holder==task && it->ceiling > maximum)
80000108:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000010c:	70 09       	ld.w	r9,r8[0x0]
8000010e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000112:	10 39       	cp.w	r9,r8
80000114:	c1 41       	brne	8000013c <updatePriority+0x9c>
80000116:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000011a:	11 c8       	ld.ub	r8,r8[0x4]
8000011c:	10 99       	mov	r9,r8
8000011e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000122:	10 39       	cp.w	r9,r8
80000124:	e0 8a 00 0c 	brle	8000013c <updatePriority+0x9c>
		{
			maximum=it->ceiling;
80000128:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000012c:	11 c8       	ld.ub	r8,r8[0x4]
8000012e:	ef 48 ff f4 	st.w	r7[-12],r8
			counter++; //are there any semaphores locked by this task?
80000132:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000136:	2f f8       	sub	r8,-1
80000138:	ef 48 ff f8 	st.w	r7[-8],r8
		}
		it=it->nextLockedSemaphore;
8000013c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000140:	70 28       	ld.w	r8,r8[0x8]
80000142:	ef 48 ff fc 	st.w	r7[-4],r8
		maximum=it->ceiling;
		counter++; //are there any semaphores locked by this task?
	}
	else
	{
		while ( it!=NULL)
80000146:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000014a:	58 08       	cp.w	r8,0
8000014c:	cd e1       	brne	80000108 <updatePriority+0x68>
		}
		it=it->nextLockedSemaphore;
	}
	}
	
	if (counter!=0)
8000014e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000152:	58 08       	cp.w	r8,0
80000154:	c0 90       	breq	80000166 <updatePriority+0xc6>
	{
		task->priority=maximum;
80000156:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000015a:	5c 58       	castu.b	r8
8000015c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000160:	f3 68 00 64 	st.b	r9[100],r8
80000164:	c0 98       	rjmp	80000176 <updatePriority+0xd6>
	}
	else 
		{
			EXECTASK->priority=EXECTASK->originalPriority; //IPCP priority inheritance
80000166:	48 78       	lddpc	r8,80000180 <updatePriority+0xe0>
80000168:	70 09       	ld.w	r9,r8[0x0]
8000016a:	48 68       	lddpc	r8,80000180 <updatePriority+0xe0>
8000016c:	70 08       	ld.w	r8,r8[0x0]
8000016e:	f1 38 00 71 	ld.ub	r8,r8[113]
80000172:	f3 68 00 64 	st.b	r9[100],r8
		}
	
}
80000176:	2f cd       	sub	sp,-16
80000178:	e3 cd 80 80 	ldm	sp++,r7,pc
8000017c:	00 00       	add	r0,r0
8000017e:	06 64       	and	r4,r3
80000180:	00 00       	add	r0,r0
80000182:	07 28       	ld.uh	r8,r3++

80000184 <ROSA_semaphoreCreate>:
 *
 * Comment:
 * 	Create a semaphore
 *
 **********************************************************/
int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t * mutex, uint8_t ceiling) {
80000184:	eb cd 40 80 	pushm	r7,lr
80000188:	1a 97       	mov	r7,sp
8000018a:	20 2d       	sub	sp,8
8000018c:	ef 4c ff fc 	st.w	r7[-4],r12
80000190:	16 98       	mov	r8,r11
80000192:	ef 68 ff f8 	st.b	r7[-8],r8
	*mutex = (ROSA_semaphoreHandle_t) calloc(1, sizeof(ROSA_semaphoreHandle_t));
80000196:	30 4b       	mov	r11,4
80000198:	30 1c       	mov	r12,1
8000019a:	f0 1f 00 0f 	mcall	800001d4 <ROSA_semaphoreCreate+0x50>
8000019e:	18 98       	mov	r8,r12
800001a0:	10 99       	mov	r9,r8
800001a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001a6:	91 09       	st.w	r8[0x0],r9
	(*mutex)->holder = NULL;
800001a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001ac:	70 08       	ld.w	r8,r8[0x0]
800001ae:	30 09       	mov	r9,0
800001b0:	91 09       	st.w	r8[0x0],r9
	(*mutex)->ceiling = ceiling;
800001b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001b6:	70 09       	ld.w	r9,r8[0x0]
800001b8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800001bc:	b2 c8       	st.b	r9[0x4],r8
	(*mutex)->nextLockedSemaphore=NULL;	
800001be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001c2:	70 08       	ld.w	r8,r8[0x0]
800001c4:	30 09       	mov	r9,0
800001c6:	91 29       	st.w	r8[0x8],r9
	
	return 0;
800001c8:	30 08       	mov	r8,0
}
800001ca:	10 9c       	mov	r12,r8
800001cc:	2f ed       	sub	sp,-8
800001ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800001d2:	00 00       	add	r0,r0
800001d4:	80 00       	ld.sh	r0,r0[0x0]
800001d6:	1c a0       	st.w	lr++,r0

800001d8 <ROSA_semaphoreLock>:
 *
 * Comment:
 * 	Lock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t  mutex) {
800001d8:	eb cd 40 c0 	pushm	r6-r7,lr
800001dc:	1a 97       	mov	r7,sp
800001de:	20 2d       	sub	sp,8
800001e0:	ef 4c ff f8 	st.w	r7[-8],r12
	
	if (mutex==NULL)
800001e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001e8:	58 08       	cp.w	r8,0
800001ea:	c0 61       	brne	800001f6 <ROSA_semaphoreLock+0x1e>
	{
		return -1; // if the passed pointer to the semaphore handle is non-existent
800001ec:	3f f8       	mov	r8,-1
800001ee:	c9 88       	rjmp	8000031e <ROSA_semaphoreLock+0x146>
	}
	
	
	while (mutex->holder != NULL || ((EXECTASK->priority==MaxLockedCeiling().Ceil && MaxLockedCeiling().Mutex->holder!=EXECTASK) || EXECTASK->priority<MaxLockedCeiling().Ceil)) //if the semaphore is already locked or IPCP condition P(task)>maxLockedCeil
		ROSA_yield();		
800001f0:	f0 1f 00 4e 	mcall	80000328 <ROSA_semaphoreLock+0x150>
800001f4:	c0 28       	rjmp	800001f8 <ROSA_semaphoreLock+0x20>
	{
		return -1; // if the passed pointer to the semaphore handle is non-existent
	}
	
	
	while (mutex->holder != NULL || ((EXECTASK->priority==MaxLockedCeiling().Ceil && MaxLockedCeiling().Mutex->holder!=EXECTASK) || EXECTASK->priority<MaxLockedCeiling().Ceil)) //if the semaphore is already locked or IPCP condition P(task)>maxLockedCeil
800001f6:	d7 03       	nop
800001f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001fc:	70 08       	ld.w	r8,r8[0x0]
800001fe:	58 08       	cp.w	r8,0
80000200:	cf 81       	brne	800001f0 <ROSA_semaphoreLock+0x18>
80000202:	4c b8       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
80000204:	70 08       	ld.w	r8,r8[0x0]
80000206:	f1 36 00 64 	ld.ub	r6,r8[100]
8000020a:	f0 1f 00 4a 	mcall	80000330 <ROSA_semaphoreLock+0x158>
8000020e:	14 98       	mov	r8,r10
80000210:	16 99       	mov	r9,r11
80000212:	f1 d9 c3 08 	bfextu	r8,r9,0x18,0x8
80000216:	5c 58       	castu.b	r8
80000218:	f0 06 18 00 	cp.b	r6,r8
8000021c:	c0 a1       	brne	80000230 <ROSA_semaphoreLock+0x58>
8000021e:	f0 1f 00 45 	mcall	80000330 <ROSA_semaphoreLock+0x158>
80000222:	14 98       	mov	r8,r10
80000224:	16 99       	mov	r9,r11
80000226:	70 09       	ld.w	r9,r8[0x0]
80000228:	4c 18       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
8000022a:	70 08       	ld.w	r8,r8[0x0]
8000022c:	10 39       	cp.w	r9,r8
8000022e:	ce 11       	brne	800001f0 <ROSA_semaphoreLock+0x18>
80000230:	4b f8       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
80000232:	70 08       	ld.w	r8,r8[0x0]
80000234:	f1 36 00 64 	ld.ub	r6,r8[100]
80000238:	f0 1f 00 3e 	mcall	80000330 <ROSA_semaphoreLock+0x158>
8000023c:	14 98       	mov	r8,r10
8000023e:	16 99       	mov	r9,r11
80000240:	f1 d9 c3 08 	bfextu	r8,r9,0x18,0x8
80000244:	5c 58       	castu.b	r8
80000246:	f0 06 18 00 	cp.b	r6,r8
8000024a:	cd 33       	brcs	800001f0 <ROSA_semaphoreLock+0x18>
		ROSA_yield();		
	
	mutex->holder = EXECTASK;
8000024c:	4b 88       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
8000024e:	70 09       	ld.w	r9,r8[0x0]
80000250:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000254:	91 09       	st.w	r8[0x0],r9
		
	if (LOCKEDSEMAPHORELIST==NULL)
80000256:	4b 88       	lddpc	r8,80000334 <ROSA_semaphoreLock+0x15c>
80000258:	70 08       	ld.w	r8,r8[0x0]
8000025a:	58 08       	cp.w	r8,0
8000025c:	c0 61       	brne	80000268 <ROSA_semaphoreLock+0x90>
	{
		LOCKEDSEMAPHORELIST=mutex;
8000025e:	4b 68       	lddpc	r8,80000334 <ROSA_semaphoreLock+0x15c>
80000260:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000264:	91 09       	st.w	r8[0x0],r9
80000266:	c1 b8       	rjmp	8000029c <ROSA_semaphoreLock+0xc4>
	}
	else
	{
		ROSA_semaphoreHandle_t it; //finding the last semaphore in the list and changing its nextLockedSemaphore field to point to the just locked semaphore
		it=LOCKEDSEMAPHORELIST;
80000268:	4b 38       	lddpc	r8,80000334 <ROSA_semaphoreLock+0x15c>
8000026a:	70 08       	ld.w	r8,r8[0x0]
8000026c:	ef 48 ff fc 	st.w	r7[-4],r8
		while(it->nextLockedSemaphore!=NULL)
80000270:	c0 68       	rjmp	8000027c <ROSA_semaphoreLock+0xa4>
		{
			it=it->nextLockedSemaphore;
80000272:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000276:	70 28       	ld.w	r8,r8[0x8]
80000278:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
		ROSA_semaphoreHandle_t it; //finding the last semaphore in the list and changing its nextLockedSemaphore field to point to the just locked semaphore
		it=LOCKEDSEMAPHORELIST;
		while(it->nextLockedSemaphore!=NULL)
8000027c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000280:	70 28       	ld.w	r8,r8[0x8]
80000282:	58 08       	cp.w	r8,0
80000284:	cf 71       	brne	80000272 <ROSA_semaphoreLock+0x9a>
		{
			it=it->nextLockedSemaphore;
		}
		if (it!=mutex)
80000286:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000028a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000028e:	10 39       	cp.w	r9,r8
80000290:	c0 60       	breq	8000029c <ROSA_semaphoreLock+0xc4>
		{
			it->nextLockedSemaphore=mutex;
80000292:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000296:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000029a:	91 29       	st.w	r8[0x8],r9
		}
		
	}
	if (EXECTASK->priority < mutex->ceiling)
8000029c:	4a 48       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
8000029e:	70 08       	ld.w	r8,r8[0x0]
800002a0:	f1 39 00 64 	ld.ub	r9,r8[100]
800002a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002a8:	11 c8       	ld.ub	r8,r8[0x4]
800002aa:	f0 09 18 00 	cp.b	r9,r8
800002ae:	c3 72       	brcc	8000031c <ROSA_semaphoreLock+0x144>
	{
		if (EXECTASK!=EXECTASK->nexttcb)
800002b0:	49 f8       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
800002b2:	70 08       	ld.w	r8,r8[0x0]
800002b4:	70 09       	ld.w	r9,r8[0x0]
800002b6:	49 e8       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
800002b8:	70 08       	ld.w	r8,r8[0x0]
800002ba:	10 39       	cp.w	r9,r8
800002bc:	c0 d0       	breq	800002d6 <ROSA_semaphoreLock+0xfe>
		{
			PA[EXECTASK->priority]=EXECTASK->nexttcb; //deattaching the EXECTASK from its current priority queue
800002be:	49 c8       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
800002c0:	70 08       	ld.w	r8,r8[0x0]
800002c2:	f1 38 00 64 	ld.ub	r8,r8[100]
800002c6:	10 99       	mov	r9,r8
800002c8:	49 98       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
800002ca:	70 08       	ld.w	r8,r8[0x0]
800002cc:	70 0a       	ld.w	r10,r8[0x0]
800002ce:	49 b8       	lddpc	r8,80000338 <ROSA_semaphoreLock+0x160>
800002d0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800002d4:	c0 a8       	rjmp	800002e8 <ROSA_semaphoreLock+0x110>
		}
		else
		{
			PA[EXECTASK->priority]=NULL; // if the task that is being removed from the queue is alone in the queue
800002d6:	49 68       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
800002d8:	70 08       	ld.w	r8,r8[0x0]
800002da:	f1 38 00 64 	ld.ub	r8,r8[100]
800002de:	10 99       	mov	r9,r8
800002e0:	49 68       	lddpc	r8,80000338 <ROSA_semaphoreLock+0x160>
800002e2:	30 0a       	mov	r10,0
800002e4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		}
		
		updatePriority(EXECTASK); //IPCP priority inheritance
800002e8:	49 18       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
800002ea:	70 08       	ld.w	r8,r8[0x0]
800002ec:	10 9c       	mov	r12,r8
800002ee:	f0 1f 00 14 	mcall	8000033c <ROSA_semaphoreLock+0x164>
		PA[EXECTASK->priority]=EXECTASK;
800002f2:	48 f8       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
800002f4:	70 08       	ld.w	r8,r8[0x0]
800002f6:	f1 38 00 64 	ld.ub	r8,r8[100]
800002fa:	10 99       	mov	r9,r8
800002fc:	48 c8       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
800002fe:	70 0a       	ld.w	r10,r8[0x0]
80000300:	48 e8       	lddpc	r8,80000338 <ROSA_semaphoreLock+0x160>
80000302:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		EXECTASK->nexttcb=PA[EXECTASK->priority];
80000306:	48 a8       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
80000308:	70 08       	ld.w	r8,r8[0x0]
8000030a:	48 99       	lddpc	r9,8000032c <ROSA_semaphoreLock+0x154>
8000030c:	72 09       	ld.w	r9,r9[0x0]
8000030e:	f3 39 00 64 	ld.ub	r9,r9[100]
80000312:	12 9a       	mov	r10,r9
80000314:	48 99       	lddpc	r9,80000338 <ROSA_semaphoreLock+0x160>
80000316:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000031a:	91 09       	st.w	r8[0x0],r9
		
		//readyQueueInsert(EXECTASK);
	}
	
	return 0;
8000031c:	30 08       	mov	r8,0
}
8000031e:	10 9c       	mov	r12,r8
80000320:	2f ed       	sub	sp,-8
80000322:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80000326:	00 00       	add	r0,r0
80000328:	80 00       	ld.sh	r0,r0[0x0]
8000032a:	0e da       	st.w	--r7,r10
8000032c:	00 00       	add	r0,r0
8000032e:	07 28       	ld.uh	r8,r3++
80000330:	80 00       	ld.sh	r0,r0[0x0]
80000332:	00 08       	add	r8,r0
80000334:	00 00       	add	r0,r0
80000336:	06 64       	and	r4,r3
80000338:	00 00       	add	r0,r0
8000033a:	06 7c       	tst	r12,r3
8000033c:	80 00       	ld.sh	r0,r0[0x0]
8000033e:	00 a0       	st.w	r0++,r0

80000340 <ROSA_semaphoreUnlock>:
 *
 * Comment:
 * 	Unlock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreUnlock(ROSA_semaphoreHandle_t  mutex) {
80000340:	eb cd 40 80 	pushm	r7,lr
80000344:	1a 97       	mov	r7,sp
80000346:	20 4d       	sub	sp,16
80000348:	ef 4c ff f0 	st.w	r7[-16],r12
	mutex->holder = NULL;
8000034c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000350:	30 09       	mov	r9,0
80000352:	91 09       	st.w	r8[0x0],r9
	if (mutex==LOCKEDSEMAPHORELIST)
80000354:	4d 88       	lddpc	r8,800004b4 <ROSA_semaphoreUnlock+0x174>
80000356:	70 08       	ld.w	r8,r8[0x0]
80000358:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000035c:	10 39       	cp.w	r9,r8
8000035e:	c0 71       	brne	8000036c <ROSA_semaphoreUnlock+0x2c>
	{
		LOCKEDSEMAPHORELIST=mutex->nextLockedSemaphore; //if first locked semaphore needs to be unlocked
80000360:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000364:	70 29       	ld.w	r9,r8[0x8]
80000366:	4d 48       	lddpc	r8,800004b4 <ROSA_semaphoreUnlock+0x174>
80000368:	91 09       	st.w	r8[0x0],r9
8000036a:	c1 88       	rjmp	8000039a <ROSA_semaphoreUnlock+0x5a>
	}
	else
	{
		ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
8000036c:	4d 28       	lddpc	r8,800004b4 <ROSA_semaphoreUnlock+0x174>
8000036e:	70 08       	ld.w	r8,r8[0x0]
80000370:	ef 48 ff f4 	st.w	r7[-12],r8
		//it=LOCKEDSEMAPHORELIST;
		while (it->nextLockedSemaphore!=mutex) //find the locked semaphore before the one that needs to be unlocked
80000374:	c0 68       	rjmp	80000380 <ROSA_semaphoreUnlock+0x40>
		{
			it=it->nextLockedSemaphore;
80000376:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000037a:	70 28       	ld.w	r8,r8[0x8]
8000037c:	ef 48 ff f4 	st.w	r7[-12],r8
	}
	else
	{
		ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
		//it=LOCKEDSEMAPHORELIST;
		while (it->nextLockedSemaphore!=mutex) //find the locked semaphore before the one that needs to be unlocked
80000380:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000384:	70 29       	ld.w	r9,r8[0x8]
80000386:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000038a:	10 39       	cp.w	r9,r8
8000038c:	cf 51       	brne	80000376 <ROSA_semaphoreUnlock+0x36>
		{
			it=it->nextLockedSemaphore;
		}
		it->nextLockedSemaphore=mutex->nextLockedSemaphore;
8000038e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000392:	70 29       	ld.w	r9,r8[0x8]
80000394:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000398:	91 29       	st.w	r8[0x8],r9
	}
	//readyQueueExtract(EXECTASK);
	if(EXECTASK->priority!=EXECTASK->originalPriority)
8000039a:	4c 88       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
8000039c:	70 08       	ld.w	r8,r8[0x0]
8000039e:	f1 39 00 64 	ld.ub	r9,r8[100]
800003a2:	4c 68       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
800003a4:	70 08       	ld.w	r8,r8[0x0]
800003a6:	f1 38 00 71 	ld.ub	r8,r8[113]
800003aa:	f0 09 18 00 	cp.b	r9,r8
800003ae:	c7 d0       	breq	800004a8 <ROSA_semaphoreUnlock+0x168>
	{
		if (EXECTASK!=EXECTASK->nexttcb)
800003b0:	4c 28       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
800003b2:	70 08       	ld.w	r8,r8[0x0]
800003b4:	70 09       	ld.w	r9,r8[0x0]
800003b6:	4c 18       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
800003b8:	70 08       	ld.w	r8,r8[0x0]
800003ba:	10 39       	cp.w	r9,r8
800003bc:	c0 e0       	breq	800003d8 <ROSA_semaphoreUnlock+0x98>
		{
			PA[EXECTASK->priority]->nexttcb=EXECTASK->nexttcb; //deattaching the EXECTASK from its current priority queue
800003be:	4b f8       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
800003c0:	70 08       	ld.w	r8,r8[0x0]
800003c2:	f1 38 00 64 	ld.ub	r8,r8[100]
800003c6:	10 99       	mov	r9,r8
800003c8:	4b d8       	lddpc	r8,800004bc <ROSA_semaphoreUnlock+0x17c>
800003ca:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800003ce:	4b b9       	lddpc	r9,800004b8 <ROSA_semaphoreUnlock+0x178>
800003d0:	72 09       	ld.w	r9,r9[0x0]
800003d2:	72 09       	ld.w	r9,r9[0x0]
800003d4:	91 09       	st.w	r8[0x0],r9
800003d6:	c0 a8       	rjmp	800003ea <ROSA_semaphoreUnlock+0xaa>
		}
		else
		{
			PA[EXECTASK->priority]=NULL; // if the task that is being removed from the queue is alone in the queue
800003d8:	4b 88       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
800003da:	70 08       	ld.w	r8,r8[0x0]
800003dc:	f1 38 00 64 	ld.ub	r8,r8[100]
800003e0:	10 99       	mov	r9,r8
800003e2:	4b 78       	lddpc	r8,800004bc <ROSA_semaphoreUnlock+0x17c>
800003e4:	30 0a       	mov	r10,0
800003e6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		}
		int old_prio=EXECTASK->priority;
800003ea:	4b 48       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
800003ec:	70 08       	ld.w	r8,r8[0x0]
800003ee:	f1 38 00 64 	ld.ub	r8,r8[100]
800003f2:	ef 48 ff f8 	st.w	r7[-8],r8
		updatePriority(EXECTASK);
800003f6:	4b 18       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
800003f8:	70 08       	ld.w	r8,r8[0x0]
800003fa:	10 9c       	mov	r12,r8
800003fc:	f0 1f 00 31 	mcall	800004c0 <ROSA_semaphoreUnlock+0x180>
		if (old_prio>EXECTASK->priority && PA[EXECTASK->priority]!=NULL)
80000400:	4a e8       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
80000402:	70 08       	ld.w	r8,r8[0x0]
80000404:	f1 38 00 64 	ld.ub	r8,r8[100]
80000408:	10 99       	mov	r9,r8
8000040a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000040e:	10 39       	cp.w	r9,r8
80000410:	c2 d4       	brge	8000046a <ROSA_semaphoreUnlock+0x12a>
80000412:	4a a8       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
80000414:	70 08       	ld.w	r8,r8[0x0]
80000416:	f1 38 00 64 	ld.ub	r8,r8[100]
8000041a:	10 99       	mov	r9,r8
8000041c:	4a 88       	lddpc	r8,800004bc <ROSA_semaphoreUnlock+0x17c>
8000041e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000422:	58 08       	cp.w	r8,0
80000424:	c2 30       	breq	8000046a <ROSA_semaphoreUnlock+0x12a>
		{
			ROSA_taskHandle_t *temp = PA[EXECTASK->priority]; //inserting a task into proper lower prio queue
80000426:	4a 58       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
80000428:	70 08       	ld.w	r8,r8[0x0]
8000042a:	f1 38 00 64 	ld.ub	r8,r8[100]
8000042e:	10 99       	mov	r9,r8
80000430:	4a 38       	lddpc	r8,800004bc <ROSA_semaphoreUnlock+0x17c>
80000432:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000436:	ef 48 ff fc 	st.w	r7[-4],r8
			PA[EXECTASK->priority]=EXECTASK;
8000043a:	4a 08       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
8000043c:	70 08       	ld.w	r8,r8[0x0]
8000043e:	f1 38 00 64 	ld.ub	r8,r8[100]
80000442:	10 99       	mov	r9,r8
80000444:	49 d8       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
80000446:	70 0a       	ld.w	r10,r8[0x0]
80000448:	49 d8       	lddpc	r8,800004bc <ROSA_semaphoreUnlock+0x17c>
8000044a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			EXECTASK->nexttcb=temp->nexttcb;
8000044e:	49 b8       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
80000450:	70 08       	ld.w	r8,r8[0x0]
80000452:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000456:	72 09       	ld.w	r9,r9[0x0]
80000458:	91 09       	st.w	r8[0x0],r9
			PREEMPTASK = readyQueueSearch();
8000045a:	f0 1f 00 1b 	mcall	800004c4 <ROSA_semaphoreUnlock+0x184>
8000045e:	18 99       	mov	r9,r12
80000460:	49 a8       	lddpc	r8,800004c8 <ROSA_semaphoreUnlock+0x188>
80000462:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
80000464:	f0 1f 00 1a 	mcall	800004cc <ROSA_semaphoreUnlock+0x18c>
		{
			PA[EXECTASK->priority]=NULL; // if the task that is being removed from the queue is alone in the queue
		}
		int old_prio=EXECTASK->priority;
		updatePriority(EXECTASK);
		if (old_prio>EXECTASK->priority && PA[EXECTASK->priority]!=NULL)
80000468:	c2 08       	rjmp	800004a8 <ROSA_semaphoreUnlock+0x168>
			PA[EXECTASK->priority]=EXECTASK;
			EXECTASK->nexttcb=temp->nexttcb;
			PREEMPTASK = readyQueueSearch();
			ROSA_yield();
		}
		else if(old_prio>EXECTASK->priority)
8000046a:	49 48       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
8000046c:	70 08       	ld.w	r8,r8[0x0]
8000046e:	f1 38 00 64 	ld.ub	r8,r8[100]
80000472:	10 99       	mov	r9,r8
80000474:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000478:	10 39       	cp.w	r9,r8
8000047a:	c1 74       	brge	800004a8 <ROSA_semaphoreUnlock+0x168>
		{
			PA[EXECTASK->priority]=EXECTASK;
8000047c:	48 f8       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
8000047e:	70 08       	ld.w	r8,r8[0x0]
80000480:	f1 38 00 64 	ld.ub	r8,r8[100]
80000484:	10 99       	mov	r9,r8
80000486:	48 d8       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
80000488:	70 0a       	ld.w	r10,r8[0x0]
8000048a:	48 d8       	lddpc	r8,800004bc <ROSA_semaphoreUnlock+0x17c>
8000048c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			EXECTASK->nexttcb=EXECTASK;
80000490:	48 a8       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
80000492:	70 08       	ld.w	r8,r8[0x0]
80000494:	48 99       	lddpc	r9,800004b8 <ROSA_semaphoreUnlock+0x178>
80000496:	72 09       	ld.w	r9,r9[0x0]
80000498:	91 09       	st.w	r8[0x0],r9
			PREEMPTASK = readyQueueSearch();
8000049a:	f0 1f 00 0b 	mcall	800004c4 <ROSA_semaphoreUnlock+0x184>
8000049e:	18 99       	mov	r9,r12
800004a0:	48 a8       	lddpc	r8,800004c8 <ROSA_semaphoreUnlock+0x188>
800004a2:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
800004a4:	f0 1f 00 0a 	mcall	800004cc <ROSA_semaphoreUnlock+0x18c>
	}
	
	
	//readyQueueInsert(EXECTASK);
	
	return 0;
800004a8:	30 08       	mov	r8,0
}
800004aa:	10 9c       	mov	r12,r8
800004ac:	2f cd       	sub	sp,-16
800004ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800004b2:	00 00       	add	r0,r0
800004b4:	00 00       	add	r0,r0
800004b6:	06 64       	and	r4,r3
800004b8:	00 00       	add	r0,r0
800004ba:	07 28       	ld.uh	r8,r3++
800004bc:	00 00       	add	r0,r0
800004be:	06 7c       	tst	r12,r3
800004c0:	80 00       	ld.sh	r0,r0[0x0]
800004c2:	00 a0       	st.w	r0++,r0
800004c4:	80 00       	ld.sh	r0,r0[0x0]
800004c6:	08 18       	sub	r8,r4
800004c8:	00 00       	add	r0,r0
800004ca:	06 b0       	st.h	r3++,r0
800004cc:	80 00       	ld.sh	r0,r0[0x0]
800004ce:	0e da       	st.w	--r7,r10

800004d0 <usart_options>:
800004d0:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 31     ............tsk1
800004e0:	00 00 00 00 6c 65 64 33 00 00 00 00 6c 65 64 35     ....led3....led5
800004f0:	00 00 00 00 6c 65 64 37 00 00 00 00                 ....led7....

800004fc <task1>:
ROSA_semaphoreHandle_t S2;
ROSA_semaphoreHandle_t S3;


void task1(void)
{
800004fc:	eb cd 40 80 	pushm	r7,lr
80000500:	1a 97       	mov	r7,sp
80000502:	c0 28       	rjmp	80000506 <task1+0xa>
		if(0 == ROSA_semaphoreUnlock(S3))
		{
			ledOff(LED0_GPIO);
			delay_ms(1000);
		}
	}
80000504:	d7 03       	nop

void task1(void)
{
	while(1)
	{
		if(0 == ROSA_semaphoreLock(S3))
80000506:	4a e8       	lddpc	r8,800005bc <task1+0xc0>
80000508:	70 08       	ld.w	r8,r8[0x0]
8000050a:	10 9c       	mov	r12,r8
8000050c:	f0 1f 00 2d 	mcall	800005c0 <task1+0xc4>
80000510:	18 98       	mov	r8,r12
80000512:	58 08       	cp.w	r8,0
80000514:	c0 81       	brne	80000524 <task1+0x28>
		{
			ledOn(LED0_GPIO);
80000516:	33 bc       	mov	r12,59
80000518:	f0 1f 00 2b 	mcall	800005c4 <task1+0xc8>
			delay_ms(1000);
8000051c:	e0 6c 03 e8 	mov	r12,1000
80000520:	f0 1f 00 2a 	mcall	800005c8 <task1+0xcc>
		}
		
		if(0 == ROSA_semaphoreLock(S2))
80000524:	4a a8       	lddpc	r8,800005cc <task1+0xd0>
80000526:	70 08       	ld.w	r8,r8[0x0]
80000528:	10 9c       	mov	r12,r8
8000052a:	f0 1f 00 26 	mcall	800005c0 <task1+0xc4>
8000052e:	18 98       	mov	r8,r12
80000530:	58 08       	cp.w	r8,0
80000532:	c0 81       	brne	80000542 <task1+0x46>
		{
			ledOn(LED1_GPIO);
80000534:	33 cc       	mov	r12,60
80000536:	f0 1f 00 24 	mcall	800005c4 <task1+0xc8>
			delay_ms(1000);
8000053a:	e0 6c 03 e8 	mov	r12,1000
8000053e:	f0 1f 00 23 	mcall	800005c8 <task1+0xcc>
		}
		
		if(0 == ROSA_semaphoreLock(S1))
80000542:	4a 48       	lddpc	r8,800005d0 <task1+0xd4>
80000544:	70 08       	ld.w	r8,r8[0x0]
80000546:	10 9c       	mov	r12,r8
80000548:	f0 1f 00 1e 	mcall	800005c0 <task1+0xc4>
8000054c:	18 98       	mov	r8,r12
8000054e:	58 08       	cp.w	r8,0
80000550:	c0 81       	brne	80000560 <task1+0x64>
		{
			ledOn(LED2_GPIO);
80000552:	33 dc       	mov	r12,61
80000554:	f0 1f 00 1c 	mcall	800005c4 <task1+0xc8>
			delay_ms(1000);
80000558:	e0 6c 03 e8 	mov	r12,1000
8000055c:	f0 1f 00 1b 	mcall	800005c8 <task1+0xcc>
		}
		
		if(0 == ROSA_semaphoreUnlock(S1))
80000560:	49 c8       	lddpc	r8,800005d0 <task1+0xd4>
80000562:	70 08       	ld.w	r8,r8[0x0]
80000564:	10 9c       	mov	r12,r8
80000566:	f0 1f 00 1c 	mcall	800005d4 <task1+0xd8>
8000056a:	18 98       	mov	r8,r12
8000056c:	58 08       	cp.w	r8,0
8000056e:	c0 81       	brne	8000057e <task1+0x82>
		{
			ledOff(LED2_GPIO);
80000570:	33 dc       	mov	r12,61
80000572:	f0 1f 00 1a 	mcall	800005d8 <task1+0xdc>
			delay_ms(1000);
80000576:	e0 6c 03 e8 	mov	r12,1000
8000057a:	f0 1f 00 14 	mcall	800005c8 <task1+0xcc>
		}
		
		if(0 == ROSA_semaphoreUnlock(S2))
8000057e:	49 48       	lddpc	r8,800005cc <task1+0xd0>
80000580:	70 08       	ld.w	r8,r8[0x0]
80000582:	10 9c       	mov	r12,r8
80000584:	f0 1f 00 14 	mcall	800005d4 <task1+0xd8>
80000588:	18 98       	mov	r8,r12
8000058a:	58 08       	cp.w	r8,0
8000058c:	c0 81       	brne	8000059c <task1+0xa0>
		{
			ledOff(LED1_GPIO);
8000058e:	33 cc       	mov	r12,60
80000590:	f0 1f 00 12 	mcall	800005d8 <task1+0xdc>
			delay_ms(1000);
80000594:	e0 6c 03 e8 	mov	r12,1000
80000598:	f0 1f 00 0c 	mcall	800005c8 <task1+0xcc>
		}
		
		if(0 == ROSA_semaphoreUnlock(S3))
8000059c:	48 88       	lddpc	r8,800005bc <task1+0xc0>
8000059e:	70 08       	ld.w	r8,r8[0x0]
800005a0:	10 9c       	mov	r12,r8
800005a2:	f0 1f 00 0d 	mcall	800005d4 <task1+0xd8>
800005a6:	18 98       	mov	r8,r12
800005a8:	58 08       	cp.w	r8,0
800005aa:	ca d1       	brne	80000504 <task1+0x8>
		{
			ledOff(LED0_GPIO);
800005ac:	33 bc       	mov	r12,59
800005ae:	f0 1f 00 0b 	mcall	800005d8 <task1+0xdc>
			delay_ms(1000);
800005b2:	e0 6c 03 e8 	mov	r12,1000
800005b6:	f0 1f 00 05 	mcall	800005c8 <task1+0xcc>
		}
	}
800005ba:	ca 6b       	rjmp	80000506 <task1+0xa>
800005bc:	00 00       	add	r0,r0
800005be:	06 68       	and	r8,r3
800005c0:	80 00       	ld.sh	r0,r0[0x0]
800005c2:	01 d8       	ld.ub	r8,r0[0x5]
800005c4:	80 00       	ld.sh	r0,r0[0x0]
800005c6:	13 60       	ld.uh	r0,--r9
800005c8:	80 00       	ld.sh	r0,r0[0x0]
800005ca:	11 08       	ld.w	r8,r8++
800005cc:	00 00       	add	r0,r0
800005ce:	06 70       	tst	r0,r3
800005d0:	00 00       	add	r0,r0
800005d2:	06 6c       	and	r12,r3
800005d4:	80 00       	ld.sh	r0,r0[0x0]
800005d6:	03 40       	ld.w	r0,--r1
800005d8:	80 00       	ld.sh	r0,r0[0x0]
800005da:	13 80       	ld.ub	r0,r9[0x0]

800005dc <led3_task>:
}


void led3_task(void)
{
800005dc:	eb cd 40 80 	pushm	r7,lr
800005e0:	1a 97       	mov	r7,sp
	while(1)
	{
		ledToggle(LED3_GPIO);
800005e2:	33 ec       	mov	r12,62
800005e4:	f0 1f 00 04 	mcall	800005f4 <led3_task+0x18>
		ROSA_delay(100);
800005e8:	36 4a       	mov	r10,100
800005ea:	30 0b       	mov	r11,0
800005ec:	f0 1f 00 03 	mcall	800005f8 <led3_task+0x1c>
	}
800005f0:	cf 9b       	rjmp	800005e2 <led3_task+0x6>
800005f2:	00 00       	add	r0,r0
800005f4:	80 00       	ld.sh	r0,r0[0x0]
800005f6:	13 a0       	ld.ub	r0,r9[0x2]
800005f8:	80 00       	ld.sh	r0,r0[0x0]
800005fa:	0c cc       	st.b	r6++,r12

800005fc <led5_task>:
}

void led5_task(void)
{
800005fc:	eb cd 40 80 	pushm	r7,lr
80000600:	1a 97       	mov	r7,sp
	while(1)
	{
		ledToggle(LED5_GPIO);
80000602:	33 4c       	mov	r12,52
80000604:	f0 1f 00 04 	mcall	80000614 <led5_task+0x18>
		ROSA_delay(100);
80000608:	36 4a       	mov	r10,100
8000060a:	30 0b       	mov	r11,0
8000060c:	f0 1f 00 03 	mcall	80000618 <led5_task+0x1c>
	}
80000610:	cf 9b       	rjmp	80000602 <led5_task+0x6>
80000612:	00 00       	add	r0,r0
80000614:	80 00       	ld.sh	r0,r0[0x0]
80000616:	13 a0       	ld.ub	r0,r9[0x2]
80000618:	80 00       	ld.sh	r0,r0[0x0]
8000061a:	0c cc       	st.b	r6++,r12

8000061c <led7_task>:
}

void led7_task(void)
{
8000061c:	eb cd 40 80 	pushm	r7,lr
80000620:	1a 97       	mov	r7,sp
	while(1)
	{
		ledToggle(LED7_GPIO);
80000622:	33 6c       	mov	r12,54
80000624:	f0 1f 00 04 	mcall	80000634 <led7_task+0x18>
		ROSA_delay(100);
80000628:	36 4a       	mov	r10,100
8000062a:	30 0b       	mov	r11,0
8000062c:	f0 1f 00 03 	mcall	80000638 <led7_task+0x1c>
	}
80000630:	cf 9b       	rjmp	80000622 <led7_task+0x6>
80000632:	00 00       	add	r0,r0
80000634:	80 00       	ld.sh	r0,r0[0x0]
80000636:	13 a0       	ld.ub	r0,r9[0x2]
80000638:	80 00       	ld.sh	r0,r0[0x0]
8000063a:	0c cc       	st.b	r6++,r12

8000063c <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
8000063c:	eb cd 40 80 	pushm	r7,lr
80000640:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
80000642:	f0 1f 00 18 	mcall	800006a0 <main+0x64>
	
	ROSA_semaphoreCreate(&S1,7);
80000646:	30 7b       	mov	r11,7
80000648:	49 7c       	lddpc	r12,800006a4 <main+0x68>
8000064a:	f0 1f 00 18 	mcall	800006a8 <main+0x6c>
	ROSA_semaphoreCreate(&S2,5);
8000064e:	30 5b       	mov	r11,5
80000650:	49 7c       	lddpc	r12,800006ac <main+0x70>
80000652:	f0 1f 00 16 	mcall	800006a8 <main+0x6c>
	ROSA_semaphoreCreate(&S3,3);
80000656:	30 3b       	mov	r11,3
80000658:	49 6c       	lddpc	r12,800006b0 <main+0x74>
8000065a:	f0 1f 00 14 	mcall	800006a8 <main+0x6c>
	
	ROSA_taskCreate(& task1_handle, "tsk1", task1, 0x40, 1);
8000065e:	30 18       	mov	r8,1
80000660:	34 09       	mov	r9,64
80000662:	49 5a       	lddpc	r10,800006b4 <main+0x78>
80000664:	49 5b       	lddpc	r11,800006b8 <main+0x7c>
80000666:	49 6c       	lddpc	r12,800006bc <main+0x80>
80000668:	f0 1f 00 16 	mcall	800006c0 <main+0x84>
	ROSA_taskCreate(& led3_task_handle, "led3", led3_task, 0x40, 6);
8000066c:	30 68       	mov	r8,6
8000066e:	34 09       	mov	r9,64
80000670:	49 5a       	lddpc	r10,800006c4 <main+0x88>
80000672:	49 6b       	lddpc	r11,800006c8 <main+0x8c>
80000674:	49 6c       	lddpc	r12,800006cc <main+0x90>
80000676:	f0 1f 00 13 	mcall	800006c0 <main+0x84>
	ROSA_taskCreate(& led5_task_handle, "led5", led5_task, 0x40, 4);
8000067a:	30 48       	mov	r8,4
8000067c:	34 09       	mov	r9,64
8000067e:	49 5a       	lddpc	r10,800006d0 <main+0x94>
80000680:	49 5b       	lddpc	r11,800006d4 <main+0x98>
80000682:	49 6c       	lddpc	r12,800006d8 <main+0x9c>
80000684:	f0 1f 00 0f 	mcall	800006c0 <main+0x84>
	ROSA_taskCreate(& led7_task_handle, "led7", led7_task, 0x40, 2);
80000688:	30 28       	mov	r8,2
8000068a:	34 09       	mov	r9,64
8000068c:	49 4a       	lddpc	r10,800006dc <main+0xa0>
8000068e:	49 5b       	lddpc	r11,800006e0 <main+0xa4>
80000690:	49 5c       	lddpc	r12,800006e4 <main+0xa8>
80000692:	f0 1f 00 0c 	mcall	800006c0 <main+0x84>
	
	//Start the timer
	timerStart();
80000696:	f0 1f 00 15 	mcall	800006e8 <main+0xac>
	
	ROSA_start();
8000069a:	f0 1f 00 15 	mcall	800006ec <main+0xb0>
	/* Execution will never return here */
	while(1);
8000069e:	c0 08       	rjmp	8000069e <main+0x62>
800006a0:	80 00       	ld.sh	r0,r0[0x0]
800006a2:	09 c8       	ld.ub	r8,r4[0x4]
800006a4:	00 00       	add	r0,r0
800006a6:	06 6c       	and	r12,r3
800006a8:	80 00       	ld.sh	r0,r0[0x0]
800006aa:	01 84       	ld.ub	r4,r0[0x0]
800006ac:	00 00       	add	r0,r0
800006ae:	06 70       	tst	r0,r3
800006b0:	00 00       	add	r0,r0
800006b2:	06 68       	and	r8,r3
800006b4:	80 00       	ld.sh	r0,r0[0x0]
800006b6:	04 fc       	st.b	--r2,r12
800006b8:	80 00       	ld.sh	r0,r0[0x0]
800006ba:	04 dc       	st.w	--r2,r12
800006bc:	00 00       	add	r0,r0
800006be:	05 18       	ld.sh	r8,r2++
800006c0:	80 00       	ld.sh	r0,r0[0x0]
800006c2:	0b 84       	ld.ub	r4,r5[0x0]
800006c4:	80 00       	ld.sh	r0,r0[0x0]
800006c6:	05 dc       	ld.ub	r12,r2[0x5]
800006c8:	80 00       	ld.sh	r0,r0[0x0]
800006ca:	04 e4       	st.h	--r2,r4
800006cc:	00 00       	add	r0,r0
800006ce:	05 1c       	ld.sh	r12,r2++
800006d0:	80 00       	ld.sh	r0,r0[0x0]
800006d2:	05 fc       	ld.ub	r12,r2[0x7]
800006d4:	80 00       	ld.sh	r0,r0[0x0]
800006d6:	04 ec       	st.h	--r2,r12
800006d8:	00 00       	add	r0,r0
800006da:	05 20       	ld.uh	r0,r2++
800006dc:	80 00       	ld.sh	r0,r0[0x0]
800006de:	06 1c       	sub	r12,r3
800006e0:	80 00       	ld.sh	r0,r0[0x0]
800006e2:	04 f4       	st.b	--r2,r4
800006e4:	00 00       	add	r0,r0
800006e6:	05 24       	ld.uh	r4,r2++
800006e8:	80 00       	ld.sh	r0,r0[0x0]
800006ea:	1b 96       	ld.ub	r6,sp[0x1]
800006ec:	80 00       	ld.sh	r0,r0[0x0]
800006ee:	0e 18       	sub	r8,r7

800006f0 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
800006f0:	eb cd 40 80 	pushm	r7,lr
800006f4:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
800006f6:	f0 1f 00 05 	mcall	80000708 <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
800006fa:	f0 1f 00 05 	mcall	8000070c <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it
800006fe:	f0 1f 00 05 	mcall	80000710 <ROSA_yieldFromISR+0x20>
}
80000702:	e3 cd 80 80 	ldm	sp++,r7,pc
80000706:	00 00       	add	r0,r0
80000708:	80 00       	ld.sh	r0,r0[0x0]
8000070a:	27 7e       	sub	lr,119
8000070c:	80 00       	ld.sh	r0,r0[0x0]
8000070e:	0e f8       	st.b	--r7,r8
80000710:	80 00       	ld.sh	r0,r0[0x0]
80000712:	27 b8       	sub	r8,123

80000714 <usart_options>:
80000714:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
80000724:	00 00 00 00 64 6c 61 79 00 00 00 00 55 53 41 52     ....dlay....USAR
80000734:	54 20 69 6e 69 74 69 61 6c 69 7a 65 64 0d 0a 00     T initialized...

80000744 <idle>:

/** @fn void idle(void)
	@brief Idle task body.
*/
void idle(void)
{
80000744:	eb cd 40 80 	pushm	r7,lr
80000748:	1a 97       	mov	r7,sp
	while(1);
8000074a:	c0 08       	rjmp	8000074a <idle+0x6>

8000074c <ROSA_tcbInstall>:
 * Comment:
 * 	Install the TCB into the TCBLIST.
 *
 **********************************************************/
void ROSA_tcbInstall(tcb * tcbTask)
{
8000074c:	eb cd 40 80 	pushm	r7,lr
80000750:	1a 97       	mov	r7,sp
80000752:	20 1d       	sub	sp,4
80000754:	ef 4c ff fc 	st.w	r7[-4],r12
	/* Is this the first tcb installed? */
	if(TCBLIST == NULL)
80000758:	49 38       	lddpc	r8,800007a4 <ROSA_tcbInstall+0x58>
8000075a:	70 08       	ld.w	r8,r8[0x0]
8000075c:	58 08       	cp.w	r8,0
8000075e:	c1 01       	brne	8000077e <ROSA_tcbInstall+0x32>
	{
		TCBLIST = tcbTask;
80000760:	49 18       	lddpc	r8,800007a4 <ROSA_tcbInstall+0x58>
80000762:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000766:	91 09       	st.w	r8[0x0],r9
		TCBLIST->nexttcb = tcbTask;			//Install the first tcb
80000768:	48 f8       	lddpc	r8,800007a4 <ROSA_tcbInstall+0x58>
8000076a:	70 08       	ld.w	r8,r8[0x0]
8000076c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000770:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
80000772:	48 d8       	lddpc	r8,800007a4 <ROSA_tcbInstall+0x58>
80000774:	70 09       	ld.w	r9,r8[0x0]
80000776:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000077a:	91 09       	st.w	r8[0x0],r9
8000077c:	c1 08       	rjmp	8000079c <ROSA_tcbInstall+0x50>
	}
	else
	{
		tcbTask->nexttcb = TCBLIST->nexttcb;
8000077e:	48 a8       	lddpc	r8,800007a4 <ROSA_tcbInstall+0x58>
80000780:	70 08       	ld.w	r8,r8[0x0]
80000782:	70 09       	ld.w	r9,r8[0x0]
80000784:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000788:	91 09       	st.w	r8[0x0],r9
		TCBLIST->nexttcb = tcbTask;
8000078a:	48 78       	lddpc	r8,800007a4 <ROSA_tcbInstall+0x58>
8000078c:	70 08       	ld.w	r8,r8[0x0]
8000078e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000792:	91 09       	st.w	r8[0x0],r9
		TCBLIST = tcbTask;
80000794:	48 48       	lddpc	r8,800007a4 <ROSA_tcbInstall+0x58>
80000796:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000079a:	91 09       	st.w	r8[0x0],r9
	}
}
8000079c:	2f fd       	sub	sp,-4
8000079e:	e3 cd 80 80 	ldm	sp++,r7,pc
800007a2:	00 00       	add	r0,r0
800007a4:	00 00       	add	r0,r0
800007a6:	06 78       	tst	r8,r3

800007a8 <ROSA_tcbUninstall>:

void ROSA_tcbUninstall(tcb * tcbTask)
{
800007a8:	eb cd 40 80 	pushm	r7,lr
800007ac:	1a 97       	mov	r7,sp
800007ae:	20 1d       	sub	sp,4
800007b0:	ef 4c ff fc 	st.w	r7[-4],r12
	while (TCBLIST->nexttcb != tcbTask)
800007b4:	c0 68       	rjmp	800007c0 <ROSA_tcbUninstall+0x18>
	{
		TCBLIST = TCBLIST->nexttcb;
800007b6:	49 88       	lddpc	r8,80000814 <ROSA_tcbUninstall+0x6c>
800007b8:	70 08       	ld.w	r8,r8[0x0]
800007ba:	70 09       	ld.w	r9,r8[0x0]
800007bc:	49 68       	lddpc	r8,80000814 <ROSA_tcbUninstall+0x6c>
800007be:	91 09       	st.w	r8[0x0],r9
	}
}

void ROSA_tcbUninstall(tcb * tcbTask)
{
	while (TCBLIST->nexttcb != tcbTask)
800007c0:	49 58       	lddpc	r8,80000814 <ROSA_tcbUninstall+0x6c>
800007c2:	70 08       	ld.w	r8,r8[0x0]
800007c4:	70 09       	ld.w	r9,r8[0x0]
800007c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007ca:	10 39       	cp.w	r9,r8
800007cc:	cf 51       	brne	800007b6 <ROSA_tcbUninstall+0xe>
	{
		TCBLIST = TCBLIST->nexttcb;
	}
	
	TCBLIST->nexttcb = tcbTask->nexttcb;
800007ce:	49 28       	lddpc	r8,80000814 <ROSA_tcbUninstall+0x6c>
800007d0:	70 08       	ld.w	r8,r8[0x0]
800007d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800007d6:	72 09       	ld.w	r9,r9[0x0]
800007d8:	91 09       	st.w	r8[0x0],r9
	tcbTask->nexttcb = NULL;
800007da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007de:	30 09       	mov	r9,0
800007e0:	91 09       	st.w	r8[0x0],r9
	
	if (tcbTask->delay)	
800007e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007e6:	f0 e8 00 68 	ld.d	r8,r8[104]
800007ea:	58 08       	cp.w	r8,0
800007ec:	5c 29       	cpc	r9
800007ee:	c0 70       	breq	800007fc <ROSA_tcbUninstall+0x54>
	{
		TCBLIST = TCBLIST->nexttcb;
800007f0:	48 98       	lddpc	r8,80000814 <ROSA_tcbUninstall+0x6c>
800007f2:	70 08       	ld.w	r8,r8[0x0]
800007f4:	70 09       	ld.w	r9,r8[0x0]
800007f6:	48 88       	lddpc	r8,80000814 <ROSA_tcbUninstall+0x6c>
800007f8:	91 09       	st.w	r8[0x0],r9
800007fa:	c0 a8       	rjmp	8000080e <ROSA_tcbUninstall+0x66>
	}
	else if (TCBLIST == tcbTask)
800007fc:	48 68       	lddpc	r8,80000814 <ROSA_tcbUninstall+0x6c>
800007fe:	70 09       	ld.w	r9,r8[0x0]
80000800:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000804:	10 39       	cp.w	r9,r8
80000806:	c0 41       	brne	8000080e <ROSA_tcbUninstall+0x66>
	{
		TCBLIST = NULL;	
80000808:	48 38       	lddpc	r8,80000814 <ROSA_tcbUninstall+0x6c>
8000080a:	30 09       	mov	r9,0
8000080c:	91 09       	st.w	r8[0x0],r9
	}
}
8000080e:	2f fd       	sub	sp,-4
80000810:	e3 cd 80 80 	ldm	sp++,r7,pc
80000814:	00 00       	add	r0,r0
80000816:	06 78       	tst	r8,r3

80000818 <readyQueueSearch>:
/** @fn int readyQueueSearch(void)
	@brief Search for the first non-empty highest priority queue.
	@return Pointer to the last tcb in the queue (in other words - PA[i]).
*/
tcb * readyQueueSearch(void)
{
80000818:	eb cd 40 80 	pushm	r7,lr
8000081c:	1a 97       	mov	r7,sp
8000081e:	20 2d       	sub	sp,8
	int i = MAXNPRIO;
80000820:	30 c8       	mov	r8,12
80000822:	ef 48 ff f8 	st.w	r7[-8],r8
	tcb * retval;
		
	interruptDisable();
80000826:	f0 1f 00 1a 	mcall	8000088c <readyQueueSearch+0x74>
	/* Search for the first non-empty queue. */
	while ( (PA[--i] == NULL) && (i > 0));
8000082a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000082e:	20 18       	sub	r8,1
80000830:	ef 48 ff f8 	st.w	r7[-8],r8
80000834:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000838:	49 68       	lddpc	r8,80000890 <readyQueueSearch+0x78>
8000083a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000083e:	58 08       	cp.w	r8,0
80000840:	c0 61       	brne	8000084c <readyQueueSearch+0x34>
80000842:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000846:	58 08       	cp.w	r8,0
80000848:	fe 99 ff f1 	brgt	8000082a <readyQueueSearch+0x12>
	
	if ((i == 0) && (PA[i] == NULL))
8000084c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000850:	58 08       	cp.w	r8,0
80000852:	c0 d1       	brne	8000086c <readyQueueSearch+0x54>
80000854:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000858:	48 e8       	lddpc	r8,80000890 <readyQueueSearch+0x78>
8000085a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000085e:	58 08       	cp.w	r8,0
80000860:	c0 61       	brne	8000086c <readyQueueSearch+0x54>
	{
		retval = IDLETASK;
80000862:	48 d8       	lddpc	r8,80000894 <readyQueueSearch+0x7c>
80000864:	70 08       	ld.w	r8,r8[0x0]
80000866:	ef 48 ff fc 	st.w	r7[-4],r8
		
	interruptDisable();
	/* Search for the first non-empty queue. */
	while ( (PA[--i] == NULL) && (i > 0));
	
	if ((i == 0) && (PA[i] == NULL))
8000086a:	c0 88       	rjmp	8000087a <readyQueueSearch+0x62>
	{
		retval = IDLETASK;
	}
	else
	{
		retval = PA[i];
8000086c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000870:	48 88       	lddpc	r8,80000890 <readyQueueSearch+0x78>
80000872:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000876:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	interruptEnable();
8000087a:	f0 1f 00 08 	mcall	80000898 <readyQueueSearch+0x80>
	
	return retval;
8000087e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80000882:	10 9c       	mov	r12,r8
80000884:	2f ed       	sub	sp,-8
80000886:	e3 cd 80 80 	ldm	sp++,r7,pc
8000088a:	00 00       	add	r0,r0
8000088c:	80 00       	ld.sh	r0,r0[0x0]
8000088e:	27 66       	sub	r6,118
80000890:	00 00       	add	r0,r0
80000892:	06 7c       	tst	r12,r3
80000894:	00 00       	add	r0,r0
80000896:	06 74       	tst	r4,r3
80000898:	80 00       	ld.sh	r0,r0[0x0]
8000089a:	27 6a       	sub	r10,118

8000089c <dlay>:

void dlay()
{
8000089c:	eb cd 40 80 	pushm	r7,lr
800008a0:	1a 97       	mov	r7,sp
800008a2:	20 1d       	sub	sp,4
	tcb * tmp;
	
	while (1)
	{	
		interruptDisable();
800008a4:	f0 1f 00 26 	mcall	8000093c <dlay+0xa0>
			
		while ((DQ) && (DQ->delay <= systemTick))
800008a8:	c3 08       	rjmp	80000908 <dlay+0x6c>
		{	
			tmp = DQ;
800008aa:	4a 68       	lddpc	r8,80000940 <dlay+0xa4>
800008ac:	70 08       	ld.w	r8,r8[0x0]
800008ae:	ef 48 ff fc 	st.w	r7[-4],r8

			ROSA_TM_ACTION(DQ, DQ, Uninstall);
800008b2:	4a 48       	lddpc	r8,80000940 <dlay+0xa4>
800008b4:	70 09       	ld.w	r9,r8[0x0]
800008b6:	4a 48       	lddpc	r8,80000944 <dlay+0xa8>
800008b8:	91 09       	st.w	r8[0x0],r9
800008ba:	4a 28       	lddpc	r8,80000940 <dlay+0xa4>
800008bc:	70 08       	ld.w	r8,r8[0x0]
800008be:	10 9c       	mov	r12,r8
800008c0:	f0 1f 00 22 	mcall	80000948 <dlay+0xac>
800008c4:	4a 08       	lddpc	r8,80000944 <dlay+0xa8>
800008c6:	70 09       	ld.w	r9,r8[0x0]
800008c8:	49 e8       	lddpc	r8,80000940 <dlay+0xa4>
800008ca:	91 09       	st.w	r8[0x0],r9
		
			tmp->delay = 0;
800008cc:	ee fa ff fc 	ld.w	r10,r7[-4]
800008d0:	30 08       	mov	r8,0
800008d2:	30 09       	mov	r9,0
800008d4:	f4 e9 00 68 	st.d	r10[104],r8
			ROSA_TM_ACTION(PA[tmp->priority], tmp, Install);
800008d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008dc:	f1 38 00 64 	ld.ub	r8,r8[100]
800008e0:	10 99       	mov	r9,r8
800008e2:	49 b8       	lddpc	r8,8000094c <dlay+0xb0>
800008e4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800008e8:	49 78       	lddpc	r8,80000944 <dlay+0xa8>
800008ea:	91 09       	st.w	r8[0x0],r9
800008ec:	ee fc ff fc 	ld.w	r12,r7[-4]
800008f0:	f0 1f 00 18 	mcall	80000950 <dlay+0xb4>
800008f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008f8:	f1 38 00 64 	ld.ub	r8,r8[100]
800008fc:	10 99       	mov	r9,r8
800008fe:	49 28       	lddpc	r8,80000944 <dlay+0xa8>
80000900:	70 0a       	ld.w	r10,r8[0x0]
80000902:	49 38       	lddpc	r8,8000094c <dlay+0xb0>
80000904:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	
	while (1)
	{	
		interruptDisable();
			
		while ((DQ) && (DQ->delay <= systemTick))
80000908:	48 e8       	lddpc	r8,80000940 <dlay+0xa4>
8000090a:	70 08       	ld.w	r8,r8[0x0]
8000090c:	58 08       	cp.w	r8,0
8000090e:	c0 d0       	breq	80000928 <dlay+0x8c>
80000910:	48 c8       	lddpc	r8,80000940 <dlay+0xa4>
80000912:	70 08       	ld.w	r8,r8[0x0]
80000914:	f0 ea 00 68 	ld.d	r10,r8[104]
80000918:	48 f8       	lddpc	r8,80000954 <dlay+0xb8>
8000091a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000091e:	10 3a       	cp.w	r10,r8
80000920:	f2 0b 13 00 	cpc	r11,r9
80000924:	fe 98 ff c3 	brls	800008aa <dlay+0xe>
		
			tmp->delay = 0;
			ROSA_TM_ACTION(PA[tmp->priority], tmp, Install);
		}

		PREEMPTASK = readyQueueSearch();
80000928:	f0 1f 00 0c 	mcall	80000958 <dlay+0xbc>
8000092c:	18 99       	mov	r9,r12
8000092e:	48 c8       	lddpc	r8,8000095c <dlay+0xc0>
80000930:	91 09       	st.w	r8[0x0],r9
		
		interruptEnable();
80000932:	f0 1f 00 0c 	mcall	80000960 <dlay+0xc4>
		
		ROSA_yield();
80000936:	f0 1f 00 0c 	mcall	80000964 <dlay+0xc8>
	}
8000093a:	cb 5b       	rjmp	800008a4 <dlay+0x8>
8000093c:	80 00       	ld.sh	r0,r0[0x0]
8000093e:	27 66       	sub	r6,118
80000940:	00 00       	add	r0,r0
80000942:	07 2c       	ld.uh	r12,r3++
80000944:	00 00       	add	r0,r0
80000946:	06 78       	tst	r8,r3
80000948:	80 00       	ld.sh	r0,r0[0x0]
8000094a:	07 a8       	ld.ub	r8,r3[0x2]
8000094c:	00 00       	add	r0,r0
8000094e:	06 7c       	tst	r12,r3
80000950:	80 00       	ld.sh	r0,r0[0x0]
80000952:	07 4c       	ld.w	r12,--r3
80000954:	00 00       	add	r0,r0
80000956:	07 a4       	ld.ub	r4,r3[0x2]
80000958:	80 00       	ld.sh	r0,r0[0x0]
8000095a:	08 18       	sub	r8,r4
8000095c:	00 00       	add	r0,r0
8000095e:	06 b0       	st.h	r3++,r0
80000960:	80 00       	ld.sh	r0,r0[0x0]
80000962:	27 6a       	sub	r10,118
80000964:	80 00       	ld.sh	r0,r0[0x0]
80000966:	0e da       	st.w	--r7,r10

80000968 <sysTasksCreate>:

/** @fn void idleCreate(void)
	@brief Creation of the idle task.
*/
void sysTasksCreate(void)
{
80000968:	eb cd 40 80 	pushm	r7,lr
8000096c:	1a 97       	mov	r7,sp
	ROSA_tcbCreate(&IDLETASK_TCB, "idle", idle, idle_stack, SYS_TASK_STACK_SIZE);
8000096e:	32 08       	mov	r8,32
80000970:	48 b9       	lddpc	r9,8000099c <sysTasksCreate+0x34>
80000972:	48 ca       	lddpc	r10,800009a0 <sysTasksCreate+0x38>
80000974:	48 cb       	lddpc	r11,800009a4 <sysTasksCreate+0x3c>
80000976:	48 dc       	lddpc	r12,800009a8 <sysTasksCreate+0x40>
80000978:	f0 1f 00 0d 	mcall	800009ac <sysTasksCreate+0x44>
	IDLETASK = &IDLETASK_TCB;
8000097c:	48 d8       	lddpc	r8,800009b0 <sysTasksCreate+0x48>
8000097e:	48 b9       	lddpc	r9,800009a8 <sysTasksCreate+0x40>
80000980:	91 09       	st.w	r8[0x0],r9
	
	ROSA_tcbCreate(&DELHANDL_TCB, "dlay", dlay, dlay_stack, SYS_TASK_STACK_SIZE);
80000982:	32 08       	mov	r8,32
80000984:	48 c9       	lddpc	r9,800009b4 <sysTasksCreate+0x4c>
80000986:	48 da       	lddpc	r10,800009b8 <sysTasksCreate+0x50>
80000988:	48 db       	lddpc	r11,800009bc <sysTasksCreate+0x54>
8000098a:	48 ec       	lddpc	r12,800009c0 <sysTasksCreate+0x58>
8000098c:	f0 1f 00 08 	mcall	800009ac <sysTasksCreate+0x44>
	DELHANDL = &DELHANDL_TCB;
80000990:	48 d8       	lddpc	r8,800009c4 <sysTasksCreate+0x5c>
80000992:	48 c9       	lddpc	r9,800009c0 <sysTasksCreate+0x58>
80000994:	91 09       	st.w	r8[0x0],r9
}
80000996:	e3 cd 80 80 	ldm	sp++,r7,pc
8000099a:	00 00       	add	r0,r0
8000099c:	00 00       	add	r0,r0
8000099e:	05 2c       	ld.uh	r12,r2++
800009a0:	80 00       	ld.sh	r0,r0[0x0]
800009a2:	07 44       	ld.w	r4,--r3
800009a4:	80 00       	ld.sh	r0,r0[0x0]
800009a6:	07 20       	ld.uh	r0,r3++
800009a8:	00 00       	add	r0,r0
800009aa:	07 30       	ld.ub	r0,r3++
800009ac:	80 00       	ld.sh	r0,r0[0x0]
800009ae:	0a d0       	st.w	--r5,r0
800009b0:	00 00       	add	r0,r0
800009b2:	06 74       	tst	r4,r3
800009b4:	00 00       	add	r0,r0
800009b6:	05 ac       	ld.ub	r12,r2[0x2]
800009b8:	80 00       	ld.sh	r0,r0[0x0]
800009ba:	08 9c       	mov	r12,r4
800009bc:	80 00       	ld.sh	r0,r0[0x0]
800009be:	07 28       	ld.uh	r8,r3++
800009c0:	00 00       	add	r0,r0
800009c2:	06 b4       	st.h	r3++,r4
800009c4:	00 00       	add	r0,r0
800009c6:	06 ac       	st.w	r3++,r12

800009c8 <ROSA_init>:

void ROSA_init(void)
{
800009c8:	eb cd 40 80 	pushm	r7,lr
800009cc:	1a 97       	mov	r7,sp
800009ce:	20 1d       	sub	sp,4
	int i = 0;
800009d0:	30 08       	mov	r8,0
800009d2:	ef 48 ff fc 	st.w	r7[-4],r8
	systemTick = 0;
800009d6:	4a aa       	lddpc	r10,80000a7c <ROSA_init+0xb4>
800009d8:	30 08       	mov	r8,0
800009da:	30 09       	mov	r9,0
800009dc:	f4 e9 00 00 	st.d	r10[0],r8
	
	if (ROSA_init_GUARD == 0)
800009e0:	4a 88       	lddpc	r8,80000a80 <ROSA_init+0xb8>
800009e2:	70 08       	ld.w	r8,r8[0x0]
800009e4:	58 08       	cp.w	r8,0
800009e6:	c4 51       	brne	80000a70 <ROSA_init+0xa8>
	{
		//Do initialization of I/O drivers
		ledInit();									//LEDs
800009e8:	f0 1f 00 27 	mcall	80000a84 <ROSA_init+0xbc>
		buttonInit();								//Buttons
800009ec:	f0 1f 00 27 	mcall	80000a88 <ROSA_init+0xc0>
		joystickInit();								//Joystick
800009f0:	f0 1f 00 27 	mcall	80000a8c <ROSA_init+0xc4>
		potInit();									//Potentiometer
800009f4:	f0 1f 00 27 	mcall	80000a90 <ROSA_init+0xc8>
		usartInit(USART, &usart_options, FOSC0);	//Serial communication
800009f8:	e0 6a 1b 00 	mov	r10,6912
800009fc:	ea 1a 00 b7 	orh	r10,0xb7
80000a00:	4a 5b       	lddpc	r11,80000a94 <ROSA_init+0xcc>
80000a02:	fe 7c 14 00 	mov	r12,-60416
80000a06:	f0 1f 00 25 	mcall	80000a98 <ROSA_init+0xd0>
		usartWriteLine(USART, "USART initialized\r\n");
80000a0a:	4a 5b       	lddpc	r11,80000a9c <ROSA_init+0xd4>
80000a0c:	fe 7c 14 00 	mov	r12,-60416
80000a10:	f0 1f 00 24 	mcall	80000aa0 <ROSA_init+0xd8>

		interruptInit();
80000a14:	f0 1f 00 24 	mcall	80000aa4 <ROSA_init+0xdc>
		interruptEnable();
80000a18:	f0 1f 00 24 	mcall	80000aa8 <ROSA_init+0xe0>
		timerInit(1);
80000a1c:	30 1c       	mov	r12,1
80000a1e:	f0 1f 00 24 	mcall	80000aac <ROSA_init+0xe4>
		timerStart();
80000a22:	f0 1f 00 24 	mcall	80000ab0 <ROSA_init+0xe8>
	
		//Start with empty TCBLIST and no EXECTASK.
		TCBLIST = NULL;
80000a26:	4a 48       	lddpc	r8,80000ab4 <ROSA_init+0xec>
80000a28:	30 09       	mov	r9,0
80000a2a:	91 09       	st.w	r8[0x0],r9
		EXECTASK = NULL;
80000a2c:	4a 38       	lddpc	r8,80000ab8 <ROSA_init+0xf0>
80000a2e:	30 09       	mov	r9,0
80000a30:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
80000a32:	4a 38       	lddpc	r8,80000abc <ROSA_init+0xf4>
80000a34:	30 09       	mov	r9,0
80000a36:	91 09       	st.w	r8[0x0],r9
		DQ = NULL;
80000a38:	4a 28       	lddpc	r8,80000ac0 <ROSA_init+0xf8>
80000a3a:	30 09       	mov	r9,0
80000a3c:	91 09       	st.w	r8[0x0],r9
		LOCKEDSEMAPHORELIST=NULL;
80000a3e:	4a 28       	lddpc	r8,80000ac4 <ROSA_init+0xfc>
80000a40:	30 09       	mov	r9,0
80000a42:	91 09       	st.w	r8[0x0],r9
	
		/* Create system's tasks (idle, delay). */
		sysTasksCreate();
80000a44:	f0 1f 00 21 	mcall	80000ac8 <ROSA_init+0x100>
	

		for (i = 0; i < MAXNPRIO; PA[i++] = NULL);
80000a48:	30 08       	mov	r8,0
80000a4a:	ef 48 ff fc 	st.w	r7[-4],r8
80000a4e:	c0 c8       	rjmp	80000a66 <ROSA_init+0x9e>
80000a50:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000a54:	49 e8       	lddpc	r8,80000acc <ROSA_init+0x104>
80000a56:	30 0a       	mov	r10,0
80000a58:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80000a5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a60:	2f f8       	sub	r8,-1
80000a62:	ef 48 ff fc 	st.w	r7[-4],r8
80000a66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a6a:	58 b8       	cp.w	r8,11
80000a6c:	fe 9a ff f2 	brle	80000a50 <ROSA_init+0x88>
	}
	
	ROSA_init_GUARD = 1;
80000a70:	48 48       	lddpc	r8,80000a80 <ROSA_init+0xb8>
80000a72:	30 19       	mov	r9,1
80000a74:	91 09       	st.w	r8[0x0],r9

}
80000a76:	2f fd       	sub	sp,-4
80000a78:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a7c:	00 00       	add	r0,r0
80000a7e:	07 a4       	ld.ub	r4,r3[0x2]
80000a80:	00 00       	add	r0,r0
80000a82:	05 28       	ld.uh	r8,r2++
80000a84:	80 00       	ld.sh	r0,r0[0x0]
80000a86:	12 d4       	st.w	--r9,r4
80000a88:	80 00       	ld.sh	r0,r0[0x0]
80000a8a:	10 a8       	st.w	r8++,r8
80000a8c:	80 00       	ld.sh	r0,r0[0x0]
80000a8e:	10 d0       	st.w	--r8,r0
80000a90:	80 00       	ld.sh	r0,r0[0x0]
80000a92:	13 c0       	ld.ub	r0,r9[0x4]
80000a94:	80 00       	ld.sh	r0,r0[0x0]
80000a96:	07 14       	ld.sh	r4,r3++
80000a98:	80 00       	ld.sh	r0,r0[0x0]
80000a9a:	15 74       	ld.ub	r4,--r10
80000a9c:	80 00       	ld.sh	r0,r0[0x0]
80000a9e:	07 30       	ld.ub	r0,r3++
80000aa0:	80 00       	ld.sh	r0,r0[0x0]
80000aa2:	16 f0       	st.b	--r11,r0
80000aa4:	80 00       	ld.sh	r0,r0[0x0]
80000aa6:	27 48       	sub	r8,116
80000aa8:	80 00       	ld.sh	r0,r0[0x0]
80000aaa:	27 6a       	sub	r10,118
80000aac:	80 00       	ld.sh	r0,r0[0x0]
80000aae:	1b 68       	ld.uh	r8,--sp
80000ab0:	80 00       	ld.sh	r0,r0[0x0]
80000ab2:	1b 96       	ld.ub	r6,sp[0x1]
80000ab4:	00 00       	add	r0,r0
80000ab6:	06 78       	tst	r8,r3
80000ab8:	00 00       	add	r0,r0
80000aba:	07 28       	ld.uh	r8,r3++
80000abc:	00 00       	add	r0,r0
80000abe:	06 b0       	st.h	r3++,r0
80000ac0:	00 00       	add	r0,r0
80000ac2:	07 2c       	ld.uh	r12,r3++
80000ac4:	00 00       	add	r0,r0
80000ac6:	06 64       	and	r4,r3
80000ac8:	80 00       	ld.sh	r0,r0[0x0]
80000aca:	09 68       	ld.uh	r8,--r4
80000acc:	00 00       	add	r0,r0
80000ace:	06 7c       	tst	r12,r3

80000ad0 <ROSA_tcbCreate>:

void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
80000ad0:	eb cd 40 80 	pushm	r7,lr
80000ad4:	1a 97       	mov	r7,sp
80000ad6:	20 6d       	sub	sp,24
80000ad8:	ef 4c ff f8 	st.w	r7[-8],r12
80000adc:	ef 4b ff f4 	st.w	r7[-12],r11
80000ae0:	ef 4a ff f0 	st.w	r7[-16],r10
80000ae4:	ef 49 ff ec 	st.w	r7[-20],r9
80000ae8:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++)
80000aec:	30 08       	mov	r8,0
80000aee:	ef 48 ff fc 	st.w	r7[-4],r8
80000af2:	c1 48       	rjmp	80000b1a <ROSA_tcbCreate+0x4a>
	{
		tcbTask->id[i] = tcbName[i];
80000af4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000af8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000afc:	ee fa ff f4 	ld.w	r10,r7[-12]
80000b00:	f4 08 00 08 	add	r8,r10,r8
80000b04:	11 88       	ld.ub	r8,r8[0x0]
80000b06:	ee fa ff f8 	ld.w	r10,r7[-8]
80000b0a:	f4 09 00 09 	add	r9,r10,r9
80000b0e:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++)
80000b10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b14:	2f f8       	sub	r8,-1
80000b16:	ef 48 ff fc 	st.w	r7[-4],r8
80000b1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b1e:	58 38       	cp.w	r8,3
80000b20:	fe 9a ff ea 	brle	80000af4 <ROSA_tcbCreate+0x24>
	{
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
80000b24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b28:	30 09       	mov	r9,0
80000b2a:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
80000b2c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000b30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b34:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
80000b36:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000b3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b3e:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
80000b40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b44:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000b48:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
80000b4a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000b4e:	a3 68       	lsl	r8,0x2
80000b50:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000b54:	10 09       	add	r9,r8
80000b56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b5a:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
80000b5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b60:	70 39       	ld.w	r9,r8[0xc]
80000b62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b66:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
80000b68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b6c:	fc 19 00 1c 	movh	r9,0x1c
80000b70:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
80000b72:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b76:	f0 1f 00 03 	mcall	80000b80 <ROSA_tcbCreate+0xb0>
}
80000b7a:	2f ad       	sub	sp,-24
80000b7c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b80:	80 00       	ld.sh	r0,r0[0x0]
80000b82:	0e 4e       	or	lr,r7

80000b84 <ROSA_taskCreate>:

int16_t ROSA_taskCreate(ROSA_taskHandle_t ** pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t prio)
{
80000b84:	eb cd 40 80 	pushm	r7,lr
80000b88:	1a 97       	mov	r7,sp
80000b8a:	20 6d       	sub	sp,24
80000b8c:	ef 4c ff f8 	st.w	r7[-8],r12
80000b90:	ef 4b ff f4 	st.w	r7[-12],r11
80000b94:	ef 4a ff f0 	st.w	r7[-16],r10
80000b98:	ef 49 ff ec 	st.w	r7[-20],r9
80000b9c:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) malloc(stackSize * sizeof(uint32_t)); 
80000ba0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ba4:	a3 68       	lsl	r8,0x2
80000ba6:	10 9c       	mov	r12,r8
80000ba8:	f0 1f 00 3f 	mcall	80000ca4 <ROSA_taskCreate+0x120>
80000bac:	18 98       	mov	r8,r12
80000bae:	ef 48 ff fc 	st.w	r7[-4],r8
	MEM_CHECK(tcbStack);
80000bb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bb6:	58 08       	cp.w	r8,0
80000bb8:	c0 31       	brne	80000bbe <ROSA_taskCreate+0x3a>
80000bba:	3f f8       	mov	r8,-1
80000bbc:	c7 08       	rjmp	80000c9c <ROSA_taskCreate+0x118>
	
	*pth = (ROSA_taskHandle_t *) malloc(sizeof(ROSA_taskHandle_t));
80000bbe:	37 4c       	mov	r12,116
80000bc0:	f0 1f 00 39 	mcall	80000ca4 <ROSA_taskCreate+0x120>
80000bc4:	18 98       	mov	r8,r12
80000bc6:	10 99       	mov	r9,r8
80000bc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bcc:	91 09       	st.w	r8[0x0],r9
	MEM_CHECK(*pth);
80000bce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bd2:	70 08       	ld.w	r8,r8[0x0]
80000bd4:	58 08       	cp.w	r8,0
80000bd6:	c0 31       	brne	80000bdc <ROSA_taskCreate+0x58>
80000bd8:	3f f8       	mov	r8,-1
80000bda:	c6 18       	rjmp	80000c9c <ROSA_taskCreate+0x118>
	
	(*pth)->priority = prio;
80000bdc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000be0:	70 09       	ld.w	r9,r8[0x0]
80000be2:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80000be6:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
80000bea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bee:	70 0a       	ld.w	r10,r8[0x0]
80000bf0:	30 08       	mov	r8,0
80000bf2:	30 09       	mov	r9,0
80000bf4:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
80000bf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bfc:	70 09       	ld.w	r9,r8[0x0]
80000bfe:	30 08       	mov	r8,0
80000c00:	f3 68 00 70 	st.b	r9[112],r8
	(*pth)->originalPriority = prio;
80000c04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c08:	70 09       	ld.w	r9,r8[0x0]
80000c0a:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80000c0e:	f3 68 00 71 	st.b	r9[113],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
80000c12:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c16:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c1a:	72 0c       	ld.w	r12,r9[0x0]
80000c1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000c20:	ee fa ff f0 	ld.w	r10,r7[-16]
80000c24:	ee fb ff f4 	ld.w	r11,r7[-12]
80000c28:	f0 1f 00 20 	mcall	80000ca8 <ROSA_taskCreate+0x124>
	
	interruptDisable();
80000c2c:	f0 1f 00 20 	mcall	80000cac <ROSA_taskCreate+0x128>
	ROSA_TM_ACTION(PA[(*pth)->priority], *pth, Install);
80000c30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c34:	70 08       	ld.w	r8,r8[0x0]
80000c36:	f1 38 00 64 	ld.ub	r8,r8[100]
80000c3a:	10 99       	mov	r9,r8
80000c3c:	49 d8       	lddpc	r8,80000cb0 <ROSA_taskCreate+0x12c>
80000c3e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000c42:	49 d8       	lddpc	r8,80000cb4 <ROSA_taskCreate+0x130>
80000c44:	91 09       	st.w	r8[0x0],r9
80000c46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c4a:	70 08       	ld.w	r8,r8[0x0]
80000c4c:	10 9c       	mov	r12,r8
80000c4e:	f0 1f 00 1b 	mcall	80000cb8 <ROSA_taskCreate+0x134>
80000c52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c56:	70 08       	ld.w	r8,r8[0x0]
80000c58:	f1 38 00 64 	ld.ub	r8,r8[100]
80000c5c:	10 99       	mov	r9,r8
80000c5e:	49 68       	lddpc	r8,80000cb4 <ROSA_taskCreate+0x130>
80000c60:	70 0a       	ld.w	r10,r8[0x0]
80000c62:	49 48       	lddpc	r8,80000cb0 <ROSA_taskCreate+0x12c>
80000c64:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	interruptEnable();
80000c68:	f0 1f 00 15 	mcall	80000cbc <ROSA_taskCreate+0x138>
			
	if ((EXECTASK) && (EXECTASK->priority < prio))
80000c6c:	49 58       	lddpc	r8,80000cc0 <ROSA_taskCreate+0x13c>
80000c6e:	70 08       	ld.w	r8,r8[0x0]
80000c70:	58 08       	cp.w	r8,0
80000c72:	c1 40       	breq	80000c9a <ROSA_taskCreate+0x116>
80000c74:	49 38       	lddpc	r8,80000cc0 <ROSA_taskCreate+0x13c>
80000c76:	70 08       	ld.w	r8,r8[0x0]
80000c78:	f1 38 00 64 	ld.ub	r8,r8[100]
80000c7c:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000c80:	f0 09 18 00 	cp.b	r9,r8
80000c84:	e0 88 00 0b 	brls	80000c9a <ROSA_taskCreate+0x116>
	{
		PREEMPTASK = PA[prio];
80000c88:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000c8c:	48 98       	lddpc	r8,80000cb0 <ROSA_taskCreate+0x12c>
80000c8e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000c92:	48 d8       	lddpc	r8,80000cc4 <ROSA_taskCreate+0x140>
80000c94:	91 09       	st.w	r8[0x0],r9
		ROSA_yield();
80000c96:	f0 1f 00 0d 	mcall	80000cc8 <ROSA_taskCreate+0x144>
	}	
	
	return 0;
80000c9a:	30 08       	mov	r8,0
}
80000c9c:	10 9c       	mov	r12,r8
80000c9e:	2f ad       	sub	sp,-24
80000ca0:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ca4:	80 00       	ld.sh	r0,r0[0x0]
80000ca6:	1d 18       	ld.sh	r8,lr++
80000ca8:	80 00       	ld.sh	r0,r0[0x0]
80000caa:	0a d0       	st.w	--r5,r0
80000cac:	80 00       	ld.sh	r0,r0[0x0]
80000cae:	27 66       	sub	r6,118
80000cb0:	00 00       	add	r0,r0
80000cb2:	06 7c       	tst	r12,r3
80000cb4:	00 00       	add	r0,r0
80000cb6:	06 78       	tst	r8,r3
80000cb8:	80 00       	ld.sh	r0,r0[0x0]
80000cba:	07 4c       	ld.w	r12,--r3
80000cbc:	80 00       	ld.sh	r0,r0[0x0]
80000cbe:	27 6a       	sub	r10,118
80000cc0:	00 00       	add	r0,r0
80000cc2:	07 28       	ld.uh	r8,r3++
80000cc4:	00 00       	add	r0,r0
80000cc6:	06 b0       	st.h	r3++,r0
80000cc8:	80 00       	ld.sh	r0,r0[0x0]
80000cca:	0e da       	st.w	--r7,r10

80000ccc <ROSA_delay>:
/* ROSA_delay()															*/
/*																		*/
/* Suspends the calling task for the given number of ticks				*/
/************************************************************************/
int16_t ROSA_delay(uint64_t ticks)
{
80000ccc:	eb cd 40 80 	pushm	r7,lr
80000cd0:	1a 97       	mov	r7,sp
80000cd2:	20 5d       	sub	sp,20
80000cd4:	ee eb ff ec 	st.d	r7[-20],r10
	uint64_t dv;
	uint8_t pr;
	
	interruptDisable();
80000cd8:	f0 1f 00 43 	mcall	80000de4 <ROSA_delay+0x118>
	
	dv = ROSA_getTickCount() + ticks;
80000cdc:	f0 1f 00 43 	mcall	80000de8 <ROSA_delay+0x11c>
80000ce0:	ee e8 ff ec 	ld.d	r8,r7[-20]
80000ce4:	f4 08 00 08 	add	r8,r10,r8
80000ce8:	f6 09 00 49 	adc	r9,r11,r9
80000cec:	ee e9 ff f4 	st.d	r7[-12],r8
	pr = EXECTASK->priority;
80000cf0:	4b f8       	lddpc	r8,80000dec <ROSA_delay+0x120>
80000cf2:	70 08       	ld.w	r8,r8[0x0]
80000cf4:	f1 38 00 64 	ld.ub	r8,r8[100]
80000cf8:	ef 68 ff ff 	st.b	r7[-1],r8
	
	EXECTASK->delay = dv;
80000cfc:	4b c8       	lddpc	r8,80000dec <ROSA_delay+0x120>
80000cfe:	70 0a       	ld.w	r10,r8[0x0]
80000d00:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000d04:	f4 e9 00 68 	st.d	r10[104],r8

	/* Extract task from its queue */
	ROSA_TM_ACTION(PA[pr], EXECTASK, Uninstall);
80000d08:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000d0c:	4b 98       	lddpc	r8,80000df0 <ROSA_delay+0x124>
80000d0e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000d12:	4b 98       	lddpc	r8,80000df4 <ROSA_delay+0x128>
80000d14:	91 09       	st.w	r8[0x0],r9
80000d16:	4b 68       	lddpc	r8,80000dec <ROSA_delay+0x120>
80000d18:	70 08       	ld.w	r8,r8[0x0]
80000d1a:	10 9c       	mov	r12,r8
80000d1c:	f0 1f 00 37 	mcall	80000df8 <ROSA_delay+0x12c>
80000d20:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000d24:	4b 48       	lddpc	r8,80000df4 <ROSA_delay+0x128>
80000d26:	70 0a       	ld.w	r10,r8[0x0]
80000d28:	4b 28       	lddpc	r8,80000df0 <ROSA_delay+0x124>
80000d2a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	
	/* Check the current queue for emptiness */	
	if (PA[pr])
80000d2e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000d32:	4b 08       	lddpc	r8,80000df0 <ROSA_delay+0x124>
80000d34:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000d38:	58 08       	cp.w	r8,0
80000d3a:	c0 a0       	breq	80000d4e <ROSA_delay+0x82>
	{
		PREEMPTASK = PA[pr]->nexttcb;
80000d3c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000d40:	4a c8       	lddpc	r8,80000df0 <ROSA_delay+0x124>
80000d42:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000d46:	70 09       	ld.w	r9,r8[0x0]
80000d48:	4a d8       	lddpc	r8,80000dfc <ROSA_delay+0x130>
80000d4a:	91 09       	st.w	r8[0x0],r9
80000d4c:	c0 68       	rjmp	80000d58 <ROSA_delay+0x8c>
	}
	else
	{
		PREEMPTASK = readyQueueSearch();	
80000d4e:	f0 1f 00 2d 	mcall	80000e00 <ROSA_delay+0x134>
80000d52:	18 99       	mov	r9,r12
80000d54:	4a a8       	lddpc	r8,80000dfc <ROSA_delay+0x130>
80000d56:	91 09       	st.w	r8[0x0],r9
	}
	
	TCBLIST = DQ;
80000d58:	4a b8       	lddpc	r8,80000e04 <ROSA_delay+0x138>
80000d5a:	70 09       	ld.w	r9,r8[0x0]
80000d5c:	4a 68       	lddpc	r8,80000df4 <ROSA_delay+0x128>
80000d5e:	91 09       	st.w	r8[0x0],r9
	
	/* Search for the right place to insert the task to the delay queue */	
	while ((DQ) && (TCBLIST->delay <= dv) && (dv <= TCBLIST->nexttcb->delay))
80000d60:	c0 68       	rjmp	80000d6c <ROSA_delay+0xa0>
	{
		TCBLIST = TCBLIST->nexttcb;
80000d62:	4a 58       	lddpc	r8,80000df4 <ROSA_delay+0x128>
80000d64:	70 08       	ld.w	r8,r8[0x0]
80000d66:	70 09       	ld.w	r9,r8[0x0]
80000d68:	4a 38       	lddpc	r8,80000df4 <ROSA_delay+0x128>
80000d6a:	91 09       	st.w	r8[0x0],r9
	}
	
	TCBLIST = DQ;
	
	/* Search for the right place to insert the task to the delay queue */	
	while ((DQ) && (TCBLIST->delay <= dv) && (dv <= TCBLIST->nexttcb->delay))
80000d6c:	4a 68       	lddpc	r8,80000e04 <ROSA_delay+0x138>
80000d6e:	70 08       	ld.w	r8,r8[0x0]
80000d70:	58 08       	cp.w	r8,0
80000d72:	c1 70       	breq	80000da0 <ROSA_delay+0xd4>
80000d74:	4a 08       	lddpc	r8,80000df4 <ROSA_delay+0x128>
80000d76:	70 08       	ld.w	r8,r8[0x0]
80000d78:	f0 ea 00 68 	ld.d	r10,r8[104]
80000d7c:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000d80:	10 3a       	cp.w	r10,r8
80000d82:	f2 0b 13 00 	cpc	r11,r9
80000d86:	e0 8b 00 0d 	brhi	80000da0 <ROSA_delay+0xd4>
80000d8a:	49 b8       	lddpc	r8,80000df4 <ROSA_delay+0x128>
80000d8c:	70 08       	ld.w	r8,r8[0x0]
80000d8e:	70 08       	ld.w	r8,r8[0x0]
80000d90:	f0 ea 00 68 	ld.d	r10,r8[104]
80000d94:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000d98:	10 3a       	cp.w	r10,r8
80000d9a:	f2 0b 13 00 	cpc	r11,r9
80000d9e:	ce 22       	brcc	80000d62 <ROSA_delay+0x96>
	{
		TCBLIST = TCBLIST->nexttcb;
	}

	ROSA_tcbInstall(EXECTASK);
80000da0:	49 38       	lddpc	r8,80000dec <ROSA_delay+0x120>
80000da2:	70 08       	ld.w	r8,r8[0x0]
80000da4:	10 9c       	mov	r12,r8
80000da6:	f0 1f 00 19 	mcall	80000e08 <ROSA_delay+0x13c>
	DQ = TCBLIST;
80000daa:	49 38       	lddpc	r8,80000df4 <ROSA_delay+0x128>
80000dac:	70 09       	ld.w	r9,r8[0x0]
80000dae:	49 68       	lddpc	r8,80000e04 <ROSA_delay+0x138>
80000db0:	91 09       	st.w	r8[0x0],r9
	
	usartWriteTcb(USART, DQ);
80000db2:	49 58       	lddpc	r8,80000e04 <ROSA_delay+0x138>
80000db4:	70 08       	ld.w	r8,r8[0x0]
80000db6:	10 9b       	mov	r11,r8
80000db8:	fe 7c 14 00 	mov	r12,-60416
80000dbc:	f0 1f 00 14 	mcall	80000e0c <ROSA_delay+0x140>
	usartWriteTcb(USART, DQ->nexttcb);
80000dc0:	49 18       	lddpc	r8,80000e04 <ROSA_delay+0x138>
80000dc2:	70 08       	ld.w	r8,r8[0x0]
80000dc4:	70 08       	ld.w	r8,r8[0x0]
80000dc6:	10 9b       	mov	r11,r8
80000dc8:	fe 7c 14 00 	mov	r12,-60416
80000dcc:	f0 1f 00 10 	mcall	80000e0c <ROSA_delay+0x140>
	
	interruptEnable();
80000dd0:	f0 1f 00 10 	mcall	80000e10 <ROSA_delay+0x144>
	
	ROSA_yield();
80000dd4:	f0 1f 00 10 	mcall	80000e14 <ROSA_delay+0x148>
	
	return 0;
80000dd8:	30 08       	mov	r8,0
}
80000dda:	10 9c       	mov	r12,r8
80000ddc:	2f bd       	sub	sp,-20
80000dde:	e3 cd 80 80 	ldm	sp++,r7,pc
80000de2:	00 00       	add	r0,r0
80000de4:	80 00       	ld.sh	r0,r0[0x0]
80000de6:	27 66       	sub	r6,118
80000de8:	80 00       	ld.sh	r0,r0[0x0]
80000dea:	0f e8       	ld.ub	r8,r7[0x6]
80000dec:	00 00       	add	r0,r0
80000dee:	07 28       	ld.uh	r8,r3++
80000df0:	00 00       	add	r0,r0
80000df2:	06 7c       	tst	r12,r3
80000df4:	00 00       	add	r0,r0
80000df6:	06 78       	tst	r8,r3
80000df8:	80 00       	ld.sh	r0,r0[0x0]
80000dfa:	07 a8       	ld.ub	r8,r3[0x2]
80000dfc:	00 00       	add	r0,r0
80000dfe:	06 b0       	st.h	r3++,r0
80000e00:	80 00       	ld.sh	r0,r0[0x0]
80000e02:	08 18       	sub	r8,r4
80000e04:	00 00       	add	r0,r0
80000e06:	07 2c       	ld.uh	r12,r3++
80000e08:	80 00       	ld.sh	r0,r0[0x0]
80000e0a:	07 4c       	ld.w	r12,--r3
80000e0c:	80 00       	ld.sh	r0,r0[0x0]
80000e0e:	17 f4       	ld.ub	r4,r11[0x7]
80000e10:	80 00       	ld.sh	r0,r0[0x0]
80000e12:	27 6a       	sub	r10,118
80000e14:	80 00       	ld.sh	r0,r0[0x0]
80000e16:	0e da       	st.w	--r7,r10

80000e18 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80000e18:	4b 5c       	lddpc	r12,80000eec <_yield+0xa>
	lda.w r11,EXECTASK
80000e1a:	4b 6b       	lddpc	r11,80000ef0 <_yield+0xe>
	ld.w r12,r12[0x0]
80000e1c:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
80000e1e:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000e20:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000e22:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000e24:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000e28:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
80000e2a:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
80000e2c:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
80000e2e:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80000e32:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000e34:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80000e36:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000e38:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
80000e3a:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
80000e3c:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
80000e3e:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000e40:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80000e42:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000e44:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000e46:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000e48:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000e4a:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000e4c:	1c 9f       	mov	pc,lr

80000e4e <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
80000e4e:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000e50:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80000e52:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000e54:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000e58:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80000e5c:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000e60:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000e64:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000e68:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000e6c:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000e70:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000e74:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000e78:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
80000e7a:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80000e7c:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
80000e7e:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000e80:	1c 9f       	mov	pc,lr

80000e82 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
80000e82:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000e84:	49 bc       	lddpc	r12,80000ef0 <_yield+0xe>
	ld.w r12,r12[0x0]
80000e86:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000e88:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
80000e8a:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
80000e8c:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
80000e8e:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
80000e90:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
80000e92:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
80000e94:	33 40       	mov	r0,52
	add r0,r12
80000e96:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000e98:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80000e9c:	1a 90       	mov	r0,sp
	st.w --sp,r0
80000e9e:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80000ea0:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
80000ea4:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
80000ea6:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80000ea8:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
80000eaa:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
80000eac:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
80000eae:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80000eb0:	1c 9f       	mov	pc,lr

80000eb2 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000eb2:	49 0c       	lddpc	r12,80000ef0 <_yield+0xe>
	ld.w r12,r12[0x0]
80000eb4:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
80000eb6:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000eb8:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
80000eba:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
80000ebe:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80000ec0:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80000ec2:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
80000ec4:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80000ec6:	33 40       	mov	r0,52
	add r0,r12
80000ec8:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80000eca:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80000ece:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000ed0:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80000ed2:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80000ed4:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000ed6:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80000ed8:	d6 13       	rets

80000eda <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
80000eda:	d4 01       	pushm	lr
	lda.w lr,_yield
80000edc:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000ee0:	d7 33       	scall

80000ee2 <_yield>:
_yield:
	call contextSave
80000ee2:	cd 0f       	rcall	80000e82 <contextSave>
	call scheduler
80000ee4:	f0 1f 00 04 	mcall	80000ef4 <_yield+0x12>
	call contextRestore
80000ee8:	ce 5f       	rcall	80000eb2 <contextRestore>
80000eea:	00 00       	add	r0,r0
80000eec:	00 00       	add	r0,r0
80000eee:	06 78       	tst	r8,r3
80000ef0:	00 00       	add	r0,r0
80000ef2:	07 28       	ld.uh	r8,r3++
80000ef4:	80 00       	ld.sh	r0,r0[0x0]
80000ef6:	0e f8       	st.b	--r7,r8

80000ef8 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000ef8:	eb cd 40 80 	pushm	r7,lr
80000efc:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK) {
80000efe:	48 f8       	lddpc	r8,80000f38 <scheduler+0x40>
80000f00:	70 08       	ld.w	r8,r8[0x0]
80000f02:	58 08       	cp.w	r8,0
80000f04:	c0 90       	breq	80000f16 <scheduler+0x1e>
		EXECTASK = PREEMPTASK;
80000f06:	48 d8       	lddpc	r8,80000f38 <scheduler+0x40>
80000f08:	70 09       	ld.w	r9,r8[0x0]
80000f0a:	48 d8       	lddpc	r8,80000f3c <scheduler+0x44>
80000f0c:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
80000f0e:	48 b8       	lddpc	r8,80000f38 <scheduler+0x40>
80000f10:	30 09       	mov	r9,0
80000f12:	91 09       	st.w	r8[0x0],r9
80000f14:	c1 08       	rjmp	80000f34 <scheduler+0x3c>
	}
	else {
		PA[EXECTASK->priority] = EXECTASK;
80000f16:	48 a8       	lddpc	r8,80000f3c <scheduler+0x44>
80000f18:	70 08       	ld.w	r8,r8[0x0]
80000f1a:	f1 38 00 64 	ld.ub	r8,r8[100]
80000f1e:	10 99       	mov	r9,r8
80000f20:	48 78       	lddpc	r8,80000f3c <scheduler+0x44>
80000f22:	70 0a       	ld.w	r10,r8[0x0]
80000f24:	48 78       	lddpc	r8,80000f40 <scheduler+0x48>
80000f26:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		EXECTASK = EXECTASK->nexttcb;
80000f2a:	48 58       	lddpc	r8,80000f3c <scheduler+0x44>
80000f2c:	70 08       	ld.w	r8,r8[0x0]
80000f2e:	70 09       	ld.w	r9,r8[0x0]
80000f30:	48 38       	lddpc	r8,80000f3c <scheduler+0x44>
80000f32:	91 09       	st.w	r8[0x0],r9
	}
}
80000f34:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f38:	00 00       	add	r0,r0
80000f3a:	06 b0       	st.h	r3++,r0
80000f3c:	00 00       	add	r0,r0
80000f3e:	07 28       	ld.uh	r8,r3++
80000f40:	00 00       	add	r0,r0
80000f42:	06 7c       	tst	r12,r3

80000f44 <C.6.9523>:
80000f44:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000f54 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000f54:	eb cd 40 80 	pushm	r7,lr
80000f58:	1a 97       	mov	r7,sp
80000f5a:	20 2d       	sub	sp,8
	interruptDisable();
80000f5c:	f0 1f 00 1c 	mcall	80000fcc <timerISR+0x78>
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000f60:	fe 78 38 00 	mov	r8,-51200
80000f64:	ef 48 ff fc 	st.w	r7[-4],r8
	
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000f68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f6c:	70 88       	ld.w	r8,r8[0x20]
80000f6e:	ef 48 ff f8 	st.w	r7[-8],r8
	if (sr & AVR32_TC_CPCS_MASK)
80000f72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f76:	e2 18 00 10 	andl	r8,0x10,COH
80000f7a:	c2 30       	breq	80000fc0 <timerISR+0x6c>
	{
		systemTick++;
80000f7c:	49 58       	lddpc	r8,80000fd0 <timerISR+0x7c>
80000f7e:	f0 ea 00 00 	ld.d	r10,r8[0]
80000f82:	30 18       	mov	r8,1
80000f84:	30 09       	mov	r9,0
80000f86:	f4 08 00 08 	add	r8,r10,r8
80000f8a:	f6 09 00 49 	adc	r9,r11,r9
80000f8e:	49 1a       	lddpc	r10,80000fd0 <timerISR+0x7c>
80000f90:	f4 e9 00 00 	st.d	r10[0],r8
		
		if ( (DQ) && (DQ->delay <= systemTick) ) 
80000f94:	49 08       	lddpc	r8,80000fd4 <timerISR+0x80>
80000f96:	70 08       	ld.w	r8,r8[0x0]
80000f98:	58 08       	cp.w	r8,0
80000f9a:	c1 30       	breq	80000fc0 <timerISR+0x6c>
80000f9c:	48 e8       	lddpc	r8,80000fd4 <timerISR+0x80>
80000f9e:	70 08       	ld.w	r8,r8[0x0]
80000fa0:	f0 ea 00 68 	ld.d	r10,r8[104]
80000fa4:	48 b8       	lddpc	r8,80000fd0 <timerISR+0x7c>
80000fa6:	f0 e8 00 00 	ld.d	r8,r8[0]
80000faa:	10 3a       	cp.w	r10,r8
80000fac:	f2 0b 13 00 	cpc	r11,r9
80000fb0:	e0 8b 00 08 	brhi	80000fc0 <timerISR+0x6c>
		{
			PREEMPTASK = DELHANDL;
80000fb4:	48 98       	lddpc	r8,80000fd8 <timerISR+0x84>
80000fb6:	70 09       	ld.w	r9,r8[0x0]
80000fb8:	48 98       	lddpc	r8,80000fdc <timerISR+0x88>
80000fba:	91 09       	st.w	r8[0x0],r9
			
			ROSA_yieldFromISR();
80000fbc:	f0 1f 00 09 	mcall	80000fe0 <timerISR+0x8c>
		}
	}
	interruptEnable();
80000fc0:	f0 1f 00 09 	mcall	80000fe4 <timerISR+0x90>
}
80000fc4:	2f ed       	sub	sp,-8
80000fc6:	e3 cd 40 80 	ldm	sp++,r7,lr
80000fca:	d6 03       	rete
80000fcc:	80 00       	ld.sh	r0,r0[0x0]
80000fce:	27 66       	sub	r6,118
80000fd0:	00 00       	add	r0,r0
80000fd2:	07 a4       	ld.ub	r4,r3[0x2]
80000fd4:	00 00       	add	r0,r0
80000fd6:	07 2c       	ld.uh	r12,r3++
80000fd8:	00 00       	add	r0,r0
80000fda:	06 ac       	st.w	r3++,r12
80000fdc:	00 00       	add	r0,r0
80000fde:	06 b0       	st.h	r3++,r0
80000fe0:	80 00       	ld.sh	r0,r0[0x0]
80000fe2:	06 f0       	st.b	--r3,r0
80000fe4:	80 00       	ld.sh	r0,r0[0x0]
80000fe6:	27 6a       	sub	r10,118

80000fe8 <ROSA_getTickCount>:
/*																		*/
/* Returns the current number of system ticks, relative to start		*/
/* of the system.                                                       */
/************************************************************************/
uint64_t ROSA_getTickCount()
{
80000fe8:	eb cd 40 80 	pushm	r7,lr
80000fec:	1a 97       	mov	r7,sp
	return systemTick;
80000fee:	48 48       	lddpc	r8,80000ffc <ROSA_getTickCount+0x14>
80000ff0:	f0 e8 00 00 	ld.d	r8,r8[0]
}
80000ff4:	10 9a       	mov	r10,r8
80000ff6:	12 9b       	mov	r11,r9
80000ff8:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ffc:	00 00       	add	r0,r0
80000ffe:	07 a4       	ld.ub	r4,r3[0x2]

80001000 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80001000:	eb cd 40 80 	pushm	r7,lr
80001004:	1a 97       	mov	r7,sp
80001006:	20 7d       	sub	sp,28
80001008:	ef 4c ff e4 	st.w	r7[-28],r12
	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
8000100c:	4a 48       	lddpc	r8,8000109c <timerPeriodSet+0x9c>
8000100e:	ee ca 00 18 	sub	r10,r7,24
80001012:	10 9b       	mov	r11,r8
80001014:	f6 e8 00 00 	ld.d	r8,r11[0]
80001018:	f4 e9 00 00 	st.d	r10[0],r8
8000101c:	f6 e8 00 08 	ld.d	r8,r11[8]
80001020:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80001024:	30 48       	mov	r8,4
80001026:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
8000102a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000102e:	20 18       	sub	r8,1
80001030:	a3 68       	lsl	r8,0x2
80001032:	ee 08 00 08 	add	r8,r7,r8
80001036:	f0 f9 ff e8 	ld.w	r9,r8[-24]
8000103a:	e0 68 1b 00 	mov	r8,6912
8000103e:	ea 18 00 b7 	orh	r8,0xb7
80001042:	f0 09 0c 08 	divs	r8,r8,r9
80001046:	10 99       	mov	r9,r8
80001048:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000104c:	b1 39       	mul	r9,r8
8000104e:	e0 68 4d d3 	mov	r8,19923
80001052:	ea 18 10 62 	orh	r8,0x1062
80001056:	f2 08 06 48 	mulu.d	r8,r9,r8
8000105a:	f2 08 16 06 	lsr	r8,r9,0x6
8000105e:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80001062:	ee fc ff fc 	ld.w	r12,r7[-4]
80001066:	f0 1f 00 0f 	mcall	800010a0 <timerPeriodSet+0xa0>
	timerRCSet(rc);
8000106a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000106e:	f0 1f 00 0e 	mcall	800010a4 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80001072:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001076:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000107a:	f2 08 02 4a 	mul	r10,r9,r8
8000107e:	e0 68 9f 81 	mov	r8,40833
80001082:	ea 18 16 5e 	orh	r8,0x165e
80001086:	f4 08 04 48 	muls.d	r8,r10,r8
8000108a:	b5 49       	asr	r9,0x14
8000108c:	f4 08 14 1f 	asr	r8,r10,0x1f
80001090:	f2 08 01 08 	sub	r8,r9,r8
}
80001094:	10 9c       	mov	r12,r8
80001096:	2f 9d       	sub	sp,-28
80001098:	e3 cd 80 80 	ldm	sp++,r7,pc
8000109c:	80 00       	ld.sh	r0,r0[0x0]
8000109e:	0f 44       	ld.w	r4,--r7
800010a0:	80 00       	ld.sh	r0,r0[0x0]
800010a2:	1b dc       	ld.ub	r12,sp[0x5]
800010a4:	80 00       	ld.sh	r0,r0[0x0]
800010a6:	1b c6       	ld.ub	r6,sp[0x4]

800010a8 <buttonInit>:
800010a8:	eb cd 40 80 	pushm	r7,lr
800010ac:	1a 97       	mov	r7,sp
800010ae:	30 1b       	mov	r11,1
800010b0:	35 8c       	mov	r12,88
800010b2:	f0 1f 00 07 	mcall	800010cc <buttonInit+0x24>
800010b6:	30 1b       	mov	r11,1
800010b8:	35 5c       	mov	r12,85
800010ba:	f0 1f 00 05 	mcall	800010cc <buttonInit+0x24>
800010be:	30 1b       	mov	r11,1
800010c0:	35 2c       	mov	r12,82
800010c2:	f0 1f 00 03 	mcall	800010cc <buttonInit+0x24>
800010c6:	e3 cd 80 80 	ldm	sp++,r7,pc
800010ca:	00 00       	add	r0,r0
800010cc:	80 00       	ld.sh	r0,r0[0x0]
800010ce:	11 3c       	ld.ub	r12,r8++

800010d0 <joystickInit>:
800010d0:	eb cd 40 80 	pushm	r7,lr
800010d4:	1a 97       	mov	r7,sp
800010d6:	30 1b       	mov	r11,1
800010d8:	31 bc       	mov	r12,27
800010da:	f0 1f 00 0b 	mcall	80001104 <joystickInit+0x34>
800010de:	30 1b       	mov	r11,1
800010e0:	31 9c       	mov	r12,25
800010e2:	f0 1f 00 09 	mcall	80001104 <joystickInit+0x34>
800010e6:	30 1b       	mov	r11,1
800010e8:	31 cc       	mov	r12,28
800010ea:	f0 1f 00 07 	mcall	80001104 <joystickInit+0x34>
800010ee:	30 1b       	mov	r11,1
800010f0:	31 4c       	mov	r12,20
800010f2:	f0 1f 00 05 	mcall	80001104 <joystickInit+0x34>
800010f6:	30 1b       	mov	r11,1
800010f8:	31 ac       	mov	r12,26
800010fa:	f0 1f 00 03 	mcall	80001104 <joystickInit+0x34>
800010fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80001102:	00 00       	add	r0,r0
80001104:	80 00       	ld.sh	r0,r0[0x0]
80001106:	11 3c       	ld.ub	r12,r8++

80001108 <delay_ms>:
80001108:	eb cd 40 80 	pushm	r7,lr
8000110c:	1a 97       	mov	r7,sp
8000110e:	20 2d       	sub	sp,8
80001110:	ef 4c ff f8 	st.w	r7[-8],r12
80001114:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001118:	e0 69 04 42 	mov	r9,1090
8000111c:	b3 38       	mul	r8,r9
8000111e:	ef 48 ff fc 	st.w	r7[-4],r8
80001122:	c0 68       	rjmp	8000112e <delay_ms+0x26>
80001124:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001128:	20 18       	sub	r8,1
8000112a:	ef 48 ff fc 	st.w	r7[-4],r8
8000112e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001132:	58 08       	cp.w	r8,0
80001134:	cf 81       	brne	80001124 <delay_ms+0x1c>
80001136:	2f ed       	sub	sp,-8
80001138:	e3 cd 80 80 	ldm	sp++,r7,pc

8000113c <gpioInit>:
8000113c:	eb cd 40 80 	pushm	r7,lr
80001140:	1a 97       	mov	r7,sp
80001142:	20 7d       	sub	sp,28
80001144:	ef 4c ff ec 	st.w	r7[-20],r12
80001148:	ef 4b ff e8 	st.w	r7[-24],r11
8000114c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001150:	a5 58       	asr	r8,0x5
80001152:	ef 48 ff f4 	st.w	r7[-12],r8
80001156:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000115a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000115e:	ef 48 ff fc 	st.w	r7[-4],r8
80001162:	30 19       	mov	r9,1
80001164:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001168:	f2 08 09 48 	lsl	r8,r9,r8
8000116c:	ef 48 ff f8 	st.w	r7[-8],r8
80001170:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001174:	a9 68       	lsl	r8,0x8
80001176:	e0 28 f0 00 	sub	r8,61440
8000117a:	ef 48 ff f0 	st.w	r7[-16],r8
8000117e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001182:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001186:	91 19       	st.w	r8[0x4],r9
80001188:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000118c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001190:	91 69       	st.w	r8[0x18],r9
80001192:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001196:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000119a:	91 a9       	st.w	r8[0x28],r9
8000119c:	ee f8 ff e8 	ld.w	r8,r7[-24]
800011a0:	ef 48 ff e4 	st.w	r7[-28],r8
800011a4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800011a8:	58 08       	cp.w	r8,0
800011aa:	c0 60       	breq	800011b6 <gpioInit+0x7a>
800011ac:	ee f8 ff e4 	ld.w	r8,r7[-28]
800011b0:	58 18       	cp.w	r8,1
800011b2:	c0 90       	breq	800011c4 <gpioInit+0x88>
800011b4:	c0 f8       	rjmp	800011d2 <gpioInit+0x96>
800011b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800011ba:	ee f8 ff f0 	ld.w	r8,r7[-16]
800011be:	f1 49 00 44 	st.w	r8[68],r9
800011c2:	c0 e8       	rjmp	800011de <gpioInit+0xa2>
800011c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800011c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800011cc:	f1 49 00 48 	st.w	r8[72],r9
800011d0:	c0 78       	rjmp	800011de <gpioInit+0xa2>
800011d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800011d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800011da:	f1 49 00 48 	st.w	r8[72],r9
800011de:	2f 9d       	sub	sp,-28
800011e0:	e3 cd 80 80 	ldm	sp++,r7,pc

800011e4 <gpioClear>:
800011e4:	eb cd 40 80 	pushm	r7,lr
800011e8:	1a 97       	mov	r7,sp
800011ea:	20 5d       	sub	sp,20
800011ec:	ef 4c ff ec 	st.w	r7[-20],r12
800011f0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800011f4:	a5 58       	asr	r8,0x5
800011f6:	ef 48 ff f4 	st.w	r7[-12],r8
800011fa:	ee f8 ff ec 	ld.w	r8,r7[-20]
800011fe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001202:	ef 48 ff fc 	st.w	r7[-4],r8
80001206:	30 19       	mov	r9,1
80001208:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000120c:	f2 08 09 48 	lsl	r8,r9,r8
80001210:	ef 48 ff f8 	st.w	r7[-8],r8
80001214:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001218:	a9 68       	lsl	r8,0x8
8000121a:	e0 28 f0 00 	sub	r8,61440
8000121e:	ef 48 ff f0 	st.w	r7[-16],r8
80001222:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001226:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000122a:	f1 49 00 58 	st.w	r8[88],r9
8000122e:	2f bd       	sub	sp,-20
80001230:	e3 cd 80 80 	ldm	sp++,r7,pc

80001234 <gpioSet>:
80001234:	eb cd 40 80 	pushm	r7,lr
80001238:	1a 97       	mov	r7,sp
8000123a:	20 5d       	sub	sp,20
8000123c:	ef 4c ff ec 	st.w	r7[-20],r12
80001240:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001244:	a5 58       	asr	r8,0x5
80001246:	ef 48 ff f4 	st.w	r7[-12],r8
8000124a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000124e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001252:	ef 48 ff fc 	st.w	r7[-4],r8
80001256:	30 19       	mov	r9,1
80001258:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000125c:	f2 08 09 48 	lsl	r8,r9,r8
80001260:	ef 48 ff f8 	st.w	r7[-8],r8
80001264:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001268:	a9 68       	lsl	r8,0x8
8000126a:	e0 28 f0 00 	sub	r8,61440
8000126e:	ef 48 ff f0 	st.w	r7[-16],r8
80001272:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001276:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000127a:	f1 49 00 54 	st.w	r8[84],r9
8000127e:	2f bd       	sub	sp,-20
80001280:	e3 cd 80 80 	ldm	sp++,r7,pc

80001284 <gpioToggle>:
80001284:	eb cd 40 80 	pushm	r7,lr
80001288:	1a 97       	mov	r7,sp
8000128a:	20 5d       	sub	sp,20
8000128c:	ef 4c ff ec 	st.w	r7[-20],r12
80001290:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001294:	a5 58       	asr	r8,0x5
80001296:	ef 48 ff f4 	st.w	r7[-12],r8
8000129a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000129e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800012a2:	ef 48 ff fc 	st.w	r7[-4],r8
800012a6:	30 19       	mov	r9,1
800012a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012ac:	f2 08 09 48 	lsl	r8,r9,r8
800012b0:	ef 48 ff f8 	st.w	r7[-8],r8
800012b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800012b8:	a9 68       	lsl	r8,0x8
800012ba:	e0 28 f0 00 	sub	r8,61440
800012be:	ef 48 ff f0 	st.w	r7[-16],r8
800012c2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800012c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800012ca:	f1 49 00 5c 	st.w	r8[92],r9
800012ce:	2f bd       	sub	sp,-20
800012d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800012d4 <ledInit>:
800012d4:	eb cd 40 80 	pushm	r7,lr
800012d8:	1a 97       	mov	r7,sp
800012da:	20 9d       	sub	sp,36
800012dc:	49 e8       	lddpc	r8,80001354 <ledInit+0x80>
800012de:	ee cb 00 24 	sub	r11,r7,36
800012e2:	10 9a       	mov	r10,r8
800012e4:	f4 e8 00 00 	ld.d	r8,r10[0]
800012e8:	f6 e9 00 00 	st.d	r11[0],r8
800012ec:	f4 e8 00 08 	ld.d	r8,r10[8]
800012f0:	f6 e9 00 08 	st.d	r11[8],r8
800012f4:	f4 e8 00 10 	ld.d	r8,r10[16]
800012f8:	f6 e9 00 10 	st.d	r11[16],r8
800012fc:	f4 e8 00 18 	ld.d	r8,r10[24]
80001300:	f6 e9 00 18 	st.d	r11[24],r8
80001304:	30 08       	mov	r8,0
80001306:	ef 48 ff fc 	st.w	r7[-4],r8
8000130a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000130e:	a3 68       	lsl	r8,0x2
80001310:	ee 08 00 08 	add	r8,r7,r8
80001314:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80001318:	10 9c       	mov	r12,r8
8000131a:	f0 1f 00 10 	mcall	80001358 <ledInit+0x84>
8000131e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001322:	a3 68       	lsl	r8,0x2
80001324:	ee 08 00 08 	add	r8,r7,r8
80001328:	f0 f8 ff dc 	ld.w	r8,r8[-36]
8000132c:	30 0b       	mov	r11,0
8000132e:	10 9c       	mov	r12,r8
80001330:	f0 1f 00 0b 	mcall	8000135c <ledInit+0x88>
80001334:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001338:	58 78       	cp.w	r8,7
8000133a:	5f 18       	srne	r8
8000133c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80001340:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001344:	2f f8       	sub	r8,-1
80001346:	ef 48 ff fc 	st.w	r7[-4],r8
8000134a:	58 09       	cp.w	r9,0
8000134c:	cd f1       	brne	8000130a <ledInit+0x36>
8000134e:	2f 7d       	sub	sp,-36
80001350:	e3 cd 80 80 	ldm	sp++,r7,pc
80001354:	80 00       	ld.sh	r0,r0[0x0]
80001356:	2a 00       	sub	r0,-96
80001358:	80 00       	ld.sh	r0,r0[0x0]
8000135a:	13 80       	ld.ub	r0,r9[0x0]
8000135c:	80 00       	ld.sh	r0,r0[0x0]
8000135e:	11 3c       	ld.ub	r12,r8++

80001360 <ledOn>:
80001360:	eb cd 40 80 	pushm	r7,lr
80001364:	1a 97       	mov	r7,sp
80001366:	20 1d       	sub	sp,4
80001368:	ef 4c ff fc 	st.w	r7[-4],r12
8000136c:	ee fc ff fc 	ld.w	r12,r7[-4]
80001370:	f0 1f 00 03 	mcall	8000137c <ledOn+0x1c>
80001374:	2f fd       	sub	sp,-4
80001376:	e3 cd 80 80 	ldm	sp++,r7,pc
8000137a:	00 00       	add	r0,r0
8000137c:	80 00       	ld.sh	r0,r0[0x0]
8000137e:	11 e4       	ld.ub	r4,r8[0x6]

80001380 <ledOff>:
80001380:	eb cd 40 80 	pushm	r7,lr
80001384:	1a 97       	mov	r7,sp
80001386:	20 1d       	sub	sp,4
80001388:	ef 4c ff fc 	st.w	r7[-4],r12
8000138c:	ee fc ff fc 	ld.w	r12,r7[-4]
80001390:	f0 1f 00 03 	mcall	8000139c <ledOff+0x1c>
80001394:	2f fd       	sub	sp,-4
80001396:	e3 cd 80 80 	ldm	sp++,r7,pc
8000139a:	00 00       	add	r0,r0
8000139c:	80 00       	ld.sh	r0,r0[0x0]
8000139e:	12 34       	cp.w	r4,r9

800013a0 <ledToggle>:
800013a0:	eb cd 40 80 	pushm	r7,lr
800013a4:	1a 97       	mov	r7,sp
800013a6:	20 1d       	sub	sp,4
800013a8:	ef 4c ff fc 	st.w	r7[-4],r12
800013ac:	ee fc ff fc 	ld.w	r12,r7[-4]
800013b0:	f0 1f 00 03 	mcall	800013bc <ledToggle+0x1c>
800013b4:	2f fd       	sub	sp,-4
800013b6:	e3 cd 80 80 	ldm	sp++,r7,pc
800013ba:	00 00       	add	r0,r0
800013bc:	80 00       	ld.sh	r0,r0[0x0]
800013be:	12 84       	andn	r4,r9

800013c0 <potInit>:
800013c0:	d3 01       	pushm	r11-r12
800013c2:	e0 6c 10 00 	mov	r12,4096
800013c6:	ea 1c ff ff 	orh	r12,0xffff
800013ca:	31 6b       	mov	r11,22
800013cc:	99 2b       	st.w	r12[0x8],r11
800013ce:	99 6b       	st.w	r12[0x18],r11
800013d0:	99 6b       	st.w	r12[0x18],r11
800013d2:	e0 6c 3c 00 	mov	r12,15360
800013d6:	ea 1c ff ff 	orh	r12,0xffff
800013da:	30 1b       	mov	r11,1
800013dc:	99 0b       	st.w	r12[0x0],r11
800013de:	e0 6b 0f 1f 	mov	r11,3871
800013e2:	b1 6b       	lsl	r11,0x10
800013e4:	99 1b       	st.w	r12[0x4],r11
800013e6:	30 2b       	mov	r11,2
800013e8:	99 4b       	st.w	r12[0x10],r11
800013ea:	d3 02       	popm	r11-r12
800013ec:	1c 9f       	mov	pc,lr

800013ee <potGetValue>:
800013ee:	d1 81       	pushm	r10-r11
800013f0:	e0 6c 3c 00 	mov	r12,15360
800013f4:	ea 1c ff ff 	orh	r12,0xffff
800013f8:	30 2b       	mov	r11,2
800013fa:	99 0b       	st.w	r12[0x0],r11

800013fc <a1>:
800013fc:	78 7a       	ld.w	r10,r12[0x1c]
800013fe:	16 7a       	tst	r10,r11
80001400:	cf e0       	breq	800013fc <a1>
80001402:	78 dc       	ld.w	r12,r12[0x34]
80001404:	d1 82       	popm	r10-r11
80001406:	1c 9f       	mov	pc,lr

80001408 <usartReset>:
80001408:	eb cd 40 80 	pushm	r7,lr
8000140c:	1a 97       	mov	r7,sp
8000140e:	20 3d       	sub	sp,12
80001410:	ef 4c ff f8 	st.w	r7[-8],r12
80001414:	f0 1f 00 16 	mcall	8000146c <usartReset+0x64>
80001418:	18 98       	mov	r8,r12
8000141a:	ef 48 ff fc 	st.w	r7[-4],r8
8000141e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001422:	58 08       	cp.w	r8,0
80001424:	c0 30       	breq	8000142a <usartReset+0x22>
80001426:	f0 1f 00 13 	mcall	80001470 <usartReset+0x68>
8000142a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000142e:	3f f8       	mov	r8,-1
80001430:	93 38       	st.w	r9[0xc],r8
80001432:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001436:	70 58       	ld.w	r8,r8[0x14]
80001438:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000143c:	58 08       	cp.w	r8,0
8000143e:	c0 30       	breq	80001444 <usartReset+0x3c>
80001440:	f0 1f 00 0d 	mcall	80001474 <usartReset+0x6c>
80001444:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001448:	30 08       	mov	r8,0
8000144a:	93 18       	st.w	r9[0x4],r8
8000144c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001450:	30 08       	mov	r8,0
80001452:	93 98       	st.w	r9[0x24],r8
80001454:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001458:	30 08       	mov	r8,0
8000145a:	93 a8       	st.w	r9[0x28],r8
8000145c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001460:	ea 68 61 0c 	mov	r8,680204
80001464:	93 08       	st.w	r9[0x0],r8
80001466:	2f dd       	sub	sp,-12
80001468:	e3 cd 80 80 	ldm	sp++,r7,pc
8000146c:	80 00       	ld.sh	r0,r0[0x0]
8000146e:	27 6e       	sub	lr,118
80001470:	80 00       	ld.sh	r0,r0[0x0]
80001472:	27 66       	sub	r6,118
80001474:	80 00       	ld.sh	r0,r0[0x0]
80001476:	27 6a       	sub	r10,118

80001478 <usartSetBaudrate>:
80001478:	eb cd 40 80 	pushm	r7,lr
8000147c:	1a 97       	mov	r7,sp
8000147e:	20 bd       	sub	sp,44
80001480:	ef 4c ff ec 	st.w	r7[-20],r12
80001484:	ef 4b ff e8 	st.w	r7[-24],r11
80001488:	ef 4a ff e4 	st.w	r7[-28],r10
8000148c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001490:	f0 09 15 04 	lsl	r9,r8,0x4
80001494:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001498:	10 39       	cp.w	r9,r8
8000149a:	e0 8b 00 06 	brhi	800014a6 <usartSetBaudrate+0x2e>
8000149e:	31 09       	mov	r9,16
800014a0:	ef 49 ff d4 	st.w	r7[-44],r9
800014a4:	c0 48       	rjmp	800014ac <usartSetBaudrate+0x34>
800014a6:	30 88       	mov	r8,8
800014a8:	ef 48 ff d4 	st.w	r7[-44],r8
800014ac:	ee f9 ff d4 	ld.w	r9,r7[-44]
800014b0:	ef 49 ff f0 	st.w	r7[-16],r9
800014b4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800014b8:	f0 0a 15 03 	lsl	r10,r8,0x3
800014bc:	ee f9 ff f0 	ld.w	r9,r7[-16]
800014c0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800014c4:	f2 08 02 48 	mul	r8,r9,r8
800014c8:	a1 98       	lsr	r8,0x1
800014ca:	10 0a       	add	r10,r8
800014cc:	ee f9 ff f0 	ld.w	r9,r7[-16]
800014d0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800014d4:	f2 08 02 48 	mul	r8,r9,r8
800014d8:	f4 08 0d 08 	divu	r8,r10,r8
800014dc:	ef 48 ff f4 	st.w	r7[-12],r8
800014e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800014e4:	a3 98       	lsr	r8,0x3
800014e6:	ef 48 ff f8 	st.w	r7[-8],r8
800014ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
800014ee:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800014f2:	ef 48 ff fc 	st.w	r7[-4],r8
800014f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014fa:	58 08       	cp.w	r8,0
800014fc:	c0 70       	breq	8000150a <usartSetBaudrate+0x92>
800014fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001502:	e0 48 ff ff 	cp.w	r8,65535
80001506:	e0 88 00 06 	brls	80001512 <usartSetBaudrate+0x9a>
8000150a:	30 18       	mov	r8,1
8000150c:	ef 48 ff d8 	st.w	r7[-40],r8
80001510:	c2 c8       	rjmp	80001568 <usartSetBaudrate+0xf0>
80001512:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001516:	70 18       	ld.w	r8,r8[0x4]
80001518:	10 99       	mov	r9,r8
8000151a:	e4 19 ff f7 	andh	r9,0xfff7
8000151e:	e0 19 fe cf 	andl	r9,0xfecf
80001522:	ef 49 ff dc 	st.w	r7[-36],r9
80001526:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000152a:	59 08       	cp.w	r8,16
8000152c:	c0 60       	breq	80001538 <usartSetBaudrate+0xc0>
8000152e:	e8 68 00 00 	mov	r8,524288
80001532:	ef 48 ff e0 	st.w	r7[-32],r8
80001536:	c0 48       	rjmp	8000153e <usartSetBaudrate+0xc6>
80001538:	30 09       	mov	r9,0
8000153a:	ef 49 ff e0 	st.w	r7[-32],r9
8000153e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80001542:	ee f8 ff e0 	ld.w	r8,r7[-32]
80001546:	10 49       	or	r9,r8
80001548:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000154c:	91 19       	st.w	r8[0x4],r9
8000154e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001552:	f0 09 15 10 	lsl	r9,r8,0x10
80001556:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000155a:	10 49       	or	r9,r8
8000155c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001560:	91 89       	st.w	r8[0x20],r9
80001562:	30 09       	mov	r9,0
80001564:	ef 49 ff d8 	st.w	r7[-40],r9
80001568:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000156c:	10 9c       	mov	r12,r8
8000156e:	2f 5d       	sub	sp,-44
80001570:	e3 cd 80 80 	ldm	sp++,r7,pc

80001574 <usartInit>:
80001574:	eb cd 40 80 	pushm	r7,lr
80001578:	1a 97       	mov	r7,sp
8000157a:	20 4d       	sub	sp,16
8000157c:	ef 4c ff f8 	st.w	r7[-8],r12
80001580:	ef 4b ff f4 	st.w	r7[-12],r11
80001584:	ef 4a ff f0 	st.w	r7[-16],r10
80001588:	fe 78 10 00 	mov	r8,-61440
8000158c:	ef 48 ff fc 	st.w	r7[-4],r8
80001590:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001594:	30 18       	mov	r8,1
80001596:	93 28       	st.w	r9[0x8],r8
80001598:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000159c:	30 28       	mov	r8,2
8000159e:	93 28       	st.w	r9[0x8],r8
800015a0:	ee fc ff f8 	ld.w	r12,r7[-8]
800015a4:	f0 1f 00 3b 	mcall	80001690 <usartInit+0x11c>
800015a8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800015ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800015b0:	70 08       	ld.w	r8,r8[0x0]
800015b2:	12 9a       	mov	r10,r9
800015b4:	10 9b       	mov	r11,r8
800015b6:	ee fc ff f8 	ld.w	r12,r7[-8]
800015ba:	f0 1f 00 37 	mcall	80001694 <usartInit+0x120>
800015be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800015c2:	11 c9       	ld.ub	r9,r8[0x4]
800015c4:	30 98       	mov	r8,9
800015c6:	f0 09 18 00 	cp.b	r9,r8
800015ca:	c0 a1       	brne	800015de <usartInit+0x6a>
800015cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015d0:	70 18       	ld.w	r8,r8[0x4]
800015d2:	10 99       	mov	r9,r8
800015d4:	b1 b9       	sbr	r9,0x11
800015d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015da:	91 19       	st.w	r8[0x4],r9
800015dc:	c0 d8       	rjmp	800015f6 <usartInit+0x82>
800015de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015e2:	70 19       	ld.w	r9,r8[0x4]
800015e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800015e8:	11 c8       	ld.ub	r8,r8[0x4]
800015ea:	20 58       	sub	r8,5
800015ec:	a7 68       	lsl	r8,0x6
800015ee:	10 49       	or	r9,r8
800015f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015f4:	91 19       	st.w	r8[0x4],r9
800015f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015fa:	70 1a       	ld.w	r10,r8[0x4]
800015fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001600:	11 d8       	ld.ub	r8,r8[0x5]
80001602:	f0 09 15 09 	lsl	r9,r8,0x9
80001606:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000160a:	f1 38 00 08 	ld.ub	r8,r8[8]
8000160e:	af 68       	lsl	r8,0xe
80001610:	f3 e8 10 08 	or	r8,r9,r8
80001614:	f5 e8 10 09 	or	r9,r10,r8
80001618:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000161c:	91 19       	st.w	r8[0x4],r9
8000161e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001622:	90 39       	ld.sh	r9,r8[0x6]
80001624:	30 28       	mov	r8,2
80001626:	f0 09 19 00 	cp.h	r9,r8
8000162a:	e0 88 00 14 	brls	80001652 <usartInit+0xde>
8000162e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001632:	70 18       	ld.w	r8,r8[0x4]
80001634:	10 99       	mov	r9,r8
80001636:	ad b9       	sbr	r9,0xd
80001638:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000163c:	91 19       	st.w	r8[0x4],r9
8000163e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001642:	90 38       	ld.sh	r8,r8[0x6]
80001644:	5c 78       	castu.h	r8
80001646:	20 28       	sub	r8,2
80001648:	10 99       	mov	r9,r8
8000164a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000164e:	91 a9       	st.w	r8[0x28],r9
80001650:	c0 d8       	rjmp	8000166a <usartInit+0xf6>
80001652:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001656:	70 19       	ld.w	r9,r8[0x4]
80001658:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000165c:	90 38       	ld.sh	r8,r8[0x6]
8000165e:	5c 78       	castu.h	r8
80001660:	ad 68       	lsl	r8,0xc
80001662:	10 49       	or	r9,r8
80001664:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001668:	91 19       	st.w	r8[0x4],r9
8000166a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000166e:	70 18       	ld.w	r8,r8[0x4]
80001670:	10 99       	mov	r9,r8
80001672:	e0 19 ff f0 	andl	r9,0xfff0
80001676:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000167a:	91 19       	st.w	r8[0x4],r9
8000167c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001680:	35 08       	mov	r8,80
80001682:	93 08       	st.w	r9[0x0],r8
80001684:	30 08       	mov	r8,0
80001686:	10 9c       	mov	r12,r8
80001688:	2f cd       	sub	sp,-16
8000168a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000168e:	00 00       	add	r0,r0
80001690:	80 00       	ld.sh	r0,r0[0x0]
80001692:	14 08       	add	r8,r10
80001694:	80 00       	ld.sh	r0,r0[0x0]
80001696:	14 78       	tst	r8,r10

80001698 <usartWriteChar>:
80001698:	eb cd 40 80 	pushm	r7,lr
8000169c:	1a 97       	mov	r7,sp
8000169e:	20 3d       	sub	sp,12
800016a0:	ef 4c ff f8 	st.w	r7[-8],r12
800016a4:	16 98       	mov	r8,r11
800016a6:	ef 68 ff f4 	st.b	r7[-12],r8
800016aa:	e4 68 00 00 	mov	r8,262144
800016ae:	ef 48 ff fc 	st.w	r7[-4],r8
800016b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800016b6:	58 08       	cp.w	r8,0
800016b8:	5f 18       	srne	r8
800016ba:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800016be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800016c2:	20 18       	sub	r8,1
800016c4:	ef 48 ff fc 	st.w	r7[-4],r8
800016c8:	12 98       	mov	r8,r9
800016ca:	ec 18 00 01 	eorl	r8,0x1
800016ce:	5c 58       	castu.b	r8
800016d0:	c0 71       	brne	800016de <usartWriteChar+0x46>
800016d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016d6:	70 58       	ld.w	r8,r8[0x14]
800016d8:	e2 18 00 02 	andl	r8,0x2,COH
800016dc:	ce b0       	breq	800016b2 <usartWriteChar+0x1a>
800016de:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800016e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016e6:	91 79       	st.w	r8[0x1c],r9
800016e8:	2f dd       	sub	sp,-12
800016ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800016ee:	d7 03       	nop

800016f0 <usartWriteLine>:
800016f0:	eb cd 40 80 	pushm	r7,lr
800016f4:	1a 97       	mov	r7,sp
800016f6:	20 2d       	sub	sp,8
800016f8:	ef 4c ff fc 	st.w	r7[-4],r12
800016fc:	ef 4b ff f8 	st.w	r7[-8],r11
80001700:	c1 88       	rjmp	80001730 <usartWriteLine+0x40>
80001702:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001706:	11 88       	ld.ub	r8,r8[0x0]
80001708:	58 a8       	cp.w	r8,10
8000170a:	c0 61       	brne	80001716 <usartWriteLine+0x26>
8000170c:	30 db       	mov	r11,13
8000170e:	ee fc ff fc 	ld.w	r12,r7[-4]
80001712:	f0 1f 00 0c 	mcall	80001740 <usartWriteLine+0x50>
80001716:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000171a:	11 88       	ld.ub	r8,r8[0x0]
8000171c:	10 9b       	mov	r11,r8
8000171e:	ee fc ff fc 	ld.w	r12,r7[-4]
80001722:	f0 1f 00 08 	mcall	80001740 <usartWriteLine+0x50>
80001726:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000172a:	2f f8       	sub	r8,-1
8000172c:	ef 48 ff f8 	st.w	r7[-8],r8
80001730:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001734:	11 88       	ld.ub	r8,r8[0x0]
80001736:	58 08       	cp.w	r8,0
80001738:	ce 51       	brne	80001702 <usartWriteLine+0x12>
8000173a:	2f ed       	sub	sp,-8
8000173c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001740:	80 00       	ld.sh	r0,r0[0x0]
80001742:	16 98       	mov	r8,r11

80001744 <usartWriteValue>:
80001744:	eb cd 40 80 	pushm	r7,lr
80001748:	1a 97       	mov	r7,sp
8000174a:	20 7d       	sub	sp,28
8000174c:	ef 4c ff ec 	st.w	r7[-20],r12
80001750:	ef 4b ff e8 	st.w	r7[-24],r11
80001754:	30 f8       	mov	r8,15
80001756:	ef 48 ff f8 	st.w	r7[-8],r8
8000175a:	31 c8       	mov	r8,28
8000175c:	ef 48 ff f4 	st.w	r7[-12],r8
80001760:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001764:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001768:	f0 09 09 48 	lsl	r8,r8,r9
8000176c:	ef 48 ff f0 	st.w	r7[-16],r8
80001770:	49 eb       	lddpc	r11,800017e8 <usartWriteValue+0xa4>
80001772:	ee fc ff ec 	ld.w	r12,r7[-20]
80001776:	f0 1f 00 1e 	mcall	800017ec <usartWriteValue+0xa8>
8000177a:	c3 08       	rjmp	800017da <usartWriteValue+0x96>
8000177c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80001780:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001784:	10 69       	and	r9,r8
80001786:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000178a:	f2 08 0a 48 	lsr	r8,r9,r8
8000178e:	ef 48 ff fc 	st.w	r7[-4],r8
80001792:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001796:	58 98       	cp.w	r8,9
80001798:	e0 8b 00 0a 	brhi	800017ac <usartWriteValue+0x68>
8000179c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800017a0:	5c 58       	castu.b	r8
800017a2:	2d 08       	sub	r8,-48
800017a4:	5c 58       	castu.b	r8
800017a6:	ef 48 ff e4 	st.w	r7[-28],r8
800017aa:	c0 88       	rjmp	800017ba <usartWriteValue+0x76>
800017ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800017b0:	5c 58       	castu.b	r8
800017b2:	2a 98       	sub	r8,-87
800017b4:	5c 58       	castu.b	r8
800017b6:	ef 48 ff e4 	st.w	r7[-28],r8
800017ba:	ee fb ff e4 	ld.w	r11,r7[-28]
800017be:	ee fc ff ec 	ld.w	r12,r7[-20]
800017c2:	f0 1f 00 0c 	mcall	800017f0 <usartWriteValue+0xac>
800017c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800017ca:	a5 88       	lsr	r8,0x4
800017cc:	ef 48 ff f0 	st.w	r7[-16],r8
800017d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800017d4:	20 48       	sub	r8,4
800017d6:	ef 48 ff f4 	st.w	r7[-12],r8
800017da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800017de:	58 08       	cp.w	r8,0
800017e0:	cc e1       	brne	8000177c <usartWriteValue+0x38>
800017e2:	2f 9d       	sub	sp,-28
800017e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800017e8:	80 00       	ld.sh	r0,r0[0x0]
800017ea:	2a 20       	sub	r0,-94
800017ec:	80 00       	ld.sh	r0,r0[0x0]
800017ee:	16 f0       	st.b	--r11,r0
800017f0:	80 00       	ld.sh	r0,r0[0x0]
800017f2:	16 98       	mov	r8,r11

800017f4 <usartWriteTcb>:
800017f4:	eb cd 40 80 	pushm	r7,lr
800017f8:	1a 97       	mov	r7,sp
800017fa:	20 4d       	sub	sp,16
800017fc:	ef 4c ff f4 	st.w	r7[-12],r12
80001800:	ef 4b ff f0 	st.w	r7[-16],r11
80001804:	30 18       	mov	r8,1
80001806:	ef 48 ff fc 	st.w	r7[-4],r8
8000180a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000180e:	58 08       	cp.w	r8,0
80001810:	e0 80 01 71 	breq	80001af2 <usartWriteTcb+0x2fe>
80001814:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001818:	58 08       	cp.w	r8,0
8000181a:	e0 8a 00 27 	brle	80001868 <usartWriteTcb+0x74>
8000181e:	fe fb 02 da 	ld.w	r11,pc[730]
80001822:	ee fc ff f4 	ld.w	r12,r7[-12]
80001826:	f0 1f 00 b6 	mcall	80001afc <usartWriteTcb+0x308>
8000182a:	30 08       	mov	r8,0
8000182c:	ef 48 ff f8 	st.w	r7[-8],r8
80001830:	c1 18       	rjmp	80001852 <usartWriteTcb+0x5e>
80001832:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001836:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000183a:	12 08       	add	r8,r9
8000183c:	11 c8       	ld.ub	r8,r8[0x4]
8000183e:	10 9b       	mov	r11,r8
80001840:	ee fc ff f4 	ld.w	r12,r7[-12]
80001844:	f0 1f 00 af 	mcall	80001b00 <usartWriteTcb+0x30c>
80001848:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000184c:	2f f8       	sub	r8,-1
8000184e:	ef 48 ff f8 	st.w	r7[-8],r8
80001852:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001856:	58 38       	cp.w	r8,3
80001858:	fe 9a ff ed 	brle	80001832 <usartWriteTcb+0x3e>
8000185c:	fe fb 02 a8 	ld.w	r11,pc[680]
80001860:	ee fc ff f4 	ld.w	r12,r7[-12]
80001864:	f0 1f 00 a6 	mcall	80001afc <usartWriteTcb+0x308>
80001868:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000186c:	58 18       	cp.w	r8,1
8000186e:	e0 8a 00 75 	brle	80001958 <usartWriteTcb+0x164>
80001872:	fe fb 02 96 	ld.w	r11,pc[662]
80001876:	ee fc ff f4 	ld.w	r12,r7[-12]
8000187a:	f0 1f 00 a1 	mcall	80001afc <usartWriteTcb+0x308>
8000187e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001882:	10 9b       	mov	r11,r8
80001884:	ee fc ff f4 	ld.w	r12,r7[-12]
80001888:	f0 1f 00 a1 	mcall	80001b0c <usartWriteTcb+0x318>
8000188c:	fe fb 02 84 	ld.w	r11,pc[644]
80001890:	ee fc ff f4 	ld.w	r12,r7[-12]
80001894:	f0 1f 00 9a 	mcall	80001afc <usartWriteTcb+0x308>
80001898:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000189c:	70 08       	ld.w	r8,r8[0x0]
8000189e:	10 9b       	mov	r11,r8
800018a0:	ee fc ff f4 	ld.w	r12,r7[-12]
800018a4:	f0 1f 00 9a 	mcall	80001b0c <usartWriteTcb+0x318>
800018a8:	fe fb 02 6c 	ld.w	r11,pc[620]
800018ac:	ee fc ff f4 	ld.w	r12,r7[-12]
800018b0:	f0 1f 00 93 	mcall	80001afc <usartWriteTcb+0x308>
800018b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800018b8:	70 28       	ld.w	r8,r8[0x8]
800018ba:	10 9b       	mov	r11,r8
800018bc:	ee fc ff f4 	ld.w	r12,r7[-12]
800018c0:	f0 1f 00 93 	mcall	80001b0c <usartWriteTcb+0x318>
800018c4:	fe fb 02 54 	ld.w	r11,pc[596]
800018c8:	ee fc ff f4 	ld.w	r12,r7[-12]
800018cc:	f0 1f 00 8c 	mcall	80001afc <usartWriteTcb+0x308>
800018d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800018d4:	70 38       	ld.w	r8,r8[0xc]
800018d6:	10 9b       	mov	r11,r8
800018d8:	ee fc ff f4 	ld.w	r12,r7[-12]
800018dc:	f0 1f 00 8c 	mcall	80001b0c <usartWriteTcb+0x318>
800018e0:	fe fb 02 3c 	ld.w	r11,pc[572]
800018e4:	ee fc ff f4 	ld.w	r12,r7[-12]
800018e8:	f0 1f 00 85 	mcall	80001afc <usartWriteTcb+0x308>
800018ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800018f0:	70 48       	ld.w	r8,r8[0x10]
800018f2:	10 9b       	mov	r11,r8
800018f4:	ee fc ff f4 	ld.w	r12,r7[-12]
800018f8:	f0 1f 00 85 	mcall	80001b0c <usartWriteTcb+0x318>
800018fc:	fe fb 02 24 	ld.w	r11,pc[548]
80001900:	ee fc ff f4 	ld.w	r12,r7[-12]
80001904:	f0 1f 00 7e 	mcall	80001afc <usartWriteTcb+0x308>
80001908:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000190c:	70 58       	ld.w	r8,r8[0x14]
8000190e:	10 9b       	mov	r11,r8
80001910:	ee fc ff f4 	ld.w	r12,r7[-12]
80001914:	f0 1f 00 7e 	mcall	80001b0c <usartWriteTcb+0x318>
80001918:	fe fb 02 0c 	ld.w	r11,pc[524]
8000191c:	ee fc ff f4 	ld.w	r12,r7[-12]
80001920:	f0 1f 00 77 	mcall	80001afc <usartWriteTcb+0x308>
80001924:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001928:	70 88       	ld.w	r8,r8[0x20]
8000192a:	10 9b       	mov	r11,r8
8000192c:	ee fc ff f4 	ld.w	r12,r7[-12]
80001930:	f0 1f 00 77 	mcall	80001b0c <usartWriteTcb+0x318>
80001934:	4f db       	lddpc	r11,80001b28 <usartWriteTcb+0x334>
80001936:	ee fc ff f4 	ld.w	r12,r7[-12]
8000193a:	f0 1f 00 71 	mcall	80001afc <usartWriteTcb+0x308>
8000193e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001942:	70 98       	ld.w	r8,r8[0x24]
80001944:	10 9b       	mov	r11,r8
80001946:	ee fc ff f4 	ld.w	r12,r7[-12]
8000194a:	f0 1f 00 71 	mcall	80001b0c <usartWriteTcb+0x318>
8000194e:	4e eb       	lddpc	r11,80001b04 <usartWriteTcb+0x310>
80001950:	ee fc ff f4 	ld.w	r12,r7[-12]
80001954:	f0 1f 00 6a 	mcall	80001afc <usartWriteTcb+0x308>
80001958:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000195c:	58 28       	cp.w	r8,2
8000195e:	e0 8a 00 ca 	brle	80001af2 <usartWriteTcb+0x2fe>
80001962:	4f 3b       	lddpc	r11,80001b2c <usartWriteTcb+0x338>
80001964:	ee fc ff f4 	ld.w	r12,r7[-12]
80001968:	f0 1f 00 65 	mcall	80001afc <usartWriteTcb+0x308>
8000196c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001970:	71 88       	ld.w	r8,r8[0x60]
80001972:	10 9b       	mov	r11,r8
80001974:	ee fc ff f4 	ld.w	r12,r7[-12]
80001978:	f0 1f 00 65 	mcall	80001b0c <usartWriteTcb+0x318>
8000197c:	4e db       	lddpc	r11,80001b30 <usartWriteTcb+0x33c>
8000197e:	ee fc ff f4 	ld.w	r12,r7[-12]
80001982:	f0 1f 00 5f 	mcall	80001afc <usartWriteTcb+0x308>
80001986:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000198a:	71 78       	ld.w	r8,r8[0x5c]
8000198c:	10 9b       	mov	r11,r8
8000198e:	ee fc ff f4 	ld.w	r12,r7[-12]
80001992:	f0 1f 00 5f 	mcall	80001b0c <usartWriteTcb+0x318>
80001996:	4e 8b       	lddpc	r11,80001b34 <usartWriteTcb+0x340>
80001998:	ee fc ff f4 	ld.w	r12,r7[-12]
8000199c:	f0 1f 00 58 	mcall	80001afc <usartWriteTcb+0x308>
800019a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800019a4:	71 68       	ld.w	r8,r8[0x58]
800019a6:	10 9b       	mov	r11,r8
800019a8:	ee fc ff f4 	ld.w	r12,r7[-12]
800019ac:	f0 1f 00 58 	mcall	80001b0c <usartWriteTcb+0x318>
800019b0:	4e 2b       	lddpc	r11,80001b38 <usartWriteTcb+0x344>
800019b2:	ee fc ff f4 	ld.w	r12,r7[-12]
800019b6:	f0 1f 00 52 	mcall	80001afc <usartWriteTcb+0x308>
800019ba:	ee f8 ff f0 	ld.w	r8,r7[-16]
800019be:	71 58       	ld.w	r8,r8[0x54]
800019c0:	10 9b       	mov	r11,r8
800019c2:	ee fc ff f4 	ld.w	r12,r7[-12]
800019c6:	f0 1f 00 52 	mcall	80001b0c <usartWriteTcb+0x318>
800019ca:	4d db       	lddpc	r11,80001b3c <usartWriteTcb+0x348>
800019cc:	ee fc ff f4 	ld.w	r12,r7[-12]
800019d0:	f0 1f 00 4b 	mcall	80001afc <usartWriteTcb+0x308>
800019d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800019d8:	71 48       	ld.w	r8,r8[0x50]
800019da:	10 9b       	mov	r11,r8
800019dc:	ee fc ff f4 	ld.w	r12,r7[-12]
800019e0:	f0 1f 00 4b 	mcall	80001b0c <usartWriteTcb+0x318>
800019e4:	4d 7b       	lddpc	r11,80001b40 <usartWriteTcb+0x34c>
800019e6:	ee fc ff f4 	ld.w	r12,r7[-12]
800019ea:	f0 1f 00 45 	mcall	80001afc <usartWriteTcb+0x308>
800019ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800019f2:	71 38       	ld.w	r8,r8[0x4c]
800019f4:	10 9b       	mov	r11,r8
800019f6:	ee fc ff f4 	ld.w	r12,r7[-12]
800019fa:	f0 1f 00 45 	mcall	80001b0c <usartWriteTcb+0x318>
800019fe:	4d 2b       	lddpc	r11,80001b44 <usartWriteTcb+0x350>
80001a00:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a04:	f0 1f 00 3e 	mcall	80001afc <usartWriteTcb+0x308>
80001a08:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001a0c:	71 28       	ld.w	r8,r8[0x48]
80001a0e:	10 9b       	mov	r11,r8
80001a10:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a14:	f0 1f 00 3e 	mcall	80001b0c <usartWriteTcb+0x318>
80001a18:	4c cb       	lddpc	r11,80001b48 <usartWriteTcb+0x354>
80001a1a:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a1e:	f0 1f 00 38 	mcall	80001afc <usartWriteTcb+0x308>
80001a22:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001a26:	71 18       	ld.w	r8,r8[0x44]
80001a28:	10 9b       	mov	r11,r8
80001a2a:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a2e:	f0 1f 00 38 	mcall	80001b0c <usartWriteTcb+0x318>
80001a32:	4c 7b       	lddpc	r11,80001b4c <usartWriteTcb+0x358>
80001a34:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a38:	f0 1f 00 31 	mcall	80001afc <usartWriteTcb+0x308>
80001a3c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001a40:	71 08       	ld.w	r8,r8[0x40]
80001a42:	10 9b       	mov	r11,r8
80001a44:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a48:	f0 1f 00 31 	mcall	80001b0c <usartWriteTcb+0x318>
80001a4c:	4c 1b       	lddpc	r11,80001b50 <usartWriteTcb+0x35c>
80001a4e:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a52:	f0 1f 00 2b 	mcall	80001afc <usartWriteTcb+0x308>
80001a56:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001a5a:	70 f8       	ld.w	r8,r8[0x3c]
80001a5c:	10 9b       	mov	r11,r8
80001a5e:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a62:	f0 1f 00 2b 	mcall	80001b0c <usartWriteTcb+0x318>
80001a66:	4b cb       	lddpc	r11,80001b54 <usartWriteTcb+0x360>
80001a68:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a6c:	f0 1f 00 24 	mcall	80001afc <usartWriteTcb+0x308>
80001a70:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001a74:	70 e8       	ld.w	r8,r8[0x38]
80001a76:	10 9b       	mov	r11,r8
80001a78:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a7c:	f0 1f 00 24 	mcall	80001b0c <usartWriteTcb+0x318>
80001a80:	4b 6b       	lddpc	r11,80001b58 <usartWriteTcb+0x364>
80001a82:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a86:	f0 1f 00 1e 	mcall	80001afc <usartWriteTcb+0x308>
80001a8a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001a8e:	70 d8       	ld.w	r8,r8[0x34]
80001a90:	10 9b       	mov	r11,r8
80001a92:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a96:	f0 1f 00 1e 	mcall	80001b0c <usartWriteTcb+0x318>
80001a9a:	4b 1b       	lddpc	r11,80001b5c <usartWriteTcb+0x368>
80001a9c:	ee fc ff f4 	ld.w	r12,r7[-12]
80001aa0:	f0 1f 00 17 	mcall	80001afc <usartWriteTcb+0x308>
80001aa4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001aa8:	70 c8       	ld.w	r8,r8[0x30]
80001aaa:	10 9b       	mov	r11,r8
80001aac:	ee fc ff f4 	ld.w	r12,r7[-12]
80001ab0:	f0 1f 00 17 	mcall	80001b0c <usartWriteTcb+0x318>
80001ab4:	4a bb       	lddpc	r11,80001b60 <usartWriteTcb+0x36c>
80001ab6:	ee fc ff f4 	ld.w	r12,r7[-12]
80001aba:	f0 1f 00 11 	mcall	80001afc <usartWriteTcb+0x308>
80001abe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001ac2:	70 b8       	ld.w	r8,r8[0x2c]
80001ac4:	10 9b       	mov	r11,r8
80001ac6:	ee fc ff f4 	ld.w	r12,r7[-12]
80001aca:	f0 1f 00 11 	mcall	80001b0c <usartWriteTcb+0x318>
80001ace:	4a 6b       	lddpc	r11,80001b64 <usartWriteTcb+0x370>
80001ad0:	ee fc ff f4 	ld.w	r12,r7[-12]
80001ad4:	f0 1f 00 0a 	mcall	80001afc <usartWriteTcb+0x308>
80001ad8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001adc:	70 a8       	ld.w	r8,r8[0x28]
80001ade:	10 9b       	mov	r11,r8
80001ae0:	ee fc ff f4 	ld.w	r12,r7[-12]
80001ae4:	f0 1f 00 0a 	mcall	80001b0c <usartWriteTcb+0x318>
80001ae8:	48 7b       	lddpc	r11,80001b04 <usartWriteTcb+0x310>
80001aea:	ee fc ff f4 	ld.w	r12,r7[-12]
80001aee:	f0 1f 00 04 	mcall	80001afc <usartWriteTcb+0x308>
80001af2:	2f cd       	sub	sp,-16
80001af4:	e3 cd 80 80 	ldm	sp++,r7,pc
80001af8:	80 00       	ld.sh	r0,r0[0x0]
80001afa:	2a 24       	sub	r4,-94
80001afc:	80 00       	ld.sh	r0,r0[0x0]
80001afe:	16 f0       	st.b	--r11,r0
80001b00:	80 00       	ld.sh	r0,r0[0x0]
80001b02:	16 98       	mov	r8,r11
80001b04:	80 00       	ld.sh	r0,r0[0x0]
80001b06:	2a 30       	sub	r0,-93
80001b08:	80 00       	ld.sh	r0,r0[0x0]
80001b0a:	2a 34       	sub	r4,-93
80001b0c:	80 00       	ld.sh	r0,r0[0x0]
80001b0e:	17 44       	ld.w	r4,--r11
80001b10:	80 00       	ld.sh	r0,r0[0x0]
80001b12:	2a 40       	sub	r0,-92
80001b14:	80 00       	ld.sh	r0,r0[0x0]
80001b16:	2a 50       	sub	r0,-91
80001b18:	80 00       	ld.sh	r0,r0[0x0]
80001b1a:	2a 60       	sub	r0,-90
80001b1c:	80 00       	ld.sh	r0,r0[0x0]
80001b1e:	2a 70       	sub	r0,-89
80001b20:	80 00       	ld.sh	r0,r0[0x0]
80001b22:	2a 80       	sub	r0,-88
80001b24:	80 00       	ld.sh	r0,r0[0x0]
80001b26:	2a 90       	sub	r0,-87
80001b28:	80 00       	ld.sh	r0,r0[0x0]
80001b2a:	2a a0       	sub	r0,-86
80001b2c:	80 00       	ld.sh	r0,r0[0x0]
80001b2e:	2a b0       	sub	r0,-85
80001b30:	80 00       	ld.sh	r0,r0[0x0]
80001b32:	2a b8       	sub	r8,-85
80001b34:	80 00       	ld.sh	r0,r0[0x0]
80001b36:	2a c0       	sub	r0,-84
80001b38:	80 00       	ld.sh	r0,r0[0x0]
80001b3a:	2a c8       	sub	r8,-84
80001b3c:	80 00       	ld.sh	r0,r0[0x0]
80001b3e:	2a d0       	sub	r0,-83
80001b40:	80 00       	ld.sh	r0,r0[0x0]
80001b42:	2a d8       	sub	r8,-83
80001b44:	80 00       	ld.sh	r0,r0[0x0]
80001b46:	2a e0       	sub	r0,-82
80001b48:	80 00       	ld.sh	r0,r0[0x0]
80001b4a:	2a e8       	sub	r8,-82
80001b4c:	80 00       	ld.sh	r0,r0[0x0]
80001b4e:	2a f0       	sub	r0,-81
80001b50:	80 00       	ld.sh	r0,r0[0x0]
80001b52:	2a f8       	sub	r8,-81
80001b54:	80 00       	ld.sh	r0,r0[0x0]
80001b56:	2b 00       	sub	r0,-80
80001b58:	80 00       	ld.sh	r0,r0[0x0]
80001b5a:	2b 08       	sub	r8,-80
80001b5c:	80 00       	ld.sh	r0,r0[0x0]
80001b5e:	2b 10       	sub	r0,-79
80001b60:	80 00       	ld.sh	r0,r0[0x0]
80001b62:	2b 18       	sub	r8,-79
80001b64:	80 00       	ld.sh	r0,r0[0x0]
80001b66:	2b 20       	sub	r0,-78

80001b68 <timerInit>:
80001b68:	d5 01       	pushm	r11,lr
80001b6a:	d2 01       	pushm	r12
80001b6c:	f0 1f 00 28 	mcall	80001c0c <timerClearInterrupt+0x10>
80001b70:	f0 1f 00 28 	mcall	80001c10 <timerClearInterrupt+0x14>
80001b74:	e0 6c 38 00 	mov	r12,14336
80001b78:	ea 1c ff ff 	orh	r12,0xffff
80001b7c:	e0 6b c0 00 	mov	r11,49152
80001b80:	ea 1b 00 00 	orh	r11,0x0
80001b84:	99 1b       	st.w	r12[0x4],r11
80001b86:	30 1b       	mov	r11,1
80001b88:	a5 6b       	lsl	r11,0x4
80001b8a:	99 9b       	st.w	r12[0x24],r11
80001b8c:	d2 02       	popm	r12
80001b8e:	f0 1f 00 22 	mcall	80001c14 <timerClearInterrupt+0x18>
80001b92:	d5 02       	popm	r11,lr
80001b94:	1c 9f       	mov	pc,lr

80001b96 <timerReset>:
80001b96:	d3 01       	pushm	r11-r12
80001b98:	e0 6c 38 00 	mov	r12,14336
80001b9c:	ea 1c ff ff 	orh	r12,0xffff
80001ba0:	30 5b       	mov	r11,5
80001ba2:	99 0b       	st.w	r12[0x0],r11
80001ba4:	e0 6b 00 08 	mov	r11,8
80001ba8:	ea 1b 00 00 	orh	r11,0x0
80001bac:	76 0b       	ld.w	r11,r11[0x0]
80001bae:	99 7b       	st.w	r12[0x1c],r11
80001bb0:	d3 02       	popm	r11-r12
80001bb2:	1c 9f       	mov	pc,lr

80001bb4 <timerStop>:
80001bb4:	d3 01       	pushm	r11-r12
80001bb6:	e0 6c 38 00 	mov	r12,14336
80001bba:	ea 1c ff ff 	orh	r12,0xffff
80001bbe:	30 2b       	mov	r11,2
80001bc0:	99 0b       	st.w	r12[0x0],r11
80001bc2:	d3 02       	popm	r11-r12
80001bc4:	1c 9f       	mov	pc,lr

80001bc6 <timerRCSet>:
80001bc6:	d3 01       	pushm	r11-r12
80001bc8:	49 4b       	lddpc	r11,80001c18 <timerClearInterrupt+0x1c>
80001bca:	97 0c       	st.w	r11[0x0],r12
80001bcc:	e0 6c 38 00 	mov	r12,14336
80001bd0:	ea 1c ff ff 	orh	r12,0xffff
80001bd4:	76 0b       	ld.w	r11,r11[0x0]
80001bd6:	99 7b       	st.w	r12[0x1c],r11
80001bd8:	d3 02       	popm	r11-r12
80001bda:	1c 9f       	mov	pc,lr

80001bdc <timerPrescaleSet>:
80001bdc:	d3 81       	pushm	r10-r12
80001bde:	49 0b       	lddpc	r11,80001c1c <timerClearInterrupt+0x20>
80001be0:	97 0c       	st.w	r11[0x0],r12
80001be2:	e0 6c 38 00 	mov	r12,14336
80001be6:	ea 1c ff ff 	orh	r12,0xffff
80001bea:	78 1a       	ld.w	r10,r12[0x4]
80001bec:	3f 8b       	mov	r11,-8
80001bee:	16 6a       	and	r10,r11
80001bf0:	48 bb       	lddpc	r11,80001c1c <timerClearInterrupt+0x20>
80001bf2:	76 0b       	ld.w	r11,r11[0x0]
80001bf4:	14 4b       	or	r11,r10
80001bf6:	99 1b       	st.w	r12[0x4],r11
80001bf8:	d3 82       	popm	r10-r12
80001bfa:	1c 9f       	mov	pc,lr

80001bfc <timerClearInterrupt>:
80001bfc:	d2 01       	pushm	r12
80001bfe:	e0 6c 38 00 	mov	r12,14336
80001c02:	ea 1c ff ff 	orh	r12,0xffff
80001c06:	78 8c       	ld.w	r12,r12[0x20]
80001c08:	d2 02       	popm	r12
80001c0a:	1c 9f       	mov	pc,lr
80001c0c:	80 00       	ld.sh	r0,r0[0x0]
80001c0e:	27 66       	sub	r6,118
80001c10:	80 00       	ld.sh	r0,r0[0x0]
80001c12:	1b fc       	ld.ub	r12,sp[0x7]
80001c14:	80 00       	ld.sh	r0,r0[0x0]
80001c16:	10 00       	add	r0,r8
80001c18:	00 00       	add	r0,r0
80001c1a:	00 08       	add	r8,r0
80001c1c:	00 00       	add	r0,r0
80001c1e:	00 0c       	add	r12,r0

80001c20 <_stext>:
80001c20:	49 7d       	lddpc	sp,80001c7c <udata_end+0x4>
80001c22:	49 80       	lddpc	r0,80001c80 <udata_end+0x8>
80001c24:	1a d0       	st.w	--sp,r0
80001c26:	e5 cd 20 00 	ldmts	sp,sp
80001c2a:	1b 00       	ld.w	r0,sp++
80001c2c:	49 60       	lddpc	r0,80001c84 <udata_end+0xc>
80001c2e:	e3 b0 00 01 	mtsr	0x4,r0
80001c32:	d5 53       	csrf	0x15
80001c34:	e0 6c 0c 00 	mov	r12,3072
80001c38:	ea 1c ff ff 	orh	r12,0xffff
80001c3c:	e0 6b 01 07 	mov	r11,263
80001c40:	99 ab       	st.w	r12[0x28],r11
80001c42:	30 4b       	mov	r11,4
80001c44:	99 0b       	st.w	r12[0x0],r11
80001c46:	e0 6a 00 80 	mov	r10,128

80001c4a <xw8>:
80001c4a:	79 5b       	ld.w	r11,r12[0x54]
80001c4c:	14 7b       	tst	r11,r10
80001c4e:	cf e0       	breq	80001c4a <xw8>
80001c50:	30 5b       	mov	r11,5
80001c52:	99 0b       	st.w	r12[0x0],r11

80001c54 <idata_>:
80001c54:	48 d0       	lddpc	r0,80001c88 <udata_end+0x10>
80001c56:	48 e1       	lddpc	r1,80001c8c <udata_end+0x14>
80001c58:	02 30       	cp.w	r0,r1
80001c5a:	c0 62       	brcc	80001c66 <idata_end>
80001c5c:	48 d2       	lddpc	r2,80001c90 <udata_end+0x18>

80001c5e <idata_loop>:
80001c5e:	05 04       	ld.w	r4,r2++
80001c60:	00 a4       	st.w	r0++,r4
80001c62:	02 30       	cp.w	r0,r1
80001c64:	cf d3       	brcs	80001c5e <idata_loop>

80001c66 <idata_end>:
80001c66:	48 c0       	lddpc	r0,80001c94 <udata_end+0x1c>
80001c68:	48 c1       	lddpc	r1,80001c98 <udata_end+0x20>
80001c6a:	02 30       	cp.w	r0,r1
80001c6c:	c0 62       	brcc	80001c78 <udata_end>
80001c6e:	30 02       	mov	r2,0
80001c70:	30 03       	mov	r3,0

80001c72 <udata_loop>:
80001c72:	00 a2       	st.w	r0++,r2
80001c74:	02 30       	cp.w	r0,r1
80001c76:	cf e3       	brcs	80001c72 <udata_loop>

80001c78 <udata_end>:
80001c78:	48 9f       	lddpc	pc,80001c9c <udata_end+0x24>
80001c7a:	00 00       	add	r0,r0
80001c7c:	00 01       	add	r1,r0
80001c7e:	00 00       	add	r0,r0
80001c80:	00 00       	add	r0,r0
80001c82:	f0 00       	*unknown*
80001c84:	80 00       	ld.sh	r0,r0[0x0]
80001c86:	26 00       	sub	r0,96
80001c88:	00 00       	add	r0,r0
80001c8a:	00 08       	add	r8,r0
80001c8c:	00 00       	add	r0,r0
80001c8e:	05 18       	ld.sh	r8,r2++
80001c90:	80 00       	ld.sh	r0,r0[0x0]
80001c92:	2b 90       	sub	r0,-71
80001c94:	00 00       	add	r0,r0
80001c96:	05 18       	ld.sh	r8,r2++
80001c98:	00 00       	add	r0,r0
80001c9a:	07 b0       	ld.ub	r0,r3[0x3]
80001c9c:	80 00       	ld.sh	r0,r0[0x0]
80001c9e:	06 3c       	cp.w	r12,r3

80001ca0 <calloc>:
80001ca0:	d4 01       	pushm	lr
80001ca2:	48 48       	lddpc	r8,80001cb0 <calloc+0x10>
80001ca4:	16 9a       	mov	r10,r11
80001ca6:	18 9b       	mov	r11,r12
80001ca8:	70 0c       	ld.w	r12,r8[0x0]
80001caa:	f0 1f 00 03 	mcall	80001cb4 <calloc+0x14>
80001cae:	d8 02       	popm	pc
80001cb0:	00 00       	add	r0,r0
80001cb2:	01 00       	ld.w	r0,r0++
80001cb4:	80 00       	ld.sh	r0,r0[0x0]
80001cb6:	1c b8       	st.h	lr++,r8

80001cb8 <_calloc_r>:
80001cb8:	d4 21       	pushm	r4-r7,lr
80001cba:	f4 0b 02 4b 	mul	r11,r10,r11
80001cbe:	f0 1f 00 15 	mcall	80001d10 <_calloc_r+0x58>
80001cc2:	18 97       	mov	r7,r12
80001cc4:	c2 30       	breq	80001d0a <_calloc_r+0x52>
80001cc6:	f8 fa ff fc 	ld.w	r10,r12[-4]
80001cca:	e0 1a ff fc 	andl	r10,0xfffc
80001cce:	20 4a       	sub	r10,4
80001cd0:	e0 4a 00 24 	cp.w	r10,36
80001cd4:	e0 8b 00 18 	brhi	80001d04 <_calloc_r+0x4c>
80001cd8:	18 98       	mov	r8,r12
80001cda:	59 3a       	cp.w	r10,19
80001cdc:	e0 88 00 0f 	brls	80001cfa <_calloc_r+0x42>
80001ce0:	30 09       	mov	r9,0
80001ce2:	10 a9       	st.w	r8++,r9
80001ce4:	10 a9       	st.w	r8++,r9
80001ce6:	59 ba       	cp.w	r10,27
80001ce8:	e0 88 00 09 	brls	80001cfa <_calloc_r+0x42>
80001cec:	10 a9       	st.w	r8++,r9
80001cee:	10 a9       	st.w	r8++,r9
80001cf0:	e0 4a 00 24 	cp.w	r10,36
80001cf4:	c0 31       	brne	80001cfa <_calloc_r+0x42>
80001cf6:	10 a9       	st.w	r8++,r9
80001cf8:	10 a9       	st.w	r8++,r9
80001cfa:	30 09       	mov	r9,0
80001cfc:	10 a9       	st.w	r8++,r9
80001cfe:	91 19       	st.w	r8[0x4],r9
80001d00:	91 09       	st.w	r8[0x0],r9
80001d02:	c0 48       	rjmp	80001d0a <_calloc_r+0x52>
80001d04:	30 0b       	mov	r11,0
80001d06:	f0 1f 00 04 	mcall	80001d14 <_calloc_r+0x5c>
80001d0a:	0e 9c       	mov	r12,r7
80001d0c:	d8 22       	popm	r4-r7,pc
80001d0e:	00 00       	add	r0,r0
80001d10:	80 00       	ld.sh	r0,r0[0x0]
80001d12:	1d 30       	ld.ub	r0,lr++
80001d14:	80 00       	ld.sh	r0,r0[0x0]
80001d16:	21 80       	sub	r0,24

80001d18 <malloc>:
80001d18:	d4 01       	pushm	lr
80001d1a:	48 48       	lddpc	r8,80001d28 <malloc+0x10>
80001d1c:	18 9b       	mov	r11,r12
80001d1e:	70 0c       	ld.w	r12,r8[0x0]
80001d20:	f0 1f 00 03 	mcall	80001d2c <malloc+0x14>
80001d24:	d8 02       	popm	pc
80001d26:	00 00       	add	r0,r0
80001d28:	00 00       	add	r0,r0
80001d2a:	01 00       	ld.w	r0,r0++
80001d2c:	80 00       	ld.sh	r0,r0[0x0]
80001d2e:	1d 30       	ld.ub	r0,lr++

80001d30 <_malloc_r>:
80001d30:	d4 31       	pushm	r0-r7,lr
80001d32:	f6 c8 ff f5 	sub	r8,r11,-11
80001d36:	18 95       	mov	r5,r12
80001d38:	10 97       	mov	r7,r8
80001d3a:	e0 17 ff f8 	andl	r7,0xfff8
80001d3e:	59 68       	cp.w	r8,22
80001d40:	f9 b7 08 10 	movls	r7,16
80001d44:	16 37       	cp.w	r7,r11
80001d46:	5f 38       	srlo	r8
80001d48:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001d4c:	c0 50       	breq	80001d56 <_malloc_r+0x26>
80001d4e:	30 c8       	mov	r8,12
80001d50:	99 38       	st.w	r12[0xc],r8
80001d52:	e0 8f 01 f3 	bral	80002138 <_malloc_r+0x408>
80001d56:	f0 1f 00 50 	mcall	80001e94 <_malloc_r+0x164>
80001d5a:	e0 47 01 f7 	cp.w	r7,503
80001d5e:	e0 8b 00 1c 	brhi	80001d96 <_malloc_r+0x66>
80001d62:	ee 03 16 03 	lsr	r3,r7,0x3
80001d66:	4c d8       	lddpc	r8,80001e98 <_malloc_r+0x168>
80001d68:	f0 03 00 38 	add	r8,r8,r3<<0x3
80001d6c:	70 36       	ld.w	r6,r8[0xc]
80001d6e:	10 36       	cp.w	r6,r8
80001d70:	c0 61       	brne	80001d7c <_malloc_r+0x4c>
80001d72:	ec c8 ff f8 	sub	r8,r6,-8
80001d76:	70 36       	ld.w	r6,r8[0xc]
80001d78:	10 36       	cp.w	r6,r8
80001d7a:	c0 c0       	breq	80001d92 <_malloc_r+0x62>
80001d7c:	6c 18       	ld.w	r8,r6[0x4]
80001d7e:	e0 18 ff fc 	andl	r8,0xfffc
80001d82:	6c 3a       	ld.w	r10,r6[0xc]
80001d84:	ec 08 00 09 	add	r9,r6,r8
80001d88:	0a 9c       	mov	r12,r5
80001d8a:	6c 28       	ld.w	r8,r6[0x8]
80001d8c:	95 28       	st.w	r10[0x8],r8
80001d8e:	91 3a       	st.w	r8[0xc],r10
80001d90:	c4 68       	rjmp	80001e1c <_malloc_r+0xec>
80001d92:	2f e3       	sub	r3,-2
80001d94:	c4 c8       	rjmp	80001e2c <_malloc_r+0xfc>
80001d96:	ee 03 16 09 	lsr	r3,r7,0x9
80001d9a:	c0 41       	brne	80001da2 <_malloc_r+0x72>
80001d9c:	ee 03 16 03 	lsr	r3,r7,0x3
80001da0:	c2 68       	rjmp	80001dec <_malloc_r+0xbc>
80001da2:	58 43       	cp.w	r3,4
80001da4:	e0 8b 00 06 	brhi	80001db0 <_malloc_r+0x80>
80001da8:	ee 03 16 06 	lsr	r3,r7,0x6
80001dac:	2c 83       	sub	r3,-56
80001dae:	c1 f8       	rjmp	80001dec <_malloc_r+0xbc>
80001db0:	59 43       	cp.w	r3,20
80001db2:	e0 8b 00 04 	brhi	80001dba <_malloc_r+0x8a>
80001db6:	2a 53       	sub	r3,-91
80001db8:	c1 a8       	rjmp	80001dec <_malloc_r+0xbc>
80001dba:	e0 43 00 54 	cp.w	r3,84
80001dbe:	e0 8b 00 06 	brhi	80001dca <_malloc_r+0x9a>
80001dc2:	ee 03 16 0c 	lsr	r3,r7,0xc
80001dc6:	29 23       	sub	r3,-110
80001dc8:	c1 28       	rjmp	80001dec <_malloc_r+0xbc>
80001dca:	e0 43 01 54 	cp.w	r3,340
80001dce:	e0 8b 00 06 	brhi	80001dda <_malloc_r+0xaa>
80001dd2:	ee 03 16 0f 	lsr	r3,r7,0xf
80001dd6:	28 93       	sub	r3,-119
80001dd8:	c0 a8       	rjmp	80001dec <_malloc_r+0xbc>
80001dda:	e0 43 05 54 	cp.w	r3,1364
80001dde:	e0 88 00 04 	brls	80001de6 <_malloc_r+0xb6>
80001de2:	37 e3       	mov	r3,126
80001de4:	c0 48       	rjmp	80001dec <_malloc_r+0xbc>
80001de6:	ee 03 16 12 	lsr	r3,r7,0x12
80001dea:	28 43       	sub	r3,-124
80001dec:	4a ba       	lddpc	r10,80001e98 <_malloc_r+0x168>
80001dee:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80001df2:	74 36       	ld.w	r6,r10[0xc]
80001df4:	c1 98       	rjmp	80001e26 <_malloc_r+0xf6>
80001df6:	6c 19       	ld.w	r9,r6[0x4]
80001df8:	e0 19 ff fc 	andl	r9,0xfffc
80001dfc:	f2 07 01 0b 	sub	r11,r9,r7
80001e00:	58 fb       	cp.w	r11,15
80001e02:	e0 8a 00 04 	brle	80001e0a <_malloc_r+0xda>
80001e06:	20 13       	sub	r3,1
80001e08:	c1 18       	rjmp	80001e2a <_malloc_r+0xfa>
80001e0a:	6c 38       	ld.w	r8,r6[0xc]
80001e0c:	58 0b       	cp.w	r11,0
80001e0e:	c0 b5       	brlt	80001e24 <_malloc_r+0xf4>
80001e10:	6c 2a       	ld.w	r10,r6[0x8]
80001e12:	ec 09 00 09 	add	r9,r6,r9
80001e16:	0a 9c       	mov	r12,r5
80001e18:	91 2a       	st.w	r8[0x8],r10
80001e1a:	95 38       	st.w	r10[0xc],r8
80001e1c:	72 18       	ld.w	r8,r9[0x4]
80001e1e:	a1 a8       	sbr	r8,0x0
80001e20:	93 18       	st.w	r9[0x4],r8
80001e22:	cb c8       	rjmp	80001f9a <_malloc_r+0x26a>
80001e24:	10 96       	mov	r6,r8
80001e26:	14 36       	cp.w	r6,r10
80001e28:	ce 71       	brne	80001df6 <_malloc_r+0xc6>
80001e2a:	2f f3       	sub	r3,-1
80001e2c:	49 ba       	lddpc	r10,80001e98 <_malloc_r+0x168>
80001e2e:	f4 cc ff f8 	sub	r12,r10,-8
80001e32:	78 26       	ld.w	r6,r12[0x8]
80001e34:	18 36       	cp.w	r6,r12
80001e36:	c6 e0       	breq	80001f12 <_malloc_r+0x1e2>
80001e38:	6c 19       	ld.w	r9,r6[0x4]
80001e3a:	e0 19 ff fc 	andl	r9,0xfffc
80001e3e:	f2 07 01 08 	sub	r8,r9,r7
80001e42:	58 f8       	cp.w	r8,15
80001e44:	e0 89 00 90 	brgt	80001f64 <_malloc_r+0x234>
80001e48:	99 3c       	st.w	r12[0xc],r12
80001e4a:	99 2c       	st.w	r12[0x8],r12
80001e4c:	58 08       	cp.w	r8,0
80001e4e:	c0 55       	brlt	80001e58 <_malloc_r+0x128>
80001e50:	ec 09 00 09 	add	r9,r6,r9
80001e54:	0a 9c       	mov	r12,r5
80001e56:	ce 3b       	rjmp	80001e1c <_malloc_r+0xec>
80001e58:	e0 49 01 ff 	cp.w	r9,511
80001e5c:	e0 8b 00 13 	brhi	80001e82 <_malloc_r+0x152>
80001e60:	a3 99       	lsr	r9,0x3
80001e62:	f4 09 00 38 	add	r8,r10,r9<<0x3
80001e66:	70 2b       	ld.w	r11,r8[0x8]
80001e68:	8d 38       	st.w	r6[0xc],r8
80001e6a:	8d 2b       	st.w	r6[0x8],r11
80001e6c:	97 36       	st.w	r11[0xc],r6
80001e6e:	91 26       	st.w	r8[0x8],r6
80001e70:	a3 49       	asr	r9,0x2
80001e72:	74 18       	ld.w	r8,r10[0x4]
80001e74:	30 1b       	mov	r11,1
80001e76:	f6 09 09 49 	lsl	r9,r11,r9
80001e7a:	f1 e9 10 09 	or	r9,r8,r9
80001e7e:	95 19       	st.w	r10[0x4],r9
80001e80:	c4 98       	rjmp	80001f12 <_malloc_r+0x1e2>
80001e82:	f2 0a 16 09 	lsr	r10,r9,0x9
80001e86:	58 4a       	cp.w	r10,4
80001e88:	e0 8b 00 0a 	brhi	80001e9c <_malloc_r+0x16c>
80001e8c:	f2 0a 16 06 	lsr	r10,r9,0x6
80001e90:	2c 8a       	sub	r10,-56
80001e92:	c2 38       	rjmp	80001ed8 <_malloc_r+0x1a8>
80001e94:	80 00       	ld.sh	r0,r0[0x0]
80001e96:	21 8e       	sub	lr,24
80001e98:	00 00       	add	r0,r0
80001e9a:	01 04       	ld.w	r4,r0++
80001e9c:	59 4a       	cp.w	r10,20
80001e9e:	e0 8b 00 04 	brhi	80001ea6 <_malloc_r+0x176>
80001ea2:	2a 5a       	sub	r10,-91
80001ea4:	c1 a8       	rjmp	80001ed8 <_malloc_r+0x1a8>
80001ea6:	e0 4a 00 54 	cp.w	r10,84
80001eaa:	e0 8b 00 06 	brhi	80001eb6 <_malloc_r+0x186>
80001eae:	f2 0a 16 0c 	lsr	r10,r9,0xc
80001eb2:	29 2a       	sub	r10,-110
80001eb4:	c1 28       	rjmp	80001ed8 <_malloc_r+0x1a8>
80001eb6:	e0 4a 01 54 	cp.w	r10,340
80001eba:	e0 8b 00 06 	brhi	80001ec6 <_malloc_r+0x196>
80001ebe:	f2 0a 16 0f 	lsr	r10,r9,0xf
80001ec2:	28 9a       	sub	r10,-119
80001ec4:	c0 a8       	rjmp	80001ed8 <_malloc_r+0x1a8>
80001ec6:	e0 4a 05 54 	cp.w	r10,1364
80001eca:	e0 88 00 04 	brls	80001ed2 <_malloc_r+0x1a2>
80001ece:	37 ea       	mov	r10,126
80001ed0:	c0 48       	rjmp	80001ed8 <_malloc_r+0x1a8>
80001ed2:	f2 0a 16 12 	lsr	r10,r9,0x12
80001ed6:	28 4a       	sub	r10,-124
80001ed8:	4c 8b       	lddpc	r11,80001ff8 <_malloc_r+0x2c8>
80001eda:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80001ede:	68 28       	ld.w	r8,r4[0x8]
80001ee0:	08 38       	cp.w	r8,r4
80001ee2:	c0 e1       	brne	80001efe <_malloc_r+0x1ce>
80001ee4:	76 19       	ld.w	r9,r11[0x4]
80001ee6:	a3 4a       	asr	r10,0x2
80001ee8:	30 1e       	mov	lr,1
80001eea:	fc 0a 09 4a 	lsl	r10,lr,r10
80001eee:	f3 ea 10 0a 	or	r10,r9,r10
80001ef2:	10 99       	mov	r9,r8
80001ef4:	97 1a       	st.w	r11[0x4],r10
80001ef6:	c0 a8       	rjmp	80001f0a <_malloc_r+0x1da>
80001ef8:	70 28       	ld.w	r8,r8[0x8]
80001efa:	08 38       	cp.w	r8,r4
80001efc:	c0 60       	breq	80001f08 <_malloc_r+0x1d8>
80001efe:	70 1a       	ld.w	r10,r8[0x4]
80001f00:	e0 1a ff fc 	andl	r10,0xfffc
80001f04:	14 39       	cp.w	r9,r10
80001f06:	cf 93       	brcs	80001ef8 <_malloc_r+0x1c8>
80001f08:	70 39       	ld.w	r9,r8[0xc]
80001f0a:	8d 39       	st.w	r6[0xc],r9
80001f0c:	8d 28       	st.w	r6[0x8],r8
80001f0e:	91 36       	st.w	r8[0xc],r6
80001f10:	93 26       	st.w	r9[0x8],r6
80001f12:	e6 08 14 02 	asr	r8,r3,0x2
80001f16:	30 1b       	mov	r11,1
80001f18:	4b 84       	lddpc	r4,80001ff8 <_malloc_r+0x2c8>
80001f1a:	f6 08 09 4b 	lsl	r11,r11,r8
80001f1e:	68 18       	ld.w	r8,r4[0x4]
80001f20:	10 3b       	cp.w	r11,r8
80001f22:	e0 8b 00 6f 	brhi	80002000 <_malloc_r+0x2d0>
80001f26:	f7 e8 00 09 	and	r9,r11,r8
80001f2a:	c0 b1       	brne	80001f40 <_malloc_r+0x210>
80001f2c:	e0 13 ff fc 	andl	r3,0xfffc
80001f30:	a1 7b       	lsl	r11,0x1
80001f32:	2f c3       	sub	r3,-4
80001f34:	c0 38       	rjmp	80001f3a <_malloc_r+0x20a>
80001f36:	2f c3       	sub	r3,-4
80001f38:	a1 7b       	lsl	r11,0x1
80001f3a:	f7 e8 00 09 	and	r9,r11,r8
80001f3e:	cf c0       	breq	80001f36 <_malloc_r+0x206>
80001f40:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001f44:	06 92       	mov	r2,r3
80001f46:	1c 91       	mov	r1,lr
80001f48:	62 36       	ld.w	r6,r1[0xc]
80001f4a:	c2 e8       	rjmp	80001fa6 <_malloc_r+0x276>
80001f4c:	6c 1a       	ld.w	r10,r6[0x4]
80001f4e:	e0 1a ff fc 	andl	r10,0xfffc
80001f52:	f4 07 01 08 	sub	r8,r10,r7
80001f56:	58 f8       	cp.w	r8,15
80001f58:	e0 8a 00 15 	brle	80001f82 <_malloc_r+0x252>
80001f5c:	6c 3a       	ld.w	r10,r6[0xc]
80001f5e:	6c 29       	ld.w	r9,r6[0x8]
80001f60:	95 29       	st.w	r10[0x8],r9
80001f62:	93 3a       	st.w	r9[0xc],r10
80001f64:	0e 99       	mov	r9,r7
80001f66:	ec 07 00 07 	add	r7,r6,r7
80001f6a:	a1 a9       	sbr	r9,0x0
80001f6c:	99 37       	st.w	r12[0xc],r7
80001f6e:	99 27       	st.w	r12[0x8],r7
80001f70:	8d 19       	st.w	r6[0x4],r9
80001f72:	ee 08 09 08 	st.w	r7[r8],r8
80001f76:	8f 2c       	st.w	r7[0x8],r12
80001f78:	8f 3c       	st.w	r7[0xc],r12
80001f7a:	a1 a8       	sbr	r8,0x0
80001f7c:	0a 9c       	mov	r12,r5
80001f7e:	8f 18       	st.w	r7[0x4],r8
80001f80:	c0 d8       	rjmp	80001f9a <_malloc_r+0x26a>
80001f82:	6c 39       	ld.w	r9,r6[0xc]
80001f84:	58 08       	cp.w	r8,0
80001f86:	c0 f5       	brlt	80001fa4 <_malloc_r+0x274>
80001f88:	ec 0a 00 0a 	add	r10,r6,r10
80001f8c:	74 18       	ld.w	r8,r10[0x4]
80001f8e:	a1 a8       	sbr	r8,0x0
80001f90:	0a 9c       	mov	r12,r5
80001f92:	95 18       	st.w	r10[0x4],r8
80001f94:	6c 28       	ld.w	r8,r6[0x8]
80001f96:	93 28       	st.w	r9[0x8],r8
80001f98:	91 39       	st.w	r8[0xc],r9
80001f9a:	f0 1f 00 19 	mcall	80001ffc <_malloc_r+0x2cc>
80001f9e:	ec cc ff f8 	sub	r12,r6,-8
80001fa2:	d8 32       	popm	r0-r7,pc
80001fa4:	12 96       	mov	r6,r9
80001fa6:	02 36       	cp.w	r6,r1
80001fa8:	cd 21       	brne	80001f4c <_malloc_r+0x21c>
80001faa:	2f f2       	sub	r2,-1
80001fac:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001fb0:	c0 30       	breq	80001fb6 <_malloc_r+0x286>
80001fb2:	2f 81       	sub	r1,-8
80001fb4:	cc ab       	rjmp	80001f48 <_malloc_r+0x218>
80001fb6:	1c 98       	mov	r8,lr
80001fb8:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001fbc:	c0 81       	brne	80001fcc <_malloc_r+0x29c>
80001fbe:	68 19       	ld.w	r9,r4[0x4]
80001fc0:	f6 08 11 ff 	rsub	r8,r11,-1
80001fc4:	f3 e8 00 08 	and	r8,r9,r8
80001fc8:	89 18       	st.w	r4[0x4],r8
80001fca:	c0 78       	rjmp	80001fd8 <_malloc_r+0x2a8>
80001fcc:	f0 c9 00 08 	sub	r9,r8,8
80001fd0:	20 13       	sub	r3,1
80001fd2:	70 08       	ld.w	r8,r8[0x0]
80001fd4:	12 38       	cp.w	r8,r9
80001fd6:	cf 10       	breq	80001fb8 <_malloc_r+0x288>
80001fd8:	a1 7b       	lsl	r11,0x1
80001fda:	68 18       	ld.w	r8,r4[0x4]
80001fdc:	10 3b       	cp.w	r11,r8
80001fde:	e0 8b 00 11 	brhi	80002000 <_malloc_r+0x2d0>
80001fe2:	58 0b       	cp.w	r11,0
80001fe4:	c0 e0       	breq	80002000 <_malloc_r+0x2d0>
80001fe6:	04 93       	mov	r3,r2
80001fe8:	c0 38       	rjmp	80001fee <_malloc_r+0x2be>
80001fea:	2f c3       	sub	r3,-4
80001fec:	a1 7b       	lsl	r11,0x1
80001fee:	f7 e8 00 09 	and	r9,r11,r8
80001ff2:	ca 71       	brne	80001f40 <_malloc_r+0x210>
80001ff4:	cf bb       	rjmp	80001fea <_malloc_r+0x2ba>
80001ff6:	00 00       	add	r0,r0
80001ff8:	00 00       	add	r0,r0
80001ffa:	01 04       	ld.w	r4,r0++
80001ffc:	80 00       	ld.sh	r0,r0[0x0]
80001ffe:	21 90       	sub	r0,25
80002000:	68 23       	ld.w	r3,r4[0x8]
80002002:	66 12       	ld.w	r2,r3[0x4]
80002004:	e0 12 ff fc 	andl	r2,0xfffc
80002008:	0e 32       	cp.w	r2,r7
8000200a:	5f 39       	srlo	r9
8000200c:	e4 07 01 08 	sub	r8,r2,r7
80002010:	58 f8       	cp.w	r8,15
80002012:	5f aa       	srle	r10
80002014:	f5 e9 10 09 	or	r9,r10,r9
80002018:	e0 80 00 a2 	breq	8000215c <_malloc_r+0x42c>
8000201c:	4c 88       	lddpc	r8,8000213c <_malloc_r+0x40c>
8000201e:	70 01       	ld.w	r1,r8[0x0]
80002020:	4c 88       	lddpc	r8,80002140 <_malloc_r+0x410>
80002022:	2f 01       	sub	r1,-16
80002024:	70 08       	ld.w	r8,r8[0x0]
80002026:	0e 01       	add	r1,r7
80002028:	5b f8       	cp.w	r8,-1
8000202a:	c0 40       	breq	80002032 <_malloc_r+0x302>
8000202c:	28 11       	sub	r1,-127
8000202e:	e0 11 ff 80 	andl	r1,0xff80
80002032:	02 9b       	mov	r11,r1
80002034:	0a 9c       	mov	r12,r5
80002036:	f0 1f 00 44 	mcall	80002144 <_malloc_r+0x414>
8000203a:	18 96       	mov	r6,r12
8000203c:	5b fc       	cp.w	r12,-1
8000203e:	c6 e0       	breq	8000211a <_malloc_r+0x3ea>
80002040:	e6 02 00 08 	add	r8,r3,r2
80002044:	10 3c       	cp.w	r12,r8
80002046:	c0 32       	brcc	8000204c <_malloc_r+0x31c>
80002048:	08 33       	cp.w	r3,r4
8000204a:	c6 81       	brne	8000211a <_malloc_r+0x3ea>
8000204c:	4b fa       	lddpc	r10,80002148 <_malloc_r+0x418>
8000204e:	74 09       	ld.w	r9,r10[0x0]
80002050:	e2 09 00 09 	add	r9,r1,r9
80002054:	95 09       	st.w	r10[0x0],r9
80002056:	10 36       	cp.w	r6,r8
80002058:	c0 a1       	brne	8000206c <_malloc_r+0x33c>
8000205a:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
8000205e:	c0 71       	brne	8000206c <_malloc_r+0x33c>
80002060:	e2 02 00 02 	add	r2,r1,r2
80002064:	68 28       	ld.w	r8,r4[0x8]
80002066:	a1 a2       	sbr	r2,0x0
80002068:	91 12       	st.w	r8[0x4],r2
8000206a:	c4 c8       	rjmp	80002102 <_malloc_r+0x3d2>
8000206c:	4b 5a       	lddpc	r10,80002140 <_malloc_r+0x410>
8000206e:	74 0b       	ld.w	r11,r10[0x0]
80002070:	5b fb       	cp.w	r11,-1
80002072:	c0 31       	brne	80002078 <_malloc_r+0x348>
80002074:	95 06       	st.w	r10[0x0],r6
80002076:	c0 68       	rjmp	80002082 <_malloc_r+0x352>
80002078:	ec 09 00 09 	add	r9,r6,r9
8000207c:	4b 3a       	lddpc	r10,80002148 <_malloc_r+0x418>
8000207e:	10 19       	sub	r9,r8
80002080:	95 09       	st.w	r10[0x0],r9
80002082:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80002086:	f0 09 11 08 	rsub	r9,r8,8
8000208a:	58 08       	cp.w	r8,0
8000208c:	f2 08 17 10 	movne	r8,r9
80002090:	ed d8 e1 06 	addne	r6,r6,r8
80002094:	28 08       	sub	r8,-128
80002096:	ec 01 00 01 	add	r1,r6,r1
8000209a:	0a 9c       	mov	r12,r5
8000209c:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800020a0:	f0 01 01 01 	sub	r1,r8,r1
800020a4:	02 9b       	mov	r11,r1
800020a6:	f0 1f 00 28 	mcall	80002144 <_malloc_r+0x414>
800020aa:	4a 88       	lddpc	r8,80002148 <_malloc_r+0x418>
800020ac:	5b fc       	cp.w	r12,-1
800020ae:	ec 0c 17 00 	moveq	r12,r6
800020b2:	f9 b1 00 00 	moveq	r1,0
800020b6:	70 09       	ld.w	r9,r8[0x0]
800020b8:	0c 1c       	sub	r12,r6
800020ba:	89 26       	st.w	r4[0x8],r6
800020bc:	02 0c       	add	r12,r1
800020be:	12 01       	add	r1,r9
800020c0:	a1 ac       	sbr	r12,0x0
800020c2:	91 01       	st.w	r8[0x0],r1
800020c4:	8d 1c       	st.w	r6[0x4],r12
800020c6:	08 33       	cp.w	r3,r4
800020c8:	c1 d0       	breq	80002102 <_malloc_r+0x3d2>
800020ca:	58 f2       	cp.w	r2,15
800020cc:	e0 8b 00 05 	brhi	800020d6 <_malloc_r+0x3a6>
800020d0:	30 18       	mov	r8,1
800020d2:	8d 18       	st.w	r6[0x4],r8
800020d4:	c2 38       	rjmp	8000211a <_malloc_r+0x3ea>
800020d6:	30 59       	mov	r9,5
800020d8:	20 c2       	sub	r2,12
800020da:	e0 12 ff f8 	andl	r2,0xfff8
800020de:	e6 02 00 08 	add	r8,r3,r2
800020e2:	91 29       	st.w	r8[0x8],r9
800020e4:	91 19       	st.w	r8[0x4],r9
800020e6:	66 18       	ld.w	r8,r3[0x4]
800020e8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800020ec:	e5 e8 10 08 	or	r8,r2,r8
800020f0:	87 18       	st.w	r3[0x4],r8
800020f2:	58 f2       	cp.w	r2,15
800020f4:	e0 88 00 07 	brls	80002102 <_malloc_r+0x3d2>
800020f8:	e6 cb ff f8 	sub	r11,r3,-8
800020fc:	0a 9c       	mov	r12,r5
800020fe:	f0 1f 00 14 	mcall	8000214c <_malloc_r+0x41c>
80002102:	49 49       	lddpc	r9,80002150 <_malloc_r+0x420>
80002104:	72 0a       	ld.w	r10,r9[0x0]
80002106:	49 18       	lddpc	r8,80002148 <_malloc_r+0x418>
80002108:	70 08       	ld.w	r8,r8[0x0]
8000210a:	14 38       	cp.w	r8,r10
8000210c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80002110:	49 19       	lddpc	r9,80002154 <_malloc_r+0x424>
80002112:	72 0a       	ld.w	r10,r9[0x0]
80002114:	14 38       	cp.w	r8,r10
80002116:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000211a:	68 28       	ld.w	r8,r4[0x8]
8000211c:	70 18       	ld.w	r8,r8[0x4]
8000211e:	e0 18 ff fc 	andl	r8,0xfffc
80002122:	0e 38       	cp.w	r8,r7
80002124:	5f 39       	srlo	r9
80002126:	0e 18       	sub	r8,r7
80002128:	58 f8       	cp.w	r8,15
8000212a:	5f aa       	srle	r10
8000212c:	f5 e9 10 09 	or	r9,r10,r9
80002130:	c1 60       	breq	8000215c <_malloc_r+0x42c>
80002132:	0a 9c       	mov	r12,r5
80002134:	f0 1f 00 09 	mcall	80002158 <_malloc_r+0x428>
80002138:	d8 3a       	popm	r0-r7,pc,r12=0
8000213a:	00 00       	add	r0,r0
8000213c:	00 00       	add	r0,r0
8000213e:	06 34       	cp.w	r4,r3
80002140:	00 00       	add	r0,r0
80002142:	05 10       	ld.sh	r0,r2++
80002144:	80 00       	ld.sh	r0,r0[0x0]
80002146:	21 94       	sub	r4,25
80002148:	00 00       	add	r0,r0
8000214a:	06 38       	cp.w	r8,r3
8000214c:	80 00       	ld.sh	r0,r0[0x0]
8000214e:	22 b0       	sub	r0,43
80002150:	00 00       	add	r0,r0
80002152:	06 30       	cp.w	r0,r3
80002154:	00 00       	add	r0,r0
80002156:	06 2c       	rsub	r12,r3
80002158:	80 00       	ld.sh	r0,r0[0x0]
8000215a:	21 90       	sub	r0,25
8000215c:	68 26       	ld.w	r6,r4[0x8]
8000215e:	a1 a8       	sbr	r8,0x0
80002160:	0e 99       	mov	r9,r7
80002162:	a1 a9       	sbr	r9,0x0
80002164:	8d 19       	st.w	r6[0x4],r9
80002166:	ec 07 00 07 	add	r7,r6,r7
8000216a:	0a 9c       	mov	r12,r5
8000216c:	89 27       	st.w	r4[0x8],r7
8000216e:	8f 18       	st.w	r7[0x4],r8
80002170:	f0 1f 00 03 	mcall	8000217c <_malloc_r+0x44c>
80002174:	ec cc ff f8 	sub	r12,r6,-8
80002178:	d8 32       	popm	r0-r7,pc
8000217a:	00 00       	add	r0,r0
8000217c:	80 00       	ld.sh	r0,r0[0x0]
8000217e:	21 90       	sub	r0,25

80002180 <memset>:
80002180:	18 98       	mov	r8,r12
80002182:	c0 38       	rjmp	80002188 <memset+0x8>
80002184:	10 cb       	st.b	r8++,r11
80002186:	20 1a       	sub	r10,1
80002188:	58 0a       	cp.w	r10,0
8000218a:	cf d1       	brne	80002184 <memset+0x4>
8000218c:	5e fc       	retal	r12

8000218e <__malloc_lock>:
8000218e:	5e fc       	retal	r12

80002190 <__malloc_unlock>:
80002190:	5e fc       	retal	r12
80002192:	d7 03       	nop

80002194 <_sbrk_r>:
80002194:	d4 21       	pushm	r4-r7,lr
80002196:	30 08       	mov	r8,0
80002198:	18 97       	mov	r7,r12
8000219a:	48 76       	lddpc	r6,800021b4 <_sbrk_r+0x20>
8000219c:	16 9c       	mov	r12,r11
8000219e:	8d 08       	st.w	r6[0x0],r8
800021a0:	f0 1f 00 06 	mcall	800021b8 <_sbrk_r+0x24>
800021a4:	5b fc       	cp.w	r12,-1
800021a6:	c0 51       	brne	800021b0 <_sbrk_r+0x1c>
800021a8:	6c 08       	ld.w	r8,r6[0x0]
800021aa:	58 08       	cp.w	r8,0
800021ac:	ef f8 1a 03 	st.wne	r7[0xc],r8
800021b0:	d8 22       	popm	r4-r7,pc
800021b2:	00 00       	add	r0,r0
800021b4:	00 00       	add	r0,r0
800021b6:	07 ac       	ld.ub	r12,r3[0x2]
800021b8:	80 00       	ld.sh	r0,r0[0x0]
800021ba:	21 bc       	sub	r12,27

800021bc <_sbrk>:
800021bc:	d4 01       	pushm	lr
800021be:	48 c8       	lddpc	r8,800021ec <_sbrk+0x30>
800021c0:	70 09       	ld.w	r9,r8[0x0]
800021c2:	58 09       	cp.w	r9,0
800021c4:	c0 31       	brne	800021ca <_sbrk+0xe>
800021c6:	48 b9       	lddpc	r9,800021f0 <_sbrk+0x34>
800021c8:	91 09       	st.w	r8[0x0],r9
800021ca:	48 99       	lddpc	r9,800021ec <_sbrk+0x30>
800021cc:	48 aa       	lddpc	r10,800021f4 <_sbrk+0x38>
800021ce:	72 08       	ld.w	r8,r9[0x0]
800021d0:	f0 0c 00 0c 	add	r12,r8,r12
800021d4:	14 3c       	cp.w	r12,r10
800021d6:	e0 8b 00 04 	brhi	800021de <_sbrk+0x22>
800021da:	93 0c       	st.w	r9[0x0],r12
800021dc:	c0 68       	rjmp	800021e8 <_sbrk+0x2c>
800021de:	f0 1f 00 07 	mcall	800021f8 <_sbrk+0x3c>
800021e2:	30 c8       	mov	r8,12
800021e4:	99 08       	st.w	r12[0x0],r8
800021e6:	3f f8       	mov	r8,-1
800021e8:	10 9c       	mov	r12,r8
800021ea:	d8 02       	popm	pc
800021ec:	00 00       	add	r0,r0
800021ee:	06 60       	and	r0,r3
800021f0:	00 00       	add	r0,r0
800021f2:	07 b0       	ld.ub	r0,r3[0x3]
800021f4:	00 00       	add	r0,r0
800021f6:	e0 00       	*unknown*
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	21 fc       	sub	r12,31

800021fc <__errno>:
800021fc:	48 28       	lddpc	r8,80002204 <__errno+0x8>
800021fe:	70 0c       	ld.w	r12,r8[0x0]
80002200:	2f 4c       	sub	r12,-12
80002202:	5e fc       	retal	r12
80002204:	00 00       	add	r0,r0
80002206:	01 00       	ld.w	r0,r0++

80002208 <_malloc_trim_r>:
80002208:	d4 21       	pushm	r4-r7,lr
8000220a:	16 95       	mov	r5,r11
8000220c:	18 97       	mov	r7,r12
8000220e:	f0 1f 00 23 	mcall	80002298 <_malloc_trim_r+0x90>
80002212:	4a 34       	lddpc	r4,8000229c <_malloc_trim_r+0x94>
80002214:	68 28       	ld.w	r8,r4[0x8]
80002216:	70 16       	ld.w	r6,r8[0x4]
80002218:	e0 16 ff fc 	andl	r6,0xfffc
8000221c:	ec c8 ff 91 	sub	r8,r6,-111
80002220:	f0 05 01 05 	sub	r5,r8,r5
80002224:	e0 15 ff 80 	andl	r5,0xff80
80002228:	ea c5 00 80 	sub	r5,r5,128
8000222c:	e0 45 00 7f 	cp.w	r5,127
80002230:	e0 8a 00 23 	brle	80002276 <_malloc_trim_r+0x6e>
80002234:	30 0b       	mov	r11,0
80002236:	0e 9c       	mov	r12,r7
80002238:	f0 1f 00 1a 	mcall	800022a0 <_malloc_trim_r+0x98>
8000223c:	68 28       	ld.w	r8,r4[0x8]
8000223e:	0c 08       	add	r8,r6
80002240:	10 3c       	cp.w	r12,r8
80002242:	c1 a1       	brne	80002276 <_malloc_trim_r+0x6e>
80002244:	ea 0b 11 00 	rsub	r11,r5,0
80002248:	0e 9c       	mov	r12,r7
8000224a:	f0 1f 00 16 	mcall	800022a0 <_malloc_trim_r+0x98>
8000224e:	5b fc       	cp.w	r12,-1
80002250:	c1 71       	brne	8000227e <_malloc_trim_r+0x76>
80002252:	30 0b       	mov	r11,0
80002254:	0e 9c       	mov	r12,r7
80002256:	f0 1f 00 13 	mcall	800022a0 <_malloc_trim_r+0x98>
8000225a:	68 28       	ld.w	r8,r4[0x8]
8000225c:	f8 08 01 09 	sub	r9,r12,r8
80002260:	58 f9       	cp.w	r9,15
80002262:	e0 8a 00 0a 	brle	80002276 <_malloc_trim_r+0x6e>
80002266:	a1 a9       	sbr	r9,0x0
80002268:	91 19       	st.w	r8[0x4],r9
8000226a:	48 f8       	lddpc	r8,800022a4 <_malloc_trim_r+0x9c>
8000226c:	70 09       	ld.w	r9,r8[0x0]
8000226e:	48 f8       	lddpc	r8,800022a8 <_malloc_trim_r+0xa0>
80002270:	f8 09 01 09 	sub	r9,r12,r9
80002274:	91 09       	st.w	r8[0x0],r9
80002276:	0e 9c       	mov	r12,r7
80002278:	f0 1f 00 0d 	mcall	800022ac <_malloc_trim_r+0xa4>
8000227c:	d8 2a       	popm	r4-r7,pc,r12=0
8000227e:	68 28       	ld.w	r8,r4[0x8]
80002280:	0a 16       	sub	r6,r5
80002282:	a1 a6       	sbr	r6,0x0
80002284:	91 16       	st.w	r8[0x4],r6
80002286:	48 98       	lddpc	r8,800022a8 <_malloc_trim_r+0xa0>
80002288:	70 09       	ld.w	r9,r8[0x0]
8000228a:	0a 19       	sub	r9,r5
8000228c:	0e 9c       	mov	r12,r7
8000228e:	91 09       	st.w	r8[0x0],r9
80002290:	f0 1f 00 07 	mcall	800022ac <_malloc_trim_r+0xa4>
80002294:	da 2a       	popm	r4-r7,pc,r12=1
80002296:	00 00       	add	r0,r0
80002298:	80 00       	ld.sh	r0,r0[0x0]
8000229a:	21 8e       	sub	lr,24
8000229c:	00 00       	add	r0,r0
8000229e:	01 04       	ld.w	r4,r0++
800022a0:	80 00       	ld.sh	r0,r0[0x0]
800022a2:	21 94       	sub	r4,25
800022a4:	00 00       	add	r0,r0
800022a6:	05 10       	ld.sh	r0,r2++
800022a8:	00 00       	add	r0,r0
800022aa:	06 38       	cp.w	r8,r3
800022ac:	80 00       	ld.sh	r0,r0[0x0]
800022ae:	21 90       	sub	r0,25

800022b0 <_free_r>:
800022b0:	d4 21       	pushm	r4-r7,lr
800022b2:	16 96       	mov	r6,r11
800022b4:	18 97       	mov	r7,r12
800022b6:	58 0b       	cp.w	r11,0
800022b8:	e0 80 00 c8 	breq	80002448 <_free_r+0x198>
800022bc:	f0 1f 00 4c 	mcall	800023ec <_free_r+0x13c>
800022c0:	20 86       	sub	r6,8
800022c2:	4c ca       	lddpc	r10,800023f0 <_free_r+0x140>
800022c4:	6c 18       	ld.w	r8,r6[0x4]
800022c6:	74 2e       	ld.w	lr,r10[0x8]
800022c8:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800022cc:	a1 c8       	cbr	r8,0x0
800022ce:	ec 08 00 09 	add	r9,r6,r8
800022d2:	72 1b       	ld.w	r11,r9[0x4]
800022d4:	e0 1b ff fc 	andl	r11,0xfffc
800022d8:	1c 39       	cp.w	r9,lr
800022da:	c1 d1       	brne	80002314 <_free_r+0x64>
800022dc:	f6 08 00 08 	add	r8,r11,r8
800022e0:	58 0c       	cp.w	r12,0
800022e2:	c0 81       	brne	800022f2 <_free_r+0x42>
800022e4:	6c 09       	ld.w	r9,r6[0x0]
800022e6:	12 16       	sub	r6,r9
800022e8:	12 08       	add	r8,r9
800022ea:	6c 3b       	ld.w	r11,r6[0xc]
800022ec:	6c 29       	ld.w	r9,r6[0x8]
800022ee:	97 29       	st.w	r11[0x8],r9
800022f0:	93 3b       	st.w	r9[0xc],r11
800022f2:	10 99       	mov	r9,r8
800022f4:	95 26       	st.w	r10[0x8],r6
800022f6:	a1 a9       	sbr	r9,0x0
800022f8:	8d 19       	st.w	r6[0x4],r9
800022fa:	4b f9       	lddpc	r9,800023f4 <_free_r+0x144>
800022fc:	72 09       	ld.w	r9,r9[0x0]
800022fe:	12 38       	cp.w	r8,r9
80002300:	c0 63       	brcs	8000230c <_free_r+0x5c>
80002302:	4b e8       	lddpc	r8,800023f8 <_free_r+0x148>
80002304:	0e 9c       	mov	r12,r7
80002306:	70 0b       	ld.w	r11,r8[0x0]
80002308:	f0 1f 00 3d 	mcall	800023fc <_free_r+0x14c>
8000230c:	0e 9c       	mov	r12,r7
8000230e:	f0 1f 00 3d 	mcall	80002400 <_free_r+0x150>
80002312:	d8 22       	popm	r4-r7,pc
80002314:	93 1b       	st.w	r9[0x4],r11
80002316:	58 0c       	cp.w	r12,0
80002318:	c0 30       	breq	8000231e <_free_r+0x6e>
8000231a:	30 0c       	mov	r12,0
8000231c:	c1 08       	rjmp	8000233c <_free_r+0x8c>
8000231e:	6c 0e       	ld.w	lr,r6[0x0]
80002320:	f4 c5 ff f8 	sub	r5,r10,-8
80002324:	1c 16       	sub	r6,lr
80002326:	1c 08       	add	r8,lr
80002328:	6c 2e       	ld.w	lr,r6[0x8]
8000232a:	0a 3e       	cp.w	lr,r5
8000232c:	f9 bc 00 01 	moveq	r12,1
80002330:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80002334:	eb fe 1a 02 	st.wne	r5[0x8],lr
80002338:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000233c:	f2 0b 00 0e 	add	lr,r9,r11
80002340:	7c 1e       	ld.w	lr,lr[0x4]
80002342:	ed be 00 00 	bld	lr,0x0
80002346:	c1 30       	breq	8000236c <_free_r+0xbc>
80002348:	16 08       	add	r8,r11
8000234a:	58 0c       	cp.w	r12,0
8000234c:	c0 c1       	brne	80002364 <_free_r+0xb4>
8000234e:	4a 9e       	lddpc	lr,800023f0 <_free_r+0x140>
80002350:	72 2b       	ld.w	r11,r9[0x8]
80002352:	2f 8e       	sub	lr,-8
80002354:	1c 3b       	cp.w	r11,lr
80002356:	c0 71       	brne	80002364 <_free_r+0xb4>
80002358:	97 36       	st.w	r11[0xc],r6
8000235a:	97 26       	st.w	r11[0x8],r6
8000235c:	8d 2b       	st.w	r6[0x8],r11
8000235e:	8d 3b       	st.w	r6[0xc],r11
80002360:	30 1c       	mov	r12,1
80002362:	c0 58       	rjmp	8000236c <_free_r+0xbc>
80002364:	72 2b       	ld.w	r11,r9[0x8]
80002366:	72 39       	ld.w	r9,r9[0xc]
80002368:	93 2b       	st.w	r9[0x8],r11
8000236a:	97 39       	st.w	r11[0xc],r9
8000236c:	10 99       	mov	r9,r8
8000236e:	ec 08 09 08 	st.w	r6[r8],r8
80002372:	a1 a9       	sbr	r9,0x0
80002374:	8d 19       	st.w	r6[0x4],r9
80002376:	58 0c       	cp.w	r12,0
80002378:	c6 51       	brne	80002442 <_free_r+0x192>
8000237a:	e0 48 01 ff 	cp.w	r8,511
8000237e:	e0 8b 00 13 	brhi	800023a4 <_free_r+0xf4>
80002382:	a3 98       	lsr	r8,0x3
80002384:	f4 08 00 39 	add	r9,r10,r8<<0x3
80002388:	72 2b       	ld.w	r11,r9[0x8]
8000238a:	8d 39       	st.w	r6[0xc],r9
8000238c:	8d 2b       	st.w	r6[0x8],r11
8000238e:	97 36       	st.w	r11[0xc],r6
80002390:	93 26       	st.w	r9[0x8],r6
80002392:	a3 48       	asr	r8,0x2
80002394:	74 19       	ld.w	r9,r10[0x4]
80002396:	30 1b       	mov	r11,1
80002398:	f6 08 09 48 	lsl	r8,r11,r8
8000239c:	f3 e8 10 08 	or	r8,r9,r8
800023a0:	95 18       	st.w	r10[0x4],r8
800023a2:	c5 08       	rjmp	80002442 <_free_r+0x192>
800023a4:	f0 0b 16 09 	lsr	r11,r8,0x9
800023a8:	58 4b       	cp.w	r11,4
800023aa:	e0 8b 00 06 	brhi	800023b6 <_free_r+0x106>
800023ae:	f0 0b 16 06 	lsr	r11,r8,0x6
800023b2:	2c 8b       	sub	r11,-56
800023b4:	c2 b8       	rjmp	8000240a <_free_r+0x15a>
800023b6:	59 4b       	cp.w	r11,20
800023b8:	e0 8b 00 04 	brhi	800023c0 <_free_r+0x110>
800023bc:	2a 5b       	sub	r11,-91
800023be:	c2 68       	rjmp	8000240a <_free_r+0x15a>
800023c0:	e0 4b 00 54 	cp.w	r11,84
800023c4:	e0 8b 00 06 	brhi	800023d0 <_free_r+0x120>
800023c8:	f0 0b 16 0c 	lsr	r11,r8,0xc
800023cc:	29 2b       	sub	r11,-110
800023ce:	c1 e8       	rjmp	8000240a <_free_r+0x15a>
800023d0:	e0 4b 01 54 	cp.w	r11,340
800023d4:	e0 8b 00 06 	brhi	800023e0 <_free_r+0x130>
800023d8:	f0 0b 16 0f 	lsr	r11,r8,0xf
800023dc:	28 9b       	sub	r11,-119
800023de:	c1 68       	rjmp	8000240a <_free_r+0x15a>
800023e0:	e0 4b 05 54 	cp.w	r11,1364
800023e4:	e0 88 00 10 	brls	80002404 <_free_r+0x154>
800023e8:	37 eb       	mov	r11,126
800023ea:	c1 08       	rjmp	8000240a <_free_r+0x15a>
800023ec:	80 00       	ld.sh	r0,r0[0x0]
800023ee:	21 8e       	sub	lr,24
800023f0:	00 00       	add	r0,r0
800023f2:	01 04       	ld.w	r4,r0++
800023f4:	00 00       	add	r0,r0
800023f6:	05 0c       	ld.w	r12,r2++
800023f8:	00 00       	add	r0,r0
800023fa:	06 34       	cp.w	r4,r3
800023fc:	80 00       	ld.sh	r0,r0[0x0]
800023fe:	22 08       	sub	r8,32
80002400:	80 00       	ld.sh	r0,r0[0x0]
80002402:	21 90       	sub	r0,25
80002404:	f0 0b 16 12 	lsr	r11,r8,0x12
80002408:	28 4b       	sub	r11,-124
8000240a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000240e:	78 29       	ld.w	r9,r12[0x8]
80002410:	18 39       	cp.w	r9,r12
80002412:	c0 e1       	brne	8000242e <_free_r+0x17e>
80002414:	74 18       	ld.w	r8,r10[0x4]
80002416:	a3 4b       	asr	r11,0x2
80002418:	30 1c       	mov	r12,1
8000241a:	f8 0b 09 4b 	lsl	r11,r12,r11
8000241e:	f1 eb 10 0b 	or	r11,r8,r11
80002422:	12 98       	mov	r8,r9
80002424:	95 1b       	st.w	r10[0x4],r11
80002426:	c0 a8       	rjmp	8000243a <_free_r+0x18a>
80002428:	72 29       	ld.w	r9,r9[0x8]
8000242a:	18 39       	cp.w	r9,r12
8000242c:	c0 60       	breq	80002438 <_free_r+0x188>
8000242e:	72 1a       	ld.w	r10,r9[0x4]
80002430:	e0 1a ff fc 	andl	r10,0xfffc
80002434:	14 38       	cp.w	r8,r10
80002436:	cf 93       	brcs	80002428 <_free_r+0x178>
80002438:	72 38       	ld.w	r8,r9[0xc]
8000243a:	8d 38       	st.w	r6[0xc],r8
8000243c:	8d 29       	st.w	r6[0x8],r9
8000243e:	93 36       	st.w	r9[0xc],r6
80002440:	91 26       	st.w	r8[0x8],r6
80002442:	0e 9c       	mov	r12,r7
80002444:	f0 1f 00 02 	mcall	8000244c <_free_r+0x19c>
80002448:	d8 22       	popm	r4-r7,pc
8000244a:	00 00       	add	r0,r0
8000244c:	80 00       	ld.sh	r0,r0[0x0]
8000244e:	21 90       	sub	r0,25

Disassembly of section .exception:

80002600 <_evba>:
	...

80002628 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80002628:	c7 a8       	rjmp	8000271c <privilegedCalls>
	...

80002700 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80002700:	1c 9f       	mov	pc,lr

80002702 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80002702:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80002706:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
8000270a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
8000270e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80002712:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80002714:	c0 31       	brne	8000271a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80002716:	4b 9c       	lddpc	r12,800027f8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80002718:	18 9f       	mov	pc,r12

8000271a <_int0_exit>:
_int0_exit:
	rete
8000271a:	d6 03       	rete

8000271c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
8000271c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
8000271e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80002720:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80002722:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80002724:	9b 3c       	st.w	sp[0xc],r12

80002726 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80002726:	4b 6c       	lddpc	r12,800027fc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80002728:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
8000272a:	c0 61       	brne	80002736 <priv_interruptenable>
	ld.w r12,sp[USERSR]
8000272c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
8000272e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80002730:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002732:	d3 02       	popm	r11-r12
	rete
80002734:	d6 03       	rete

80002736 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80002736:	4b 3c       	lddpc	r12,80002800 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80002738:	18 3b       	cp.w	r11,r12
	brne privexception
8000273a:	c0 61       	brne	80002746 <privexception>
	ld.w r12,sp[USERSR]
8000273c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
8000273e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80002740:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002742:	d3 02       	popm	r11-r12
	rete
80002744:	d6 03       	rete

80002746 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80002746:	c0 08       	rjmp	80002746 <privexception>

80002748 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80002748:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
8000274a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
8000274e:	4a ec       	lddpc	r12,80002804 <contextRestoreFromISR+0x4c>
	sub r11,r12
80002750:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80002752:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80002754:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80002758:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
8000275c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80002760:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80002762:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80002764:	1c 9f       	mov	pc,lr

80002766 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80002766:	d3 03       	ssrf	0x10
	mov pc,lr
80002768:	1c 9f       	mov	pc,lr

8000276a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
8000276a:	d5 03       	csrf	0x10
	mov pc,lr
8000276c:	1c 9f       	mov	pc,lr

8000276e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
8000276e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80002772:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80002774:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80002778:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
8000277c:	1c 9f       	mov	pc,lr

8000277e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000277e:	4a 3c       	lddpc	r12,80002808 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80002780:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80002782:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80002784:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80002786:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80002788:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
8000278a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
8000278c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
8000278e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80002790:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80002792:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80002794:	33 40       	mov	r0,52
	add r0,r12
80002796:	18 00       	add	r0,r12
	stmts r0,r0-r11
80002798:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
8000279c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
8000279e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
800027a2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
800027a4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
800027a6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
800027a8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
800027aa:	1a 90       	mov	r0,sp
	st.w --sp,r0
800027ac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800027ae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
800027b2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
800027b4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
800027b6:	1c 9f       	mov	pc,lr

800027b8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800027b8:	49 4c       	lddpc	r12,80002808 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
800027ba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
800027bc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800027be:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800027c0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
800027c4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
800027c6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
800027c8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800027ca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
800027cc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800027ce:	33 40       	mov	r0,52
	add r0,r12
800027d0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800027d2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800027d6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
800027d8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
800027da:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
800027dc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
800027de:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
800027e0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
800027e2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
800027e4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
800027e6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
800027e8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800027ea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
800027ec:	d4 01       	pushm	lr
	call timerStart
800027ee:	f0 1f 00 08 	mcall	8000280c <contextRestoreFromISR+0x54>
	popm lr
800027f2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
800027f4:	1c 9f       	mov	pc,lr
800027f6:	00 00       	add	r0,r0
800027f8:	80 00       	ld.sh	r0,r0[0x0]
800027fa:	0f 54       	ld.sh	r4,--r7
800027fc:	80 00       	ld.sh	r0,r0[0x0]
800027fe:	27 66       	sub	r6,118
80002800:	80 00       	ld.sh	r0,r0[0x0]
80002802:	27 6a       	sub	r10,118
80002804:	80 00       	ld.sh	r0,r0[0x0]
80002806:	26 00       	sub	r0,96
80002808:	00 00       	add	r0,r0
8000280a:	07 28       	ld.uh	r8,r3++
8000280c:	80 00       	ld.sh	r0,r0[0x0]
8000280e:	1b 96       	ld.ub	r6,sp[0x1]
	...
