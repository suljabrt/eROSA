
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000018c0  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001a00  80001a00  00001e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80001e00  80001e00  00002200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80001e84  80001e84  00002284  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80001e88  00002408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002394  00002914  2**0
                  ALLOC
  9 .bss          00000288  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000d860  000007a0  000007a0  00000000  2**0
                  ALLOC
 11 .comment      000000a0  00000000  00000000  00002914  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000568  00000000  00000000  000029b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 000009d8  00000000  00000000  00002f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000b36e  00000000  00000000  000038f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00001d73  00000000  00000000  0000ec66  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000423b  00000000  00000000  000109d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000bec  00000000  00000000  00014c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001c5a  00000000  00000000  00015800  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000183e  00000000  00000000  0001745a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00534577  00000000  00000000  00018c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 000004c8  00000000  00000000  0054d20f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	11 20       	ld.uh	r0,r8++

Disassembly of section .text:

80000008 <usart_options>:
80000008:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 31     ............tsk1
80000018:	00 00 00 00 74 73 6b 32 00 00 00 00                 ....tsk2....

80000024 <task1>:
ROSA_taskHandle_t task2_handle=NULL;

void task2 (void);

void task1(void)
{
80000024:	eb cd 40 80 	pushm	r7,lr
80000028:	1a 97       	mov	r7,sp
	while(1) {
		ledToggle(LED0_GPIO);
8000002a:	33 bc       	mov	r12,59
8000002c:	f0 1f 00 04 	mcall	8000003c <task1+0x18>
		//ROSA_taskCreate(&task2_handle, "tsk2", task2, 0x40, 2);
		ROSA_delay(1000);
80000030:	e0 6a 03 e8 	mov	r10,1000
80000034:	30 0b       	mov	r11,0
80000036:	f0 1f 00 03 	mcall	80000040 <task1+0x1c>
	}
8000003a:	cf 8b       	rjmp	8000002a <task1+0x6>
8000003c:	80 00       	ld.sh	r0,r0[0x0]
8000003e:	0c c4       	st.b	r6++,r4
80000040:	80 00       	ld.sh	r0,r0[0x0]
80000042:	06 9c       	mov	r12,r3

80000044 <task2>:
}


void task2(void)
{
80000044:	eb cd 40 80 	pushm	r7,lr
80000048:	1a 97       	mov	r7,sp
	while(1) {
		ledToggle(LED1_GPIO);
8000004a:	33 cc       	mov	r12,60
8000004c:	f0 1f 00 04 	mcall	8000005c <task2+0x18>
		//ROSA_taskCreate(&task1_handle, "tsk1", task1, 0x40, 2);
		ROSA_delay(1000);
80000050:	e0 6a 03 e8 	mov	r10,1000
80000054:	30 0b       	mov	r11,0
80000056:	f0 1f 00 03 	mcall	80000060 <task2+0x1c>
	}
8000005a:	cf 8b       	rjmp	8000004a <task2+0x6>
8000005c:	80 00       	ld.sh	r0,r0[0x0]
8000005e:	0c c4       	st.b	r6++,r4
80000060:	80 00       	ld.sh	r0,r0[0x0]
80000062:	06 9c       	mov	r12,r3

80000064 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
80000064:	eb cd 40 80 	pushm	r7,lr
80000068:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
8000006a:	f0 1f 00 0a 	mcall	80000090 <main+0x2c>
	
	ROSA_taskCreate(&task1_handle, "tsk1", task1, 0x40, 2);
8000006e:	30 28       	mov	r8,2
80000070:	34 09       	mov	r9,64
80000072:	48 9a       	lddpc	r10,80000094 <main+0x30>
80000074:	48 9b       	lddpc	r11,80000098 <main+0x34>
80000076:	48 ac       	lddpc	r12,8000009c <main+0x38>
80000078:	f0 1f 00 0a 	mcall	800000a0 <main+0x3c>
	ROSA_taskCreate(&task2_handle, "tsk2", task2, 0x40, 2);	
8000007c:	30 28       	mov	r8,2
8000007e:	34 09       	mov	r9,64
80000080:	48 9a       	lddpc	r10,800000a4 <main+0x40>
80000082:	48 ab       	lddpc	r11,800000a8 <main+0x44>
80000084:	48 ac       	lddpc	r12,800000ac <main+0x48>
80000086:	f0 1f 00 07 	mcall	800000a0 <main+0x3c>
	
	//Start the timer
	//timerStart();
	
	ROSA_start();
8000008a:	f0 1f 00 0a 	mcall	800000b0 <main+0x4c>
	/* Execution will never return here */
	while(1);
8000008e:	c0 08       	rjmp	8000008e <main+0x2a>
80000090:	80 00       	ld.sh	r0,r0[0x0]
80000092:	03 8c       	ld.ub	r12,r1[0x0]
80000094:	80 00       	ld.sh	r0,r0[0x0]
80000096:	00 24       	rsub	r4,r0
80000098:	80 00       	ld.sh	r0,r0[0x0]
8000009a:	00 14       	sub	r4,r0
8000009c:	00 00       	add	r0,r0
8000009e:	05 18       	ld.sh	r8,r2++
800000a0:	80 00       	ld.sh	r0,r0[0x0]
800000a2:	05 48       	ld.w	r8,--r2
800000a4:	80 00       	ld.sh	r0,r0[0x0]
800000a6:	00 44       	or	r4,r0
800000a8:	80 00       	ld.sh	r0,r0[0x0]
800000aa:	00 1c       	sub	r12,r0
800000ac:	00 00       	add	r0,r0
800000ae:	05 1c       	ld.sh	r12,r2++
800000b0:	80 00       	ld.sh	r0,r0[0x0]
800000b2:	07 f0       	ld.ub	r0,r3[0x7]

800000b4 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
800000b4:	eb cd 40 80 	pushm	r7,lr
800000b8:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
800000ba:	f0 1f 00 05 	mcall	800000cc <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
800000be:	f0 1f 00 05 	mcall	800000d0 <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it
800000c2:	f0 1f 00 05 	mcall	800000d4 <ROSA_yieldFromISR+0x20>
}
800000c6:	e3 cd 80 80 	ldm	sp++,r7,pc
800000ca:	00 00       	add	r0,r0
800000cc:	80 00       	ld.sh	r0,r0[0x0]
800000ce:	1b 7e       	ld.ub	lr,--sp
800000d0:	80 00       	ld.sh	r0,r0[0x0]
800000d2:	08 d0       	st.w	--r4,r0
800000d4:	80 00       	ld.sh	r0,r0[0x0]
800000d6:	1b b8       	ld.ub	r8,sp[0x3]

800000d8 <usart_options>:
800000d8:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
800000e8:	00 00 00 00 64 6c 61 79 00 00 00 00 55 53 41 52     ....dlay....USAR
800000f8:	54 20 69 6e 69 74 69 61 6c 69 7a 65 64 0d 0a 00     T initialized...

80000108 <idle>:

/** @fn void idle(void)
	@brief Idle task body.
*/
void idle(void)
{
80000108:	eb cd 40 80 	pushm	r7,lr
8000010c:	1a 97       	mov	r7,sp
	while(1);
8000010e:	c0 08       	rjmp	8000010e <idle+0x6>

80000110 <ROSA_tcbInstall>:
 * Comment:
 * 	Install the TCB into the TCBLIST.
 *
 **********************************************************/
void ROSA_tcbInstall(tcb * tcbTask)
{
80000110:	eb cd 40 80 	pushm	r7,lr
80000114:	1a 97       	mov	r7,sp
80000116:	20 1d       	sub	sp,4
80000118:	ef 4c ff fc 	st.w	r7[-4],r12
	/* Is this the first tcb installed? */
	if(TCBLIST == NULL)
8000011c:	49 38       	lddpc	r8,80000168 <ROSA_tcbInstall+0x58>
8000011e:	70 08       	ld.w	r8,r8[0x0]
80000120:	58 08       	cp.w	r8,0
80000122:	c1 01       	brne	80000142 <ROSA_tcbInstall+0x32>
	{
		TCBLIST = tcbTask;
80000124:	49 18       	lddpc	r8,80000168 <ROSA_tcbInstall+0x58>
80000126:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000012a:	91 09       	st.w	r8[0x0],r9
		TCBLIST->nexttcb = tcbTask;			//Install the first tcb
8000012c:	48 f8       	lddpc	r8,80000168 <ROSA_tcbInstall+0x58>
8000012e:	70 08       	ld.w	r8,r8[0x0]
80000130:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000134:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
80000136:	48 d8       	lddpc	r8,80000168 <ROSA_tcbInstall+0x58>
80000138:	70 09       	ld.w	r9,r8[0x0]
8000013a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000013e:	91 09       	st.w	r8[0x0],r9
80000140:	c1 08       	rjmp	80000160 <ROSA_tcbInstall+0x50>
	}
	else
	{
		tcbTask->nexttcb = TCBLIST->nexttcb;
80000142:	48 a8       	lddpc	r8,80000168 <ROSA_tcbInstall+0x58>
80000144:	70 08       	ld.w	r8,r8[0x0]
80000146:	70 09       	ld.w	r9,r8[0x0]
80000148:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000014c:	91 09       	st.w	r8[0x0],r9
		TCBLIST->nexttcb = tcbTask;
8000014e:	48 78       	lddpc	r8,80000168 <ROSA_tcbInstall+0x58>
80000150:	70 08       	ld.w	r8,r8[0x0]
80000152:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000156:	91 09       	st.w	r8[0x0],r9
		TCBLIST = tcbTask;
80000158:	48 48       	lddpc	r8,80000168 <ROSA_tcbInstall+0x58>
8000015a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000015e:	91 09       	st.w	r8[0x0],r9
	}
}
80000160:	2f fd       	sub	sp,-4
80000162:	e3 cd 80 80 	ldm	sp++,r7,pc
80000166:	00 00       	add	r0,r0
80000168:	00 00       	add	r0,r0
8000016a:	06 64       	and	r4,r3

8000016c <ROSA_tcbUninstall>:

void ROSA_tcbUninstall(tcb * tcbTask)
{
8000016c:	eb cd 40 80 	pushm	r7,lr
80000170:	1a 97       	mov	r7,sp
80000172:	20 1d       	sub	sp,4
80000174:	ef 4c ff fc 	st.w	r7[-4],r12
	while (TCBLIST->nexttcb != tcbTask)
80000178:	c0 68       	rjmp	80000184 <ROSA_tcbUninstall+0x18>
	{
		TCBLIST = TCBLIST->nexttcb;
8000017a:	49 88       	lddpc	r8,800001d8 <ROSA_tcbUninstall+0x6c>
8000017c:	70 08       	ld.w	r8,r8[0x0]
8000017e:	70 09       	ld.w	r9,r8[0x0]
80000180:	49 68       	lddpc	r8,800001d8 <ROSA_tcbUninstall+0x6c>
80000182:	91 09       	st.w	r8[0x0],r9
	}
}

void ROSA_tcbUninstall(tcb * tcbTask)
{
	while (TCBLIST->nexttcb != tcbTask)
80000184:	49 58       	lddpc	r8,800001d8 <ROSA_tcbUninstall+0x6c>
80000186:	70 08       	ld.w	r8,r8[0x0]
80000188:	70 09       	ld.w	r9,r8[0x0]
8000018a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000018e:	10 39       	cp.w	r9,r8
80000190:	cf 51       	brne	8000017a <ROSA_tcbUninstall+0xe>
	{
		TCBLIST = TCBLIST->nexttcb;
	}
	
	TCBLIST->nexttcb = tcbTask->nexttcb;
80000192:	49 28       	lddpc	r8,800001d8 <ROSA_tcbUninstall+0x6c>
80000194:	70 08       	ld.w	r8,r8[0x0]
80000196:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000019a:	72 09       	ld.w	r9,r9[0x0]
8000019c:	91 09       	st.w	r8[0x0],r9
	tcbTask->nexttcb = NULL;
8000019e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001a2:	30 09       	mov	r9,0
800001a4:	91 09       	st.w	r8[0x0],r9
	
	if (tcbTask->delay)	
800001a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001aa:	f0 e8 00 68 	ld.d	r8,r8[104]
800001ae:	58 08       	cp.w	r8,0
800001b0:	5c 29       	cpc	r9
800001b2:	c0 70       	breq	800001c0 <ROSA_tcbUninstall+0x54>
	{
		TCBLIST = TCBLIST->nexttcb;
800001b4:	48 98       	lddpc	r8,800001d8 <ROSA_tcbUninstall+0x6c>
800001b6:	70 08       	ld.w	r8,r8[0x0]
800001b8:	70 09       	ld.w	r9,r8[0x0]
800001ba:	48 88       	lddpc	r8,800001d8 <ROSA_tcbUninstall+0x6c>
800001bc:	91 09       	st.w	r8[0x0],r9
800001be:	c0 a8       	rjmp	800001d2 <ROSA_tcbUninstall+0x66>
	}
	else if (TCBLIST == tcbTask)
800001c0:	48 68       	lddpc	r8,800001d8 <ROSA_tcbUninstall+0x6c>
800001c2:	70 09       	ld.w	r9,r8[0x0]
800001c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001c8:	10 39       	cp.w	r9,r8
800001ca:	c0 41       	brne	800001d2 <ROSA_tcbUninstall+0x66>
	{
		TCBLIST = NULL;	
800001cc:	48 38       	lddpc	r8,800001d8 <ROSA_tcbUninstall+0x6c>
800001ce:	30 09       	mov	r9,0
800001d0:	91 09       	st.w	r8[0x0],r9
	}
}
800001d2:	2f fd       	sub	sp,-4
800001d4:	e3 cd 80 80 	ldm	sp++,r7,pc
800001d8:	00 00       	add	r0,r0
800001da:	06 64       	and	r4,r3

800001dc <readyQueueSearch>:
/** @fn int readyQueueSearch(void)
	@brief Search for the first non-empty highest priority queue.
	@return Pointer to the last tcb in the queue (in other words - PA[i]).
*/
tcb * readyQueueSearch(void)
{
800001dc:	eb cd 40 80 	pushm	r7,lr
800001e0:	1a 97       	mov	r7,sp
800001e2:	20 2d       	sub	sp,8
	int i = MAXNPRIO;
800001e4:	30 c8       	mov	r8,12
800001e6:	ef 48 ff f8 	st.w	r7[-8],r8
	tcb * retval;
		
	interruptDisable();
800001ea:	f0 1f 00 1a 	mcall	80000250 <readyQueueSearch+0x74>
	/* Search for the first non-empty queue. */
	while ( (PA[--i] == NULL) && (i > 0));
800001ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001f2:	20 18       	sub	r8,1
800001f4:	ef 48 ff f8 	st.w	r7[-8],r8
800001f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800001fc:	49 68       	lddpc	r8,80000254 <readyQueueSearch+0x78>
800001fe:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000202:	58 08       	cp.w	r8,0
80000204:	c0 61       	brne	80000210 <readyQueueSearch+0x34>
80000206:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000020a:	58 08       	cp.w	r8,0
8000020c:	fe 99 ff f1 	brgt	800001ee <readyQueueSearch+0x12>
	
	if ((i == 0) && (PA[i] == NULL))
80000210:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000214:	58 08       	cp.w	r8,0
80000216:	c0 d1       	brne	80000230 <readyQueueSearch+0x54>
80000218:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000021c:	48 e8       	lddpc	r8,80000254 <readyQueueSearch+0x78>
8000021e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000222:	58 08       	cp.w	r8,0
80000224:	c0 61       	brne	80000230 <readyQueueSearch+0x54>
	{
		retval = IDLETASK;
80000226:	48 d8       	lddpc	r8,80000258 <readyQueueSearch+0x7c>
80000228:	70 08       	ld.w	r8,r8[0x0]
8000022a:	ef 48 ff fc 	st.w	r7[-4],r8
		
	interruptDisable();
	/* Search for the first non-empty queue. */
	while ( (PA[--i] == NULL) && (i > 0));
	
	if ((i == 0) && (PA[i] == NULL))
8000022e:	c0 88       	rjmp	8000023e <readyQueueSearch+0x62>
	{
		retval = IDLETASK;
	}
	else
	{
		retval = PA[i];
80000230:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000234:	48 88       	lddpc	r8,80000254 <readyQueueSearch+0x78>
80000236:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000023a:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	interruptEnable();
8000023e:	f0 1f 00 08 	mcall	8000025c <readyQueueSearch+0x80>
	
	return retval;
80000242:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80000246:	10 9c       	mov	r12,r8
80000248:	2f ed       	sub	sp,-8
8000024a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000024e:	00 00       	add	r0,r0
80000250:	80 00       	ld.sh	r0,r0[0x0]
80000252:	1b 66       	ld.uh	r6,--sp
80000254:	00 00       	add	r0,r0
80000256:	06 68       	and	r8,r3
80000258:	00 00       	add	r0,r0
8000025a:	06 60       	and	r0,r3
8000025c:	80 00       	ld.sh	r0,r0[0x0]
8000025e:	1b 6a       	ld.uh	r10,--sp

80000260 <dlay>:

void dlay()
{
80000260:	eb cd 40 80 	pushm	r7,lr
80000264:	1a 97       	mov	r7,sp
80000266:	20 1d       	sub	sp,4
	tcb * tmp;
	
	while (1)
	{	
		interruptDisable();
80000268:	f0 1f 00 26 	mcall	80000300 <dlay+0xa0>
			
		while ((DQ) && (DQ->delay <= systemTick))
8000026c:	c3 08       	rjmp	800002cc <dlay+0x6c>
		{	
			tmp = DQ;
8000026e:	4a 68       	lddpc	r8,80000304 <dlay+0xa4>
80000270:	70 08       	ld.w	r8,r8[0x0]
80000272:	ef 48 ff fc 	st.w	r7[-4],r8

			ROSA_TM_ACTION(DQ, DQ, Uninstall);
80000276:	4a 48       	lddpc	r8,80000304 <dlay+0xa4>
80000278:	70 09       	ld.w	r9,r8[0x0]
8000027a:	4a 48       	lddpc	r8,80000308 <dlay+0xa8>
8000027c:	91 09       	st.w	r8[0x0],r9
8000027e:	4a 28       	lddpc	r8,80000304 <dlay+0xa4>
80000280:	70 08       	ld.w	r8,r8[0x0]
80000282:	10 9c       	mov	r12,r8
80000284:	f0 1f 00 22 	mcall	8000030c <dlay+0xac>
80000288:	4a 08       	lddpc	r8,80000308 <dlay+0xa8>
8000028a:	70 09       	ld.w	r9,r8[0x0]
8000028c:	49 e8       	lddpc	r8,80000304 <dlay+0xa4>
8000028e:	91 09       	st.w	r8[0x0],r9
		
			tmp->delay = 0;
80000290:	ee fa ff fc 	ld.w	r10,r7[-4]
80000294:	30 08       	mov	r8,0
80000296:	30 09       	mov	r9,0
80000298:	f4 e9 00 68 	st.d	r10[104],r8
			ROSA_TM_ACTION(PA[tmp->priority], tmp, Install);
8000029c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002a0:	f1 38 00 64 	ld.ub	r8,r8[100]
800002a4:	10 99       	mov	r9,r8
800002a6:	49 b8       	lddpc	r8,80000310 <dlay+0xb0>
800002a8:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800002ac:	49 78       	lddpc	r8,80000308 <dlay+0xa8>
800002ae:	91 09       	st.w	r8[0x0],r9
800002b0:	ee fc ff fc 	ld.w	r12,r7[-4]
800002b4:	f0 1f 00 18 	mcall	80000314 <dlay+0xb4>
800002b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002bc:	f1 38 00 64 	ld.ub	r8,r8[100]
800002c0:	10 99       	mov	r9,r8
800002c2:	49 28       	lddpc	r8,80000308 <dlay+0xa8>
800002c4:	70 0a       	ld.w	r10,r8[0x0]
800002c6:	49 38       	lddpc	r8,80000310 <dlay+0xb0>
800002c8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	
	while (1)
	{	
		interruptDisable();
			
		while ((DQ) && (DQ->delay <= systemTick))
800002cc:	48 e8       	lddpc	r8,80000304 <dlay+0xa4>
800002ce:	70 08       	ld.w	r8,r8[0x0]
800002d0:	58 08       	cp.w	r8,0
800002d2:	c0 d0       	breq	800002ec <dlay+0x8c>
800002d4:	48 c8       	lddpc	r8,80000304 <dlay+0xa4>
800002d6:	70 08       	ld.w	r8,r8[0x0]
800002d8:	f0 ea 00 68 	ld.d	r10,r8[104]
800002dc:	48 f8       	lddpc	r8,80000318 <dlay+0xb8>
800002de:	f0 e8 00 00 	ld.d	r8,r8[0]
800002e2:	10 3a       	cp.w	r10,r8
800002e4:	f2 0b 13 00 	cpc	r11,r9
800002e8:	fe 98 ff c3 	brls	8000026e <dlay+0xe>
		
			tmp->delay = 0;
			ROSA_TM_ACTION(PA[tmp->priority], tmp, Install);
		}

		PREEMPTASK = readyQueueSearch();
800002ec:	f0 1f 00 0c 	mcall	8000031c <dlay+0xbc>
800002f0:	18 99       	mov	r9,r12
800002f2:	48 c8       	lddpc	r8,80000320 <dlay+0xc0>
800002f4:	91 09       	st.w	r8[0x0],r9
		
		interruptEnable();
800002f6:	f0 1f 00 0c 	mcall	80000324 <dlay+0xc4>
		
		ROSA_yield();
800002fa:	f0 1f 00 0c 	mcall	80000328 <dlay+0xc8>
	}
800002fe:	cb 5b       	rjmp	80000268 <dlay+0x8>
80000300:	80 00       	ld.sh	r0,r0[0x0]
80000302:	1b 66       	ld.uh	r6,--sp
80000304:	00 00       	add	r0,r0
80000306:	07 18       	ld.sh	r8,r3++
80000308:	00 00       	add	r0,r0
8000030a:	06 64       	and	r4,r3
8000030c:	80 00       	ld.sh	r0,r0[0x0]
8000030e:	01 6c       	ld.uh	r12,--r0
80000310:	00 00       	add	r0,r0
80000312:	06 68       	and	r8,r3
80000314:	80 00       	ld.sh	r0,r0[0x0]
80000316:	01 10       	ld.sh	r0,r0++
80000318:	00 00       	add	r0,r0
8000031a:	07 90       	ld.ub	r0,r3[0x1]
8000031c:	80 00       	ld.sh	r0,r0[0x0]
8000031e:	01 dc       	ld.ub	r12,r0[0x5]
80000320:	00 00       	add	r0,r0
80000322:	06 9c       	mov	r12,r3
80000324:	80 00       	ld.sh	r0,r0[0x0]
80000326:	1b 6a       	ld.uh	r10,--sp
80000328:	80 00       	ld.sh	r0,r0[0x0]
8000032a:	08 b2       	st.h	r4++,r2

8000032c <sysTasksCreate>:

/** @fn void idleCreate(void)
	@brief Creation of the idle task.
*/
void sysTasksCreate(void)
{
8000032c:	eb cd 40 80 	pushm	r7,lr
80000330:	1a 97       	mov	r7,sp
	ROSA_tcbCreate(&IDLETASK_TCB, "idle", idle, idle_stack, SYS_TASK_STACK_SIZE);
80000332:	32 08       	mov	r8,32
80000334:	48 b9       	lddpc	r9,80000360 <sysTasksCreate+0x34>
80000336:	48 ca       	lddpc	r10,80000364 <sysTasksCreate+0x38>
80000338:	48 cb       	lddpc	r11,80000368 <sysTasksCreate+0x3c>
8000033a:	48 dc       	lddpc	r12,8000036c <sysTasksCreate+0x40>
8000033c:	f0 1f 00 0d 	mcall	80000370 <sysTasksCreate+0x44>
	IDLETASK = &IDLETASK_TCB;
80000340:	48 d8       	lddpc	r8,80000374 <sysTasksCreate+0x48>
80000342:	48 b9       	lddpc	r9,8000036c <sysTasksCreate+0x40>
80000344:	91 09       	st.w	r8[0x0],r9
	
	ROSA_tcbCreate(&DELHANDL_TCB, "dlay", dlay, dlay_stack, SYS_TASK_STACK_SIZE);
80000346:	32 08       	mov	r8,32
80000348:	48 c9       	lddpc	r9,80000378 <sysTasksCreate+0x4c>
8000034a:	48 da       	lddpc	r10,8000037c <sysTasksCreate+0x50>
8000034c:	48 db       	lddpc	r11,80000380 <sysTasksCreate+0x54>
8000034e:	48 ec       	lddpc	r12,80000384 <sysTasksCreate+0x58>
80000350:	f0 1f 00 08 	mcall	80000370 <sysTasksCreate+0x44>
	DELHANDL = &DELHANDL_TCB;
80000354:	48 d8       	lddpc	r8,80000388 <sysTasksCreate+0x5c>
80000356:	48 c9       	lddpc	r9,80000384 <sysTasksCreate+0x58>
80000358:	91 09       	st.w	r8[0x0],r9
}
8000035a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000035e:	00 00       	add	r0,r0
80000360:	00 00       	add	r0,r0
80000362:	05 24       	ld.uh	r4,r2++
80000364:	80 00       	ld.sh	r0,r0[0x0]
80000366:	01 08       	ld.w	r8,r0++
80000368:	80 00       	ld.sh	r0,r0[0x0]
8000036a:	00 e4       	st.h	--r0,r4
8000036c:	00 00       	add	r0,r0
8000036e:	07 1c       	ld.sh	r12,r3++
80000370:	80 00       	ld.sh	r0,r0[0x0]
80000372:	04 94       	mov	r4,r2
80000374:	00 00       	add	r0,r0
80000376:	06 60       	and	r0,r3
80000378:	00 00       	add	r0,r0
8000037a:	05 a4       	ld.ub	r4,r2[0x2]
8000037c:	80 00       	ld.sh	r0,r0[0x0]
8000037e:	02 60       	and	r0,r1
80000380:	80 00       	ld.sh	r0,r0[0x0]
80000382:	00 ec       	st.h	--r0,r12
80000384:	00 00       	add	r0,r0
80000386:	06 a0       	st.w	r3++,r0
80000388:	00 00       	add	r0,r0
8000038a:	06 98       	mov	r8,r3

8000038c <ROSA_init>:

void ROSA_init(void)
{
8000038c:	eb cd 40 80 	pushm	r7,lr
80000390:	1a 97       	mov	r7,sp
80000392:	20 1d       	sub	sp,4
	int i = 0;
80000394:	30 08       	mov	r8,0
80000396:	ef 48 ff fc 	st.w	r7[-4],r8
	systemTick = 0;
8000039a:	4a aa       	lddpc	r10,80000440 <ROSA_init+0xb4>
8000039c:	30 08       	mov	r8,0
8000039e:	30 09       	mov	r9,0
800003a0:	f4 e9 00 00 	st.d	r10[0],r8
	
	if (ROSA_init_GUARD == 0)
800003a4:	4a 88       	lddpc	r8,80000444 <ROSA_init+0xb8>
800003a6:	70 08       	ld.w	r8,r8[0x0]
800003a8:	58 08       	cp.w	r8,0
800003aa:	c4 51       	brne	80000434 <ROSA_init+0xa8>
	{
		//Do initialization of I/O drivers
		ledInit();									//LEDs
800003ac:	f0 1f 00 27 	mcall	80000448 <ROSA_init+0xbc>
		buttonInit();								//Buttons
800003b0:	f0 1f 00 27 	mcall	8000044c <ROSA_init+0xc0>
		joystickInit();								//Joystick
800003b4:	f0 1f 00 27 	mcall	80000450 <ROSA_init+0xc4>
		potInit();									//Potentiometer
800003b8:	f0 1f 00 27 	mcall	80000454 <ROSA_init+0xc8>
		usartInit(USART, &usart_options, FOSC0);	//Serial communication
800003bc:	e0 6a 1b 00 	mov	r10,6912
800003c0:	ea 1a 00 b7 	orh	r10,0xb7
800003c4:	4a 5b       	lddpc	r11,80000458 <ROSA_init+0xcc>
800003c6:	fe 7c 14 00 	mov	r12,-60416
800003ca:	f0 1f 00 25 	mcall	8000045c <ROSA_init+0xd0>
		usartWriteLine(USART, "USART initialized\r\n");
800003ce:	4a 5b       	lddpc	r11,80000460 <ROSA_init+0xd4>
800003d0:	fe 7c 14 00 	mov	r12,-60416
800003d4:	f0 1f 00 24 	mcall	80000464 <ROSA_init+0xd8>

		interruptInit();
800003d8:	f0 1f 00 24 	mcall	80000468 <ROSA_init+0xdc>
		interruptEnable();
800003dc:	f0 1f 00 24 	mcall	8000046c <ROSA_init+0xe0>
		timerInit(1);
800003e0:	30 1c       	mov	r12,1
800003e2:	f0 1f 00 24 	mcall	80000470 <ROSA_init+0xe4>
		timerStart();
800003e6:	f0 1f 00 24 	mcall	80000474 <ROSA_init+0xe8>
	
		//Start with empty TCBLIST and no EXECTASK.
		TCBLIST = NULL;
800003ea:	4a 48       	lddpc	r8,80000478 <ROSA_init+0xec>
800003ec:	30 09       	mov	r9,0
800003ee:	91 09       	st.w	r8[0x0],r9
		EXECTASK = NULL;
800003f0:	4a 38       	lddpc	r8,8000047c <ROSA_init+0xf0>
800003f2:	30 09       	mov	r9,0
800003f4:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
800003f6:	4a 38       	lddpc	r8,80000480 <ROSA_init+0xf4>
800003f8:	30 09       	mov	r9,0
800003fa:	91 09       	st.w	r8[0x0],r9
		DQ = NULL;
800003fc:	4a 28       	lddpc	r8,80000484 <ROSA_init+0xf8>
800003fe:	30 09       	mov	r9,0
80000400:	91 09       	st.w	r8[0x0],r9
		LOCKEDSEMAPHORELIST=NULL;
80000402:	4a 28       	lddpc	r8,80000488 <ROSA_init+0xfc>
80000404:	30 09       	mov	r9,0
80000406:	91 09       	st.w	r8[0x0],r9
	
		/* Create system's tasks (idle, delay). */
		sysTasksCreate();
80000408:	f0 1f 00 21 	mcall	8000048c <ROSA_init+0x100>
	
		for (i = 0; i < MAXNPRIO; PA[i++] = NULL);
8000040c:	30 08       	mov	r8,0
8000040e:	ef 48 ff fc 	st.w	r7[-4],r8
80000412:	c0 c8       	rjmp	8000042a <ROSA_init+0x9e>
80000414:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000418:	49 e8       	lddpc	r8,80000490 <ROSA_init+0x104>
8000041a:	30 0a       	mov	r10,0
8000041c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80000420:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000424:	2f f8       	sub	r8,-1
80000426:	ef 48 ff fc 	st.w	r7[-4],r8
8000042a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000042e:	58 b8       	cp.w	r8,11
80000430:	fe 9a ff f2 	brle	80000414 <ROSA_init+0x88>
	}
	
	ROSA_init_GUARD = 1;
80000434:	48 48       	lddpc	r8,80000444 <ROSA_init+0xb8>
80000436:	30 19       	mov	r9,1
80000438:	91 09       	st.w	r8[0x0],r9
}
8000043a:	2f fd       	sub	sp,-4
8000043c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000440:	00 00       	add	r0,r0
80000442:	07 90       	ld.ub	r0,r3[0x1]
80000444:	00 00       	add	r0,r0
80000446:	05 20       	ld.uh	r0,r2++
80000448:	80 00       	ld.sh	r0,r0[0x0]
8000044a:	0c 18       	sub	r8,r6
8000044c:	80 00       	ld.sh	r0,r0[0x0]
8000044e:	0a 70       	tst	r0,r5
80000450:	80 00       	ld.sh	r0,r0[0x0]
80000452:	0a 98       	mov	r8,r5
80000454:	80 00       	ld.sh	r0,r0[0x0]
80000456:	0c e4       	st.h	--r6,r4
80000458:	80 00       	ld.sh	r0,r0[0x0]
8000045a:	00 d8       	st.w	--r0,r8
8000045c:	80 00       	ld.sh	r0,r0[0x0]
8000045e:	0e 98       	mov	r8,r7
80000460:	80 00       	ld.sh	r0,r0[0x0]
80000462:	00 f4       	st.b	--r0,r4
80000464:	80 00       	ld.sh	r0,r0[0x0]
80000466:	10 14       	sub	r4,r8
80000468:	80 00       	ld.sh	r0,r0[0x0]
8000046a:	1b 48       	ld.w	r8,--sp
8000046c:	80 00       	ld.sh	r0,r0[0x0]
8000046e:	1b 6a       	ld.uh	r10,--sp
80000470:	80 00       	ld.sh	r0,r0[0x0]
80000472:	10 68       	and	r8,r8
80000474:	80 00       	ld.sh	r0,r0[0x0]
80000476:	10 96       	mov	r6,r8
80000478:	00 00       	add	r0,r0
8000047a:	06 64       	and	r4,r3
8000047c:	00 00       	add	r0,r0
8000047e:	07 14       	ld.sh	r4,r3++
80000480:	00 00       	add	r0,r0
80000482:	06 9c       	mov	r12,r3
80000484:	00 00       	add	r0,r0
80000486:	07 18       	ld.sh	r8,r3++
80000488:	00 00       	add	r0,r0
8000048a:	06 5c       	eor	r12,r3
8000048c:	80 00       	ld.sh	r0,r0[0x0]
8000048e:	03 2c       	ld.uh	r12,r1++
80000490:	00 00       	add	r0,r0
80000492:	06 68       	and	r8,r3

80000494 <ROSA_tcbCreate>:

void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
80000494:	eb cd 40 80 	pushm	r7,lr
80000498:	1a 97       	mov	r7,sp
8000049a:	20 6d       	sub	sp,24
8000049c:	ef 4c ff f8 	st.w	r7[-8],r12
800004a0:	ef 4b ff f4 	st.w	r7[-12],r11
800004a4:	ef 4a ff f0 	st.w	r7[-16],r10
800004a8:	ef 49 ff ec 	st.w	r7[-20],r9
800004ac:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++)
800004b0:	30 08       	mov	r8,0
800004b2:	ef 48 ff fc 	st.w	r7[-4],r8
800004b6:	c1 48       	rjmp	800004de <ROSA_tcbCreate+0x4a>
	{
		tcbTask->id[i] = tcbName[i];
800004b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800004bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004c0:	ee fa ff f4 	ld.w	r10,r7[-12]
800004c4:	f4 08 00 08 	add	r8,r10,r8
800004c8:	11 88       	ld.ub	r8,r8[0x0]
800004ca:	ee fa ff f8 	ld.w	r10,r7[-8]
800004ce:	f4 09 00 09 	add	r9,r10,r9
800004d2:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++)
800004d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004d8:	2f f8       	sub	r8,-1
800004da:	ef 48 ff fc 	st.w	r7[-4],r8
800004de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004e2:	58 38       	cp.w	r8,3
800004e4:	fe 9a ff ea 	brle	800004b8 <ROSA_tcbCreate+0x24>
	{
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
800004e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004ec:	30 09       	mov	r9,0
800004ee:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
800004f0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800004f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004f8:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
800004fa:	ee f9 ff f0 	ld.w	r9,r7[-16]
800004fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000502:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
80000504:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000508:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000050c:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
8000050e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000512:	a3 68       	lsl	r8,0x2
80000514:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000518:	10 09       	add	r9,r8
8000051a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000051e:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
80000520:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000524:	70 39       	ld.w	r9,r8[0xc]
80000526:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000052a:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
8000052c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000530:	fc 19 00 1c 	movh	r9,0x1c
80000534:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
80000536:	ee fc ff f8 	ld.w	r12,r7[-8]
8000053a:	f0 1f 00 03 	mcall	80000544 <ROSA_tcbCreate+0xb0>
}
8000053e:	2f ad       	sub	sp,-24
80000540:	e3 cd 80 80 	ldm	sp++,r7,pc
80000544:	80 00       	ld.sh	r0,r0[0x0]
80000546:	08 26       	rsub	r6,r4

80000548 <ROSA_taskCreate>:

int16_t ROSA_taskCreate(ROSA_taskHandle_t * pth_a, char * id, void* taskFunction, uint32_t stackSize, uint8_t prio)
{
80000548:	eb cd 40 80 	pushm	r7,lr
8000054c:	1a 97       	mov	r7,sp
8000054e:	20 7d       	sub	sp,28
80000550:	ef 4c ff f4 	st.w	r7[-12],r12
80000554:	ef 4b ff f0 	st.w	r7[-16],r11
80000558:	ef 4a ff ec 	st.w	r7[-20],r10
8000055c:	ef 49 ff e8 	st.w	r7[-24],r9
80000560:	ef 68 ff e4 	st.b	r7[-28],r8
	int * tcbStack;
	tcb ** pth;
	
	pth = *pth_a;
80000564:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000568:	70 08       	ld.w	r8,r8[0x0]
8000056a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	tcbStack = (int *) malloc(stackSize * sizeof(uint32_t)); 
8000056e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000572:	a3 68       	lsl	r8,0x2
80000574:	10 9c       	mov	r12,r8
80000576:	f0 1f 00 40 	mcall	80000674 <ROSA_taskCreate+0x12c>
8000057a:	18 98       	mov	r8,r12
8000057c:	ef 48 ff f8 	st.w	r7[-8],r8
	MEM_CHECK(tcbStack);
80000580:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000584:	58 08       	cp.w	r8,0
80000586:	c0 31       	brne	8000058c <ROSA_taskCreate+0x44>
80000588:	3f f8       	mov	r8,-1
8000058a:	c7 08       	rjmp	8000066a <ROSA_taskCreate+0x122>
	
	*pth = (tcb *) malloc(sizeof(tcb));
8000058c:	37 4c       	mov	r12,116
8000058e:	f0 1f 00 3a 	mcall	80000674 <ROSA_taskCreate+0x12c>
80000592:	18 98       	mov	r8,r12
80000594:	10 99       	mov	r9,r8
80000596:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000059a:	91 09       	st.w	r8[0x0],r9
	MEM_CHECK(*pth);
8000059c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005a0:	70 08       	ld.w	r8,r8[0x0]
800005a2:	58 08       	cp.w	r8,0
800005a4:	c0 31       	brne	800005aa <ROSA_taskCreate+0x62>
800005a6:	3f f8       	mov	r8,-1
800005a8:	c6 18       	rjmp	8000066a <ROSA_taskCreate+0x122>
	
	(*pth)->priority = prio;
800005aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005ae:	70 09       	ld.w	r9,r8[0x0]
800005b0:	ef 38 ff e4 	ld.ub	r8,r7[-28]
800005b4:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
800005b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005bc:	70 0a       	ld.w	r10,r8[0x0]
800005be:	30 08       	mov	r8,0
800005c0:	30 09       	mov	r9,0
800005c2:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
800005c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005ca:	70 09       	ld.w	r9,r8[0x0]
800005cc:	30 08       	mov	r8,0
800005ce:	f3 68 00 70 	st.b	r9[112],r8
	(*pth)->originalPriority = prio;
800005d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005d6:	70 09       	ld.w	r9,r8[0x0]
800005d8:	ef 38 ff e4 	ld.ub	r8,r7[-28]
800005dc:	f3 68 00 71 	st.b	r9[113],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
800005e0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800005e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800005e8:	72 0c       	ld.w	r12,r9[0x0]
800005ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
800005ee:	ee fa ff ec 	ld.w	r10,r7[-20]
800005f2:	ee fb ff f0 	ld.w	r11,r7[-16]
800005f6:	f0 1f 00 21 	mcall	80000678 <ROSA_taskCreate+0x130>
	
	interruptDisable();
800005fa:	f0 1f 00 21 	mcall	8000067c <ROSA_taskCreate+0x134>
	ROSA_TM_ACTION(PA[(*pth)->priority], *pth, Install);
800005fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000602:	70 08       	ld.w	r8,r8[0x0]
80000604:	f1 38 00 64 	ld.ub	r8,r8[100]
80000608:	10 99       	mov	r9,r8
8000060a:	49 e8       	lddpc	r8,80000680 <ROSA_taskCreate+0x138>
8000060c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000610:	49 d8       	lddpc	r8,80000684 <ROSA_taskCreate+0x13c>
80000612:	91 09       	st.w	r8[0x0],r9
80000614:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000618:	70 08       	ld.w	r8,r8[0x0]
8000061a:	10 9c       	mov	r12,r8
8000061c:	f0 1f 00 1b 	mcall	80000688 <ROSA_taskCreate+0x140>
80000620:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000624:	70 08       	ld.w	r8,r8[0x0]
80000626:	f1 38 00 64 	ld.ub	r8,r8[100]
8000062a:	10 99       	mov	r9,r8
8000062c:	49 68       	lddpc	r8,80000684 <ROSA_taskCreate+0x13c>
8000062e:	70 0a       	ld.w	r10,r8[0x0]
80000630:	49 48       	lddpc	r8,80000680 <ROSA_taskCreate+0x138>
80000632:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	interruptEnable();
80000636:	f0 1f 00 16 	mcall	8000068c <ROSA_taskCreate+0x144>
			
	if ((EXECTASK) && (EXECTASK->priority < prio))
8000063a:	49 68       	lddpc	r8,80000690 <ROSA_taskCreate+0x148>
8000063c:	70 08       	ld.w	r8,r8[0x0]
8000063e:	58 08       	cp.w	r8,0
80000640:	c1 40       	breq	80000668 <ROSA_taskCreate+0x120>
80000642:	49 48       	lddpc	r8,80000690 <ROSA_taskCreate+0x148>
80000644:	70 08       	ld.w	r8,r8[0x0]
80000646:	f1 38 00 64 	ld.ub	r8,r8[100]
8000064a:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8000064e:	f0 09 18 00 	cp.b	r9,r8
80000652:	e0 88 00 0b 	brls	80000668 <ROSA_taskCreate+0x120>
	{
		PREEMPTASK = PA[prio];
80000656:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8000065a:	48 a8       	lddpc	r8,80000680 <ROSA_taskCreate+0x138>
8000065c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000660:	48 d8       	lddpc	r8,80000694 <ROSA_taskCreate+0x14c>
80000662:	91 09       	st.w	r8[0x0],r9
		ROSA_yield();
80000664:	f0 1f 00 0d 	mcall	80000698 <ROSA_taskCreate+0x150>
	}	
	
	return 0;
80000668:	30 08       	mov	r8,0
}
8000066a:	10 9c       	mov	r12,r8
8000066c:	2f 9d       	sub	sp,-28
8000066e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000672:	00 00       	add	r0,r0
80000674:	80 00       	ld.sh	r0,r0[0x0]
80000676:	11 a0       	ld.ub	r0,r8[0x2]
80000678:	80 00       	ld.sh	r0,r0[0x0]
8000067a:	04 94       	mov	r4,r2
8000067c:	80 00       	ld.sh	r0,r0[0x0]
8000067e:	1b 66       	ld.uh	r6,--sp
80000680:	00 00       	add	r0,r0
80000682:	06 68       	and	r8,r3
80000684:	00 00       	add	r0,r0
80000686:	06 64       	and	r4,r3
80000688:	80 00       	ld.sh	r0,r0[0x0]
8000068a:	01 10       	ld.sh	r0,r0++
8000068c:	80 00       	ld.sh	r0,r0[0x0]
8000068e:	1b 6a       	ld.uh	r10,--sp
80000690:	00 00       	add	r0,r0
80000692:	07 14       	ld.sh	r4,r3++
80000694:	00 00       	add	r0,r0
80000696:	06 9c       	mov	r12,r3
80000698:	80 00       	ld.sh	r0,r0[0x0]
8000069a:	08 b2       	st.h	r4++,r2

8000069c <ROSA_delay>:
/* ROSA_delay()															*/
/*																		*/
/* Suspends the calling task for the given number of ticks				*/
/************************************************************************/
int16_t ROSA_delay(uint64_t ticks)
{
8000069c:	eb cd 40 c0 	pushm	r6-r7,lr
800006a0:	1a 97       	mov	r7,sp
800006a2:	20 5d       	sub	sp,20
800006a4:	ee eb ff ec 	st.d	r7[-20],r10
	uint64_t dv;
	uint8_t pr;
	
	interruptDisable();
800006a8:	f0 1f 00 46 	mcall	800007c0 <ROSA_delay+0x124>
	
	dv = ROSA_getTickCount() + ticks;
800006ac:	f0 1f 00 46 	mcall	800007c4 <ROSA_delay+0x128>
800006b0:	ee e8 ff ec 	ld.d	r8,r7[-20]
800006b4:	f4 08 00 08 	add	r8,r10,r8
800006b8:	f6 09 00 49 	adc	r9,r11,r9
800006bc:	ee e9 ff f4 	st.d	r7[-12],r8
	pr = EXECTASK->priority;
800006c0:	4c 28       	lddpc	r8,800007c8 <ROSA_delay+0x12c>
800006c2:	70 08       	ld.w	r8,r8[0x0]
800006c4:	f1 38 00 64 	ld.ub	r8,r8[100]
800006c8:	ef 68 ff ff 	st.b	r7[-1],r8
	
	EXECTASK->delay = dv;
800006cc:	4b f8       	lddpc	r8,800007c8 <ROSA_delay+0x12c>
800006ce:	70 0a       	ld.w	r10,r8[0x0]
800006d0:	ee e8 ff f4 	ld.d	r8,r7[-12]
800006d4:	f4 e9 00 68 	st.d	r10[104],r8

	/* Extract task from its queue */
	ROSA_TM_ACTION(PA[pr], EXECTASK, Uninstall);
800006d8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800006dc:	4b c8       	lddpc	r8,800007cc <ROSA_delay+0x130>
800006de:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800006e2:	4b c8       	lddpc	r8,800007d0 <ROSA_delay+0x134>
800006e4:	91 09       	st.w	r8[0x0],r9
800006e6:	4b 98       	lddpc	r8,800007c8 <ROSA_delay+0x12c>
800006e8:	70 08       	ld.w	r8,r8[0x0]
800006ea:	10 9c       	mov	r12,r8
800006ec:	f0 1f 00 3a 	mcall	800007d4 <ROSA_delay+0x138>
800006f0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800006f4:	4b 78       	lddpc	r8,800007d0 <ROSA_delay+0x134>
800006f6:	70 0a       	ld.w	r10,r8[0x0]
800006f8:	4b 58       	lddpc	r8,800007cc <ROSA_delay+0x130>
800006fa:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	
	/* Check the current queue for emptiness */	
	if (PA[pr])
800006fe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000702:	4b 38       	lddpc	r8,800007cc <ROSA_delay+0x130>
80000704:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000708:	58 08       	cp.w	r8,0
8000070a:	c0 a0       	breq	8000071e <ROSA_delay+0x82>
	{
		PREEMPTASK = PA[pr]->nexttcb;
8000070c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000710:	4a f8       	lddpc	r8,800007cc <ROSA_delay+0x130>
80000712:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000716:	70 09       	ld.w	r9,r8[0x0]
80000718:	4b 08       	lddpc	r8,800007d8 <ROSA_delay+0x13c>
8000071a:	91 09       	st.w	r8[0x0],r9
8000071c:	c0 68       	rjmp	80000728 <ROSA_delay+0x8c>
	}
	else
	{
		PREEMPTASK = readyQueueSearch();	
8000071e:	f0 1f 00 30 	mcall	800007dc <ROSA_delay+0x140>
80000722:	18 99       	mov	r9,r12
80000724:	4a d8       	lddpc	r8,800007d8 <ROSA_delay+0x13c>
80000726:	91 09       	st.w	r8[0x0],r9
	}
	
	TCBLIST = DQ;
80000728:	4a e8       	lddpc	r8,800007e0 <ROSA_delay+0x144>
8000072a:	70 09       	ld.w	r9,r8[0x0]
8000072c:	4a 98       	lddpc	r8,800007d0 <ROSA_delay+0x134>
8000072e:	91 09       	st.w	r8[0x0],r9
	
	/* Search for the right place to insert the task to the delay queue */	
	while ((DQ) && (TCBLIST->delay <= dv) && (dv <= TCBLIST->nexttcb->delay))
80000730:	c0 68       	rjmp	8000073c <ROSA_delay+0xa0>
	{
		TCBLIST = TCBLIST->nexttcb;
80000732:	4a 88       	lddpc	r8,800007d0 <ROSA_delay+0x134>
80000734:	70 08       	ld.w	r8,r8[0x0]
80000736:	70 09       	ld.w	r9,r8[0x0]
80000738:	4a 68       	lddpc	r8,800007d0 <ROSA_delay+0x134>
8000073a:	91 09       	st.w	r8[0x0],r9
	}
	
	TCBLIST = DQ;
	
	/* Search for the right place to insert the task to the delay queue */	
	while ((DQ) && (TCBLIST->delay <= dv) && (dv <= TCBLIST->nexttcb->delay))
8000073c:	4a 98       	lddpc	r8,800007e0 <ROSA_delay+0x144>
8000073e:	70 08       	ld.w	r8,r8[0x0]
80000740:	58 08       	cp.w	r8,0
80000742:	c1 70       	breq	80000770 <ROSA_delay+0xd4>
80000744:	4a 38       	lddpc	r8,800007d0 <ROSA_delay+0x134>
80000746:	70 08       	ld.w	r8,r8[0x0]
80000748:	f0 ea 00 68 	ld.d	r10,r8[104]
8000074c:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000750:	10 3a       	cp.w	r10,r8
80000752:	f2 0b 13 00 	cpc	r11,r9
80000756:	e0 8b 00 0d 	brhi	80000770 <ROSA_delay+0xd4>
8000075a:	49 e8       	lddpc	r8,800007d0 <ROSA_delay+0x134>
8000075c:	70 08       	ld.w	r8,r8[0x0]
8000075e:	70 08       	ld.w	r8,r8[0x0]
80000760:	f0 ea 00 68 	ld.d	r10,r8[104]
80000764:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000768:	10 3a       	cp.w	r10,r8
8000076a:	f2 0b 13 00 	cpc	r11,r9
8000076e:	ce 22       	brcc	80000732 <ROSA_delay+0x96>
	{
		TCBLIST = TCBLIST->nexttcb;
	}

	ROSA_tcbInstall(EXECTASK);
80000770:	49 68       	lddpc	r8,800007c8 <ROSA_delay+0x12c>
80000772:	70 08       	ld.w	r8,r8[0x0]
80000774:	10 9c       	mov	r12,r8
80000776:	f0 1f 00 1c 	mcall	800007e4 <ROSA_delay+0x148>
	DQ = TCBLIST;
8000077a:	49 68       	lddpc	r8,800007d0 <ROSA_delay+0x134>
8000077c:	70 09       	ld.w	r9,r8[0x0]
8000077e:	49 98       	lddpc	r8,800007e0 <ROSA_delay+0x144>
80000780:	91 09       	st.w	r8[0x0],r9
	
	interruptEnable();
80000782:	f0 1f 00 1a 	mcall	800007e8 <ROSA_delay+0x14c>
	
	ROSA_yield();
80000786:	f0 1f 00 1a 	mcall	800007ec <ROSA_delay+0x150>
	
	if (ROSA_getTickCount()>dv)
8000078a:	f0 1f 00 0f 	mcall	800007c4 <ROSA_delay+0x128>
8000078e:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000792:	10 3a       	cp.w	r10,r8
80000794:	f2 0b 13 00 	cpc	r11,r9
80000798:	e0 88 00 0e 	brls	800007b4 <ROSA_delay+0x118>
	{
		return dv-ROSA_getTickCount();
8000079c:	ef 06 ff fa 	ld.sh	r6,r7[-6]
800007a0:	f0 1f 00 09 	mcall	800007c4 <ROSA_delay+0x128>
800007a4:	14 98       	mov	r8,r10
800007a6:	16 99       	mov	r9,r11
800007a8:	5c 88       	casts.h	r8
800007aa:	ec 08 01 08 	sub	r8,r6,r8
800007ae:	5c 88       	casts.h	r8
800007b0:	5c 88       	casts.h	r8
800007b2:	c0 28       	rjmp	800007b6 <ROSA_delay+0x11a>
	}
	
	return 0;
800007b4:	30 08       	mov	r8,0
}
800007b6:	10 9c       	mov	r12,r8
800007b8:	2f bd       	sub	sp,-20
800007ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800007be:	00 00       	add	r0,r0
800007c0:	80 00       	ld.sh	r0,r0[0x0]
800007c2:	1b 66       	ld.uh	r6,--sp
800007c4:	80 00       	ld.sh	r0,r0[0x0]
800007c6:	09 b0       	ld.ub	r0,r4[0x3]
800007c8:	00 00       	add	r0,r0
800007ca:	07 14       	ld.sh	r4,r3++
800007cc:	00 00       	add	r0,r0
800007ce:	06 68       	and	r8,r3
800007d0:	00 00       	add	r0,r0
800007d2:	06 64       	and	r4,r3
800007d4:	80 00       	ld.sh	r0,r0[0x0]
800007d6:	01 6c       	ld.uh	r12,--r0
800007d8:	00 00       	add	r0,r0
800007da:	06 9c       	mov	r12,r3
800007dc:	80 00       	ld.sh	r0,r0[0x0]
800007de:	01 dc       	ld.ub	r12,r0[0x5]
800007e0:	00 00       	add	r0,r0
800007e2:	07 18       	ld.sh	r8,r3++
800007e4:	80 00       	ld.sh	r0,r0[0x0]
800007e6:	01 10       	ld.sh	r0,r0++
800007e8:	80 00       	ld.sh	r0,r0[0x0]
800007ea:	1b 6a       	ld.uh	r10,--sp
800007ec:	80 00       	ld.sh	r0,r0[0x0]
800007ee:	08 b2       	st.h	r4++,r2

800007f0 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
800007f0:	4b 5c       	lddpc	r12,800008c4 <_yield+0xa>
	lda.w r11,EXECTASK
800007f2:	4b 6b       	lddpc	r11,800008c8 <_yield+0xe>
	ld.w r12,r12[0x0]
800007f4:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
800007f6:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
800007f8:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800007fa:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800007fc:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000800:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
80000802:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
80000804:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
80000806:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
8000080a:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
8000080c:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
8000080e:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000810:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
80000812:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
80000814:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
80000816:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000818:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
8000081a:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
8000081c:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
8000081e:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000820:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000822:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000824:	1c 9f       	mov	pc,lr

80000826 <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
80000826:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000828:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
8000082a:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
8000082c:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000830:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80000834:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000838:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
8000083c:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000840:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000844:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000848:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
8000084c:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000850:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
80000852:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80000854:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
80000856:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000858:	1c 9f       	mov	pc,lr

8000085a <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
8000085a:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000085c:	49 bc       	lddpc	r12,800008c8 <_yield+0xe>
	ld.w r12,r12[0x0]
8000085e:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000860:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
80000862:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
80000864:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
80000866:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
80000868:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
8000086a:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
8000086c:	33 40       	mov	r0,52
	add r0,r12
8000086e:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000870:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80000874:	1a 90       	mov	r0,sp
	st.w --sp,r0
80000876:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80000878:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
8000087c:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
8000087e:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80000880:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
80000882:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
80000884:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
80000886:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80000888:	1c 9f       	mov	pc,lr

8000088a <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000088a:	49 0c       	lddpc	r12,800008c8 <_yield+0xe>
	ld.w r12,r12[0x0]
8000088c:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
8000088e:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000890:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
80000892:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
80000896:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80000898:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
8000089a:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
8000089c:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
8000089e:	33 40       	mov	r0,52
	add r0,r12
800008a0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800008a2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800008a6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
800008a8:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800008aa:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
800008ac:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
800008ae:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
800008b0:	d6 13       	rets

800008b2 <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
800008b2:	d4 01       	pushm	lr
	lda.w lr,_yield
800008b4:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
800008b8:	d7 33       	scall

800008ba <_yield>:
_yield:
	call contextSave
800008ba:	cd 0f       	rcall	8000085a <contextSave>
	call scheduler
800008bc:	f0 1f 00 04 	mcall	800008cc <_yield+0x12>
	call contextRestore
800008c0:	ce 5f       	rcall	8000088a <contextRestore>
800008c2:	00 00       	add	r0,r0
800008c4:	00 00       	add	r0,r0
800008c6:	06 64       	and	r4,r3
800008c8:	00 00       	add	r0,r0
800008ca:	07 14       	ld.sh	r4,r3++
800008cc:	80 00       	ld.sh	r0,r0[0x0]
800008ce:	08 d0       	st.w	--r4,r0

800008d0 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
800008d0:	eb cd 40 80 	pushm	r7,lr
800008d4:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK) {
800008d6:	48 f8       	lddpc	r8,80000910 <scheduler+0x40>
800008d8:	70 08       	ld.w	r8,r8[0x0]
800008da:	58 08       	cp.w	r8,0
800008dc:	c0 90       	breq	800008ee <scheduler+0x1e>
		EXECTASK = PREEMPTASK;
800008de:	48 d8       	lddpc	r8,80000910 <scheduler+0x40>
800008e0:	70 09       	ld.w	r9,r8[0x0]
800008e2:	48 d8       	lddpc	r8,80000914 <scheduler+0x44>
800008e4:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
800008e6:	48 b8       	lddpc	r8,80000910 <scheduler+0x40>
800008e8:	30 09       	mov	r9,0
800008ea:	91 09       	st.w	r8[0x0],r9
800008ec:	c1 08       	rjmp	8000090c <scheduler+0x3c>
	}
	else {
		PA[EXECTASK->priority] = EXECTASK;
800008ee:	48 a8       	lddpc	r8,80000914 <scheduler+0x44>
800008f0:	70 08       	ld.w	r8,r8[0x0]
800008f2:	f1 38 00 64 	ld.ub	r8,r8[100]
800008f6:	10 99       	mov	r9,r8
800008f8:	48 78       	lddpc	r8,80000914 <scheduler+0x44>
800008fa:	70 0a       	ld.w	r10,r8[0x0]
800008fc:	48 78       	lddpc	r8,80000918 <scheduler+0x48>
800008fe:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		EXECTASK = EXECTASK->nexttcb;
80000902:	48 58       	lddpc	r8,80000914 <scheduler+0x44>
80000904:	70 08       	ld.w	r8,r8[0x0]
80000906:	70 09       	ld.w	r9,r8[0x0]
80000908:	48 38       	lddpc	r8,80000914 <scheduler+0x44>
8000090a:	91 09       	st.w	r8[0x0],r9
	}
}
8000090c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000910:	00 00       	add	r0,r0
80000912:	06 9c       	mov	r12,r3
80000914:	00 00       	add	r0,r0
80000916:	07 14       	ld.sh	r4,r3++
80000918:	00 00       	add	r0,r0
8000091a:	06 68       	and	r8,r3

8000091c <C.6.9528>:
8000091c:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

8000092c <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
8000092c:	eb cd 40 80 	pushm	r7,lr
80000930:	1a 97       	mov	r7,sp
80000932:	20 2d       	sub	sp,8
	//interruptDisable();
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000934:	fe 78 38 00 	mov	r8,-51200
80000938:	ef 48 ff fc 	st.w	r7[-4],r8
	
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
8000093c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000940:	70 88       	ld.w	r8,r8[0x20]
80000942:	ef 48 ff f8 	st.w	r7[-8],r8
	if (sr & AVR32_TC_CPCS_MASK)
80000946:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000094a:	e2 18 00 10 	andl	r8,0x10,COH
8000094e:	c2 30       	breq	80000994 <timerISR+0x68>
	{
		systemTick++;
80000950:	49 38       	lddpc	r8,8000099c <timerISR+0x70>
80000952:	f0 ea 00 00 	ld.d	r10,r8[0]
80000956:	30 18       	mov	r8,1
80000958:	30 09       	mov	r9,0
8000095a:	f4 08 00 08 	add	r8,r10,r8
8000095e:	f6 09 00 49 	adc	r9,r11,r9
80000962:	48 fa       	lddpc	r10,8000099c <timerISR+0x70>
80000964:	f4 e9 00 00 	st.d	r10[0],r8
		
		if ( (DQ) && (DQ->delay <= systemTick) ) 
80000968:	48 e8       	lddpc	r8,800009a0 <timerISR+0x74>
8000096a:	70 08       	ld.w	r8,r8[0x0]
8000096c:	58 08       	cp.w	r8,0
8000096e:	c1 30       	breq	80000994 <timerISR+0x68>
80000970:	48 c8       	lddpc	r8,800009a0 <timerISR+0x74>
80000972:	70 08       	ld.w	r8,r8[0x0]
80000974:	f0 ea 00 68 	ld.d	r10,r8[104]
80000978:	48 98       	lddpc	r8,8000099c <timerISR+0x70>
8000097a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000097e:	10 3a       	cp.w	r10,r8
80000980:	f2 0b 13 00 	cpc	r11,r9
80000984:	e0 8b 00 08 	brhi	80000994 <timerISR+0x68>
		{
			PREEMPTASK = DELHANDL;
80000988:	48 78       	lddpc	r8,800009a4 <timerISR+0x78>
8000098a:	70 09       	ld.w	r9,r8[0x0]
8000098c:	48 78       	lddpc	r8,800009a8 <timerISR+0x7c>
8000098e:	91 09       	st.w	r8[0x0],r9
			
			ROSA_yieldFromISR();
80000990:	f0 1f 00 07 	mcall	800009ac <timerISR+0x80>
		}
	}
//	interruptEnable();
}
80000994:	2f ed       	sub	sp,-8
80000996:	e3 cd 40 80 	ldm	sp++,r7,lr
8000099a:	d6 03       	rete
8000099c:	00 00       	add	r0,r0
8000099e:	07 90       	ld.ub	r0,r3[0x1]
800009a0:	00 00       	add	r0,r0
800009a2:	07 18       	ld.sh	r8,r3++
800009a4:	00 00       	add	r0,r0
800009a6:	06 98       	mov	r8,r3
800009a8:	00 00       	add	r0,r0
800009aa:	06 9c       	mov	r12,r3
800009ac:	80 00       	ld.sh	r0,r0[0x0]
800009ae:	00 b4       	st.h	r0++,r4

800009b0 <ROSA_getTickCount>:
/*																		*/
/* Returns the current number of system ticks, relative to start		*/
/* of the system.                                                       */
/************************************************************************/
uint64_t ROSA_getTickCount()
{
800009b0:	eb cd 40 80 	pushm	r7,lr
800009b4:	1a 97       	mov	r7,sp
	return systemTick;
800009b6:	48 48       	lddpc	r8,800009c4 <ROSA_getTickCount+0x14>
800009b8:	f0 e8 00 00 	ld.d	r8,r8[0]
}
800009bc:	10 9a       	mov	r10,r8
800009be:	12 9b       	mov	r11,r9
800009c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800009c4:	00 00       	add	r0,r0
800009c6:	07 90       	ld.ub	r0,r3[0x1]

800009c8 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
800009c8:	eb cd 40 80 	pushm	r7,lr
800009cc:	1a 97       	mov	r7,sp
800009ce:	20 7d       	sub	sp,28
800009d0:	ef 4c ff e4 	st.w	r7[-28],r12
	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
800009d4:	4a 48       	lddpc	r8,80000a64 <timerPeriodSet+0x9c>
800009d6:	ee ca 00 18 	sub	r10,r7,24
800009da:	10 9b       	mov	r11,r8
800009dc:	f6 e8 00 00 	ld.d	r8,r11[0]
800009e0:	f4 e9 00 00 	st.d	r10[0],r8
800009e4:	f6 e8 00 08 	ld.d	r8,r11[8]
800009e8:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
800009ec:	30 48       	mov	r8,4
800009ee:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
800009f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009f6:	20 18       	sub	r8,1
800009f8:	a3 68       	lsl	r8,0x2
800009fa:	ee 08 00 08 	add	r8,r7,r8
800009fe:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000a02:	e0 68 1b 00 	mov	r8,6912
80000a06:	ea 18 00 b7 	orh	r8,0xb7
80000a0a:	f0 09 0c 08 	divs	r8,r8,r9
80000a0e:	10 99       	mov	r9,r8
80000a10:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000a14:	b1 39       	mul	r9,r8
80000a16:	e0 68 4d d3 	mov	r8,19923
80000a1a:	ea 18 10 62 	orh	r8,0x1062
80000a1e:	f2 08 06 48 	mulu.d	r8,r9,r8
80000a22:	f2 08 16 06 	lsr	r8,r9,0x6
80000a26:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80000a2a:	ee fc ff fc 	ld.w	r12,r7[-4]
80000a2e:	f0 1f 00 0f 	mcall	80000a68 <timerPeriodSet+0xa0>
	timerRCSet(rc);
80000a32:	ee fc ff f8 	ld.w	r12,r7[-8]
80000a36:	f0 1f 00 0e 	mcall	80000a6c <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80000a3a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a42:	f2 08 02 4a 	mul	r10,r9,r8
80000a46:	e0 68 9f 81 	mov	r8,40833
80000a4a:	ea 18 16 5e 	orh	r8,0x165e
80000a4e:	f4 08 04 48 	muls.d	r8,r10,r8
80000a52:	b5 49       	asr	r9,0x14
80000a54:	f4 08 14 1f 	asr	r8,r10,0x1f
80000a58:	f2 08 01 08 	sub	r8,r9,r8
}
80000a5c:	10 9c       	mov	r12,r8
80000a5e:	2f 9d       	sub	sp,-28
80000a60:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a64:	80 00       	ld.sh	r0,r0[0x0]
80000a66:	09 1c       	ld.sh	r12,r4++
80000a68:	80 00       	ld.sh	r0,r0[0x0]
80000a6a:	10 dc       	st.w	--r8,r12
80000a6c:	80 00       	ld.sh	r0,r0[0x0]
80000a6e:	10 c6       	st.b	r8++,r6

80000a70 <buttonInit>:
80000a70:	eb cd 40 80 	pushm	r7,lr
80000a74:	1a 97       	mov	r7,sp
80000a76:	30 1b       	mov	r11,1
80000a78:	35 8c       	mov	r12,88
80000a7a:	f0 1f 00 07 	mcall	80000a94 <buttonInit+0x24>
80000a7e:	30 1b       	mov	r11,1
80000a80:	35 5c       	mov	r12,85
80000a82:	f0 1f 00 05 	mcall	80000a94 <buttonInit+0x24>
80000a86:	30 1b       	mov	r11,1
80000a88:	35 2c       	mov	r12,82
80000a8a:	f0 1f 00 03 	mcall	80000a94 <buttonInit+0x24>
80000a8e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a92:	00 00       	add	r0,r0
80000a94:	80 00       	ld.sh	r0,r0[0x0]
80000a96:	0a d0       	st.w	--r5,r0

80000a98 <joystickInit>:
80000a98:	eb cd 40 80 	pushm	r7,lr
80000a9c:	1a 97       	mov	r7,sp
80000a9e:	30 1b       	mov	r11,1
80000aa0:	31 bc       	mov	r12,27
80000aa2:	f0 1f 00 0b 	mcall	80000acc <joystickInit+0x34>
80000aa6:	30 1b       	mov	r11,1
80000aa8:	31 9c       	mov	r12,25
80000aaa:	f0 1f 00 09 	mcall	80000acc <joystickInit+0x34>
80000aae:	30 1b       	mov	r11,1
80000ab0:	31 cc       	mov	r12,28
80000ab2:	f0 1f 00 07 	mcall	80000acc <joystickInit+0x34>
80000ab6:	30 1b       	mov	r11,1
80000ab8:	31 4c       	mov	r12,20
80000aba:	f0 1f 00 05 	mcall	80000acc <joystickInit+0x34>
80000abe:	30 1b       	mov	r11,1
80000ac0:	31 ac       	mov	r12,26
80000ac2:	f0 1f 00 03 	mcall	80000acc <joystickInit+0x34>
80000ac6:	e3 cd 80 80 	ldm	sp++,r7,pc
80000aca:	00 00       	add	r0,r0
80000acc:	80 00       	ld.sh	r0,r0[0x0]
80000ace:	0a d0       	st.w	--r5,r0

80000ad0 <gpioInit>:
80000ad0:	eb cd 40 80 	pushm	r7,lr
80000ad4:	1a 97       	mov	r7,sp
80000ad6:	20 7d       	sub	sp,28
80000ad8:	ef 4c ff ec 	st.w	r7[-20],r12
80000adc:	ef 4b ff e8 	st.w	r7[-24],r11
80000ae0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ae4:	a5 58       	asr	r8,0x5
80000ae6:	ef 48 ff f4 	st.w	r7[-12],r8
80000aea:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000aee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000af2:	ef 48 ff fc 	st.w	r7[-4],r8
80000af6:	30 19       	mov	r9,1
80000af8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000afc:	f2 08 09 48 	lsl	r8,r9,r8
80000b00:	ef 48 ff f8 	st.w	r7[-8],r8
80000b04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b08:	a9 68       	lsl	r8,0x8
80000b0a:	e0 28 f0 00 	sub	r8,61440
80000b0e:	ef 48 ff f0 	st.w	r7[-16],r8
80000b12:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b16:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b1a:	91 19       	st.w	r8[0x4],r9
80000b1c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b20:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b24:	91 69       	st.w	r8[0x18],r9
80000b26:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b2a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b2e:	91 a9       	st.w	r8[0x28],r9
80000b30:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000b34:	ef 48 ff e4 	st.w	r7[-28],r8
80000b38:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b3c:	58 08       	cp.w	r8,0
80000b3e:	c0 60       	breq	80000b4a <gpioInit+0x7a>
80000b40:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b44:	58 18       	cp.w	r8,1
80000b46:	c0 90       	breq	80000b58 <gpioInit+0x88>
80000b48:	c0 f8       	rjmp	80000b66 <gpioInit+0x96>
80000b4a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b4e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b52:	f1 49 00 44 	st.w	r8[68],r9
80000b56:	c0 e8       	rjmp	80000b72 <gpioInit+0xa2>
80000b58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b5c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b60:	f1 49 00 48 	st.w	r8[72],r9
80000b64:	c0 78       	rjmp	80000b72 <gpioInit+0xa2>
80000b66:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b6a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b6e:	f1 49 00 48 	st.w	r8[72],r9
80000b72:	2f 9d       	sub	sp,-28
80000b74:	e3 cd 80 80 	ldm	sp++,r7,pc

80000b78 <gpioSet>:
80000b78:	eb cd 40 80 	pushm	r7,lr
80000b7c:	1a 97       	mov	r7,sp
80000b7e:	20 5d       	sub	sp,20
80000b80:	ef 4c ff ec 	st.w	r7[-20],r12
80000b84:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000b88:	a5 58       	asr	r8,0x5
80000b8a:	ef 48 ff f4 	st.w	r7[-12],r8
80000b8e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000b92:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000b96:	ef 48 ff fc 	st.w	r7[-4],r8
80000b9a:	30 19       	mov	r9,1
80000b9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ba0:	f2 08 09 48 	lsl	r8,r9,r8
80000ba4:	ef 48 ff f8 	st.w	r7[-8],r8
80000ba8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bac:	a9 68       	lsl	r8,0x8
80000bae:	e0 28 f0 00 	sub	r8,61440
80000bb2:	ef 48 ff f0 	st.w	r7[-16],r8
80000bb6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bba:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000bbe:	f1 49 00 54 	st.w	r8[84],r9
80000bc2:	2f bd       	sub	sp,-20
80000bc4:	e3 cd 80 80 	ldm	sp++,r7,pc

80000bc8 <gpioToggle>:
80000bc8:	eb cd 40 80 	pushm	r7,lr
80000bcc:	1a 97       	mov	r7,sp
80000bce:	20 5d       	sub	sp,20
80000bd0:	ef 4c ff ec 	st.w	r7[-20],r12
80000bd4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000bd8:	a5 58       	asr	r8,0x5
80000bda:	ef 48 ff f4 	st.w	r7[-12],r8
80000bde:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000be2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000be6:	ef 48 ff fc 	st.w	r7[-4],r8
80000bea:	30 19       	mov	r9,1
80000bec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bf0:	f2 08 09 48 	lsl	r8,r9,r8
80000bf4:	ef 48 ff f8 	st.w	r7[-8],r8
80000bf8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bfc:	a9 68       	lsl	r8,0x8
80000bfe:	e0 28 f0 00 	sub	r8,61440
80000c02:	ef 48 ff f0 	st.w	r7[-16],r8
80000c06:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c0a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c0e:	f1 49 00 5c 	st.w	r8[92],r9
80000c12:	2f bd       	sub	sp,-20
80000c14:	e3 cd 80 80 	ldm	sp++,r7,pc

80000c18 <ledInit>:
80000c18:	eb cd 40 80 	pushm	r7,lr
80000c1c:	1a 97       	mov	r7,sp
80000c1e:	20 9d       	sub	sp,36
80000c20:	49 e8       	lddpc	r8,80000c98 <ledInit+0x80>
80000c22:	ee cb 00 24 	sub	r11,r7,36
80000c26:	10 9a       	mov	r10,r8
80000c28:	f4 e8 00 00 	ld.d	r8,r10[0]
80000c2c:	f6 e9 00 00 	st.d	r11[0],r8
80000c30:	f4 e8 00 08 	ld.d	r8,r10[8]
80000c34:	f6 e9 00 08 	st.d	r11[8],r8
80000c38:	f4 e8 00 10 	ld.d	r8,r10[16]
80000c3c:	f6 e9 00 10 	st.d	r11[16],r8
80000c40:	f4 e8 00 18 	ld.d	r8,r10[24]
80000c44:	f6 e9 00 18 	st.d	r11[24],r8
80000c48:	30 08       	mov	r8,0
80000c4a:	ef 48 ff fc 	st.w	r7[-4],r8
80000c4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c52:	a3 68       	lsl	r8,0x2
80000c54:	ee 08 00 08 	add	r8,r7,r8
80000c58:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000c5c:	10 9c       	mov	r12,r8
80000c5e:	f0 1f 00 10 	mcall	80000c9c <ledInit+0x84>
80000c62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c66:	a3 68       	lsl	r8,0x2
80000c68:	ee 08 00 08 	add	r8,r7,r8
80000c6c:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000c70:	30 0b       	mov	r11,0
80000c72:	10 9c       	mov	r12,r8
80000c74:	f0 1f 00 0b 	mcall	80000ca0 <ledInit+0x88>
80000c78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c7c:	58 78       	cp.w	r8,7
80000c7e:	5f 18       	srne	r8
80000c80:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000c84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c88:	2f f8       	sub	r8,-1
80000c8a:	ef 48 ff fc 	st.w	r7[-4],r8
80000c8e:	58 09       	cp.w	r9,0
80000c90:	cd f1       	brne	80000c4e <ledInit+0x36>
80000c92:	2f 7d       	sub	sp,-36
80000c94:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c98:	80 00       	ld.sh	r0,r0[0x0]
80000c9a:	1e 00       	add	r0,pc
80000c9c:	80 00       	ld.sh	r0,r0[0x0]
80000c9e:	0c a4       	st.w	r6++,r4
80000ca0:	80 00       	ld.sh	r0,r0[0x0]
80000ca2:	0a d0       	st.w	--r5,r0

80000ca4 <ledOff>:
80000ca4:	eb cd 40 80 	pushm	r7,lr
80000ca8:	1a 97       	mov	r7,sp
80000caa:	20 1d       	sub	sp,4
80000cac:	ef 4c ff fc 	st.w	r7[-4],r12
80000cb0:	ee fc ff fc 	ld.w	r12,r7[-4]
80000cb4:	f0 1f 00 03 	mcall	80000cc0 <ledOff+0x1c>
80000cb8:	2f fd       	sub	sp,-4
80000cba:	e3 cd 80 80 	ldm	sp++,r7,pc
80000cbe:	00 00       	add	r0,r0
80000cc0:	80 00       	ld.sh	r0,r0[0x0]
80000cc2:	0b 78       	ld.ub	r8,--r5

80000cc4 <ledToggle>:
80000cc4:	eb cd 40 80 	pushm	r7,lr
80000cc8:	1a 97       	mov	r7,sp
80000cca:	20 1d       	sub	sp,4
80000ccc:	ef 4c ff fc 	st.w	r7[-4],r12
80000cd0:	ee fc ff fc 	ld.w	r12,r7[-4]
80000cd4:	f0 1f 00 03 	mcall	80000ce0 <ledToggle+0x1c>
80000cd8:	2f fd       	sub	sp,-4
80000cda:	e3 cd 80 80 	ldm	sp++,r7,pc
80000cde:	00 00       	add	r0,r0
80000ce0:	80 00       	ld.sh	r0,r0[0x0]
80000ce2:	0b c8       	ld.ub	r8,r5[0x4]

80000ce4 <potInit>:
80000ce4:	d3 01       	pushm	r11-r12
80000ce6:	e0 6c 10 00 	mov	r12,4096
80000cea:	ea 1c ff ff 	orh	r12,0xffff
80000cee:	31 6b       	mov	r11,22
80000cf0:	99 2b       	st.w	r12[0x8],r11
80000cf2:	99 6b       	st.w	r12[0x18],r11
80000cf4:	99 6b       	st.w	r12[0x18],r11
80000cf6:	e0 6c 3c 00 	mov	r12,15360
80000cfa:	ea 1c ff ff 	orh	r12,0xffff
80000cfe:	30 1b       	mov	r11,1
80000d00:	99 0b       	st.w	r12[0x0],r11
80000d02:	e0 6b 0f 1f 	mov	r11,3871
80000d06:	b1 6b       	lsl	r11,0x10
80000d08:	99 1b       	st.w	r12[0x4],r11
80000d0a:	30 2b       	mov	r11,2
80000d0c:	99 4b       	st.w	r12[0x10],r11
80000d0e:	d3 02       	popm	r11-r12
80000d10:	1c 9f       	mov	pc,lr

80000d12 <potGetValue>:
80000d12:	d1 81       	pushm	r10-r11
80000d14:	e0 6c 3c 00 	mov	r12,15360
80000d18:	ea 1c ff ff 	orh	r12,0xffff
80000d1c:	30 2b       	mov	r11,2
80000d1e:	99 0b       	st.w	r12[0x0],r11

80000d20 <a1>:
80000d20:	78 7a       	ld.w	r10,r12[0x1c]
80000d22:	16 7a       	tst	r10,r11
80000d24:	cf e0       	breq	80000d20 <a1>
80000d26:	78 dc       	ld.w	r12,r12[0x34]
80000d28:	d1 82       	popm	r10-r11
80000d2a:	1c 9f       	mov	pc,lr

80000d2c <usartReset>:
80000d2c:	eb cd 40 80 	pushm	r7,lr
80000d30:	1a 97       	mov	r7,sp
80000d32:	20 3d       	sub	sp,12
80000d34:	ef 4c ff f8 	st.w	r7[-8],r12
80000d38:	f0 1f 00 16 	mcall	80000d90 <usartReset+0x64>
80000d3c:	18 98       	mov	r8,r12
80000d3e:	ef 48 ff fc 	st.w	r7[-4],r8
80000d42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d46:	58 08       	cp.w	r8,0
80000d48:	c0 30       	breq	80000d4e <usartReset+0x22>
80000d4a:	f0 1f 00 13 	mcall	80000d94 <usartReset+0x68>
80000d4e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d52:	3f f8       	mov	r8,-1
80000d54:	93 38       	st.w	r9[0xc],r8
80000d56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d5a:	70 58       	ld.w	r8,r8[0x14]
80000d5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d60:	58 08       	cp.w	r8,0
80000d62:	c0 30       	breq	80000d68 <usartReset+0x3c>
80000d64:	f0 1f 00 0d 	mcall	80000d98 <usartReset+0x6c>
80000d68:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d6c:	30 08       	mov	r8,0
80000d6e:	93 18       	st.w	r9[0x4],r8
80000d70:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d74:	30 08       	mov	r8,0
80000d76:	93 98       	st.w	r9[0x24],r8
80000d78:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d7c:	30 08       	mov	r8,0
80000d7e:	93 a8       	st.w	r9[0x28],r8
80000d80:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d84:	ea 68 61 0c 	mov	r8,680204
80000d88:	93 08       	st.w	r9[0x0],r8
80000d8a:	2f dd       	sub	sp,-12
80000d8c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d90:	80 00       	ld.sh	r0,r0[0x0]
80000d92:	1b 6e       	ld.uh	lr,--sp
80000d94:	80 00       	ld.sh	r0,r0[0x0]
80000d96:	1b 66       	ld.uh	r6,--sp
80000d98:	80 00       	ld.sh	r0,r0[0x0]
80000d9a:	1b 6a       	ld.uh	r10,--sp

80000d9c <usartSetBaudrate>:
80000d9c:	eb cd 40 80 	pushm	r7,lr
80000da0:	1a 97       	mov	r7,sp
80000da2:	20 bd       	sub	sp,44
80000da4:	ef 4c ff ec 	st.w	r7[-20],r12
80000da8:	ef 4b ff e8 	st.w	r7[-24],r11
80000dac:	ef 4a ff e4 	st.w	r7[-28],r10
80000db0:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000db4:	f0 09 15 04 	lsl	r9,r8,0x4
80000db8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000dbc:	10 39       	cp.w	r9,r8
80000dbe:	e0 8b 00 06 	brhi	80000dca <usartSetBaudrate+0x2e>
80000dc2:	31 09       	mov	r9,16
80000dc4:	ef 49 ff d4 	st.w	r7[-44],r9
80000dc8:	c0 48       	rjmp	80000dd0 <usartSetBaudrate+0x34>
80000dca:	30 88       	mov	r8,8
80000dcc:	ef 48 ff d4 	st.w	r7[-44],r8
80000dd0:	ee f9 ff d4 	ld.w	r9,r7[-44]
80000dd4:	ef 49 ff f0 	st.w	r7[-16],r9
80000dd8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000ddc:	f0 0a 15 03 	lsl	r10,r8,0x3
80000de0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000de4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000de8:	f2 08 02 48 	mul	r8,r9,r8
80000dec:	a1 98       	lsr	r8,0x1
80000dee:	10 0a       	add	r10,r8
80000df0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000df4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000df8:	f2 08 02 48 	mul	r8,r9,r8
80000dfc:	f4 08 0d 08 	divu	r8,r10,r8
80000e00:	ef 48 ff f4 	st.w	r7[-12],r8
80000e04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e08:	a3 98       	lsr	r8,0x3
80000e0a:	ef 48 ff f8 	st.w	r7[-8],r8
80000e0e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e12:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000e16:	ef 48 ff fc 	st.w	r7[-4],r8
80000e1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e1e:	58 08       	cp.w	r8,0
80000e20:	c0 70       	breq	80000e2e <usartSetBaudrate+0x92>
80000e22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e26:	e0 48 ff ff 	cp.w	r8,65535
80000e2a:	e0 88 00 06 	brls	80000e36 <usartSetBaudrate+0x9a>
80000e2e:	30 18       	mov	r8,1
80000e30:	ef 48 ff d8 	st.w	r7[-40],r8
80000e34:	c2 c8       	rjmp	80000e8c <usartSetBaudrate+0xf0>
80000e36:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e3a:	70 18       	ld.w	r8,r8[0x4]
80000e3c:	10 99       	mov	r9,r8
80000e3e:	e4 19 ff f7 	andh	r9,0xfff7
80000e42:	e0 19 fe cf 	andl	r9,0xfecf
80000e46:	ef 49 ff dc 	st.w	r7[-36],r9
80000e4a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e4e:	59 08       	cp.w	r8,16
80000e50:	c0 60       	breq	80000e5c <usartSetBaudrate+0xc0>
80000e52:	e8 68 00 00 	mov	r8,524288
80000e56:	ef 48 ff e0 	st.w	r7[-32],r8
80000e5a:	c0 48       	rjmp	80000e62 <usartSetBaudrate+0xc6>
80000e5c:	30 09       	mov	r9,0
80000e5e:	ef 49 ff e0 	st.w	r7[-32],r9
80000e62:	ee f9 ff dc 	ld.w	r9,r7[-36]
80000e66:	ee f8 ff e0 	ld.w	r8,r7[-32]
80000e6a:	10 49       	or	r9,r8
80000e6c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e70:	91 19       	st.w	r8[0x4],r9
80000e72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e76:	f0 09 15 10 	lsl	r9,r8,0x10
80000e7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e7e:	10 49       	or	r9,r8
80000e80:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e84:	91 89       	st.w	r8[0x20],r9
80000e86:	30 09       	mov	r9,0
80000e88:	ef 49 ff d8 	st.w	r7[-40],r9
80000e8c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80000e90:	10 9c       	mov	r12,r8
80000e92:	2f 5d       	sub	sp,-44
80000e94:	e3 cd 80 80 	ldm	sp++,r7,pc

80000e98 <usartInit>:
80000e98:	eb cd 40 80 	pushm	r7,lr
80000e9c:	1a 97       	mov	r7,sp
80000e9e:	20 4d       	sub	sp,16
80000ea0:	ef 4c ff f8 	st.w	r7[-8],r12
80000ea4:	ef 4b ff f4 	st.w	r7[-12],r11
80000ea8:	ef 4a ff f0 	st.w	r7[-16],r10
80000eac:	fe 78 10 00 	mov	r8,-61440
80000eb0:	ef 48 ff fc 	st.w	r7[-4],r8
80000eb4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000eb8:	30 18       	mov	r8,1
80000eba:	93 28       	st.w	r9[0x8],r8
80000ebc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000ec0:	30 28       	mov	r8,2
80000ec2:	93 28       	st.w	r9[0x8],r8
80000ec4:	ee fc ff f8 	ld.w	r12,r7[-8]
80000ec8:	f0 1f 00 3b 	mcall	80000fb4 <usartInit+0x11c>
80000ecc:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000ed0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ed4:	70 08       	ld.w	r8,r8[0x0]
80000ed6:	12 9a       	mov	r10,r9
80000ed8:	10 9b       	mov	r11,r8
80000eda:	ee fc ff f8 	ld.w	r12,r7[-8]
80000ede:	f0 1f 00 37 	mcall	80000fb8 <usartInit+0x120>
80000ee2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ee6:	11 c9       	ld.ub	r9,r8[0x4]
80000ee8:	30 98       	mov	r8,9
80000eea:	f0 09 18 00 	cp.b	r9,r8
80000eee:	c0 a1       	brne	80000f02 <usartInit+0x6a>
80000ef0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ef4:	70 18       	ld.w	r8,r8[0x4]
80000ef6:	10 99       	mov	r9,r8
80000ef8:	b1 b9       	sbr	r9,0x11
80000efa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000efe:	91 19       	st.w	r8[0x4],r9
80000f00:	c0 d8       	rjmp	80000f1a <usartInit+0x82>
80000f02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f06:	70 19       	ld.w	r9,r8[0x4]
80000f08:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f0c:	11 c8       	ld.ub	r8,r8[0x4]
80000f0e:	20 58       	sub	r8,5
80000f10:	a7 68       	lsl	r8,0x6
80000f12:	10 49       	or	r9,r8
80000f14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f18:	91 19       	st.w	r8[0x4],r9
80000f1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f1e:	70 1a       	ld.w	r10,r8[0x4]
80000f20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f24:	11 d8       	ld.ub	r8,r8[0x5]
80000f26:	f0 09 15 09 	lsl	r9,r8,0x9
80000f2a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f2e:	f1 38 00 08 	ld.ub	r8,r8[8]
80000f32:	af 68       	lsl	r8,0xe
80000f34:	f3 e8 10 08 	or	r8,r9,r8
80000f38:	f5 e8 10 09 	or	r9,r10,r8
80000f3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f40:	91 19       	st.w	r8[0x4],r9
80000f42:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f46:	90 39       	ld.sh	r9,r8[0x6]
80000f48:	30 28       	mov	r8,2
80000f4a:	f0 09 19 00 	cp.h	r9,r8
80000f4e:	e0 88 00 14 	brls	80000f76 <usartInit+0xde>
80000f52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f56:	70 18       	ld.w	r8,r8[0x4]
80000f58:	10 99       	mov	r9,r8
80000f5a:	ad b9       	sbr	r9,0xd
80000f5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f60:	91 19       	st.w	r8[0x4],r9
80000f62:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f66:	90 38       	ld.sh	r8,r8[0x6]
80000f68:	5c 78       	castu.h	r8
80000f6a:	20 28       	sub	r8,2
80000f6c:	10 99       	mov	r9,r8
80000f6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f72:	91 a9       	st.w	r8[0x28],r9
80000f74:	c0 d8       	rjmp	80000f8e <usartInit+0xf6>
80000f76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f7a:	70 19       	ld.w	r9,r8[0x4]
80000f7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f80:	90 38       	ld.sh	r8,r8[0x6]
80000f82:	5c 78       	castu.h	r8
80000f84:	ad 68       	lsl	r8,0xc
80000f86:	10 49       	or	r9,r8
80000f88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f8c:	91 19       	st.w	r8[0x4],r9
80000f8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f92:	70 18       	ld.w	r8,r8[0x4]
80000f94:	10 99       	mov	r9,r8
80000f96:	e0 19 ff f0 	andl	r9,0xfff0
80000f9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f9e:	91 19       	st.w	r8[0x4],r9
80000fa0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000fa4:	35 08       	mov	r8,80
80000fa6:	93 08       	st.w	r9[0x0],r8
80000fa8:	30 08       	mov	r8,0
80000faa:	10 9c       	mov	r12,r8
80000fac:	2f cd       	sub	sp,-16
80000fae:	e3 cd 80 80 	ldm	sp++,r7,pc
80000fb2:	00 00       	add	r0,r0
80000fb4:	80 00       	ld.sh	r0,r0[0x0]
80000fb6:	0d 2c       	ld.uh	r12,r6++
80000fb8:	80 00       	ld.sh	r0,r0[0x0]
80000fba:	0d 9c       	ld.ub	r12,r6[0x1]

80000fbc <usartWriteChar>:
80000fbc:	eb cd 40 80 	pushm	r7,lr
80000fc0:	1a 97       	mov	r7,sp
80000fc2:	20 3d       	sub	sp,12
80000fc4:	ef 4c ff f8 	st.w	r7[-8],r12
80000fc8:	16 98       	mov	r8,r11
80000fca:	ef 68 ff f4 	st.b	r7[-12],r8
80000fce:	e4 68 00 00 	mov	r8,262144
80000fd2:	ef 48 ff fc 	st.w	r7[-4],r8
80000fd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fda:	58 08       	cp.w	r8,0
80000fdc:	5f 18       	srne	r8
80000fde:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000fe2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fe6:	20 18       	sub	r8,1
80000fe8:	ef 48 ff fc 	st.w	r7[-4],r8
80000fec:	12 98       	mov	r8,r9
80000fee:	ec 18 00 01 	eorl	r8,0x1
80000ff2:	5c 58       	castu.b	r8
80000ff4:	c0 71       	brne	80001002 <usartWriteChar+0x46>
80000ff6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ffa:	70 58       	ld.w	r8,r8[0x14]
80000ffc:	e2 18 00 02 	andl	r8,0x2,COH
80001000:	ce b0       	breq	80000fd6 <usartWriteChar+0x1a>
80001002:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80001006:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000100a:	91 79       	st.w	r8[0x1c],r9
8000100c:	2f dd       	sub	sp,-12
8000100e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001012:	d7 03       	nop

80001014 <usartWriteLine>:
80001014:	eb cd 40 80 	pushm	r7,lr
80001018:	1a 97       	mov	r7,sp
8000101a:	20 2d       	sub	sp,8
8000101c:	ef 4c ff fc 	st.w	r7[-4],r12
80001020:	ef 4b ff f8 	st.w	r7[-8],r11
80001024:	c1 88       	rjmp	80001054 <usartWriteLine+0x40>
80001026:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000102a:	11 88       	ld.ub	r8,r8[0x0]
8000102c:	58 a8       	cp.w	r8,10
8000102e:	c0 61       	brne	8000103a <usartWriteLine+0x26>
80001030:	30 db       	mov	r11,13
80001032:	ee fc ff fc 	ld.w	r12,r7[-4]
80001036:	f0 1f 00 0c 	mcall	80001064 <usartWriteLine+0x50>
8000103a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000103e:	11 88       	ld.ub	r8,r8[0x0]
80001040:	10 9b       	mov	r11,r8
80001042:	ee fc ff fc 	ld.w	r12,r7[-4]
80001046:	f0 1f 00 08 	mcall	80001064 <usartWriteLine+0x50>
8000104a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000104e:	2f f8       	sub	r8,-1
80001050:	ef 48 ff f8 	st.w	r7[-8],r8
80001054:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001058:	11 88       	ld.ub	r8,r8[0x0]
8000105a:	58 08       	cp.w	r8,0
8000105c:	ce 51       	brne	80001026 <usartWriteLine+0x12>
8000105e:	2f ed       	sub	sp,-8
80001060:	e3 cd 80 80 	ldm	sp++,r7,pc
80001064:	80 00       	ld.sh	r0,r0[0x0]
80001066:	0f bc       	ld.ub	r12,r7[0x3]

80001068 <timerInit>:
80001068:	d5 01       	pushm	r11,lr
8000106a:	d2 01       	pushm	r12
8000106c:	f0 1f 00 28 	mcall	8000110c <timerClearInterrupt+0x10>
80001070:	f0 1f 00 28 	mcall	80001110 <timerClearInterrupt+0x14>
80001074:	e0 6c 38 00 	mov	r12,14336
80001078:	ea 1c ff ff 	orh	r12,0xffff
8000107c:	e0 6b c0 00 	mov	r11,49152
80001080:	ea 1b 00 00 	orh	r11,0x0
80001084:	99 1b       	st.w	r12[0x4],r11
80001086:	30 1b       	mov	r11,1
80001088:	a5 6b       	lsl	r11,0x4
8000108a:	99 9b       	st.w	r12[0x24],r11
8000108c:	d2 02       	popm	r12
8000108e:	f0 1f 00 22 	mcall	80001114 <timerClearInterrupt+0x18>
80001092:	d5 02       	popm	r11,lr
80001094:	1c 9f       	mov	pc,lr

80001096 <timerReset>:
80001096:	d3 01       	pushm	r11-r12
80001098:	e0 6c 38 00 	mov	r12,14336
8000109c:	ea 1c ff ff 	orh	r12,0xffff
800010a0:	30 5b       	mov	r11,5
800010a2:	99 0b       	st.w	r12[0x0],r11
800010a4:	e0 6b 00 08 	mov	r11,8
800010a8:	ea 1b 00 00 	orh	r11,0x0
800010ac:	76 0b       	ld.w	r11,r11[0x0]
800010ae:	99 7b       	st.w	r12[0x1c],r11
800010b0:	d3 02       	popm	r11-r12
800010b2:	1c 9f       	mov	pc,lr

800010b4 <timerStop>:
800010b4:	d3 01       	pushm	r11-r12
800010b6:	e0 6c 38 00 	mov	r12,14336
800010ba:	ea 1c ff ff 	orh	r12,0xffff
800010be:	30 2b       	mov	r11,2
800010c0:	99 0b       	st.w	r12[0x0],r11
800010c2:	d3 02       	popm	r11-r12
800010c4:	1c 9f       	mov	pc,lr

800010c6 <timerRCSet>:
800010c6:	d3 01       	pushm	r11-r12
800010c8:	49 4b       	lddpc	r11,80001118 <timerClearInterrupt+0x1c>
800010ca:	97 0c       	st.w	r11[0x0],r12
800010cc:	e0 6c 38 00 	mov	r12,14336
800010d0:	ea 1c ff ff 	orh	r12,0xffff
800010d4:	76 0b       	ld.w	r11,r11[0x0]
800010d6:	99 7b       	st.w	r12[0x1c],r11
800010d8:	d3 02       	popm	r11-r12
800010da:	1c 9f       	mov	pc,lr

800010dc <timerPrescaleSet>:
800010dc:	d3 81       	pushm	r10-r12
800010de:	49 0b       	lddpc	r11,8000111c <timerClearInterrupt+0x20>
800010e0:	97 0c       	st.w	r11[0x0],r12
800010e2:	e0 6c 38 00 	mov	r12,14336
800010e6:	ea 1c ff ff 	orh	r12,0xffff
800010ea:	78 1a       	ld.w	r10,r12[0x4]
800010ec:	3f 8b       	mov	r11,-8
800010ee:	16 6a       	and	r10,r11
800010f0:	48 bb       	lddpc	r11,8000111c <timerClearInterrupt+0x20>
800010f2:	76 0b       	ld.w	r11,r11[0x0]
800010f4:	14 4b       	or	r11,r10
800010f6:	99 1b       	st.w	r12[0x4],r11
800010f8:	d3 82       	popm	r10-r12
800010fa:	1c 9f       	mov	pc,lr

800010fc <timerClearInterrupt>:
800010fc:	d2 01       	pushm	r12
800010fe:	e0 6c 38 00 	mov	r12,14336
80001102:	ea 1c ff ff 	orh	r12,0xffff
80001106:	78 8c       	ld.w	r12,r12[0x20]
80001108:	d2 02       	popm	r12
8000110a:	1c 9f       	mov	pc,lr
8000110c:	80 00       	ld.sh	r0,r0[0x0]
8000110e:	1b 66       	ld.uh	r6,--sp
80001110:	80 00       	ld.sh	r0,r0[0x0]
80001112:	10 fc       	st.b	--r8,r12
80001114:	80 00       	ld.sh	r0,r0[0x0]
80001116:	09 c8       	ld.ub	r8,r4[0x4]
80001118:	00 00       	add	r0,r0
8000111a:	00 08       	add	r8,r0
8000111c:	00 00       	add	r0,r0
8000111e:	00 0c       	add	r12,r0

80001120 <_stext>:
80001120:	49 7d       	lddpc	sp,8000117c <udata_end+0x4>
80001122:	49 80       	lddpc	r0,80001180 <udata_end+0x8>
80001124:	1a d0       	st.w	--sp,r0
80001126:	e5 cd 20 00 	ldmts	sp,sp
8000112a:	1b 00       	ld.w	r0,sp++
8000112c:	49 60       	lddpc	r0,80001184 <udata_end+0xc>
8000112e:	e3 b0 00 01 	mtsr	0x4,r0
80001132:	d5 53       	csrf	0x15
80001134:	e0 6c 0c 00 	mov	r12,3072
80001138:	ea 1c ff ff 	orh	r12,0xffff
8000113c:	e0 6b 01 07 	mov	r11,263
80001140:	99 ab       	st.w	r12[0x28],r11
80001142:	30 4b       	mov	r11,4
80001144:	99 0b       	st.w	r12[0x0],r11
80001146:	e0 6a 00 80 	mov	r10,128

8000114a <xw8>:
8000114a:	79 5b       	ld.w	r11,r12[0x54]
8000114c:	14 7b       	tst	r11,r10
8000114e:	cf e0       	breq	8000114a <xw8>
80001150:	30 5b       	mov	r11,5
80001152:	99 0b       	st.w	r12[0x0],r11

80001154 <idata_>:
80001154:	48 d0       	lddpc	r0,80001188 <udata_end+0x10>
80001156:	48 e1       	lddpc	r1,8000118c <udata_end+0x14>
80001158:	02 30       	cp.w	r0,r1
8000115a:	c0 62       	brcc	80001166 <idata_end>
8000115c:	48 d2       	lddpc	r2,80001190 <udata_end+0x18>

8000115e <idata_loop>:
8000115e:	05 04       	ld.w	r4,r2++
80001160:	00 a4       	st.w	r0++,r4
80001162:	02 30       	cp.w	r0,r1
80001164:	cf d3       	brcs	8000115e <idata_loop>

80001166 <idata_end>:
80001166:	48 c0       	lddpc	r0,80001194 <udata_end+0x1c>
80001168:	48 c1       	lddpc	r1,80001198 <udata_end+0x20>
8000116a:	02 30       	cp.w	r0,r1
8000116c:	c0 62       	brcc	80001178 <udata_end>
8000116e:	30 02       	mov	r2,0
80001170:	30 03       	mov	r3,0

80001172 <udata_loop>:
80001172:	00 a2       	st.w	r0++,r2
80001174:	02 30       	cp.w	r0,r1
80001176:	cf e3       	brcs	80001172 <udata_loop>

80001178 <udata_end>:
80001178:	48 9f       	lddpc	pc,8000119c <udata_end+0x24>
8000117a:	00 00       	add	r0,r0
8000117c:	00 01       	add	r1,r0
8000117e:	00 00       	add	r0,r0
80001180:	00 00       	add	r0,r0
80001182:	f0 00       	*unknown*
80001184:	80 00       	ld.sh	r0,r0[0x0]
80001186:	1a 00       	add	r0,sp
80001188:	00 00       	add	r0,r0
8000118a:	00 08       	add	r8,r0
8000118c:	00 00       	add	r0,r0
8000118e:	05 18       	ld.sh	r8,r2++
80001190:	80 00       	ld.sh	r0,r0[0x0]
80001192:	1e 88       	andn	r8,pc
80001194:	00 00       	add	r0,r0
80001196:	05 18       	ld.sh	r8,r2++
80001198:	00 00       	add	r0,r0
8000119a:	07 a0       	ld.ub	r0,r3[0x2]
8000119c:	80 00       	ld.sh	r0,r0[0x0]
8000119e:	00 64       	and	r4,r0

800011a0 <malloc>:
800011a0:	d4 01       	pushm	lr
800011a2:	48 48       	lddpc	r8,800011b0 <malloc+0x10>
800011a4:	18 9b       	mov	r11,r12
800011a6:	70 0c       	ld.w	r12,r8[0x0]
800011a8:	f0 1f 00 03 	mcall	800011b4 <malloc+0x14>
800011ac:	d8 02       	popm	pc
800011ae:	00 00       	add	r0,r0
800011b0:	00 00       	add	r0,r0
800011b2:	01 00       	ld.w	r0,r0++
800011b4:	80 00       	ld.sh	r0,r0[0x0]
800011b6:	11 b8       	ld.ub	r8,r8[0x3]

800011b8 <_malloc_r>:
800011b8:	d4 31       	pushm	r0-r7,lr
800011ba:	f6 c8 ff f5 	sub	r8,r11,-11
800011be:	18 95       	mov	r5,r12
800011c0:	10 97       	mov	r7,r8
800011c2:	e0 17 ff f8 	andl	r7,0xfff8
800011c6:	59 68       	cp.w	r8,22
800011c8:	f9 b7 08 10 	movls	r7,16
800011cc:	16 37       	cp.w	r7,r11
800011ce:	5f 38       	srlo	r8
800011d0:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800011d4:	c0 50       	breq	800011de <_malloc_r+0x26>
800011d6:	30 c8       	mov	r8,12
800011d8:	99 38       	st.w	r12[0xc],r8
800011da:	e0 8f 01 f3 	bral	800015c0 <_malloc_r+0x408>
800011de:	f0 1f 00 50 	mcall	8000131c <_malloc_r+0x164>
800011e2:	e0 47 01 f7 	cp.w	r7,503
800011e6:	e0 8b 00 1c 	brhi	8000121e <_malloc_r+0x66>
800011ea:	ee 03 16 03 	lsr	r3,r7,0x3
800011ee:	4c d8       	lddpc	r8,80001320 <_malloc_r+0x168>
800011f0:	f0 03 00 38 	add	r8,r8,r3<<0x3
800011f4:	70 36       	ld.w	r6,r8[0xc]
800011f6:	10 36       	cp.w	r6,r8
800011f8:	c0 61       	brne	80001204 <_malloc_r+0x4c>
800011fa:	ec c8 ff f8 	sub	r8,r6,-8
800011fe:	70 36       	ld.w	r6,r8[0xc]
80001200:	10 36       	cp.w	r6,r8
80001202:	c0 c0       	breq	8000121a <_malloc_r+0x62>
80001204:	6c 18       	ld.w	r8,r6[0x4]
80001206:	e0 18 ff fc 	andl	r8,0xfffc
8000120a:	6c 3a       	ld.w	r10,r6[0xc]
8000120c:	ec 08 00 09 	add	r9,r6,r8
80001210:	0a 9c       	mov	r12,r5
80001212:	6c 28       	ld.w	r8,r6[0x8]
80001214:	95 28       	st.w	r10[0x8],r8
80001216:	91 3a       	st.w	r8[0xc],r10
80001218:	c4 68       	rjmp	800012a4 <_malloc_r+0xec>
8000121a:	2f e3       	sub	r3,-2
8000121c:	c4 c8       	rjmp	800012b4 <_malloc_r+0xfc>
8000121e:	ee 03 16 09 	lsr	r3,r7,0x9
80001222:	c0 41       	brne	8000122a <_malloc_r+0x72>
80001224:	ee 03 16 03 	lsr	r3,r7,0x3
80001228:	c2 68       	rjmp	80001274 <_malloc_r+0xbc>
8000122a:	58 43       	cp.w	r3,4
8000122c:	e0 8b 00 06 	brhi	80001238 <_malloc_r+0x80>
80001230:	ee 03 16 06 	lsr	r3,r7,0x6
80001234:	2c 83       	sub	r3,-56
80001236:	c1 f8       	rjmp	80001274 <_malloc_r+0xbc>
80001238:	59 43       	cp.w	r3,20
8000123a:	e0 8b 00 04 	brhi	80001242 <_malloc_r+0x8a>
8000123e:	2a 53       	sub	r3,-91
80001240:	c1 a8       	rjmp	80001274 <_malloc_r+0xbc>
80001242:	e0 43 00 54 	cp.w	r3,84
80001246:	e0 8b 00 06 	brhi	80001252 <_malloc_r+0x9a>
8000124a:	ee 03 16 0c 	lsr	r3,r7,0xc
8000124e:	29 23       	sub	r3,-110
80001250:	c1 28       	rjmp	80001274 <_malloc_r+0xbc>
80001252:	e0 43 01 54 	cp.w	r3,340
80001256:	e0 8b 00 06 	brhi	80001262 <_malloc_r+0xaa>
8000125a:	ee 03 16 0f 	lsr	r3,r7,0xf
8000125e:	28 93       	sub	r3,-119
80001260:	c0 a8       	rjmp	80001274 <_malloc_r+0xbc>
80001262:	e0 43 05 54 	cp.w	r3,1364
80001266:	e0 88 00 04 	brls	8000126e <_malloc_r+0xb6>
8000126a:	37 e3       	mov	r3,126
8000126c:	c0 48       	rjmp	80001274 <_malloc_r+0xbc>
8000126e:	ee 03 16 12 	lsr	r3,r7,0x12
80001272:	28 43       	sub	r3,-124
80001274:	4a ba       	lddpc	r10,80001320 <_malloc_r+0x168>
80001276:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000127a:	74 36       	ld.w	r6,r10[0xc]
8000127c:	c1 98       	rjmp	800012ae <_malloc_r+0xf6>
8000127e:	6c 19       	ld.w	r9,r6[0x4]
80001280:	e0 19 ff fc 	andl	r9,0xfffc
80001284:	f2 07 01 0b 	sub	r11,r9,r7
80001288:	58 fb       	cp.w	r11,15
8000128a:	e0 8a 00 04 	brle	80001292 <_malloc_r+0xda>
8000128e:	20 13       	sub	r3,1
80001290:	c1 18       	rjmp	800012b2 <_malloc_r+0xfa>
80001292:	6c 38       	ld.w	r8,r6[0xc]
80001294:	58 0b       	cp.w	r11,0
80001296:	c0 b5       	brlt	800012ac <_malloc_r+0xf4>
80001298:	6c 2a       	ld.w	r10,r6[0x8]
8000129a:	ec 09 00 09 	add	r9,r6,r9
8000129e:	0a 9c       	mov	r12,r5
800012a0:	91 2a       	st.w	r8[0x8],r10
800012a2:	95 38       	st.w	r10[0xc],r8
800012a4:	72 18       	ld.w	r8,r9[0x4]
800012a6:	a1 a8       	sbr	r8,0x0
800012a8:	93 18       	st.w	r9[0x4],r8
800012aa:	cb c8       	rjmp	80001422 <_malloc_r+0x26a>
800012ac:	10 96       	mov	r6,r8
800012ae:	14 36       	cp.w	r6,r10
800012b0:	ce 71       	brne	8000127e <_malloc_r+0xc6>
800012b2:	2f f3       	sub	r3,-1
800012b4:	49 ba       	lddpc	r10,80001320 <_malloc_r+0x168>
800012b6:	f4 cc ff f8 	sub	r12,r10,-8
800012ba:	78 26       	ld.w	r6,r12[0x8]
800012bc:	18 36       	cp.w	r6,r12
800012be:	c6 e0       	breq	8000139a <_malloc_r+0x1e2>
800012c0:	6c 19       	ld.w	r9,r6[0x4]
800012c2:	e0 19 ff fc 	andl	r9,0xfffc
800012c6:	f2 07 01 08 	sub	r8,r9,r7
800012ca:	58 f8       	cp.w	r8,15
800012cc:	e0 89 00 90 	brgt	800013ec <_malloc_r+0x234>
800012d0:	99 3c       	st.w	r12[0xc],r12
800012d2:	99 2c       	st.w	r12[0x8],r12
800012d4:	58 08       	cp.w	r8,0
800012d6:	c0 55       	brlt	800012e0 <_malloc_r+0x128>
800012d8:	ec 09 00 09 	add	r9,r6,r9
800012dc:	0a 9c       	mov	r12,r5
800012de:	ce 3b       	rjmp	800012a4 <_malloc_r+0xec>
800012e0:	e0 49 01 ff 	cp.w	r9,511
800012e4:	e0 8b 00 13 	brhi	8000130a <_malloc_r+0x152>
800012e8:	a3 99       	lsr	r9,0x3
800012ea:	f4 09 00 38 	add	r8,r10,r9<<0x3
800012ee:	70 2b       	ld.w	r11,r8[0x8]
800012f0:	8d 38       	st.w	r6[0xc],r8
800012f2:	8d 2b       	st.w	r6[0x8],r11
800012f4:	97 36       	st.w	r11[0xc],r6
800012f6:	91 26       	st.w	r8[0x8],r6
800012f8:	a3 49       	asr	r9,0x2
800012fa:	74 18       	ld.w	r8,r10[0x4]
800012fc:	30 1b       	mov	r11,1
800012fe:	f6 09 09 49 	lsl	r9,r11,r9
80001302:	f1 e9 10 09 	or	r9,r8,r9
80001306:	95 19       	st.w	r10[0x4],r9
80001308:	c4 98       	rjmp	8000139a <_malloc_r+0x1e2>
8000130a:	f2 0a 16 09 	lsr	r10,r9,0x9
8000130e:	58 4a       	cp.w	r10,4
80001310:	e0 8b 00 0a 	brhi	80001324 <_malloc_r+0x16c>
80001314:	f2 0a 16 06 	lsr	r10,r9,0x6
80001318:	2c 8a       	sub	r10,-56
8000131a:	c2 38       	rjmp	80001360 <_malloc_r+0x1a8>
8000131c:	80 00       	ld.sh	r0,r0[0x0]
8000131e:	16 08       	add	r8,r11
80001320:	00 00       	add	r0,r0
80001322:	01 04       	ld.w	r4,r0++
80001324:	59 4a       	cp.w	r10,20
80001326:	e0 8b 00 04 	brhi	8000132e <_malloc_r+0x176>
8000132a:	2a 5a       	sub	r10,-91
8000132c:	c1 a8       	rjmp	80001360 <_malloc_r+0x1a8>
8000132e:	e0 4a 00 54 	cp.w	r10,84
80001332:	e0 8b 00 06 	brhi	8000133e <_malloc_r+0x186>
80001336:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000133a:	29 2a       	sub	r10,-110
8000133c:	c1 28       	rjmp	80001360 <_malloc_r+0x1a8>
8000133e:	e0 4a 01 54 	cp.w	r10,340
80001342:	e0 8b 00 06 	brhi	8000134e <_malloc_r+0x196>
80001346:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000134a:	28 9a       	sub	r10,-119
8000134c:	c0 a8       	rjmp	80001360 <_malloc_r+0x1a8>
8000134e:	e0 4a 05 54 	cp.w	r10,1364
80001352:	e0 88 00 04 	brls	8000135a <_malloc_r+0x1a2>
80001356:	37 ea       	mov	r10,126
80001358:	c0 48       	rjmp	80001360 <_malloc_r+0x1a8>
8000135a:	f2 0a 16 12 	lsr	r10,r9,0x12
8000135e:	28 4a       	sub	r10,-124
80001360:	4c 8b       	lddpc	r11,80001480 <_malloc_r+0x2c8>
80001362:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80001366:	68 28       	ld.w	r8,r4[0x8]
80001368:	08 38       	cp.w	r8,r4
8000136a:	c0 e1       	brne	80001386 <_malloc_r+0x1ce>
8000136c:	76 19       	ld.w	r9,r11[0x4]
8000136e:	a3 4a       	asr	r10,0x2
80001370:	30 1e       	mov	lr,1
80001372:	fc 0a 09 4a 	lsl	r10,lr,r10
80001376:	f3 ea 10 0a 	or	r10,r9,r10
8000137a:	10 99       	mov	r9,r8
8000137c:	97 1a       	st.w	r11[0x4],r10
8000137e:	c0 a8       	rjmp	80001392 <_malloc_r+0x1da>
80001380:	70 28       	ld.w	r8,r8[0x8]
80001382:	08 38       	cp.w	r8,r4
80001384:	c0 60       	breq	80001390 <_malloc_r+0x1d8>
80001386:	70 1a       	ld.w	r10,r8[0x4]
80001388:	e0 1a ff fc 	andl	r10,0xfffc
8000138c:	14 39       	cp.w	r9,r10
8000138e:	cf 93       	brcs	80001380 <_malloc_r+0x1c8>
80001390:	70 39       	ld.w	r9,r8[0xc]
80001392:	8d 39       	st.w	r6[0xc],r9
80001394:	8d 28       	st.w	r6[0x8],r8
80001396:	91 36       	st.w	r8[0xc],r6
80001398:	93 26       	st.w	r9[0x8],r6
8000139a:	e6 08 14 02 	asr	r8,r3,0x2
8000139e:	30 1b       	mov	r11,1
800013a0:	4b 84       	lddpc	r4,80001480 <_malloc_r+0x2c8>
800013a2:	f6 08 09 4b 	lsl	r11,r11,r8
800013a6:	68 18       	ld.w	r8,r4[0x4]
800013a8:	10 3b       	cp.w	r11,r8
800013aa:	e0 8b 00 6f 	brhi	80001488 <_malloc_r+0x2d0>
800013ae:	f7 e8 00 09 	and	r9,r11,r8
800013b2:	c0 b1       	brne	800013c8 <_malloc_r+0x210>
800013b4:	e0 13 ff fc 	andl	r3,0xfffc
800013b8:	a1 7b       	lsl	r11,0x1
800013ba:	2f c3       	sub	r3,-4
800013bc:	c0 38       	rjmp	800013c2 <_malloc_r+0x20a>
800013be:	2f c3       	sub	r3,-4
800013c0:	a1 7b       	lsl	r11,0x1
800013c2:	f7 e8 00 09 	and	r9,r11,r8
800013c6:	cf c0       	breq	800013be <_malloc_r+0x206>
800013c8:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800013cc:	06 92       	mov	r2,r3
800013ce:	1c 91       	mov	r1,lr
800013d0:	62 36       	ld.w	r6,r1[0xc]
800013d2:	c2 e8       	rjmp	8000142e <_malloc_r+0x276>
800013d4:	6c 1a       	ld.w	r10,r6[0x4]
800013d6:	e0 1a ff fc 	andl	r10,0xfffc
800013da:	f4 07 01 08 	sub	r8,r10,r7
800013de:	58 f8       	cp.w	r8,15
800013e0:	e0 8a 00 15 	brle	8000140a <_malloc_r+0x252>
800013e4:	6c 3a       	ld.w	r10,r6[0xc]
800013e6:	6c 29       	ld.w	r9,r6[0x8]
800013e8:	95 29       	st.w	r10[0x8],r9
800013ea:	93 3a       	st.w	r9[0xc],r10
800013ec:	0e 99       	mov	r9,r7
800013ee:	ec 07 00 07 	add	r7,r6,r7
800013f2:	a1 a9       	sbr	r9,0x0
800013f4:	99 37       	st.w	r12[0xc],r7
800013f6:	99 27       	st.w	r12[0x8],r7
800013f8:	8d 19       	st.w	r6[0x4],r9
800013fa:	ee 08 09 08 	st.w	r7[r8],r8
800013fe:	8f 2c       	st.w	r7[0x8],r12
80001400:	8f 3c       	st.w	r7[0xc],r12
80001402:	a1 a8       	sbr	r8,0x0
80001404:	0a 9c       	mov	r12,r5
80001406:	8f 18       	st.w	r7[0x4],r8
80001408:	c0 d8       	rjmp	80001422 <_malloc_r+0x26a>
8000140a:	6c 39       	ld.w	r9,r6[0xc]
8000140c:	58 08       	cp.w	r8,0
8000140e:	c0 f5       	brlt	8000142c <_malloc_r+0x274>
80001410:	ec 0a 00 0a 	add	r10,r6,r10
80001414:	74 18       	ld.w	r8,r10[0x4]
80001416:	a1 a8       	sbr	r8,0x0
80001418:	0a 9c       	mov	r12,r5
8000141a:	95 18       	st.w	r10[0x4],r8
8000141c:	6c 28       	ld.w	r8,r6[0x8]
8000141e:	93 28       	st.w	r9[0x8],r8
80001420:	91 39       	st.w	r8[0xc],r9
80001422:	f0 1f 00 19 	mcall	80001484 <_malloc_r+0x2cc>
80001426:	ec cc ff f8 	sub	r12,r6,-8
8000142a:	d8 32       	popm	r0-r7,pc
8000142c:	12 96       	mov	r6,r9
8000142e:	02 36       	cp.w	r6,r1
80001430:	cd 21       	brne	800013d4 <_malloc_r+0x21c>
80001432:	2f f2       	sub	r2,-1
80001434:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001438:	c0 30       	breq	8000143e <_malloc_r+0x286>
8000143a:	2f 81       	sub	r1,-8
8000143c:	cc ab       	rjmp	800013d0 <_malloc_r+0x218>
8000143e:	1c 98       	mov	r8,lr
80001440:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001444:	c0 81       	brne	80001454 <_malloc_r+0x29c>
80001446:	68 19       	ld.w	r9,r4[0x4]
80001448:	f6 08 11 ff 	rsub	r8,r11,-1
8000144c:	f3 e8 00 08 	and	r8,r9,r8
80001450:	89 18       	st.w	r4[0x4],r8
80001452:	c0 78       	rjmp	80001460 <_malloc_r+0x2a8>
80001454:	f0 c9 00 08 	sub	r9,r8,8
80001458:	20 13       	sub	r3,1
8000145a:	70 08       	ld.w	r8,r8[0x0]
8000145c:	12 38       	cp.w	r8,r9
8000145e:	cf 10       	breq	80001440 <_malloc_r+0x288>
80001460:	a1 7b       	lsl	r11,0x1
80001462:	68 18       	ld.w	r8,r4[0x4]
80001464:	10 3b       	cp.w	r11,r8
80001466:	e0 8b 00 11 	brhi	80001488 <_malloc_r+0x2d0>
8000146a:	58 0b       	cp.w	r11,0
8000146c:	c0 e0       	breq	80001488 <_malloc_r+0x2d0>
8000146e:	04 93       	mov	r3,r2
80001470:	c0 38       	rjmp	80001476 <_malloc_r+0x2be>
80001472:	2f c3       	sub	r3,-4
80001474:	a1 7b       	lsl	r11,0x1
80001476:	f7 e8 00 09 	and	r9,r11,r8
8000147a:	ca 71       	brne	800013c8 <_malloc_r+0x210>
8000147c:	cf bb       	rjmp	80001472 <_malloc_r+0x2ba>
8000147e:	00 00       	add	r0,r0
80001480:	00 00       	add	r0,r0
80001482:	01 04       	ld.w	r4,r0++
80001484:	80 00       	ld.sh	r0,r0[0x0]
80001486:	16 0a       	add	r10,r11
80001488:	68 23       	ld.w	r3,r4[0x8]
8000148a:	66 12       	ld.w	r2,r3[0x4]
8000148c:	e0 12 ff fc 	andl	r2,0xfffc
80001490:	0e 32       	cp.w	r2,r7
80001492:	5f 39       	srlo	r9
80001494:	e4 07 01 08 	sub	r8,r2,r7
80001498:	58 f8       	cp.w	r8,15
8000149a:	5f aa       	srle	r10
8000149c:	f5 e9 10 09 	or	r9,r10,r9
800014a0:	e0 80 00 a2 	breq	800015e4 <_malloc_r+0x42c>
800014a4:	4c 88       	lddpc	r8,800015c4 <_malloc_r+0x40c>
800014a6:	70 01       	ld.w	r1,r8[0x0]
800014a8:	4c 88       	lddpc	r8,800015c8 <_malloc_r+0x410>
800014aa:	2f 01       	sub	r1,-16
800014ac:	70 08       	ld.w	r8,r8[0x0]
800014ae:	0e 01       	add	r1,r7
800014b0:	5b f8       	cp.w	r8,-1
800014b2:	c0 40       	breq	800014ba <_malloc_r+0x302>
800014b4:	28 11       	sub	r1,-127
800014b6:	e0 11 ff 80 	andl	r1,0xff80
800014ba:	02 9b       	mov	r11,r1
800014bc:	0a 9c       	mov	r12,r5
800014be:	f0 1f 00 44 	mcall	800015cc <_malloc_r+0x414>
800014c2:	18 96       	mov	r6,r12
800014c4:	5b fc       	cp.w	r12,-1
800014c6:	c6 e0       	breq	800015a2 <_malloc_r+0x3ea>
800014c8:	e6 02 00 08 	add	r8,r3,r2
800014cc:	10 3c       	cp.w	r12,r8
800014ce:	c0 32       	brcc	800014d4 <_malloc_r+0x31c>
800014d0:	08 33       	cp.w	r3,r4
800014d2:	c6 81       	brne	800015a2 <_malloc_r+0x3ea>
800014d4:	4b fa       	lddpc	r10,800015d0 <_malloc_r+0x418>
800014d6:	74 09       	ld.w	r9,r10[0x0]
800014d8:	e2 09 00 09 	add	r9,r1,r9
800014dc:	95 09       	st.w	r10[0x0],r9
800014de:	10 36       	cp.w	r6,r8
800014e0:	c0 a1       	brne	800014f4 <_malloc_r+0x33c>
800014e2:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800014e6:	c0 71       	brne	800014f4 <_malloc_r+0x33c>
800014e8:	e2 02 00 02 	add	r2,r1,r2
800014ec:	68 28       	ld.w	r8,r4[0x8]
800014ee:	a1 a2       	sbr	r2,0x0
800014f0:	91 12       	st.w	r8[0x4],r2
800014f2:	c4 c8       	rjmp	8000158a <_malloc_r+0x3d2>
800014f4:	4b 5a       	lddpc	r10,800015c8 <_malloc_r+0x410>
800014f6:	74 0b       	ld.w	r11,r10[0x0]
800014f8:	5b fb       	cp.w	r11,-1
800014fa:	c0 31       	brne	80001500 <_malloc_r+0x348>
800014fc:	95 06       	st.w	r10[0x0],r6
800014fe:	c0 68       	rjmp	8000150a <_malloc_r+0x352>
80001500:	ec 09 00 09 	add	r9,r6,r9
80001504:	4b 3a       	lddpc	r10,800015d0 <_malloc_r+0x418>
80001506:	10 19       	sub	r9,r8
80001508:	95 09       	st.w	r10[0x0],r9
8000150a:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000150e:	f0 09 11 08 	rsub	r9,r8,8
80001512:	58 08       	cp.w	r8,0
80001514:	f2 08 17 10 	movne	r8,r9
80001518:	ed d8 e1 06 	addne	r6,r6,r8
8000151c:	28 08       	sub	r8,-128
8000151e:	ec 01 00 01 	add	r1,r6,r1
80001522:	0a 9c       	mov	r12,r5
80001524:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80001528:	f0 01 01 01 	sub	r1,r8,r1
8000152c:	02 9b       	mov	r11,r1
8000152e:	f0 1f 00 28 	mcall	800015cc <_malloc_r+0x414>
80001532:	4a 88       	lddpc	r8,800015d0 <_malloc_r+0x418>
80001534:	5b fc       	cp.w	r12,-1
80001536:	ec 0c 17 00 	moveq	r12,r6
8000153a:	f9 b1 00 00 	moveq	r1,0
8000153e:	70 09       	ld.w	r9,r8[0x0]
80001540:	0c 1c       	sub	r12,r6
80001542:	89 26       	st.w	r4[0x8],r6
80001544:	02 0c       	add	r12,r1
80001546:	12 01       	add	r1,r9
80001548:	a1 ac       	sbr	r12,0x0
8000154a:	91 01       	st.w	r8[0x0],r1
8000154c:	8d 1c       	st.w	r6[0x4],r12
8000154e:	08 33       	cp.w	r3,r4
80001550:	c1 d0       	breq	8000158a <_malloc_r+0x3d2>
80001552:	58 f2       	cp.w	r2,15
80001554:	e0 8b 00 05 	brhi	8000155e <_malloc_r+0x3a6>
80001558:	30 18       	mov	r8,1
8000155a:	8d 18       	st.w	r6[0x4],r8
8000155c:	c2 38       	rjmp	800015a2 <_malloc_r+0x3ea>
8000155e:	30 59       	mov	r9,5
80001560:	20 c2       	sub	r2,12
80001562:	e0 12 ff f8 	andl	r2,0xfff8
80001566:	e6 02 00 08 	add	r8,r3,r2
8000156a:	91 29       	st.w	r8[0x8],r9
8000156c:	91 19       	st.w	r8[0x4],r9
8000156e:	66 18       	ld.w	r8,r3[0x4]
80001570:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001574:	e5 e8 10 08 	or	r8,r2,r8
80001578:	87 18       	st.w	r3[0x4],r8
8000157a:	58 f2       	cp.w	r2,15
8000157c:	e0 88 00 07 	brls	8000158a <_malloc_r+0x3d2>
80001580:	e6 cb ff f8 	sub	r11,r3,-8
80001584:	0a 9c       	mov	r12,r5
80001586:	f0 1f 00 14 	mcall	800015d4 <_malloc_r+0x41c>
8000158a:	49 49       	lddpc	r9,800015d8 <_malloc_r+0x420>
8000158c:	72 0a       	ld.w	r10,r9[0x0]
8000158e:	49 18       	lddpc	r8,800015d0 <_malloc_r+0x418>
80001590:	70 08       	ld.w	r8,r8[0x0]
80001592:	14 38       	cp.w	r8,r10
80001594:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001598:	49 19       	lddpc	r9,800015dc <_malloc_r+0x424>
8000159a:	72 0a       	ld.w	r10,r9[0x0]
8000159c:	14 38       	cp.w	r8,r10
8000159e:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800015a2:	68 28       	ld.w	r8,r4[0x8]
800015a4:	70 18       	ld.w	r8,r8[0x4]
800015a6:	e0 18 ff fc 	andl	r8,0xfffc
800015aa:	0e 38       	cp.w	r8,r7
800015ac:	5f 39       	srlo	r9
800015ae:	0e 18       	sub	r8,r7
800015b0:	58 f8       	cp.w	r8,15
800015b2:	5f aa       	srle	r10
800015b4:	f5 e9 10 09 	or	r9,r10,r9
800015b8:	c1 60       	breq	800015e4 <_malloc_r+0x42c>
800015ba:	0a 9c       	mov	r12,r5
800015bc:	f0 1f 00 09 	mcall	800015e0 <_malloc_r+0x428>
800015c0:	d8 3a       	popm	r0-r7,pc,r12=0
800015c2:	00 00       	add	r0,r0
800015c4:	00 00       	add	r0,r0
800015c6:	06 2c       	rsub	r12,r3
800015c8:	00 00       	add	r0,r0
800015ca:	05 10       	ld.sh	r0,r2++
800015cc:	80 00       	ld.sh	r0,r0[0x0]
800015ce:	16 0c       	add	r12,r11
800015d0:	00 00       	add	r0,r0
800015d2:	06 30       	cp.w	r0,r3
800015d4:	80 00       	ld.sh	r0,r0[0x0]
800015d6:	17 28       	ld.uh	r8,r11++
800015d8:	00 00       	add	r0,r0
800015da:	06 28       	rsub	r8,r3
800015dc:	00 00       	add	r0,r0
800015de:	06 24       	rsub	r4,r3
800015e0:	80 00       	ld.sh	r0,r0[0x0]
800015e2:	16 0a       	add	r10,r11
800015e4:	68 26       	ld.w	r6,r4[0x8]
800015e6:	a1 a8       	sbr	r8,0x0
800015e8:	0e 99       	mov	r9,r7
800015ea:	a1 a9       	sbr	r9,0x0
800015ec:	8d 19       	st.w	r6[0x4],r9
800015ee:	ec 07 00 07 	add	r7,r6,r7
800015f2:	0a 9c       	mov	r12,r5
800015f4:	89 27       	st.w	r4[0x8],r7
800015f6:	8f 18       	st.w	r7[0x4],r8
800015f8:	f0 1f 00 03 	mcall	80001604 <_malloc_r+0x44c>
800015fc:	ec cc ff f8 	sub	r12,r6,-8
80001600:	d8 32       	popm	r0-r7,pc
80001602:	00 00       	add	r0,r0
80001604:	80 00       	ld.sh	r0,r0[0x0]
80001606:	16 0a       	add	r10,r11

80001608 <__malloc_lock>:
80001608:	5e fc       	retal	r12

8000160a <__malloc_unlock>:
8000160a:	5e fc       	retal	r12

8000160c <_sbrk_r>:
8000160c:	d4 21       	pushm	r4-r7,lr
8000160e:	30 08       	mov	r8,0
80001610:	18 97       	mov	r7,r12
80001612:	48 76       	lddpc	r6,8000162c <_sbrk_r+0x20>
80001614:	16 9c       	mov	r12,r11
80001616:	8d 08       	st.w	r6[0x0],r8
80001618:	f0 1f 00 06 	mcall	80001630 <_sbrk_r+0x24>
8000161c:	5b fc       	cp.w	r12,-1
8000161e:	c0 51       	brne	80001628 <_sbrk_r+0x1c>
80001620:	6c 08       	ld.w	r8,r6[0x0]
80001622:	58 08       	cp.w	r8,0
80001624:	ef f8 1a 03 	st.wne	r7[0xc],r8
80001628:	d8 22       	popm	r4-r7,pc
8000162a:	00 00       	add	r0,r0
8000162c:	00 00       	add	r0,r0
8000162e:	07 98       	ld.ub	r8,r3[0x1]
80001630:	80 00       	ld.sh	r0,r0[0x0]
80001632:	16 34       	cp.w	r4,r11

80001634 <_sbrk>:
80001634:	d4 01       	pushm	lr
80001636:	48 c8       	lddpc	r8,80001664 <_sbrk+0x30>
80001638:	70 09       	ld.w	r9,r8[0x0]
8000163a:	58 09       	cp.w	r9,0
8000163c:	c0 31       	brne	80001642 <_sbrk+0xe>
8000163e:	48 b9       	lddpc	r9,80001668 <_sbrk+0x34>
80001640:	91 09       	st.w	r8[0x0],r9
80001642:	48 99       	lddpc	r9,80001664 <_sbrk+0x30>
80001644:	48 aa       	lddpc	r10,8000166c <_sbrk+0x38>
80001646:	72 08       	ld.w	r8,r9[0x0]
80001648:	f0 0c 00 0c 	add	r12,r8,r12
8000164c:	14 3c       	cp.w	r12,r10
8000164e:	e0 8b 00 04 	brhi	80001656 <_sbrk+0x22>
80001652:	93 0c       	st.w	r9[0x0],r12
80001654:	c0 68       	rjmp	80001660 <_sbrk+0x2c>
80001656:	f0 1f 00 07 	mcall	80001670 <_sbrk+0x3c>
8000165a:	30 c8       	mov	r8,12
8000165c:	99 08       	st.w	r12[0x0],r8
8000165e:	3f f8       	mov	r8,-1
80001660:	10 9c       	mov	r12,r8
80001662:	d8 02       	popm	pc
80001664:	00 00       	add	r0,r0
80001666:	06 58       	eor	r8,r3
80001668:	00 00       	add	r0,r0
8000166a:	07 a0       	ld.ub	r0,r3[0x2]
8000166c:	00 00       	add	r0,r0
8000166e:	e0 00       	*unknown*
80001670:	80 00       	ld.sh	r0,r0[0x0]
80001672:	16 74       	tst	r4,r11

80001674 <__errno>:
80001674:	48 28       	lddpc	r8,8000167c <__errno+0x8>
80001676:	70 0c       	ld.w	r12,r8[0x0]
80001678:	2f 4c       	sub	r12,-12
8000167a:	5e fc       	retal	r12
8000167c:	00 00       	add	r0,r0
8000167e:	01 00       	ld.w	r0,r0++

80001680 <_malloc_trim_r>:
80001680:	d4 21       	pushm	r4-r7,lr
80001682:	16 95       	mov	r5,r11
80001684:	18 97       	mov	r7,r12
80001686:	f0 1f 00 23 	mcall	80001710 <_malloc_trim_r+0x90>
8000168a:	4a 34       	lddpc	r4,80001714 <_malloc_trim_r+0x94>
8000168c:	68 28       	ld.w	r8,r4[0x8]
8000168e:	70 16       	ld.w	r6,r8[0x4]
80001690:	e0 16 ff fc 	andl	r6,0xfffc
80001694:	ec c8 ff 91 	sub	r8,r6,-111
80001698:	f0 05 01 05 	sub	r5,r8,r5
8000169c:	e0 15 ff 80 	andl	r5,0xff80
800016a0:	ea c5 00 80 	sub	r5,r5,128
800016a4:	e0 45 00 7f 	cp.w	r5,127
800016a8:	e0 8a 00 23 	brle	800016ee <_malloc_trim_r+0x6e>
800016ac:	30 0b       	mov	r11,0
800016ae:	0e 9c       	mov	r12,r7
800016b0:	f0 1f 00 1a 	mcall	80001718 <_malloc_trim_r+0x98>
800016b4:	68 28       	ld.w	r8,r4[0x8]
800016b6:	0c 08       	add	r8,r6
800016b8:	10 3c       	cp.w	r12,r8
800016ba:	c1 a1       	brne	800016ee <_malloc_trim_r+0x6e>
800016bc:	ea 0b 11 00 	rsub	r11,r5,0
800016c0:	0e 9c       	mov	r12,r7
800016c2:	f0 1f 00 16 	mcall	80001718 <_malloc_trim_r+0x98>
800016c6:	5b fc       	cp.w	r12,-1
800016c8:	c1 71       	brne	800016f6 <_malloc_trim_r+0x76>
800016ca:	30 0b       	mov	r11,0
800016cc:	0e 9c       	mov	r12,r7
800016ce:	f0 1f 00 13 	mcall	80001718 <_malloc_trim_r+0x98>
800016d2:	68 28       	ld.w	r8,r4[0x8]
800016d4:	f8 08 01 09 	sub	r9,r12,r8
800016d8:	58 f9       	cp.w	r9,15
800016da:	e0 8a 00 0a 	brle	800016ee <_malloc_trim_r+0x6e>
800016de:	a1 a9       	sbr	r9,0x0
800016e0:	91 19       	st.w	r8[0x4],r9
800016e2:	48 f8       	lddpc	r8,8000171c <_malloc_trim_r+0x9c>
800016e4:	70 09       	ld.w	r9,r8[0x0]
800016e6:	48 f8       	lddpc	r8,80001720 <_malloc_trim_r+0xa0>
800016e8:	f8 09 01 09 	sub	r9,r12,r9
800016ec:	91 09       	st.w	r8[0x0],r9
800016ee:	0e 9c       	mov	r12,r7
800016f0:	f0 1f 00 0d 	mcall	80001724 <_malloc_trim_r+0xa4>
800016f4:	d8 2a       	popm	r4-r7,pc,r12=0
800016f6:	68 28       	ld.w	r8,r4[0x8]
800016f8:	0a 16       	sub	r6,r5
800016fa:	a1 a6       	sbr	r6,0x0
800016fc:	91 16       	st.w	r8[0x4],r6
800016fe:	48 98       	lddpc	r8,80001720 <_malloc_trim_r+0xa0>
80001700:	70 09       	ld.w	r9,r8[0x0]
80001702:	0a 19       	sub	r9,r5
80001704:	0e 9c       	mov	r12,r7
80001706:	91 09       	st.w	r8[0x0],r9
80001708:	f0 1f 00 07 	mcall	80001724 <_malloc_trim_r+0xa4>
8000170c:	da 2a       	popm	r4-r7,pc,r12=1
8000170e:	00 00       	add	r0,r0
80001710:	80 00       	ld.sh	r0,r0[0x0]
80001712:	16 08       	add	r8,r11
80001714:	00 00       	add	r0,r0
80001716:	01 04       	ld.w	r4,r0++
80001718:	80 00       	ld.sh	r0,r0[0x0]
8000171a:	16 0c       	add	r12,r11
8000171c:	00 00       	add	r0,r0
8000171e:	05 10       	ld.sh	r0,r2++
80001720:	00 00       	add	r0,r0
80001722:	06 30       	cp.w	r0,r3
80001724:	80 00       	ld.sh	r0,r0[0x0]
80001726:	16 0a       	add	r10,r11

80001728 <_free_r>:
80001728:	d4 21       	pushm	r4-r7,lr
8000172a:	16 96       	mov	r6,r11
8000172c:	18 97       	mov	r7,r12
8000172e:	58 0b       	cp.w	r11,0
80001730:	e0 80 00 c8 	breq	800018c0 <_free_r+0x198>
80001734:	f0 1f 00 4c 	mcall	80001864 <_free_r+0x13c>
80001738:	20 86       	sub	r6,8
8000173a:	4c ca       	lddpc	r10,80001868 <_free_r+0x140>
8000173c:	6c 18       	ld.w	r8,r6[0x4]
8000173e:	74 2e       	ld.w	lr,r10[0x8]
80001740:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001744:	a1 c8       	cbr	r8,0x0
80001746:	ec 08 00 09 	add	r9,r6,r8
8000174a:	72 1b       	ld.w	r11,r9[0x4]
8000174c:	e0 1b ff fc 	andl	r11,0xfffc
80001750:	1c 39       	cp.w	r9,lr
80001752:	c1 d1       	brne	8000178c <_free_r+0x64>
80001754:	f6 08 00 08 	add	r8,r11,r8
80001758:	58 0c       	cp.w	r12,0
8000175a:	c0 81       	brne	8000176a <_free_r+0x42>
8000175c:	6c 09       	ld.w	r9,r6[0x0]
8000175e:	12 16       	sub	r6,r9
80001760:	12 08       	add	r8,r9
80001762:	6c 3b       	ld.w	r11,r6[0xc]
80001764:	6c 29       	ld.w	r9,r6[0x8]
80001766:	97 29       	st.w	r11[0x8],r9
80001768:	93 3b       	st.w	r9[0xc],r11
8000176a:	10 99       	mov	r9,r8
8000176c:	95 26       	st.w	r10[0x8],r6
8000176e:	a1 a9       	sbr	r9,0x0
80001770:	8d 19       	st.w	r6[0x4],r9
80001772:	4b f9       	lddpc	r9,8000186c <_free_r+0x144>
80001774:	72 09       	ld.w	r9,r9[0x0]
80001776:	12 38       	cp.w	r8,r9
80001778:	c0 63       	brcs	80001784 <_free_r+0x5c>
8000177a:	4b e8       	lddpc	r8,80001870 <_free_r+0x148>
8000177c:	0e 9c       	mov	r12,r7
8000177e:	70 0b       	ld.w	r11,r8[0x0]
80001780:	f0 1f 00 3d 	mcall	80001874 <_free_r+0x14c>
80001784:	0e 9c       	mov	r12,r7
80001786:	f0 1f 00 3d 	mcall	80001878 <_free_r+0x150>
8000178a:	d8 22       	popm	r4-r7,pc
8000178c:	93 1b       	st.w	r9[0x4],r11
8000178e:	58 0c       	cp.w	r12,0
80001790:	c0 30       	breq	80001796 <_free_r+0x6e>
80001792:	30 0c       	mov	r12,0
80001794:	c1 08       	rjmp	800017b4 <_free_r+0x8c>
80001796:	6c 0e       	ld.w	lr,r6[0x0]
80001798:	f4 c5 ff f8 	sub	r5,r10,-8
8000179c:	1c 16       	sub	r6,lr
8000179e:	1c 08       	add	r8,lr
800017a0:	6c 2e       	ld.w	lr,r6[0x8]
800017a2:	0a 3e       	cp.w	lr,r5
800017a4:	f9 bc 00 01 	moveq	r12,1
800017a8:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800017ac:	eb fe 1a 02 	st.wne	r5[0x8],lr
800017b0:	fd f5 1a 03 	st.wne	lr[0xc],r5
800017b4:	f2 0b 00 0e 	add	lr,r9,r11
800017b8:	7c 1e       	ld.w	lr,lr[0x4]
800017ba:	ed be 00 00 	bld	lr,0x0
800017be:	c1 30       	breq	800017e4 <_free_r+0xbc>
800017c0:	16 08       	add	r8,r11
800017c2:	58 0c       	cp.w	r12,0
800017c4:	c0 c1       	brne	800017dc <_free_r+0xb4>
800017c6:	4a 9e       	lddpc	lr,80001868 <_free_r+0x140>
800017c8:	72 2b       	ld.w	r11,r9[0x8]
800017ca:	2f 8e       	sub	lr,-8
800017cc:	1c 3b       	cp.w	r11,lr
800017ce:	c0 71       	brne	800017dc <_free_r+0xb4>
800017d0:	97 36       	st.w	r11[0xc],r6
800017d2:	97 26       	st.w	r11[0x8],r6
800017d4:	8d 2b       	st.w	r6[0x8],r11
800017d6:	8d 3b       	st.w	r6[0xc],r11
800017d8:	30 1c       	mov	r12,1
800017da:	c0 58       	rjmp	800017e4 <_free_r+0xbc>
800017dc:	72 2b       	ld.w	r11,r9[0x8]
800017de:	72 39       	ld.w	r9,r9[0xc]
800017e0:	93 2b       	st.w	r9[0x8],r11
800017e2:	97 39       	st.w	r11[0xc],r9
800017e4:	10 99       	mov	r9,r8
800017e6:	ec 08 09 08 	st.w	r6[r8],r8
800017ea:	a1 a9       	sbr	r9,0x0
800017ec:	8d 19       	st.w	r6[0x4],r9
800017ee:	58 0c       	cp.w	r12,0
800017f0:	c6 51       	brne	800018ba <_free_r+0x192>
800017f2:	e0 48 01 ff 	cp.w	r8,511
800017f6:	e0 8b 00 13 	brhi	8000181c <_free_r+0xf4>
800017fa:	a3 98       	lsr	r8,0x3
800017fc:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001800:	72 2b       	ld.w	r11,r9[0x8]
80001802:	8d 39       	st.w	r6[0xc],r9
80001804:	8d 2b       	st.w	r6[0x8],r11
80001806:	97 36       	st.w	r11[0xc],r6
80001808:	93 26       	st.w	r9[0x8],r6
8000180a:	a3 48       	asr	r8,0x2
8000180c:	74 19       	ld.w	r9,r10[0x4]
8000180e:	30 1b       	mov	r11,1
80001810:	f6 08 09 48 	lsl	r8,r11,r8
80001814:	f3 e8 10 08 	or	r8,r9,r8
80001818:	95 18       	st.w	r10[0x4],r8
8000181a:	c5 08       	rjmp	800018ba <_free_r+0x192>
8000181c:	f0 0b 16 09 	lsr	r11,r8,0x9
80001820:	58 4b       	cp.w	r11,4
80001822:	e0 8b 00 06 	brhi	8000182e <_free_r+0x106>
80001826:	f0 0b 16 06 	lsr	r11,r8,0x6
8000182a:	2c 8b       	sub	r11,-56
8000182c:	c2 b8       	rjmp	80001882 <_free_r+0x15a>
8000182e:	59 4b       	cp.w	r11,20
80001830:	e0 8b 00 04 	brhi	80001838 <_free_r+0x110>
80001834:	2a 5b       	sub	r11,-91
80001836:	c2 68       	rjmp	80001882 <_free_r+0x15a>
80001838:	e0 4b 00 54 	cp.w	r11,84
8000183c:	e0 8b 00 06 	brhi	80001848 <_free_r+0x120>
80001840:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001844:	29 2b       	sub	r11,-110
80001846:	c1 e8       	rjmp	80001882 <_free_r+0x15a>
80001848:	e0 4b 01 54 	cp.w	r11,340
8000184c:	e0 8b 00 06 	brhi	80001858 <_free_r+0x130>
80001850:	f0 0b 16 0f 	lsr	r11,r8,0xf
80001854:	28 9b       	sub	r11,-119
80001856:	c1 68       	rjmp	80001882 <_free_r+0x15a>
80001858:	e0 4b 05 54 	cp.w	r11,1364
8000185c:	e0 88 00 10 	brls	8000187c <_free_r+0x154>
80001860:	37 eb       	mov	r11,126
80001862:	c1 08       	rjmp	80001882 <_free_r+0x15a>
80001864:	80 00       	ld.sh	r0,r0[0x0]
80001866:	16 08       	add	r8,r11
80001868:	00 00       	add	r0,r0
8000186a:	01 04       	ld.w	r4,r0++
8000186c:	00 00       	add	r0,r0
8000186e:	05 0c       	ld.w	r12,r2++
80001870:	00 00       	add	r0,r0
80001872:	06 2c       	rsub	r12,r3
80001874:	80 00       	ld.sh	r0,r0[0x0]
80001876:	16 80       	andn	r0,r11
80001878:	80 00       	ld.sh	r0,r0[0x0]
8000187a:	16 0a       	add	r10,r11
8000187c:	f0 0b 16 12 	lsr	r11,r8,0x12
80001880:	28 4b       	sub	r11,-124
80001882:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80001886:	78 29       	ld.w	r9,r12[0x8]
80001888:	18 39       	cp.w	r9,r12
8000188a:	c0 e1       	brne	800018a6 <_free_r+0x17e>
8000188c:	74 18       	ld.w	r8,r10[0x4]
8000188e:	a3 4b       	asr	r11,0x2
80001890:	30 1c       	mov	r12,1
80001892:	f8 0b 09 4b 	lsl	r11,r12,r11
80001896:	f1 eb 10 0b 	or	r11,r8,r11
8000189a:	12 98       	mov	r8,r9
8000189c:	95 1b       	st.w	r10[0x4],r11
8000189e:	c0 a8       	rjmp	800018b2 <_free_r+0x18a>
800018a0:	72 29       	ld.w	r9,r9[0x8]
800018a2:	18 39       	cp.w	r9,r12
800018a4:	c0 60       	breq	800018b0 <_free_r+0x188>
800018a6:	72 1a       	ld.w	r10,r9[0x4]
800018a8:	e0 1a ff fc 	andl	r10,0xfffc
800018ac:	14 38       	cp.w	r8,r10
800018ae:	cf 93       	brcs	800018a0 <_free_r+0x178>
800018b0:	72 38       	ld.w	r8,r9[0xc]
800018b2:	8d 38       	st.w	r6[0xc],r8
800018b4:	8d 29       	st.w	r6[0x8],r9
800018b6:	93 36       	st.w	r9[0xc],r6
800018b8:	91 26       	st.w	r8[0x8],r6
800018ba:	0e 9c       	mov	r12,r7
800018bc:	f0 1f 00 02 	mcall	800018c4 <_free_r+0x19c>
800018c0:	d8 22       	popm	r4-r7,pc
800018c2:	00 00       	add	r0,r0
800018c4:	80 00       	ld.sh	r0,r0[0x0]
800018c6:	16 0a       	add	r10,r11

Disassembly of section .exception:

80001a00 <_evba>:
	...

80001a28 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001a28:	c7 a8       	rjmp	80001b1c <privilegedCalls>
	...

80001b00 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001b00:	1c 9f       	mov	pc,lr

80001b02 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001b02:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001b06:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
80001b0a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
80001b0e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001b12:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001b14:	c0 31       	brne	80001b1a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001b16:	4b 9c       	lddpc	r12,80001bf8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001b18:	18 9f       	mov	pc,r12

80001b1a <_int0_exit>:
_int0_exit:
	rete
80001b1a:	d6 03       	rete

80001b1c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
80001b1c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
80001b1e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001b20:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001b22:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001b24:	9b 3c       	st.w	sp[0xc],r12

80001b26 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001b26:	4b 6c       	lddpc	r12,80001bfc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001b28:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
80001b2a:	c0 61       	brne	80001b36 <priv_interruptenable>
	ld.w r12,sp[USERSR]
80001b2c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
80001b2e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001b30:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001b32:	d3 02       	popm	r11-r12
	rete
80001b34:	d6 03       	rete

80001b36 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001b36:	4b 3c       	lddpc	r12,80001c00 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001b38:	18 3b       	cp.w	r11,r12
	brne privexception
80001b3a:	c0 61       	brne	80001b46 <privexception>
	ld.w r12,sp[USERSR]
80001b3c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
80001b3e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001b40:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001b42:	d3 02       	popm	r11-r12
	rete
80001b44:	d6 03       	rete

80001b46 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001b46:	c0 08       	rjmp	80001b46 <privexception>

80001b48 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001b48:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
80001b4a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
80001b4e:	4a ec       	lddpc	r12,80001c04 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001b50:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001b52:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001b54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001b58:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
80001b5c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001b60:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001b62:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001b64:	1c 9f       	mov	pc,lr

80001b66 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001b66:	d3 03       	ssrf	0x10
	mov pc,lr
80001b68:	1c 9f       	mov	pc,lr

80001b6a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
80001b6a:	d5 03       	csrf	0x10
	mov pc,lr
80001b6c:	1c 9f       	mov	pc,lr

80001b6e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
80001b6e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001b72:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001b74:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001b78:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
80001b7c:	1c 9f       	mov	pc,lr

80001b7e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001b7e:	4a 3c       	lddpc	r12,80001c08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001b80:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001b82:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001b84:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001b86:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001b88:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
80001b8a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
80001b8c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
80001b8e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001b90:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001b92:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001b94:	33 40       	mov	r0,52
	add r0,r12
80001b96:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001b98:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
80001b9c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
80001b9e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
80001ba2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
80001ba4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
80001ba6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
80001ba8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
80001baa:	1a 90       	mov	r0,sp
	st.w --sp,r0
80001bac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80001bae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
80001bb2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
80001bb4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
80001bb6:	1c 9f       	mov	pc,lr

80001bb8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001bb8:	49 4c       	lddpc	r12,80001c08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001bba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
80001bbc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80001bbe:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80001bc0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
80001bc4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
80001bc6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
80001bc8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80001bca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
80001bcc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80001bce:	33 40       	mov	r0,52
	add r0,r12
80001bd0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80001bd2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80001bd6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
80001bd8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
80001bda:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
80001bdc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
80001bde:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
80001be0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
80001be2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
80001be4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
80001be6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
80001be8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80001bea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
80001bec:	d4 01       	pushm	lr
	call timerStart
80001bee:	f0 1f 00 08 	mcall	80001c0c <contextRestoreFromISR+0x54>
	popm lr
80001bf2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
80001bf4:	1c 9f       	mov	pc,lr
80001bf6:	00 00       	add	r0,r0
80001bf8:	80 00       	ld.sh	r0,r0[0x0]
80001bfa:	09 2c       	ld.uh	r12,r4++
80001bfc:	80 00       	ld.sh	r0,r0[0x0]
80001bfe:	1b 66       	ld.uh	r6,--sp
80001c00:	80 00       	ld.sh	r0,r0[0x0]
80001c02:	1b 6a       	ld.uh	r10,--sp
80001c04:	80 00       	ld.sh	r0,r0[0x0]
80001c06:	1a 00       	add	r0,sp
80001c08:	00 00       	add	r0,r0
80001c0a:	07 14       	ld.sh	r4,r3++
80001c0c:	80 00       	ld.sh	r0,r0[0x0]
80001c0e:	10 96       	mov	r6,r8
	...
