
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001adc  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001c00  80001c00  00002000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80002000  80002000  00002400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002084  80002084  00002484  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80002088  00002808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002594  00002d14  2**0
                  ALLOC
  9 .bss          00000190  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000d958  000006a8  000006a8  00000000  2**0
                  ALLOC
 11 .comment      000000a0  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000005c0  00000000  00000000  00002db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000a14  00000000  00000000  00003378  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c57a  00000000  00000000  00003d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00002099  00000000  00000000  00010306  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000479b  00000000  00000000  0001239f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000c3c  00000000  00000000  00016b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001cc6  00000000  00000000  00017778  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00001915  00000000  00000000  0001943e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 0053451e  00000000  00000000  0001ad53  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 00000508  00000000  00000000  0054f271  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	12 b4       	st.h	r9++,r4

Disassembly of section .text:

80000008 <ROSA_semaphoreCreate>:
 *
 * Comment:
 * 	Create a semaphore
 *
 **********************************************************/
int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t ** mutex, uint8_t ceiling) {
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 2d       	sub	sp,8
80000010:	ef 4c ff fc 	st.w	r7[-4],r12
80000014:	16 98       	mov	r8,r11
80000016:	ef 68 ff f8 	st.b	r7[-8],r8
	*mutex = (ROSA_semaphoreHandle_t*) malloc(sizeof(ROSA_semaphoreHandle_t*));
8000001a:	30 4c       	mov	r12,4
8000001c:	f0 1f 00 0c 	mcall	8000004c <ROSA_semaphoreCreate+0x44>
80000020:	18 98       	mov	r8,r12
80000022:	10 99       	mov	r9,r8
80000024:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000028:	91 09       	st.w	r8[0x0],r9
	(*mutex)->holder = NULL;
8000002a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000002e:	70 08       	ld.w	r8,r8[0x0]
80000030:	30 09       	mov	r9,0
80000032:	91 09       	st.w	r8[0x0],r9
	(*mutex)->ceiling = ceiling;
80000034:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000038:	70 09       	ld.w	r9,r8[0x0]
8000003a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000003e:	b2 c8       	st.b	r9[0x4],r8
	
	return 0;
80000040:	30 08       	mov	r8,0
}
80000042:	10 9c       	mov	r12,r8
80000044:	2f ed       	sub	sp,-8
80000046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000004a:	00 00       	add	r0,r0
8000004c:	80 00       	ld.sh	r0,r0[0x0]
8000004e:	13 ac       	ld.ub	r12,r9[0x2]

80000050 <ROSA_semaphoreLock>:
 *
 * Comment:
 * 	Lock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t ** mutex) {
80000050:	eb cd 40 80 	pushm	r7,lr
80000054:	1a 97       	mov	r7,sp
80000056:	20 1d       	sub	sp,4
80000058:	ef 4c ff fc 	st.w	r7[-4],r12
	while ((*mutex)->holder != NULL) {
8000005c:	c0 38       	rjmp	80000062 <ROSA_semaphoreLock+0x12>
		ROSA_yield();	
8000005e:	f0 1f 00 0a 	mcall	80000084 <ROSA_semaphoreLock+0x34>
 * Comment:
 * 	Lock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t ** mutex) {
	while ((*mutex)->holder != NULL) {
80000062:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000066:	70 08       	ld.w	r8,r8[0x0]
80000068:	70 08       	ld.w	r8,r8[0x0]
8000006a:	58 08       	cp.w	r8,0
8000006c:	cf 91       	brne	8000005e <ROSA_semaphoreLock+0xe>
		ROSA_yield();	
	}
	
	(*mutex)->holder = EXECTASK;
8000006e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000072:	70 08       	ld.w	r8,r8[0x0]
80000074:	48 59       	lddpc	r9,80000088 <ROSA_semaphoreLock+0x38>
80000076:	72 09       	ld.w	r9,r9[0x0]
80000078:	91 09       	st.w	r8[0x0],r9
	//EXECTASK->priority=mutex->ceiling;
	//*PA[EXECTASK->priority]->nexttcb=mutex->holder;
	// ... raise priority of E
	// ... move it to the corresponded rQi by using priority array.
	
	return 0;
8000007a:	30 08       	mov	r8,0
}
8000007c:	10 9c       	mov	r12,r8
8000007e:	2f fd       	sub	sp,-4
80000080:	e3 cd 80 80 	ldm	sp++,r7,pc
80000084:	80 00       	ld.sh	r0,r0[0x0]
80000086:	07 8e       	ld.ub	lr,r3[0x0]
80000088:	00 00       	add	r0,r0
8000008a:	06 20       	rsub	r0,r3

8000008c <ROSA_semaphoreUnlock>:
 *
 * Comment:
 * 	Unlock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreUnlock(ROSA_semaphoreHandle_t ** mutex) {
8000008c:	eb cd 40 80 	pushm	r7,lr
80000090:	1a 97       	mov	r7,sp
80000092:	20 1d       	sub	sp,4
80000094:	ef 4c ff fc 	st.w	r7[-4],r12
	if ((*mutex)->holder == EXECTASK) {
80000098:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000009c:	70 08       	ld.w	r8,r8[0x0]
8000009e:	70 09       	ld.w	r9,r8[0x0]
800000a0:	48 78       	lddpc	r8,800000bc <ROSA_semaphoreUnlock+0x30>
800000a2:	70 08       	ld.w	r8,r8[0x0]
800000a4:	10 39       	cp.w	r9,r8
800000a6:	c0 61       	brne	800000b2 <ROSA_semaphoreUnlock+0x26>
		(*mutex)->holder = NULL;	
800000a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000ac:	70 08       	ld.w	r8,r8[0x0]
800000ae:	30 09       	mov	r9,0
800000b0:	91 09       	st.w	r8[0x0],r9
	}
	
	return 0;
800000b2:	30 08       	mov	r8,0
}
800000b4:	10 9c       	mov	r12,r8
800000b6:	2f fd       	sub	sp,-4
800000b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800000bc:	00 00       	add	r0,r0
800000be:	06 20       	rsub	r0,r3

800000c0 <usart_options>:
800000c0:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 31     ............tsk1
800000d0:	00 00 00 00 74 73 6b 32 00 00 00 00 74 73 6b 33     ....tsk2....tsk3
800000e0:	00 00 00 00                                         ....

800000e4 <task1>:
/*************************************************************
 * Task1
 * Blink LED0
 ************************************************************/
void task1(void)
{
800000e4:	eb cd 40 80 	pushm	r7,lr
800000e8:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_delay(2000);
800000ea:	e0 6a 07 d0 	mov	r10,2000
800000ee:	30 0b       	mov	r11,0
800000f0:	f0 1f 00 0a 	mcall	80000118 <task1+0x34>
		ROSA_semaphoreLock(&mutex);
800000f4:	48 ac       	lddpc	r12,8000011c <task1+0x38>
800000f6:	f0 1f 00 0b 	mcall	80000120 <task1+0x3c>
		ledOn(LED0_GPIO);
800000fa:	33 bc       	mov	r12,59
800000fc:	f0 1f 00 0a 	mcall	80000124 <task1+0x40>
		ROSA_delay(500);
80000100:	e0 6a 01 f4 	mov	r10,500
80000104:	30 0b       	mov	r11,0
80000106:	f0 1f 00 05 	mcall	80000118 <task1+0x34>
		ROSA_semaphoreUnlock(&mutex);
8000010a:	48 5c       	lddpc	r12,8000011c <task1+0x38>
8000010c:	f0 1f 00 07 	mcall	80000128 <task1+0x44>
		ROSA_yield();
80000110:	f0 1f 00 07 	mcall	8000012c <task1+0x48>
	}
80000114:	ce bb       	rjmp	800000ea <task1+0x6>
80000116:	00 00       	add	r0,r0
80000118:	80 00       	ld.sh	r0,r0[0x0]
8000011a:	09 64       	ld.uh	r4,--r4
8000011c:	00 00       	add	r0,r0
8000011e:	05 dc       	ld.ub	r12,r2[0x5]
80000120:	80 00       	ld.sh	r0,r0[0x0]
80000122:	00 50       	eor	r0,r0
80000124:	80 00       	ld.sh	r0,r0[0x0]
80000126:	0e 38       	cp.w	r8,r7
80000128:	80 00       	ld.sh	r0,r0[0x0]
8000012a:	00 8c       	andn	r12,r0
8000012c:	80 00       	ld.sh	r0,r0[0x0]
8000012e:	07 8e       	ld.ub	lr,r3[0x0]

80000130 <task3>:
/*************************************************************
 * Task 3
 * Idle
 ************************************************************/
void task3(void)
{
80000130:	eb cd 40 80 	pushm	r7,lr
80000134:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_delay(2000);
80000136:	e0 6a 07 d0 	mov	r10,2000
8000013a:	30 0b       	mov	r11,0
8000013c:	f0 1f 00 0a 	mcall	80000164 <task3+0x34>
		ROSA_semaphoreLock(&mutex);
80000140:	48 ac       	lddpc	r12,80000168 <task3+0x38>
80000142:	f0 1f 00 0b 	mcall	8000016c <task3+0x3c>
		ledOff(LED0_GPIO);
80000146:	33 bc       	mov	r12,59
80000148:	f0 1f 00 0a 	mcall	80000170 <task3+0x40>
		ROSA_delay(500);
8000014c:	e0 6a 01 f4 	mov	r10,500
80000150:	30 0b       	mov	r11,0
80000152:	f0 1f 00 05 	mcall	80000164 <task3+0x34>
		ROSA_semaphoreUnlock(&mutex);
80000156:	48 5c       	lddpc	r12,80000168 <task3+0x38>
80000158:	f0 1f 00 07 	mcall	80000174 <task3+0x44>
		ROSA_yield();
8000015c:	f0 1f 00 07 	mcall	80000178 <task3+0x48>
	}
80000160:	ce bb       	rjmp	80000136 <task3+0x6>
80000162:	00 00       	add	r0,r0
80000164:	80 00       	ld.sh	r0,r0[0x0]
80000166:	09 64       	ld.uh	r4,--r4
80000168:	00 00       	add	r0,r0
8000016a:	05 dc       	ld.ub	r12,r2[0x5]
8000016c:	80 00       	ld.sh	r0,r0[0x0]
8000016e:	00 50       	eor	r0,r0
80000170:	80 00       	ld.sh	r0,r0[0x0]
80000172:	0e 58       	eor	r8,r7
80000174:	80 00       	ld.sh	r0,r0[0x0]
80000176:	00 8c       	andn	r12,r0
80000178:	80 00       	ld.sh	r0,r0[0x0]
8000017a:	07 8e       	ld.ub	lr,r3[0x0]

8000017c <task2>:
/*************************************************************
 * Task2
 * Blink LED1
 ************************************************************/
void task2(void)
{
8000017c:	eb cd 40 80 	pushm	r7,lr
80000180:	1a 97       	mov	r7,sp
	while(1) {
		//ROSA_taskDelete(&t2_tcb);
		ROSA_yield();
80000182:	f0 1f 00 02 	mcall	80000188 <task2+0xc>
	}
80000186:	cf eb       	rjmp	80000182 <task2+0x6>
80000188:	80 00       	ld.sh	r0,r0[0x0]
8000018a:	07 8e       	ld.ub	lr,r3[0x0]

8000018c <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
8000018c:	eb cd 40 80 	pushm	r7,lr
80000190:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
80000192:	f0 1f 00 11 	mcall	800001d4 <main+0x48>
	
	//Create tasks and install them into the ROSA kernel
	ROSA_taskCreate(&t1_tcb, "tsk1", task1, T1_STACK_SIZE, 1);
80000196:	30 18       	mov	r8,1
80000198:	e0 69 01 00 	mov	r9,256
8000019c:	48 fa       	lddpc	r10,800001d8 <main+0x4c>
8000019e:	49 0b       	lddpc	r11,800001dc <main+0x50>
800001a0:	49 0c       	lddpc	r12,800001e0 <main+0x54>
800001a2:	f0 1f 00 11 	mcall	800001e4 <main+0x58>
	ROSA_taskCreate(&t2_tcb, "tsk2", task2, T2_STACK_SIZE, 1);
800001a6:	30 18       	mov	r8,1
800001a8:	e0 69 01 00 	mov	r9,256
800001ac:	48 fa       	lddpc	r10,800001e8 <main+0x5c>
800001ae:	49 0b       	lddpc	r11,800001ec <main+0x60>
800001b0:	49 0c       	lddpc	r12,800001f0 <main+0x64>
800001b2:	f0 1f 00 0d 	mcall	800001e4 <main+0x58>
	ROSA_taskCreate(&t3_tcb, "tsk3", task3, T3_STACK_SIZE, 1);
800001b6:	30 18       	mov	r8,1
800001b8:	32 09       	mov	r9,32
800001ba:	48 fa       	lddpc	r10,800001f4 <main+0x68>
800001bc:	48 fb       	lddpc	r11,800001f8 <main+0x6c>
800001be:	49 0c       	lddpc	r12,800001fc <main+0x70>
800001c0:	f0 1f 00 09 	mcall	800001e4 <main+0x58>
	ROSA_semaphoreCreate(&mutex, 1);
800001c4:	30 1b       	mov	r11,1
800001c6:	48 fc       	lddpc	r12,80000200 <main+0x74>
800001c8:	f0 1f 00 0f 	mcall	80000204 <main+0x78>
	ROSA_tcbInstall(&t2_tcb);*/

	//Start the ROSA kernel
	//TCBLIST = PA[2]->nexttcb;
	//ROSA_start();
	ROSA_startScheduler();
800001cc:	f0 1f 00 0f 	mcall	80000208 <main+0x7c>
	//ledOn(LED1_GPIO);
	/* Execution will never return here */
	while(1);
800001d0:	c0 08       	rjmp	800001d0 <main+0x44>
800001d2:	00 00       	add	r0,r0
800001d4:	80 00       	ld.sh	r0,r0[0x0]
800001d6:	04 68       	and	r8,r2
800001d8:	80 00       	ld.sh	r0,r0[0x0]
800001da:	00 e4       	st.h	--r0,r4
800001dc:	80 00       	ld.sh	r0,r0[0x0]
800001de:	00 cc       	st.b	r0++,r12
800001e0:	00 00       	add	r0,r0
800001e2:	05 e0       	ld.ub	r0,r2[0x6]
800001e4:	80 00       	ld.sh	r0,r0[0x0]
800001e6:	05 ec       	ld.ub	r12,r2[0x6]
800001e8:	80 00       	ld.sh	r0,r0[0x0]
800001ea:	01 7c       	ld.ub	r12,--r0
800001ec:	80 00       	ld.sh	r0,r0[0x0]
800001ee:	00 d4       	st.w	--r0,r4
800001f0:	00 00       	add	r0,r0
800001f2:	05 d8       	ld.ub	r8,r2[0x5]
800001f4:	80 00       	ld.sh	r0,r0[0x0]
800001f6:	01 30       	ld.ub	r0,r0++
800001f8:	80 00       	ld.sh	r0,r0[0x0]
800001fa:	00 dc       	st.w	--r0,r12
800001fc:	00 00       	add	r0,r0
800001fe:	05 d0       	ld.ub	r0,r2[0x5]
80000200:	00 00       	add	r0,r0
80000202:	05 dc       	ld.ub	r12,r2[0x5]
80000204:	80 00       	ld.sh	r0,r0[0x0]
80000206:	00 08       	add	r8,r0
80000208:	80 00       	ld.sh	r0,r0[0x0]
8000020a:	08 04       	add	r4,r4

8000020c <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
8000020c:	eb cd 40 80 	pushm	r7,lr
80000210:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
80000212:	f0 1f 00 05 	mcall	80000224 <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
80000216:	f0 1f 00 05 	mcall	80000228 <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it
8000021a:	f0 1f 00 05 	mcall	8000022c <ROSA_yieldFromISR+0x20>
}
8000021e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000222:	00 00       	add	r0,r0
80000224:	80 00       	ld.sh	r0,r0[0x0]
80000226:	1d 7e       	ld.ub	lr,--lr
80000228:	80 00       	ld.sh	r0,r0[0x0]
8000022a:	07 ac       	ld.ub	r12,r3[0x2]
8000022c:	80 00       	ld.sh	r0,r0[0x0]
8000022e:	1d b8       	ld.ub	r8,lr[0x3]

80000230 <usart_options>:
80000230:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
80000240:	0a 00 00 00 69 64 6c 65 00 00 00 00                 ....idle....

8000024c <idle>:

/** @fn void idle(void)
	@brief Idle task body.
*/
void idle(void)
{
8000024c:	eb cd 40 80 	pushm	r7,lr
80000250:	1a 97       	mov	r7,sp
	while(1)
	{
		usartWriteLine(USART, "idle\n");
80000252:	48 4b       	lddpc	r11,80000260 <idle+0x14>
80000254:	fe 7c 14 00 	mov	r12,-60416
80000258:	f0 1f 00 03 	mcall	80000264 <idle+0x18>
	}
8000025c:	cf bb       	rjmp	80000252 <idle+0x6>
8000025e:	00 00       	add	r0,r0
80000260:	80 00       	ld.sh	r0,r0[0x0]
80000262:	02 3c       	cp.w	r12,r1
80000264:	80 00       	ld.sh	r0,r0[0x0]
80000266:	11 a8       	ld.ub	r8,r8[0x2]

80000268 <idleCreate>:

/** @fn void idleCreate(void)
	@brief Creation of the idle task.
*/
void idleCreate(void)
{
80000268:	eb cd 40 80 	pushm	r7,lr
8000026c:	1a 97       	mov	r7,sp
	ROSA_tcbCreate(&IDLETASK_TCB, "idle", idle, idle_stack, IDLE_STACK_SIZE);
8000026e:	32 08       	mov	r8,32
80000270:	48 69       	lddpc	r9,80000288 <idleCreate+0x20>
80000272:	48 7a       	lddpc	r10,8000028c <idleCreate+0x24>
80000274:	48 7b       	lddpc	r11,80000290 <idleCreate+0x28>
80000276:	48 8c       	lddpc	r12,80000294 <idleCreate+0x2c>
80000278:	f0 1f 00 08 	mcall	80000298 <idleCreate+0x30>
	IDLETASK = &IDLETASK_TCB;
8000027c:	48 88       	lddpc	r8,8000029c <idleCreate+0x34>
8000027e:	48 69       	lddpc	r9,80000294 <idleCreate+0x2c>
80000280:	91 09       	st.w	r8[0x0],r9
}
80000282:	e3 cd 80 80 	ldm	sp++,r7,pc
80000286:	00 00       	add	r0,r0
80000288:	00 00       	add	r0,r0
8000028a:	05 18       	ld.sh	r8,r2++
8000028c:	80 00       	ld.sh	r0,r0[0x0]
8000028e:	02 4c       	or	r12,r1
80000290:	80 00       	ld.sh	r0,r0[0x0]
80000292:	02 44       	or	r4,r1
80000294:	00 00       	add	r0,r0
80000296:	06 24       	rsub	r4,r3
80000298:	80 00       	ld.sh	r0,r0[0x0]
8000029a:	05 38       	ld.ub	r8,r2++
8000029c:	00 00       	add	r0,r0
8000029e:	05 e4       	ld.ub	r4,r2[0x6]

800002a0 <readyQueueInsert>:
	@brief Inserts the given task into the ready queue by its priority.
	@param th Task structure (tcb structure).
	@return A status code (1 - item has been added to the empty queue, 0 - otherwise).
*/
int readyQueueInsert(ROSA_taskHandle_t ** pth)
{
800002a0:	eb cd 40 80 	pushm	r7,lr
800002a4:	1a 97       	mov	r7,sp
800002a6:	20 3d       	sub	sp,12
800002a8:	ef 4c ff f4 	st.w	r7[-12],r12
	uint8_t priority;
	int retval;
	
	priority = (*pth)->priority;
800002ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002b0:	70 08       	ld.w	r8,r8[0x0]
800002b2:	f1 38 00 64 	ld.ub	r8,r8[100]
800002b6:	ef 68 ff fb 	st.b	r7[-5],r8
	
	/* Check the given queue for the emptiness */
	if (PA[priority] == NULL)
800002ba:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800002be:	4a 08       	lddpc	r8,8000033c <readyQueueInsert+0x9c>
800002c0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800002c4:	58 08       	cp.w	r8,0
800002c6:	c1 61       	brne	800002f2 <readyQueueInsert+0x52>
	{
		PA[priority] = *pth;
800002c8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800002cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002d0:	70 0a       	ld.w	r10,r8[0x0]
800002d2:	49 b8       	lddpc	r8,8000033c <readyQueueInsert+0x9c>
800002d4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		PA[priority]->nexttcb = *pth;
800002d8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800002dc:	49 88       	lddpc	r8,8000033c <readyQueueInsert+0x9c>
800002de:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800002e2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800002e6:	72 09       	ld.w	r9,r9[0x0]
800002e8:	91 09       	st.w	r8[0x0],r9
		
		retval = 1;
800002ea:	30 18       	mov	r8,1
800002ec:	ef 48 ff fc 	st.w	r7[-4],r8
800002f0:	c1 f8       	rjmp	8000032e <readyQueueInsert+0x8e>
	}
	else
	{
		(*pth)->nexttcb = PA[priority]->nexttcb;
800002f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002f6:	70 08       	ld.w	r8,r8[0x0]
800002f8:	ef 3a ff fb 	ld.ub	r10,r7[-5]
800002fc:	49 09       	lddpc	r9,8000033c <readyQueueInsert+0x9c>
800002fe:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80000302:	72 09       	ld.w	r9,r9[0x0]
80000304:	91 09       	st.w	r8[0x0],r9
		PA[priority]->nexttcb = *pth;
80000306:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000030a:	48 d8       	lddpc	r8,8000033c <readyQueueInsert+0x9c>
8000030c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000310:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000314:	72 09       	ld.w	r9,r9[0x0]
80000316:	91 09       	st.w	r8[0x0],r9
		PA[priority] = *pth;
80000318:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000031c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000320:	70 0a       	ld.w	r10,r8[0x0]
80000322:	48 78       	lddpc	r8,8000033c <readyQueueInsert+0x9c>
80000324:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		retval = 0;
80000328:	30 08       	mov	r8,0
8000032a:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return retval;
8000032e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80000332:	10 9c       	mov	r12,r8
80000334:	2f dd       	sub	sp,-12
80000336:	e3 cd 80 80 	ldm	sp++,r7,pc
8000033a:	00 00       	add	r0,r0
8000033c:	00 00       	add	r0,r0
8000033e:	05 ec       	ld.ub	r12,r2[0x6]

80000340 <readyQueueExtract>:
	@brief Extracts the given task from the ready queue by its priority.
	@param th Task structure (tcb structure).
	@return A status code (1 - queue is empty after extraction, 0 - otherwise).
*/
int readyQueueExtract(ROSA_taskHandle_t ** pth)
{
80000340:	eb cd 40 80 	pushm	r7,lr
80000344:	1a 97       	mov	r7,sp
80000346:	20 4d       	sub	sp,16
80000348:	ef 4c ff f0 	st.w	r7[-16],r12
	ROSA_taskHandle_t * thTmp;
	uint8_t priority;
	int retval;
	
	priority = (*pth)->priority;
8000034c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000350:	70 08       	ld.w	r8,r8[0x0]
80000352:	f1 38 00 64 	ld.ub	r8,r8[100]
80000356:	ef 68 ff fb 	st.b	r7[-5],r8
	thTmp = PA[priority];
8000035a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000035e:	4a 58       	lddpc	r8,800003f0 <readyQueueExtract+0xb0>
80000360:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000364:	ef 48 ff f4 	st.w	r7[-12],r8
	
	/* Check whether the deleted task is the last in the queue or not */
	if ((*pth)->nexttcb == *pth) 
80000368:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000036c:	70 08       	ld.w	r8,r8[0x0]
8000036e:	70 09       	ld.w	r9,r8[0x0]
80000370:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000374:	70 08       	ld.w	r8,r8[0x0]
80000376:	10 39       	cp.w	r9,r8
80000378:	c1 11       	brne	8000039a <readyQueueExtract+0x5a>
	{
		/* It's enough to extract the deleted task from the queue */
		PA[priority] = NULL;
8000037a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000037e:	49 d8       	lddpc	r8,800003f0 <readyQueueExtract+0xb0>
80000380:	30 0a       	mov	r10,0
80000382:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		retval = 1;
80000386:	30 18       	mov	r8,1
80000388:	ef 48 ff fc 	st.w	r7[-4],r8
8000038c:	c2 b8       	rjmp	800003e2 <readyQueueExtract+0xa2>
	else 
	{
		/* Search for delete task */
		while (thTmp->nexttcb != (*pth)) 
		{
			thTmp = thTmp->nexttcb;
8000038e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000392:	70 08       	ld.w	r8,r8[0x0]
80000394:	ef 48 ff f4 	st.w	r7[-12],r8
80000398:	c0 28       	rjmp	8000039c <readyQueueExtract+0x5c>
		retval = 1;
	}
	else 
	{
		/* Search for delete task */
		while (thTmp->nexttcb != (*pth)) 
8000039a:	d7 03       	nop
8000039c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800003a0:	70 09       	ld.w	r9,r8[0x0]
800003a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800003a6:	70 08       	ld.w	r8,r8[0x0]
800003a8:	10 39       	cp.w	r9,r8
800003aa:	cf 21       	brne	8000038e <readyQueueExtract+0x4e>
		{
			thTmp = thTmp->nexttcb;
		}
		
		/* Check whether the PA[priority] points to the deleted task or not */
		if (PA[priority] == *pth)
800003ac:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800003b0:	49 08       	lddpc	r8,800003f0 <readyQueueExtract+0xb0>
800003b2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800003b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800003ba:	70 08       	ld.w	r8,r8[0x0]
800003bc:	10 39       	cp.w	r9,r8
800003be:	c0 81       	brne	800003ce <readyQueueExtract+0x8e>
		{
			/* Move PA[priority] pointer to the previous task in the queue */ 
			PA[priority] = thTmp;
800003c0:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800003c4:	48 b8       	lddpc	r8,800003f0 <readyQueueExtract+0xb0>
800003c6:	ee fa ff f4 	ld.w	r10,r7[-12]
800003ca:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		}
		
		thTmp->nexttcb = (*pth)->nexttcb;
800003ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800003d2:	70 08       	ld.w	r8,r8[0x0]
800003d4:	70 09       	ld.w	r9,r8[0x0]
800003d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800003da:	91 09       	st.w	r8[0x0],r9
		
		retval = 0;
800003dc:	30 08       	mov	r8,0
800003de:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return retval;
800003e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800003e6:	10 9c       	mov	r12,r8
800003e8:	2f cd       	sub	sp,-16
800003ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800003ee:	00 00       	add	r0,r0
800003f0:	00 00       	add	r0,r0
800003f2:	05 ec       	ld.ub	r12,r2[0x6]

800003f4 <readyQueueSearch>:
/** @fn int readyQueueSearch(void)
	@brief Search for the first non-empty highest priority queue.
	@return Pointer to the last tcb in the queue (in other words - PA[i]).
*/
tcb * readyQueueSearch(void)
{
800003f4:	eb cd 40 80 	pushm	r7,lr
800003f8:	1a 97       	mov	r7,sp
800003fa:	20 2d       	sub	sp,8
	int i = MAXNPRIO;
800003fc:	30 c8       	mov	r8,12
800003fe:	ef 48 ff f8 	st.w	r7[-8],r8
	tcb * rettcb;
	
	/* Search for the first non-empty queue. */
	while ( (PA[--i] == NULL) && (i > 0))
80000402:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000406:	20 18       	sub	r8,1
80000408:	ef 48 ff f8 	st.w	r7[-8],r8
8000040c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000410:	49 48       	lddpc	r8,80000460 <readyQueueSearch+0x6c>
80000412:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000416:	58 08       	cp.w	r8,0
80000418:	c0 61       	brne	80000424 <readyQueueSearch+0x30>
8000041a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000041e:	58 08       	cp.w	r8,0
80000420:	fe 99 ff f1 	brgt	80000402 <readyQueueSearch+0xe>
	{
		;
	}
		
	/* Check the PA for emptiness. */
	if ((i == 0) && (PA[i] == NULL))
80000424:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000428:	58 08       	cp.w	r8,0
8000042a:	c0 d1       	brne	80000444 <readyQueueSearch+0x50>
8000042c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000430:	48 c8       	lddpc	r8,80000460 <readyQueueSearch+0x6c>
80000432:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000436:	58 08       	cp.w	r8,0
80000438:	c0 61       	brne	80000444 <readyQueueSearch+0x50>
	{
		rettcb = IDLETASK;
8000043a:	48 b8       	lddpc	r8,80000464 <readyQueueSearch+0x70>
8000043c:	70 08       	ld.w	r8,r8[0x0]
8000043e:	ef 48 ff fc 	st.w	r7[-4],r8
	{
		;
	}
		
	/* Check the PA for emptiness. */
	if ((i == 0) && (PA[i] == NULL))
80000442:	c0 88       	rjmp	80000452 <readyQueueSearch+0x5e>
	{
		rettcb = IDLETASK;
	}
	else
	{
		rettcb = PA[i];
80000444:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000448:	48 68       	lddpc	r8,80000460 <readyQueueSearch+0x6c>
8000044a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000044e:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return rettcb;
80000452:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80000456:	10 9c       	mov	r12,r8
80000458:	2f ed       	sub	sp,-8
8000045a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000045e:	00 00       	add	r0,r0
80000460:	00 00       	add	r0,r0
80000462:	05 ec       	ld.ub	r12,r2[0x6]
80000464:	00 00       	add	r0,r0
80000466:	05 e4       	ld.ub	r4,r2[0x6]

80000468 <ROSA_init>:

void ROSA_init(void)
{
80000468:	eb cd 40 80 	pushm	r7,lr
8000046c:	1a 97       	mov	r7,sp
8000046e:	20 1d       	sub	sp,4
	int i = 0;
80000470:	30 08       	mov	r8,0
80000472:	ef 48 ff fc 	st.w	r7[-4],r8
	systemTick = 0;
80000476:	4a 1a       	lddpc	r10,800004f8 <ROSA_init+0x90>
80000478:	30 08       	mov	r8,0
8000047a:	30 09       	mov	r9,0
8000047c:	f4 e9 00 00 	st.d	r10[0],r8
	
	//Do initialization of I/O drivers
	ledInit();									//LEDs
80000480:	f0 1f 00 1f 	mcall	800004fc <ROSA_init+0x94>
	buttonInit();								//Buttons
80000484:	f0 1f 00 1f 	mcall	80000500 <ROSA_init+0x98>
	joystickInit();								//Joystick
80000488:	f0 1f 00 1f 	mcall	80000504 <ROSA_init+0x9c>
	potInit();									//Potentiometer
8000048c:	f0 1f 00 1f 	mcall	80000508 <ROSA_init+0xa0>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
80000490:	e0 6a 1b 00 	mov	r10,6912
80000494:	ea 1a 00 b7 	orh	r10,0xb7
80000498:	49 db       	lddpc	r11,8000050c <ROSA_init+0xa4>
8000049a:	fe 7c 14 00 	mov	r12,-60416
8000049e:	f0 1f 00 1d 	mcall	80000510 <ROSA_init+0xa8>

	interruptInit();
800004a2:	f0 1f 00 1d 	mcall	80000514 <ROSA_init+0xac>
	interruptEnable();
800004a6:	f0 1f 00 1d 	mcall	80000518 <ROSA_init+0xb0>
	timerInit(1);
800004aa:	30 1c       	mov	r12,1
800004ac:	f0 1f 00 1c 	mcall	8000051c <ROSA_init+0xb4>
	timerStart();
800004b0:	f0 1f 00 1c 	mcall	80000520 <ROSA_init+0xb8>
	
	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
800004b4:	49 c8       	lddpc	r8,80000524 <ROSA_init+0xbc>
800004b6:	30 09       	mov	r9,0
800004b8:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
800004ba:	49 c8       	lddpc	r8,80000528 <ROSA_init+0xc0>
800004bc:	30 09       	mov	r9,0
800004be:	91 09       	st.w	r8[0x0],r9
	PREEMPTASK = NULL;
800004c0:	49 b8       	lddpc	r8,8000052c <ROSA_init+0xc4>
800004c2:	30 09       	mov	r9,0
800004c4:	91 09       	st.w	r8[0x0],r9
	
	/* Create idle task. */
	idleCreate();
800004c6:	f0 1f 00 1b 	mcall	80000530 <ROSA_init+0xc8>
	
	for (i = 0; i < MAXNPRIO; i++) {
800004ca:	30 08       	mov	r8,0
800004cc:	ef 48 ff fc 	st.w	r7[-4],r8
800004d0:	c0 c8       	rjmp	800004e8 <ROSA_init+0x80>
		PA[i] = NULL;
800004d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800004d6:	49 88       	lddpc	r8,80000534 <ROSA_init+0xcc>
800004d8:	30 0a       	mov	r10,0
800004da:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	PREEMPTASK = NULL;
	
	/* Create idle task. */
	idleCreate();
	
	for (i = 0; i < MAXNPRIO; i++) {
800004de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004e2:	2f f8       	sub	r8,-1
800004e4:	ef 48 ff fc 	st.w	r7[-4],r8
800004e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004ec:	58 b8       	cp.w	r8,11
800004ee:	fe 9a ff f2 	brle	800004d2 <ROSA_init+0x6a>
		PA[i] = NULL;
	}
	
	//Initialize the timer to 1 ms period.
	
}
800004f2:	2f fd       	sub	sp,-4
800004f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800004f8:	00 00       	add	r0,r0
800004fa:	06 9c       	mov	r12,r3
800004fc:	80 00       	ld.sh	r0,r0[0x0]
800004fe:	0d ac       	ld.ub	r12,r6[0x2]
80000500:	80 00       	ld.sh	r0,r0[0x0]
80000502:	0c 04       	add	r4,r6
80000504:	80 00       	ld.sh	r0,r0[0x0]
80000506:	0c 2c       	rsub	r12,r6
80000508:	80 00       	ld.sh	r0,r0[0x0]
8000050a:	0e 78       	tst	r8,r7
8000050c:	80 00       	ld.sh	r0,r0[0x0]
8000050e:	02 30       	cp.w	r0,r1
80000510:	80 00       	ld.sh	r0,r0[0x0]
80000512:	10 2c       	rsub	r12,r8
80000514:	80 00       	ld.sh	r0,r0[0x0]
80000516:	1d 48       	ld.w	r8,--lr
80000518:	80 00       	ld.sh	r0,r0[0x0]
8000051a:	1d 6a       	ld.uh	r10,--lr
8000051c:	80 00       	ld.sh	r0,r0[0x0]
8000051e:	11 fc       	ld.ub	r12,r8[0x7]
80000520:	80 00       	ld.sh	r0,r0[0x0]
80000522:	12 2a       	rsub	r10,r9
80000524:	00 00       	add	r0,r0
80000526:	05 e8       	ld.ub	r8,r2[0x6]
80000528:	00 00       	add	r0,r0
8000052a:	06 20       	rsub	r0,r3
8000052c:	00 00       	add	r0,r0
8000052e:	06 1c       	sub	r12,r3
80000530:	80 00       	ld.sh	r0,r0[0x0]
80000532:	02 68       	and	r8,r1
80000534:	00 00       	add	r0,r0
80000536:	05 ec       	ld.ub	r12,r2[0x6]

80000538 <ROSA_tcbCreate>:

void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
80000538:	eb cd 40 80 	pushm	r7,lr
8000053c:	1a 97       	mov	r7,sp
8000053e:	20 6d       	sub	sp,24
80000540:	ef 4c ff f8 	st.w	r7[-8],r12
80000544:	ef 4b ff f4 	st.w	r7[-12],r11
80000548:	ef 4a ff f0 	st.w	r7[-16],r10
8000054c:	ef 49 ff ec 	st.w	r7[-20],r9
80000550:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000554:	30 08       	mov	r8,0
80000556:	ef 48 ff fc 	st.w	r7[-4],r8
8000055a:	c1 48       	rjmp	80000582 <ROSA_tcbCreate+0x4a>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
8000055c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000560:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000564:	ee fa ff f4 	ld.w	r10,r7[-12]
80000568:	f4 08 00 08 	add	r8,r10,r8
8000056c:	11 88       	ld.ub	r8,r8[0x0]
8000056e:	ee fa ff f8 	ld.w	r10,r7[-8]
80000572:	f4 09 00 09 	add	r9,r10,r9
80000576:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000578:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000057c:	2f f8       	sub	r8,-1
8000057e:	ef 48 ff fc 	st.w	r7[-4],r8
80000582:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000586:	58 38       	cp.w	r8,3
80000588:	fe 9a ff ea 	brle	8000055c <ROSA_tcbCreate+0x24>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
8000058c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000590:	30 09       	mov	r9,0
80000592:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
80000594:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000598:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000059c:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
8000059e:	ee f9 ff f0 	ld.w	r9,r7[-16]
800005a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005a6:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
800005a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005ac:	ee f9 ff e8 	ld.w	r9,r7[-24]
800005b0:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
800005b2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800005b6:	a3 68       	lsl	r8,0x2
800005b8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800005bc:	10 09       	add	r9,r8
800005be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005c2:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
800005c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005c8:	70 39       	ld.w	r9,r8[0xc]
800005ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005ce:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
800005d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005d4:	fc 19 00 1c 	movh	r9,0x1c
800005d8:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
800005da:	ee fc ff f8 	ld.w	r12,r7[-8]
800005de:	f0 1f 00 03 	mcall	800005e8 <ROSA_tcbCreate+0xb0>
}
800005e2:	2f ad       	sub	sp,-24
800005e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800005e8:	80 00       	ld.sh	r0,r0[0x0]
800005ea:	07 02       	ld.w	r2,r3++

800005ec <ROSA_taskCreate>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

int16_t ROSA_taskCreate(ROSA_taskHandle_t ** pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
800005ec:	eb cd 40 80 	pushm	r7,lr
800005f0:	1a 97       	mov	r7,sp
800005f2:	20 6d       	sub	sp,24
800005f4:	ef 4c ff f8 	st.w	r7[-8],r12
800005f8:	ef 4b ff f4 	st.w	r7[-12],r11
800005fc:	ef 4a ff f0 	st.w	r7[-16],r10
80000600:	ef 49 ff ec 	st.w	r7[-20],r9
80000604:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) calloc(stackSize, sizeof(uint32_t)); 
80000608:	30 4b       	mov	r11,4
8000060a:	ee fc ff ec 	ld.w	r12,r7[-20]
8000060e:	f0 1f 00 28 	mcall	800006ac <ROSA_taskCreate+0xc0>
80000612:	18 98       	mov	r8,r12
80000614:	ef 48 ff fc 	st.w	r7[-4],r8
	
	*pth = (ROSA_taskHandle_t *) malloc(sizeof(ROSA_taskHandle_t));			
80000618:	37 4c       	mov	r12,116
8000061a:	f0 1f 00 26 	mcall	800006b0 <ROSA_taskCreate+0xc4>
8000061e:	18 98       	mov	r8,r12
80000620:	10 99       	mov	r9,r8
80000622:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000626:	91 09       	st.w	r8[0x0],r9
	(*pth)->priority = priority;
80000628:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000062c:	70 09       	ld.w	r9,r8[0x0]
8000062e:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80000632:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
80000636:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000063a:	70 0a       	ld.w	r10,r8[0x0]
8000063c:	30 08       	mov	r8,0
8000063e:	30 09       	mov	r9,0
80000640:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
80000644:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000648:	70 09       	ld.w	r9,r8[0x0]
8000064a:	30 08       	mov	r8,0
8000064c:	f3 68 00 70 	st.b	r9[112],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
80000650:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000654:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000658:	72 0c       	ld.w	r12,r9[0x0]
8000065a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000065e:	ee fa ff f0 	ld.w	r10,r7[-16]
80000662:	ee fb ff f4 	ld.w	r11,r7[-12]
80000666:	f0 1f 00 14 	mcall	800006b4 <ROSA_taskCreate+0xc8>
	
	readyQueueInsert(pth);
8000066a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000066e:	f0 1f 00 13 	mcall	800006b8 <ROSA_taskCreate+0xcc>
	
	if (EXECTASK != NULL) {
80000672:	49 38       	lddpc	r8,800006bc <ROSA_taskCreate+0xd0>
80000674:	70 08       	ld.w	r8,r8[0x0]
80000676:	58 08       	cp.w	r8,0
80000678:	c1 40       	breq	800006a0 <ROSA_taskCreate+0xb4>
		if (EXECTASK->priority < priority) {
8000067a:	49 18       	lddpc	r8,800006bc <ROSA_taskCreate+0xd0>
8000067c:	70 08       	ld.w	r8,r8[0x0]
8000067e:	f1 38 00 64 	ld.ub	r8,r8[100]
80000682:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000686:	f0 09 18 00 	cp.b	r9,r8
8000068a:	e0 88 00 0b 	brls	800006a0 <ROSA_taskCreate+0xb4>
			PREEMPTASK = PA[priority];
8000068e:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000692:	48 c8       	lddpc	r8,800006c0 <ROSA_taskCreate+0xd4>
80000694:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000698:	48 b8       	lddpc	r8,800006c4 <ROSA_taskCreate+0xd8>
8000069a:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
8000069c:	f0 1f 00 0b 	mcall	800006c8 <ROSA_taskCreate+0xdc>
		}	
	}
	
	return 0;
800006a0:	30 08       	mov	r8,0
}
800006a2:	10 9c       	mov	r12,r8
800006a4:	2f ad       	sub	sp,-24
800006a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800006aa:	00 00       	add	r0,r0
800006ac:	80 00       	ld.sh	r0,r0[0x0]
800006ae:	13 34       	ld.ub	r4,r9++
800006b0:	80 00       	ld.sh	r0,r0[0x0]
800006b2:	13 ac       	ld.ub	r12,r9[0x2]
800006b4:	80 00       	ld.sh	r0,r0[0x0]
800006b6:	05 38       	ld.ub	r8,r2++
800006b8:	80 00       	ld.sh	r0,r0[0x0]
800006ba:	02 a0       	st.w	r1++,r0
800006bc:	00 00       	add	r0,r0
800006be:	06 20       	rsub	r0,r3
800006c0:	00 00       	add	r0,r0
800006c2:	05 ec       	ld.ub	r12,r2[0x6]
800006c4:	00 00       	add	r0,r0
800006c6:	06 1c       	sub	r12,r3
800006c8:	80 00       	ld.sh	r0,r0[0x0]
800006ca:	07 8e       	ld.ub	lr,r3[0x0]

800006cc <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
800006cc:	4b 5c       	lddpc	r12,800007a0 <_yield+0xa>
	lda.w r11,EXECTASK
800006ce:	4b 6b       	lddpc	r11,800007a4 <_yield+0xe>
	ld.w r12,r12[0x0]
800006d0:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
800006d2:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
800006d4:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800006d6:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800006d8:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
800006dc:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
800006de:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
800006e0:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
800006e2:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
800006e6:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
800006e8:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
800006ea:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
800006ec:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
800006ee:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
800006f0:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
800006f2:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
800006f4:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
800006f6:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
800006f8:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
800006fa:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
800006fc:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
800006fe:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000700:	1c 9f       	mov	pc,lr

80000702 <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
80000702:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000704:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80000706:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000708:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
8000070c:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80000710:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000714:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000718:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
8000071c:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000720:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000724:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000728:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
8000072c:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
8000072e:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80000730:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
80000732:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000734:	1c 9f       	mov	pc,lr

80000736 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
80000736:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000738:	49 bc       	lddpc	r12,800007a4 <_yield+0xe>
	ld.w r12,r12[0x0]
8000073a:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
8000073c:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
8000073e:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
80000740:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
80000742:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
80000744:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
80000746:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
80000748:	33 40       	mov	r0,52
	add r0,r12
8000074a:	18 00       	add	r0,r12
	stmts r0,r0-r11
8000074c:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80000750:	1a 90       	mov	r0,sp
	st.w --sp,r0
80000752:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80000754:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
80000758:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
8000075a:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
8000075c:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
8000075e:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
80000760:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
80000762:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80000764:	1c 9f       	mov	pc,lr

80000766 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000766:	49 0c       	lddpc	r12,800007a4 <_yield+0xe>
	ld.w r12,r12[0x0]
80000768:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
8000076a:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
8000076c:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
8000076e:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
80000772:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80000774:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80000776:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
80000778:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
8000077a:	33 40       	mov	r0,52
	add r0,r12
8000077c:	18 00       	add	r0,r12
	ldmts r0,r0-r11
8000077e:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80000782:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000784:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80000786:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80000788:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
8000078a:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
8000078c:	d6 13       	rets

8000078e <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
8000078e:	d4 01       	pushm	lr
	lda.w lr,_yield
80000790:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000794:	d7 33       	scall

80000796 <_yield>:
_yield:
	call contextSave
80000796:	cd 0f       	rcall	80000736 <contextSave>
	call scheduler
80000798:	f0 1f 00 04 	mcall	800007a8 <_yield+0x12>
	call contextRestore
8000079c:	ce 5f       	rcall	80000766 <contextRestore>
8000079e:	00 00       	add	r0,r0
800007a0:	00 00       	add	r0,r0
800007a2:	05 e8       	ld.ub	r8,r2[0x6]
800007a4:	00 00       	add	r0,r0
800007a6:	06 20       	rsub	r0,r3
800007a8:	80 00       	ld.sh	r0,r0[0x0]
800007aa:	07 ac       	ld.ub	r12,r3[0x2]

800007ac <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
800007ac:	eb cd 40 80 	pushm	r7,lr
800007b0:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK == NULL) {
800007b2:	49 28       	lddpc	r8,800007f8 <scheduler+0x4c>
800007b4:	70 08       	ld.w	r8,r8[0x0]
800007b6:	58 08       	cp.w	r8,0
800007b8:	c1 61       	brne	800007e4 <scheduler+0x38>
		PA[EXECTASK->priority] = EXECTASK;
800007ba:	49 18       	lddpc	r8,800007fc <scheduler+0x50>
800007bc:	70 08       	ld.w	r8,r8[0x0]
800007be:	f1 38 00 64 	ld.ub	r8,r8[100]
800007c2:	10 99       	mov	r9,r8
800007c4:	48 e8       	lddpc	r8,800007fc <scheduler+0x50>
800007c6:	70 0a       	ld.w	r10,r8[0x0]
800007c8:	48 e8       	lddpc	r8,80000800 <scheduler+0x54>
800007ca:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		if (EXECTASK->nexttcb != NULL)
800007ce:	48 c8       	lddpc	r8,800007fc <scheduler+0x50>
800007d0:	70 08       	ld.w	r8,r8[0x0]
800007d2:	70 08       	ld.w	r8,r8[0x0]
800007d4:	58 08       	cp.w	r8,0
800007d6:	c0 e0       	breq	800007f2 <scheduler+0x46>
		{
			EXECTASK = EXECTASK->nexttcb;
800007d8:	48 98       	lddpc	r8,800007fc <scheduler+0x50>
800007da:	70 08       	ld.w	r8,r8[0x0]
800007dc:	70 09       	ld.w	r9,r8[0x0]
800007de:	48 88       	lddpc	r8,800007fc <scheduler+0x50>
800007e0:	91 09       	st.w	r8[0x0],r9
800007e2:	c0 88       	rjmp	800007f2 <scheduler+0x46>
		}
	}
	else {
		EXECTASK = PREEMPTASK;
800007e4:	48 58       	lddpc	r8,800007f8 <scheduler+0x4c>
800007e6:	70 09       	ld.w	r9,r8[0x0]
800007e8:	48 58       	lddpc	r8,800007fc <scheduler+0x50>
800007ea:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
800007ec:	48 38       	lddpc	r8,800007f8 <scheduler+0x4c>
800007ee:	30 09       	mov	r9,0
800007f0:	91 09       	st.w	r8[0x0],r9
	}
}
800007f2:	e3 cd 80 80 	ldm	sp++,r7,pc
800007f6:	00 00       	add	r0,r0
800007f8:	00 00       	add	r0,r0
800007fa:	06 1c       	sub	r12,r3
800007fc:	00 00       	add	r0,r0
800007fe:	06 20       	rsub	r0,r3
80000800:	00 00       	add	r0,r0
80000802:	05 ec       	ld.ub	r12,r2[0x6]

80000804 <ROSA_startScheduler>:

void ROSA_startScheduler(void)
{
80000804:	eb cd 40 80 	pushm	r7,lr
80000808:	1a 97       	mov	r7,sp
8000080a:	20 1d       	sub	sp,4
	tcb * tmp = readyQueueSearch();	
8000080c:	f0 1f 00 08 	mcall	8000082c <ROSA_startScheduler+0x28>
80000810:	18 98       	mov	r8,r12
80000812:	ef 48 ff fc 	st.w	r7[-4],r8
	
	TCBLIST = tmp->nexttcb;
80000816:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000081a:	70 09       	ld.w	r9,r8[0x0]
8000081c:	48 58       	lddpc	r8,80000830 <ROSA_startScheduler+0x2c>
8000081e:	91 09       	st.w	r8[0x0],r9
	
	ROSA_start();
80000820:	f0 1f 00 05 	mcall	80000834 <ROSA_startScheduler+0x30>
}
80000824:	2f fd       	sub	sp,-4
80000826:	e3 cd 80 80 	ldm	sp++,r7,pc
8000082a:	00 00       	add	r0,r0
8000082c:	80 00       	ld.sh	r0,r0[0x0]
8000082e:	03 f4       	ld.ub	r4,r1[0x7]
80000830:	00 00       	add	r0,r0
80000832:	05 e8       	ld.ub	r8,r2[0x6]
80000834:	80 00       	ld.sh	r0,r0[0x0]
80000836:	06 cc       	st.b	r3++,r12

80000838 <C.12.9558>:
80000838:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000848 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000848:	eb cd 40 80 	pushm	r7,lr
8000084c:	1a 97       	mov	r7,sp
8000084e:	20 5d       	sub	sp,20
	interruptDisable();
80000850:	f0 1f 00 35 	mcall	80000924 <timerISR+0xdc>
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000854:	fe 78 38 00 	mov	r8,-51200
80000858:	ef 48 ff f4 	st.w	r7[-12],r8
	ROSA_taskHandle_t * tmptsk;
	ROSA_taskHandle_t * tmp;
	bool interruptTask;
	
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
8000085c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000860:	70 88       	ld.w	r8,r8[0x20]
80000862:	ef 48 ff f0 	st.w	r7[-16],r8
	if (sr & AVR32_TC_CPCS_MASK)
80000866:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000086a:	e2 18 00 10 	andl	r8,0x10,COH
8000086e:	c5 50       	breq	80000918 <timerISR+0xd0>
	{
		systemTick++;
80000870:	4a e8       	lddpc	r8,80000928 <timerISR+0xe0>
80000872:	f0 ea 00 00 	ld.d	r10,r8[0]
80000876:	30 18       	mov	r8,1
80000878:	30 09       	mov	r9,0
8000087a:	f4 08 00 08 	add	r8,r10,r8
8000087e:	f6 09 00 49 	adc	r9,r11,r9
80000882:	4a aa       	lddpc	r10,80000928 <timerISR+0xe0>
80000884:	f4 e9 00 00 	st.d	r10[0],r8
		interruptTask = false;
80000888:	30 08       	mov	r8,0
8000088a:	ef 68 ff ff 	st.b	r7[-1],r8
		
		while (DELAYQUEUE != NULL && DELAYQUEUE->delay <= systemTick)
8000088e:	c1 68       	rjmp	800008ba <timerISR+0x72>
		{
			tmptsk = DELAYQUEUE;
80000890:	4a 78       	lddpc	r8,8000092c <timerISR+0xe4>
80000892:	70 08       	ld.w	r8,r8[0x0]
80000894:	ef 48 ff ec 	st.w	r7[-20],r8
			removeDelayQueue(&DELAYQUEUE);
80000898:	4a 5c       	lddpc	r12,8000092c <timerISR+0xe4>
8000089a:	f0 1f 00 26 	mcall	80000930 <timerISR+0xe8>
			tmptsk->delay = 0;
8000089e:	ee fa ff ec 	ld.w	r10,r7[-20]
800008a2:	30 08       	mov	r8,0
800008a4:	30 09       	mov	r9,0
800008a6:	f4 e9 00 68 	st.d	r10[104],r8
			readyQueueInsert(&tmptsk);
800008aa:	ee c8 00 14 	sub	r8,r7,20
800008ae:	10 9c       	mov	r12,r8
800008b0:	f0 1f 00 21 	mcall	80000934 <timerISR+0xec>
			interruptTask = true;
800008b4:	30 18       	mov	r8,1
800008b6:	ef 68 ff ff 	st.b	r7[-1],r8
	if (sr & AVR32_TC_CPCS_MASK)
	{
		systemTick++;
		interruptTask = false;
		
		while (DELAYQUEUE != NULL && DELAYQUEUE->delay <= systemTick)
800008ba:	49 d8       	lddpc	r8,8000092c <timerISR+0xe4>
800008bc:	70 08       	ld.w	r8,r8[0x0]
800008be:	58 08       	cp.w	r8,0
800008c0:	c0 d0       	breq	800008da <timerISR+0x92>
800008c2:	49 b8       	lddpc	r8,8000092c <timerISR+0xe4>
800008c4:	70 08       	ld.w	r8,r8[0x0]
800008c6:	f0 ea 00 68 	ld.d	r10,r8[104]
800008ca:	49 88       	lddpc	r8,80000928 <timerISR+0xe0>
800008cc:	f0 e8 00 00 	ld.d	r8,r8[0]
800008d0:	10 3a       	cp.w	r10,r8
800008d2:	f2 0b 13 00 	cpc	r11,r9
800008d6:	fe 98 ff dd 	brls	80000890 <timerISR+0x48>
			removeDelayQueue(&DELAYQUEUE);
			tmptsk->delay = 0;
			readyQueueInsert(&tmptsk);
			interruptTask = true;
		}
		if (interruptTask)
800008da:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800008de:	30 08       	mov	r8,0
800008e0:	f0 09 18 00 	cp.b	r9,r8
800008e4:	c1 a0       	breq	80000918 <timerISR+0xd0>
		{
			tmp = readyQueueSearch();
800008e6:	f0 1f 00 15 	mcall	80000938 <timerISR+0xf0>
800008ea:	18 98       	mov	r8,r12
800008ec:	ef 48 ff f8 	st.w	r7[-8],r8
			if (EXECTASK->priority < tmptsk->priority)
800008f0:	49 38       	lddpc	r8,8000093c <timerISR+0xf4>
800008f2:	70 08       	ld.w	r8,r8[0x0]
800008f4:	f1 39 00 64 	ld.ub	r9,r8[100]
800008f8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800008fc:	f1 38 00 64 	ld.ub	r8,r8[100]
80000900:	f0 09 18 00 	cp.b	r9,r8
80000904:	c0 a2       	brcc	80000918 <timerISR+0xd0>
			{
				PREEMPTASK = tmp->nexttcb;
80000906:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000090a:	70 09       	ld.w	r9,r8[0x0]
8000090c:	48 d8       	lddpc	r8,80000940 <timerISR+0xf8>
8000090e:	91 09       	st.w	r8[0x0],r9
				interruptEnable();
80000910:	f0 1f 00 0d 	mcall	80000944 <timerISR+0xfc>
				ROSA_yieldFromISR();
80000914:	f0 1f 00 0d 	mcall	80000948 <timerISR+0x100>
			}
		}
	}
	//timerClearInterrupt(); //Disabled until we know what it actually does
	interruptEnable();
80000918:	f0 1f 00 0b 	mcall	80000944 <timerISR+0xfc>
}
8000091c:	2f bd       	sub	sp,-20
8000091e:	e3 cd 40 80 	ldm	sp++,r7,lr
80000922:	d6 03       	rete
80000924:	80 00       	ld.sh	r0,r0[0x0]
80000926:	1d 66       	ld.uh	r6,--lr
80000928:	00 00       	add	r0,r0
8000092a:	06 9c       	mov	r12,r3
8000092c:	00 00       	add	r0,r0
8000092e:	06 98       	mov	r8,r3
80000930:	80 00       	ld.sh	r0,r0[0x0]
80000932:	0b 64       	ld.uh	r4,--r5
80000934:	80 00       	ld.sh	r0,r0[0x0]
80000936:	02 a0       	st.w	r1++,r0
80000938:	80 00       	ld.sh	r0,r0[0x0]
8000093a:	03 f4       	ld.ub	r4,r1[0x7]
8000093c:	00 00       	add	r0,r0
8000093e:	06 20       	rsub	r0,r3
80000940:	00 00       	add	r0,r0
80000942:	06 1c       	sub	r12,r3
80000944:	80 00       	ld.sh	r0,r0[0x0]
80000946:	1d 6a       	ld.uh	r10,--lr
80000948:	80 00       	ld.sh	r0,r0[0x0]
8000094a:	02 0c       	add	r12,r1

8000094c <ROSA_getTickCount>:
/*																		*/
/* Returns the current number of system ticks, relative to start		*/
/* of the system.                                                       */
/************************************************************************/
uint64_t ROSA_getTickCount()
{
8000094c:	eb cd 40 80 	pushm	r7,lr
80000950:	1a 97       	mov	r7,sp
	return systemTick;
80000952:	48 48       	lddpc	r8,80000960 <ROSA_getTickCount+0x14>
80000954:	f0 e8 00 00 	ld.d	r8,r8[0]
}
80000958:	10 9a       	mov	r10,r8
8000095a:	12 9b       	mov	r11,r9
8000095c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000960:	00 00       	add	r0,r0
80000962:	06 9c       	mov	r12,r3

80000964 <ROSA_delay>:
/* ROSA_delay()															*/
/*																		*/
/* Suspends the calling task for the given number of ticks				*/
/************************************************************************/
int16_t ROSA_delay(uint64_t ticks)
{
80000964:	eb cd 40 80 	pushm	r7,lr
80000968:	1a 97       	mov	r7,sp
8000096a:	20 3d       	sub	sp,12
8000096c:	ee eb ff f4 	st.d	r7[-12],r10
	readyQueueExtract(&EXECTASK);
80000970:	49 0c       	lddpc	r12,800009b0 <ROSA_delay+0x4c>
80000972:	f0 1f 00 11 	mcall	800009b4 <ROSA_delay+0x50>
	insertDelayQueue(&EXECTASK, ROSA_getTickCount() + ticks);
80000976:	f0 1f 00 11 	mcall	800009b8 <ROSA_delay+0x54>
8000097a:	ee e8 ff f4 	ld.d	r8,r7[-12]
8000097e:	f4 08 00 08 	add	r8,r10,r8
80000982:	f6 09 00 49 	adc	r9,r11,r9
80000986:	10 9a       	mov	r10,r8
80000988:	12 9b       	mov	r11,r9
8000098a:	48 ac       	lddpc	r12,800009b0 <ROSA_delay+0x4c>
8000098c:	f0 1f 00 0c 	mcall	800009bc <ROSA_delay+0x58>
	tcb * tmp = readyQueueSearch();
80000990:	f0 1f 00 0c 	mcall	800009c0 <ROSA_delay+0x5c>
80000994:	18 98       	mov	r8,r12
80000996:	ef 48 ff fc 	st.w	r7[-4],r8
	if (tmp->priority >= 0)
	{
		PREEMPTASK = tmp;
8000099a:	48 b8       	lddpc	r8,800009c4 <ROSA_delay+0x60>
8000099c:	ee f9 ff fc 	ld.w	r9,r7[-4]
800009a0:	91 09       	st.w	r8[0x0],r9
	} else {
		return -1;
	}
	ROSA_yield();
800009a2:	f0 1f 00 0a 	mcall	800009c8 <ROSA_delay+0x64>
	return 0;
800009a6:	30 08       	mov	r8,0
}
800009a8:	10 9c       	mov	r12,r8
800009aa:	2f dd       	sub	sp,-12
800009ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800009b0:	00 00       	add	r0,r0
800009b2:	06 20       	rsub	r0,r3
800009b4:	80 00       	ld.sh	r0,r0[0x0]
800009b6:	03 40       	ld.w	r0,--r1
800009b8:	80 00       	ld.sh	r0,r0[0x0]
800009ba:	09 4c       	ld.w	r12,--r4
800009bc:	80 00       	ld.sh	r0,r0[0x0]
800009be:	0a 74       	tst	r4,r5
800009c0:	80 00       	ld.sh	r0,r0[0x0]
800009c2:	03 f4       	ld.ub	r4,r1[0x7]
800009c4:	00 00       	add	r0,r0
800009c6:	06 1c       	sub	r12,r3
800009c8:	80 00       	ld.sh	r0,r0[0x0]
800009ca:	07 8e       	ld.ub	lr,r3[0x0]

800009cc <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
800009cc:	eb cd 40 80 	pushm	r7,lr
800009d0:	1a 97       	mov	r7,sp
800009d2:	20 7d       	sub	sp,28
800009d4:	ef 4c ff e4 	st.w	r7[-28],r12
	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
800009d8:	4a 48       	lddpc	r8,80000a68 <timerPeriodSet+0x9c>
800009da:	ee ca 00 18 	sub	r10,r7,24
800009de:	10 9b       	mov	r11,r8
800009e0:	f6 e8 00 00 	ld.d	r8,r11[0]
800009e4:	f4 e9 00 00 	st.d	r10[0],r8
800009e8:	f6 e8 00 08 	ld.d	r8,r11[8]
800009ec:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
800009f0:	30 48       	mov	r8,4
800009f2:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
800009f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009fa:	20 18       	sub	r8,1
800009fc:	a3 68       	lsl	r8,0x2
800009fe:	ee 08 00 08 	add	r8,r7,r8
80000a02:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000a06:	e0 68 1b 00 	mov	r8,6912
80000a0a:	ea 18 00 b7 	orh	r8,0xb7
80000a0e:	f0 09 0c 08 	divs	r8,r8,r9
80000a12:	10 99       	mov	r9,r8
80000a14:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000a18:	b1 39       	mul	r9,r8
80000a1a:	e0 68 4d d3 	mov	r8,19923
80000a1e:	ea 18 10 62 	orh	r8,0x1062
80000a22:	f2 08 06 48 	mulu.d	r8,r9,r8
80000a26:	f2 08 16 06 	lsr	r8,r9,0x6
80000a2a:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80000a2e:	ee fc ff fc 	ld.w	r12,r7[-4]
80000a32:	f0 1f 00 0f 	mcall	80000a6c <timerPeriodSet+0xa0>
	timerRCSet(rc);
80000a36:	ee fc ff f8 	ld.w	r12,r7[-8]
80000a3a:	f0 1f 00 0e 	mcall	80000a70 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80000a3e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a46:	f2 08 02 4a 	mul	r10,r9,r8
80000a4a:	e0 68 9f 81 	mov	r8,40833
80000a4e:	ea 18 16 5e 	orh	r8,0x165e
80000a52:	f4 08 04 48 	muls.d	r8,r10,r8
80000a56:	b5 49       	asr	r9,0x14
80000a58:	f4 08 14 1f 	asr	r8,r10,0x1f
80000a5c:	f2 08 01 08 	sub	r8,r9,r8
}
80000a60:	10 9c       	mov	r12,r8
80000a62:	2f 9d       	sub	sp,-28
80000a64:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a68:	80 00       	ld.sh	r0,r0[0x0]
80000a6a:	08 38       	cp.w	r8,r4
80000a6c:	80 00       	ld.sh	r0,r0[0x0]
80000a6e:	12 70       	tst	r0,r9
80000a70:	80 00       	ld.sh	r0,r0[0x0]
80000a72:	12 5a       	eor	r10,r9

80000a74 <insertDelayQueue>:
/*																		*/
/* Inserts the given task into the delay queue, before any tasks with	*/
/* a later deadline or lower priority									*/
/************************************************************************/
int insertDelayQueue(ROSA_taskHandle_t ** pth, uint64_t deadline)
{
80000a74:	eb cd 40 80 	pushm	r7,lr
80000a78:	1a 97       	mov	r7,sp
80000a7a:	20 5d       	sub	sp,20
80000a7c:	ef 4c ff f4 	st.w	r7[-12],r12
80000a80:	ee eb ff ec 	st.d	r7[-20],r10
	(*pth)->delay = deadline;
80000a84:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a88:	70 0a       	ld.w	r10,r8[0x0]
80000a8a:	ee e8 ff ec 	ld.d	r8,r7[-20]
80000a8e:	f4 e9 00 68 	st.d	r10[104],r8
	
	if (DELAYQUEUE == NULL) {
80000a92:	4b 48       	lddpc	r8,80000b60 <insertDelayQueue+0xec>
80000a94:	70 08       	ld.w	r8,r8[0x0]
80000a96:	58 08       	cp.w	r8,0
80000a98:	c0 c1       	brne	80000ab0 <insertDelayQueue+0x3c>
		DELAYQUEUE = *pth;
80000a9a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a9e:	70 09       	ld.w	r9,r8[0x0]
80000aa0:	4b 08       	lddpc	r8,80000b60 <insertDelayQueue+0xec>
80000aa2:	91 09       	st.w	r8[0x0],r9
		DELAYQUEUE->nexttcb = NULL;
80000aa4:	4a f8       	lddpc	r8,80000b60 <insertDelayQueue+0xec>
80000aa6:	70 08       	ld.w	r8,r8[0x0]
80000aa8:	30 09       	mov	r9,0
80000aaa:	91 09       	st.w	r8[0x0],r9
		return 0;
80000aac:	30 08       	mov	r8,0
80000aae:	c5 48       	rjmp	80000b56 <insertDelayQueue+0xe2>
	}
	
	ROSA_taskHandle_t * next = DELAYQUEUE;
80000ab0:	4a c8       	lddpc	r8,80000b60 <insertDelayQueue+0xec>
80000ab2:	70 08       	ld.w	r8,r8[0x0]
80000ab4:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_taskHandle_t * prev;

	// While the next task in the list has an earlier deadline or higher priority and an equal deadline, move down the list
	while (next->delay <= (*pth)->delay || (next->priority >= (*pth)->priority && next->delay == (*pth)->delay))
80000ab8:	c1 b8       	rjmp	80000aee <insertDelayQueue+0x7a>
	{
		prev = next;
80000aba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000abe:	ef 48 ff fc 	st.w	r7[-4],r8
		next = next->nexttcb;
80000ac2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ac6:	70 08       	ld.w	r8,r8[0x0]
80000ac8:	ef 48 ff f8 	st.w	r7[-8],r8
		
		// Reach the end of the list
		if (next == NULL) {
80000acc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ad0:	58 08       	cp.w	r8,0
80000ad2:	c0 e1       	brne	80000aee <insertDelayQueue+0x7a>
			prev->nexttcb = *pth;
80000ad4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ad8:	70 09       	ld.w	r9,r8[0x0]
80000ada:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ade:	91 09       	st.w	r8[0x0],r9
			(*pth)->nexttcb = NULL;
80000ae0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ae4:	70 08       	ld.w	r8,r8[0x0]
80000ae6:	30 09       	mov	r9,0
80000ae8:	91 09       	st.w	r8[0x0],r9
			return 0;
80000aea:	30 08       	mov	r8,0
80000aec:	c3 58       	rjmp	80000b56 <insertDelayQueue+0xe2>
	
	ROSA_taskHandle_t * next = DELAYQUEUE;
	ROSA_taskHandle_t * prev;

	// While the next task in the list has an earlier deadline or higher priority and an equal deadline, move down the list
	while (next->delay <= (*pth)->delay || (next->priority >= (*pth)->priority && next->delay == (*pth)->delay))
80000aee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000af2:	f0 ea 00 68 	ld.d	r10,r8[104]
80000af6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000afa:	70 08       	ld.w	r8,r8[0x0]
80000afc:	f0 e8 00 68 	ld.d	r8,r8[104]
80000b00:	10 3a       	cp.w	r10,r8
80000b02:	f2 0b 13 00 	cpc	r11,r9
80000b06:	fe 98 ff da 	brls	80000aba <insertDelayQueue+0x46>
80000b0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b0e:	f1 39 00 64 	ld.ub	r9,r8[100]
80000b12:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b16:	70 08       	ld.w	r8,r8[0x0]
80000b18:	f1 38 00 64 	ld.ub	r8,r8[100]
80000b1c:	f0 09 18 00 	cp.b	r9,r8
80000b20:	c0 e3       	brcs	80000b3c <insertDelayQueue+0xc8>
80000b22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b26:	f0 ea 00 68 	ld.d	r10,r8[104]
80000b2a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b2e:	70 08       	ld.w	r8,r8[0x0]
80000b30:	f0 e8 00 68 	ld.d	r8,r8[104]
80000b34:	10 3a       	cp.w	r10,r8
80000b36:	f2 0b 13 00 	cpc	r11,r9
80000b3a:	cc 00       	breq	80000aba <insertDelayQueue+0x46>
			(*pth)->nexttcb = NULL;
			return 0;
		}
	}
	
	(*pth)->nexttcb = next;
80000b3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b40:	70 08       	ld.w	r8,r8[0x0]
80000b42:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b46:	91 09       	st.w	r8[0x0],r9
	prev->nexttcb = *pth;
80000b48:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b4c:	70 09       	ld.w	r9,r8[0x0]
80000b4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b52:	91 09       	st.w	r8[0x0],r9
	return 0;
80000b54:	30 08       	mov	r8,0
}
80000b56:	10 9c       	mov	r12,r8
80000b58:	2f bd       	sub	sp,-20
80000b5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b5e:	00 00       	add	r0,r0
80000b60:	00 00       	add	r0,r0
80000b62:	06 98       	mov	r8,r3

80000b64 <removeDelayQueue>:
/* removeDelayQueue()													*/
/*																		*/
/* Removes the given task from the delay queue							*/
/************************************************************************/
int removeDelayQueue(ROSA_taskHandle_t ** pth)
{
80000b64:	eb cd 40 80 	pushm	r7,lr
80000b68:	1a 97       	mov	r7,sp
80000b6a:	20 3d       	sub	sp,12
80000b6c:	ef 4c ff f4 	st.w	r7[-12],r12
	// If there are no tasks in the delay queue, return error code -1
	if (DELAYQUEUE == NULL)
80000b70:	4a 48       	lddpc	r8,80000c00 <removeDelayQueue+0x9c>
80000b72:	70 08       	ld.w	r8,r8[0x0]
80000b74:	58 08       	cp.w	r8,0
80000b76:	c0 31       	brne	80000b7c <removeDelayQueue+0x18>
	{
		return -1;
80000b78:	3f f8       	mov	r8,-1
80000b7a:	c3 f8       	rjmp	80000bf8 <removeDelayQueue+0x94>
	}
	// If there is only one task in the status queue and this is pth, remove it from the queue
	if (DELAYQUEUE->id == (*pth)->id)
80000b7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b80:	70 09       	ld.w	r9,r8[0x0]
80000b82:	4a 08       	lddpc	r8,80000c00 <removeDelayQueue+0x9c>
80000b84:	70 08       	ld.w	r8,r8[0x0]
80000b86:	10 39       	cp.w	r9,r8
80000b88:	c1 21       	brne	80000bac <removeDelayQueue+0x48>
	{
		if (DELAYQUEUE->nexttcb == NULL)
80000b8a:	49 e8       	lddpc	r8,80000c00 <removeDelayQueue+0x9c>
80000b8c:	70 08       	ld.w	r8,r8[0x0]
80000b8e:	70 08       	ld.w	r8,r8[0x0]
80000b90:	58 08       	cp.w	r8,0
80000b92:	c0 51       	brne	80000b9c <removeDelayQueue+0x38>
		{
			DELAYQUEUE = NULL; // Task was the only one in the list
80000b94:	49 b8       	lddpc	r8,80000c00 <removeDelayQueue+0x9c>
80000b96:	30 09       	mov	r9,0
80000b98:	91 09       	st.w	r8[0x0],r9
80000b9a:	c0 78       	rjmp	80000ba8 <removeDelayQueue+0x44>
		} else {
			DELAYQUEUE = (*pth)->nexttcb;
80000b9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ba0:	70 08       	ld.w	r8,r8[0x0]
80000ba2:	70 09       	ld.w	r9,r8[0x0]
80000ba4:	49 78       	lddpc	r8,80000c00 <removeDelayQueue+0x9c>
80000ba6:	91 09       	st.w	r8[0x0],r9
		}
		return 0;
80000ba8:	30 08       	mov	r8,0
80000baa:	c2 78       	rjmp	80000bf8 <removeDelayQueue+0x94>
	}
	// Else, find the task before pth and point it to the task after pth, removing it
	ROSA_taskHandle_t * next = DELAYQUEUE;
80000bac:	49 58       	lddpc	r8,80000c00 <removeDelayQueue+0x9c>
80000bae:	70 08       	ld.w	r8,r8[0x0]
80000bb0:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_taskHandle_t * prev;
	while (next->id != (*pth)->id)
80000bb4:	c1 08       	rjmp	80000bd4 <removeDelayQueue+0x70>
	{
		prev = next;
80000bb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bba:	ef 48 ff fc 	st.w	r7[-4],r8
		next = next->nexttcb;
80000bbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bc2:	70 08       	ld.w	r8,r8[0x0]
80000bc4:	ef 48 ff f8 	st.w	r7[-8],r8
		if(next == NULL)
80000bc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bcc:	58 08       	cp.w	r8,0
80000bce:	c0 31       	brne	80000bd4 <removeDelayQueue+0x70>
		{
			return -1; //Task is not in the list, so return error code -1
80000bd0:	3f f8       	mov	r8,-1
80000bd2:	c1 38       	rjmp	80000bf8 <removeDelayQueue+0x94>
		return 0;
	}
	// Else, find the task before pth and point it to the task after pth, removing it
	ROSA_taskHandle_t * next = DELAYQUEUE;
	ROSA_taskHandle_t * prev;
	while (next->id != (*pth)->id)
80000bd4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bd8:	70 09       	ld.w	r9,r8[0x0]
80000bda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bde:	10 39       	cp.w	r9,r8
80000be0:	ce b1       	brne	80000bb6 <removeDelayQueue+0x52>
		if(next == NULL)
		{
			return -1; //Task is not in the list, so return error code -1
		}
	}
	prev->nexttcb = next->nexttcb;
80000be2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000be6:	70 09       	ld.w	r9,r8[0x0]
80000be8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bec:	91 09       	st.w	r8[0x0],r9
	next->nexttcb = NULL;
80000bee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bf2:	30 09       	mov	r9,0
80000bf4:	91 09       	st.w	r8[0x0],r9
	return 0;
80000bf6:	30 08       	mov	r8,0
}
80000bf8:	10 9c       	mov	r12,r8
80000bfa:	2f dd       	sub	sp,-12
80000bfc:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c00:	00 00       	add	r0,r0
80000c02:	06 98       	mov	r8,r3

80000c04 <buttonInit>:
80000c04:	eb cd 40 80 	pushm	r7,lr
80000c08:	1a 97       	mov	r7,sp
80000c0a:	30 1b       	mov	r11,1
80000c0c:	35 8c       	mov	r12,88
80000c0e:	f0 1f 00 07 	mcall	80000c28 <buttonInit+0x24>
80000c12:	30 1b       	mov	r11,1
80000c14:	35 5c       	mov	r12,85
80000c16:	f0 1f 00 05 	mcall	80000c28 <buttonInit+0x24>
80000c1a:	30 1b       	mov	r11,1
80000c1c:	35 2c       	mov	r12,82
80000c1e:	f0 1f 00 03 	mcall	80000c28 <buttonInit+0x24>
80000c22:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c26:	00 00       	add	r0,r0
80000c28:	80 00       	ld.sh	r0,r0[0x0]
80000c2a:	0c 64       	and	r4,r6

80000c2c <joystickInit>:
80000c2c:	eb cd 40 80 	pushm	r7,lr
80000c30:	1a 97       	mov	r7,sp
80000c32:	30 1b       	mov	r11,1
80000c34:	31 bc       	mov	r12,27
80000c36:	f0 1f 00 0b 	mcall	80000c60 <joystickInit+0x34>
80000c3a:	30 1b       	mov	r11,1
80000c3c:	31 9c       	mov	r12,25
80000c3e:	f0 1f 00 09 	mcall	80000c60 <joystickInit+0x34>
80000c42:	30 1b       	mov	r11,1
80000c44:	31 cc       	mov	r12,28
80000c46:	f0 1f 00 07 	mcall	80000c60 <joystickInit+0x34>
80000c4a:	30 1b       	mov	r11,1
80000c4c:	31 4c       	mov	r12,20
80000c4e:	f0 1f 00 05 	mcall	80000c60 <joystickInit+0x34>
80000c52:	30 1b       	mov	r11,1
80000c54:	31 ac       	mov	r12,26
80000c56:	f0 1f 00 03 	mcall	80000c60 <joystickInit+0x34>
80000c5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c5e:	00 00       	add	r0,r0
80000c60:	80 00       	ld.sh	r0,r0[0x0]
80000c62:	0c 64       	and	r4,r6

80000c64 <gpioInit>:
80000c64:	eb cd 40 80 	pushm	r7,lr
80000c68:	1a 97       	mov	r7,sp
80000c6a:	20 7d       	sub	sp,28
80000c6c:	ef 4c ff ec 	st.w	r7[-20],r12
80000c70:	ef 4b ff e8 	st.w	r7[-24],r11
80000c74:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c78:	a5 58       	asr	r8,0x5
80000c7a:	ef 48 ff f4 	st.w	r7[-12],r8
80000c7e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c82:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000c86:	ef 48 ff fc 	st.w	r7[-4],r8
80000c8a:	30 19       	mov	r9,1
80000c8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c90:	f2 08 09 48 	lsl	r8,r9,r8
80000c94:	ef 48 ff f8 	st.w	r7[-8],r8
80000c98:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c9c:	a9 68       	lsl	r8,0x8
80000c9e:	e0 28 f0 00 	sub	r8,61440
80000ca2:	ef 48 ff f0 	st.w	r7[-16],r8
80000ca6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000caa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cae:	91 19       	st.w	r8[0x4],r9
80000cb0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000cb4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cb8:	91 69       	st.w	r8[0x18],r9
80000cba:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000cbe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cc2:	91 a9       	st.w	r8[0x28],r9
80000cc4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000cc8:	ef 48 ff e4 	st.w	r7[-28],r8
80000ccc:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000cd0:	58 08       	cp.w	r8,0
80000cd2:	c0 60       	breq	80000cde <gpioInit+0x7a>
80000cd4:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000cd8:	58 18       	cp.w	r8,1
80000cda:	c0 90       	breq	80000cec <gpioInit+0x88>
80000cdc:	c0 f8       	rjmp	80000cfa <gpioInit+0x96>
80000cde:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ce2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ce6:	f1 49 00 44 	st.w	r8[68],r9
80000cea:	c0 e8       	rjmp	80000d06 <gpioInit+0xa2>
80000cec:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000cf0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cf4:	f1 49 00 48 	st.w	r8[72],r9
80000cf8:	c0 78       	rjmp	80000d06 <gpioInit+0xa2>
80000cfa:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000cfe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000d02:	f1 49 00 48 	st.w	r8[72],r9
80000d06:	2f 9d       	sub	sp,-28
80000d08:	e3 cd 80 80 	ldm	sp++,r7,pc

80000d0c <gpioClear>:
80000d0c:	eb cd 40 80 	pushm	r7,lr
80000d10:	1a 97       	mov	r7,sp
80000d12:	20 5d       	sub	sp,20
80000d14:	ef 4c ff ec 	st.w	r7[-20],r12
80000d18:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d1c:	a5 58       	asr	r8,0x5
80000d1e:	ef 48 ff f4 	st.w	r7[-12],r8
80000d22:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d26:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000d2a:	ef 48 ff fc 	st.w	r7[-4],r8
80000d2e:	30 19       	mov	r9,1
80000d30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d34:	f2 08 09 48 	lsl	r8,r9,r8
80000d38:	ef 48 ff f8 	st.w	r7[-8],r8
80000d3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d40:	a9 68       	lsl	r8,0x8
80000d42:	e0 28 f0 00 	sub	r8,61440
80000d46:	ef 48 ff f0 	st.w	r7[-16],r8
80000d4a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d4e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000d52:	f1 49 00 58 	st.w	r8[88],r9
80000d56:	2f bd       	sub	sp,-20
80000d58:	e3 cd 80 80 	ldm	sp++,r7,pc

80000d5c <gpioSet>:
80000d5c:	eb cd 40 80 	pushm	r7,lr
80000d60:	1a 97       	mov	r7,sp
80000d62:	20 5d       	sub	sp,20
80000d64:	ef 4c ff ec 	st.w	r7[-20],r12
80000d68:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d6c:	a5 58       	asr	r8,0x5
80000d6e:	ef 48 ff f4 	st.w	r7[-12],r8
80000d72:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d76:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000d7a:	ef 48 ff fc 	st.w	r7[-4],r8
80000d7e:	30 19       	mov	r9,1
80000d80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d84:	f2 08 09 48 	lsl	r8,r9,r8
80000d88:	ef 48 ff f8 	st.w	r7[-8],r8
80000d8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d90:	a9 68       	lsl	r8,0x8
80000d92:	e0 28 f0 00 	sub	r8,61440
80000d96:	ef 48 ff f0 	st.w	r7[-16],r8
80000d9a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d9e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000da2:	f1 49 00 54 	st.w	r8[84],r9
80000da6:	2f bd       	sub	sp,-20
80000da8:	e3 cd 80 80 	ldm	sp++,r7,pc

80000dac <ledInit>:
80000dac:	eb cd 40 80 	pushm	r7,lr
80000db0:	1a 97       	mov	r7,sp
80000db2:	20 9d       	sub	sp,36
80000db4:	49 e8       	lddpc	r8,80000e2c <ledInit+0x80>
80000db6:	ee cb 00 24 	sub	r11,r7,36
80000dba:	10 9a       	mov	r10,r8
80000dbc:	f4 e8 00 00 	ld.d	r8,r10[0]
80000dc0:	f6 e9 00 00 	st.d	r11[0],r8
80000dc4:	f4 e8 00 08 	ld.d	r8,r10[8]
80000dc8:	f6 e9 00 08 	st.d	r11[8],r8
80000dcc:	f4 e8 00 10 	ld.d	r8,r10[16]
80000dd0:	f6 e9 00 10 	st.d	r11[16],r8
80000dd4:	f4 e8 00 18 	ld.d	r8,r10[24]
80000dd8:	f6 e9 00 18 	st.d	r11[24],r8
80000ddc:	30 08       	mov	r8,0
80000dde:	ef 48 ff fc 	st.w	r7[-4],r8
80000de2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000de6:	a3 68       	lsl	r8,0x2
80000de8:	ee 08 00 08 	add	r8,r7,r8
80000dec:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000df0:	10 9c       	mov	r12,r8
80000df2:	f0 1f 00 10 	mcall	80000e30 <ledInit+0x84>
80000df6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dfa:	a3 68       	lsl	r8,0x2
80000dfc:	ee 08 00 08 	add	r8,r7,r8
80000e00:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000e04:	30 0b       	mov	r11,0
80000e06:	10 9c       	mov	r12,r8
80000e08:	f0 1f 00 0b 	mcall	80000e34 <ledInit+0x88>
80000e0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e10:	58 78       	cp.w	r8,7
80000e12:	5f 18       	srne	r8
80000e14:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000e18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e1c:	2f f8       	sub	r8,-1
80000e1e:	ef 48 ff fc 	st.w	r7[-4],r8
80000e22:	58 09       	cp.w	r9,0
80000e24:	cd f1       	brne	80000de2 <ledInit+0x36>
80000e26:	2f 7d       	sub	sp,-36
80000e28:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e2c:	80 00       	ld.sh	r0,r0[0x0]
80000e2e:	20 00       	sub	r0,0
80000e30:	80 00       	ld.sh	r0,r0[0x0]
80000e32:	0e 58       	eor	r8,r7
80000e34:	80 00       	ld.sh	r0,r0[0x0]
80000e36:	0c 64       	and	r4,r6

80000e38 <ledOn>:
80000e38:	eb cd 40 80 	pushm	r7,lr
80000e3c:	1a 97       	mov	r7,sp
80000e3e:	20 1d       	sub	sp,4
80000e40:	ef 4c ff fc 	st.w	r7[-4],r12
80000e44:	ee fc ff fc 	ld.w	r12,r7[-4]
80000e48:	f0 1f 00 03 	mcall	80000e54 <ledOn+0x1c>
80000e4c:	2f fd       	sub	sp,-4
80000e4e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e52:	00 00       	add	r0,r0
80000e54:	80 00       	ld.sh	r0,r0[0x0]
80000e56:	0d 0c       	ld.w	r12,r6++

80000e58 <ledOff>:
80000e58:	eb cd 40 80 	pushm	r7,lr
80000e5c:	1a 97       	mov	r7,sp
80000e5e:	20 1d       	sub	sp,4
80000e60:	ef 4c ff fc 	st.w	r7[-4],r12
80000e64:	ee fc ff fc 	ld.w	r12,r7[-4]
80000e68:	f0 1f 00 03 	mcall	80000e74 <ledOff+0x1c>
80000e6c:	2f fd       	sub	sp,-4
80000e6e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e72:	00 00       	add	r0,r0
80000e74:	80 00       	ld.sh	r0,r0[0x0]
80000e76:	0d 5c       	ld.sh	r12,--r6

80000e78 <potInit>:
80000e78:	d3 01       	pushm	r11-r12
80000e7a:	e0 6c 10 00 	mov	r12,4096
80000e7e:	ea 1c ff ff 	orh	r12,0xffff
80000e82:	31 6b       	mov	r11,22
80000e84:	99 2b       	st.w	r12[0x8],r11
80000e86:	99 6b       	st.w	r12[0x18],r11
80000e88:	99 6b       	st.w	r12[0x18],r11
80000e8a:	e0 6c 3c 00 	mov	r12,15360
80000e8e:	ea 1c ff ff 	orh	r12,0xffff
80000e92:	30 1b       	mov	r11,1
80000e94:	99 0b       	st.w	r12[0x0],r11
80000e96:	e0 6b 0f 1f 	mov	r11,3871
80000e9a:	b1 6b       	lsl	r11,0x10
80000e9c:	99 1b       	st.w	r12[0x4],r11
80000e9e:	30 2b       	mov	r11,2
80000ea0:	99 4b       	st.w	r12[0x10],r11
80000ea2:	d3 02       	popm	r11-r12
80000ea4:	1c 9f       	mov	pc,lr

80000ea6 <potGetValue>:
80000ea6:	d1 81       	pushm	r10-r11
80000ea8:	e0 6c 3c 00 	mov	r12,15360
80000eac:	ea 1c ff ff 	orh	r12,0xffff
80000eb0:	30 2b       	mov	r11,2
80000eb2:	99 0b       	st.w	r12[0x0],r11

80000eb4 <a1>:
80000eb4:	78 7a       	ld.w	r10,r12[0x1c]
80000eb6:	16 7a       	tst	r10,r11
80000eb8:	cf e0       	breq	80000eb4 <a1>
80000eba:	78 dc       	ld.w	r12,r12[0x34]
80000ebc:	d1 82       	popm	r10-r11
80000ebe:	1c 9f       	mov	pc,lr

80000ec0 <usartReset>:
80000ec0:	eb cd 40 80 	pushm	r7,lr
80000ec4:	1a 97       	mov	r7,sp
80000ec6:	20 3d       	sub	sp,12
80000ec8:	ef 4c ff f8 	st.w	r7[-8],r12
80000ecc:	f0 1f 00 16 	mcall	80000f24 <usartReset+0x64>
80000ed0:	18 98       	mov	r8,r12
80000ed2:	ef 48 ff fc 	st.w	r7[-4],r8
80000ed6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000eda:	58 08       	cp.w	r8,0
80000edc:	c0 30       	breq	80000ee2 <usartReset+0x22>
80000ede:	f0 1f 00 13 	mcall	80000f28 <usartReset+0x68>
80000ee2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ee6:	3f f8       	mov	r8,-1
80000ee8:	93 38       	st.w	r9[0xc],r8
80000eea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000eee:	70 58       	ld.w	r8,r8[0x14]
80000ef0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ef4:	58 08       	cp.w	r8,0
80000ef6:	c0 30       	breq	80000efc <usartReset+0x3c>
80000ef8:	f0 1f 00 0d 	mcall	80000f2c <usartReset+0x6c>
80000efc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f00:	30 08       	mov	r8,0
80000f02:	93 18       	st.w	r9[0x4],r8
80000f04:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f08:	30 08       	mov	r8,0
80000f0a:	93 98       	st.w	r9[0x24],r8
80000f0c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f10:	30 08       	mov	r8,0
80000f12:	93 a8       	st.w	r9[0x28],r8
80000f14:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f18:	ea 68 61 0c 	mov	r8,680204
80000f1c:	93 08       	st.w	r9[0x0],r8
80000f1e:	2f dd       	sub	sp,-12
80000f20:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f24:	80 00       	ld.sh	r0,r0[0x0]
80000f26:	1d 6e       	ld.uh	lr,--lr
80000f28:	80 00       	ld.sh	r0,r0[0x0]
80000f2a:	1d 66       	ld.uh	r6,--lr
80000f2c:	80 00       	ld.sh	r0,r0[0x0]
80000f2e:	1d 6a       	ld.uh	r10,--lr

80000f30 <usartSetBaudrate>:
80000f30:	eb cd 40 80 	pushm	r7,lr
80000f34:	1a 97       	mov	r7,sp
80000f36:	20 bd       	sub	sp,44
80000f38:	ef 4c ff ec 	st.w	r7[-20],r12
80000f3c:	ef 4b ff e8 	st.w	r7[-24],r11
80000f40:	ef 4a ff e4 	st.w	r7[-28],r10
80000f44:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000f48:	f0 09 15 04 	lsl	r9,r8,0x4
80000f4c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000f50:	10 39       	cp.w	r9,r8
80000f52:	e0 8b 00 06 	brhi	80000f5e <usartSetBaudrate+0x2e>
80000f56:	31 09       	mov	r9,16
80000f58:	ef 49 ff d4 	st.w	r7[-44],r9
80000f5c:	c0 48       	rjmp	80000f64 <usartSetBaudrate+0x34>
80000f5e:	30 88       	mov	r8,8
80000f60:	ef 48 ff d4 	st.w	r7[-44],r8
80000f64:	ee f9 ff d4 	ld.w	r9,r7[-44]
80000f68:	ef 49 ff f0 	st.w	r7[-16],r9
80000f6c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000f70:	f0 0a 15 03 	lsl	r10,r8,0x3
80000f74:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000f78:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000f7c:	f2 08 02 48 	mul	r8,r9,r8
80000f80:	a1 98       	lsr	r8,0x1
80000f82:	10 0a       	add	r10,r8
80000f84:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000f88:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000f8c:	f2 08 02 48 	mul	r8,r9,r8
80000f90:	f4 08 0d 08 	divu	r8,r10,r8
80000f94:	ef 48 ff f4 	st.w	r7[-12],r8
80000f98:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f9c:	a3 98       	lsr	r8,0x3
80000f9e:	ef 48 ff f8 	st.w	r7[-8],r8
80000fa2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000fa6:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000faa:	ef 48 ff fc 	st.w	r7[-4],r8
80000fae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fb2:	58 08       	cp.w	r8,0
80000fb4:	c0 70       	breq	80000fc2 <usartSetBaudrate+0x92>
80000fb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fba:	e0 48 ff ff 	cp.w	r8,65535
80000fbe:	e0 88 00 06 	brls	80000fca <usartSetBaudrate+0x9a>
80000fc2:	30 18       	mov	r8,1
80000fc4:	ef 48 ff d8 	st.w	r7[-40],r8
80000fc8:	c2 c8       	rjmp	80001020 <usartSetBaudrate+0xf0>
80000fca:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000fce:	70 18       	ld.w	r8,r8[0x4]
80000fd0:	10 99       	mov	r9,r8
80000fd2:	e4 19 ff f7 	andh	r9,0xfff7
80000fd6:	e0 19 fe cf 	andl	r9,0xfecf
80000fda:	ef 49 ff dc 	st.w	r7[-36],r9
80000fde:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000fe2:	59 08       	cp.w	r8,16
80000fe4:	c0 60       	breq	80000ff0 <usartSetBaudrate+0xc0>
80000fe6:	e8 68 00 00 	mov	r8,524288
80000fea:	ef 48 ff e0 	st.w	r7[-32],r8
80000fee:	c0 48       	rjmp	80000ff6 <usartSetBaudrate+0xc6>
80000ff0:	30 09       	mov	r9,0
80000ff2:	ef 49 ff e0 	st.w	r7[-32],r9
80000ff6:	ee f9 ff dc 	ld.w	r9,r7[-36]
80000ffa:	ee f8 ff e0 	ld.w	r8,r7[-32]
80000ffe:	10 49       	or	r9,r8
80001000:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001004:	91 19       	st.w	r8[0x4],r9
80001006:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000100a:	f0 09 15 10 	lsl	r9,r8,0x10
8000100e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001012:	10 49       	or	r9,r8
80001014:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001018:	91 89       	st.w	r8[0x20],r9
8000101a:	30 09       	mov	r9,0
8000101c:	ef 49 ff d8 	st.w	r7[-40],r9
80001020:	ee f8 ff d8 	ld.w	r8,r7[-40]
80001024:	10 9c       	mov	r12,r8
80001026:	2f 5d       	sub	sp,-44
80001028:	e3 cd 80 80 	ldm	sp++,r7,pc

8000102c <usartInit>:
8000102c:	eb cd 40 80 	pushm	r7,lr
80001030:	1a 97       	mov	r7,sp
80001032:	20 4d       	sub	sp,16
80001034:	ef 4c ff f8 	st.w	r7[-8],r12
80001038:	ef 4b ff f4 	st.w	r7[-12],r11
8000103c:	ef 4a ff f0 	st.w	r7[-16],r10
80001040:	fe 78 10 00 	mov	r8,-61440
80001044:	ef 48 ff fc 	st.w	r7[-4],r8
80001048:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000104c:	30 18       	mov	r8,1
8000104e:	93 28       	st.w	r9[0x8],r8
80001050:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001054:	30 28       	mov	r8,2
80001056:	93 28       	st.w	r9[0x8],r8
80001058:	ee fc ff f8 	ld.w	r12,r7[-8]
8000105c:	f0 1f 00 3b 	mcall	80001148 <usartInit+0x11c>
80001060:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001064:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001068:	70 08       	ld.w	r8,r8[0x0]
8000106a:	12 9a       	mov	r10,r9
8000106c:	10 9b       	mov	r11,r8
8000106e:	ee fc ff f8 	ld.w	r12,r7[-8]
80001072:	f0 1f 00 37 	mcall	8000114c <usartInit+0x120>
80001076:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000107a:	11 c9       	ld.ub	r9,r8[0x4]
8000107c:	30 98       	mov	r8,9
8000107e:	f0 09 18 00 	cp.b	r9,r8
80001082:	c0 a1       	brne	80001096 <usartInit+0x6a>
80001084:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001088:	70 18       	ld.w	r8,r8[0x4]
8000108a:	10 99       	mov	r9,r8
8000108c:	b1 b9       	sbr	r9,0x11
8000108e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001092:	91 19       	st.w	r8[0x4],r9
80001094:	c0 d8       	rjmp	800010ae <usartInit+0x82>
80001096:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000109a:	70 19       	ld.w	r9,r8[0x4]
8000109c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010a0:	11 c8       	ld.ub	r8,r8[0x4]
800010a2:	20 58       	sub	r8,5
800010a4:	a7 68       	lsl	r8,0x6
800010a6:	10 49       	or	r9,r8
800010a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010ac:	91 19       	st.w	r8[0x4],r9
800010ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010b2:	70 1a       	ld.w	r10,r8[0x4]
800010b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010b8:	11 d8       	ld.ub	r8,r8[0x5]
800010ba:	f0 09 15 09 	lsl	r9,r8,0x9
800010be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010c2:	f1 38 00 08 	ld.ub	r8,r8[8]
800010c6:	af 68       	lsl	r8,0xe
800010c8:	f3 e8 10 08 	or	r8,r9,r8
800010cc:	f5 e8 10 09 	or	r9,r10,r8
800010d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010d4:	91 19       	st.w	r8[0x4],r9
800010d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010da:	90 39       	ld.sh	r9,r8[0x6]
800010dc:	30 28       	mov	r8,2
800010de:	f0 09 19 00 	cp.h	r9,r8
800010e2:	e0 88 00 14 	brls	8000110a <usartInit+0xde>
800010e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010ea:	70 18       	ld.w	r8,r8[0x4]
800010ec:	10 99       	mov	r9,r8
800010ee:	ad b9       	sbr	r9,0xd
800010f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010f4:	91 19       	st.w	r8[0x4],r9
800010f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010fa:	90 38       	ld.sh	r8,r8[0x6]
800010fc:	5c 78       	castu.h	r8
800010fe:	20 28       	sub	r8,2
80001100:	10 99       	mov	r9,r8
80001102:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001106:	91 a9       	st.w	r8[0x28],r9
80001108:	c0 d8       	rjmp	80001122 <usartInit+0xf6>
8000110a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000110e:	70 19       	ld.w	r9,r8[0x4]
80001110:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001114:	90 38       	ld.sh	r8,r8[0x6]
80001116:	5c 78       	castu.h	r8
80001118:	ad 68       	lsl	r8,0xc
8000111a:	10 49       	or	r9,r8
8000111c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001120:	91 19       	st.w	r8[0x4],r9
80001122:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001126:	70 18       	ld.w	r8,r8[0x4]
80001128:	10 99       	mov	r9,r8
8000112a:	e0 19 ff f0 	andl	r9,0xfff0
8000112e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001132:	91 19       	st.w	r8[0x4],r9
80001134:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001138:	35 08       	mov	r8,80
8000113a:	93 08       	st.w	r9[0x0],r8
8000113c:	30 08       	mov	r8,0
8000113e:	10 9c       	mov	r12,r8
80001140:	2f cd       	sub	sp,-16
80001142:	e3 cd 80 80 	ldm	sp++,r7,pc
80001146:	00 00       	add	r0,r0
80001148:	80 00       	ld.sh	r0,r0[0x0]
8000114a:	0e c0       	st.b	r7++,r0
8000114c:	80 00       	ld.sh	r0,r0[0x0]
8000114e:	0f 30       	ld.ub	r0,r7++

80001150 <usartWriteChar>:
80001150:	eb cd 40 80 	pushm	r7,lr
80001154:	1a 97       	mov	r7,sp
80001156:	20 3d       	sub	sp,12
80001158:	ef 4c ff f8 	st.w	r7[-8],r12
8000115c:	16 98       	mov	r8,r11
8000115e:	ef 68 ff f4 	st.b	r7[-12],r8
80001162:	e4 68 00 00 	mov	r8,262144
80001166:	ef 48 ff fc 	st.w	r7[-4],r8
8000116a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000116e:	58 08       	cp.w	r8,0
80001170:	5f 18       	srne	r8
80001172:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80001176:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000117a:	20 18       	sub	r8,1
8000117c:	ef 48 ff fc 	st.w	r7[-4],r8
80001180:	12 98       	mov	r8,r9
80001182:	ec 18 00 01 	eorl	r8,0x1
80001186:	5c 58       	castu.b	r8
80001188:	c0 71       	brne	80001196 <usartWriteChar+0x46>
8000118a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000118e:	70 58       	ld.w	r8,r8[0x14]
80001190:	e2 18 00 02 	andl	r8,0x2,COH
80001194:	ce b0       	breq	8000116a <usartWriteChar+0x1a>
80001196:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000119a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000119e:	91 79       	st.w	r8[0x1c],r9
800011a0:	2f dd       	sub	sp,-12
800011a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800011a6:	d7 03       	nop

800011a8 <usartWriteLine>:
800011a8:	eb cd 40 80 	pushm	r7,lr
800011ac:	1a 97       	mov	r7,sp
800011ae:	20 2d       	sub	sp,8
800011b0:	ef 4c ff fc 	st.w	r7[-4],r12
800011b4:	ef 4b ff f8 	st.w	r7[-8],r11
800011b8:	c1 88       	rjmp	800011e8 <usartWriteLine+0x40>
800011ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800011be:	11 88       	ld.ub	r8,r8[0x0]
800011c0:	58 a8       	cp.w	r8,10
800011c2:	c0 61       	brne	800011ce <usartWriteLine+0x26>
800011c4:	30 db       	mov	r11,13
800011c6:	ee fc ff fc 	ld.w	r12,r7[-4]
800011ca:	f0 1f 00 0c 	mcall	800011f8 <usartWriteLine+0x50>
800011ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800011d2:	11 88       	ld.ub	r8,r8[0x0]
800011d4:	10 9b       	mov	r11,r8
800011d6:	ee fc ff fc 	ld.w	r12,r7[-4]
800011da:	f0 1f 00 08 	mcall	800011f8 <usartWriteLine+0x50>
800011de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800011e2:	2f f8       	sub	r8,-1
800011e4:	ef 48 ff f8 	st.w	r7[-8],r8
800011e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800011ec:	11 88       	ld.ub	r8,r8[0x0]
800011ee:	58 08       	cp.w	r8,0
800011f0:	ce 51       	brne	800011ba <usartWriteLine+0x12>
800011f2:	2f ed       	sub	sp,-8
800011f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800011f8:	80 00       	ld.sh	r0,r0[0x0]
800011fa:	11 50       	ld.sh	r0,--r8

800011fc <timerInit>:
800011fc:	d5 01       	pushm	r11,lr
800011fe:	d2 01       	pushm	r12
80001200:	f0 1f 00 28 	mcall	800012a0 <timerClearInterrupt+0x10>
80001204:	f0 1f 00 28 	mcall	800012a4 <timerClearInterrupt+0x14>
80001208:	e0 6c 38 00 	mov	r12,14336
8000120c:	ea 1c ff ff 	orh	r12,0xffff
80001210:	e0 6b c0 00 	mov	r11,49152
80001214:	ea 1b 00 00 	orh	r11,0x0
80001218:	99 1b       	st.w	r12[0x4],r11
8000121a:	30 1b       	mov	r11,1
8000121c:	a5 6b       	lsl	r11,0x4
8000121e:	99 9b       	st.w	r12[0x24],r11
80001220:	d2 02       	popm	r12
80001222:	f0 1f 00 22 	mcall	800012a8 <timerClearInterrupt+0x18>
80001226:	d5 02       	popm	r11,lr
80001228:	1c 9f       	mov	pc,lr

8000122a <timerReset>:
8000122a:	d3 01       	pushm	r11-r12
8000122c:	e0 6c 38 00 	mov	r12,14336
80001230:	ea 1c ff ff 	orh	r12,0xffff
80001234:	30 5b       	mov	r11,5
80001236:	99 0b       	st.w	r12[0x0],r11
80001238:	e0 6b 00 08 	mov	r11,8
8000123c:	ea 1b 00 00 	orh	r11,0x0
80001240:	76 0b       	ld.w	r11,r11[0x0]
80001242:	99 7b       	st.w	r12[0x1c],r11
80001244:	d3 02       	popm	r11-r12
80001246:	1c 9f       	mov	pc,lr

80001248 <timerStop>:
80001248:	d3 01       	pushm	r11-r12
8000124a:	e0 6c 38 00 	mov	r12,14336
8000124e:	ea 1c ff ff 	orh	r12,0xffff
80001252:	30 2b       	mov	r11,2
80001254:	99 0b       	st.w	r12[0x0],r11
80001256:	d3 02       	popm	r11-r12
80001258:	1c 9f       	mov	pc,lr

8000125a <timerRCSet>:
8000125a:	d3 01       	pushm	r11-r12
8000125c:	49 4b       	lddpc	r11,800012ac <timerClearInterrupt+0x1c>
8000125e:	97 0c       	st.w	r11[0x0],r12
80001260:	e0 6c 38 00 	mov	r12,14336
80001264:	ea 1c ff ff 	orh	r12,0xffff
80001268:	76 0b       	ld.w	r11,r11[0x0]
8000126a:	99 7b       	st.w	r12[0x1c],r11
8000126c:	d3 02       	popm	r11-r12
8000126e:	1c 9f       	mov	pc,lr

80001270 <timerPrescaleSet>:
80001270:	d3 81       	pushm	r10-r12
80001272:	49 0b       	lddpc	r11,800012b0 <timerClearInterrupt+0x20>
80001274:	97 0c       	st.w	r11[0x0],r12
80001276:	e0 6c 38 00 	mov	r12,14336
8000127a:	ea 1c ff ff 	orh	r12,0xffff
8000127e:	78 1a       	ld.w	r10,r12[0x4]
80001280:	3f 8b       	mov	r11,-8
80001282:	16 6a       	and	r10,r11
80001284:	48 bb       	lddpc	r11,800012b0 <timerClearInterrupt+0x20>
80001286:	76 0b       	ld.w	r11,r11[0x0]
80001288:	14 4b       	or	r11,r10
8000128a:	99 1b       	st.w	r12[0x4],r11
8000128c:	d3 82       	popm	r10-r12
8000128e:	1c 9f       	mov	pc,lr

80001290 <timerClearInterrupt>:
80001290:	d2 01       	pushm	r12
80001292:	e0 6c 38 00 	mov	r12,14336
80001296:	ea 1c ff ff 	orh	r12,0xffff
8000129a:	78 8c       	ld.w	r12,r12[0x20]
8000129c:	d2 02       	popm	r12
8000129e:	1c 9f       	mov	pc,lr
800012a0:	80 00       	ld.sh	r0,r0[0x0]
800012a2:	1d 66       	ld.uh	r6,--lr
800012a4:	80 00       	ld.sh	r0,r0[0x0]
800012a6:	12 90       	mov	r0,r9
800012a8:	80 00       	ld.sh	r0,r0[0x0]
800012aa:	09 cc       	ld.ub	r12,r4[0x4]
800012ac:	00 00       	add	r0,r0
800012ae:	00 08       	add	r8,r0
800012b0:	00 00       	add	r0,r0
800012b2:	00 0c       	add	r12,r0

800012b4 <_stext>:
800012b4:	49 7d       	lddpc	sp,80001310 <udata_end+0x4>
800012b6:	49 80       	lddpc	r0,80001314 <udata_end+0x8>
800012b8:	1a d0       	st.w	--sp,r0
800012ba:	e5 cd 20 00 	ldmts	sp,sp
800012be:	1b 00       	ld.w	r0,sp++
800012c0:	49 60       	lddpc	r0,80001318 <udata_end+0xc>
800012c2:	e3 b0 00 01 	mtsr	0x4,r0
800012c6:	d5 53       	csrf	0x15
800012c8:	e0 6c 0c 00 	mov	r12,3072
800012cc:	ea 1c ff ff 	orh	r12,0xffff
800012d0:	e0 6b 01 07 	mov	r11,263
800012d4:	99 ab       	st.w	r12[0x28],r11
800012d6:	30 4b       	mov	r11,4
800012d8:	99 0b       	st.w	r12[0x0],r11
800012da:	e0 6a 00 80 	mov	r10,128

800012de <xw8>:
800012de:	79 5b       	ld.w	r11,r12[0x54]
800012e0:	14 7b       	tst	r11,r10
800012e2:	cf e0       	breq	800012de <xw8>
800012e4:	30 5b       	mov	r11,5
800012e6:	99 0b       	st.w	r12[0x0],r11

800012e8 <idata_>:
800012e8:	48 d0       	lddpc	r0,8000131c <udata_end+0x10>
800012ea:	48 e1       	lddpc	r1,80001320 <udata_end+0x14>
800012ec:	02 30       	cp.w	r0,r1
800012ee:	c0 62       	brcc	800012fa <idata_end>
800012f0:	48 d2       	lddpc	r2,80001324 <udata_end+0x18>

800012f2 <idata_loop>:
800012f2:	05 04       	ld.w	r4,r2++
800012f4:	00 a4       	st.w	r0++,r4
800012f6:	02 30       	cp.w	r0,r1
800012f8:	cf d3       	brcs	800012f2 <idata_loop>

800012fa <idata_end>:
800012fa:	48 c0       	lddpc	r0,80001328 <udata_end+0x1c>
800012fc:	48 c1       	lddpc	r1,8000132c <udata_end+0x20>
800012fe:	02 30       	cp.w	r0,r1
80001300:	c0 62       	brcc	8000130c <udata_end>
80001302:	30 02       	mov	r2,0
80001304:	30 03       	mov	r3,0

80001306 <udata_loop>:
80001306:	00 a2       	st.w	r0++,r2
80001308:	02 30       	cp.w	r0,r1
8000130a:	cf e3       	brcs	80001306 <udata_loop>

8000130c <udata_end>:
8000130c:	48 9f       	lddpc	pc,80001330 <udata_end+0x24>
8000130e:	00 00       	add	r0,r0
80001310:	00 01       	add	r1,r0
80001312:	00 00       	add	r0,r0
80001314:	00 00       	add	r0,r0
80001316:	f0 00       	*unknown*
80001318:	80 00       	ld.sh	r0,r0[0x0]
8000131a:	1c 00       	add	r0,lr
8000131c:	00 00       	add	r0,r0
8000131e:	00 08       	add	r8,r0
80001320:	00 00       	add	r0,r0
80001322:	05 18       	ld.sh	r8,r2++
80001324:	80 00       	ld.sh	r0,r0[0x0]
80001326:	20 88       	sub	r8,8
80001328:	00 00       	add	r0,r0
8000132a:	05 18       	ld.sh	r8,r2++
8000132c:	00 00       	add	r0,r0
8000132e:	06 a8       	st.w	r3++,r8
80001330:	80 00       	ld.sh	r0,r0[0x0]
80001332:	01 8c       	ld.ub	r12,r0[0x0]

80001334 <calloc>:
80001334:	d4 01       	pushm	lr
80001336:	48 48       	lddpc	r8,80001344 <calloc+0x10>
80001338:	16 9a       	mov	r10,r11
8000133a:	18 9b       	mov	r11,r12
8000133c:	70 0c       	ld.w	r12,r8[0x0]
8000133e:	f0 1f 00 03 	mcall	80001348 <calloc+0x14>
80001342:	d8 02       	popm	pc
80001344:	00 00       	add	r0,r0
80001346:	01 00       	ld.w	r0,r0++
80001348:	80 00       	ld.sh	r0,r0[0x0]
8000134a:	13 4c       	ld.w	r12,--r9

8000134c <_calloc_r>:
8000134c:	d4 21       	pushm	r4-r7,lr
8000134e:	f4 0b 02 4b 	mul	r11,r10,r11
80001352:	f0 1f 00 15 	mcall	800013a4 <_calloc_r+0x58>
80001356:	18 97       	mov	r7,r12
80001358:	c2 30       	breq	8000139e <_calloc_r+0x52>
8000135a:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000135e:	e0 1a ff fc 	andl	r10,0xfffc
80001362:	20 4a       	sub	r10,4
80001364:	e0 4a 00 24 	cp.w	r10,36
80001368:	e0 8b 00 18 	brhi	80001398 <_calloc_r+0x4c>
8000136c:	18 98       	mov	r8,r12
8000136e:	59 3a       	cp.w	r10,19
80001370:	e0 88 00 0f 	brls	8000138e <_calloc_r+0x42>
80001374:	30 09       	mov	r9,0
80001376:	10 a9       	st.w	r8++,r9
80001378:	10 a9       	st.w	r8++,r9
8000137a:	59 ba       	cp.w	r10,27
8000137c:	e0 88 00 09 	brls	8000138e <_calloc_r+0x42>
80001380:	10 a9       	st.w	r8++,r9
80001382:	10 a9       	st.w	r8++,r9
80001384:	e0 4a 00 24 	cp.w	r10,36
80001388:	c0 31       	brne	8000138e <_calloc_r+0x42>
8000138a:	10 a9       	st.w	r8++,r9
8000138c:	10 a9       	st.w	r8++,r9
8000138e:	30 09       	mov	r9,0
80001390:	10 a9       	st.w	r8++,r9
80001392:	91 19       	st.w	r8[0x4],r9
80001394:	91 09       	st.w	r8[0x0],r9
80001396:	c0 48       	rjmp	8000139e <_calloc_r+0x52>
80001398:	30 0b       	mov	r11,0
8000139a:	f0 1f 00 04 	mcall	800013a8 <_calloc_r+0x5c>
8000139e:	0e 9c       	mov	r12,r7
800013a0:	d8 22       	popm	r4-r7,pc
800013a2:	00 00       	add	r0,r0
800013a4:	80 00       	ld.sh	r0,r0[0x0]
800013a6:	13 c4       	ld.ub	r4,r9[0x4]
800013a8:	80 00       	ld.sh	r0,r0[0x0]
800013aa:	18 14       	sub	r4,r12

800013ac <malloc>:
800013ac:	d4 01       	pushm	lr
800013ae:	48 48       	lddpc	r8,800013bc <malloc+0x10>
800013b0:	18 9b       	mov	r11,r12
800013b2:	70 0c       	ld.w	r12,r8[0x0]
800013b4:	f0 1f 00 03 	mcall	800013c0 <malloc+0x14>
800013b8:	d8 02       	popm	pc
800013ba:	00 00       	add	r0,r0
800013bc:	00 00       	add	r0,r0
800013be:	01 00       	ld.w	r0,r0++
800013c0:	80 00       	ld.sh	r0,r0[0x0]
800013c2:	13 c4       	ld.ub	r4,r9[0x4]

800013c4 <_malloc_r>:
800013c4:	d4 31       	pushm	r0-r7,lr
800013c6:	f6 c8 ff f5 	sub	r8,r11,-11
800013ca:	18 95       	mov	r5,r12
800013cc:	10 97       	mov	r7,r8
800013ce:	e0 17 ff f8 	andl	r7,0xfff8
800013d2:	59 68       	cp.w	r8,22
800013d4:	f9 b7 08 10 	movls	r7,16
800013d8:	16 37       	cp.w	r7,r11
800013da:	5f 38       	srlo	r8
800013dc:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800013e0:	c0 50       	breq	800013ea <_malloc_r+0x26>
800013e2:	30 c8       	mov	r8,12
800013e4:	99 38       	st.w	r12[0xc],r8
800013e6:	e0 8f 01 f3 	bral	800017cc <_malloc_r+0x408>
800013ea:	f0 1f 00 50 	mcall	80001528 <_malloc_r+0x164>
800013ee:	e0 47 01 f7 	cp.w	r7,503
800013f2:	e0 8b 00 1c 	brhi	8000142a <_malloc_r+0x66>
800013f6:	ee 03 16 03 	lsr	r3,r7,0x3
800013fa:	4c d8       	lddpc	r8,8000152c <_malloc_r+0x168>
800013fc:	f0 03 00 38 	add	r8,r8,r3<<0x3
80001400:	70 36       	ld.w	r6,r8[0xc]
80001402:	10 36       	cp.w	r6,r8
80001404:	c0 61       	brne	80001410 <_malloc_r+0x4c>
80001406:	ec c8 ff f8 	sub	r8,r6,-8
8000140a:	70 36       	ld.w	r6,r8[0xc]
8000140c:	10 36       	cp.w	r6,r8
8000140e:	c0 c0       	breq	80001426 <_malloc_r+0x62>
80001410:	6c 18       	ld.w	r8,r6[0x4]
80001412:	e0 18 ff fc 	andl	r8,0xfffc
80001416:	6c 3a       	ld.w	r10,r6[0xc]
80001418:	ec 08 00 09 	add	r9,r6,r8
8000141c:	0a 9c       	mov	r12,r5
8000141e:	6c 28       	ld.w	r8,r6[0x8]
80001420:	95 28       	st.w	r10[0x8],r8
80001422:	91 3a       	st.w	r8[0xc],r10
80001424:	c4 68       	rjmp	800014b0 <_malloc_r+0xec>
80001426:	2f e3       	sub	r3,-2
80001428:	c4 c8       	rjmp	800014c0 <_malloc_r+0xfc>
8000142a:	ee 03 16 09 	lsr	r3,r7,0x9
8000142e:	c0 41       	brne	80001436 <_malloc_r+0x72>
80001430:	ee 03 16 03 	lsr	r3,r7,0x3
80001434:	c2 68       	rjmp	80001480 <_malloc_r+0xbc>
80001436:	58 43       	cp.w	r3,4
80001438:	e0 8b 00 06 	brhi	80001444 <_malloc_r+0x80>
8000143c:	ee 03 16 06 	lsr	r3,r7,0x6
80001440:	2c 83       	sub	r3,-56
80001442:	c1 f8       	rjmp	80001480 <_malloc_r+0xbc>
80001444:	59 43       	cp.w	r3,20
80001446:	e0 8b 00 04 	brhi	8000144e <_malloc_r+0x8a>
8000144a:	2a 53       	sub	r3,-91
8000144c:	c1 a8       	rjmp	80001480 <_malloc_r+0xbc>
8000144e:	e0 43 00 54 	cp.w	r3,84
80001452:	e0 8b 00 06 	brhi	8000145e <_malloc_r+0x9a>
80001456:	ee 03 16 0c 	lsr	r3,r7,0xc
8000145a:	29 23       	sub	r3,-110
8000145c:	c1 28       	rjmp	80001480 <_malloc_r+0xbc>
8000145e:	e0 43 01 54 	cp.w	r3,340
80001462:	e0 8b 00 06 	brhi	8000146e <_malloc_r+0xaa>
80001466:	ee 03 16 0f 	lsr	r3,r7,0xf
8000146a:	28 93       	sub	r3,-119
8000146c:	c0 a8       	rjmp	80001480 <_malloc_r+0xbc>
8000146e:	e0 43 05 54 	cp.w	r3,1364
80001472:	e0 88 00 04 	brls	8000147a <_malloc_r+0xb6>
80001476:	37 e3       	mov	r3,126
80001478:	c0 48       	rjmp	80001480 <_malloc_r+0xbc>
8000147a:	ee 03 16 12 	lsr	r3,r7,0x12
8000147e:	28 43       	sub	r3,-124
80001480:	4a ba       	lddpc	r10,8000152c <_malloc_r+0x168>
80001482:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80001486:	74 36       	ld.w	r6,r10[0xc]
80001488:	c1 98       	rjmp	800014ba <_malloc_r+0xf6>
8000148a:	6c 19       	ld.w	r9,r6[0x4]
8000148c:	e0 19 ff fc 	andl	r9,0xfffc
80001490:	f2 07 01 0b 	sub	r11,r9,r7
80001494:	58 fb       	cp.w	r11,15
80001496:	e0 8a 00 04 	brle	8000149e <_malloc_r+0xda>
8000149a:	20 13       	sub	r3,1
8000149c:	c1 18       	rjmp	800014be <_malloc_r+0xfa>
8000149e:	6c 38       	ld.w	r8,r6[0xc]
800014a0:	58 0b       	cp.w	r11,0
800014a2:	c0 b5       	brlt	800014b8 <_malloc_r+0xf4>
800014a4:	6c 2a       	ld.w	r10,r6[0x8]
800014a6:	ec 09 00 09 	add	r9,r6,r9
800014aa:	0a 9c       	mov	r12,r5
800014ac:	91 2a       	st.w	r8[0x8],r10
800014ae:	95 38       	st.w	r10[0xc],r8
800014b0:	72 18       	ld.w	r8,r9[0x4]
800014b2:	a1 a8       	sbr	r8,0x0
800014b4:	93 18       	st.w	r9[0x4],r8
800014b6:	cb c8       	rjmp	8000162e <_malloc_r+0x26a>
800014b8:	10 96       	mov	r6,r8
800014ba:	14 36       	cp.w	r6,r10
800014bc:	ce 71       	brne	8000148a <_malloc_r+0xc6>
800014be:	2f f3       	sub	r3,-1
800014c0:	49 ba       	lddpc	r10,8000152c <_malloc_r+0x168>
800014c2:	f4 cc ff f8 	sub	r12,r10,-8
800014c6:	78 26       	ld.w	r6,r12[0x8]
800014c8:	18 36       	cp.w	r6,r12
800014ca:	c6 e0       	breq	800015a6 <_malloc_r+0x1e2>
800014cc:	6c 19       	ld.w	r9,r6[0x4]
800014ce:	e0 19 ff fc 	andl	r9,0xfffc
800014d2:	f2 07 01 08 	sub	r8,r9,r7
800014d6:	58 f8       	cp.w	r8,15
800014d8:	e0 89 00 90 	brgt	800015f8 <_malloc_r+0x234>
800014dc:	99 3c       	st.w	r12[0xc],r12
800014de:	99 2c       	st.w	r12[0x8],r12
800014e0:	58 08       	cp.w	r8,0
800014e2:	c0 55       	brlt	800014ec <_malloc_r+0x128>
800014e4:	ec 09 00 09 	add	r9,r6,r9
800014e8:	0a 9c       	mov	r12,r5
800014ea:	ce 3b       	rjmp	800014b0 <_malloc_r+0xec>
800014ec:	e0 49 01 ff 	cp.w	r9,511
800014f0:	e0 8b 00 13 	brhi	80001516 <_malloc_r+0x152>
800014f4:	a3 99       	lsr	r9,0x3
800014f6:	f4 09 00 38 	add	r8,r10,r9<<0x3
800014fa:	70 2b       	ld.w	r11,r8[0x8]
800014fc:	8d 38       	st.w	r6[0xc],r8
800014fe:	8d 2b       	st.w	r6[0x8],r11
80001500:	97 36       	st.w	r11[0xc],r6
80001502:	91 26       	st.w	r8[0x8],r6
80001504:	a3 49       	asr	r9,0x2
80001506:	74 18       	ld.w	r8,r10[0x4]
80001508:	30 1b       	mov	r11,1
8000150a:	f6 09 09 49 	lsl	r9,r11,r9
8000150e:	f1 e9 10 09 	or	r9,r8,r9
80001512:	95 19       	st.w	r10[0x4],r9
80001514:	c4 98       	rjmp	800015a6 <_malloc_r+0x1e2>
80001516:	f2 0a 16 09 	lsr	r10,r9,0x9
8000151a:	58 4a       	cp.w	r10,4
8000151c:	e0 8b 00 0a 	brhi	80001530 <_malloc_r+0x16c>
80001520:	f2 0a 16 06 	lsr	r10,r9,0x6
80001524:	2c 8a       	sub	r10,-56
80001526:	c2 38       	rjmp	8000156c <_malloc_r+0x1a8>
80001528:	80 00       	ld.sh	r0,r0[0x0]
8000152a:	18 22       	rsub	r2,r12
8000152c:	00 00       	add	r0,r0
8000152e:	01 04       	ld.w	r4,r0++
80001530:	59 4a       	cp.w	r10,20
80001532:	e0 8b 00 04 	brhi	8000153a <_malloc_r+0x176>
80001536:	2a 5a       	sub	r10,-91
80001538:	c1 a8       	rjmp	8000156c <_malloc_r+0x1a8>
8000153a:	e0 4a 00 54 	cp.w	r10,84
8000153e:	e0 8b 00 06 	brhi	8000154a <_malloc_r+0x186>
80001542:	f2 0a 16 0c 	lsr	r10,r9,0xc
80001546:	29 2a       	sub	r10,-110
80001548:	c1 28       	rjmp	8000156c <_malloc_r+0x1a8>
8000154a:	e0 4a 01 54 	cp.w	r10,340
8000154e:	e0 8b 00 06 	brhi	8000155a <_malloc_r+0x196>
80001552:	f2 0a 16 0f 	lsr	r10,r9,0xf
80001556:	28 9a       	sub	r10,-119
80001558:	c0 a8       	rjmp	8000156c <_malloc_r+0x1a8>
8000155a:	e0 4a 05 54 	cp.w	r10,1364
8000155e:	e0 88 00 04 	brls	80001566 <_malloc_r+0x1a2>
80001562:	37 ea       	mov	r10,126
80001564:	c0 48       	rjmp	8000156c <_malloc_r+0x1a8>
80001566:	f2 0a 16 12 	lsr	r10,r9,0x12
8000156a:	28 4a       	sub	r10,-124
8000156c:	4c 8b       	lddpc	r11,8000168c <_malloc_r+0x2c8>
8000156e:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80001572:	68 28       	ld.w	r8,r4[0x8]
80001574:	08 38       	cp.w	r8,r4
80001576:	c0 e1       	brne	80001592 <_malloc_r+0x1ce>
80001578:	76 19       	ld.w	r9,r11[0x4]
8000157a:	a3 4a       	asr	r10,0x2
8000157c:	30 1e       	mov	lr,1
8000157e:	fc 0a 09 4a 	lsl	r10,lr,r10
80001582:	f3 ea 10 0a 	or	r10,r9,r10
80001586:	10 99       	mov	r9,r8
80001588:	97 1a       	st.w	r11[0x4],r10
8000158a:	c0 a8       	rjmp	8000159e <_malloc_r+0x1da>
8000158c:	70 28       	ld.w	r8,r8[0x8]
8000158e:	08 38       	cp.w	r8,r4
80001590:	c0 60       	breq	8000159c <_malloc_r+0x1d8>
80001592:	70 1a       	ld.w	r10,r8[0x4]
80001594:	e0 1a ff fc 	andl	r10,0xfffc
80001598:	14 39       	cp.w	r9,r10
8000159a:	cf 93       	brcs	8000158c <_malloc_r+0x1c8>
8000159c:	70 39       	ld.w	r9,r8[0xc]
8000159e:	8d 39       	st.w	r6[0xc],r9
800015a0:	8d 28       	st.w	r6[0x8],r8
800015a2:	91 36       	st.w	r8[0xc],r6
800015a4:	93 26       	st.w	r9[0x8],r6
800015a6:	e6 08 14 02 	asr	r8,r3,0x2
800015aa:	30 1b       	mov	r11,1
800015ac:	4b 84       	lddpc	r4,8000168c <_malloc_r+0x2c8>
800015ae:	f6 08 09 4b 	lsl	r11,r11,r8
800015b2:	68 18       	ld.w	r8,r4[0x4]
800015b4:	10 3b       	cp.w	r11,r8
800015b6:	e0 8b 00 6f 	brhi	80001694 <_malloc_r+0x2d0>
800015ba:	f7 e8 00 09 	and	r9,r11,r8
800015be:	c0 b1       	brne	800015d4 <_malloc_r+0x210>
800015c0:	e0 13 ff fc 	andl	r3,0xfffc
800015c4:	a1 7b       	lsl	r11,0x1
800015c6:	2f c3       	sub	r3,-4
800015c8:	c0 38       	rjmp	800015ce <_malloc_r+0x20a>
800015ca:	2f c3       	sub	r3,-4
800015cc:	a1 7b       	lsl	r11,0x1
800015ce:	f7 e8 00 09 	and	r9,r11,r8
800015d2:	cf c0       	breq	800015ca <_malloc_r+0x206>
800015d4:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800015d8:	06 92       	mov	r2,r3
800015da:	1c 91       	mov	r1,lr
800015dc:	62 36       	ld.w	r6,r1[0xc]
800015de:	c2 e8       	rjmp	8000163a <_malloc_r+0x276>
800015e0:	6c 1a       	ld.w	r10,r6[0x4]
800015e2:	e0 1a ff fc 	andl	r10,0xfffc
800015e6:	f4 07 01 08 	sub	r8,r10,r7
800015ea:	58 f8       	cp.w	r8,15
800015ec:	e0 8a 00 15 	brle	80001616 <_malloc_r+0x252>
800015f0:	6c 3a       	ld.w	r10,r6[0xc]
800015f2:	6c 29       	ld.w	r9,r6[0x8]
800015f4:	95 29       	st.w	r10[0x8],r9
800015f6:	93 3a       	st.w	r9[0xc],r10
800015f8:	0e 99       	mov	r9,r7
800015fa:	ec 07 00 07 	add	r7,r6,r7
800015fe:	a1 a9       	sbr	r9,0x0
80001600:	99 37       	st.w	r12[0xc],r7
80001602:	99 27       	st.w	r12[0x8],r7
80001604:	8d 19       	st.w	r6[0x4],r9
80001606:	ee 08 09 08 	st.w	r7[r8],r8
8000160a:	8f 2c       	st.w	r7[0x8],r12
8000160c:	8f 3c       	st.w	r7[0xc],r12
8000160e:	a1 a8       	sbr	r8,0x0
80001610:	0a 9c       	mov	r12,r5
80001612:	8f 18       	st.w	r7[0x4],r8
80001614:	c0 d8       	rjmp	8000162e <_malloc_r+0x26a>
80001616:	6c 39       	ld.w	r9,r6[0xc]
80001618:	58 08       	cp.w	r8,0
8000161a:	c0 f5       	brlt	80001638 <_malloc_r+0x274>
8000161c:	ec 0a 00 0a 	add	r10,r6,r10
80001620:	74 18       	ld.w	r8,r10[0x4]
80001622:	a1 a8       	sbr	r8,0x0
80001624:	0a 9c       	mov	r12,r5
80001626:	95 18       	st.w	r10[0x4],r8
80001628:	6c 28       	ld.w	r8,r6[0x8]
8000162a:	93 28       	st.w	r9[0x8],r8
8000162c:	91 39       	st.w	r8[0xc],r9
8000162e:	f0 1f 00 19 	mcall	80001690 <_malloc_r+0x2cc>
80001632:	ec cc ff f8 	sub	r12,r6,-8
80001636:	d8 32       	popm	r0-r7,pc
80001638:	12 96       	mov	r6,r9
8000163a:	02 36       	cp.w	r6,r1
8000163c:	cd 21       	brne	800015e0 <_malloc_r+0x21c>
8000163e:	2f f2       	sub	r2,-1
80001640:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001644:	c0 30       	breq	8000164a <_malloc_r+0x286>
80001646:	2f 81       	sub	r1,-8
80001648:	cc ab       	rjmp	800015dc <_malloc_r+0x218>
8000164a:	1c 98       	mov	r8,lr
8000164c:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001650:	c0 81       	brne	80001660 <_malloc_r+0x29c>
80001652:	68 19       	ld.w	r9,r4[0x4]
80001654:	f6 08 11 ff 	rsub	r8,r11,-1
80001658:	f3 e8 00 08 	and	r8,r9,r8
8000165c:	89 18       	st.w	r4[0x4],r8
8000165e:	c0 78       	rjmp	8000166c <_malloc_r+0x2a8>
80001660:	f0 c9 00 08 	sub	r9,r8,8
80001664:	20 13       	sub	r3,1
80001666:	70 08       	ld.w	r8,r8[0x0]
80001668:	12 38       	cp.w	r8,r9
8000166a:	cf 10       	breq	8000164c <_malloc_r+0x288>
8000166c:	a1 7b       	lsl	r11,0x1
8000166e:	68 18       	ld.w	r8,r4[0x4]
80001670:	10 3b       	cp.w	r11,r8
80001672:	e0 8b 00 11 	brhi	80001694 <_malloc_r+0x2d0>
80001676:	58 0b       	cp.w	r11,0
80001678:	c0 e0       	breq	80001694 <_malloc_r+0x2d0>
8000167a:	04 93       	mov	r3,r2
8000167c:	c0 38       	rjmp	80001682 <_malloc_r+0x2be>
8000167e:	2f c3       	sub	r3,-4
80001680:	a1 7b       	lsl	r11,0x1
80001682:	f7 e8 00 09 	and	r9,r11,r8
80001686:	ca 71       	brne	800015d4 <_malloc_r+0x210>
80001688:	cf bb       	rjmp	8000167e <_malloc_r+0x2ba>
8000168a:	00 00       	add	r0,r0
8000168c:	00 00       	add	r0,r0
8000168e:	01 04       	ld.w	r4,r0++
80001690:	80 00       	ld.sh	r0,r0[0x0]
80001692:	18 24       	rsub	r4,r12
80001694:	68 23       	ld.w	r3,r4[0x8]
80001696:	66 12       	ld.w	r2,r3[0x4]
80001698:	e0 12 ff fc 	andl	r2,0xfffc
8000169c:	0e 32       	cp.w	r2,r7
8000169e:	5f 39       	srlo	r9
800016a0:	e4 07 01 08 	sub	r8,r2,r7
800016a4:	58 f8       	cp.w	r8,15
800016a6:	5f aa       	srle	r10
800016a8:	f5 e9 10 09 	or	r9,r10,r9
800016ac:	e0 80 00 a2 	breq	800017f0 <_malloc_r+0x42c>
800016b0:	4c 88       	lddpc	r8,800017d0 <_malloc_r+0x40c>
800016b2:	70 01       	ld.w	r1,r8[0x0]
800016b4:	4c 88       	lddpc	r8,800017d4 <_malloc_r+0x410>
800016b6:	2f 01       	sub	r1,-16
800016b8:	70 08       	ld.w	r8,r8[0x0]
800016ba:	0e 01       	add	r1,r7
800016bc:	5b f8       	cp.w	r8,-1
800016be:	c0 40       	breq	800016c6 <_malloc_r+0x302>
800016c0:	28 11       	sub	r1,-127
800016c2:	e0 11 ff 80 	andl	r1,0xff80
800016c6:	02 9b       	mov	r11,r1
800016c8:	0a 9c       	mov	r12,r5
800016ca:	f0 1f 00 44 	mcall	800017d8 <_malloc_r+0x414>
800016ce:	18 96       	mov	r6,r12
800016d0:	5b fc       	cp.w	r12,-1
800016d2:	c6 e0       	breq	800017ae <_malloc_r+0x3ea>
800016d4:	e6 02 00 08 	add	r8,r3,r2
800016d8:	10 3c       	cp.w	r12,r8
800016da:	c0 32       	brcc	800016e0 <_malloc_r+0x31c>
800016dc:	08 33       	cp.w	r3,r4
800016de:	c6 81       	brne	800017ae <_malloc_r+0x3ea>
800016e0:	4b fa       	lddpc	r10,800017dc <_malloc_r+0x418>
800016e2:	74 09       	ld.w	r9,r10[0x0]
800016e4:	e2 09 00 09 	add	r9,r1,r9
800016e8:	95 09       	st.w	r10[0x0],r9
800016ea:	10 36       	cp.w	r6,r8
800016ec:	c0 a1       	brne	80001700 <_malloc_r+0x33c>
800016ee:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800016f2:	c0 71       	brne	80001700 <_malloc_r+0x33c>
800016f4:	e2 02 00 02 	add	r2,r1,r2
800016f8:	68 28       	ld.w	r8,r4[0x8]
800016fa:	a1 a2       	sbr	r2,0x0
800016fc:	91 12       	st.w	r8[0x4],r2
800016fe:	c4 c8       	rjmp	80001796 <_malloc_r+0x3d2>
80001700:	4b 5a       	lddpc	r10,800017d4 <_malloc_r+0x410>
80001702:	74 0b       	ld.w	r11,r10[0x0]
80001704:	5b fb       	cp.w	r11,-1
80001706:	c0 31       	brne	8000170c <_malloc_r+0x348>
80001708:	95 06       	st.w	r10[0x0],r6
8000170a:	c0 68       	rjmp	80001716 <_malloc_r+0x352>
8000170c:	ec 09 00 09 	add	r9,r6,r9
80001710:	4b 3a       	lddpc	r10,800017dc <_malloc_r+0x418>
80001712:	10 19       	sub	r9,r8
80001714:	95 09       	st.w	r10[0x0],r9
80001716:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000171a:	f0 09 11 08 	rsub	r9,r8,8
8000171e:	58 08       	cp.w	r8,0
80001720:	f2 08 17 10 	movne	r8,r9
80001724:	ed d8 e1 06 	addne	r6,r6,r8
80001728:	28 08       	sub	r8,-128
8000172a:	ec 01 00 01 	add	r1,r6,r1
8000172e:	0a 9c       	mov	r12,r5
80001730:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80001734:	f0 01 01 01 	sub	r1,r8,r1
80001738:	02 9b       	mov	r11,r1
8000173a:	f0 1f 00 28 	mcall	800017d8 <_malloc_r+0x414>
8000173e:	4a 88       	lddpc	r8,800017dc <_malloc_r+0x418>
80001740:	5b fc       	cp.w	r12,-1
80001742:	ec 0c 17 00 	moveq	r12,r6
80001746:	f9 b1 00 00 	moveq	r1,0
8000174a:	70 09       	ld.w	r9,r8[0x0]
8000174c:	0c 1c       	sub	r12,r6
8000174e:	89 26       	st.w	r4[0x8],r6
80001750:	02 0c       	add	r12,r1
80001752:	12 01       	add	r1,r9
80001754:	a1 ac       	sbr	r12,0x0
80001756:	91 01       	st.w	r8[0x0],r1
80001758:	8d 1c       	st.w	r6[0x4],r12
8000175a:	08 33       	cp.w	r3,r4
8000175c:	c1 d0       	breq	80001796 <_malloc_r+0x3d2>
8000175e:	58 f2       	cp.w	r2,15
80001760:	e0 8b 00 05 	brhi	8000176a <_malloc_r+0x3a6>
80001764:	30 18       	mov	r8,1
80001766:	8d 18       	st.w	r6[0x4],r8
80001768:	c2 38       	rjmp	800017ae <_malloc_r+0x3ea>
8000176a:	30 59       	mov	r9,5
8000176c:	20 c2       	sub	r2,12
8000176e:	e0 12 ff f8 	andl	r2,0xfff8
80001772:	e6 02 00 08 	add	r8,r3,r2
80001776:	91 29       	st.w	r8[0x8],r9
80001778:	91 19       	st.w	r8[0x4],r9
8000177a:	66 18       	ld.w	r8,r3[0x4]
8000177c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001780:	e5 e8 10 08 	or	r8,r2,r8
80001784:	87 18       	st.w	r3[0x4],r8
80001786:	58 f2       	cp.w	r2,15
80001788:	e0 88 00 07 	brls	80001796 <_malloc_r+0x3d2>
8000178c:	e6 cb ff f8 	sub	r11,r3,-8
80001790:	0a 9c       	mov	r12,r5
80001792:	f0 1f 00 14 	mcall	800017e0 <_malloc_r+0x41c>
80001796:	49 49       	lddpc	r9,800017e4 <_malloc_r+0x420>
80001798:	72 0a       	ld.w	r10,r9[0x0]
8000179a:	49 18       	lddpc	r8,800017dc <_malloc_r+0x418>
8000179c:	70 08       	ld.w	r8,r8[0x0]
8000179e:	14 38       	cp.w	r8,r10
800017a0:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800017a4:	49 19       	lddpc	r9,800017e8 <_malloc_r+0x424>
800017a6:	72 0a       	ld.w	r10,r9[0x0]
800017a8:	14 38       	cp.w	r8,r10
800017aa:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800017ae:	68 28       	ld.w	r8,r4[0x8]
800017b0:	70 18       	ld.w	r8,r8[0x4]
800017b2:	e0 18 ff fc 	andl	r8,0xfffc
800017b6:	0e 38       	cp.w	r8,r7
800017b8:	5f 39       	srlo	r9
800017ba:	0e 18       	sub	r8,r7
800017bc:	58 f8       	cp.w	r8,15
800017be:	5f aa       	srle	r10
800017c0:	f5 e9 10 09 	or	r9,r10,r9
800017c4:	c1 60       	breq	800017f0 <_malloc_r+0x42c>
800017c6:	0a 9c       	mov	r12,r5
800017c8:	f0 1f 00 09 	mcall	800017ec <_malloc_r+0x428>
800017cc:	d8 3a       	popm	r0-r7,pc,r12=0
800017ce:	00 00       	add	r0,r0
800017d0:	00 00       	add	r0,r0
800017d2:	05 a0       	ld.ub	r0,r2[0x2]
800017d4:	00 00       	add	r0,r0
800017d6:	05 10       	ld.sh	r0,r2++
800017d8:	80 00       	ld.sh	r0,r0[0x0]
800017da:	18 28       	rsub	r8,r12
800017dc:	00 00       	add	r0,r0
800017de:	05 a4       	ld.ub	r4,r2[0x2]
800017e0:	80 00       	ld.sh	r0,r0[0x0]
800017e2:	19 44       	ld.w	r4,--r12
800017e4:	00 00       	add	r0,r0
800017e6:	05 9c       	ld.ub	r12,r2[0x1]
800017e8:	00 00       	add	r0,r0
800017ea:	05 98       	ld.ub	r8,r2[0x1]
800017ec:	80 00       	ld.sh	r0,r0[0x0]
800017ee:	18 24       	rsub	r4,r12
800017f0:	68 26       	ld.w	r6,r4[0x8]
800017f2:	a1 a8       	sbr	r8,0x0
800017f4:	0e 99       	mov	r9,r7
800017f6:	a1 a9       	sbr	r9,0x0
800017f8:	8d 19       	st.w	r6[0x4],r9
800017fa:	ec 07 00 07 	add	r7,r6,r7
800017fe:	0a 9c       	mov	r12,r5
80001800:	89 27       	st.w	r4[0x8],r7
80001802:	8f 18       	st.w	r7[0x4],r8
80001804:	f0 1f 00 03 	mcall	80001810 <_malloc_r+0x44c>
80001808:	ec cc ff f8 	sub	r12,r6,-8
8000180c:	d8 32       	popm	r0-r7,pc
8000180e:	00 00       	add	r0,r0
80001810:	80 00       	ld.sh	r0,r0[0x0]
80001812:	18 24       	rsub	r4,r12

80001814 <memset>:
80001814:	18 98       	mov	r8,r12
80001816:	c0 38       	rjmp	8000181c <memset+0x8>
80001818:	10 cb       	st.b	r8++,r11
8000181a:	20 1a       	sub	r10,1
8000181c:	58 0a       	cp.w	r10,0
8000181e:	cf d1       	brne	80001818 <memset+0x4>
80001820:	5e fc       	retal	r12

80001822 <__malloc_lock>:
80001822:	5e fc       	retal	r12

80001824 <__malloc_unlock>:
80001824:	5e fc       	retal	r12
80001826:	d7 03       	nop

80001828 <_sbrk_r>:
80001828:	d4 21       	pushm	r4-r7,lr
8000182a:	30 08       	mov	r8,0
8000182c:	18 97       	mov	r7,r12
8000182e:	48 76       	lddpc	r6,80001848 <_sbrk_r+0x20>
80001830:	16 9c       	mov	r12,r11
80001832:	8d 08       	st.w	r6[0x0],r8
80001834:	f0 1f 00 06 	mcall	8000184c <_sbrk_r+0x24>
80001838:	5b fc       	cp.w	r12,-1
8000183a:	c0 51       	brne	80001844 <_sbrk_r+0x1c>
8000183c:	6c 08       	ld.w	r8,r6[0x0]
8000183e:	58 08       	cp.w	r8,0
80001840:	ef f8 1a 03 	st.wne	r7[0xc],r8
80001844:	d8 22       	popm	r4-r7,pc
80001846:	00 00       	add	r0,r0
80001848:	00 00       	add	r0,r0
8000184a:	06 a4       	st.w	r3++,r4
8000184c:	80 00       	ld.sh	r0,r0[0x0]
8000184e:	18 50       	eor	r0,r12

80001850 <_sbrk>:
80001850:	d4 01       	pushm	lr
80001852:	48 c8       	lddpc	r8,80001880 <_sbrk+0x30>
80001854:	70 09       	ld.w	r9,r8[0x0]
80001856:	58 09       	cp.w	r9,0
80001858:	c0 31       	brne	8000185e <_sbrk+0xe>
8000185a:	48 b9       	lddpc	r9,80001884 <_sbrk+0x34>
8000185c:	91 09       	st.w	r8[0x0],r9
8000185e:	48 99       	lddpc	r9,80001880 <_sbrk+0x30>
80001860:	48 aa       	lddpc	r10,80001888 <_sbrk+0x38>
80001862:	72 08       	ld.w	r8,r9[0x0]
80001864:	f0 0c 00 0c 	add	r12,r8,r12
80001868:	14 3c       	cp.w	r12,r10
8000186a:	e0 8b 00 04 	brhi	80001872 <_sbrk+0x22>
8000186e:	93 0c       	st.w	r9[0x0],r12
80001870:	c0 68       	rjmp	8000187c <_sbrk+0x2c>
80001872:	f0 1f 00 07 	mcall	8000188c <_sbrk+0x3c>
80001876:	30 c8       	mov	r8,12
80001878:	99 08       	st.w	r12[0x0],r8
8000187a:	3f f8       	mov	r8,-1
8000187c:	10 9c       	mov	r12,r8
8000187e:	d8 02       	popm	pc
80001880:	00 00       	add	r0,r0
80001882:	05 cc       	ld.ub	r12,r2[0x4]
80001884:	00 00       	add	r0,r0
80001886:	06 a8       	st.w	r3++,r8
80001888:	00 00       	add	r0,r0
8000188a:	e0 00       	*unknown*
8000188c:	80 00       	ld.sh	r0,r0[0x0]
8000188e:	18 90       	mov	r0,r12

80001890 <__errno>:
80001890:	48 28       	lddpc	r8,80001898 <__errno+0x8>
80001892:	70 0c       	ld.w	r12,r8[0x0]
80001894:	2f 4c       	sub	r12,-12
80001896:	5e fc       	retal	r12
80001898:	00 00       	add	r0,r0
8000189a:	01 00       	ld.w	r0,r0++

8000189c <_malloc_trim_r>:
8000189c:	d4 21       	pushm	r4-r7,lr
8000189e:	16 95       	mov	r5,r11
800018a0:	18 97       	mov	r7,r12
800018a2:	f0 1f 00 23 	mcall	8000192c <_malloc_trim_r+0x90>
800018a6:	4a 34       	lddpc	r4,80001930 <_malloc_trim_r+0x94>
800018a8:	68 28       	ld.w	r8,r4[0x8]
800018aa:	70 16       	ld.w	r6,r8[0x4]
800018ac:	e0 16 ff fc 	andl	r6,0xfffc
800018b0:	ec c8 ff 91 	sub	r8,r6,-111
800018b4:	f0 05 01 05 	sub	r5,r8,r5
800018b8:	e0 15 ff 80 	andl	r5,0xff80
800018bc:	ea c5 00 80 	sub	r5,r5,128
800018c0:	e0 45 00 7f 	cp.w	r5,127
800018c4:	e0 8a 00 23 	brle	8000190a <_malloc_trim_r+0x6e>
800018c8:	30 0b       	mov	r11,0
800018ca:	0e 9c       	mov	r12,r7
800018cc:	f0 1f 00 1a 	mcall	80001934 <_malloc_trim_r+0x98>
800018d0:	68 28       	ld.w	r8,r4[0x8]
800018d2:	0c 08       	add	r8,r6
800018d4:	10 3c       	cp.w	r12,r8
800018d6:	c1 a1       	brne	8000190a <_malloc_trim_r+0x6e>
800018d8:	ea 0b 11 00 	rsub	r11,r5,0
800018dc:	0e 9c       	mov	r12,r7
800018de:	f0 1f 00 16 	mcall	80001934 <_malloc_trim_r+0x98>
800018e2:	5b fc       	cp.w	r12,-1
800018e4:	c1 71       	brne	80001912 <_malloc_trim_r+0x76>
800018e6:	30 0b       	mov	r11,0
800018e8:	0e 9c       	mov	r12,r7
800018ea:	f0 1f 00 13 	mcall	80001934 <_malloc_trim_r+0x98>
800018ee:	68 28       	ld.w	r8,r4[0x8]
800018f0:	f8 08 01 09 	sub	r9,r12,r8
800018f4:	58 f9       	cp.w	r9,15
800018f6:	e0 8a 00 0a 	brle	8000190a <_malloc_trim_r+0x6e>
800018fa:	a1 a9       	sbr	r9,0x0
800018fc:	91 19       	st.w	r8[0x4],r9
800018fe:	48 f8       	lddpc	r8,80001938 <_malloc_trim_r+0x9c>
80001900:	70 09       	ld.w	r9,r8[0x0]
80001902:	48 f8       	lddpc	r8,8000193c <_malloc_trim_r+0xa0>
80001904:	f8 09 01 09 	sub	r9,r12,r9
80001908:	91 09       	st.w	r8[0x0],r9
8000190a:	0e 9c       	mov	r12,r7
8000190c:	f0 1f 00 0d 	mcall	80001940 <_malloc_trim_r+0xa4>
80001910:	d8 2a       	popm	r4-r7,pc,r12=0
80001912:	68 28       	ld.w	r8,r4[0x8]
80001914:	0a 16       	sub	r6,r5
80001916:	a1 a6       	sbr	r6,0x0
80001918:	91 16       	st.w	r8[0x4],r6
8000191a:	48 98       	lddpc	r8,8000193c <_malloc_trim_r+0xa0>
8000191c:	70 09       	ld.w	r9,r8[0x0]
8000191e:	0a 19       	sub	r9,r5
80001920:	0e 9c       	mov	r12,r7
80001922:	91 09       	st.w	r8[0x0],r9
80001924:	f0 1f 00 07 	mcall	80001940 <_malloc_trim_r+0xa4>
80001928:	da 2a       	popm	r4-r7,pc,r12=1
8000192a:	00 00       	add	r0,r0
8000192c:	80 00       	ld.sh	r0,r0[0x0]
8000192e:	18 22       	rsub	r2,r12
80001930:	00 00       	add	r0,r0
80001932:	01 04       	ld.w	r4,r0++
80001934:	80 00       	ld.sh	r0,r0[0x0]
80001936:	18 28       	rsub	r8,r12
80001938:	00 00       	add	r0,r0
8000193a:	05 10       	ld.sh	r0,r2++
8000193c:	00 00       	add	r0,r0
8000193e:	05 a4       	ld.ub	r4,r2[0x2]
80001940:	80 00       	ld.sh	r0,r0[0x0]
80001942:	18 24       	rsub	r4,r12

80001944 <_free_r>:
80001944:	d4 21       	pushm	r4-r7,lr
80001946:	16 96       	mov	r6,r11
80001948:	18 97       	mov	r7,r12
8000194a:	58 0b       	cp.w	r11,0
8000194c:	e0 80 00 c8 	breq	80001adc <_free_r+0x198>
80001950:	f0 1f 00 4c 	mcall	80001a80 <_free_r+0x13c>
80001954:	20 86       	sub	r6,8
80001956:	4c ca       	lddpc	r10,80001a84 <_free_r+0x140>
80001958:	6c 18       	ld.w	r8,r6[0x4]
8000195a:	74 2e       	ld.w	lr,r10[0x8]
8000195c:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001960:	a1 c8       	cbr	r8,0x0
80001962:	ec 08 00 09 	add	r9,r6,r8
80001966:	72 1b       	ld.w	r11,r9[0x4]
80001968:	e0 1b ff fc 	andl	r11,0xfffc
8000196c:	1c 39       	cp.w	r9,lr
8000196e:	c1 d1       	brne	800019a8 <_free_r+0x64>
80001970:	f6 08 00 08 	add	r8,r11,r8
80001974:	58 0c       	cp.w	r12,0
80001976:	c0 81       	brne	80001986 <_free_r+0x42>
80001978:	6c 09       	ld.w	r9,r6[0x0]
8000197a:	12 16       	sub	r6,r9
8000197c:	12 08       	add	r8,r9
8000197e:	6c 3b       	ld.w	r11,r6[0xc]
80001980:	6c 29       	ld.w	r9,r6[0x8]
80001982:	97 29       	st.w	r11[0x8],r9
80001984:	93 3b       	st.w	r9[0xc],r11
80001986:	10 99       	mov	r9,r8
80001988:	95 26       	st.w	r10[0x8],r6
8000198a:	a1 a9       	sbr	r9,0x0
8000198c:	8d 19       	st.w	r6[0x4],r9
8000198e:	4b f9       	lddpc	r9,80001a88 <_free_r+0x144>
80001990:	72 09       	ld.w	r9,r9[0x0]
80001992:	12 38       	cp.w	r8,r9
80001994:	c0 63       	brcs	800019a0 <_free_r+0x5c>
80001996:	4b e8       	lddpc	r8,80001a8c <_free_r+0x148>
80001998:	0e 9c       	mov	r12,r7
8000199a:	70 0b       	ld.w	r11,r8[0x0]
8000199c:	f0 1f 00 3d 	mcall	80001a90 <_free_r+0x14c>
800019a0:	0e 9c       	mov	r12,r7
800019a2:	f0 1f 00 3d 	mcall	80001a94 <_free_r+0x150>
800019a6:	d8 22       	popm	r4-r7,pc
800019a8:	93 1b       	st.w	r9[0x4],r11
800019aa:	58 0c       	cp.w	r12,0
800019ac:	c0 30       	breq	800019b2 <_free_r+0x6e>
800019ae:	30 0c       	mov	r12,0
800019b0:	c1 08       	rjmp	800019d0 <_free_r+0x8c>
800019b2:	6c 0e       	ld.w	lr,r6[0x0]
800019b4:	f4 c5 ff f8 	sub	r5,r10,-8
800019b8:	1c 16       	sub	r6,lr
800019ba:	1c 08       	add	r8,lr
800019bc:	6c 2e       	ld.w	lr,r6[0x8]
800019be:	0a 3e       	cp.w	lr,r5
800019c0:	f9 bc 00 01 	moveq	r12,1
800019c4:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800019c8:	eb fe 1a 02 	st.wne	r5[0x8],lr
800019cc:	fd f5 1a 03 	st.wne	lr[0xc],r5
800019d0:	f2 0b 00 0e 	add	lr,r9,r11
800019d4:	7c 1e       	ld.w	lr,lr[0x4]
800019d6:	ed be 00 00 	bld	lr,0x0
800019da:	c1 30       	breq	80001a00 <_free_r+0xbc>
800019dc:	16 08       	add	r8,r11
800019de:	58 0c       	cp.w	r12,0
800019e0:	c0 c1       	brne	800019f8 <_free_r+0xb4>
800019e2:	4a 9e       	lddpc	lr,80001a84 <_free_r+0x140>
800019e4:	72 2b       	ld.w	r11,r9[0x8]
800019e6:	2f 8e       	sub	lr,-8
800019e8:	1c 3b       	cp.w	r11,lr
800019ea:	c0 71       	brne	800019f8 <_free_r+0xb4>
800019ec:	97 36       	st.w	r11[0xc],r6
800019ee:	97 26       	st.w	r11[0x8],r6
800019f0:	8d 2b       	st.w	r6[0x8],r11
800019f2:	8d 3b       	st.w	r6[0xc],r11
800019f4:	30 1c       	mov	r12,1
800019f6:	c0 58       	rjmp	80001a00 <_free_r+0xbc>
800019f8:	72 2b       	ld.w	r11,r9[0x8]
800019fa:	72 39       	ld.w	r9,r9[0xc]
800019fc:	93 2b       	st.w	r9[0x8],r11
800019fe:	97 39       	st.w	r11[0xc],r9
80001a00:	10 99       	mov	r9,r8
80001a02:	ec 08 09 08 	st.w	r6[r8],r8
80001a06:	a1 a9       	sbr	r9,0x0
80001a08:	8d 19       	st.w	r6[0x4],r9
80001a0a:	58 0c       	cp.w	r12,0
80001a0c:	c6 51       	brne	80001ad6 <_free_r+0x192>
80001a0e:	e0 48 01 ff 	cp.w	r8,511
80001a12:	e0 8b 00 13 	brhi	80001a38 <_free_r+0xf4>
80001a16:	a3 98       	lsr	r8,0x3
80001a18:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001a1c:	72 2b       	ld.w	r11,r9[0x8]
80001a1e:	8d 39       	st.w	r6[0xc],r9
80001a20:	8d 2b       	st.w	r6[0x8],r11
80001a22:	97 36       	st.w	r11[0xc],r6
80001a24:	93 26       	st.w	r9[0x8],r6
80001a26:	a3 48       	asr	r8,0x2
80001a28:	74 19       	ld.w	r9,r10[0x4]
80001a2a:	30 1b       	mov	r11,1
80001a2c:	f6 08 09 48 	lsl	r8,r11,r8
80001a30:	f3 e8 10 08 	or	r8,r9,r8
80001a34:	95 18       	st.w	r10[0x4],r8
80001a36:	c5 08       	rjmp	80001ad6 <_free_r+0x192>
80001a38:	f0 0b 16 09 	lsr	r11,r8,0x9
80001a3c:	58 4b       	cp.w	r11,4
80001a3e:	e0 8b 00 06 	brhi	80001a4a <_free_r+0x106>
80001a42:	f0 0b 16 06 	lsr	r11,r8,0x6
80001a46:	2c 8b       	sub	r11,-56
80001a48:	c2 b8       	rjmp	80001a9e <_free_r+0x15a>
80001a4a:	59 4b       	cp.w	r11,20
80001a4c:	e0 8b 00 04 	brhi	80001a54 <_free_r+0x110>
80001a50:	2a 5b       	sub	r11,-91
80001a52:	c2 68       	rjmp	80001a9e <_free_r+0x15a>
80001a54:	e0 4b 00 54 	cp.w	r11,84
80001a58:	e0 8b 00 06 	brhi	80001a64 <_free_r+0x120>
80001a5c:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001a60:	29 2b       	sub	r11,-110
80001a62:	c1 e8       	rjmp	80001a9e <_free_r+0x15a>
80001a64:	e0 4b 01 54 	cp.w	r11,340
80001a68:	e0 8b 00 06 	brhi	80001a74 <_free_r+0x130>
80001a6c:	f0 0b 16 0f 	lsr	r11,r8,0xf
80001a70:	28 9b       	sub	r11,-119
80001a72:	c1 68       	rjmp	80001a9e <_free_r+0x15a>
80001a74:	e0 4b 05 54 	cp.w	r11,1364
80001a78:	e0 88 00 10 	brls	80001a98 <_free_r+0x154>
80001a7c:	37 eb       	mov	r11,126
80001a7e:	c1 08       	rjmp	80001a9e <_free_r+0x15a>
80001a80:	80 00       	ld.sh	r0,r0[0x0]
80001a82:	18 22       	rsub	r2,r12
80001a84:	00 00       	add	r0,r0
80001a86:	01 04       	ld.w	r4,r0++
80001a88:	00 00       	add	r0,r0
80001a8a:	05 0c       	ld.w	r12,r2++
80001a8c:	00 00       	add	r0,r0
80001a8e:	05 a0       	ld.ub	r0,r2[0x2]
80001a90:	80 00       	ld.sh	r0,r0[0x0]
80001a92:	18 9c       	mov	r12,r12
80001a94:	80 00       	ld.sh	r0,r0[0x0]
80001a96:	18 24       	rsub	r4,r12
80001a98:	f0 0b 16 12 	lsr	r11,r8,0x12
80001a9c:	28 4b       	sub	r11,-124
80001a9e:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80001aa2:	78 29       	ld.w	r9,r12[0x8]
80001aa4:	18 39       	cp.w	r9,r12
80001aa6:	c0 e1       	brne	80001ac2 <_free_r+0x17e>
80001aa8:	74 18       	ld.w	r8,r10[0x4]
80001aaa:	a3 4b       	asr	r11,0x2
80001aac:	30 1c       	mov	r12,1
80001aae:	f8 0b 09 4b 	lsl	r11,r12,r11
80001ab2:	f1 eb 10 0b 	or	r11,r8,r11
80001ab6:	12 98       	mov	r8,r9
80001ab8:	95 1b       	st.w	r10[0x4],r11
80001aba:	c0 a8       	rjmp	80001ace <_free_r+0x18a>
80001abc:	72 29       	ld.w	r9,r9[0x8]
80001abe:	18 39       	cp.w	r9,r12
80001ac0:	c0 60       	breq	80001acc <_free_r+0x188>
80001ac2:	72 1a       	ld.w	r10,r9[0x4]
80001ac4:	e0 1a ff fc 	andl	r10,0xfffc
80001ac8:	14 38       	cp.w	r8,r10
80001aca:	cf 93       	brcs	80001abc <_free_r+0x178>
80001acc:	72 38       	ld.w	r8,r9[0xc]
80001ace:	8d 38       	st.w	r6[0xc],r8
80001ad0:	8d 29       	st.w	r6[0x8],r9
80001ad2:	93 36       	st.w	r9[0xc],r6
80001ad4:	91 26       	st.w	r8[0x8],r6
80001ad6:	0e 9c       	mov	r12,r7
80001ad8:	f0 1f 00 02 	mcall	80001ae0 <_free_r+0x19c>
80001adc:	d8 22       	popm	r4-r7,pc
80001ade:	00 00       	add	r0,r0
80001ae0:	80 00       	ld.sh	r0,r0[0x0]
80001ae2:	18 24       	rsub	r4,r12

Disassembly of section .exception:

80001c00 <_evba>:
	...

80001c28 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001c28:	c7 a8       	rjmp	80001d1c <privilegedCalls>
	...

80001d00 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001d00:	1c 9f       	mov	pc,lr

80001d02 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001d02:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001d06:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
80001d0a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
80001d0e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001d12:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001d14:	c0 31       	brne	80001d1a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001d16:	4b 9c       	lddpc	r12,80001df8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001d18:	18 9f       	mov	pc,r12

80001d1a <_int0_exit>:
_int0_exit:
	rete
80001d1a:	d6 03       	rete

80001d1c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
80001d1c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
80001d1e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001d20:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001d22:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001d24:	9b 3c       	st.w	sp[0xc],r12

80001d26 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001d26:	4b 6c       	lddpc	r12,80001dfc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001d28:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
80001d2a:	c0 61       	brne	80001d36 <priv_interruptenable>
	ld.w r12,sp[USERSR]
80001d2c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
80001d2e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001d30:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001d32:	d3 02       	popm	r11-r12
	rete
80001d34:	d6 03       	rete

80001d36 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001d36:	4b 3c       	lddpc	r12,80001e00 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001d38:	18 3b       	cp.w	r11,r12
	brne privexception
80001d3a:	c0 61       	brne	80001d46 <privexception>
	ld.w r12,sp[USERSR]
80001d3c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
80001d3e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001d40:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001d42:	d3 02       	popm	r11-r12
	rete
80001d44:	d6 03       	rete

80001d46 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001d46:	c0 08       	rjmp	80001d46 <privexception>

80001d48 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001d48:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
80001d4a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
80001d4e:	4a ec       	lddpc	r12,80001e04 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001d50:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001d52:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001d54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001d58:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
80001d5c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001d60:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001d62:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001d64:	1c 9f       	mov	pc,lr

80001d66 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001d66:	d3 03       	ssrf	0x10
	mov pc,lr
80001d68:	1c 9f       	mov	pc,lr

80001d6a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
80001d6a:	d5 03       	csrf	0x10
	mov pc,lr
80001d6c:	1c 9f       	mov	pc,lr

80001d6e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
80001d6e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001d72:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001d74:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001d78:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
80001d7c:	1c 9f       	mov	pc,lr

80001d7e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001d7e:	4a 3c       	lddpc	r12,80001e08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001d80:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001d82:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001d84:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001d86:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001d88:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
80001d8a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
80001d8c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
80001d8e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001d90:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001d92:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001d94:	33 40       	mov	r0,52
	add r0,r12
80001d96:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001d98:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
80001d9c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
80001d9e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
80001da2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
80001da4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
80001da6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
80001da8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
80001daa:	1a 90       	mov	r0,sp
	st.w --sp,r0
80001dac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80001dae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
80001db2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
80001db4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
80001db6:	1c 9f       	mov	pc,lr

80001db8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001db8:	49 4c       	lddpc	r12,80001e08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001dba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
80001dbc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80001dbe:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80001dc0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
80001dc4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
80001dc6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
80001dc8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80001dca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
80001dcc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80001dce:	33 40       	mov	r0,52
	add r0,r12
80001dd0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80001dd2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80001dd6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
80001dd8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
80001dda:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
80001ddc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
80001dde:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
80001de0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
80001de2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
80001de4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
80001de6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
80001de8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80001dea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
80001dec:	d4 01       	pushm	lr
	call timerStart
80001dee:	f0 1f 00 08 	mcall	80001e0c <contextRestoreFromISR+0x54>
	popm lr
80001df2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
80001df4:	1c 9f       	mov	pc,lr
80001df6:	00 00       	add	r0,r0
80001df8:	80 00       	ld.sh	r0,r0[0x0]
80001dfa:	08 48       	or	r8,r4
80001dfc:	80 00       	ld.sh	r0,r0[0x0]
80001dfe:	1d 66       	ld.uh	r6,--lr
80001e00:	80 00       	ld.sh	r0,r0[0x0]
80001e02:	1d 6a       	ld.uh	r10,--lr
80001e04:	80 00       	ld.sh	r0,r0[0x0]
80001e06:	1c 00       	add	r0,lr
80001e08:	00 00       	add	r0,r0
80001e0a:	06 20       	rsub	r0,r3
80001e0c:	80 00       	ld.sh	r0,r0[0x0]
80001e0e:	12 2a       	rsub	r10,r9
	...
