
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002084  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80002200  80002200  00002600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80002600  80002600  00002a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002684  80002684  00002a84  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80002688  00002c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002b94  00003114  2**0
                  ALLOC
  9 .bss          000001c8  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000d920  000006e0  000006e0  00000000  2**0
                  ALLOC
 11 .comment      000000a0  00000000  00000000  00003114  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000620  00000000  00000000  000031b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000b2f  00000000  00000000  000037d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c904  00000000  00000000  00004307  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000020c8  00000000  00000000  00010c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000048f3  00000000  00000000  00012cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000d90  00000000  00000000  000175c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001e01  00000000  00000000  00018358  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00001b19  00000000  00000000  0001a159  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 005345f6  00000000  00000000  0001bc72  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 00000568  00000000  00000000  00550268  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	18 5c       	eor	r12,r12

Disassembly of section .text:

80000008 <MaxLockedCeiling>:
 * Comment:
 * 	Returns a maximum ceiling of all currently locked semaphores
 *
 **********************************************************/
static uint8_t MaxLockedCeiling(void)
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 2d       	sub	sp,8
	if (LOCKEDSEMAPHORELIST==NULL)
80000010:	49 78       	lddpc	r8,8000006c <MaxLockedCeiling+0x64>
80000012:	70 08       	ld.w	r8,r8[0x0]
80000014:	58 08       	cp.w	r8,0
80000016:	c0 31       	brne	8000001c <MaxLockedCeiling+0x14>
	{
		return 0;
80000018:	30 08       	mov	r8,0
8000001a:	c2 48       	rjmp	80000062 <MaxLockedCeiling+0x5a>
	}
	else
	{
	uint8_t maxCeil=LOCKEDSEMAPHORELIST->ceiling;
8000001c:	49 48       	lddpc	r8,8000006c <MaxLockedCeiling+0x64>
8000001e:	70 08       	ld.w	r8,r8[0x0]
80000020:	11 c8       	ld.ub	r8,r8[0x4]
80000022:	ef 68 ff fb 	st.b	r7[-5],r8
	ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
80000026:	49 28       	lddpc	r8,8000006c <MaxLockedCeiling+0x64>
80000028:	70 08       	ld.w	r8,r8[0x0]
8000002a:	ef 48 ff fc 	st.w	r7[-4],r8
	while (it->nextLockedSemaphore!=NULL)
8000002e:	c1 38       	rjmp	80000054 <MaxLockedCeiling+0x4c>
	{
		if (it->ceiling>maxCeil)
80000030:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000034:	11 c8       	ld.ub	r8,r8[0x4]
80000036:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000003a:	f0 09 18 00 	cp.b	r9,r8
8000003e:	c0 62       	brcc	8000004a <MaxLockedCeiling+0x42>
		{
			maxCeil=it->ceiling;
80000040:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000044:	11 c8       	ld.ub	r8,r8[0x4]
80000046:	ef 68 ff fb 	st.b	r7[-5],r8
		}
		it=it->nextLockedSemaphore;
8000004a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000004e:	70 28       	ld.w	r8,r8[0x8]
80000050:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
	uint8_t maxCeil=LOCKEDSEMAPHORELIST->ceiling;
	ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
	while (it->nextLockedSemaphore!=NULL)
80000054:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000058:	70 28       	ld.w	r8,r8[0x8]
8000005a:	58 08       	cp.w	r8,0
8000005c:	ce a1       	brne	80000030 <MaxLockedCeiling+0x28>
			maxCeil=it->ceiling;
		}
		it=it->nextLockedSemaphore;
	}
	
	return maxCeil;
8000005e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
	}
}
80000062:	10 9c       	mov	r12,r8
80000064:	2f ed       	sub	sp,-8
80000066:	e3 cd 80 80 	ldm	sp++,r7,pc
8000006a:	00 00       	add	r0,r0
8000006c:	00 00       	add	r0,r0
8000006e:	05 d0       	ld.ub	r0,r2[0x5]

80000070 <ROSA_semaphoreCreate>:
 *
 * Comment:
 * 	Create a semaphore
 *
 **********************************************************/
int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t * mutex, uint8_t ceiling) {
80000070:	eb cd 40 80 	pushm	r7,lr
80000074:	1a 97       	mov	r7,sp
80000076:	20 2d       	sub	sp,8
80000078:	ef 4c ff fc 	st.w	r7[-4],r12
8000007c:	16 98       	mov	r8,r11
8000007e:	ef 68 ff f8 	st.b	r7[-8],r8
	*mutex = (ROSA_semaphoreHandle_t) calloc(1, sizeof(ROSA_semaphoreHandle_t));
80000082:	30 4b       	mov	r11,4
80000084:	30 1c       	mov	r12,1
80000086:	f0 1f 00 0f 	mcall	800000c0 <ROSA_semaphoreCreate+0x50>
8000008a:	18 98       	mov	r8,r12
8000008c:	10 99       	mov	r9,r8
8000008e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000092:	91 09       	st.w	r8[0x0],r9
	(*mutex)->holder = NULL;
80000094:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000098:	70 08       	ld.w	r8,r8[0x0]
8000009a:	30 09       	mov	r9,0
8000009c:	91 09       	st.w	r8[0x0],r9
	(*mutex)->ceiling = ceiling;
8000009e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000a2:	70 09       	ld.w	r9,r8[0x0]
800000a4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800000a8:	b2 c8       	st.b	r9[0x4],r8
	(*mutex)->nextLockedSemaphore=NULL;	
800000aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000ae:	70 08       	ld.w	r8,r8[0x0]
800000b0:	30 09       	mov	r9,0
800000b2:	91 29       	st.w	r8[0x8],r9
	
	return 0;
800000b4:	30 08       	mov	r8,0
}
800000b6:	10 9c       	mov	r12,r8
800000b8:	2f ed       	sub	sp,-8
800000ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800000be:	00 00       	add	r0,r0
800000c0:	80 00       	ld.sh	r0,r0[0x0]
800000c2:	18 dc       	st.w	--r12,r12

800000c4 <ROSA_semaphoreLock>:
 *
 * Comment:
 * 	Lock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t  mutex) {
800000c4:	eb cd 40 c0 	pushm	r6-r7,lr
800000c8:	1a 97       	mov	r7,sp
800000ca:	20 2d       	sub	sp,8
800000cc:	ef 4c ff f8 	st.w	r7[-8],r12
	
	if (mutex==NULL)
800000d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000d4:	58 08       	cp.w	r8,0
800000d6:	c0 61       	brne	800000e2 <ROSA_semaphoreLock+0x1e>
	{
		return -1; // if the passed pointer to the semaphore handle is non-existent
800000d8:	3f f8       	mov	r8,-1
800000da:	c5 38       	rjmp	80000180 <ROSA_semaphoreLock+0xbc>
	}
	
	while (mutex->holder != NULL || EXECTASK->priority<=MaxLockedCeiling()) //if the semaphore is already locked or IPCP condition P(task)>maxLockedCeil
		ROSA_yield();		
800000dc:	f0 1f 00 2b 	mcall	80000188 <ROSA_semaphoreLock+0xc4>
800000e0:	c0 28       	rjmp	800000e4 <ROSA_semaphoreLock+0x20>
	if (mutex==NULL)
	{
		return -1; // if the passed pointer to the semaphore handle is non-existent
	}
	
	while (mutex->holder != NULL || EXECTASK->priority<=MaxLockedCeiling()) //if the semaphore is already locked or IPCP condition P(task)>maxLockedCeil
800000e2:	d7 03       	nop
800000e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000e8:	70 08       	ld.w	r8,r8[0x0]
800000ea:	58 08       	cp.w	r8,0
800000ec:	cf 81       	brne	800000dc <ROSA_semaphoreLock+0x18>
800000ee:	4a 88       	lddpc	r8,8000018c <ROSA_semaphoreLock+0xc8>
800000f0:	70 08       	ld.w	r8,r8[0x0]
800000f2:	f1 36 00 64 	ld.ub	r6,r8[100]
800000f6:	f0 1f 00 27 	mcall	80000190 <ROSA_semaphoreLock+0xcc>
800000fa:	18 98       	mov	r8,r12
800000fc:	f0 06 18 00 	cp.b	r6,r8
80000100:	fe 98 ff ee 	brls	800000dc <ROSA_semaphoreLock+0x18>
		ROSA_yield();		
	
	mutex->holder = EXECTASK;
80000104:	4a 28       	lddpc	r8,8000018c <ROSA_semaphoreLock+0xc8>
80000106:	70 09       	ld.w	r9,r8[0x0]
80000108:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000010c:	91 09       	st.w	r8[0x0],r9
	if (EXECTASK->priority < mutex->ceiling)
8000010e:	4a 08       	lddpc	r8,8000018c <ROSA_semaphoreLock+0xc8>
80000110:	70 08       	ld.w	r8,r8[0x0]
80000112:	f1 39 00 64 	ld.ub	r9,r8[100]
80000116:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000011a:	11 c8       	ld.ub	r8,r8[0x4]
8000011c:	f0 09 18 00 	cp.b	r9,r8
80000120:	c1 22       	brcc	80000144 <ROSA_semaphoreLock+0x80>
	{
		readyQueueExtract(EXECTASK);
80000122:	49 b8       	lddpc	r8,8000018c <ROSA_semaphoreLock+0xc8>
80000124:	70 08       	ld.w	r8,r8[0x0]
80000126:	10 9c       	mov	r12,r8
80000128:	f0 1f 00 1b 	mcall	80000194 <ROSA_semaphoreLock+0xd0>
		EXECTASK->priority=mutex->ceiling; //IPCP priority inheritance		
8000012c:	49 88       	lddpc	r8,8000018c <ROSA_semaphoreLock+0xc8>
8000012e:	70 09       	ld.w	r9,r8[0x0]
80000130:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000134:	11 c8       	ld.ub	r8,r8[0x4]
80000136:	f3 68 00 64 	st.b	r9[100],r8
		readyQueueInsert(EXECTASK);
8000013a:	49 58       	lddpc	r8,8000018c <ROSA_semaphoreLock+0xc8>
8000013c:	70 08       	ld.w	r8,r8[0x0]
8000013e:	10 9c       	mov	r12,r8
80000140:	f0 1f 00 16 	mcall	80000198 <ROSA_semaphoreLock+0xd4>
	}
		
	if (LOCKEDSEMAPHORELIST==NULL)
80000144:	49 68       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd8>
80000146:	70 08       	ld.w	r8,r8[0x0]
80000148:	58 08       	cp.w	r8,0
8000014a:	c0 61       	brne	80000156 <ROSA_semaphoreLock+0x92>
	{
		LOCKEDSEMAPHORELIST=mutex;
8000014c:	49 48       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd8>
8000014e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000152:	91 09       	st.w	r8[0x0],r9
80000154:	c1 58       	rjmp	8000017e <ROSA_semaphoreLock+0xba>
	}
	else
	{
		ROSA_semaphoreHandle_t it; //finding the last semaphore in the list and changing its nextLockedSemaphore field to point to the just locked semaphore
		it=LOCKEDSEMAPHORELIST;
80000156:	49 28       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd8>
80000158:	70 08       	ld.w	r8,r8[0x0]
8000015a:	ef 48 ff fc 	st.w	r7[-4],r8
		while(it->nextLockedSemaphore!=NULL)
8000015e:	c0 68       	rjmp	8000016a <ROSA_semaphoreLock+0xa6>
		{
			it=it->nextLockedSemaphore;
80000160:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000164:	70 28       	ld.w	r8,r8[0x8]
80000166:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
		ROSA_semaphoreHandle_t it; //finding the last semaphore in the list and changing its nextLockedSemaphore field to point to the just locked semaphore
		it=LOCKEDSEMAPHORELIST;
		while(it->nextLockedSemaphore!=NULL)
8000016a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000016e:	70 28       	ld.w	r8,r8[0x8]
80000170:	58 08       	cp.w	r8,0
80000172:	cf 71       	brne	80000160 <ROSA_semaphoreLock+0x9c>
		{
			it=it->nextLockedSemaphore;
		}
		it->nextLockedSemaphore=mutex;
80000174:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000178:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000017c:	91 29       	st.w	r8[0x8],r9
	}
	
	return 0;
8000017e:	30 08       	mov	r8,0
}
80000180:	10 9c       	mov	r12,r8
80000182:	2f ed       	sub	sp,-8
80000184:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80000188:	80 00       	ld.sh	r0,r0[0x0]
8000018a:	0d 42       	ld.w	r2,--r6
8000018c:	00 00       	add	r0,r0
8000018e:	06 58       	eor	r8,r3
80000190:	80 00       	ld.sh	r0,r0[0x0]
80000192:	00 08       	add	r8,r0
80000194:	80 00       	ld.sh	r0,r0[0x0]
80000196:	08 e4       	st.h	--r4,r4
80000198:	80 00       	ld.sh	r0,r0[0x0]
8000019a:	08 50       	eor	r0,r4
8000019c:	00 00       	add	r0,r0
8000019e:	05 d0       	ld.ub	r0,r2[0x5]

800001a0 <ROSA_semaphoreUnlock>:
 *
 * Comment:
 * 	Unlock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreUnlock(ROSA_semaphoreHandle_t  mutex) {
800001a0:	eb cd 40 80 	pushm	r7,lr
800001a4:	1a 97       	mov	r7,sp
800001a6:	20 2d       	sub	sp,8
800001a8:	ef 4c ff f8 	st.w	r7[-8],r12
	mutex->holder = NULL;
800001ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001b0:	30 09       	mov	r9,0
800001b2:	91 09       	st.w	r8[0x0],r9
	if (mutex==LOCKEDSEMAPHORELIST)
800001b4:	49 d8       	lddpc	r8,80000228 <ROSA_semaphoreUnlock+0x88>
800001b6:	70 08       	ld.w	r8,r8[0x0]
800001b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800001bc:	10 39       	cp.w	r9,r8
800001be:	c0 71       	brne	800001cc <ROSA_semaphoreUnlock+0x2c>
	{
		LOCKEDSEMAPHORELIST=mutex->nextLockedSemaphore; //if first locked semaphore needs to be unlocked
800001c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001c4:	70 29       	ld.w	r9,r8[0x8]
800001c6:	49 98       	lddpc	r8,80000228 <ROSA_semaphoreUnlock+0x88>
800001c8:	91 09       	st.w	r8[0x0],r9
800001ca:	c1 88       	rjmp	800001fa <ROSA_semaphoreUnlock+0x5a>
	}
	else
	{
		ROSA_semaphoreHandle_t it;
		it=LOCKEDSEMAPHORELIST;
800001cc:	49 78       	lddpc	r8,80000228 <ROSA_semaphoreUnlock+0x88>
800001ce:	70 08       	ld.w	r8,r8[0x0]
800001d0:	ef 48 ff fc 	st.w	r7[-4],r8
		while (it->nextLockedSemaphore!=mutex) //find the locked semaphore before the one that needs to be unlocked
800001d4:	c0 68       	rjmp	800001e0 <ROSA_semaphoreUnlock+0x40>
		{
			it=it->nextLockedSemaphore;
800001d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001da:	70 28       	ld.w	r8,r8[0x8]
800001dc:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
		ROSA_semaphoreHandle_t it;
		it=LOCKEDSEMAPHORELIST;
		while (it->nextLockedSemaphore!=mutex) //find the locked semaphore before the one that needs to be unlocked
800001e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001e4:	70 29       	ld.w	r9,r8[0x8]
800001e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001ea:	10 39       	cp.w	r9,r8
800001ec:	cf 51       	brne	800001d6 <ROSA_semaphoreUnlock+0x36>
		{
			it=it->nextLockedSemaphore;
		}
		it->nextLockedSemaphore=mutex->nextLockedSemaphore;
800001ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001f2:	70 29       	ld.w	r9,r8[0x8]
800001f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001f8:	91 29       	st.w	r8[0x8],r9
	}
	readyQueueExtract(EXECTASK);
800001fa:	48 d8       	lddpc	r8,8000022c <ROSA_semaphoreUnlock+0x8c>
800001fc:	70 08       	ld.w	r8,r8[0x0]
800001fe:	10 9c       	mov	r12,r8
80000200:	f0 1f 00 0c 	mcall	80000230 <ROSA_semaphoreUnlock+0x90>
	EXECTASK->priority=EXECTASK->originalPriority; //IPCP priority inheritance
80000204:	48 a8       	lddpc	r8,8000022c <ROSA_semaphoreUnlock+0x8c>
80000206:	70 09       	ld.w	r9,r8[0x0]
80000208:	48 98       	lddpc	r8,8000022c <ROSA_semaphoreUnlock+0x8c>
8000020a:	70 08       	ld.w	r8,r8[0x0]
8000020c:	f1 38 00 71 	ld.ub	r8,r8[113]
80000210:	f3 68 00 64 	st.b	r9[100],r8
	readyQueueInsert(EXECTASK);
80000214:	48 68       	lddpc	r8,8000022c <ROSA_semaphoreUnlock+0x8c>
80000216:	70 08       	ld.w	r8,r8[0x0]
80000218:	10 9c       	mov	r12,r8
8000021a:	f0 1f 00 07 	mcall	80000234 <ROSA_semaphoreUnlock+0x94>
	
	return 0;
8000021e:	30 08       	mov	r8,0
}
80000220:	10 9c       	mov	r12,r8
80000222:	2f ed       	sub	sp,-8
80000224:	e3 cd 80 80 	ldm	sp++,r7,pc
80000228:	00 00       	add	r0,r0
8000022a:	05 d0       	ld.ub	r0,r2[0x5]
8000022c:	00 00       	add	r0,r0
8000022e:	06 58       	eor	r8,r3
80000230:	80 00       	ld.sh	r0,r0[0x0]
80000232:	08 e4       	st.h	--r4,r4
80000234:	80 00       	ld.sh	r0,r0[0x0]
80000236:	08 50       	eor	r0,r4

80000238 <usart_options>:
80000238:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 31     ............tsk1
80000248:	00 00 00 00 74 73 6b 32 00 00 00 00 74 73 6b 33     ....tsk2....tsk3
80000258:	00 00 00 00 74 73 6b 34 00 00 00 00 74 73 6b 35     ....tsk4....tsk5
80000268:	00 00 00 00 74 73 6b 36 00 00 00 00 74 73 6b 37     ....tsk6....tsk7
80000278:	00 00 00 00 74 73 6b 38 00 00 00 00 74 73 6b 39     ....tsk8....tsk9
80000288:	00 00 00 00 74 73 6b 31 30 00 00 00 74 73 6b 31     ....tsk10...tsk1
80000298:	31 00 00 00 74 73 6b 31 32 00 00 00                 1...tsk12...

800002a4 <task1>:
/*************************************************************
 * Task 1
 * Turn LED 1 ON
 ************************************************************/
void task1(void)
{
800002a4:	eb cd 40 80 	pushm	r7,lr
800002a8:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex1);
800002aa:	48 b8       	lddpc	r8,800002d4 <task1+0x30>
800002ac:	70 08       	ld.w	r8,r8[0x0]
800002ae:	10 9c       	mov	r12,r8
800002b0:	f0 1f 00 0a 	mcall	800002d8 <task1+0x34>
		ledOn(LED0_GPIO);
800002b4:	33 bc       	mov	r12,59
800002b6:	f0 1f 00 0a 	mcall	800002dc <task1+0x38>
		ROSA_delay(511);
800002ba:	e0 6a 01 ff 	mov	r10,511
800002be:	30 0b       	mov	r11,0
800002c0:	f0 1f 00 08 	mcall	800002e0 <task1+0x3c>
		ROSA_semaphoreUnlock(mutex1);
800002c4:	48 48       	lddpc	r8,800002d4 <task1+0x30>
800002c6:	70 08       	ld.w	r8,r8[0x0]
800002c8:	10 9c       	mov	r12,r8
800002ca:	f0 1f 00 07 	mcall	800002e4 <task1+0x40>
		ROSA_yield();
800002ce:	f0 1f 00 07 	mcall	800002e8 <task1+0x44>
	}
800002d2:	ce cb       	rjmp	800002aa <task1+0x6>
800002d4:	00 00       	add	r0,r0
800002d6:	06 18       	sub	r8,r3
800002d8:	80 00       	ld.sh	r0,r0[0x0]
800002da:	00 c4       	st.b	r0++,r4
800002dc:	80 00       	ld.sh	r0,r0[0x0]
800002de:	13 e0       	ld.ub	r0,r9[0x6]
800002e0:	80 00       	ld.sh	r0,r0[0x0]
800002e2:	10 94       	mov	r4,r8
800002e4:	80 00       	ld.sh	r0,r0[0x0]
800002e6:	01 a0       	ld.ub	r0,r0[0x2]
800002e8:	80 00       	ld.sh	r0,r0[0x0]
800002ea:	0d 42       	ld.w	r2,--r6

800002ec <task2>:
/*************************************************************
 * Task 2
 * Turn LED 0 OFF
 ************************************************************/
void task2(void)
{
800002ec:	eb cd 40 80 	pushm	r7,lr
800002f0:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex1);
800002f2:	48 b8       	lddpc	r8,8000031c <task2+0x30>
800002f4:	70 08       	ld.w	r8,r8[0x0]
800002f6:	10 9c       	mov	r12,r8
800002f8:	f0 1f 00 0a 	mcall	80000320 <task2+0x34>
		ledOff(LED0_GPIO);
800002fc:	33 bc       	mov	r12,59
800002fe:	f0 1f 00 0a 	mcall	80000324 <task2+0x38>
		ROSA_delay(510);
80000302:	e0 6a 01 fe 	mov	r10,510
80000306:	30 0b       	mov	r11,0
80000308:	f0 1f 00 08 	mcall	80000328 <task2+0x3c>
		ROSA_semaphoreUnlock(mutex1);
8000030c:	48 48       	lddpc	r8,8000031c <task2+0x30>
8000030e:	70 08       	ld.w	r8,r8[0x0]
80000310:	10 9c       	mov	r12,r8
80000312:	f0 1f 00 07 	mcall	8000032c <task2+0x40>
		ROSA_yield();
80000316:	f0 1f 00 07 	mcall	80000330 <task2+0x44>
	}
8000031a:	ce cb       	rjmp	800002f2 <task2+0x6>
8000031c:	00 00       	add	r0,r0
8000031e:	06 18       	sub	r8,r3
80000320:	80 00       	ld.sh	r0,r0[0x0]
80000322:	00 c4       	st.b	r0++,r4
80000324:	80 00       	ld.sh	r0,r0[0x0]
80000326:	14 00       	add	r0,r10
80000328:	80 00       	ld.sh	r0,r0[0x0]
8000032a:	10 94       	mov	r4,r8
8000032c:	80 00       	ld.sh	r0,r0[0x0]
8000032e:	01 a0       	ld.ub	r0,r0[0x2]
80000330:	80 00       	ld.sh	r0,r0[0x0]
80000332:	0d 42       	ld.w	r2,--r6

80000334 <task3>:
/*************************************************************
 * Task 3
 * Turn LED 1 ON
 ************************************************************/
void task3(void)
{
80000334:	eb cd 40 80 	pushm	r7,lr
80000338:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex2);
8000033a:	48 b8       	lddpc	r8,80000364 <task3+0x30>
8000033c:	70 08       	ld.w	r8,r8[0x0]
8000033e:	10 9c       	mov	r12,r8
80000340:	f0 1f 00 0a 	mcall	80000368 <task3+0x34>
		ledOn(LED1_GPIO);
80000344:	33 cc       	mov	r12,60
80000346:	f0 1f 00 0a 	mcall	8000036c <task3+0x38>
		ROSA_delay(509);
8000034a:	e0 6a 01 fd 	mov	r10,509
8000034e:	30 0b       	mov	r11,0
80000350:	f0 1f 00 08 	mcall	80000370 <task3+0x3c>
		ROSA_semaphoreUnlock(mutex2);
80000354:	48 48       	lddpc	r8,80000364 <task3+0x30>
80000356:	70 08       	ld.w	r8,r8[0x0]
80000358:	10 9c       	mov	r12,r8
8000035a:	f0 1f 00 07 	mcall	80000374 <task3+0x40>
		ROSA_yield();
8000035e:	f0 1f 00 07 	mcall	80000378 <task3+0x44>
	}
80000362:	ce cb       	rjmp	8000033a <task3+0x6>
80000364:	00 00       	add	r0,r0
80000366:	05 dc       	ld.ub	r12,r2[0x5]
80000368:	80 00       	ld.sh	r0,r0[0x0]
8000036a:	00 c4       	st.b	r0++,r4
8000036c:	80 00       	ld.sh	r0,r0[0x0]
8000036e:	13 e0       	ld.ub	r0,r9[0x6]
80000370:	80 00       	ld.sh	r0,r0[0x0]
80000372:	10 94       	mov	r4,r8
80000374:	80 00       	ld.sh	r0,r0[0x0]
80000376:	01 a0       	ld.ub	r0,r0[0x2]
80000378:	80 00       	ld.sh	r0,r0[0x0]
8000037a:	0d 42       	ld.w	r2,--r6

8000037c <task4>:
/*************************************************************
 * Task 4
 * Turn LED 1 OFF
 ************************************************************/
void task4(void)
{
8000037c:	eb cd 40 80 	pushm	r7,lr
80000380:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex2);
80000382:	48 b8       	lddpc	r8,800003ac <task4+0x30>
80000384:	70 08       	ld.w	r8,r8[0x0]
80000386:	10 9c       	mov	r12,r8
80000388:	f0 1f 00 0a 	mcall	800003b0 <task4+0x34>
		ledOff(LED1_GPIO);
8000038c:	33 cc       	mov	r12,60
8000038e:	f0 1f 00 0a 	mcall	800003b4 <task4+0x38>
		ROSA_delay(508);
80000392:	e0 6a 01 fc 	mov	r10,508
80000396:	30 0b       	mov	r11,0
80000398:	f0 1f 00 08 	mcall	800003b8 <task4+0x3c>
		ROSA_semaphoreUnlock(mutex2);
8000039c:	48 48       	lddpc	r8,800003ac <task4+0x30>
8000039e:	70 08       	ld.w	r8,r8[0x0]
800003a0:	10 9c       	mov	r12,r8
800003a2:	f0 1f 00 07 	mcall	800003bc <task4+0x40>
		ROSA_yield();
800003a6:	f0 1f 00 07 	mcall	800003c0 <task4+0x44>
	}
800003aa:	ce cb       	rjmp	80000382 <task4+0x6>
800003ac:	00 00       	add	r0,r0
800003ae:	05 dc       	ld.ub	r12,r2[0x5]
800003b0:	80 00       	ld.sh	r0,r0[0x0]
800003b2:	00 c4       	st.b	r0++,r4
800003b4:	80 00       	ld.sh	r0,r0[0x0]
800003b6:	14 00       	add	r0,r10
800003b8:	80 00       	ld.sh	r0,r0[0x0]
800003ba:	10 94       	mov	r4,r8
800003bc:	80 00       	ld.sh	r0,r0[0x0]
800003be:	01 a0       	ld.ub	r0,r0[0x2]
800003c0:	80 00       	ld.sh	r0,r0[0x0]
800003c2:	0d 42       	ld.w	r2,--r6

800003c4 <task5>:
/*************************************************************
 * Task 5
 * Turn LED 2 ON
 ************************************************************/
void task5(void)
{
800003c4:	eb cd 40 80 	pushm	r7,lr
800003c8:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex3);
800003ca:	48 b8       	lddpc	r8,800003f4 <task5+0x30>
800003cc:	70 08       	ld.w	r8,r8[0x0]
800003ce:	10 9c       	mov	r12,r8
800003d0:	f0 1f 00 0a 	mcall	800003f8 <task5+0x34>
		ledOn(LED2_GPIO);
800003d4:	33 dc       	mov	r12,61
800003d6:	f0 1f 00 0a 	mcall	800003fc <task5+0x38>
		ROSA_delay(507);
800003da:	e0 6a 01 fb 	mov	r10,507
800003de:	30 0b       	mov	r11,0
800003e0:	f0 1f 00 08 	mcall	80000400 <task5+0x3c>
		ROSA_semaphoreUnlock(mutex3);
800003e4:	48 48       	lddpc	r8,800003f4 <task5+0x30>
800003e6:	70 08       	ld.w	r8,r8[0x0]
800003e8:	10 9c       	mov	r12,r8
800003ea:	f0 1f 00 07 	mcall	80000404 <task5+0x40>
		ROSA_yield();
800003ee:	f0 1f 00 07 	mcall	80000408 <task5+0x44>
	}
800003f2:	ce cb       	rjmp	800003ca <task5+0x6>
800003f4:	00 00       	add	r0,r0
800003f6:	06 0c       	add	r12,r3
800003f8:	80 00       	ld.sh	r0,r0[0x0]
800003fa:	00 c4       	st.b	r0++,r4
800003fc:	80 00       	ld.sh	r0,r0[0x0]
800003fe:	13 e0       	ld.ub	r0,r9[0x6]
80000400:	80 00       	ld.sh	r0,r0[0x0]
80000402:	10 94       	mov	r4,r8
80000404:	80 00       	ld.sh	r0,r0[0x0]
80000406:	01 a0       	ld.ub	r0,r0[0x2]
80000408:	80 00       	ld.sh	r0,r0[0x0]
8000040a:	0d 42       	ld.w	r2,--r6

8000040c <task6>:
/*************************************************************
 * Task 6
 * Turn LED 2 OFF
 ************************************************************/
void task6(void)
{
8000040c:	eb cd 40 80 	pushm	r7,lr
80000410:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex3);
80000412:	48 b8       	lddpc	r8,8000043c <task6+0x30>
80000414:	70 08       	ld.w	r8,r8[0x0]
80000416:	10 9c       	mov	r12,r8
80000418:	f0 1f 00 0a 	mcall	80000440 <task6+0x34>
		ledOff(LED2_GPIO);
8000041c:	33 dc       	mov	r12,61
8000041e:	f0 1f 00 0a 	mcall	80000444 <task6+0x38>
		ROSA_delay(506);
80000422:	e0 6a 01 fa 	mov	r10,506
80000426:	30 0b       	mov	r11,0
80000428:	f0 1f 00 08 	mcall	80000448 <task6+0x3c>
		ROSA_semaphoreUnlock(mutex3);
8000042c:	48 48       	lddpc	r8,8000043c <task6+0x30>
8000042e:	70 08       	ld.w	r8,r8[0x0]
80000430:	10 9c       	mov	r12,r8
80000432:	f0 1f 00 07 	mcall	8000044c <task6+0x40>
		ROSA_yield();
80000436:	f0 1f 00 07 	mcall	80000450 <task6+0x44>
	}
8000043a:	ce cb       	rjmp	80000412 <task6+0x6>
8000043c:	00 00       	add	r0,r0
8000043e:	06 0c       	add	r12,r3
80000440:	80 00       	ld.sh	r0,r0[0x0]
80000442:	00 c4       	st.b	r0++,r4
80000444:	80 00       	ld.sh	r0,r0[0x0]
80000446:	14 00       	add	r0,r10
80000448:	80 00       	ld.sh	r0,r0[0x0]
8000044a:	10 94       	mov	r4,r8
8000044c:	80 00       	ld.sh	r0,r0[0x0]
8000044e:	01 a0       	ld.ub	r0,r0[0x2]
80000450:	80 00       	ld.sh	r0,r0[0x0]
80000452:	0d 42       	ld.w	r2,--r6

80000454 <task7>:
/*************************************************************
 * Task 7
 * Turn LED 3 ON
 ************************************************************/
void task7(void)
{
80000454:	eb cd 40 80 	pushm	r7,lr
80000458:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex4);
8000045a:	48 b8       	lddpc	r8,80000484 <task7+0x30>
8000045c:	70 08       	ld.w	r8,r8[0x0]
8000045e:	10 9c       	mov	r12,r8
80000460:	f0 1f 00 0a 	mcall	80000488 <task7+0x34>
		ledOn(LED3_GPIO);
80000464:	33 ec       	mov	r12,62
80000466:	f0 1f 00 0a 	mcall	8000048c <task7+0x38>
		ROSA_delay(505);
8000046a:	e0 6a 01 f9 	mov	r10,505
8000046e:	30 0b       	mov	r11,0
80000470:	f0 1f 00 08 	mcall	80000490 <task7+0x3c>
		ROSA_semaphoreUnlock(mutex4);
80000474:	48 48       	lddpc	r8,80000484 <task7+0x30>
80000476:	70 08       	ld.w	r8,r8[0x0]
80000478:	10 9c       	mov	r12,r8
8000047a:	f0 1f 00 07 	mcall	80000494 <task7+0x40>
		ROSA_yield();
8000047e:	f0 1f 00 07 	mcall	80000498 <task7+0x44>
	}
80000482:	ce cb       	rjmp	8000045a <task7+0x6>
80000484:	00 00       	add	r0,r0
80000486:	06 14       	sub	r4,r3
80000488:	80 00       	ld.sh	r0,r0[0x0]
8000048a:	00 c4       	st.b	r0++,r4
8000048c:	80 00       	ld.sh	r0,r0[0x0]
8000048e:	13 e0       	ld.ub	r0,r9[0x6]
80000490:	80 00       	ld.sh	r0,r0[0x0]
80000492:	10 94       	mov	r4,r8
80000494:	80 00       	ld.sh	r0,r0[0x0]
80000496:	01 a0       	ld.ub	r0,r0[0x2]
80000498:	80 00       	ld.sh	r0,r0[0x0]
8000049a:	0d 42       	ld.w	r2,--r6

8000049c <task8>:
/*************************************************************
 * Task 8
 * Turn LED 3 OFF
 ************************************************************/
void task8(void)
{
8000049c:	eb cd 40 80 	pushm	r7,lr
800004a0:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex4);
800004a2:	48 b8       	lddpc	r8,800004cc <task8+0x30>
800004a4:	70 08       	ld.w	r8,r8[0x0]
800004a6:	10 9c       	mov	r12,r8
800004a8:	f0 1f 00 0a 	mcall	800004d0 <task8+0x34>
		ledOff(LED3_GPIO);
800004ac:	33 ec       	mov	r12,62
800004ae:	f0 1f 00 0a 	mcall	800004d4 <task8+0x38>
		ROSA_delay(504);
800004b2:	e0 6a 01 f8 	mov	r10,504
800004b6:	30 0b       	mov	r11,0
800004b8:	f0 1f 00 08 	mcall	800004d8 <task8+0x3c>
		ROSA_semaphoreUnlock(mutex4);
800004bc:	48 48       	lddpc	r8,800004cc <task8+0x30>
800004be:	70 08       	ld.w	r8,r8[0x0]
800004c0:	10 9c       	mov	r12,r8
800004c2:	f0 1f 00 07 	mcall	800004dc <task8+0x40>
		ROSA_yield();
800004c6:	f0 1f 00 07 	mcall	800004e0 <task8+0x44>
	}
800004ca:	ce cb       	rjmp	800004a2 <task8+0x6>
800004cc:	00 00       	add	r0,r0
800004ce:	06 14       	sub	r4,r3
800004d0:	80 00       	ld.sh	r0,r0[0x0]
800004d2:	00 c4       	st.b	r0++,r4
800004d4:	80 00       	ld.sh	r0,r0[0x0]
800004d6:	14 00       	add	r0,r10
800004d8:	80 00       	ld.sh	r0,r0[0x0]
800004da:	10 94       	mov	r4,r8
800004dc:	80 00       	ld.sh	r0,r0[0x0]
800004de:	01 a0       	ld.ub	r0,r0[0x2]
800004e0:	80 00       	ld.sh	r0,r0[0x0]
800004e2:	0d 42       	ld.w	r2,--r6

800004e4 <task9>:
/*************************************************************
 * Task 9
 * Turn LED 4 ON
 ************************************************************/
void task9(void)
{
800004e4:	eb cd 40 80 	pushm	r7,lr
800004e8:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex5);
800004ea:	48 b8       	lddpc	r8,80000514 <task9+0x30>
800004ec:	70 08       	ld.w	r8,r8[0x0]
800004ee:	10 9c       	mov	r12,r8
800004f0:	f0 1f 00 0a 	mcall	80000518 <task9+0x34>
		ledOn(LED4_GPIO);
800004f4:	33 3c       	mov	r12,51
800004f6:	f0 1f 00 0a 	mcall	8000051c <task9+0x38>
		ROSA_delay(503);
800004fa:	e0 6a 01 f7 	mov	r10,503
800004fe:	30 0b       	mov	r11,0
80000500:	f0 1f 00 08 	mcall	80000520 <task9+0x3c>
		ROSA_semaphoreUnlock(mutex5);
80000504:	48 48       	lddpc	r8,80000514 <task9+0x30>
80000506:	70 08       	ld.w	r8,r8[0x0]
80000508:	10 9c       	mov	r12,r8
8000050a:	f0 1f 00 07 	mcall	80000524 <task9+0x40>
		ROSA_yield();
8000050e:	f0 1f 00 07 	mcall	80000528 <task9+0x44>
	}
80000512:	ce cb       	rjmp	800004ea <task9+0x6>
80000514:	00 00       	add	r0,r0
80000516:	05 ec       	ld.ub	r12,r2[0x6]
80000518:	80 00       	ld.sh	r0,r0[0x0]
8000051a:	00 c4       	st.b	r0++,r4
8000051c:	80 00       	ld.sh	r0,r0[0x0]
8000051e:	13 e0       	ld.ub	r0,r9[0x6]
80000520:	80 00       	ld.sh	r0,r0[0x0]
80000522:	10 94       	mov	r4,r8
80000524:	80 00       	ld.sh	r0,r0[0x0]
80000526:	01 a0       	ld.ub	r0,r0[0x2]
80000528:	80 00       	ld.sh	r0,r0[0x0]
8000052a:	0d 42       	ld.w	r2,--r6

8000052c <task10>:
/*************************************************************
 * Task 10
 * Turn LED 4 OFF
 ************************************************************/
void task10(void)
{
8000052c:	eb cd 40 80 	pushm	r7,lr
80000530:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex5);
80000532:	48 b8       	lddpc	r8,8000055c <task10+0x30>
80000534:	70 08       	ld.w	r8,r8[0x0]
80000536:	10 9c       	mov	r12,r8
80000538:	f0 1f 00 0a 	mcall	80000560 <task10+0x34>
		ledOff(LED4_GPIO);
8000053c:	33 3c       	mov	r12,51
8000053e:	f0 1f 00 0a 	mcall	80000564 <task10+0x38>
		ROSA_delay(502);
80000542:	e0 6a 01 f6 	mov	r10,502
80000546:	30 0b       	mov	r11,0
80000548:	f0 1f 00 08 	mcall	80000568 <task10+0x3c>
		ROSA_semaphoreUnlock(mutex5);
8000054c:	48 48       	lddpc	r8,8000055c <task10+0x30>
8000054e:	70 08       	ld.w	r8,r8[0x0]
80000550:	10 9c       	mov	r12,r8
80000552:	f0 1f 00 07 	mcall	8000056c <task10+0x40>
		ROSA_yield();
80000556:	f0 1f 00 07 	mcall	80000570 <task10+0x44>
	}
8000055a:	ce cb       	rjmp	80000532 <task10+0x6>
8000055c:	00 00       	add	r0,r0
8000055e:	05 ec       	ld.ub	r12,r2[0x6]
80000560:	80 00       	ld.sh	r0,r0[0x0]
80000562:	00 c4       	st.b	r0++,r4
80000564:	80 00       	ld.sh	r0,r0[0x0]
80000566:	14 00       	add	r0,r10
80000568:	80 00       	ld.sh	r0,r0[0x0]
8000056a:	10 94       	mov	r4,r8
8000056c:	80 00       	ld.sh	r0,r0[0x0]
8000056e:	01 a0       	ld.ub	r0,r0[0x2]
80000570:	80 00       	ld.sh	r0,r0[0x0]
80000572:	0d 42       	ld.w	r2,--r6

80000574 <task11>:
/*************************************************************
 * Task 11
 * Turn LED 5 ON
 ************************************************************/
void task11(void)
{
80000574:	eb cd 40 80 	pushm	r7,lr
80000578:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex6);
8000057a:	48 b8       	lddpc	r8,800005a4 <task11+0x30>
8000057c:	70 08       	ld.w	r8,r8[0x0]
8000057e:	10 9c       	mov	r12,r8
80000580:	f0 1f 00 0a 	mcall	800005a8 <task11+0x34>
		ledOn(LED5_GPIO);
80000584:	33 4c       	mov	r12,52
80000586:	f0 1f 00 0a 	mcall	800005ac <task11+0x38>
		ROSA_delay(501);
8000058a:	e0 6a 01 f5 	mov	r10,501
8000058e:	30 0b       	mov	r11,0
80000590:	f0 1f 00 08 	mcall	800005b0 <task11+0x3c>
		ROSA_semaphoreUnlock(mutex6);
80000594:	48 48       	lddpc	r8,800005a4 <task11+0x30>
80000596:	70 08       	ld.w	r8,r8[0x0]
80000598:	10 9c       	mov	r12,r8
8000059a:	f0 1f 00 07 	mcall	800005b4 <task11+0x40>
		ROSA_yield();
8000059e:	f0 1f 00 07 	mcall	800005b8 <task11+0x44>
	}
800005a2:	ce cb       	rjmp	8000057a <task11+0x6>
800005a4:	00 00       	add	r0,r0
800005a6:	05 d4       	ld.ub	r4,r2[0x5]
800005a8:	80 00       	ld.sh	r0,r0[0x0]
800005aa:	00 c4       	st.b	r0++,r4
800005ac:	80 00       	ld.sh	r0,r0[0x0]
800005ae:	13 e0       	ld.ub	r0,r9[0x6]
800005b0:	80 00       	ld.sh	r0,r0[0x0]
800005b2:	10 94       	mov	r4,r8
800005b4:	80 00       	ld.sh	r0,r0[0x0]
800005b6:	01 a0       	ld.ub	r0,r0[0x2]
800005b8:	80 00       	ld.sh	r0,r0[0x0]
800005ba:	0d 42       	ld.w	r2,--r6

800005bc <task12>:
/*************************************************************
 * Task 12
 * Turn LED 5 OFF
 ************************************************************/
void task12(void)
{
800005bc:	eb cd 40 80 	pushm	r7,lr
800005c0:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex6);
800005c2:	48 b8       	lddpc	r8,800005ec <task12+0x30>
800005c4:	70 08       	ld.w	r8,r8[0x0]
800005c6:	10 9c       	mov	r12,r8
800005c8:	f0 1f 00 0a 	mcall	800005f0 <task12+0x34>
		ledOff(LED5_GPIO);
800005cc:	33 4c       	mov	r12,52
800005ce:	f0 1f 00 0a 	mcall	800005f4 <task12+0x38>
		ROSA_delay(500);
800005d2:	e0 6a 01 f4 	mov	r10,500
800005d6:	30 0b       	mov	r11,0
800005d8:	f0 1f 00 08 	mcall	800005f8 <task12+0x3c>
		ROSA_semaphoreUnlock(mutex6);
800005dc:	48 48       	lddpc	r8,800005ec <task12+0x30>
800005de:	70 08       	ld.w	r8,r8[0x0]
800005e0:	10 9c       	mov	r12,r8
800005e2:	f0 1f 00 07 	mcall	800005fc <task12+0x40>
		ROSA_yield();
800005e6:	f0 1f 00 07 	mcall	80000600 <task12+0x44>
	}
800005ea:	ce cb       	rjmp	800005c2 <task12+0x6>
800005ec:	00 00       	add	r0,r0
800005ee:	05 d4       	ld.ub	r4,r2[0x5]
800005f0:	80 00       	ld.sh	r0,r0[0x0]
800005f2:	00 c4       	st.b	r0++,r4
800005f4:	80 00       	ld.sh	r0,r0[0x0]
800005f6:	14 00       	add	r0,r10
800005f8:	80 00       	ld.sh	r0,r0[0x0]
800005fa:	10 94       	mov	r4,r8
800005fc:	80 00       	ld.sh	r0,r0[0x0]
800005fe:	01 a0       	ld.ub	r0,r0[0x2]
80000600:	80 00       	ld.sh	r0,r0[0x0]
80000602:	0d 42       	ld.w	r2,--r6

80000604 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
80000604:	eb cd 40 80 	pushm	r7,lr
80000608:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
8000060a:	f0 1f 00 3f 	mcall	80000704 <main+0x100>
	
	//Create tasks and install them into the ROSA kernel
	ROSA_taskCreate(t1_tcb, "tsk1", task1, T1_STACK_SIZE, 1);
8000060e:	4b f8       	lddpc	r8,80000708 <main+0x104>
80000610:	70 0c       	ld.w	r12,r8[0x0]
80000612:	30 18       	mov	r8,1
80000614:	32 09       	mov	r9,32
80000616:	4b ea       	lddpc	r10,8000070c <main+0x108>
80000618:	4b eb       	lddpc	r11,80000710 <main+0x10c>
8000061a:	f0 1f 00 3f 	mcall	80000714 <main+0x110>
	ROSA_taskCreate(t2_tcb, "tsk2", task2, T2_STACK_SIZE, 2);
8000061e:	4b f8       	lddpc	r8,80000718 <main+0x114>
80000620:	70 0c       	ld.w	r12,r8[0x0]
80000622:	30 28       	mov	r8,2
80000624:	32 09       	mov	r9,32
80000626:	4b ea       	lddpc	r10,8000071c <main+0x118>
80000628:	4b eb       	lddpc	r11,80000720 <main+0x11c>
8000062a:	f0 1f 00 3b 	mcall	80000714 <main+0x110>
	ROSA_taskCreate(t3_tcb, "tsk3", task3, T3_STACK_SIZE, 3);
8000062e:	4b e8       	lddpc	r8,80000724 <main+0x120>
80000630:	70 0c       	ld.w	r12,r8[0x0]
80000632:	30 38       	mov	r8,3
80000634:	32 09       	mov	r9,32
80000636:	4b da       	lddpc	r10,80000728 <main+0x124>
80000638:	4b db       	lddpc	r11,8000072c <main+0x128>
8000063a:	f0 1f 00 37 	mcall	80000714 <main+0x110>
	ROSA_taskCreate(t4_tcb, "tsk4", task4, T4_STACK_SIZE, 4);
8000063e:	4b d8       	lddpc	r8,80000730 <main+0x12c>
80000640:	70 0c       	ld.w	r12,r8[0x0]
80000642:	30 48       	mov	r8,4
80000644:	32 09       	mov	r9,32
80000646:	4b ca       	lddpc	r10,80000734 <main+0x130>
80000648:	4b cb       	lddpc	r11,80000738 <main+0x134>
8000064a:	f0 1f 00 33 	mcall	80000714 <main+0x110>
	ROSA_taskCreate(t5_tcb, "tsk5", task5, T5_STACK_SIZE, 5);
8000064e:	4b c8       	lddpc	r8,8000073c <main+0x138>
80000650:	70 0c       	ld.w	r12,r8[0x0]
80000652:	30 58       	mov	r8,5
80000654:	32 09       	mov	r9,32
80000656:	4b ba       	lddpc	r10,80000740 <main+0x13c>
80000658:	4b bb       	lddpc	r11,80000744 <main+0x140>
8000065a:	f0 1f 00 2f 	mcall	80000714 <main+0x110>
	ROSA_taskCreate(t6_tcb, "tsk6", task6, T6_STACK_SIZE, 6);
8000065e:	4b b8       	lddpc	r8,80000748 <main+0x144>
80000660:	70 0c       	ld.w	r12,r8[0x0]
80000662:	30 68       	mov	r8,6
80000664:	32 09       	mov	r9,32
80000666:	4b aa       	lddpc	r10,8000074c <main+0x148>
80000668:	4b ab       	lddpc	r11,80000750 <main+0x14c>
8000066a:	f0 1f 00 2b 	mcall	80000714 <main+0x110>
	ROSA_taskCreate(t7_tcb, "tsk7", task7, T7_STACK_SIZE, 7);
8000066e:	4b a8       	lddpc	r8,80000754 <main+0x150>
80000670:	70 0c       	ld.w	r12,r8[0x0]
80000672:	30 78       	mov	r8,7
80000674:	32 09       	mov	r9,32
80000676:	4b 9a       	lddpc	r10,80000758 <main+0x154>
80000678:	4b 9b       	lddpc	r11,8000075c <main+0x158>
8000067a:	f0 1f 00 27 	mcall	80000714 <main+0x110>
	ROSA_taskCreate(t8_tcb, "tsk8", task8, T8_STACK_SIZE, 8);
8000067e:	4b 98       	lddpc	r8,80000760 <main+0x15c>
80000680:	70 0c       	ld.w	r12,r8[0x0]
80000682:	30 88       	mov	r8,8
80000684:	32 09       	mov	r9,32
80000686:	4b 8a       	lddpc	r10,80000764 <main+0x160>
80000688:	4b 8b       	lddpc	r11,80000768 <main+0x164>
8000068a:	f0 1f 00 23 	mcall	80000714 <main+0x110>
	ROSA_taskCreate(t9_tcb, "tsk9", task9, T9_STACK_SIZE, 9);
8000068e:	4b 88       	lddpc	r8,8000076c <main+0x168>
80000690:	70 0c       	ld.w	r12,r8[0x0]
80000692:	30 98       	mov	r8,9
80000694:	32 09       	mov	r9,32
80000696:	4b 7a       	lddpc	r10,80000770 <main+0x16c>
80000698:	4b 7b       	lddpc	r11,80000774 <main+0x170>
8000069a:	f0 1f 00 1f 	mcall	80000714 <main+0x110>
	ROSA_taskCreate(t10_tcb, "tsk10", task10, T10_STACK_SIZE, 10);
8000069e:	4b 78       	lddpc	r8,80000778 <main+0x174>
800006a0:	70 0c       	ld.w	r12,r8[0x0]
800006a2:	30 a8       	mov	r8,10
800006a4:	32 09       	mov	r9,32
800006a6:	4b 6a       	lddpc	r10,8000077c <main+0x178>
800006a8:	4b 6b       	lddpc	r11,80000780 <main+0x17c>
800006aa:	f0 1f 00 1b 	mcall	80000714 <main+0x110>
	ROSA_taskCreate(t11_tcb, "tsk11", task11, T11_STACK_SIZE, 11);
800006ae:	4b 68       	lddpc	r8,80000784 <main+0x180>
800006b0:	70 0c       	ld.w	r12,r8[0x0]
800006b2:	30 b8       	mov	r8,11
800006b4:	32 09       	mov	r9,32
800006b6:	4b 5a       	lddpc	r10,80000788 <main+0x184>
800006b8:	4b 5b       	lddpc	r11,8000078c <main+0x188>
800006ba:	f0 1f 00 17 	mcall	80000714 <main+0x110>
	ROSA_taskCreate(t12_tcb, "tsk12", task12, T12_STACK_SIZE, 12);
800006be:	4b 58       	lddpc	r8,80000790 <main+0x18c>
800006c0:	70 0c       	ld.w	r12,r8[0x0]
800006c2:	30 c8       	mov	r8,12
800006c4:	32 09       	mov	r9,32
800006c6:	4b 4a       	lddpc	r10,80000794 <main+0x190>
800006c8:	4b 4b       	lddpc	r11,80000798 <main+0x194>
800006ca:	f0 1f 00 13 	mcall	80000714 <main+0x110>
	
	ROSA_semaphoreCreate(&mutex1, 1);
800006ce:	30 1b       	mov	r11,1
800006d0:	4b 3c       	lddpc	r12,8000079c <main+0x198>
800006d2:	f0 1f 00 34 	mcall	800007a0 <main+0x19c>
	ROSA_semaphoreCreate(&mutex2, 1);
800006d6:	30 1b       	mov	r11,1
800006d8:	4b 3c       	lddpc	r12,800007a4 <main+0x1a0>
800006da:	f0 1f 00 32 	mcall	800007a0 <main+0x19c>
	ROSA_semaphoreCreate(&mutex3, 1);
800006de:	30 1b       	mov	r11,1
800006e0:	4b 2c       	lddpc	r12,800007a8 <main+0x1a4>
800006e2:	f0 1f 00 30 	mcall	800007a0 <main+0x19c>
	ROSA_semaphoreCreate(&mutex4, 1);
800006e6:	30 1b       	mov	r11,1
800006e8:	4b 1c       	lddpc	r12,800007ac <main+0x1a8>
800006ea:	f0 1f 00 2e 	mcall	800007a0 <main+0x19c>
	ROSA_semaphoreCreate(&mutex5, 1);
800006ee:	30 1b       	mov	r11,1
800006f0:	4b 0c       	lddpc	r12,800007b0 <main+0x1ac>
800006f2:	f0 1f 00 2c 	mcall	800007a0 <main+0x19c>
	ROSA_semaphoreCreate(&mutex6, 1);
800006f6:	30 1b       	mov	r11,1
800006f8:	4a fc       	lddpc	r12,800007b4 <main+0x1b0>
800006fa:	f0 1f 00 2a 	mcall	800007a0 <main+0x19c>

	ROSA_startScheduler();
800006fe:	f0 1f 00 2f 	mcall	800007b8 <main+0x1b4>

	/* Execution will never return here */
	while(1);
80000702:	c0 08       	rjmp	80000702 <main+0xfe>
80000704:	80 00       	ld.sh	r0,r0[0x0]
80000706:	0a 00       	add	r0,r5
80000708:	00 00       	add	r0,r0
8000070a:	05 f8       	ld.ub	r8,r2[0x7]
8000070c:	80 00       	ld.sh	r0,r0[0x0]
8000070e:	02 a4       	st.w	r1++,r4
80000710:	80 00       	ld.sh	r0,r0[0x0]
80000712:	02 44       	or	r4,r1
80000714:	80 00       	ld.sh	r0,r0[0x0]
80000716:	0b 90       	ld.ub	r0,r5[0x1]
80000718:	00 00       	add	r0,r0
8000071a:	05 f4       	ld.ub	r4,r2[0x7]
8000071c:	80 00       	ld.sh	r0,r0[0x0]
8000071e:	02 ec       	st.h	--r1,r12
80000720:	80 00       	ld.sh	r0,r0[0x0]
80000722:	02 4c       	or	r12,r1
80000724:	00 00       	add	r0,r0
80000726:	05 d8       	ld.ub	r8,r2[0x5]
80000728:	80 00       	ld.sh	r0,r0[0x0]
8000072a:	03 34       	ld.ub	r4,r1++
8000072c:	80 00       	ld.sh	r0,r0[0x0]
8000072e:	02 54       	eor	r4,r1
80000730:	00 00       	add	r0,r0
80000732:	05 e8       	ld.ub	r8,r2[0x6]
80000734:	80 00       	ld.sh	r0,r0[0x0]
80000736:	03 7c       	ld.ub	r12,--r1
80000738:	80 00       	ld.sh	r0,r0[0x0]
8000073a:	02 5c       	eor	r12,r1
8000073c:	00 00       	add	r0,r0
8000073e:	05 e4       	ld.ub	r4,r2[0x6]
80000740:	80 00       	ld.sh	r0,r0[0x0]
80000742:	03 c4       	ld.ub	r4,r1[0x4]
80000744:	80 00       	ld.sh	r0,r0[0x0]
80000746:	02 64       	and	r4,r1
80000748:	00 00       	add	r0,r0
8000074a:	06 04       	add	r4,r3
8000074c:	80 00       	ld.sh	r0,r0[0x0]
8000074e:	04 0c       	add	r12,r2
80000750:	80 00       	ld.sh	r0,r0[0x0]
80000752:	02 6c       	and	r12,r1
80000754:	00 00       	add	r0,r0
80000756:	05 fc       	ld.ub	r12,r2[0x7]
80000758:	80 00       	ld.sh	r0,r0[0x0]
8000075a:	04 54       	eor	r4,r2
8000075c:	80 00       	ld.sh	r0,r0[0x0]
8000075e:	02 74       	tst	r4,r1
80000760:	00 00       	add	r0,r0
80000762:	06 10       	sub	r0,r3
80000764:	80 00       	ld.sh	r0,r0[0x0]
80000766:	04 9c       	mov	r12,r2
80000768:	80 00       	ld.sh	r0,r0[0x0]
8000076a:	02 7c       	tst	r12,r1
8000076c:	00 00       	add	r0,r0
8000076e:	06 00       	add	r0,r3
80000770:	80 00       	ld.sh	r0,r0[0x0]
80000772:	04 e4       	st.h	--r2,r4
80000774:	80 00       	ld.sh	r0,r0[0x0]
80000776:	02 84       	andn	r4,r1
80000778:	00 00       	add	r0,r0
8000077a:	05 f0       	ld.ub	r0,r2[0x7]
8000077c:	80 00       	ld.sh	r0,r0[0x0]
8000077e:	05 2c       	ld.uh	r12,r2++
80000780:	80 00       	ld.sh	r0,r0[0x0]
80000782:	02 8c       	andn	r12,r1
80000784:	00 00       	add	r0,r0
80000786:	06 08       	add	r8,r3
80000788:	80 00       	ld.sh	r0,r0[0x0]
8000078a:	05 74       	ld.ub	r4,--r2
8000078c:	80 00       	ld.sh	r0,r0[0x0]
8000078e:	02 94       	mov	r4,r1
80000790:	00 00       	add	r0,r0
80000792:	05 e0       	ld.ub	r0,r2[0x6]
80000794:	80 00       	ld.sh	r0,r0[0x0]
80000796:	05 bc       	ld.ub	r12,r2[0x3]
80000798:	80 00       	ld.sh	r0,r0[0x0]
8000079a:	02 9c       	mov	r12,r1
8000079c:	00 00       	add	r0,r0
8000079e:	06 18       	sub	r8,r3
800007a0:	80 00       	ld.sh	r0,r0[0x0]
800007a2:	00 70       	tst	r0,r0
800007a4:	00 00       	add	r0,r0
800007a6:	05 dc       	ld.ub	r12,r2[0x5]
800007a8:	00 00       	add	r0,r0
800007aa:	06 0c       	add	r12,r3
800007ac:	00 00       	add	r0,r0
800007ae:	06 14       	sub	r4,r3
800007b0:	00 00       	add	r0,r0
800007b2:	05 ec       	ld.ub	r12,r2[0x6]
800007b4:	00 00       	add	r0,r0
800007b6:	05 d4       	ld.ub	r4,r2[0x5]
800007b8:	80 00       	ld.sh	r0,r0[0x0]
800007ba:	0d b8       	ld.ub	r8,r6[0x3]

800007bc <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
800007bc:	eb cd 40 80 	pushm	r7,lr
800007c0:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
800007c2:	f0 1f 00 05 	mcall	800007d4 <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
800007c6:	f0 1f 00 05 	mcall	800007d8 <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it
800007ca:	f0 1f 00 05 	mcall	800007dc <ROSA_yieldFromISR+0x20>
}
800007ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800007d2:	00 00       	add	r0,r0
800007d4:	80 00       	ld.sh	r0,r0[0x0]
800007d6:	23 7e       	sub	lr,55
800007d8:	80 00       	ld.sh	r0,r0[0x0]
800007da:	0d 60       	ld.uh	r0,--r6
800007dc:	80 00       	ld.sh	r0,r0[0x0]
800007de:	23 b8       	sub	r8,59

800007e0 <usart_options>:
800007e0:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
800007f0:	0a 00 00 00 69 64 6c 65 00 00 00 00                 ....idle....

800007fc <idle>:

/** @fn void idle(void)
	@brief Idle task body.
*/
void idle(void)
{
800007fc:	eb cd 40 80 	pushm	r7,lr
80000800:	1a 97       	mov	r7,sp
	while(1)
	{
		usartWriteLine(USART, "idle\n");
80000802:	48 4b       	lddpc	r11,80000810 <idle+0x14>
80000804:	fe 7c 14 00 	mov	r12,-60416
80000808:	f0 1f 00 03 	mcall	80000814 <idle+0x18>
	}
8000080c:	cf bb       	rjmp	80000802 <idle+0x6>
8000080e:	00 00       	add	r0,r0
80000810:	80 00       	ld.sh	r0,r0[0x0]
80000812:	07 ec       	ld.ub	r12,r3[0x6]
80000814:	80 00       	ld.sh	r0,r0[0x0]
80000816:	17 50       	ld.sh	r0,--r11

80000818 <idleCreate>:

/** @fn void idleCreate(void)
	@brief Creation of the idle task.
*/
void idleCreate(void)
{
80000818:	eb cd 40 80 	pushm	r7,lr
8000081c:	1a 97       	mov	r7,sp
	ROSA_tcbCreate(&IDLETASK_TCB, "idle", idle, idle_stack, IDLE_STACK_SIZE);
8000081e:	32 08       	mov	r8,32
80000820:	48 69       	lddpc	r9,80000838 <idleCreate+0x20>
80000822:	48 7a       	lddpc	r10,8000083c <idleCreate+0x24>
80000824:	48 7b       	lddpc	r11,80000840 <idleCreate+0x28>
80000826:	48 8c       	lddpc	r12,80000844 <idleCreate+0x2c>
80000828:	f0 1f 00 08 	mcall	80000848 <idleCreate+0x30>
	IDLETASK = &IDLETASK_TCB;
8000082c:	48 88       	lddpc	r8,8000084c <idleCreate+0x34>
8000082e:	48 69       	lddpc	r9,80000844 <idleCreate+0x2c>
80000830:	91 09       	st.w	r8[0x0],r9
}
80000832:	e3 cd 80 80 	ldm	sp++,r7,pc
80000836:	00 00       	add	r0,r0
80000838:	00 00       	add	r0,r0
8000083a:	05 18       	ld.sh	r8,r2++
8000083c:	80 00       	ld.sh	r0,r0[0x0]
8000083e:	07 fc       	ld.ub	r12,r3[0x7]
80000840:	80 00       	ld.sh	r0,r0[0x0]
80000842:	07 f4       	ld.ub	r4,r3[0x7]
80000844:	00 00       	add	r0,r0
80000846:	06 5c       	eor	r12,r3
80000848:	80 00       	ld.sh	r0,r0[0x0]
8000084a:	0a dc       	st.w	--r5,r12
8000084c:	00 00       	add	r0,r0
8000084e:	06 1c       	sub	r12,r3

80000850 <readyQueueInsert>:
	@brief Inserts the given task into the ready queue by its priority.
	@param th Task structure (tcb structure).
	@return A status code (1 - item has been added to the empty queue, 0 - otherwise).
*/
int readyQueueInsert(ROSA_taskHandle_t pth)
{
80000850:	eb cd 40 80 	pushm	r7,lr
80000854:	1a 97       	mov	r7,sp
80000856:	20 3d       	sub	sp,12
80000858:	ef 4c ff f4 	st.w	r7[-12],r12
	uint8_t priority;
	int retval;
	
	priority = pth->priority;
8000085c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000860:	f1 38 00 64 	ld.ub	r8,r8[100]
80000864:	ef 68 ff fb 	st.b	r7[-5],r8
	
	/* Check the given queue for the emptiness */
	if (PA[priority] == NULL)
80000868:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000086c:	49 d8       	lddpc	r8,800008e0 <readyQueueInsert+0x90>
8000086e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000872:	58 08       	cp.w	r8,0
80000874:	c1 41       	brne	8000089c <readyQueueInsert+0x4c>
	{
		PA[priority] = pth;
80000876:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000087a:	49 a8       	lddpc	r8,800008e0 <readyQueueInsert+0x90>
8000087c:	ee fa ff f4 	ld.w	r10,r7[-12]
80000880:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		PA[priority]->nexttcb = pth;
80000884:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000888:	49 68       	lddpc	r8,800008e0 <readyQueueInsert+0x90>
8000088a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000088e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000892:	91 09       	st.w	r8[0x0],r9
		
		retval = 1;
80000894:	30 18       	mov	r8,1
80000896:	ef 48 ff fc 	st.w	r7[-4],r8
8000089a:	c1 c8       	rjmp	800008d2 <readyQueueInsert+0x82>
	}
	else
	{
		pth->nexttcb = PA[priority]->nexttcb;
8000089c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800008a0:	49 08       	lddpc	r8,800008e0 <readyQueueInsert+0x90>
800008a2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800008a6:	70 09       	ld.w	r9,r8[0x0]
800008a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008ac:	91 09       	st.w	r8[0x0],r9
		PA[priority]->nexttcb = pth;
800008ae:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800008b2:	48 c8       	lddpc	r8,800008e0 <readyQueueInsert+0x90>
800008b4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800008b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800008bc:	91 09       	st.w	r8[0x0],r9
		PA[priority] = pth;
800008be:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800008c2:	48 88       	lddpc	r8,800008e0 <readyQueueInsert+0x90>
800008c4:	ee fa ff f4 	ld.w	r10,r7[-12]
800008c8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		retval = 0;
800008cc:	30 08       	mov	r8,0
800008ce:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return retval;
800008d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800008d6:	10 9c       	mov	r12,r8
800008d8:	2f dd       	sub	sp,-12
800008da:	e3 cd 80 80 	ldm	sp++,r7,pc
800008de:	00 00       	add	r0,r0
800008e0:	00 00       	add	r0,r0
800008e2:	06 24       	rsub	r4,r3

800008e4 <readyQueueExtract>:
	@brief Extracts the given task from the ready queue by its priority.
	@param th Task structure (tcb structure).
	@return A status code (1 - queue is empty after extraction, 0 - otherwise).
*/
int readyQueueExtract(ROSA_taskHandle_t pth)
{
800008e4:	eb cd 40 80 	pushm	r7,lr
800008e8:	1a 97       	mov	r7,sp
800008ea:	20 4d       	sub	sp,16
800008ec:	ef 4c ff f0 	st.w	r7[-16],r12
	ROSA_taskHandle_t thTmp;
	uint8_t priority;
	int retval;
	
	priority = pth->priority;
800008f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800008f4:	f1 38 00 64 	ld.ub	r8,r8[100]
800008f8:	ef 68 ff fb 	st.b	r7[-5],r8
	thTmp = PA[priority];
800008fc:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000900:	4a 28       	lddpc	r8,80000988 <readyQueueExtract+0xa4>
80000902:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000906:	ef 48 ff f4 	st.w	r7[-12],r8
	
	/* Check whether the deleted task is the last in the queue or not */
	if (pth->nexttcb == pth) 
8000090a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000090e:	70 09       	ld.w	r9,r8[0x0]
80000910:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000914:	10 39       	cp.w	r9,r8
80000916:	c1 11       	brne	80000938 <readyQueueExtract+0x54>
	{
		/* It's enough to extract the deleted task from the queue */
		PA[priority] = NULL;
80000918:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000091c:	49 b8       	lddpc	r8,80000988 <readyQueueExtract+0xa4>
8000091e:	30 0a       	mov	r10,0
80000920:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		retval = 1;
80000924:	30 18       	mov	r8,1
80000926:	ef 48 ff fc 	st.w	r7[-4],r8
8000092a:	c2 88       	rjmp	8000097a <readyQueueExtract+0x96>
	else 
	{
		/* Search for delete task */
		while (thTmp->nexttcb != pth) 
		{
			thTmp = thTmp->nexttcb;
8000092c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000930:	70 08       	ld.w	r8,r8[0x0]
80000932:	ef 48 ff f4 	st.w	r7[-12],r8
80000936:	c0 28       	rjmp	8000093a <readyQueueExtract+0x56>
		retval = 1;
	}
	else 
	{
		/* Search for delete task */
		while (thTmp->nexttcb != pth) 
80000938:	d7 03       	nop
8000093a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000093e:	70 09       	ld.w	r9,r8[0x0]
80000940:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000944:	10 39       	cp.w	r9,r8
80000946:	cf 31       	brne	8000092c <readyQueueExtract+0x48>
		{
			thTmp = thTmp->nexttcb;
		}
		
		/* Check whether the PA[priority] points to the deleted task or not */
		if (PA[priority] == pth)
80000948:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000094c:	48 f8       	lddpc	r8,80000988 <readyQueueExtract+0xa4>
8000094e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000952:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000956:	10 39       	cp.w	r9,r8
80000958:	c0 81       	brne	80000968 <readyQueueExtract+0x84>
		{
			/* Move PA[priority] pointer to the previous task in the queue */ 
			PA[priority] = thTmp;
8000095a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000095e:	48 b8       	lddpc	r8,80000988 <readyQueueExtract+0xa4>
80000960:	ee fa ff f4 	ld.w	r10,r7[-12]
80000964:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		}
		
		thTmp->nexttcb = pth->nexttcb;
80000968:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000096c:	70 09       	ld.w	r9,r8[0x0]
8000096e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000972:	91 09       	st.w	r8[0x0],r9
		
		retval = 0;
80000974:	30 08       	mov	r8,0
80000976:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return retval;
8000097a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000097e:	10 9c       	mov	r12,r8
80000980:	2f cd       	sub	sp,-16
80000982:	e3 cd 80 80 	ldm	sp++,r7,pc
80000986:	00 00       	add	r0,r0
80000988:	00 00       	add	r0,r0
8000098a:	06 24       	rsub	r4,r3

8000098c <readyQueueSearch>:
/** @fn int readyQueueSearch(void)
	@brief Search for the first non-empty highest priority queue.
	@return Pointer to the last tcb in the queue (in other words - PA[i]).
*/
ROSA_taskHandle_t readyQueueSearch(void)
{
8000098c:	eb cd 40 80 	pushm	r7,lr
80000990:	1a 97       	mov	r7,sp
80000992:	20 2d       	sub	sp,8
	int i = MAXNPRIO;
80000994:	30 c8       	mov	r8,12
80000996:	ef 48 ff f8 	st.w	r7[-8],r8
	tcb * rettcb;
	
	/* Search for the first non-empty queue. */
	while ( (PA[--i] == NULL) && (i > 0))
8000099a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000099e:	20 18       	sub	r8,1
800009a0:	ef 48 ff f8 	st.w	r7[-8],r8
800009a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009a8:	49 48       	lddpc	r8,800009f8 <readyQueueSearch+0x6c>
800009aa:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800009ae:	58 08       	cp.w	r8,0
800009b0:	c0 61       	brne	800009bc <readyQueueSearch+0x30>
800009b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009b6:	58 08       	cp.w	r8,0
800009b8:	fe 99 ff f1 	brgt	8000099a <readyQueueSearch+0xe>
	{
		;
	}
		
	/* Check the PA for emptiness. */
	if ((i == 0) && (PA[i] == NULL))
800009bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009c0:	58 08       	cp.w	r8,0
800009c2:	c0 d1       	brne	800009dc <readyQueueSearch+0x50>
800009c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009c8:	48 c8       	lddpc	r8,800009f8 <readyQueueSearch+0x6c>
800009ca:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800009ce:	58 08       	cp.w	r8,0
800009d0:	c0 61       	brne	800009dc <readyQueueSearch+0x50>
	{
		rettcb = IDLETASK;
800009d2:	48 b8       	lddpc	r8,800009fc <readyQueueSearch+0x70>
800009d4:	70 08       	ld.w	r8,r8[0x0]
800009d6:	ef 48 ff fc 	st.w	r7[-4],r8
	{
		;
	}
		
	/* Check the PA for emptiness. */
	if ((i == 0) && (PA[i] == NULL))
800009da:	c0 88       	rjmp	800009ea <readyQueueSearch+0x5e>
	{
		rettcb = IDLETASK;
	}
	else
	{
		rettcb = PA[i];
800009dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009e0:	48 68       	lddpc	r8,800009f8 <readyQueueSearch+0x6c>
800009e2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800009e6:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return rettcb;
800009ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800009ee:	10 9c       	mov	r12,r8
800009f0:	2f ed       	sub	sp,-8
800009f2:	e3 cd 80 80 	ldm	sp++,r7,pc
800009f6:	00 00       	add	r0,r0
800009f8:	00 00       	add	r0,r0
800009fa:	06 24       	rsub	r4,r3
800009fc:	00 00       	add	r0,r0
800009fe:	06 1c       	sub	r12,r3

80000a00 <ROSA_init>:

void ROSA_init(void)
{
80000a00:	eb cd 40 80 	pushm	r7,lr
80000a04:	1a 97       	mov	r7,sp
80000a06:	20 1d       	sub	sp,4
	int i = 0;
80000a08:	30 08       	mov	r8,0
80000a0a:	ef 48 ff fc 	st.w	r7[-4],r8
	systemTick = 0;
80000a0e:	4a 3a       	lddpc	r10,80000a98 <ROSA_init+0x98>
80000a10:	30 08       	mov	r8,0
80000a12:	30 09       	mov	r9,0
80000a14:	f4 e9 00 00 	st.d	r10[0],r8
	
	//Do initialization of I/O drivers
	ledInit();									//LEDs
80000a18:	f0 1f 00 21 	mcall	80000a9c <ROSA_init+0x9c>
	buttonInit();								//Buttons
80000a1c:	f0 1f 00 21 	mcall	80000aa0 <ROSA_init+0xa0>
	joystickInit();								//Joystick
80000a20:	f0 1f 00 21 	mcall	80000aa4 <ROSA_init+0xa4>
	potInit();									//Potentiometer
80000a24:	f0 1f 00 21 	mcall	80000aa8 <ROSA_init+0xa8>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
80000a28:	e0 6a 1b 00 	mov	r10,6912
80000a2c:	ea 1a 00 b7 	orh	r10,0xb7
80000a30:	49 fb       	lddpc	r11,80000aac <ROSA_init+0xac>
80000a32:	fe 7c 14 00 	mov	r12,-60416
80000a36:	f0 1f 00 1f 	mcall	80000ab0 <ROSA_init+0xb0>

	interruptInit();
80000a3a:	f0 1f 00 1f 	mcall	80000ab4 <ROSA_init+0xb4>
	interruptEnable();
80000a3e:	f0 1f 00 1f 	mcall	80000ab8 <ROSA_init+0xb8>
	timerInit(1);
80000a42:	30 1c       	mov	r12,1
80000a44:	f0 1f 00 1e 	mcall	80000abc <ROSA_init+0xbc>
	timerStart();
80000a48:	f0 1f 00 1e 	mcall	80000ac0 <ROSA_init+0xc0>
	
	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
80000a4c:	49 e8       	lddpc	r8,80000ac4 <ROSA_init+0xc4>
80000a4e:	30 09       	mov	r9,0
80000a50:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
80000a52:	49 e8       	lddpc	r8,80000ac8 <ROSA_init+0xc8>
80000a54:	30 09       	mov	r9,0
80000a56:	91 09       	st.w	r8[0x0],r9
	PREEMPTASK = NULL;
80000a58:	49 d8       	lddpc	r8,80000acc <ROSA_init+0xcc>
80000a5a:	30 09       	mov	r9,0
80000a5c:	91 09       	st.w	r8[0x0],r9
	LOCKEDSEMAPHORELIST=NULL;
80000a5e:	49 d8       	lddpc	r8,80000ad0 <ROSA_init+0xd0>
80000a60:	30 09       	mov	r9,0
80000a62:	91 09       	st.w	r8[0x0],r9
	
	/* Create idle task. */
	idleCreate();
80000a64:	f0 1f 00 1c 	mcall	80000ad4 <ROSA_init+0xd4>
	
	for (i = 0; i < MAXNPRIO; i++) {
80000a68:	30 08       	mov	r8,0
80000a6a:	ef 48 ff fc 	st.w	r7[-4],r8
80000a6e:	c0 c8       	rjmp	80000a86 <ROSA_init+0x86>
		PA[i] = NULL;
80000a70:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000a74:	49 98       	lddpc	r8,80000ad8 <ROSA_init+0xd8>
80000a76:	30 0a       	mov	r10,0
80000a78:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	LOCKEDSEMAPHORELIST=NULL;
	
	/* Create idle task. */
	idleCreate();
	
	for (i = 0; i < MAXNPRIO; i++) {
80000a7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a80:	2f f8       	sub	r8,-1
80000a82:	ef 48 ff fc 	st.w	r7[-4],r8
80000a86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a8a:	58 b8       	cp.w	r8,11
80000a8c:	fe 9a ff f2 	brle	80000a70 <ROSA_init+0x70>
		PA[i] = NULL;
	}
	
	//Initialize the timer to 1 ms period.
	
}
80000a90:	2f fd       	sub	sp,-4
80000a92:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a96:	00 00       	add	r0,r0
80000a98:	00 00       	add	r0,r0
80000a9a:	06 d4       	st.w	--r3,r4
80000a9c:	80 00       	ld.sh	r0,r0[0x0]
80000a9e:	13 54       	ld.sh	r4,--r9
80000aa0:	80 00       	ld.sh	r0,r0[0x0]
80000aa2:	11 ac       	ld.ub	r12,r8[0x2]
80000aa4:	80 00       	ld.sh	r0,r0[0x0]
80000aa6:	11 d4       	ld.ub	r4,r8[0x5]
80000aa8:	80 00       	ld.sh	r0,r0[0x0]
80000aaa:	14 20       	rsub	r0,r10
80000aac:	80 00       	ld.sh	r0,r0[0x0]
80000aae:	07 e0       	ld.ub	r0,r3[0x6]
80000ab0:	80 00       	ld.sh	r0,r0[0x0]
80000ab2:	15 d4       	ld.ub	r4,r10[0x5]
80000ab4:	80 00       	ld.sh	r0,r0[0x0]
80000ab6:	23 48       	sub	r8,52
80000ab8:	80 00       	ld.sh	r0,r0[0x0]
80000aba:	23 6a       	sub	r10,54
80000abc:	80 00       	ld.sh	r0,r0[0x0]
80000abe:	17 a4       	ld.ub	r4,r11[0x2]
80000ac0:	80 00       	ld.sh	r0,r0[0x0]
80000ac2:	17 d2       	ld.ub	r2,r11[0x5]
80000ac4:	00 00       	add	r0,r0
80000ac6:	06 20       	rsub	r0,r3
80000ac8:	00 00       	add	r0,r0
80000aca:	06 58       	eor	r8,r3
80000acc:	00 00       	add	r0,r0
80000ace:	06 54       	eor	r4,r3
80000ad0:	00 00       	add	r0,r0
80000ad2:	05 d0       	ld.ub	r0,r2[0x5]
80000ad4:	80 00       	ld.sh	r0,r0[0x0]
80000ad6:	08 18       	sub	r8,r4
80000ad8:	00 00       	add	r0,r0
80000ada:	06 24       	rsub	r4,r3

80000adc <ROSA_tcbCreate>:

void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
80000adc:	eb cd 40 80 	pushm	r7,lr
80000ae0:	1a 97       	mov	r7,sp
80000ae2:	20 6d       	sub	sp,24
80000ae4:	ef 4c ff f8 	st.w	r7[-8],r12
80000ae8:	ef 4b ff f4 	st.w	r7[-12],r11
80000aec:	ef 4a ff f0 	st.w	r7[-16],r10
80000af0:	ef 49 ff ec 	st.w	r7[-20],r9
80000af4:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000af8:	30 08       	mov	r8,0
80000afa:	ef 48 ff fc 	st.w	r7[-4],r8
80000afe:	c1 48       	rjmp	80000b26 <ROSA_tcbCreate+0x4a>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
80000b00:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000b04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b08:	ee fa ff f4 	ld.w	r10,r7[-12]
80000b0c:	f4 08 00 08 	add	r8,r10,r8
80000b10:	11 88       	ld.ub	r8,r8[0x0]
80000b12:	ee fa ff f8 	ld.w	r10,r7[-8]
80000b16:	f4 09 00 09 	add	r9,r10,r9
80000b1a:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000b1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b20:	2f f8       	sub	r8,-1
80000b22:	ef 48 ff fc 	st.w	r7[-4],r8
80000b26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b2a:	58 38       	cp.w	r8,3
80000b2c:	fe 9a ff ea 	brle	80000b00 <ROSA_tcbCreate+0x24>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
80000b30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b34:	30 09       	mov	r9,0
80000b36:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
80000b38:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000b3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b40:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
80000b42:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000b46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b4a:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
80000b4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b50:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000b54:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
80000b56:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000b5a:	a3 68       	lsl	r8,0x2
80000b5c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000b60:	10 09       	add	r9,r8
80000b62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b66:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
80000b68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b6c:	70 39       	ld.w	r9,r8[0xc]
80000b6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b72:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
80000b74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b78:	fc 19 00 1c 	movh	r9,0x1c
80000b7c:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
80000b7e:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b82:	f0 1f 00 03 	mcall	80000b8c <ROSA_tcbCreate+0xb0>
}
80000b86:	2f ad       	sub	sp,-24
80000b88:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b8c:	80 00       	ld.sh	r0,r0[0x0]
80000b8e:	0c b6       	st.h	r6++,r6

80000b90 <ROSA_taskCreate>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

int16_t ROSA_taskCreate(ROSA_taskHandle_t * pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
80000b90:	eb cd 40 80 	pushm	r7,lr
80000b94:	1a 97       	mov	r7,sp
80000b96:	20 6d       	sub	sp,24
80000b98:	ef 4c ff f8 	st.w	r7[-8],r12
80000b9c:	ef 4b ff f4 	st.w	r7[-12],r11
80000ba0:	ef 4a ff f0 	st.w	r7[-16],r10
80000ba4:	ef 49 ff ec 	st.w	r7[-20],r9
80000ba8:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) calloc(stackSize, sizeof(uint32_t)); 
80000bac:	30 4b       	mov	r11,4
80000bae:	ee fc ff ec 	ld.w	r12,r7[-20]
80000bb2:	f0 1f 00 2c 	mcall	80000c60 <ROSA_taskCreate+0xd0>
80000bb6:	18 98       	mov	r8,r12
80000bb8:	ef 48 ff fc 	st.w	r7[-4],r8
	
	*pth = (ROSA_taskHandle_t) malloc(sizeof(ROSA_taskHandle_t));			
80000bbc:	30 4c       	mov	r12,4
80000bbe:	f0 1f 00 2a 	mcall	80000c64 <ROSA_taskCreate+0xd4>
80000bc2:	18 98       	mov	r8,r12
80000bc4:	10 99       	mov	r9,r8
80000bc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bca:	91 09       	st.w	r8[0x0],r9
	(*pth)->priority = priority;
80000bcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bd0:	70 09       	ld.w	r9,r8[0x0]
80000bd2:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80000bd6:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
80000bda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bde:	70 0a       	ld.w	r10,r8[0x0]
80000be0:	30 08       	mov	r8,0
80000be2:	30 09       	mov	r9,0
80000be4:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
80000be8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bec:	70 09       	ld.w	r9,r8[0x0]
80000bee:	30 08       	mov	r8,0
80000bf0:	f3 68 00 70 	st.b	r9[112],r8
	(*pth)->originalPriority = priority;
80000bf4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bf8:	70 09       	ld.w	r9,r8[0x0]
80000bfa:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80000bfe:	f3 68 00 71 	st.b	r9[113],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
80000c02:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c06:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c0a:	72 0c       	ld.w	r12,r9[0x0]
80000c0c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000c10:	ee fa ff f0 	ld.w	r10,r7[-16]
80000c14:	ee fb ff f4 	ld.w	r11,r7[-12]
80000c18:	f0 1f 00 14 	mcall	80000c68 <ROSA_taskCreate+0xd8>
	
	readyQueueInsert(*pth);
80000c1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c20:	70 08       	ld.w	r8,r8[0x0]
80000c22:	10 9c       	mov	r12,r8
80000c24:	f0 1f 00 12 	mcall	80000c6c <ROSA_taskCreate+0xdc>
	
	if (EXECTASK != NULL) {
80000c28:	49 28       	lddpc	r8,80000c70 <ROSA_taskCreate+0xe0>
80000c2a:	70 08       	ld.w	r8,r8[0x0]
80000c2c:	58 08       	cp.w	r8,0
80000c2e:	c1 40       	breq	80000c56 <ROSA_taskCreate+0xc6>
		if (EXECTASK->priority < priority) {
80000c30:	49 08       	lddpc	r8,80000c70 <ROSA_taskCreate+0xe0>
80000c32:	70 08       	ld.w	r8,r8[0x0]
80000c34:	f1 38 00 64 	ld.ub	r8,r8[100]
80000c38:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000c3c:	f0 09 18 00 	cp.b	r9,r8
80000c40:	e0 88 00 0b 	brls	80000c56 <ROSA_taskCreate+0xc6>
			PREEMPTASK = PA[priority];
80000c44:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000c48:	48 b8       	lddpc	r8,80000c74 <ROSA_taskCreate+0xe4>
80000c4a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000c4e:	48 b8       	lddpc	r8,80000c78 <ROSA_taskCreate+0xe8>
80000c50:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
80000c52:	f0 1f 00 0b 	mcall	80000c7c <ROSA_taskCreate+0xec>
		}	
	}
	
	return 0;
80000c56:	30 08       	mov	r8,0
}
80000c58:	10 9c       	mov	r12,r8
80000c5a:	2f ad       	sub	sp,-24
80000c5c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c60:	80 00       	ld.sh	r0,r0[0x0]
80000c62:	18 dc       	st.w	--r12,r12
80000c64:	80 00       	ld.sh	r0,r0[0x0]
80000c66:	19 54       	ld.sh	r4,--r12
80000c68:	80 00       	ld.sh	r0,r0[0x0]
80000c6a:	0a dc       	st.w	--r5,r12
80000c6c:	80 00       	ld.sh	r0,r0[0x0]
80000c6e:	08 50       	eor	r0,r4
80000c70:	00 00       	add	r0,r0
80000c72:	06 58       	eor	r8,r3
80000c74:	00 00       	add	r0,r0
80000c76:	06 24       	rsub	r4,r3
80000c78:	00 00       	add	r0,r0
80000c7a:	06 54       	eor	r4,r3
80000c7c:	80 00       	ld.sh	r0,r0[0x0]
80000c7e:	0d 42       	ld.w	r2,--r6

80000c80 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80000c80:	4b 5c       	lddpc	r12,80000d54 <_yield+0xa>
	lda.w r11,EXECTASK
80000c82:	4b 6b       	lddpc	r11,80000d58 <_yield+0xe>
	ld.w r12,r12[0x0]
80000c84:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
80000c86:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000c88:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000c8a:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000c8c:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000c90:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
80000c92:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
80000c94:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
80000c96:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80000c9a:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000c9c:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80000c9e:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000ca0:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
80000ca2:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
80000ca4:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
80000ca6:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000ca8:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80000caa:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000cac:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000cae:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000cb0:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000cb2:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000cb4:	1c 9f       	mov	pc,lr

80000cb6 <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
80000cb6:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000cb8:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80000cba:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000cbc:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000cc0:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80000cc4:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000cc8:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000ccc:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000cd0:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000cd4:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000cd8:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000cdc:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000ce0:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
80000ce2:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80000ce4:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
80000ce6:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000ce8:	1c 9f       	mov	pc,lr

80000cea <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
80000cea:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000cec:	49 bc       	lddpc	r12,80000d58 <_yield+0xe>
	ld.w r12,r12[0x0]
80000cee:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000cf0:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
80000cf2:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
80000cf4:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
80000cf6:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
80000cf8:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
80000cfa:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
80000cfc:	33 40       	mov	r0,52
	add r0,r12
80000cfe:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000d00:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80000d04:	1a 90       	mov	r0,sp
	st.w --sp,r0
80000d06:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80000d08:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
80000d0c:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
80000d0e:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80000d10:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
80000d12:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
80000d14:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
80000d16:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80000d18:	1c 9f       	mov	pc,lr

80000d1a <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000d1a:	49 0c       	lddpc	r12,80000d58 <_yield+0xe>
	ld.w r12,r12[0x0]
80000d1c:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
80000d1e:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000d20:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
80000d22:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
80000d26:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80000d28:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80000d2a:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
80000d2c:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80000d2e:	33 40       	mov	r0,52
	add r0,r12
80000d30:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80000d32:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80000d36:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000d38:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80000d3a:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80000d3c:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000d3e:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80000d40:	d6 13       	rets

80000d42 <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
80000d42:	d4 01       	pushm	lr
	lda.w lr,_yield
80000d44:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000d48:	d7 33       	scall

80000d4a <_yield>:
_yield:
	call contextSave
80000d4a:	cd 0f       	rcall	80000cea <contextSave>
	call scheduler
80000d4c:	f0 1f 00 04 	mcall	80000d5c <_yield+0x12>
	call contextRestore
80000d50:	ce 5f       	rcall	80000d1a <contextRestore>
80000d52:	00 00       	add	r0,r0
80000d54:	00 00       	add	r0,r0
80000d56:	06 20       	rsub	r0,r3
80000d58:	00 00       	add	r0,r0
80000d5a:	06 58       	eor	r8,r3
80000d5c:	80 00       	ld.sh	r0,r0[0x0]
80000d5e:	0d 60       	ld.uh	r0,--r6

80000d60 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000d60:	eb cd 40 80 	pushm	r7,lr
80000d64:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK == NULL) {
80000d66:	49 28       	lddpc	r8,80000dac <scheduler+0x4c>
80000d68:	70 08       	ld.w	r8,r8[0x0]
80000d6a:	58 08       	cp.w	r8,0
80000d6c:	c1 61       	brne	80000d98 <scheduler+0x38>
		PA[EXECTASK->priority] = EXECTASK;
80000d6e:	49 18       	lddpc	r8,80000db0 <scheduler+0x50>
80000d70:	70 08       	ld.w	r8,r8[0x0]
80000d72:	f1 38 00 64 	ld.ub	r8,r8[100]
80000d76:	10 99       	mov	r9,r8
80000d78:	48 e8       	lddpc	r8,80000db0 <scheduler+0x50>
80000d7a:	70 0a       	ld.w	r10,r8[0x0]
80000d7c:	48 e8       	lddpc	r8,80000db4 <scheduler+0x54>
80000d7e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		if (EXECTASK->nexttcb != NULL)
80000d82:	48 c8       	lddpc	r8,80000db0 <scheduler+0x50>
80000d84:	70 08       	ld.w	r8,r8[0x0]
80000d86:	70 08       	ld.w	r8,r8[0x0]
80000d88:	58 08       	cp.w	r8,0
80000d8a:	c0 e0       	breq	80000da6 <scheduler+0x46>
		{
			EXECTASK = EXECTASK->nexttcb;
80000d8c:	48 98       	lddpc	r8,80000db0 <scheduler+0x50>
80000d8e:	70 08       	ld.w	r8,r8[0x0]
80000d90:	70 09       	ld.w	r9,r8[0x0]
80000d92:	48 88       	lddpc	r8,80000db0 <scheduler+0x50>
80000d94:	91 09       	st.w	r8[0x0],r9
80000d96:	c0 88       	rjmp	80000da6 <scheduler+0x46>
		}
	}
	else {
		EXECTASK = PREEMPTASK;
80000d98:	48 58       	lddpc	r8,80000dac <scheduler+0x4c>
80000d9a:	70 09       	ld.w	r9,r8[0x0]
80000d9c:	48 58       	lddpc	r8,80000db0 <scheduler+0x50>
80000d9e:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
80000da0:	48 38       	lddpc	r8,80000dac <scheduler+0x4c>
80000da2:	30 09       	mov	r9,0
80000da4:	91 09       	st.w	r8[0x0],r9
	}
}
80000da6:	e3 cd 80 80 	ldm	sp++,r7,pc
80000daa:	00 00       	add	r0,r0
80000dac:	00 00       	add	r0,r0
80000dae:	06 54       	eor	r4,r3
80000db0:	00 00       	add	r0,r0
80000db2:	06 58       	eor	r8,r3
80000db4:	00 00       	add	r0,r0
80000db6:	06 24       	rsub	r4,r3

80000db8 <ROSA_startScheduler>:

void ROSA_startScheduler(void)
{
80000db8:	eb cd 40 80 	pushm	r7,lr
80000dbc:	1a 97       	mov	r7,sp
80000dbe:	20 1d       	sub	sp,4
	tcb * tmp = readyQueueSearch();	
80000dc0:	f0 1f 00 08 	mcall	80000de0 <ROSA_startScheduler+0x28>
80000dc4:	18 98       	mov	r8,r12
80000dc6:	ef 48 ff fc 	st.w	r7[-4],r8
	
	TCBLIST = tmp->nexttcb;
80000dca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dce:	70 09       	ld.w	r9,r8[0x0]
80000dd0:	48 58       	lddpc	r8,80000de4 <ROSA_startScheduler+0x2c>
80000dd2:	91 09       	st.w	r8[0x0],r9
	
	ROSA_start();
80000dd4:	f0 1f 00 05 	mcall	80000de8 <ROSA_startScheduler+0x30>
}
80000dd8:	2f fd       	sub	sp,-4
80000dda:	e3 cd 80 80 	ldm	sp++,r7,pc
80000dde:	00 00       	add	r0,r0
80000de0:	80 00       	ld.sh	r0,r0[0x0]
80000de2:	09 8c       	ld.ub	r12,r4[0x0]
80000de4:	00 00       	add	r0,r0
80000de6:	06 20       	rsub	r0,r3
80000de8:	80 00       	ld.sh	r0,r0[0x0]
80000dea:	0c 80       	andn	r0,r6

80000dec <C.18.9634>:
80000dec:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000dfc <insertDelayQueue>:
/* param pth: pointer to the task to be inserted in the delay queue		*/
/* param deadline: integer with the number of ticks at which the task	*/
/* needs to be woken up													*/
/************************************************************************/
int insertDelayQueue(ROSA_taskHandle_t pth, uint64_t deadline)
{
80000dfc:	eb cd 40 80 	pushm	r7,lr
80000e00:	1a 97       	mov	r7,sp
80000e02:	20 5d       	sub	sp,20
80000e04:	ef 4c ff f4 	st.w	r7[-12],r12
80000e08:	ee eb ff ec 	st.d	r7[-20],r10
	pth->delay = deadline;
80000e0c:	ee fa ff f4 	ld.w	r10,r7[-12]
80000e10:	ee e8 ff ec 	ld.d	r8,r7[-20]
80000e14:	f4 e9 00 68 	st.d	r10[104],r8
	
	if (DELAYQUEUE == NULL) {
80000e18:	4a f8       	lddpc	r8,80000ed4 <insertDelayQueue+0xd8>
80000e1a:	70 08       	ld.w	r8,r8[0x0]
80000e1c:	58 08       	cp.w	r8,0
80000e1e:	c0 b1       	brne	80000e34 <insertDelayQueue+0x38>
		DELAYQUEUE = pth;
80000e20:	4a d8       	lddpc	r8,80000ed4 <insertDelayQueue+0xd8>
80000e22:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000e26:	91 09       	st.w	r8[0x0],r9
		DELAYQUEUE->nexttcb = NULL;
80000e28:	4a b8       	lddpc	r8,80000ed4 <insertDelayQueue+0xd8>
80000e2a:	70 08       	ld.w	r8,r8[0x0]
80000e2c:	30 09       	mov	r9,0
80000e2e:	91 09       	st.w	r8[0x0],r9
		return 0;
80000e30:	30 08       	mov	r8,0
80000e32:	c4 d8       	rjmp	80000ecc <insertDelayQueue+0xd0>
	}
	
	ROSA_taskHandle_t next = DELAYQUEUE;
80000e34:	4a 88       	lddpc	r8,80000ed4 <insertDelayQueue+0xd8>
80000e36:	70 08       	ld.w	r8,r8[0x0]
80000e38:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_taskHandle_t prev;

	// While the next task in the list has an earlier deadline or higher priority and an equal deadline, move down the list
	while (next->delay <= pth->delay || (next->priority >= pth->priority && next->delay == pth->delay))
80000e3c:	c1 98       	rjmp	80000e6e <insertDelayQueue+0x72>
	{
		prev = next;
80000e3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e42:	ef 48 ff fc 	st.w	r7[-4],r8
		next = next->nexttcb;
80000e46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e4a:	70 08       	ld.w	r8,r8[0x0]
80000e4c:	ef 48 ff f8 	st.w	r7[-8],r8
		
		// Reach the end of the list
		if (next == NULL) {
80000e50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e54:	58 08       	cp.w	r8,0
80000e56:	c0 c1       	brne	80000e6e <insertDelayQueue+0x72>
			prev->nexttcb = pth;
80000e58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e5c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000e60:	91 09       	st.w	r8[0x0],r9
			pth->nexttcb = NULL;
80000e62:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e66:	30 09       	mov	r9,0
80000e68:	91 09       	st.w	r8[0x0],r9
			return 0;
80000e6a:	30 08       	mov	r8,0
80000e6c:	c3 08       	rjmp	80000ecc <insertDelayQueue+0xd0>
	
	ROSA_taskHandle_t next = DELAYQUEUE;
	ROSA_taskHandle_t prev;

	// While the next task in the list has an earlier deadline or higher priority and an equal deadline, move down the list
	while (next->delay <= pth->delay || (next->priority >= pth->priority && next->delay == pth->delay))
80000e6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e72:	f0 ea 00 68 	ld.d	r10,r8[104]
80000e76:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e7a:	f0 e8 00 68 	ld.d	r8,r8[104]
80000e7e:	10 3a       	cp.w	r10,r8
80000e80:	f2 0b 13 00 	cpc	r11,r9
80000e84:	fe 98 ff dd 	brls	80000e3e <insertDelayQueue+0x42>
80000e88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e8c:	f1 39 00 64 	ld.ub	r9,r8[100]
80000e90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e94:	f1 38 00 64 	ld.ub	r8,r8[100]
80000e98:	f0 09 18 00 	cp.b	r9,r8
80000e9c:	c0 d3       	brcs	80000eb6 <insertDelayQueue+0xba>
80000e9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ea2:	f0 ea 00 68 	ld.d	r10,r8[104]
80000ea6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000eaa:	f0 e8 00 68 	ld.d	r8,r8[104]
80000eae:	10 3a       	cp.w	r10,r8
80000eb0:	f2 0b 13 00 	cpc	r11,r9
80000eb4:	cc 50       	breq	80000e3e <insertDelayQueue+0x42>
			pth->nexttcb = NULL;
			return 0;
		}
	}
	
	pth->nexttcb = next;
80000eb6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000eba:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ebe:	91 09       	st.w	r8[0x0],r9
	prev->nexttcb = pth;
80000ec0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ec4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000ec8:	91 09       	st.w	r8[0x0],r9
	return 0;
80000eca:	30 08       	mov	r8,0
}
80000ecc:	10 9c       	mov	r12,r8
80000ece:	2f bd       	sub	sp,-20
80000ed0:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ed4:	00 00       	add	r0,r0
80000ed6:	06 d0       	st.w	--r3,r0

80000ed8 <removeDelayQueue>:
/*																		*/
/* Removes the given task from the delay queue							*/
/* Param pth: pointer to the task to be removed from the delay queue	*/
/************************************************************************/
int removeDelayQueue(ROSA_taskHandle_t pth)
{
80000ed8:	eb cd 40 80 	pushm	r7,lr
80000edc:	1a 97       	mov	r7,sp
80000ede:	20 3d       	sub	sp,12
80000ee0:	ef 4c ff f4 	st.w	r7[-12],r12
	// If there are no tasks in the delay queue, return error code -1
	if (DELAYQUEUE == NULL)
80000ee4:	4a 38       	lddpc	r8,80000f70 <removeDelayQueue+0x98>
80000ee6:	70 08       	ld.w	r8,r8[0x0]
80000ee8:	58 08       	cp.w	r8,0
80000eea:	c0 31       	brne	80000ef0 <removeDelayQueue+0x18>
	{
		return -1;
80000eec:	3f f8       	mov	r8,-1
80000eee:	c3 c8       	rjmp	80000f66 <removeDelayQueue+0x8e>
	}
	// If there is only one task in the status queue and this is pth, remove it from the queue
	if (DELAYQUEUE->id == pth->id)
80000ef0:	4a 08       	lddpc	r8,80000f70 <removeDelayQueue+0x98>
80000ef2:	70 09       	ld.w	r9,r8[0x0]
80000ef4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ef8:	10 39       	cp.w	r9,r8
80000efa:	c1 11       	brne	80000f1c <removeDelayQueue+0x44>
	{
		if (DELAYQUEUE->nexttcb == NULL)
80000efc:	49 d8       	lddpc	r8,80000f70 <removeDelayQueue+0x98>
80000efe:	70 08       	ld.w	r8,r8[0x0]
80000f00:	70 08       	ld.w	r8,r8[0x0]
80000f02:	58 08       	cp.w	r8,0
80000f04:	c0 51       	brne	80000f0e <removeDelayQueue+0x36>
		{
			DELAYQUEUE = NULL; // Task was the only one in the list
80000f06:	49 b8       	lddpc	r8,80000f70 <removeDelayQueue+0x98>
80000f08:	30 09       	mov	r9,0
80000f0a:	91 09       	st.w	r8[0x0],r9
80000f0c:	c0 68       	rjmp	80000f18 <removeDelayQueue+0x40>
			} else {
			DELAYQUEUE = pth->nexttcb;
80000f0e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f12:	70 09       	ld.w	r9,r8[0x0]
80000f14:	49 78       	lddpc	r8,80000f70 <removeDelayQueue+0x98>
80000f16:	91 09       	st.w	r8[0x0],r9
		}
		return 0;
80000f18:	30 08       	mov	r8,0
80000f1a:	c2 68       	rjmp	80000f66 <removeDelayQueue+0x8e>
	}
	// Else, find the task before pth and point it to the task after pth, removing it
	ROSA_taskHandle_t next = DELAYQUEUE;
80000f1c:	49 58       	lddpc	r8,80000f70 <removeDelayQueue+0x98>
80000f1e:	70 08       	ld.w	r8,r8[0x0]
80000f20:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_taskHandle_t prev;
	while (next->id != pth->id)
80000f24:	c1 08       	rjmp	80000f44 <removeDelayQueue+0x6c>
	{
		prev = next;
80000f26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f2a:	ef 48 ff fc 	st.w	r7[-4],r8
		next = next->nexttcb;
80000f2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f32:	70 08       	ld.w	r8,r8[0x0]
80000f34:	ef 48 ff f8 	st.w	r7[-8],r8
		if(next == NULL)
80000f38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f3c:	58 08       	cp.w	r8,0
80000f3e:	c0 31       	brne	80000f44 <removeDelayQueue+0x6c>
		{
			return -1; //Task is not in the list, so return error code -1
80000f40:	3f f8       	mov	r8,-1
80000f42:	c1 28       	rjmp	80000f66 <removeDelayQueue+0x8e>
		return 0;
	}
	// Else, find the task before pth and point it to the task after pth, removing it
	ROSA_taskHandle_t next = DELAYQUEUE;
	ROSA_taskHandle_t prev;
	while (next->id != pth->id)
80000f44:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f48:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f4c:	10 39       	cp.w	r9,r8
80000f4e:	ce c1       	brne	80000f26 <removeDelayQueue+0x4e>
		if(next == NULL)
		{
			return -1; //Task is not in the list, so return error code -1
		}
	}
	prev->nexttcb = next->nexttcb;
80000f50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f54:	70 09       	ld.w	r9,r8[0x0]
80000f56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f5a:	91 09       	st.w	r8[0x0],r9
	next->nexttcb = NULL;
80000f5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f60:	30 09       	mov	r9,0
80000f62:	91 09       	st.w	r8[0x0],r9
	return 0;
80000f64:	30 08       	mov	r8,0
}
80000f66:	10 9c       	mov	r12,r8
80000f68:	2f dd       	sub	sp,-12
80000f6a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f6e:	00 00       	add	r0,r0
80000f70:	00 00       	add	r0,r0
80000f72:	06 d0       	st.w	--r3,r0

80000f74 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000f74:	eb cd 40 80 	pushm	r7,lr
80000f78:	1a 97       	mov	r7,sp
80000f7a:	20 5d       	sub	sp,20
	interruptDisable();
80000f7c:	f0 1f 00 36 	mcall	80001054 <timerISR+0xe0>
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000f80:	fe 78 38 00 	mov	r8,-51200
80000f84:	ef 48 ff f0 	st.w	r7[-16],r8
	ROSA_taskHandle_t tmptsk;
	ROSA_taskHandle_t tmp;
	bool interruptTask;
	
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000f88:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f8c:	70 88       	ld.w	r8,r8[0x20]
80000f8e:	ef 48 ff ec 	st.w	r7[-20],r8
	if (sr & AVR32_TC_CPCS_MASK)
80000f92:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000f96:	e2 18 00 10 	andl	r8,0x10,COH
80000f9a:	c5 60       	breq	80001046 <timerISR+0xd2>
	{
		systemTick++;
80000f9c:	4a f8       	lddpc	r8,80001058 <timerISR+0xe4>
80000f9e:	f0 ea 00 00 	ld.d	r10,r8[0]
80000fa2:	30 18       	mov	r8,1
80000fa4:	30 09       	mov	r9,0
80000fa6:	f4 08 00 08 	add	r8,r10,r8
80000faa:	f6 09 00 49 	adc	r9,r11,r9
80000fae:	4a ba       	lddpc	r10,80001058 <timerISR+0xe4>
80000fb0:	f4 e9 00 00 	st.d	r10[0],r8
		interruptTask = false;
80000fb4:	30 08       	mov	r8,0
80000fb6:	ef 68 ff ff 	st.b	r7[-1],r8
		
		while (DELAYQUEUE != NULL && DELAYQUEUE->delay <= systemTick)
80000fba:	c1 78       	rjmp	80000fe8 <timerISR+0x74>
		{
			tmptsk = DELAYQUEUE;
80000fbc:	4a 88       	lddpc	r8,8000105c <timerISR+0xe8>
80000fbe:	70 08       	ld.w	r8,r8[0x0]
80000fc0:	ef 48 ff f4 	st.w	r7[-12],r8
			removeDelayQueue(DELAYQUEUE);
80000fc4:	4a 68       	lddpc	r8,8000105c <timerISR+0xe8>
80000fc6:	70 08       	ld.w	r8,r8[0x0]
80000fc8:	10 9c       	mov	r12,r8
80000fca:	f0 1f 00 26 	mcall	80001060 <timerISR+0xec>
			tmptsk->delay = 0;
80000fce:	ee fa ff f4 	ld.w	r10,r7[-12]
80000fd2:	30 08       	mov	r8,0
80000fd4:	30 09       	mov	r9,0
80000fd6:	f4 e9 00 68 	st.d	r10[104],r8
			readyQueueInsert(tmptsk);
80000fda:	ee fc ff f4 	ld.w	r12,r7[-12]
80000fde:	f0 1f 00 22 	mcall	80001064 <timerISR+0xf0>
			interruptTask = true;
80000fe2:	30 18       	mov	r8,1
80000fe4:	ef 68 ff ff 	st.b	r7[-1],r8
	if (sr & AVR32_TC_CPCS_MASK)
	{
		systemTick++;
		interruptTask = false;
		
		while (DELAYQUEUE != NULL && DELAYQUEUE->delay <= systemTick)
80000fe8:	49 d8       	lddpc	r8,8000105c <timerISR+0xe8>
80000fea:	70 08       	ld.w	r8,r8[0x0]
80000fec:	58 08       	cp.w	r8,0
80000fee:	c0 d0       	breq	80001008 <timerISR+0x94>
80000ff0:	49 b8       	lddpc	r8,8000105c <timerISR+0xe8>
80000ff2:	70 08       	ld.w	r8,r8[0x0]
80000ff4:	f0 ea 00 68 	ld.d	r10,r8[104]
80000ff8:	49 88       	lddpc	r8,80001058 <timerISR+0xe4>
80000ffa:	f0 e8 00 00 	ld.d	r8,r8[0]
80000ffe:	10 3a       	cp.w	r10,r8
80001000:	f2 0b 13 00 	cpc	r11,r9
80001004:	fe 98 ff dc 	brls	80000fbc <timerISR+0x48>
			removeDelayQueue(DELAYQUEUE);
			tmptsk->delay = 0;
			readyQueueInsert(tmptsk);
			interruptTask = true;
		}
		if (interruptTask)
80001008:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000100c:	30 08       	mov	r8,0
8000100e:	f0 09 18 00 	cp.b	r9,r8
80001012:	c1 a0       	breq	80001046 <timerISR+0xd2>
		{
			tmp = readyQueueSearch();
80001014:	f0 1f 00 15 	mcall	80001068 <timerISR+0xf4>
80001018:	18 98       	mov	r8,r12
8000101a:	ef 48 ff f8 	st.w	r7[-8],r8
			if (EXECTASK->priority < tmptsk->priority)
8000101e:	49 48       	lddpc	r8,8000106c <timerISR+0xf8>
80001020:	70 08       	ld.w	r8,r8[0x0]
80001022:	f1 39 00 64 	ld.ub	r9,r8[100]
80001026:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000102a:	f1 38 00 64 	ld.ub	r8,r8[100]
8000102e:	f0 09 18 00 	cp.b	r9,r8
80001032:	c0 a2       	brcc	80001046 <timerISR+0xd2>
			{
				PREEMPTASK = tmp->nexttcb;
80001034:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001038:	70 09       	ld.w	r9,r8[0x0]
8000103a:	48 e8       	lddpc	r8,80001070 <timerISR+0xfc>
8000103c:	91 09       	st.w	r8[0x0],r9
				interruptEnable();
8000103e:	f0 1f 00 0e 	mcall	80001074 <timerISR+0x100>
				ROSA_yieldFromISR();
80001042:	f0 1f 00 0e 	mcall	80001078 <timerISR+0x104>
			}
		}
	}
	//timerClearInterrupt(); //Disabled until we know what it actually does
	interruptEnable();
80001046:	f0 1f 00 0c 	mcall	80001074 <timerISR+0x100>
}
8000104a:	2f bd       	sub	sp,-20
8000104c:	e3 cd 40 80 	ldm	sp++,r7,lr
80001050:	d6 03       	rete
80001052:	00 00       	add	r0,r0
80001054:	80 00       	ld.sh	r0,r0[0x0]
80001056:	23 66       	sub	r6,54
80001058:	00 00       	add	r0,r0
8000105a:	06 d4       	st.w	--r3,r4
8000105c:	00 00       	add	r0,r0
8000105e:	06 d0       	st.w	--r3,r0
80001060:	80 00       	ld.sh	r0,r0[0x0]
80001062:	0e d8       	st.w	--r7,r8
80001064:	80 00       	ld.sh	r0,r0[0x0]
80001066:	08 50       	eor	r0,r4
80001068:	80 00       	ld.sh	r0,r0[0x0]
8000106a:	09 8c       	ld.ub	r12,r4[0x0]
8000106c:	00 00       	add	r0,r0
8000106e:	06 58       	eor	r8,r3
80001070:	00 00       	add	r0,r0
80001072:	06 54       	eor	r4,r3
80001074:	80 00       	ld.sh	r0,r0[0x0]
80001076:	23 6a       	sub	r10,54
80001078:	80 00       	ld.sh	r0,r0[0x0]
8000107a:	07 bc       	ld.ub	r12,r3[0x3]

8000107c <ROSA_getTickCount>:
/*																		*/
/* Returns the current number of system ticks, relative to start		*/
/* of the system.                                                       */
/************************************************************************/
uint64_t ROSA_getTickCount()
{
8000107c:	eb cd 40 80 	pushm	r7,lr
80001080:	1a 97       	mov	r7,sp
	return systemTick;
80001082:	48 48       	lddpc	r8,80001090 <ROSA_getTickCount+0x14>
80001084:	f0 e8 00 00 	ld.d	r8,r8[0]
}
80001088:	10 9a       	mov	r10,r8
8000108a:	12 9b       	mov	r11,r9
8000108c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001090:	00 00       	add	r0,r0
80001092:	06 d4       	st.w	--r3,r4

80001094 <ROSA_delay>:
/* ROSA_delay()															*/
/*																		*/
/* Suspends the calling task for the given number of ticks				*/
/************************************************************************/
int16_t ROSA_delay(uint64_t ticks)
{
80001094:	eb cd 40 80 	pushm	r7,lr
80001098:	1a 97       	mov	r7,sp
8000109a:	20 3d       	sub	sp,12
8000109c:	ee eb ff f4 	st.d	r7[-12],r10
	readyQueueExtract(EXECTASK);
800010a0:	49 28       	lddpc	r8,800010e8 <ROSA_delay+0x54>
800010a2:	70 08       	ld.w	r8,r8[0x0]
800010a4:	10 9c       	mov	r12,r8
800010a6:	f0 1f 00 12 	mcall	800010ec <ROSA_delay+0x58>
	insertDelayQueue(EXECTASK, ROSA_getTickCount() + ticks);
800010aa:	f0 1f 00 12 	mcall	800010f0 <ROSA_delay+0x5c>
800010ae:	ee e8 ff f4 	ld.d	r8,r7[-12]
800010b2:	f4 08 00 08 	add	r8,r10,r8
800010b6:	f6 09 00 49 	adc	r9,r11,r9
800010ba:	48 ca       	lddpc	r10,800010e8 <ROSA_delay+0x54>
800010bc:	74 0c       	ld.w	r12,r10[0x0]
800010be:	10 9a       	mov	r10,r8
800010c0:	12 9b       	mov	r11,r9
800010c2:	f0 1f 00 0d 	mcall	800010f4 <ROSA_delay+0x60>
	tcb * tmp = readyQueueSearch();
800010c6:	f0 1f 00 0d 	mcall	800010f8 <ROSA_delay+0x64>
800010ca:	18 98       	mov	r8,r12
800010cc:	ef 48 ff fc 	st.w	r7[-4],r8
	if (tmp->priority >= 0)
	{
		PREEMPTASK = tmp;
800010d0:	48 b8       	lddpc	r8,800010fc <ROSA_delay+0x68>
800010d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800010d6:	91 09       	st.w	r8[0x0],r9
	} else {
		return -1;
	}
	ROSA_yield();
800010d8:	f0 1f 00 0a 	mcall	80001100 <ROSA_delay+0x6c>
	return 0;
800010dc:	30 08       	mov	r8,0
}
800010de:	10 9c       	mov	r12,r8
800010e0:	2f dd       	sub	sp,-12
800010e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800010e6:	00 00       	add	r0,r0
800010e8:	00 00       	add	r0,r0
800010ea:	06 58       	eor	r8,r3
800010ec:	80 00       	ld.sh	r0,r0[0x0]
800010ee:	08 e4       	st.h	--r4,r4
800010f0:	80 00       	ld.sh	r0,r0[0x0]
800010f2:	10 7c       	tst	r12,r8
800010f4:	80 00       	ld.sh	r0,r0[0x0]
800010f6:	0d fc       	ld.ub	r12,r6[0x7]
800010f8:	80 00       	ld.sh	r0,r0[0x0]
800010fa:	09 8c       	ld.ub	r12,r4[0x0]
800010fc:	00 00       	add	r0,r0
800010fe:	06 54       	eor	r4,r3
80001100:	80 00       	ld.sh	r0,r0[0x0]
80001102:	0d 42       	ld.w	r2,--r6

80001104 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80001104:	eb cd 40 80 	pushm	r7,lr
80001108:	1a 97       	mov	r7,sp
8000110a:	20 7d       	sub	sp,28
8000110c:	ef 4c ff e4 	st.w	r7[-28],r12
	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80001110:	4a 48       	lddpc	r8,800011a0 <timerPeriodSet+0x9c>
80001112:	ee ca 00 18 	sub	r10,r7,24
80001116:	10 9b       	mov	r11,r8
80001118:	f6 e8 00 00 	ld.d	r8,r11[0]
8000111c:	f4 e9 00 00 	st.d	r10[0],r8
80001120:	f6 e8 00 08 	ld.d	r8,r11[8]
80001124:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80001128:	30 48       	mov	r8,4
8000112a:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
8000112e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001132:	20 18       	sub	r8,1
80001134:	a3 68       	lsl	r8,0x2
80001136:	ee 08 00 08 	add	r8,r7,r8
8000113a:	f0 f9 ff e8 	ld.w	r9,r8[-24]
8000113e:	e0 68 1b 00 	mov	r8,6912
80001142:	ea 18 00 b7 	orh	r8,0xb7
80001146:	f0 09 0c 08 	divs	r8,r8,r9
8000114a:	10 99       	mov	r9,r8
8000114c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001150:	b1 39       	mul	r9,r8
80001152:	e0 68 4d d3 	mov	r8,19923
80001156:	ea 18 10 62 	orh	r8,0x1062
8000115a:	f2 08 06 48 	mulu.d	r8,r9,r8
8000115e:	f2 08 16 06 	lsr	r8,r9,0x6
80001162:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80001166:	ee fc ff fc 	ld.w	r12,r7[-4]
8000116a:	f0 1f 00 0f 	mcall	800011a4 <timerPeriodSet+0xa0>
	timerRCSet(rc);
8000116e:	ee fc ff f8 	ld.w	r12,r7[-8]
80001172:	f0 1f 00 0e 	mcall	800011a8 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80001176:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000117a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000117e:	f2 08 02 4a 	mul	r10,r9,r8
80001182:	e0 68 9f 81 	mov	r8,40833
80001186:	ea 18 16 5e 	orh	r8,0x165e
8000118a:	f4 08 04 48 	muls.d	r8,r10,r8
8000118e:	b5 49       	asr	r9,0x14
80001190:	f4 08 14 1f 	asr	r8,r10,0x1f
80001194:	f2 08 01 08 	sub	r8,r9,r8
}
80001198:	10 9c       	mov	r12,r8
8000119a:	2f 9d       	sub	sp,-28
8000119c:	e3 cd 80 80 	ldm	sp++,r7,pc
800011a0:	80 00       	ld.sh	r0,r0[0x0]
800011a2:	0d ec       	ld.ub	r12,r6[0x6]
800011a4:	80 00       	ld.sh	r0,r0[0x0]
800011a6:	18 18       	sub	r8,r12
800011a8:	80 00       	ld.sh	r0,r0[0x0]
800011aa:	18 02       	add	r2,r12

800011ac <buttonInit>:
800011ac:	eb cd 40 80 	pushm	r7,lr
800011b0:	1a 97       	mov	r7,sp
800011b2:	30 1b       	mov	r11,1
800011b4:	35 8c       	mov	r12,88
800011b6:	f0 1f 00 07 	mcall	800011d0 <buttonInit+0x24>
800011ba:	30 1b       	mov	r11,1
800011bc:	35 5c       	mov	r12,85
800011be:	f0 1f 00 05 	mcall	800011d0 <buttonInit+0x24>
800011c2:	30 1b       	mov	r11,1
800011c4:	35 2c       	mov	r12,82
800011c6:	f0 1f 00 03 	mcall	800011d0 <buttonInit+0x24>
800011ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800011ce:	00 00       	add	r0,r0
800011d0:	80 00       	ld.sh	r0,r0[0x0]
800011d2:	12 0c       	add	r12,r9

800011d4 <joystickInit>:
800011d4:	eb cd 40 80 	pushm	r7,lr
800011d8:	1a 97       	mov	r7,sp
800011da:	30 1b       	mov	r11,1
800011dc:	31 bc       	mov	r12,27
800011de:	f0 1f 00 0b 	mcall	80001208 <joystickInit+0x34>
800011e2:	30 1b       	mov	r11,1
800011e4:	31 9c       	mov	r12,25
800011e6:	f0 1f 00 09 	mcall	80001208 <joystickInit+0x34>
800011ea:	30 1b       	mov	r11,1
800011ec:	31 cc       	mov	r12,28
800011ee:	f0 1f 00 07 	mcall	80001208 <joystickInit+0x34>
800011f2:	30 1b       	mov	r11,1
800011f4:	31 4c       	mov	r12,20
800011f6:	f0 1f 00 05 	mcall	80001208 <joystickInit+0x34>
800011fa:	30 1b       	mov	r11,1
800011fc:	31 ac       	mov	r12,26
800011fe:	f0 1f 00 03 	mcall	80001208 <joystickInit+0x34>
80001202:	e3 cd 80 80 	ldm	sp++,r7,pc
80001206:	00 00       	add	r0,r0
80001208:	80 00       	ld.sh	r0,r0[0x0]
8000120a:	12 0c       	add	r12,r9

8000120c <gpioInit>:
8000120c:	eb cd 40 80 	pushm	r7,lr
80001210:	1a 97       	mov	r7,sp
80001212:	20 7d       	sub	sp,28
80001214:	ef 4c ff ec 	st.w	r7[-20],r12
80001218:	ef 4b ff e8 	st.w	r7[-24],r11
8000121c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001220:	a5 58       	asr	r8,0x5
80001222:	ef 48 ff f4 	st.w	r7[-12],r8
80001226:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000122a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000122e:	ef 48 ff fc 	st.w	r7[-4],r8
80001232:	30 19       	mov	r9,1
80001234:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001238:	f2 08 09 48 	lsl	r8,r9,r8
8000123c:	ef 48 ff f8 	st.w	r7[-8],r8
80001240:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001244:	a9 68       	lsl	r8,0x8
80001246:	e0 28 f0 00 	sub	r8,61440
8000124a:	ef 48 ff f0 	st.w	r7[-16],r8
8000124e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001252:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001256:	91 19       	st.w	r8[0x4],r9
80001258:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000125c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001260:	91 69       	st.w	r8[0x18],r9
80001262:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001266:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000126a:	91 a9       	st.w	r8[0x28],r9
8000126c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001270:	ef 48 ff e4 	st.w	r7[-28],r8
80001274:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001278:	58 08       	cp.w	r8,0
8000127a:	c0 60       	breq	80001286 <gpioInit+0x7a>
8000127c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001280:	58 18       	cp.w	r8,1
80001282:	c0 90       	breq	80001294 <gpioInit+0x88>
80001284:	c0 f8       	rjmp	800012a2 <gpioInit+0x96>
80001286:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000128a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000128e:	f1 49 00 44 	st.w	r8[68],r9
80001292:	c0 e8       	rjmp	800012ae <gpioInit+0xa2>
80001294:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001298:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000129c:	f1 49 00 48 	st.w	r8[72],r9
800012a0:	c0 78       	rjmp	800012ae <gpioInit+0xa2>
800012a2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800012a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800012aa:	f1 49 00 48 	st.w	r8[72],r9
800012ae:	2f 9d       	sub	sp,-28
800012b0:	e3 cd 80 80 	ldm	sp++,r7,pc

800012b4 <gpioClear>:
800012b4:	eb cd 40 80 	pushm	r7,lr
800012b8:	1a 97       	mov	r7,sp
800012ba:	20 5d       	sub	sp,20
800012bc:	ef 4c ff ec 	st.w	r7[-20],r12
800012c0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800012c4:	a5 58       	asr	r8,0x5
800012c6:	ef 48 ff f4 	st.w	r7[-12],r8
800012ca:	ee f8 ff ec 	ld.w	r8,r7[-20]
800012ce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800012d2:	ef 48 ff fc 	st.w	r7[-4],r8
800012d6:	30 19       	mov	r9,1
800012d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012dc:	f2 08 09 48 	lsl	r8,r9,r8
800012e0:	ef 48 ff f8 	st.w	r7[-8],r8
800012e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800012e8:	a9 68       	lsl	r8,0x8
800012ea:	e0 28 f0 00 	sub	r8,61440
800012ee:	ef 48 ff f0 	st.w	r7[-16],r8
800012f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800012f6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800012fa:	f1 49 00 58 	st.w	r8[88],r9
800012fe:	2f bd       	sub	sp,-20
80001300:	e3 cd 80 80 	ldm	sp++,r7,pc

80001304 <gpioSet>:
80001304:	eb cd 40 80 	pushm	r7,lr
80001308:	1a 97       	mov	r7,sp
8000130a:	20 5d       	sub	sp,20
8000130c:	ef 4c ff ec 	st.w	r7[-20],r12
80001310:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001314:	a5 58       	asr	r8,0x5
80001316:	ef 48 ff f4 	st.w	r7[-12],r8
8000131a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000131e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001322:	ef 48 ff fc 	st.w	r7[-4],r8
80001326:	30 19       	mov	r9,1
80001328:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000132c:	f2 08 09 48 	lsl	r8,r9,r8
80001330:	ef 48 ff f8 	st.w	r7[-8],r8
80001334:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001338:	a9 68       	lsl	r8,0x8
8000133a:	e0 28 f0 00 	sub	r8,61440
8000133e:	ef 48 ff f0 	st.w	r7[-16],r8
80001342:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001346:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000134a:	f1 49 00 54 	st.w	r8[84],r9
8000134e:	2f bd       	sub	sp,-20
80001350:	e3 cd 80 80 	ldm	sp++,r7,pc

80001354 <ledInit>:
80001354:	eb cd 40 80 	pushm	r7,lr
80001358:	1a 97       	mov	r7,sp
8000135a:	20 9d       	sub	sp,36
8000135c:	49 e8       	lddpc	r8,800013d4 <ledInit+0x80>
8000135e:	ee cb 00 24 	sub	r11,r7,36
80001362:	10 9a       	mov	r10,r8
80001364:	f4 e8 00 00 	ld.d	r8,r10[0]
80001368:	f6 e9 00 00 	st.d	r11[0],r8
8000136c:	f4 e8 00 08 	ld.d	r8,r10[8]
80001370:	f6 e9 00 08 	st.d	r11[8],r8
80001374:	f4 e8 00 10 	ld.d	r8,r10[16]
80001378:	f6 e9 00 10 	st.d	r11[16],r8
8000137c:	f4 e8 00 18 	ld.d	r8,r10[24]
80001380:	f6 e9 00 18 	st.d	r11[24],r8
80001384:	30 08       	mov	r8,0
80001386:	ef 48 ff fc 	st.w	r7[-4],r8
8000138a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000138e:	a3 68       	lsl	r8,0x2
80001390:	ee 08 00 08 	add	r8,r7,r8
80001394:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80001398:	10 9c       	mov	r12,r8
8000139a:	f0 1f 00 10 	mcall	800013d8 <ledInit+0x84>
8000139e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013a2:	a3 68       	lsl	r8,0x2
800013a4:	ee 08 00 08 	add	r8,r7,r8
800013a8:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800013ac:	30 0b       	mov	r11,0
800013ae:	10 9c       	mov	r12,r8
800013b0:	f0 1f 00 0b 	mcall	800013dc <ledInit+0x88>
800013b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013b8:	58 78       	cp.w	r8,7
800013ba:	5f 18       	srne	r8
800013bc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800013c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013c4:	2f f8       	sub	r8,-1
800013c6:	ef 48 ff fc 	st.w	r7[-4],r8
800013ca:	58 09       	cp.w	r9,0
800013cc:	cd f1       	brne	8000138a <ledInit+0x36>
800013ce:	2f 7d       	sub	sp,-36
800013d0:	e3 cd 80 80 	ldm	sp++,r7,pc
800013d4:	80 00       	ld.sh	r0,r0[0x0]
800013d6:	26 00       	sub	r0,96
800013d8:	80 00       	ld.sh	r0,r0[0x0]
800013da:	14 00       	add	r0,r10
800013dc:	80 00       	ld.sh	r0,r0[0x0]
800013de:	12 0c       	add	r12,r9

800013e0 <ledOn>:
800013e0:	eb cd 40 80 	pushm	r7,lr
800013e4:	1a 97       	mov	r7,sp
800013e6:	20 1d       	sub	sp,4
800013e8:	ef 4c ff fc 	st.w	r7[-4],r12
800013ec:	ee fc ff fc 	ld.w	r12,r7[-4]
800013f0:	f0 1f 00 03 	mcall	800013fc <ledOn+0x1c>
800013f4:	2f fd       	sub	sp,-4
800013f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800013fa:	00 00       	add	r0,r0
800013fc:	80 00       	ld.sh	r0,r0[0x0]
800013fe:	12 b4       	st.h	r9++,r4

80001400 <ledOff>:
80001400:	eb cd 40 80 	pushm	r7,lr
80001404:	1a 97       	mov	r7,sp
80001406:	20 1d       	sub	sp,4
80001408:	ef 4c ff fc 	st.w	r7[-4],r12
8000140c:	ee fc ff fc 	ld.w	r12,r7[-4]
80001410:	f0 1f 00 03 	mcall	8000141c <ledOff+0x1c>
80001414:	2f fd       	sub	sp,-4
80001416:	e3 cd 80 80 	ldm	sp++,r7,pc
8000141a:	00 00       	add	r0,r0
8000141c:	80 00       	ld.sh	r0,r0[0x0]
8000141e:	13 04       	ld.w	r4,r9++

80001420 <potInit>:
80001420:	d3 01       	pushm	r11-r12
80001422:	e0 6c 10 00 	mov	r12,4096
80001426:	ea 1c ff ff 	orh	r12,0xffff
8000142a:	31 6b       	mov	r11,22
8000142c:	99 2b       	st.w	r12[0x8],r11
8000142e:	99 6b       	st.w	r12[0x18],r11
80001430:	99 6b       	st.w	r12[0x18],r11
80001432:	e0 6c 3c 00 	mov	r12,15360
80001436:	ea 1c ff ff 	orh	r12,0xffff
8000143a:	30 1b       	mov	r11,1
8000143c:	99 0b       	st.w	r12[0x0],r11
8000143e:	e0 6b 0f 1f 	mov	r11,3871
80001442:	b1 6b       	lsl	r11,0x10
80001444:	99 1b       	st.w	r12[0x4],r11
80001446:	30 2b       	mov	r11,2
80001448:	99 4b       	st.w	r12[0x10],r11
8000144a:	d3 02       	popm	r11-r12
8000144c:	1c 9f       	mov	pc,lr

8000144e <potGetValue>:
8000144e:	d1 81       	pushm	r10-r11
80001450:	e0 6c 3c 00 	mov	r12,15360
80001454:	ea 1c ff ff 	orh	r12,0xffff
80001458:	30 2b       	mov	r11,2
8000145a:	99 0b       	st.w	r12[0x0],r11

8000145c <a1>:
8000145c:	78 7a       	ld.w	r10,r12[0x1c]
8000145e:	16 7a       	tst	r10,r11
80001460:	cf e0       	breq	8000145c <a1>
80001462:	78 dc       	ld.w	r12,r12[0x34]
80001464:	d1 82       	popm	r10-r11
80001466:	1c 9f       	mov	pc,lr

80001468 <usartReset>:
80001468:	eb cd 40 80 	pushm	r7,lr
8000146c:	1a 97       	mov	r7,sp
8000146e:	20 3d       	sub	sp,12
80001470:	ef 4c ff f8 	st.w	r7[-8],r12
80001474:	f0 1f 00 16 	mcall	800014cc <usartReset+0x64>
80001478:	18 98       	mov	r8,r12
8000147a:	ef 48 ff fc 	st.w	r7[-4],r8
8000147e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001482:	58 08       	cp.w	r8,0
80001484:	c0 30       	breq	8000148a <usartReset+0x22>
80001486:	f0 1f 00 13 	mcall	800014d0 <usartReset+0x68>
8000148a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000148e:	3f f8       	mov	r8,-1
80001490:	93 38       	st.w	r9[0xc],r8
80001492:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001496:	70 58       	ld.w	r8,r8[0x14]
80001498:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000149c:	58 08       	cp.w	r8,0
8000149e:	c0 30       	breq	800014a4 <usartReset+0x3c>
800014a0:	f0 1f 00 0d 	mcall	800014d4 <usartReset+0x6c>
800014a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800014a8:	30 08       	mov	r8,0
800014aa:	93 18       	st.w	r9[0x4],r8
800014ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
800014b0:	30 08       	mov	r8,0
800014b2:	93 98       	st.w	r9[0x24],r8
800014b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800014b8:	30 08       	mov	r8,0
800014ba:	93 a8       	st.w	r9[0x28],r8
800014bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800014c0:	ea 68 61 0c 	mov	r8,680204
800014c4:	93 08       	st.w	r9[0x0],r8
800014c6:	2f dd       	sub	sp,-12
800014c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800014cc:	80 00       	ld.sh	r0,r0[0x0]
800014ce:	23 6e       	sub	lr,54
800014d0:	80 00       	ld.sh	r0,r0[0x0]
800014d2:	23 66       	sub	r6,54
800014d4:	80 00       	ld.sh	r0,r0[0x0]
800014d6:	23 6a       	sub	r10,54

800014d8 <usartSetBaudrate>:
800014d8:	eb cd 40 80 	pushm	r7,lr
800014dc:	1a 97       	mov	r7,sp
800014de:	20 bd       	sub	sp,44
800014e0:	ef 4c ff ec 	st.w	r7[-20],r12
800014e4:	ef 4b ff e8 	st.w	r7[-24],r11
800014e8:	ef 4a ff e4 	st.w	r7[-28],r10
800014ec:	ee f8 ff e8 	ld.w	r8,r7[-24]
800014f0:	f0 09 15 04 	lsl	r9,r8,0x4
800014f4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800014f8:	10 39       	cp.w	r9,r8
800014fa:	e0 8b 00 06 	brhi	80001506 <usartSetBaudrate+0x2e>
800014fe:	31 09       	mov	r9,16
80001500:	ef 49 ff d4 	st.w	r7[-44],r9
80001504:	c0 48       	rjmp	8000150c <usartSetBaudrate+0x34>
80001506:	30 88       	mov	r8,8
80001508:	ef 48 ff d4 	st.w	r7[-44],r8
8000150c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80001510:	ef 49 ff f0 	st.w	r7[-16],r9
80001514:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001518:	f0 0a 15 03 	lsl	r10,r8,0x3
8000151c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001520:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001524:	f2 08 02 48 	mul	r8,r9,r8
80001528:	a1 98       	lsr	r8,0x1
8000152a:	10 0a       	add	r10,r8
8000152c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001530:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001534:	f2 08 02 48 	mul	r8,r9,r8
80001538:	f4 08 0d 08 	divu	r8,r10,r8
8000153c:	ef 48 ff f4 	st.w	r7[-12],r8
80001540:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001544:	a3 98       	lsr	r8,0x3
80001546:	ef 48 ff f8 	st.w	r7[-8],r8
8000154a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000154e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80001552:	ef 48 ff fc 	st.w	r7[-4],r8
80001556:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000155a:	58 08       	cp.w	r8,0
8000155c:	c0 70       	breq	8000156a <usartSetBaudrate+0x92>
8000155e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001562:	e0 48 ff ff 	cp.w	r8,65535
80001566:	e0 88 00 06 	brls	80001572 <usartSetBaudrate+0x9a>
8000156a:	30 18       	mov	r8,1
8000156c:	ef 48 ff d8 	st.w	r7[-40],r8
80001570:	c2 c8       	rjmp	800015c8 <usartSetBaudrate+0xf0>
80001572:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001576:	70 18       	ld.w	r8,r8[0x4]
80001578:	10 99       	mov	r9,r8
8000157a:	e4 19 ff f7 	andh	r9,0xfff7
8000157e:	e0 19 fe cf 	andl	r9,0xfecf
80001582:	ef 49 ff dc 	st.w	r7[-36],r9
80001586:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000158a:	59 08       	cp.w	r8,16
8000158c:	c0 60       	breq	80001598 <usartSetBaudrate+0xc0>
8000158e:	e8 68 00 00 	mov	r8,524288
80001592:	ef 48 ff e0 	st.w	r7[-32],r8
80001596:	c0 48       	rjmp	8000159e <usartSetBaudrate+0xc6>
80001598:	30 09       	mov	r9,0
8000159a:	ef 49 ff e0 	st.w	r7[-32],r9
8000159e:	ee f9 ff dc 	ld.w	r9,r7[-36]
800015a2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800015a6:	10 49       	or	r9,r8
800015a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800015ac:	91 19       	st.w	r8[0x4],r9
800015ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015b2:	f0 09 15 10 	lsl	r9,r8,0x10
800015b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015ba:	10 49       	or	r9,r8
800015bc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800015c0:	91 89       	st.w	r8[0x20],r9
800015c2:	30 09       	mov	r9,0
800015c4:	ef 49 ff d8 	st.w	r7[-40],r9
800015c8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800015cc:	10 9c       	mov	r12,r8
800015ce:	2f 5d       	sub	sp,-44
800015d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800015d4 <usartInit>:
800015d4:	eb cd 40 80 	pushm	r7,lr
800015d8:	1a 97       	mov	r7,sp
800015da:	20 4d       	sub	sp,16
800015dc:	ef 4c ff f8 	st.w	r7[-8],r12
800015e0:	ef 4b ff f4 	st.w	r7[-12],r11
800015e4:	ef 4a ff f0 	st.w	r7[-16],r10
800015e8:	fe 78 10 00 	mov	r8,-61440
800015ec:	ef 48 ff fc 	st.w	r7[-4],r8
800015f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800015f4:	30 18       	mov	r8,1
800015f6:	93 28       	st.w	r9[0x8],r8
800015f8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800015fc:	30 28       	mov	r8,2
800015fe:	93 28       	st.w	r9[0x8],r8
80001600:	ee fc ff f8 	ld.w	r12,r7[-8]
80001604:	f0 1f 00 3b 	mcall	800016f0 <usartInit+0x11c>
80001608:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000160c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001610:	70 08       	ld.w	r8,r8[0x0]
80001612:	12 9a       	mov	r10,r9
80001614:	10 9b       	mov	r11,r8
80001616:	ee fc ff f8 	ld.w	r12,r7[-8]
8000161a:	f0 1f 00 37 	mcall	800016f4 <usartInit+0x120>
8000161e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001622:	11 c9       	ld.ub	r9,r8[0x4]
80001624:	30 98       	mov	r8,9
80001626:	f0 09 18 00 	cp.b	r9,r8
8000162a:	c0 a1       	brne	8000163e <usartInit+0x6a>
8000162c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001630:	70 18       	ld.w	r8,r8[0x4]
80001632:	10 99       	mov	r9,r8
80001634:	b1 b9       	sbr	r9,0x11
80001636:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000163a:	91 19       	st.w	r8[0x4],r9
8000163c:	c0 d8       	rjmp	80001656 <usartInit+0x82>
8000163e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001642:	70 19       	ld.w	r9,r8[0x4]
80001644:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001648:	11 c8       	ld.ub	r8,r8[0x4]
8000164a:	20 58       	sub	r8,5
8000164c:	a7 68       	lsl	r8,0x6
8000164e:	10 49       	or	r9,r8
80001650:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001654:	91 19       	st.w	r8[0x4],r9
80001656:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000165a:	70 1a       	ld.w	r10,r8[0x4]
8000165c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001660:	11 d8       	ld.ub	r8,r8[0x5]
80001662:	f0 09 15 09 	lsl	r9,r8,0x9
80001666:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000166a:	f1 38 00 08 	ld.ub	r8,r8[8]
8000166e:	af 68       	lsl	r8,0xe
80001670:	f3 e8 10 08 	or	r8,r9,r8
80001674:	f5 e8 10 09 	or	r9,r10,r8
80001678:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000167c:	91 19       	st.w	r8[0x4],r9
8000167e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001682:	90 39       	ld.sh	r9,r8[0x6]
80001684:	30 28       	mov	r8,2
80001686:	f0 09 19 00 	cp.h	r9,r8
8000168a:	e0 88 00 14 	brls	800016b2 <usartInit+0xde>
8000168e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001692:	70 18       	ld.w	r8,r8[0x4]
80001694:	10 99       	mov	r9,r8
80001696:	ad b9       	sbr	r9,0xd
80001698:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000169c:	91 19       	st.w	r8[0x4],r9
8000169e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800016a2:	90 38       	ld.sh	r8,r8[0x6]
800016a4:	5c 78       	castu.h	r8
800016a6:	20 28       	sub	r8,2
800016a8:	10 99       	mov	r9,r8
800016aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016ae:	91 a9       	st.w	r8[0x28],r9
800016b0:	c0 d8       	rjmp	800016ca <usartInit+0xf6>
800016b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016b6:	70 19       	ld.w	r9,r8[0x4]
800016b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800016bc:	90 38       	ld.sh	r8,r8[0x6]
800016be:	5c 78       	castu.h	r8
800016c0:	ad 68       	lsl	r8,0xc
800016c2:	10 49       	or	r9,r8
800016c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016c8:	91 19       	st.w	r8[0x4],r9
800016ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016ce:	70 18       	ld.w	r8,r8[0x4]
800016d0:	10 99       	mov	r9,r8
800016d2:	e0 19 ff f0 	andl	r9,0xfff0
800016d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016da:	91 19       	st.w	r8[0x4],r9
800016dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800016e0:	35 08       	mov	r8,80
800016e2:	93 08       	st.w	r9[0x0],r8
800016e4:	30 08       	mov	r8,0
800016e6:	10 9c       	mov	r12,r8
800016e8:	2f cd       	sub	sp,-16
800016ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800016ee:	00 00       	add	r0,r0
800016f0:	80 00       	ld.sh	r0,r0[0x0]
800016f2:	14 68       	and	r8,r10
800016f4:	80 00       	ld.sh	r0,r0[0x0]
800016f6:	14 d8       	st.w	--r10,r8

800016f8 <usartWriteChar>:
800016f8:	eb cd 40 80 	pushm	r7,lr
800016fc:	1a 97       	mov	r7,sp
800016fe:	20 3d       	sub	sp,12
80001700:	ef 4c ff f8 	st.w	r7[-8],r12
80001704:	16 98       	mov	r8,r11
80001706:	ef 68 ff f4 	st.b	r7[-12],r8
8000170a:	e4 68 00 00 	mov	r8,262144
8000170e:	ef 48 ff fc 	st.w	r7[-4],r8
80001712:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001716:	58 08       	cp.w	r8,0
80001718:	5f 18       	srne	r8
8000171a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000171e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001722:	20 18       	sub	r8,1
80001724:	ef 48 ff fc 	st.w	r7[-4],r8
80001728:	12 98       	mov	r8,r9
8000172a:	ec 18 00 01 	eorl	r8,0x1
8000172e:	5c 58       	castu.b	r8
80001730:	c0 71       	brne	8000173e <usartWriteChar+0x46>
80001732:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001736:	70 58       	ld.w	r8,r8[0x14]
80001738:	e2 18 00 02 	andl	r8,0x2,COH
8000173c:	ce b0       	breq	80001712 <usartWriteChar+0x1a>
8000173e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80001742:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001746:	91 79       	st.w	r8[0x1c],r9
80001748:	2f dd       	sub	sp,-12
8000174a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000174e:	d7 03       	nop

80001750 <usartWriteLine>:
80001750:	eb cd 40 80 	pushm	r7,lr
80001754:	1a 97       	mov	r7,sp
80001756:	20 2d       	sub	sp,8
80001758:	ef 4c ff fc 	st.w	r7[-4],r12
8000175c:	ef 4b ff f8 	st.w	r7[-8],r11
80001760:	c1 88       	rjmp	80001790 <usartWriteLine+0x40>
80001762:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001766:	11 88       	ld.ub	r8,r8[0x0]
80001768:	58 a8       	cp.w	r8,10
8000176a:	c0 61       	brne	80001776 <usartWriteLine+0x26>
8000176c:	30 db       	mov	r11,13
8000176e:	ee fc ff fc 	ld.w	r12,r7[-4]
80001772:	f0 1f 00 0c 	mcall	800017a0 <usartWriteLine+0x50>
80001776:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000177a:	11 88       	ld.ub	r8,r8[0x0]
8000177c:	10 9b       	mov	r11,r8
8000177e:	ee fc ff fc 	ld.w	r12,r7[-4]
80001782:	f0 1f 00 08 	mcall	800017a0 <usartWriteLine+0x50>
80001786:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000178a:	2f f8       	sub	r8,-1
8000178c:	ef 48 ff f8 	st.w	r7[-8],r8
80001790:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001794:	11 88       	ld.ub	r8,r8[0x0]
80001796:	58 08       	cp.w	r8,0
80001798:	ce 51       	brne	80001762 <usartWriteLine+0x12>
8000179a:	2f ed       	sub	sp,-8
8000179c:	e3 cd 80 80 	ldm	sp++,r7,pc
800017a0:	80 00       	ld.sh	r0,r0[0x0]
800017a2:	16 f8       	st.b	--r11,r8

800017a4 <timerInit>:
800017a4:	d5 01       	pushm	r11,lr
800017a6:	d2 01       	pushm	r12
800017a8:	f0 1f 00 28 	mcall	80001848 <timerClearInterrupt+0x10>
800017ac:	f0 1f 00 28 	mcall	8000184c <timerClearInterrupt+0x14>
800017b0:	e0 6c 38 00 	mov	r12,14336
800017b4:	ea 1c ff ff 	orh	r12,0xffff
800017b8:	e0 6b c0 00 	mov	r11,49152
800017bc:	ea 1b 00 00 	orh	r11,0x0
800017c0:	99 1b       	st.w	r12[0x4],r11
800017c2:	30 1b       	mov	r11,1
800017c4:	a5 6b       	lsl	r11,0x4
800017c6:	99 9b       	st.w	r12[0x24],r11
800017c8:	d2 02       	popm	r12
800017ca:	f0 1f 00 22 	mcall	80001850 <timerClearInterrupt+0x18>
800017ce:	d5 02       	popm	r11,lr
800017d0:	1c 9f       	mov	pc,lr

800017d2 <timerReset>:
800017d2:	d3 01       	pushm	r11-r12
800017d4:	e0 6c 38 00 	mov	r12,14336
800017d8:	ea 1c ff ff 	orh	r12,0xffff
800017dc:	30 5b       	mov	r11,5
800017de:	99 0b       	st.w	r12[0x0],r11
800017e0:	e0 6b 00 08 	mov	r11,8
800017e4:	ea 1b 00 00 	orh	r11,0x0
800017e8:	76 0b       	ld.w	r11,r11[0x0]
800017ea:	99 7b       	st.w	r12[0x1c],r11
800017ec:	d3 02       	popm	r11-r12
800017ee:	1c 9f       	mov	pc,lr

800017f0 <timerStop>:
800017f0:	d3 01       	pushm	r11-r12
800017f2:	e0 6c 38 00 	mov	r12,14336
800017f6:	ea 1c ff ff 	orh	r12,0xffff
800017fa:	30 2b       	mov	r11,2
800017fc:	99 0b       	st.w	r12[0x0],r11
800017fe:	d3 02       	popm	r11-r12
80001800:	1c 9f       	mov	pc,lr

80001802 <timerRCSet>:
80001802:	d3 01       	pushm	r11-r12
80001804:	49 4b       	lddpc	r11,80001854 <timerClearInterrupt+0x1c>
80001806:	97 0c       	st.w	r11[0x0],r12
80001808:	e0 6c 38 00 	mov	r12,14336
8000180c:	ea 1c ff ff 	orh	r12,0xffff
80001810:	76 0b       	ld.w	r11,r11[0x0]
80001812:	99 7b       	st.w	r12[0x1c],r11
80001814:	d3 02       	popm	r11-r12
80001816:	1c 9f       	mov	pc,lr

80001818 <timerPrescaleSet>:
80001818:	d3 81       	pushm	r10-r12
8000181a:	49 0b       	lddpc	r11,80001858 <timerClearInterrupt+0x20>
8000181c:	97 0c       	st.w	r11[0x0],r12
8000181e:	e0 6c 38 00 	mov	r12,14336
80001822:	ea 1c ff ff 	orh	r12,0xffff
80001826:	78 1a       	ld.w	r10,r12[0x4]
80001828:	3f 8b       	mov	r11,-8
8000182a:	16 6a       	and	r10,r11
8000182c:	48 bb       	lddpc	r11,80001858 <timerClearInterrupt+0x20>
8000182e:	76 0b       	ld.w	r11,r11[0x0]
80001830:	14 4b       	or	r11,r10
80001832:	99 1b       	st.w	r12[0x4],r11
80001834:	d3 82       	popm	r10-r12
80001836:	1c 9f       	mov	pc,lr

80001838 <timerClearInterrupt>:
80001838:	d2 01       	pushm	r12
8000183a:	e0 6c 38 00 	mov	r12,14336
8000183e:	ea 1c ff ff 	orh	r12,0xffff
80001842:	78 8c       	ld.w	r12,r12[0x20]
80001844:	d2 02       	popm	r12
80001846:	1c 9f       	mov	pc,lr
80001848:	80 00       	ld.sh	r0,r0[0x0]
8000184a:	23 66       	sub	r6,54
8000184c:	80 00       	ld.sh	r0,r0[0x0]
8000184e:	18 38       	cp.w	r8,r12
80001850:	80 00       	ld.sh	r0,r0[0x0]
80001852:	11 04       	ld.w	r4,r8++
80001854:	00 00       	add	r0,r0
80001856:	00 08       	add	r8,r0
80001858:	00 00       	add	r0,r0
8000185a:	00 0c       	add	r12,r0

8000185c <_stext>:
8000185c:	49 7d       	lddpc	sp,800018b8 <udata_end+0x4>
8000185e:	49 80       	lddpc	r0,800018bc <udata_end+0x8>
80001860:	1a d0       	st.w	--sp,r0
80001862:	e5 cd 20 00 	ldmts	sp,sp
80001866:	1b 00       	ld.w	r0,sp++
80001868:	49 60       	lddpc	r0,800018c0 <udata_end+0xc>
8000186a:	e3 b0 00 01 	mtsr	0x4,r0
8000186e:	d5 53       	csrf	0x15
80001870:	e0 6c 0c 00 	mov	r12,3072
80001874:	ea 1c ff ff 	orh	r12,0xffff
80001878:	e0 6b 01 07 	mov	r11,263
8000187c:	99 ab       	st.w	r12[0x28],r11
8000187e:	30 4b       	mov	r11,4
80001880:	99 0b       	st.w	r12[0x0],r11
80001882:	e0 6a 00 80 	mov	r10,128

80001886 <xw8>:
80001886:	79 5b       	ld.w	r11,r12[0x54]
80001888:	14 7b       	tst	r11,r10
8000188a:	cf e0       	breq	80001886 <xw8>
8000188c:	30 5b       	mov	r11,5
8000188e:	99 0b       	st.w	r12[0x0],r11

80001890 <idata_>:
80001890:	48 d0       	lddpc	r0,800018c4 <udata_end+0x10>
80001892:	48 e1       	lddpc	r1,800018c8 <udata_end+0x14>
80001894:	02 30       	cp.w	r0,r1
80001896:	c0 62       	brcc	800018a2 <idata_end>
80001898:	48 d2       	lddpc	r2,800018cc <udata_end+0x18>

8000189a <idata_loop>:
8000189a:	05 04       	ld.w	r4,r2++
8000189c:	00 a4       	st.w	r0++,r4
8000189e:	02 30       	cp.w	r0,r1
800018a0:	cf d3       	brcs	8000189a <idata_loop>

800018a2 <idata_end>:
800018a2:	48 c0       	lddpc	r0,800018d0 <udata_end+0x1c>
800018a4:	48 c1       	lddpc	r1,800018d4 <udata_end+0x20>
800018a6:	02 30       	cp.w	r0,r1
800018a8:	c0 62       	brcc	800018b4 <udata_end>
800018aa:	30 02       	mov	r2,0
800018ac:	30 03       	mov	r3,0

800018ae <udata_loop>:
800018ae:	00 a2       	st.w	r0++,r2
800018b0:	02 30       	cp.w	r0,r1
800018b2:	cf e3       	brcs	800018ae <udata_loop>

800018b4 <udata_end>:
800018b4:	48 9f       	lddpc	pc,800018d8 <udata_end+0x24>
800018b6:	00 00       	add	r0,r0
800018b8:	00 01       	add	r1,r0
800018ba:	00 00       	add	r0,r0
800018bc:	00 00       	add	r0,r0
800018be:	f0 00       	*unknown*
800018c0:	80 00       	ld.sh	r0,r0[0x0]
800018c2:	22 00       	sub	r0,32
800018c4:	00 00       	add	r0,r0
800018c6:	00 08       	add	r8,r0
800018c8:	00 00       	add	r0,r0
800018ca:	05 18       	ld.sh	r8,r2++
800018cc:	80 00       	ld.sh	r0,r0[0x0]
800018ce:	26 88       	sub	r8,104
800018d0:	00 00       	add	r0,r0
800018d2:	05 18       	ld.sh	r8,r2++
800018d4:	00 00       	add	r0,r0
800018d6:	06 e0       	st.h	--r3,r0
800018d8:	80 00       	ld.sh	r0,r0[0x0]
800018da:	06 04       	add	r4,r3

800018dc <calloc>:
800018dc:	d4 01       	pushm	lr
800018de:	48 48       	lddpc	r8,800018ec <calloc+0x10>
800018e0:	16 9a       	mov	r10,r11
800018e2:	18 9b       	mov	r11,r12
800018e4:	70 0c       	ld.w	r12,r8[0x0]
800018e6:	f0 1f 00 03 	mcall	800018f0 <calloc+0x14>
800018ea:	d8 02       	popm	pc
800018ec:	00 00       	add	r0,r0
800018ee:	01 00       	ld.w	r0,r0++
800018f0:	80 00       	ld.sh	r0,r0[0x0]
800018f2:	18 f4       	st.b	--r12,r4

800018f4 <_calloc_r>:
800018f4:	d4 21       	pushm	r4-r7,lr
800018f6:	f4 0b 02 4b 	mul	r11,r10,r11
800018fa:	f0 1f 00 15 	mcall	8000194c <_calloc_r+0x58>
800018fe:	18 97       	mov	r7,r12
80001900:	c2 30       	breq	80001946 <_calloc_r+0x52>
80001902:	f8 fa ff fc 	ld.w	r10,r12[-4]
80001906:	e0 1a ff fc 	andl	r10,0xfffc
8000190a:	20 4a       	sub	r10,4
8000190c:	e0 4a 00 24 	cp.w	r10,36
80001910:	e0 8b 00 18 	brhi	80001940 <_calloc_r+0x4c>
80001914:	18 98       	mov	r8,r12
80001916:	59 3a       	cp.w	r10,19
80001918:	e0 88 00 0f 	brls	80001936 <_calloc_r+0x42>
8000191c:	30 09       	mov	r9,0
8000191e:	10 a9       	st.w	r8++,r9
80001920:	10 a9       	st.w	r8++,r9
80001922:	59 ba       	cp.w	r10,27
80001924:	e0 88 00 09 	brls	80001936 <_calloc_r+0x42>
80001928:	10 a9       	st.w	r8++,r9
8000192a:	10 a9       	st.w	r8++,r9
8000192c:	e0 4a 00 24 	cp.w	r10,36
80001930:	c0 31       	brne	80001936 <_calloc_r+0x42>
80001932:	10 a9       	st.w	r8++,r9
80001934:	10 a9       	st.w	r8++,r9
80001936:	30 09       	mov	r9,0
80001938:	10 a9       	st.w	r8++,r9
8000193a:	91 19       	st.w	r8[0x4],r9
8000193c:	91 09       	st.w	r8[0x0],r9
8000193e:	c0 48       	rjmp	80001946 <_calloc_r+0x52>
80001940:	30 0b       	mov	r11,0
80001942:	f0 1f 00 04 	mcall	80001950 <_calloc_r+0x5c>
80001946:	0e 9c       	mov	r12,r7
80001948:	d8 22       	popm	r4-r7,pc
8000194a:	00 00       	add	r0,r0
8000194c:	80 00       	ld.sh	r0,r0[0x0]
8000194e:	19 6c       	ld.uh	r12,--r12
80001950:	80 00       	ld.sh	r0,r0[0x0]
80001952:	1d bc       	ld.ub	r12,lr[0x3]

80001954 <malloc>:
80001954:	d4 01       	pushm	lr
80001956:	48 48       	lddpc	r8,80001964 <malloc+0x10>
80001958:	18 9b       	mov	r11,r12
8000195a:	70 0c       	ld.w	r12,r8[0x0]
8000195c:	f0 1f 00 03 	mcall	80001968 <malloc+0x14>
80001960:	d8 02       	popm	pc
80001962:	00 00       	add	r0,r0
80001964:	00 00       	add	r0,r0
80001966:	01 00       	ld.w	r0,r0++
80001968:	80 00       	ld.sh	r0,r0[0x0]
8000196a:	19 6c       	ld.uh	r12,--r12

8000196c <_malloc_r>:
8000196c:	d4 31       	pushm	r0-r7,lr
8000196e:	f6 c8 ff f5 	sub	r8,r11,-11
80001972:	18 95       	mov	r5,r12
80001974:	10 97       	mov	r7,r8
80001976:	e0 17 ff f8 	andl	r7,0xfff8
8000197a:	59 68       	cp.w	r8,22
8000197c:	f9 b7 08 10 	movls	r7,16
80001980:	16 37       	cp.w	r7,r11
80001982:	5f 38       	srlo	r8
80001984:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001988:	c0 50       	breq	80001992 <_malloc_r+0x26>
8000198a:	30 c8       	mov	r8,12
8000198c:	99 38       	st.w	r12[0xc],r8
8000198e:	e0 8f 01 f3 	bral	80001d74 <_malloc_r+0x408>
80001992:	f0 1f 00 50 	mcall	80001ad0 <_malloc_r+0x164>
80001996:	e0 47 01 f7 	cp.w	r7,503
8000199a:	e0 8b 00 1c 	brhi	800019d2 <_malloc_r+0x66>
8000199e:	ee 03 16 03 	lsr	r3,r7,0x3
800019a2:	4c d8       	lddpc	r8,80001ad4 <_malloc_r+0x168>
800019a4:	f0 03 00 38 	add	r8,r8,r3<<0x3
800019a8:	70 36       	ld.w	r6,r8[0xc]
800019aa:	10 36       	cp.w	r6,r8
800019ac:	c0 61       	brne	800019b8 <_malloc_r+0x4c>
800019ae:	ec c8 ff f8 	sub	r8,r6,-8
800019b2:	70 36       	ld.w	r6,r8[0xc]
800019b4:	10 36       	cp.w	r6,r8
800019b6:	c0 c0       	breq	800019ce <_malloc_r+0x62>
800019b8:	6c 18       	ld.w	r8,r6[0x4]
800019ba:	e0 18 ff fc 	andl	r8,0xfffc
800019be:	6c 3a       	ld.w	r10,r6[0xc]
800019c0:	ec 08 00 09 	add	r9,r6,r8
800019c4:	0a 9c       	mov	r12,r5
800019c6:	6c 28       	ld.w	r8,r6[0x8]
800019c8:	95 28       	st.w	r10[0x8],r8
800019ca:	91 3a       	st.w	r8[0xc],r10
800019cc:	c4 68       	rjmp	80001a58 <_malloc_r+0xec>
800019ce:	2f e3       	sub	r3,-2
800019d0:	c4 c8       	rjmp	80001a68 <_malloc_r+0xfc>
800019d2:	ee 03 16 09 	lsr	r3,r7,0x9
800019d6:	c0 41       	brne	800019de <_malloc_r+0x72>
800019d8:	ee 03 16 03 	lsr	r3,r7,0x3
800019dc:	c2 68       	rjmp	80001a28 <_malloc_r+0xbc>
800019de:	58 43       	cp.w	r3,4
800019e0:	e0 8b 00 06 	brhi	800019ec <_malloc_r+0x80>
800019e4:	ee 03 16 06 	lsr	r3,r7,0x6
800019e8:	2c 83       	sub	r3,-56
800019ea:	c1 f8       	rjmp	80001a28 <_malloc_r+0xbc>
800019ec:	59 43       	cp.w	r3,20
800019ee:	e0 8b 00 04 	brhi	800019f6 <_malloc_r+0x8a>
800019f2:	2a 53       	sub	r3,-91
800019f4:	c1 a8       	rjmp	80001a28 <_malloc_r+0xbc>
800019f6:	e0 43 00 54 	cp.w	r3,84
800019fa:	e0 8b 00 06 	brhi	80001a06 <_malloc_r+0x9a>
800019fe:	ee 03 16 0c 	lsr	r3,r7,0xc
80001a02:	29 23       	sub	r3,-110
80001a04:	c1 28       	rjmp	80001a28 <_malloc_r+0xbc>
80001a06:	e0 43 01 54 	cp.w	r3,340
80001a0a:	e0 8b 00 06 	brhi	80001a16 <_malloc_r+0xaa>
80001a0e:	ee 03 16 0f 	lsr	r3,r7,0xf
80001a12:	28 93       	sub	r3,-119
80001a14:	c0 a8       	rjmp	80001a28 <_malloc_r+0xbc>
80001a16:	e0 43 05 54 	cp.w	r3,1364
80001a1a:	e0 88 00 04 	brls	80001a22 <_malloc_r+0xb6>
80001a1e:	37 e3       	mov	r3,126
80001a20:	c0 48       	rjmp	80001a28 <_malloc_r+0xbc>
80001a22:	ee 03 16 12 	lsr	r3,r7,0x12
80001a26:	28 43       	sub	r3,-124
80001a28:	4a ba       	lddpc	r10,80001ad4 <_malloc_r+0x168>
80001a2a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80001a2e:	74 36       	ld.w	r6,r10[0xc]
80001a30:	c1 98       	rjmp	80001a62 <_malloc_r+0xf6>
80001a32:	6c 19       	ld.w	r9,r6[0x4]
80001a34:	e0 19 ff fc 	andl	r9,0xfffc
80001a38:	f2 07 01 0b 	sub	r11,r9,r7
80001a3c:	58 fb       	cp.w	r11,15
80001a3e:	e0 8a 00 04 	brle	80001a46 <_malloc_r+0xda>
80001a42:	20 13       	sub	r3,1
80001a44:	c1 18       	rjmp	80001a66 <_malloc_r+0xfa>
80001a46:	6c 38       	ld.w	r8,r6[0xc]
80001a48:	58 0b       	cp.w	r11,0
80001a4a:	c0 b5       	brlt	80001a60 <_malloc_r+0xf4>
80001a4c:	6c 2a       	ld.w	r10,r6[0x8]
80001a4e:	ec 09 00 09 	add	r9,r6,r9
80001a52:	0a 9c       	mov	r12,r5
80001a54:	91 2a       	st.w	r8[0x8],r10
80001a56:	95 38       	st.w	r10[0xc],r8
80001a58:	72 18       	ld.w	r8,r9[0x4]
80001a5a:	a1 a8       	sbr	r8,0x0
80001a5c:	93 18       	st.w	r9[0x4],r8
80001a5e:	cb c8       	rjmp	80001bd6 <_malloc_r+0x26a>
80001a60:	10 96       	mov	r6,r8
80001a62:	14 36       	cp.w	r6,r10
80001a64:	ce 71       	brne	80001a32 <_malloc_r+0xc6>
80001a66:	2f f3       	sub	r3,-1
80001a68:	49 ba       	lddpc	r10,80001ad4 <_malloc_r+0x168>
80001a6a:	f4 cc ff f8 	sub	r12,r10,-8
80001a6e:	78 26       	ld.w	r6,r12[0x8]
80001a70:	18 36       	cp.w	r6,r12
80001a72:	c6 e0       	breq	80001b4e <_malloc_r+0x1e2>
80001a74:	6c 19       	ld.w	r9,r6[0x4]
80001a76:	e0 19 ff fc 	andl	r9,0xfffc
80001a7a:	f2 07 01 08 	sub	r8,r9,r7
80001a7e:	58 f8       	cp.w	r8,15
80001a80:	e0 89 00 90 	brgt	80001ba0 <_malloc_r+0x234>
80001a84:	99 3c       	st.w	r12[0xc],r12
80001a86:	99 2c       	st.w	r12[0x8],r12
80001a88:	58 08       	cp.w	r8,0
80001a8a:	c0 55       	brlt	80001a94 <_malloc_r+0x128>
80001a8c:	ec 09 00 09 	add	r9,r6,r9
80001a90:	0a 9c       	mov	r12,r5
80001a92:	ce 3b       	rjmp	80001a58 <_malloc_r+0xec>
80001a94:	e0 49 01 ff 	cp.w	r9,511
80001a98:	e0 8b 00 13 	brhi	80001abe <_malloc_r+0x152>
80001a9c:	a3 99       	lsr	r9,0x3
80001a9e:	f4 09 00 38 	add	r8,r10,r9<<0x3
80001aa2:	70 2b       	ld.w	r11,r8[0x8]
80001aa4:	8d 38       	st.w	r6[0xc],r8
80001aa6:	8d 2b       	st.w	r6[0x8],r11
80001aa8:	97 36       	st.w	r11[0xc],r6
80001aaa:	91 26       	st.w	r8[0x8],r6
80001aac:	a3 49       	asr	r9,0x2
80001aae:	74 18       	ld.w	r8,r10[0x4]
80001ab0:	30 1b       	mov	r11,1
80001ab2:	f6 09 09 49 	lsl	r9,r11,r9
80001ab6:	f1 e9 10 09 	or	r9,r8,r9
80001aba:	95 19       	st.w	r10[0x4],r9
80001abc:	c4 98       	rjmp	80001b4e <_malloc_r+0x1e2>
80001abe:	f2 0a 16 09 	lsr	r10,r9,0x9
80001ac2:	58 4a       	cp.w	r10,4
80001ac4:	e0 8b 00 0a 	brhi	80001ad8 <_malloc_r+0x16c>
80001ac8:	f2 0a 16 06 	lsr	r10,r9,0x6
80001acc:	2c 8a       	sub	r10,-56
80001ace:	c2 38       	rjmp	80001b14 <_malloc_r+0x1a8>
80001ad0:	80 00       	ld.sh	r0,r0[0x0]
80001ad2:	1d ca       	ld.ub	r10,lr[0x4]
80001ad4:	00 00       	add	r0,r0
80001ad6:	01 04       	ld.w	r4,r0++
80001ad8:	59 4a       	cp.w	r10,20
80001ada:	e0 8b 00 04 	brhi	80001ae2 <_malloc_r+0x176>
80001ade:	2a 5a       	sub	r10,-91
80001ae0:	c1 a8       	rjmp	80001b14 <_malloc_r+0x1a8>
80001ae2:	e0 4a 00 54 	cp.w	r10,84
80001ae6:	e0 8b 00 06 	brhi	80001af2 <_malloc_r+0x186>
80001aea:	f2 0a 16 0c 	lsr	r10,r9,0xc
80001aee:	29 2a       	sub	r10,-110
80001af0:	c1 28       	rjmp	80001b14 <_malloc_r+0x1a8>
80001af2:	e0 4a 01 54 	cp.w	r10,340
80001af6:	e0 8b 00 06 	brhi	80001b02 <_malloc_r+0x196>
80001afa:	f2 0a 16 0f 	lsr	r10,r9,0xf
80001afe:	28 9a       	sub	r10,-119
80001b00:	c0 a8       	rjmp	80001b14 <_malloc_r+0x1a8>
80001b02:	e0 4a 05 54 	cp.w	r10,1364
80001b06:	e0 88 00 04 	brls	80001b0e <_malloc_r+0x1a2>
80001b0a:	37 ea       	mov	r10,126
80001b0c:	c0 48       	rjmp	80001b14 <_malloc_r+0x1a8>
80001b0e:	f2 0a 16 12 	lsr	r10,r9,0x12
80001b12:	28 4a       	sub	r10,-124
80001b14:	4c 8b       	lddpc	r11,80001c34 <_malloc_r+0x2c8>
80001b16:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80001b1a:	68 28       	ld.w	r8,r4[0x8]
80001b1c:	08 38       	cp.w	r8,r4
80001b1e:	c0 e1       	brne	80001b3a <_malloc_r+0x1ce>
80001b20:	76 19       	ld.w	r9,r11[0x4]
80001b22:	a3 4a       	asr	r10,0x2
80001b24:	30 1e       	mov	lr,1
80001b26:	fc 0a 09 4a 	lsl	r10,lr,r10
80001b2a:	f3 ea 10 0a 	or	r10,r9,r10
80001b2e:	10 99       	mov	r9,r8
80001b30:	97 1a       	st.w	r11[0x4],r10
80001b32:	c0 a8       	rjmp	80001b46 <_malloc_r+0x1da>
80001b34:	70 28       	ld.w	r8,r8[0x8]
80001b36:	08 38       	cp.w	r8,r4
80001b38:	c0 60       	breq	80001b44 <_malloc_r+0x1d8>
80001b3a:	70 1a       	ld.w	r10,r8[0x4]
80001b3c:	e0 1a ff fc 	andl	r10,0xfffc
80001b40:	14 39       	cp.w	r9,r10
80001b42:	cf 93       	brcs	80001b34 <_malloc_r+0x1c8>
80001b44:	70 39       	ld.w	r9,r8[0xc]
80001b46:	8d 39       	st.w	r6[0xc],r9
80001b48:	8d 28       	st.w	r6[0x8],r8
80001b4a:	91 36       	st.w	r8[0xc],r6
80001b4c:	93 26       	st.w	r9[0x8],r6
80001b4e:	e6 08 14 02 	asr	r8,r3,0x2
80001b52:	30 1b       	mov	r11,1
80001b54:	4b 84       	lddpc	r4,80001c34 <_malloc_r+0x2c8>
80001b56:	f6 08 09 4b 	lsl	r11,r11,r8
80001b5a:	68 18       	ld.w	r8,r4[0x4]
80001b5c:	10 3b       	cp.w	r11,r8
80001b5e:	e0 8b 00 6f 	brhi	80001c3c <_malloc_r+0x2d0>
80001b62:	f7 e8 00 09 	and	r9,r11,r8
80001b66:	c0 b1       	brne	80001b7c <_malloc_r+0x210>
80001b68:	e0 13 ff fc 	andl	r3,0xfffc
80001b6c:	a1 7b       	lsl	r11,0x1
80001b6e:	2f c3       	sub	r3,-4
80001b70:	c0 38       	rjmp	80001b76 <_malloc_r+0x20a>
80001b72:	2f c3       	sub	r3,-4
80001b74:	a1 7b       	lsl	r11,0x1
80001b76:	f7 e8 00 09 	and	r9,r11,r8
80001b7a:	cf c0       	breq	80001b72 <_malloc_r+0x206>
80001b7c:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001b80:	06 92       	mov	r2,r3
80001b82:	1c 91       	mov	r1,lr
80001b84:	62 36       	ld.w	r6,r1[0xc]
80001b86:	c2 e8       	rjmp	80001be2 <_malloc_r+0x276>
80001b88:	6c 1a       	ld.w	r10,r6[0x4]
80001b8a:	e0 1a ff fc 	andl	r10,0xfffc
80001b8e:	f4 07 01 08 	sub	r8,r10,r7
80001b92:	58 f8       	cp.w	r8,15
80001b94:	e0 8a 00 15 	brle	80001bbe <_malloc_r+0x252>
80001b98:	6c 3a       	ld.w	r10,r6[0xc]
80001b9a:	6c 29       	ld.w	r9,r6[0x8]
80001b9c:	95 29       	st.w	r10[0x8],r9
80001b9e:	93 3a       	st.w	r9[0xc],r10
80001ba0:	0e 99       	mov	r9,r7
80001ba2:	ec 07 00 07 	add	r7,r6,r7
80001ba6:	a1 a9       	sbr	r9,0x0
80001ba8:	99 37       	st.w	r12[0xc],r7
80001baa:	99 27       	st.w	r12[0x8],r7
80001bac:	8d 19       	st.w	r6[0x4],r9
80001bae:	ee 08 09 08 	st.w	r7[r8],r8
80001bb2:	8f 2c       	st.w	r7[0x8],r12
80001bb4:	8f 3c       	st.w	r7[0xc],r12
80001bb6:	a1 a8       	sbr	r8,0x0
80001bb8:	0a 9c       	mov	r12,r5
80001bba:	8f 18       	st.w	r7[0x4],r8
80001bbc:	c0 d8       	rjmp	80001bd6 <_malloc_r+0x26a>
80001bbe:	6c 39       	ld.w	r9,r6[0xc]
80001bc0:	58 08       	cp.w	r8,0
80001bc2:	c0 f5       	brlt	80001be0 <_malloc_r+0x274>
80001bc4:	ec 0a 00 0a 	add	r10,r6,r10
80001bc8:	74 18       	ld.w	r8,r10[0x4]
80001bca:	a1 a8       	sbr	r8,0x0
80001bcc:	0a 9c       	mov	r12,r5
80001bce:	95 18       	st.w	r10[0x4],r8
80001bd0:	6c 28       	ld.w	r8,r6[0x8]
80001bd2:	93 28       	st.w	r9[0x8],r8
80001bd4:	91 39       	st.w	r8[0xc],r9
80001bd6:	f0 1f 00 19 	mcall	80001c38 <_malloc_r+0x2cc>
80001bda:	ec cc ff f8 	sub	r12,r6,-8
80001bde:	d8 32       	popm	r0-r7,pc
80001be0:	12 96       	mov	r6,r9
80001be2:	02 36       	cp.w	r6,r1
80001be4:	cd 21       	brne	80001b88 <_malloc_r+0x21c>
80001be6:	2f f2       	sub	r2,-1
80001be8:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001bec:	c0 30       	breq	80001bf2 <_malloc_r+0x286>
80001bee:	2f 81       	sub	r1,-8
80001bf0:	cc ab       	rjmp	80001b84 <_malloc_r+0x218>
80001bf2:	1c 98       	mov	r8,lr
80001bf4:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001bf8:	c0 81       	brne	80001c08 <_malloc_r+0x29c>
80001bfa:	68 19       	ld.w	r9,r4[0x4]
80001bfc:	f6 08 11 ff 	rsub	r8,r11,-1
80001c00:	f3 e8 00 08 	and	r8,r9,r8
80001c04:	89 18       	st.w	r4[0x4],r8
80001c06:	c0 78       	rjmp	80001c14 <_malloc_r+0x2a8>
80001c08:	f0 c9 00 08 	sub	r9,r8,8
80001c0c:	20 13       	sub	r3,1
80001c0e:	70 08       	ld.w	r8,r8[0x0]
80001c10:	12 38       	cp.w	r8,r9
80001c12:	cf 10       	breq	80001bf4 <_malloc_r+0x288>
80001c14:	a1 7b       	lsl	r11,0x1
80001c16:	68 18       	ld.w	r8,r4[0x4]
80001c18:	10 3b       	cp.w	r11,r8
80001c1a:	e0 8b 00 11 	brhi	80001c3c <_malloc_r+0x2d0>
80001c1e:	58 0b       	cp.w	r11,0
80001c20:	c0 e0       	breq	80001c3c <_malloc_r+0x2d0>
80001c22:	04 93       	mov	r3,r2
80001c24:	c0 38       	rjmp	80001c2a <_malloc_r+0x2be>
80001c26:	2f c3       	sub	r3,-4
80001c28:	a1 7b       	lsl	r11,0x1
80001c2a:	f7 e8 00 09 	and	r9,r11,r8
80001c2e:	ca 71       	brne	80001b7c <_malloc_r+0x210>
80001c30:	cf bb       	rjmp	80001c26 <_malloc_r+0x2ba>
80001c32:	00 00       	add	r0,r0
80001c34:	00 00       	add	r0,r0
80001c36:	01 04       	ld.w	r4,r0++
80001c38:	80 00       	ld.sh	r0,r0[0x0]
80001c3a:	1d cc       	ld.ub	r12,lr[0x4]
80001c3c:	68 23       	ld.w	r3,r4[0x8]
80001c3e:	66 12       	ld.w	r2,r3[0x4]
80001c40:	e0 12 ff fc 	andl	r2,0xfffc
80001c44:	0e 32       	cp.w	r2,r7
80001c46:	5f 39       	srlo	r9
80001c48:	e4 07 01 08 	sub	r8,r2,r7
80001c4c:	58 f8       	cp.w	r8,15
80001c4e:	5f aa       	srle	r10
80001c50:	f5 e9 10 09 	or	r9,r10,r9
80001c54:	e0 80 00 a2 	breq	80001d98 <_malloc_r+0x42c>
80001c58:	4c 88       	lddpc	r8,80001d78 <_malloc_r+0x40c>
80001c5a:	70 01       	ld.w	r1,r8[0x0]
80001c5c:	4c 88       	lddpc	r8,80001d7c <_malloc_r+0x410>
80001c5e:	2f 01       	sub	r1,-16
80001c60:	70 08       	ld.w	r8,r8[0x0]
80001c62:	0e 01       	add	r1,r7
80001c64:	5b f8       	cp.w	r8,-1
80001c66:	c0 40       	breq	80001c6e <_malloc_r+0x302>
80001c68:	28 11       	sub	r1,-127
80001c6a:	e0 11 ff 80 	andl	r1,0xff80
80001c6e:	02 9b       	mov	r11,r1
80001c70:	0a 9c       	mov	r12,r5
80001c72:	f0 1f 00 44 	mcall	80001d80 <_malloc_r+0x414>
80001c76:	18 96       	mov	r6,r12
80001c78:	5b fc       	cp.w	r12,-1
80001c7a:	c6 e0       	breq	80001d56 <_malloc_r+0x3ea>
80001c7c:	e6 02 00 08 	add	r8,r3,r2
80001c80:	10 3c       	cp.w	r12,r8
80001c82:	c0 32       	brcc	80001c88 <_malloc_r+0x31c>
80001c84:	08 33       	cp.w	r3,r4
80001c86:	c6 81       	brne	80001d56 <_malloc_r+0x3ea>
80001c88:	4b fa       	lddpc	r10,80001d84 <_malloc_r+0x418>
80001c8a:	74 09       	ld.w	r9,r10[0x0]
80001c8c:	e2 09 00 09 	add	r9,r1,r9
80001c90:	95 09       	st.w	r10[0x0],r9
80001c92:	10 36       	cp.w	r6,r8
80001c94:	c0 a1       	brne	80001ca8 <_malloc_r+0x33c>
80001c96:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80001c9a:	c0 71       	brne	80001ca8 <_malloc_r+0x33c>
80001c9c:	e2 02 00 02 	add	r2,r1,r2
80001ca0:	68 28       	ld.w	r8,r4[0x8]
80001ca2:	a1 a2       	sbr	r2,0x0
80001ca4:	91 12       	st.w	r8[0x4],r2
80001ca6:	c4 c8       	rjmp	80001d3e <_malloc_r+0x3d2>
80001ca8:	4b 5a       	lddpc	r10,80001d7c <_malloc_r+0x410>
80001caa:	74 0b       	ld.w	r11,r10[0x0]
80001cac:	5b fb       	cp.w	r11,-1
80001cae:	c0 31       	brne	80001cb4 <_malloc_r+0x348>
80001cb0:	95 06       	st.w	r10[0x0],r6
80001cb2:	c0 68       	rjmp	80001cbe <_malloc_r+0x352>
80001cb4:	ec 09 00 09 	add	r9,r6,r9
80001cb8:	4b 3a       	lddpc	r10,80001d84 <_malloc_r+0x418>
80001cba:	10 19       	sub	r9,r8
80001cbc:	95 09       	st.w	r10[0x0],r9
80001cbe:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80001cc2:	f0 09 11 08 	rsub	r9,r8,8
80001cc6:	58 08       	cp.w	r8,0
80001cc8:	f2 08 17 10 	movne	r8,r9
80001ccc:	ed d8 e1 06 	addne	r6,r6,r8
80001cd0:	28 08       	sub	r8,-128
80001cd2:	ec 01 00 01 	add	r1,r6,r1
80001cd6:	0a 9c       	mov	r12,r5
80001cd8:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80001cdc:	f0 01 01 01 	sub	r1,r8,r1
80001ce0:	02 9b       	mov	r11,r1
80001ce2:	f0 1f 00 28 	mcall	80001d80 <_malloc_r+0x414>
80001ce6:	4a 88       	lddpc	r8,80001d84 <_malloc_r+0x418>
80001ce8:	5b fc       	cp.w	r12,-1
80001cea:	ec 0c 17 00 	moveq	r12,r6
80001cee:	f9 b1 00 00 	moveq	r1,0
80001cf2:	70 09       	ld.w	r9,r8[0x0]
80001cf4:	0c 1c       	sub	r12,r6
80001cf6:	89 26       	st.w	r4[0x8],r6
80001cf8:	02 0c       	add	r12,r1
80001cfa:	12 01       	add	r1,r9
80001cfc:	a1 ac       	sbr	r12,0x0
80001cfe:	91 01       	st.w	r8[0x0],r1
80001d00:	8d 1c       	st.w	r6[0x4],r12
80001d02:	08 33       	cp.w	r3,r4
80001d04:	c1 d0       	breq	80001d3e <_malloc_r+0x3d2>
80001d06:	58 f2       	cp.w	r2,15
80001d08:	e0 8b 00 05 	brhi	80001d12 <_malloc_r+0x3a6>
80001d0c:	30 18       	mov	r8,1
80001d0e:	8d 18       	st.w	r6[0x4],r8
80001d10:	c2 38       	rjmp	80001d56 <_malloc_r+0x3ea>
80001d12:	30 59       	mov	r9,5
80001d14:	20 c2       	sub	r2,12
80001d16:	e0 12 ff f8 	andl	r2,0xfff8
80001d1a:	e6 02 00 08 	add	r8,r3,r2
80001d1e:	91 29       	st.w	r8[0x8],r9
80001d20:	91 19       	st.w	r8[0x4],r9
80001d22:	66 18       	ld.w	r8,r3[0x4]
80001d24:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001d28:	e5 e8 10 08 	or	r8,r2,r8
80001d2c:	87 18       	st.w	r3[0x4],r8
80001d2e:	58 f2       	cp.w	r2,15
80001d30:	e0 88 00 07 	brls	80001d3e <_malloc_r+0x3d2>
80001d34:	e6 cb ff f8 	sub	r11,r3,-8
80001d38:	0a 9c       	mov	r12,r5
80001d3a:	f0 1f 00 14 	mcall	80001d88 <_malloc_r+0x41c>
80001d3e:	49 49       	lddpc	r9,80001d8c <_malloc_r+0x420>
80001d40:	72 0a       	ld.w	r10,r9[0x0]
80001d42:	49 18       	lddpc	r8,80001d84 <_malloc_r+0x418>
80001d44:	70 08       	ld.w	r8,r8[0x0]
80001d46:	14 38       	cp.w	r8,r10
80001d48:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001d4c:	49 19       	lddpc	r9,80001d90 <_malloc_r+0x424>
80001d4e:	72 0a       	ld.w	r10,r9[0x0]
80001d50:	14 38       	cp.w	r8,r10
80001d52:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001d56:	68 28       	ld.w	r8,r4[0x8]
80001d58:	70 18       	ld.w	r8,r8[0x4]
80001d5a:	e0 18 ff fc 	andl	r8,0xfffc
80001d5e:	0e 38       	cp.w	r8,r7
80001d60:	5f 39       	srlo	r9
80001d62:	0e 18       	sub	r8,r7
80001d64:	58 f8       	cp.w	r8,15
80001d66:	5f aa       	srle	r10
80001d68:	f5 e9 10 09 	or	r9,r10,r9
80001d6c:	c1 60       	breq	80001d98 <_malloc_r+0x42c>
80001d6e:	0a 9c       	mov	r12,r5
80001d70:	f0 1f 00 09 	mcall	80001d94 <_malloc_r+0x428>
80001d74:	d8 3a       	popm	r0-r7,pc,r12=0
80001d76:	00 00       	add	r0,r0
80001d78:	00 00       	add	r0,r0
80001d7a:	05 a0       	ld.ub	r0,r2[0x2]
80001d7c:	00 00       	add	r0,r0
80001d7e:	05 10       	ld.sh	r0,r2++
80001d80:	80 00       	ld.sh	r0,r0[0x0]
80001d82:	1d d0       	ld.ub	r0,lr[0x5]
80001d84:	00 00       	add	r0,r0
80001d86:	05 a4       	ld.ub	r4,r2[0x2]
80001d88:	80 00       	ld.sh	r0,r0[0x0]
80001d8a:	1e ec       	st.h	--pc,r12
80001d8c:	00 00       	add	r0,r0
80001d8e:	05 9c       	ld.ub	r12,r2[0x1]
80001d90:	00 00       	add	r0,r0
80001d92:	05 98       	ld.ub	r8,r2[0x1]
80001d94:	80 00       	ld.sh	r0,r0[0x0]
80001d96:	1d cc       	ld.ub	r12,lr[0x4]
80001d98:	68 26       	ld.w	r6,r4[0x8]
80001d9a:	a1 a8       	sbr	r8,0x0
80001d9c:	0e 99       	mov	r9,r7
80001d9e:	a1 a9       	sbr	r9,0x0
80001da0:	8d 19       	st.w	r6[0x4],r9
80001da2:	ec 07 00 07 	add	r7,r6,r7
80001da6:	0a 9c       	mov	r12,r5
80001da8:	89 27       	st.w	r4[0x8],r7
80001daa:	8f 18       	st.w	r7[0x4],r8
80001dac:	f0 1f 00 03 	mcall	80001db8 <_malloc_r+0x44c>
80001db0:	ec cc ff f8 	sub	r12,r6,-8
80001db4:	d8 32       	popm	r0-r7,pc
80001db6:	00 00       	add	r0,r0
80001db8:	80 00       	ld.sh	r0,r0[0x0]
80001dba:	1d cc       	ld.ub	r12,lr[0x4]

80001dbc <memset>:
80001dbc:	18 98       	mov	r8,r12
80001dbe:	c0 38       	rjmp	80001dc4 <memset+0x8>
80001dc0:	10 cb       	st.b	r8++,r11
80001dc2:	20 1a       	sub	r10,1
80001dc4:	58 0a       	cp.w	r10,0
80001dc6:	cf d1       	brne	80001dc0 <memset+0x4>
80001dc8:	5e fc       	retal	r12

80001dca <__malloc_lock>:
80001dca:	5e fc       	retal	r12

80001dcc <__malloc_unlock>:
80001dcc:	5e fc       	retal	r12
80001dce:	d7 03       	nop

80001dd0 <_sbrk_r>:
80001dd0:	d4 21       	pushm	r4-r7,lr
80001dd2:	30 08       	mov	r8,0
80001dd4:	18 97       	mov	r7,r12
80001dd6:	48 76       	lddpc	r6,80001df0 <_sbrk_r+0x20>
80001dd8:	16 9c       	mov	r12,r11
80001dda:	8d 08       	st.w	r6[0x0],r8
80001ddc:	f0 1f 00 06 	mcall	80001df4 <_sbrk_r+0x24>
80001de0:	5b fc       	cp.w	r12,-1
80001de2:	c0 51       	brne	80001dec <_sbrk_r+0x1c>
80001de4:	6c 08       	ld.w	r8,r6[0x0]
80001de6:	58 08       	cp.w	r8,0
80001de8:	ef f8 1a 03 	st.wne	r7[0xc],r8
80001dec:	d8 22       	popm	r4-r7,pc
80001dee:	00 00       	add	r0,r0
80001df0:	00 00       	add	r0,r0
80001df2:	06 dc       	st.w	--r3,r12
80001df4:	80 00       	ld.sh	r0,r0[0x0]
80001df6:	1d f8       	ld.ub	r8,lr[0x7]

80001df8 <_sbrk>:
80001df8:	d4 01       	pushm	lr
80001dfa:	48 c8       	lddpc	r8,80001e28 <_sbrk+0x30>
80001dfc:	70 09       	ld.w	r9,r8[0x0]
80001dfe:	58 09       	cp.w	r9,0
80001e00:	c0 31       	brne	80001e06 <_sbrk+0xe>
80001e02:	48 b9       	lddpc	r9,80001e2c <_sbrk+0x34>
80001e04:	91 09       	st.w	r8[0x0],r9
80001e06:	48 99       	lddpc	r9,80001e28 <_sbrk+0x30>
80001e08:	48 aa       	lddpc	r10,80001e30 <_sbrk+0x38>
80001e0a:	72 08       	ld.w	r8,r9[0x0]
80001e0c:	f0 0c 00 0c 	add	r12,r8,r12
80001e10:	14 3c       	cp.w	r12,r10
80001e12:	e0 8b 00 04 	brhi	80001e1a <_sbrk+0x22>
80001e16:	93 0c       	st.w	r9[0x0],r12
80001e18:	c0 68       	rjmp	80001e24 <_sbrk+0x2c>
80001e1a:	f0 1f 00 07 	mcall	80001e34 <_sbrk+0x3c>
80001e1e:	30 c8       	mov	r8,12
80001e20:	99 08       	st.w	r12[0x0],r8
80001e22:	3f f8       	mov	r8,-1
80001e24:	10 9c       	mov	r12,r8
80001e26:	d8 02       	popm	pc
80001e28:	00 00       	add	r0,r0
80001e2a:	05 cc       	ld.ub	r12,r2[0x4]
80001e2c:	00 00       	add	r0,r0
80001e2e:	06 e0       	st.h	--r3,r0
80001e30:	00 00       	add	r0,r0
80001e32:	e0 00       	*unknown*
80001e34:	80 00       	ld.sh	r0,r0[0x0]
80001e36:	1e 38       	cp.w	r8,pc

80001e38 <__errno>:
80001e38:	48 28       	lddpc	r8,80001e40 <__errno+0x8>
80001e3a:	70 0c       	ld.w	r12,r8[0x0]
80001e3c:	2f 4c       	sub	r12,-12
80001e3e:	5e fc       	retal	r12
80001e40:	00 00       	add	r0,r0
80001e42:	01 00       	ld.w	r0,r0++

80001e44 <_malloc_trim_r>:
80001e44:	d4 21       	pushm	r4-r7,lr
80001e46:	16 95       	mov	r5,r11
80001e48:	18 97       	mov	r7,r12
80001e4a:	f0 1f 00 23 	mcall	80001ed4 <_malloc_trim_r+0x90>
80001e4e:	4a 34       	lddpc	r4,80001ed8 <_malloc_trim_r+0x94>
80001e50:	68 28       	ld.w	r8,r4[0x8]
80001e52:	70 16       	ld.w	r6,r8[0x4]
80001e54:	e0 16 ff fc 	andl	r6,0xfffc
80001e58:	ec c8 ff 91 	sub	r8,r6,-111
80001e5c:	f0 05 01 05 	sub	r5,r8,r5
80001e60:	e0 15 ff 80 	andl	r5,0xff80
80001e64:	ea c5 00 80 	sub	r5,r5,128
80001e68:	e0 45 00 7f 	cp.w	r5,127
80001e6c:	e0 8a 00 23 	brle	80001eb2 <_malloc_trim_r+0x6e>
80001e70:	30 0b       	mov	r11,0
80001e72:	0e 9c       	mov	r12,r7
80001e74:	f0 1f 00 1a 	mcall	80001edc <_malloc_trim_r+0x98>
80001e78:	68 28       	ld.w	r8,r4[0x8]
80001e7a:	0c 08       	add	r8,r6
80001e7c:	10 3c       	cp.w	r12,r8
80001e7e:	c1 a1       	brne	80001eb2 <_malloc_trim_r+0x6e>
80001e80:	ea 0b 11 00 	rsub	r11,r5,0
80001e84:	0e 9c       	mov	r12,r7
80001e86:	f0 1f 00 16 	mcall	80001edc <_malloc_trim_r+0x98>
80001e8a:	5b fc       	cp.w	r12,-1
80001e8c:	c1 71       	brne	80001eba <_malloc_trim_r+0x76>
80001e8e:	30 0b       	mov	r11,0
80001e90:	0e 9c       	mov	r12,r7
80001e92:	f0 1f 00 13 	mcall	80001edc <_malloc_trim_r+0x98>
80001e96:	68 28       	ld.w	r8,r4[0x8]
80001e98:	f8 08 01 09 	sub	r9,r12,r8
80001e9c:	58 f9       	cp.w	r9,15
80001e9e:	e0 8a 00 0a 	brle	80001eb2 <_malloc_trim_r+0x6e>
80001ea2:	a1 a9       	sbr	r9,0x0
80001ea4:	91 19       	st.w	r8[0x4],r9
80001ea6:	48 f8       	lddpc	r8,80001ee0 <_malloc_trim_r+0x9c>
80001ea8:	70 09       	ld.w	r9,r8[0x0]
80001eaa:	48 f8       	lddpc	r8,80001ee4 <_malloc_trim_r+0xa0>
80001eac:	f8 09 01 09 	sub	r9,r12,r9
80001eb0:	91 09       	st.w	r8[0x0],r9
80001eb2:	0e 9c       	mov	r12,r7
80001eb4:	f0 1f 00 0d 	mcall	80001ee8 <_malloc_trim_r+0xa4>
80001eb8:	d8 2a       	popm	r4-r7,pc,r12=0
80001eba:	68 28       	ld.w	r8,r4[0x8]
80001ebc:	0a 16       	sub	r6,r5
80001ebe:	a1 a6       	sbr	r6,0x0
80001ec0:	91 16       	st.w	r8[0x4],r6
80001ec2:	48 98       	lddpc	r8,80001ee4 <_malloc_trim_r+0xa0>
80001ec4:	70 09       	ld.w	r9,r8[0x0]
80001ec6:	0a 19       	sub	r9,r5
80001ec8:	0e 9c       	mov	r12,r7
80001eca:	91 09       	st.w	r8[0x0],r9
80001ecc:	f0 1f 00 07 	mcall	80001ee8 <_malloc_trim_r+0xa4>
80001ed0:	da 2a       	popm	r4-r7,pc,r12=1
80001ed2:	00 00       	add	r0,r0
80001ed4:	80 00       	ld.sh	r0,r0[0x0]
80001ed6:	1d ca       	ld.ub	r10,lr[0x4]
80001ed8:	00 00       	add	r0,r0
80001eda:	01 04       	ld.w	r4,r0++
80001edc:	80 00       	ld.sh	r0,r0[0x0]
80001ede:	1d d0       	ld.ub	r0,lr[0x5]
80001ee0:	00 00       	add	r0,r0
80001ee2:	05 10       	ld.sh	r0,r2++
80001ee4:	00 00       	add	r0,r0
80001ee6:	05 a4       	ld.ub	r4,r2[0x2]
80001ee8:	80 00       	ld.sh	r0,r0[0x0]
80001eea:	1d cc       	ld.ub	r12,lr[0x4]

80001eec <_free_r>:
80001eec:	d4 21       	pushm	r4-r7,lr
80001eee:	16 96       	mov	r6,r11
80001ef0:	18 97       	mov	r7,r12
80001ef2:	58 0b       	cp.w	r11,0
80001ef4:	e0 80 00 c8 	breq	80002084 <_free_r+0x198>
80001ef8:	f0 1f 00 4c 	mcall	80002028 <_free_r+0x13c>
80001efc:	20 86       	sub	r6,8
80001efe:	4c ca       	lddpc	r10,8000202c <_free_r+0x140>
80001f00:	6c 18       	ld.w	r8,r6[0x4]
80001f02:	74 2e       	ld.w	lr,r10[0x8]
80001f04:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001f08:	a1 c8       	cbr	r8,0x0
80001f0a:	ec 08 00 09 	add	r9,r6,r8
80001f0e:	72 1b       	ld.w	r11,r9[0x4]
80001f10:	e0 1b ff fc 	andl	r11,0xfffc
80001f14:	1c 39       	cp.w	r9,lr
80001f16:	c1 d1       	brne	80001f50 <_free_r+0x64>
80001f18:	f6 08 00 08 	add	r8,r11,r8
80001f1c:	58 0c       	cp.w	r12,0
80001f1e:	c0 81       	brne	80001f2e <_free_r+0x42>
80001f20:	6c 09       	ld.w	r9,r6[0x0]
80001f22:	12 16       	sub	r6,r9
80001f24:	12 08       	add	r8,r9
80001f26:	6c 3b       	ld.w	r11,r6[0xc]
80001f28:	6c 29       	ld.w	r9,r6[0x8]
80001f2a:	97 29       	st.w	r11[0x8],r9
80001f2c:	93 3b       	st.w	r9[0xc],r11
80001f2e:	10 99       	mov	r9,r8
80001f30:	95 26       	st.w	r10[0x8],r6
80001f32:	a1 a9       	sbr	r9,0x0
80001f34:	8d 19       	st.w	r6[0x4],r9
80001f36:	4b f9       	lddpc	r9,80002030 <_free_r+0x144>
80001f38:	72 09       	ld.w	r9,r9[0x0]
80001f3a:	12 38       	cp.w	r8,r9
80001f3c:	c0 63       	brcs	80001f48 <_free_r+0x5c>
80001f3e:	4b e8       	lddpc	r8,80002034 <_free_r+0x148>
80001f40:	0e 9c       	mov	r12,r7
80001f42:	70 0b       	ld.w	r11,r8[0x0]
80001f44:	f0 1f 00 3d 	mcall	80002038 <_free_r+0x14c>
80001f48:	0e 9c       	mov	r12,r7
80001f4a:	f0 1f 00 3d 	mcall	8000203c <_free_r+0x150>
80001f4e:	d8 22       	popm	r4-r7,pc
80001f50:	93 1b       	st.w	r9[0x4],r11
80001f52:	58 0c       	cp.w	r12,0
80001f54:	c0 30       	breq	80001f5a <_free_r+0x6e>
80001f56:	30 0c       	mov	r12,0
80001f58:	c1 08       	rjmp	80001f78 <_free_r+0x8c>
80001f5a:	6c 0e       	ld.w	lr,r6[0x0]
80001f5c:	f4 c5 ff f8 	sub	r5,r10,-8
80001f60:	1c 16       	sub	r6,lr
80001f62:	1c 08       	add	r8,lr
80001f64:	6c 2e       	ld.w	lr,r6[0x8]
80001f66:	0a 3e       	cp.w	lr,r5
80001f68:	f9 bc 00 01 	moveq	r12,1
80001f6c:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001f70:	eb fe 1a 02 	st.wne	r5[0x8],lr
80001f74:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001f78:	f2 0b 00 0e 	add	lr,r9,r11
80001f7c:	7c 1e       	ld.w	lr,lr[0x4]
80001f7e:	ed be 00 00 	bld	lr,0x0
80001f82:	c1 30       	breq	80001fa8 <_free_r+0xbc>
80001f84:	16 08       	add	r8,r11
80001f86:	58 0c       	cp.w	r12,0
80001f88:	c0 c1       	brne	80001fa0 <_free_r+0xb4>
80001f8a:	4a 9e       	lddpc	lr,8000202c <_free_r+0x140>
80001f8c:	72 2b       	ld.w	r11,r9[0x8]
80001f8e:	2f 8e       	sub	lr,-8
80001f90:	1c 3b       	cp.w	r11,lr
80001f92:	c0 71       	brne	80001fa0 <_free_r+0xb4>
80001f94:	97 36       	st.w	r11[0xc],r6
80001f96:	97 26       	st.w	r11[0x8],r6
80001f98:	8d 2b       	st.w	r6[0x8],r11
80001f9a:	8d 3b       	st.w	r6[0xc],r11
80001f9c:	30 1c       	mov	r12,1
80001f9e:	c0 58       	rjmp	80001fa8 <_free_r+0xbc>
80001fa0:	72 2b       	ld.w	r11,r9[0x8]
80001fa2:	72 39       	ld.w	r9,r9[0xc]
80001fa4:	93 2b       	st.w	r9[0x8],r11
80001fa6:	97 39       	st.w	r11[0xc],r9
80001fa8:	10 99       	mov	r9,r8
80001faa:	ec 08 09 08 	st.w	r6[r8],r8
80001fae:	a1 a9       	sbr	r9,0x0
80001fb0:	8d 19       	st.w	r6[0x4],r9
80001fb2:	58 0c       	cp.w	r12,0
80001fb4:	c6 51       	brne	8000207e <_free_r+0x192>
80001fb6:	e0 48 01 ff 	cp.w	r8,511
80001fba:	e0 8b 00 13 	brhi	80001fe0 <_free_r+0xf4>
80001fbe:	a3 98       	lsr	r8,0x3
80001fc0:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001fc4:	72 2b       	ld.w	r11,r9[0x8]
80001fc6:	8d 39       	st.w	r6[0xc],r9
80001fc8:	8d 2b       	st.w	r6[0x8],r11
80001fca:	97 36       	st.w	r11[0xc],r6
80001fcc:	93 26       	st.w	r9[0x8],r6
80001fce:	a3 48       	asr	r8,0x2
80001fd0:	74 19       	ld.w	r9,r10[0x4]
80001fd2:	30 1b       	mov	r11,1
80001fd4:	f6 08 09 48 	lsl	r8,r11,r8
80001fd8:	f3 e8 10 08 	or	r8,r9,r8
80001fdc:	95 18       	st.w	r10[0x4],r8
80001fde:	c5 08       	rjmp	8000207e <_free_r+0x192>
80001fe0:	f0 0b 16 09 	lsr	r11,r8,0x9
80001fe4:	58 4b       	cp.w	r11,4
80001fe6:	e0 8b 00 06 	brhi	80001ff2 <_free_r+0x106>
80001fea:	f0 0b 16 06 	lsr	r11,r8,0x6
80001fee:	2c 8b       	sub	r11,-56
80001ff0:	c2 b8       	rjmp	80002046 <_free_r+0x15a>
80001ff2:	59 4b       	cp.w	r11,20
80001ff4:	e0 8b 00 04 	brhi	80001ffc <_free_r+0x110>
80001ff8:	2a 5b       	sub	r11,-91
80001ffa:	c2 68       	rjmp	80002046 <_free_r+0x15a>
80001ffc:	e0 4b 00 54 	cp.w	r11,84
80002000:	e0 8b 00 06 	brhi	8000200c <_free_r+0x120>
80002004:	f0 0b 16 0c 	lsr	r11,r8,0xc
80002008:	29 2b       	sub	r11,-110
8000200a:	c1 e8       	rjmp	80002046 <_free_r+0x15a>
8000200c:	e0 4b 01 54 	cp.w	r11,340
80002010:	e0 8b 00 06 	brhi	8000201c <_free_r+0x130>
80002014:	f0 0b 16 0f 	lsr	r11,r8,0xf
80002018:	28 9b       	sub	r11,-119
8000201a:	c1 68       	rjmp	80002046 <_free_r+0x15a>
8000201c:	e0 4b 05 54 	cp.w	r11,1364
80002020:	e0 88 00 10 	brls	80002040 <_free_r+0x154>
80002024:	37 eb       	mov	r11,126
80002026:	c1 08       	rjmp	80002046 <_free_r+0x15a>
80002028:	80 00       	ld.sh	r0,r0[0x0]
8000202a:	1d ca       	ld.ub	r10,lr[0x4]
8000202c:	00 00       	add	r0,r0
8000202e:	01 04       	ld.w	r4,r0++
80002030:	00 00       	add	r0,r0
80002032:	05 0c       	ld.w	r12,r2++
80002034:	00 00       	add	r0,r0
80002036:	05 a0       	ld.ub	r0,r2[0x2]
80002038:	80 00       	ld.sh	r0,r0[0x0]
8000203a:	1e 44       	or	r4,pc
8000203c:	80 00       	ld.sh	r0,r0[0x0]
8000203e:	1d cc       	ld.ub	r12,lr[0x4]
80002040:	f0 0b 16 12 	lsr	r11,r8,0x12
80002044:	28 4b       	sub	r11,-124
80002046:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000204a:	78 29       	ld.w	r9,r12[0x8]
8000204c:	18 39       	cp.w	r9,r12
8000204e:	c0 e1       	brne	8000206a <_free_r+0x17e>
80002050:	74 18       	ld.w	r8,r10[0x4]
80002052:	a3 4b       	asr	r11,0x2
80002054:	30 1c       	mov	r12,1
80002056:	f8 0b 09 4b 	lsl	r11,r12,r11
8000205a:	f1 eb 10 0b 	or	r11,r8,r11
8000205e:	12 98       	mov	r8,r9
80002060:	95 1b       	st.w	r10[0x4],r11
80002062:	c0 a8       	rjmp	80002076 <_free_r+0x18a>
80002064:	72 29       	ld.w	r9,r9[0x8]
80002066:	18 39       	cp.w	r9,r12
80002068:	c0 60       	breq	80002074 <_free_r+0x188>
8000206a:	72 1a       	ld.w	r10,r9[0x4]
8000206c:	e0 1a ff fc 	andl	r10,0xfffc
80002070:	14 38       	cp.w	r8,r10
80002072:	cf 93       	brcs	80002064 <_free_r+0x178>
80002074:	72 38       	ld.w	r8,r9[0xc]
80002076:	8d 38       	st.w	r6[0xc],r8
80002078:	8d 29       	st.w	r6[0x8],r9
8000207a:	93 36       	st.w	r9[0xc],r6
8000207c:	91 26       	st.w	r8[0x8],r6
8000207e:	0e 9c       	mov	r12,r7
80002080:	f0 1f 00 02 	mcall	80002088 <_free_r+0x19c>
80002084:	d8 22       	popm	r4-r7,pc
80002086:	00 00       	add	r0,r0
80002088:	80 00       	ld.sh	r0,r0[0x0]
8000208a:	1d cc       	ld.ub	r12,lr[0x4]

Disassembly of section .exception:

80002200 <_evba>:
	...

80002228 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80002228:	c7 a8       	rjmp	8000231c <privilegedCalls>
	...

80002300 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80002300:	1c 9f       	mov	pc,lr

80002302 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80002302:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80002306:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
8000230a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
8000230e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80002312:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80002314:	c0 31       	brne	8000231a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80002316:	4b 9c       	lddpc	r12,800023f8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80002318:	18 9f       	mov	pc,r12

8000231a <_int0_exit>:
_int0_exit:
	rete
8000231a:	d6 03       	rete

8000231c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
8000231c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
8000231e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80002320:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80002322:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80002324:	9b 3c       	st.w	sp[0xc],r12

80002326 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80002326:	4b 6c       	lddpc	r12,800023fc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80002328:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
8000232a:	c0 61       	brne	80002336 <priv_interruptenable>
	ld.w r12,sp[USERSR]
8000232c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
8000232e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80002330:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002332:	d3 02       	popm	r11-r12
	rete
80002334:	d6 03       	rete

80002336 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80002336:	4b 3c       	lddpc	r12,80002400 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80002338:	18 3b       	cp.w	r11,r12
	brne privexception
8000233a:	c0 61       	brne	80002346 <privexception>
	ld.w r12,sp[USERSR]
8000233c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
8000233e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80002340:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002342:	d3 02       	popm	r11-r12
	rete
80002344:	d6 03       	rete

80002346 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80002346:	c0 08       	rjmp	80002346 <privexception>

80002348 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80002348:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
8000234a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
8000234e:	4a ec       	lddpc	r12,80002404 <contextRestoreFromISR+0x4c>
	sub r11,r12
80002350:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80002352:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80002354:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80002358:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
8000235c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80002360:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80002362:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80002364:	1c 9f       	mov	pc,lr

80002366 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80002366:	d3 03       	ssrf	0x10
	mov pc,lr
80002368:	1c 9f       	mov	pc,lr

8000236a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
8000236a:	d5 03       	csrf	0x10
	mov pc,lr
8000236c:	1c 9f       	mov	pc,lr

8000236e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
8000236e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80002372:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80002374:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80002378:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
8000237c:	1c 9f       	mov	pc,lr

8000237e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000237e:	4a 3c       	lddpc	r12,80002408 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80002380:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80002382:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80002384:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80002386:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80002388:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
8000238a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
8000238c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
8000238e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80002390:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80002392:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80002394:	33 40       	mov	r0,52
	add r0,r12
80002396:	18 00       	add	r0,r12
	stmts r0,r0-r11
80002398:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
8000239c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
8000239e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
800023a2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
800023a4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
800023a6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
800023a8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
800023aa:	1a 90       	mov	r0,sp
	st.w --sp,r0
800023ac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800023ae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
800023b2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
800023b4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
800023b6:	1c 9f       	mov	pc,lr

800023b8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800023b8:	49 4c       	lddpc	r12,80002408 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
800023ba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
800023bc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800023be:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800023c0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
800023c4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
800023c6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
800023c8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800023ca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
800023cc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800023ce:	33 40       	mov	r0,52
	add r0,r12
800023d0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800023d2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800023d6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
800023d8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
800023da:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
800023dc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
800023de:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
800023e0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
800023e2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
800023e4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
800023e6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
800023e8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800023ea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
800023ec:	d4 01       	pushm	lr
	call timerStart
800023ee:	f0 1f 00 08 	mcall	8000240c <contextRestoreFromISR+0x54>
	popm lr
800023f2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
800023f4:	1c 9f       	mov	pc,lr
800023f6:	00 00       	add	r0,r0
800023f8:	80 00       	ld.sh	r0,r0[0x0]
800023fa:	0f 74       	ld.ub	r4,--r7
800023fc:	80 00       	ld.sh	r0,r0[0x0]
800023fe:	23 66       	sub	r6,54
80002400:	80 00       	ld.sh	r0,r0[0x0]
80002402:	23 6a       	sub	r10,54
80002404:	80 00       	ld.sh	r0,r0[0x0]
80002406:	22 00       	sub	r0,32
80002408:	00 00       	add	r0,r0
8000240a:	06 58       	eor	r8,r3
8000240c:	80 00       	ld.sh	r0,r0[0x0]
8000240e:	17 d2       	ld.ub	r2,r11[0x5]
	...
