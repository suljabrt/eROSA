
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001984  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001a00  80001a00  00001e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80001e00  80001e00  00002200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80001e84  80001e84  00002284  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80001e88  00002408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002394  00002914  2**0
                  ALLOC
  9 .bss          00000098  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000da50  000005b0  000005b0  00000000  2**0
                  ALLOC
 11 .comment      000000a0  00000000  00000000  00002914  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000005b0  00000000  00000000  000029b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 000009bb  00000000  00000000  00002f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c51e  00000000  00000000  00003923  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00002088  00000000  00000000  0000fe41  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004776  00000000  00000000  00011ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000c04  00000000  00000000  00016640  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001c6e  00000000  00000000  00017244  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000018bf  00000000  00000000  00018eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00534509  00000000  00000000  0001a771  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 000004f8  00000000  00000000  0054ec7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	11 5c       	ld.sh	r12,--r8

Disassembly of section .text:

80000008 <ROSA_semaphoreCreate>:
 *
 * Comment:
 * 	Create a semaphore
 *
 **********************************************************/
int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t ** mutex, uint8_t ceiling) {
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 2d       	sub	sp,8
80000010:	ef 4c ff fc 	st.w	r7[-4],r12
80000014:	16 98       	mov	r8,r11
80000016:	ef 68 ff f8 	st.b	r7[-8],r8
	*mutex = (ROSA_semaphoreHandle_t*) malloc(sizeof(ROSA_semaphoreHandle_t*));
8000001a:	30 4c       	mov	r12,4
8000001c:	f0 1f 00 0c 	mcall	8000004c <ROSA_semaphoreCreate+0x44>
80000020:	18 98       	mov	r8,r12
80000022:	10 99       	mov	r9,r8
80000024:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000028:	91 09       	st.w	r8[0x0],r9
	(*mutex)->holder = NULL;
8000002a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000002e:	70 08       	ld.w	r8,r8[0x0]
80000030:	30 09       	mov	r9,0
80000032:	91 09       	st.w	r8[0x0],r9
	(*mutex)->ceiling = ceiling;
80000034:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000038:	70 09       	ld.w	r9,r8[0x0]
8000003a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000003e:	b2 c8       	st.b	r9[0x4],r8
	
	return 0;
80000040:	30 08       	mov	r8,0
}
80000042:	10 9c       	mov	r12,r8
80000044:	2f ed       	sub	sp,-8
80000046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000004a:	00 00       	add	r0,r0
8000004c:	80 00       	ld.sh	r0,r0[0x0]
8000004e:	12 54       	eor	r4,r9

80000050 <ROSA_semaphoreLock>:
 *
 * Comment:
 * 	Lock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t ** mutex) {
80000050:	eb cd 40 80 	pushm	r7,lr
80000054:	1a 97       	mov	r7,sp
80000056:	20 1d       	sub	sp,4
80000058:	ef 4c ff fc 	st.w	r7[-4],r12
	while ((*mutex)->holder != NULL) {
8000005c:	c0 38       	rjmp	80000062 <ROSA_semaphoreLock+0x12>
		ROSA_yield();	
8000005e:	f0 1f 00 0a 	mcall	80000084 <ROSA_semaphoreLock+0x34>
 * Comment:
 * 	Lock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t ** mutex) {
	while ((*mutex)->holder != NULL) {
80000062:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000066:	70 08       	ld.w	r8,r8[0x0]
80000068:	70 08       	ld.w	r8,r8[0x0]
8000006a:	58 08       	cp.w	r8,0
8000006c:	cf 91       	brne	8000005e <ROSA_semaphoreLock+0xe>
		ROSA_yield();	
	}
	
	(*mutex)->holder = EXECTASK;
8000006e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000072:	70 08       	ld.w	r8,r8[0x0]
80000074:	48 59       	lddpc	r9,80000088 <ROSA_semaphoreLock+0x38>
80000076:	72 09       	ld.w	r9,r9[0x0]
80000078:	91 09       	st.w	r8[0x0],r9
	//EXECTASK->priority=mutex->ceiling;
	//*PA[EXECTASK->priority]->nexttcb=mutex->holder;
	// ... raise priority of E
	// ... move it to the corresponded rQi by using priority array.
	
	return 0;
8000007a:	30 08       	mov	r8,0
}
8000007c:	10 9c       	mov	r12,r8
8000007e:	2f fd       	sub	sp,-4
80000080:	e3 cd 80 80 	ldm	sp++,r7,pc
80000084:	80 00       	ld.sh	r0,r0[0x0]
80000086:	06 a6       	st.w	r3++,r6
80000088:	00 00       	add	r0,r0
8000008a:	05 9c       	ld.ub	r12,r2[0x1]

8000008c <ROSA_semaphoreUnlock>:
 *
 * Comment:
 * 	Unlock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreUnlock(ROSA_semaphoreHandle_t ** mutex) {
8000008c:	eb cd 40 80 	pushm	r7,lr
80000090:	1a 97       	mov	r7,sp
80000092:	20 1d       	sub	sp,4
80000094:	ef 4c ff fc 	st.w	r7[-4],r12
	if ((*mutex)->holder == EXECTASK) {
80000098:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000009c:	70 08       	ld.w	r8,r8[0x0]
8000009e:	70 09       	ld.w	r9,r8[0x0]
800000a0:	48 78       	lddpc	r8,800000bc <ROSA_semaphoreUnlock+0x30>
800000a2:	70 08       	ld.w	r8,r8[0x0]
800000a4:	10 39       	cp.w	r9,r8
800000a6:	c0 61       	brne	800000b2 <ROSA_semaphoreUnlock+0x26>
		(*mutex)->holder = NULL;	
800000a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000ac:	70 08       	ld.w	r8,r8[0x0]
800000ae:	30 09       	mov	r9,0
800000b0:	91 09       	st.w	r8[0x0],r9
	}
	
	return 0;
800000b2:	30 08       	mov	r8,0
}
800000b4:	10 9c       	mov	r12,r8
800000b6:	2f fd       	sub	sp,-4
800000b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800000bc:	00 00       	add	r0,r0
800000be:	05 9c       	ld.ub	r12,r2[0x1]

800000c0 <usart_options>:
800000c0:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 31     ............tsk1
800000d0:	00 00 00 00 74 73 6b 32 00 00 00 00 74 73 6b 33     ....tsk2....tsk3
800000e0:	00 00 00 00                                         ....

800000e4 <task1>:
/*************************************************************
 * Task1
 * Blink LED0
 ************************************************************/
void task1(void)
{
800000e4:	eb cd 40 80 	pushm	r7,lr
800000e8:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(&mutex);
800000ea:	48 8c       	lddpc	r12,80000108 <task1+0x24>
800000ec:	f0 1f 00 08 	mcall	8000010c <task1+0x28>
		ledOn(LED0_GPIO);
800000f0:	33 bc       	mov	r12,59
800000f2:	f0 1f 00 08 	mcall	80000110 <task1+0x2c>
		ROSA_delay(500);
800000f6:	e0 6a 01 f4 	mov	r10,500
800000fa:	30 0b       	mov	r11,0
800000fc:	f0 1f 00 06 	mcall	80000114 <task1+0x30>
		ROSA_semaphoreUnlock(&mutex);
80000100:	48 2c       	lddpc	r12,80000108 <task1+0x24>
80000102:	f0 1f 00 06 	mcall	80000118 <task1+0x34>
	}
80000106:	cf 2b       	rjmp	800000ea <task1+0x6>
80000108:	00 00       	add	r0,r0
8000010a:	05 5c       	ld.sh	r12,--r2
8000010c:	80 00       	ld.sh	r0,r0[0x0]
8000010e:	00 50       	eor	r0,r0
80000110:	80 00       	ld.sh	r0,r0[0x0]
80000112:	0d 8c       	ld.ub	r12,r6[0x0]
80000114:	80 00       	ld.sh	r0,r0[0x0]
80000116:	08 a0       	st.w	r4++,r0
80000118:	80 00       	ld.sh	r0,r0[0x0]
8000011a:	00 8c       	andn	r12,r0

8000011c <task3>:
/*************************************************************
 * Task 3
 * Idle
 ************************************************************/
void task3(void)
{
8000011c:	eb cd 40 80 	pushm	r7,lr
80000120:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(&mutex);
80000122:	48 8c       	lddpc	r12,80000140 <task3+0x24>
80000124:	f0 1f 00 08 	mcall	80000144 <task3+0x28>
		ledOff(LED0_GPIO);
80000128:	33 bc       	mov	r12,59
8000012a:	f0 1f 00 08 	mcall	80000148 <task3+0x2c>
		ROSA_delay(500);
8000012e:	e0 6a 01 f4 	mov	r10,500
80000132:	30 0b       	mov	r11,0
80000134:	f0 1f 00 06 	mcall	8000014c <task3+0x30>
		ROSA_semaphoreUnlock(&mutex);
80000138:	48 2c       	lddpc	r12,80000140 <task3+0x24>
8000013a:	f0 1f 00 06 	mcall	80000150 <task3+0x34>
	}
8000013e:	cf 2b       	rjmp	80000122 <task3+0x6>
80000140:	00 00       	add	r0,r0
80000142:	05 5c       	ld.sh	r12,--r2
80000144:	80 00       	ld.sh	r0,r0[0x0]
80000146:	00 50       	eor	r0,r0
80000148:	80 00       	ld.sh	r0,r0[0x0]
8000014a:	0d ac       	ld.ub	r12,r6[0x2]
8000014c:	80 00       	ld.sh	r0,r0[0x0]
8000014e:	08 a0       	st.w	r4++,r0
80000150:	80 00       	ld.sh	r0,r0[0x0]
80000152:	00 8c       	andn	r12,r0

80000154 <task2>:
/*************************************************************
 * Task2
 * Blink LED1
 ************************************************************/
void task2(void)
{
80000154:	eb cd 40 80 	pushm	r7,lr
80000158:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_yield();
8000015a:	f0 1f 00 02 	mcall	80000160 <task2+0xc>
	}
8000015e:	cf eb       	rjmp	8000015a <task2+0x6>
80000160:	80 00       	ld.sh	r0,r0[0x0]
80000162:	06 a6       	st.w	r3++,r6

80000164 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
80000164:	eb cd 40 80 	pushm	r7,lr
80000168:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
8000016a:	f0 1f 00 11 	mcall	800001ac <main+0x48>
	
	//Create tasks and install them into the ROSA kernel
	ROSA_taskCreate(&t1_tcb, "tsk1", task1, T1_STACK_SIZE, 1);
8000016e:	30 18       	mov	r8,1
80000170:	e0 69 01 00 	mov	r9,256
80000174:	48 fa       	lddpc	r10,800001b0 <main+0x4c>
80000176:	49 0b       	lddpc	r11,800001b4 <main+0x50>
80000178:	49 0c       	lddpc	r12,800001b8 <main+0x54>
8000017a:	f0 1f 00 11 	mcall	800001bc <main+0x58>
	ROSA_taskCreate(&t2_tcb, "tsk2", task2, T2_STACK_SIZE, 1);
8000017e:	30 18       	mov	r8,1
80000180:	e0 69 01 00 	mov	r9,256
80000184:	48 fa       	lddpc	r10,800001c0 <main+0x5c>
80000186:	49 0b       	lddpc	r11,800001c4 <main+0x60>
80000188:	49 0c       	lddpc	r12,800001c8 <main+0x64>
8000018a:	f0 1f 00 0d 	mcall	800001bc <main+0x58>
	ROSA_taskCreate(&t3_tcb, "tsk3", task3, T3_STACK_SIZE, 1);
8000018e:	30 18       	mov	r8,1
80000190:	32 09       	mov	r9,32
80000192:	48 fa       	lddpc	r10,800001cc <main+0x68>
80000194:	48 fb       	lddpc	r11,800001d0 <main+0x6c>
80000196:	49 0c       	lddpc	r12,800001d4 <main+0x70>
80000198:	f0 1f 00 09 	mcall	800001bc <main+0x58>
	ROSA_semaphoreCreate(&mutex, 1);
8000019c:	30 1b       	mov	r11,1
8000019e:	48 fc       	lddpc	r12,800001d8 <main+0x74>
800001a0:	f0 1f 00 0f 	mcall	800001dc <main+0x78>
	ROSA_tcbInstall(&t2_tcb);*/

	//Start the ROSA kernel
	//TCBLIST = PA[2]->nexttcb;
	//ROSA_start();
	ROSA_startScheduler();
800001a4:	f0 1f 00 0f 	mcall	800001e0 <main+0x7c>
	//ledOn(LED1_GPIO);
	/* Execution will never return here */
	while(1);
800001a8:	c0 08       	rjmp	800001a8 <main+0x44>
800001aa:	00 00       	add	r0,r0
800001ac:	80 00       	ld.sh	r0,r0[0x0]
800001ae:	03 88       	ld.ub	r8,r1[0x0]
800001b0:	80 00       	ld.sh	r0,r0[0x0]
800001b2:	00 e4       	st.h	--r0,r4
800001b4:	80 00       	ld.sh	r0,r0[0x0]
800001b6:	00 cc       	st.b	r0++,r12
800001b8:	00 00       	add	r0,r0
800001ba:	05 60       	ld.uh	r0,--r2
800001bc:	80 00       	ld.sh	r0,r0[0x0]
800001be:	05 04       	ld.w	r4,r2++
800001c0:	80 00       	ld.sh	r0,r0[0x0]
800001c2:	01 54       	ld.sh	r4,--r0
800001c4:	80 00       	ld.sh	r0,r0[0x0]
800001c6:	00 d4       	st.w	--r0,r4
800001c8:	00 00       	add	r0,r0
800001ca:	05 58       	ld.sh	r8,--r2
800001cc:	80 00       	ld.sh	r0,r0[0x0]
800001ce:	01 1c       	ld.sh	r12,r0++
800001d0:	80 00       	ld.sh	r0,r0[0x0]
800001d2:	00 dc       	st.w	--r0,r12
800001d4:	00 00       	add	r0,r0
800001d6:	05 50       	ld.sh	r0,--r2
800001d8:	00 00       	add	r0,r0
800001da:	05 5c       	ld.sh	r12,--r2
800001dc:	80 00       	ld.sh	r0,r0[0x0]
800001de:	00 08       	add	r8,r0
800001e0:	80 00       	ld.sh	r0,r0[0x0]
800001e2:	07 1c       	ld.sh	r12,r3++

800001e4 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
800001e4:	eb cd 40 80 	pushm	r7,lr
800001e8:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
800001ea:	f0 1f 00 05 	mcall	800001fc <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
800001ee:	f0 1f 00 05 	mcall	80000200 <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it
800001f2:	f0 1f 00 05 	mcall	80000204 <ROSA_yieldFromISR+0x20>
}
800001f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800001fa:	00 00       	add	r0,r0
800001fc:	80 00       	ld.sh	r0,r0[0x0]
800001fe:	1b 7e       	ld.ub	lr,--sp
80000200:	80 00       	ld.sh	r0,r0[0x0]
80000202:	06 c4       	st.b	r3++,r4
80000204:	80 00       	ld.sh	r0,r0[0x0]
80000206:	1b b8       	ld.ub	r8,sp[0x3]

80000208 <usart_options>:
80000208:	00 00 e1 00 08 04 00 00 00 00 00 00                 ............

80000214 <rqi>:
	@brief Inserts the given task into the ready queue by its priority.
	@param th Task structure (tcb structure).
	@return A status code (1 - item has been added to the empty queue, 0 - otherwise).
*/
int rqi(ROSA_taskHandle_t ** pth)
{
80000214:	eb cd 40 80 	pushm	r7,lr
80000218:	1a 97       	mov	r7,sp
8000021a:	20 2d       	sub	sp,8
8000021c:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t priority;
	
	priority = (*pth)->priority;
80000220:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000224:	70 08       	ld.w	r8,r8[0x0]
80000226:	f1 38 00 64 	ld.ub	r8,r8[100]
8000022a:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (PA[priority] == NULL) {
8000022e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000232:	49 d8       	lddpc	r8,800002a4 <rqi+0x90>
80000234:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000238:	58 08       	cp.w	r8,0
8000023a:	c1 41       	brne	80000262 <rqi+0x4e>
		PA[priority] = *pth;
8000023c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000240:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000244:	70 0a       	ld.w	r10,r8[0x0]
80000246:	49 88       	lddpc	r8,800002a4 <rqi+0x90>
80000248:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		PA[priority]->nexttcb = *pth;
8000024c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000250:	49 58       	lddpc	r8,800002a4 <rqi+0x90>
80000252:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000256:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000025a:	72 09       	ld.w	r9,r9[0x0]
8000025c:	91 09       	st.w	r8[0x0],r9
		return 1;
8000025e:	30 18       	mov	r8,1
80000260:	c1 d8       	rjmp	8000029a <rqi+0x86>
	}
	else {
		(*pth)->nexttcb = PA[priority]->nexttcb;
80000262:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000266:	70 08       	ld.w	r8,r8[0x0]
80000268:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000026c:	48 e9       	lddpc	r9,800002a4 <rqi+0x90>
8000026e:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80000272:	72 09       	ld.w	r9,r9[0x0]
80000274:	91 09       	st.w	r8[0x0],r9
		PA[priority]->nexttcb = *pth;
80000276:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000027a:	48 b8       	lddpc	r8,800002a4 <rqi+0x90>
8000027c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000280:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000284:	72 09       	ld.w	r9,r9[0x0]
80000286:	91 09       	st.w	r8[0x0],r9
		PA[priority] = *pth;
80000288:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000028c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000290:	70 0a       	ld.w	r10,r8[0x0]
80000292:	48 58       	lddpc	r8,800002a4 <rqi+0x90>
80000294:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		return 0;
80000298:	30 08       	mov	r8,0
	}
}
8000029a:	10 9c       	mov	r12,r8
8000029c:	2f ed       	sub	sp,-8
8000029e:	e3 cd 80 80 	ldm	sp++,r7,pc
800002a2:	00 00       	add	r0,r0
800002a4:	00 00       	add	r0,r0
800002a6:	05 68       	ld.uh	r8,--r2

800002a8 <rqe>:
	@brief Extracts the given task from the ready queue by its priority.
	@param th Task structure (tcb structure).
	@return A status code (1 - queue is empty after extraction, 0 - otherwise).
*/
int rqe(ROSA_taskHandle_t ** pth)
{
800002a8:	eb cd 40 80 	pushm	r7,lr
800002ac:	1a 97       	mov	r7,sp
800002ae:	20 3d       	sub	sp,12
800002b0:	ef 4c ff f4 	st.w	r7[-12],r12
	ROSA_taskHandle_t * thTmp;
	
	uint8_t priority;
	
	priority = (*pth)->priority;
800002b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002b8:	70 08       	ld.w	r8,r8[0x0]
800002ba:	f1 38 00 64 	ld.ub	r8,r8[100]
800002be:	ef 68 ff ff 	st.b	r7[-1],r8
	thTmp = PA[priority];
800002c2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800002c6:	4a 28       	lddpc	r8,8000034c <rqe+0xa4>
800002c8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800002cc:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if ((*pth)->nexttcb == *pth) 
800002d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002d4:	70 08       	ld.w	r8,r8[0x0]
800002d6:	70 09       	ld.w	r9,r8[0x0]
800002d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002dc:	70 08       	ld.w	r8,r8[0x0]
800002de:	10 39       	cp.w	r9,r8
800002e0:	c0 f1       	brne	800002fe <rqe+0x56>
	{
		PA[priority] = NULL;
800002e2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800002e6:	49 a8       	lddpc	r8,8000034c <rqe+0xa4>
800002e8:	30 0a       	mov	r10,0
800002ea:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		return 1;
800002ee:	30 18       	mov	r8,1
800002f0:	c2 98       	rjmp	80000342 <rqe+0x9a>
	}
	else 
	{
		while (thTmp->nexttcb != (*pth)) 
		{
			thTmp = thTmp->nexttcb;
800002f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002f6:	70 08       	ld.w	r8,r8[0x0]
800002f8:	ef 48 ff f8 	st.w	r7[-8],r8
800002fc:	c0 28       	rjmp	80000300 <rqe+0x58>
		PA[priority] = NULL;
		return 1;
	}
	else 
	{
		while (thTmp->nexttcb != (*pth)) 
800002fe:	d7 03       	nop
80000300:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000304:	70 09       	ld.w	r9,r8[0x0]
80000306:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000030a:	70 08       	ld.w	r8,r8[0x0]
8000030c:	10 39       	cp.w	r9,r8
8000030e:	cf 21       	brne	800002f2 <rqe+0x4a>
		{
			thTmp = thTmp->nexttcb;
		}
		
		if (PA[priority] == *pth) 
80000310:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000314:	48 e8       	lddpc	r8,8000034c <rqe+0xa4>
80000316:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000031a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000031e:	70 08       	ld.w	r8,r8[0x0]
80000320:	10 39       	cp.w	r9,r8
80000322:	c0 81       	brne	80000332 <rqe+0x8a>
		{
			PA[priority] = thTmp;
80000324:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000328:	48 98       	lddpc	r8,8000034c <rqe+0xa4>
8000032a:	ee fa ff f8 	ld.w	r10,r7[-8]
8000032e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		}
		
		thTmp->nexttcb = (*pth)->nexttcb;
80000332:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000336:	70 08       	ld.w	r8,r8[0x0]
80000338:	70 09       	ld.w	r9,r8[0x0]
8000033a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000033e:	91 09       	st.w	r8[0x0],r9
		return 0;
80000340:	30 08       	mov	r8,0
	}
}
80000342:	10 9c       	mov	r12,r8
80000344:	2f dd       	sub	sp,-12
80000346:	e3 cd 80 80 	ldm	sp++,r7,pc
8000034a:	00 00       	add	r0,r0
8000034c:	00 00       	add	r0,r0
8000034e:	05 68       	ld.uh	r8,--r2

80000350 <rqsearch>:
	@brief Search for the first non-empty highest priority queue.
	@return A status code (reserved).
	@todo Check for empty PA.
*/
int rqsearch(void)
{
80000350:	eb cd 40 80 	pushm	r7,lr
80000354:	1a 97       	mov	r7,sp
80000356:	20 1d       	sub	sp,4
	int i = MAXNPRIO;
80000358:	30 c8       	mov	r8,12
8000035a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	while (PA[--i] == NULL) {
8000035e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000362:	20 18       	sub	r8,1
80000364:	ef 48 ff fc 	st.w	r7[-4],r8
80000368:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000036c:	48 68       	lddpc	r8,80000384 <rqsearch+0x34>
8000036e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000372:	58 08       	cp.w	r8,0
80000374:	cf 50       	breq	8000035e <rqsearch+0xe>
		;
	}
	
	return i;
80000376:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000037a:	10 9c       	mov	r12,r8
8000037c:	2f fd       	sub	sp,-4
8000037e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000382:	00 00       	add	r0,r0
80000384:	00 00       	add	r0,r0
80000386:	05 68       	ld.uh	r8,--r2

80000388 <ROSA_init>:

void ROSA_init(void)
{
80000388:	eb cd 40 80 	pushm	r7,lr
8000038c:	1a 97       	mov	r7,sp
8000038e:	20 1d       	sub	sp,4
	int i = 0;
80000390:	30 08       	mov	r8,0
80000392:	ef 48 ff fc 	st.w	r7[-4],r8
	systemTick = 0;
80000396:	4a 0a       	lddpc	r10,80000414 <ROSA_init+0x8c>
80000398:	30 08       	mov	r8,0
8000039a:	30 09       	mov	r9,0
8000039c:	f4 e9 00 00 	st.d	r10[0],r8
	
	//Do initialization of I/O drivers
	ledInit();									//LEDs
800003a0:	f0 1f 00 1e 	mcall	80000418 <ROSA_init+0x90>
	buttonInit();								//Buttons
800003a4:	f0 1f 00 1e 	mcall	8000041c <ROSA_init+0x94>
	joystickInit();								//Joystick
800003a8:	f0 1f 00 1e 	mcall	80000420 <ROSA_init+0x98>
	potInit();									//Potentiometer
800003ac:	f0 1f 00 1e 	mcall	80000424 <ROSA_init+0x9c>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
800003b0:	e0 6a 1b 00 	mov	r10,6912
800003b4:	ea 1a 00 b7 	orh	r10,0xb7
800003b8:	49 cb       	lddpc	r11,80000428 <ROSA_init+0xa0>
800003ba:	fe 7c 14 00 	mov	r12,-60416
800003be:	f0 1f 00 1c 	mcall	8000042c <ROSA_init+0xa4>

	interruptInit();
800003c2:	f0 1f 00 1c 	mcall	80000430 <ROSA_init+0xa8>
	interruptEnable();
800003c6:	f0 1f 00 1c 	mcall	80000434 <ROSA_init+0xac>
	timerInit(1);
800003ca:	30 1c       	mov	r12,1
800003cc:	f0 1f 00 1b 	mcall	80000438 <ROSA_init+0xb0>
	timerStart();
800003d0:	f0 1f 00 1b 	mcall	8000043c <ROSA_init+0xb4>
	
	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
800003d4:	49 b8       	lddpc	r8,80000440 <ROSA_init+0xb8>
800003d6:	30 09       	mov	r9,0
800003d8:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
800003da:	49 b8       	lddpc	r8,80000444 <ROSA_init+0xbc>
800003dc:	30 09       	mov	r9,0
800003de:	91 09       	st.w	r8[0x0],r9
	PREEMPTASK = NULL;
800003e0:	49 a8       	lddpc	r8,80000448 <ROSA_init+0xc0>
800003e2:	30 09       	mov	r9,0
800003e4:	91 09       	st.w	r8[0x0],r9
	
	for (i = 0; i < MAXNPRIO; i++) {
800003e6:	30 08       	mov	r8,0
800003e8:	ef 48 ff fc 	st.w	r7[-4],r8
800003ec:	c0 c8       	rjmp	80000404 <ROSA_init+0x7c>
		PA[i] = NULL;
800003ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
800003f2:	49 78       	lddpc	r8,8000044c <ROSA_init+0xc4>
800003f4:	30 0a       	mov	r10,0
800003f6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
	EXECTASK = NULL;
	PREEMPTASK = NULL;
	
	for (i = 0; i < MAXNPRIO; i++) {
800003fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003fe:	2f f8       	sub	r8,-1
80000400:	ef 48 ff fc 	st.w	r7[-4],r8
80000404:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000408:	58 b8       	cp.w	r8,11
8000040a:	fe 9a ff f2 	brle	800003ee <ROSA_init+0x66>
		PA[i] = NULL;
	}
	
	//Initialize the timer to 1 ms period.
	
}
8000040e:	2f fd       	sub	sp,-4
80000410:	e3 cd 80 80 	ldm	sp++,r7,pc
80000414:	00 00       	add	r0,r0
80000416:	05 a4       	ld.ub	r4,r2[0x2]
80000418:	80 00       	ld.sh	r0,r0[0x0]
8000041a:	0d 00       	ld.w	r0,r6++
8000041c:	80 00       	ld.sh	r0,r0[0x0]
8000041e:	0b 58       	ld.sh	r8,--r5
80000420:	80 00       	ld.sh	r0,r0[0x0]
80000422:	0b 80       	ld.ub	r0,r5[0x0]
80000424:	80 00       	ld.sh	r0,r0[0x0]
80000426:	0d cc       	ld.ub	r12,r6[0x4]
80000428:	80 00       	ld.sh	r0,r0[0x0]
8000042a:	02 08       	add	r8,r1
8000042c:	80 00       	ld.sh	r0,r0[0x0]
8000042e:	0f 80       	ld.ub	r0,r7[0x0]
80000430:	80 00       	ld.sh	r0,r0[0x0]
80000432:	1b 48       	ld.w	r8,--sp
80000434:	80 00       	ld.sh	r0,r0[0x0]
80000436:	1b 6a       	ld.uh	r10,--sp
80000438:	80 00       	ld.sh	r0,r0[0x0]
8000043a:	10 a4       	st.w	r8++,r4
8000043c:	80 00       	ld.sh	r0,r0[0x0]
8000043e:	10 d2       	st.w	--r8,r2
80000440:	00 00       	add	r0,r0
80000442:	05 64       	ld.uh	r4,--r2
80000444:	00 00       	add	r0,r0
80000446:	05 9c       	ld.ub	r12,r2[0x1]
80000448:	00 00       	add	r0,r0
8000044a:	05 98       	ld.ub	r8,r2[0x1]
8000044c:	00 00       	add	r0,r0
8000044e:	05 68       	ld.uh	r8,--r2

80000450 <ROSA_tcbCreate>:

void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
80000450:	eb cd 40 80 	pushm	r7,lr
80000454:	1a 97       	mov	r7,sp
80000456:	20 6d       	sub	sp,24
80000458:	ef 4c ff f8 	st.w	r7[-8],r12
8000045c:	ef 4b ff f4 	st.w	r7[-12],r11
80000460:	ef 4a ff f0 	st.w	r7[-16],r10
80000464:	ef 49 ff ec 	st.w	r7[-20],r9
80000468:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
8000046c:	30 08       	mov	r8,0
8000046e:	ef 48 ff fc 	st.w	r7[-4],r8
80000472:	c1 48       	rjmp	8000049a <ROSA_tcbCreate+0x4a>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
80000474:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000478:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000047c:	ee fa ff f4 	ld.w	r10,r7[-12]
80000480:	f4 08 00 08 	add	r8,r10,r8
80000484:	11 88       	ld.ub	r8,r8[0x0]
80000486:	ee fa ff f8 	ld.w	r10,r7[-8]
8000048a:	f4 09 00 09 	add	r9,r10,r9
8000048e:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000490:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000494:	2f f8       	sub	r8,-1
80000496:	ef 48 ff fc 	st.w	r7[-4],r8
8000049a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000049e:	58 38       	cp.w	r8,3
800004a0:	fe 9a ff ea 	brle	80000474 <ROSA_tcbCreate+0x24>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
800004a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004a8:	30 09       	mov	r9,0
800004aa:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
800004ac:	ee f9 ff f0 	ld.w	r9,r7[-16]
800004b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004b4:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
800004b6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800004ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004be:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
800004c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004c4:	ee f9 ff e8 	ld.w	r9,r7[-24]
800004c8:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
800004ca:	ee f8 ff e8 	ld.w	r8,r7[-24]
800004ce:	a3 68       	lsl	r8,0x2
800004d0:	ee f9 ff ec 	ld.w	r9,r7[-20]
800004d4:	10 09       	add	r9,r8
800004d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004da:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
800004dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004e0:	70 39       	ld.w	r9,r8[0xc]
800004e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004e6:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
800004e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004ec:	fc 19 00 1c 	movh	r9,0x1c
800004f0:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
800004f2:	ee fc ff f8 	ld.w	r12,r7[-8]
800004f6:	f0 1f 00 03 	mcall	80000500 <ROSA_tcbCreate+0xb0>
}
800004fa:	2f ad       	sub	sp,-24
800004fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80000500:	80 00       	ld.sh	r0,r0[0x0]
80000502:	06 1a       	sub	r10,r3

80000504 <ROSA_taskCreate>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

int16_t ROSA_taskCreate(ROSA_taskHandle_t ** pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
80000504:	eb cd 40 80 	pushm	r7,lr
80000508:	1a 97       	mov	r7,sp
8000050a:	20 6d       	sub	sp,24
8000050c:	ef 4c ff f8 	st.w	r7[-8],r12
80000510:	ef 4b ff f4 	st.w	r7[-12],r11
80000514:	ef 4a ff f0 	st.w	r7[-16],r10
80000518:	ef 49 ff ec 	st.w	r7[-20],r9
8000051c:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) calloc(stackSize, sizeof(uint32_t)); 
80000520:	30 4b       	mov	r11,4
80000522:	ee fc ff ec 	ld.w	r12,r7[-20]
80000526:	f0 1f 00 28 	mcall	800005c4 <ROSA_taskCreate+0xc0>
8000052a:	18 98       	mov	r8,r12
8000052c:	ef 48 ff fc 	st.w	r7[-4],r8
	
	*pth = (ROSA_taskHandle_t *) malloc(sizeof(ROSA_taskHandle_t));			
80000530:	37 4c       	mov	r12,116
80000532:	f0 1f 00 26 	mcall	800005c8 <ROSA_taskCreate+0xc4>
80000536:	18 98       	mov	r8,r12
80000538:	10 99       	mov	r9,r8
8000053a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000053e:	91 09       	st.w	r8[0x0],r9
	(*pth)->priority = priority;
80000540:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000544:	70 09       	ld.w	r9,r8[0x0]
80000546:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000054a:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
8000054e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000552:	70 0a       	ld.w	r10,r8[0x0]
80000554:	30 08       	mov	r8,0
80000556:	30 09       	mov	r9,0
80000558:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
8000055c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000560:	70 09       	ld.w	r9,r8[0x0]
80000562:	30 08       	mov	r8,0
80000564:	f3 68 00 70 	st.b	r9[112],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
80000568:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000056c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000570:	72 0c       	ld.w	r12,r9[0x0]
80000572:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000576:	ee fa ff f0 	ld.w	r10,r7[-16]
8000057a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000057e:	f0 1f 00 14 	mcall	800005cc <ROSA_taskCreate+0xc8>
	
	rqi(pth);
80000582:	ee fc ff f8 	ld.w	r12,r7[-8]
80000586:	f0 1f 00 13 	mcall	800005d0 <ROSA_taskCreate+0xcc>
	
	if (EXECTASK != NULL) {
8000058a:	49 38       	lddpc	r8,800005d4 <ROSA_taskCreate+0xd0>
8000058c:	70 08       	ld.w	r8,r8[0x0]
8000058e:	58 08       	cp.w	r8,0
80000590:	c1 40       	breq	800005b8 <ROSA_taskCreate+0xb4>
		if (EXECTASK->priority < priority) {
80000592:	49 18       	lddpc	r8,800005d4 <ROSA_taskCreate+0xd0>
80000594:	70 08       	ld.w	r8,r8[0x0]
80000596:	f1 38 00 64 	ld.ub	r8,r8[100]
8000059a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000059e:	f0 09 18 00 	cp.b	r9,r8
800005a2:	e0 88 00 0b 	brls	800005b8 <ROSA_taskCreate+0xb4>
			PREEMPTASK = PA[priority];
800005a6:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800005aa:	48 c8       	lddpc	r8,800005d8 <ROSA_taskCreate+0xd4>
800005ac:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800005b0:	48 b8       	lddpc	r8,800005dc <ROSA_taskCreate+0xd8>
800005b2:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
800005b4:	f0 1f 00 0b 	mcall	800005e0 <ROSA_taskCreate+0xdc>
		}	
	}
	
	return 0;
800005b8:	30 08       	mov	r8,0
}
800005ba:	10 9c       	mov	r12,r8
800005bc:	2f ad       	sub	sp,-24
800005be:	e3 cd 80 80 	ldm	sp++,r7,pc
800005c2:	00 00       	add	r0,r0
800005c4:	80 00       	ld.sh	r0,r0[0x0]
800005c6:	11 dc       	ld.ub	r12,r8[0x5]
800005c8:	80 00       	ld.sh	r0,r0[0x0]
800005ca:	12 54       	eor	r4,r9
800005cc:	80 00       	ld.sh	r0,r0[0x0]
800005ce:	04 50       	eor	r0,r2
800005d0:	80 00       	ld.sh	r0,r0[0x0]
800005d2:	02 14       	sub	r4,r1
800005d4:	00 00       	add	r0,r0
800005d6:	05 9c       	ld.ub	r12,r2[0x1]
800005d8:	00 00       	add	r0,r0
800005da:	05 68       	ld.uh	r8,--r2
800005dc:	00 00       	add	r0,r0
800005de:	05 98       	ld.ub	r8,r2[0x1]
800005e0:	80 00       	ld.sh	r0,r0[0x0]
800005e2:	06 a6       	st.w	r3++,r6

800005e4 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
800005e4:	4b 5c       	lddpc	r12,800006b8 <_yield+0xa>
	lda.w r11,EXECTASK
800005e6:	4b 6b       	lddpc	r11,800006bc <_yield+0xe>
	ld.w r12,r12[0x0]
800005e8:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
800005ea:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
800005ec:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800005ee:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800005f0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
800005f4:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
800005f6:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
800005f8:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
800005fa:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
800005fe:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000600:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80000602:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000604:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
80000606:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
80000608:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
8000060a:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
8000060c:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
8000060e:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000610:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000612:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000614:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000616:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000618:	1c 9f       	mov	pc,lr

8000061a <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
8000061a:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
8000061c:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
8000061e:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000620:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000624:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80000628:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
8000062c:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000630:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000634:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000638:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
8000063c:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000640:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000644:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
80000646:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80000648:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
8000064a:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
8000064c:	1c 9f       	mov	pc,lr

8000064e <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
8000064e:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000650:	49 bc       	lddpc	r12,800006bc <_yield+0xe>
	ld.w r12,r12[0x0]
80000652:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000654:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
80000656:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
80000658:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
8000065a:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
8000065c:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
8000065e:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
80000660:	33 40       	mov	r0,52
	add r0,r12
80000662:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000664:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80000668:	1a 90       	mov	r0,sp
	st.w --sp,r0
8000066a:	1a d0       	st.w	--sp,r0
	stmts sp,sp
8000066c:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
80000670:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
80000672:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80000674:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
80000676:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
80000678:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
8000067a:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
8000067c:	1c 9f       	mov	pc,lr

8000067e <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000067e:	49 0c       	lddpc	r12,800006bc <_yield+0xe>
	ld.w r12,r12[0x0]
80000680:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
80000682:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000684:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
80000686:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
8000068a:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
8000068c:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
8000068e:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
80000690:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80000692:	33 40       	mov	r0,52
	add r0,r12
80000694:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80000696:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
8000069a:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
8000069c:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
8000069e:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
800006a0:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
800006a2:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
800006a4:	d6 13       	rets

800006a6 <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
800006a6:	d4 01       	pushm	lr
	lda.w lr,_yield
800006a8:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
800006ac:	d7 33       	scall

800006ae <_yield>:
_yield:
	call contextSave
800006ae:	cd 0f       	rcall	8000064e <contextSave>
	call scheduler
800006b0:	f0 1f 00 04 	mcall	800006c0 <_yield+0x12>
	call contextRestore
800006b4:	ce 5f       	rcall	8000067e <contextRestore>
800006b6:	00 00       	add	r0,r0
800006b8:	00 00       	add	r0,r0
800006ba:	05 64       	ld.uh	r4,--r2
800006bc:	00 00       	add	r0,r0
800006be:	05 9c       	ld.ub	r12,r2[0x1]
800006c0:	80 00       	ld.sh	r0,r0[0x0]
800006c2:	06 c4       	st.b	r3++,r4

800006c4 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
800006c4:	eb cd 40 80 	pushm	r7,lr
800006c8:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK == NULL) {
800006ca:	49 28       	lddpc	r8,80000710 <scheduler+0x4c>
800006cc:	70 08       	ld.w	r8,r8[0x0]
800006ce:	58 08       	cp.w	r8,0
800006d0:	c1 61       	brne	800006fc <scheduler+0x38>
		PA[EXECTASK->priority] = EXECTASK;
800006d2:	49 18       	lddpc	r8,80000714 <scheduler+0x50>
800006d4:	70 08       	ld.w	r8,r8[0x0]
800006d6:	f1 38 00 64 	ld.ub	r8,r8[100]
800006da:	10 99       	mov	r9,r8
800006dc:	48 e8       	lddpc	r8,80000714 <scheduler+0x50>
800006de:	70 0a       	ld.w	r10,r8[0x0]
800006e0:	48 e8       	lddpc	r8,80000718 <scheduler+0x54>
800006e2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		if (EXECTASK->nexttcb != NULL)
800006e6:	48 c8       	lddpc	r8,80000714 <scheduler+0x50>
800006e8:	70 08       	ld.w	r8,r8[0x0]
800006ea:	70 08       	ld.w	r8,r8[0x0]
800006ec:	58 08       	cp.w	r8,0
800006ee:	c0 e0       	breq	8000070a <scheduler+0x46>
		{
			EXECTASK = EXECTASK->nexttcb;
800006f0:	48 98       	lddpc	r8,80000714 <scheduler+0x50>
800006f2:	70 08       	ld.w	r8,r8[0x0]
800006f4:	70 09       	ld.w	r9,r8[0x0]
800006f6:	48 88       	lddpc	r8,80000714 <scheduler+0x50>
800006f8:	91 09       	st.w	r8[0x0],r9
800006fa:	c0 88       	rjmp	8000070a <scheduler+0x46>
		}
	}
	else {
		EXECTASK = PREEMPTASK;
800006fc:	48 58       	lddpc	r8,80000710 <scheduler+0x4c>
800006fe:	70 09       	ld.w	r9,r8[0x0]
80000700:	48 58       	lddpc	r8,80000714 <scheduler+0x50>
80000702:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
80000704:	48 38       	lddpc	r8,80000710 <scheduler+0x4c>
80000706:	30 09       	mov	r9,0
80000708:	91 09       	st.w	r8[0x0],r9
	}
}
8000070a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000070e:	00 00       	add	r0,r0
80000710:	00 00       	add	r0,r0
80000712:	05 98       	ld.ub	r8,r2[0x1]
80000714:	00 00       	add	r0,r0
80000716:	05 9c       	ld.ub	r12,r2[0x1]
80000718:	00 00       	add	r0,r0
8000071a:	05 68       	ld.uh	r8,--r2

8000071c <ROSA_startScheduler>:

void ROSA_startScheduler(void)
{
8000071c:	eb cd 40 80 	pushm	r7,lr
80000720:	1a 97       	mov	r7,sp
80000722:	20 1d       	sub	sp,4
	int i = MAXNPRIO;
80000724:	30 c8       	mov	r8,12
80000726:	ef 48 ff fc 	st.w	r7[-4],r8
	
	while (PA[--i] == NULL) {
8000072a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000072e:	20 18       	sub	r8,1
80000730:	ef 48 ff fc 	st.w	r7[-4],r8
80000734:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000738:	48 98       	lddpc	r8,8000075c <ROSA_startScheduler+0x40>
8000073a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000073e:	58 08       	cp.w	r8,0
80000740:	cf 50       	breq	8000072a <ROSA_startScheduler+0xe>
		;
	}
	
	TCBLIST = PA[i]->nexttcb;
80000742:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000746:	48 68       	lddpc	r8,8000075c <ROSA_startScheduler+0x40>
80000748:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000074c:	70 09       	ld.w	r9,r8[0x0]
8000074e:	48 58       	lddpc	r8,80000760 <ROSA_startScheduler+0x44>
80000750:	91 09       	st.w	r8[0x0],r9
	
	ROSA_start();
80000752:	f0 1f 00 05 	mcall	80000764 <ROSA_startScheduler+0x48>
}
80000756:	2f fd       	sub	sp,-4
80000758:	e3 cd 80 80 	ldm	sp++,r7,pc
8000075c:	00 00       	add	r0,r0
8000075e:	05 68       	ld.uh	r8,--r2
80000760:	00 00       	add	r0,r0
80000762:	05 64       	ld.uh	r4,--r2
80000764:	80 00       	ld.sh	r0,r0[0x0]
80000766:	05 e4       	ld.ub	r4,r2[0x6]

80000768 <C.15.9562>:
80000768:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000778 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000778:	eb cd 40 80 	pushm	r7,lr
8000077c:	1a 97       	mov	r7,sp
8000077e:	20 5d       	sub	sp,20
	interruptDisable();
80000780:	f0 1f 00 37 	mcall	8000085c <timerISR+0xe4>
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000784:	fe 78 38 00 	mov	r8,-51200
80000788:	ef 48 ff f4 	st.w	r7[-12],r8
	ROSA_taskHandle_t * tmptsk;
	bool interruptTask;
	int priority;
	
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
8000078c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000790:	70 88       	ld.w	r8,r8[0x20]
80000792:	ef 48 ff f0 	st.w	r7[-16],r8
	if (sr & AVR32_TC_CPCS_MASK)
80000796:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000079a:	e2 18 00 10 	andl	r8,0x10,COH
8000079e:	c5 80       	breq	8000084e <timerISR+0xd6>
	{
		systemTick++;
800007a0:	4b 08       	lddpc	r8,80000860 <timerISR+0xe8>
800007a2:	f0 ea 00 00 	ld.d	r10,r8[0]
800007a6:	30 18       	mov	r8,1
800007a8:	30 09       	mov	r9,0
800007aa:	f4 08 00 08 	add	r8,r10,r8
800007ae:	f6 09 00 49 	adc	r9,r11,r9
800007b2:	4a ca       	lddpc	r10,80000860 <timerISR+0xe8>
800007b4:	f4 e9 00 00 	st.d	r10[0],r8
		interruptTask = false;
800007b8:	30 08       	mov	r8,0
800007ba:	ef 68 ff fb 	st.b	r7[-5],r8
		
		while (DELAYQUEUE != NULL && DELAYQUEUE->delay <= systemTick)
800007be:	c1 68       	rjmp	800007ea <timerISR+0x72>
		{
			tmptsk = DELAYQUEUE;
800007c0:	4a 98       	lddpc	r8,80000864 <timerISR+0xec>
800007c2:	70 08       	ld.w	r8,r8[0x0]
800007c4:	ef 48 ff ec 	st.w	r7[-20],r8
			removeDelayQueue(&DELAYQUEUE);
800007c8:	4a 7c       	lddpc	r12,80000864 <timerISR+0xec>
800007ca:	f0 1f 00 28 	mcall	80000868 <timerISR+0xf0>
			tmptsk->delay = 0;
800007ce:	ee fa ff ec 	ld.w	r10,r7[-20]
800007d2:	30 08       	mov	r8,0
800007d4:	30 09       	mov	r9,0
800007d6:	f4 e9 00 68 	st.d	r10[104],r8
			rqi(&tmptsk);
800007da:	ee c8 00 14 	sub	r8,r7,20
800007de:	10 9c       	mov	r12,r8
800007e0:	f0 1f 00 23 	mcall	8000086c <timerISR+0xf4>
			interruptTask = true;
800007e4:	30 18       	mov	r8,1
800007e6:	ef 68 ff fb 	st.b	r7[-5],r8
	if (sr & AVR32_TC_CPCS_MASK)
	{
		systemTick++;
		interruptTask = false;
		
		while (DELAYQUEUE != NULL && DELAYQUEUE->delay <= systemTick)
800007ea:	49 f8       	lddpc	r8,80000864 <timerISR+0xec>
800007ec:	70 08       	ld.w	r8,r8[0x0]
800007ee:	58 08       	cp.w	r8,0
800007f0:	c0 d0       	breq	8000080a <timerISR+0x92>
800007f2:	49 d8       	lddpc	r8,80000864 <timerISR+0xec>
800007f4:	70 08       	ld.w	r8,r8[0x0]
800007f6:	f0 ea 00 68 	ld.d	r10,r8[104]
800007fa:	49 a8       	lddpc	r8,80000860 <timerISR+0xe8>
800007fc:	f0 e8 00 00 	ld.d	r8,r8[0]
80000800:	10 3a       	cp.w	r10,r8
80000802:	f2 0b 13 00 	cpc	r11,r9
80000806:	fe 98 ff dd 	brls	800007c0 <timerISR+0x48>
			removeDelayQueue(&DELAYQUEUE);
			tmptsk->delay = 0;
			rqi(&tmptsk);
			interruptTask = true;
		}
		if (interruptTask)
8000080a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000080e:	30 08       	mov	r8,0
80000810:	f0 09 18 00 	cp.b	r9,r8
80000814:	c1 d0       	breq	8000084e <timerISR+0xd6>
		{
			priority = rqsearch();
80000816:	f0 1f 00 17 	mcall	80000870 <timerISR+0xf8>
8000081a:	18 98       	mov	r8,r12
8000081c:	ef 48 ff fc 	st.w	r7[-4],r8
			if (EXECTASK->priority < tmptsk->priority)
80000820:	49 58       	lddpc	r8,80000874 <timerISR+0xfc>
80000822:	70 08       	ld.w	r8,r8[0x0]
80000824:	f1 39 00 64 	ld.ub	r9,r8[100]
80000828:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000082c:	f1 38 00 64 	ld.ub	r8,r8[100]
80000830:	f0 09 18 00 	cp.b	r9,r8
80000834:	c0 d2       	brcc	8000084e <timerISR+0xd6>
			{
				PREEMPTASK = PA[priority]->nexttcb;
80000836:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000083a:	49 08       	lddpc	r8,80000878 <timerISR+0x100>
8000083c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000840:	70 09       	ld.w	r9,r8[0x0]
80000842:	48 f8       	lddpc	r8,8000087c <timerISR+0x104>
80000844:	91 09       	st.w	r8[0x0],r9
				interruptEnable();
80000846:	f0 1f 00 0f 	mcall	80000880 <timerISR+0x108>
				ROSA_yieldFromISR();
8000084a:	f0 1f 00 0f 	mcall	80000884 <timerISR+0x10c>
			}
		}
	}
	//timerClearInterrupt(); //Disabled until we know what it actually does
	interruptEnable();
8000084e:	f0 1f 00 0d 	mcall	80000880 <timerISR+0x108>
}
80000852:	2f bd       	sub	sp,-20
80000854:	e3 cd 40 80 	ldm	sp++,r7,lr
80000858:	d6 03       	rete
8000085a:	00 00       	add	r0,r0
8000085c:	80 00       	ld.sh	r0,r0[0x0]
8000085e:	1b 66       	ld.uh	r6,--sp
80000860:	00 00       	add	r0,r0
80000862:	05 a4       	ld.ub	r4,r2[0x2]
80000864:	00 00       	add	r0,r0
80000866:	05 a0       	ld.ub	r0,r2[0x2]
80000868:	80 00       	ld.sh	r0,r0[0x0]
8000086a:	0a b8       	st.h	r5++,r8
8000086c:	80 00       	ld.sh	r0,r0[0x0]
8000086e:	02 14       	sub	r4,r1
80000870:	80 00       	ld.sh	r0,r0[0x0]
80000872:	03 50       	ld.sh	r0,--r1
80000874:	00 00       	add	r0,r0
80000876:	05 9c       	ld.ub	r12,r2[0x1]
80000878:	00 00       	add	r0,r0
8000087a:	05 68       	ld.uh	r8,--r2
8000087c:	00 00       	add	r0,r0
8000087e:	05 98       	ld.ub	r8,r2[0x1]
80000880:	80 00       	ld.sh	r0,r0[0x0]
80000882:	1b 6a       	ld.uh	r10,--sp
80000884:	80 00       	ld.sh	r0,r0[0x0]
80000886:	01 e4       	ld.ub	r4,r0[0x6]

80000888 <ROSA_getTickCount>:
/*																		*/
/* Returns the current number of system ticks, relative to start		*/
/* of the system.                                                       */
/************************************************************************/
uint64_t ROSA_getTickCount()
{
80000888:	eb cd 40 80 	pushm	r7,lr
8000088c:	1a 97       	mov	r7,sp
	return systemTick;
8000088e:	48 48       	lddpc	r8,8000089c <ROSA_getTickCount+0x14>
80000890:	f0 e8 00 00 	ld.d	r8,r8[0]
}
80000894:	10 9a       	mov	r10,r8
80000896:	12 9b       	mov	r11,r9
80000898:	e3 cd 80 80 	ldm	sp++,r7,pc
8000089c:	00 00       	add	r0,r0
8000089e:	05 a4       	ld.ub	r4,r2[0x2]

800008a0 <ROSA_delay>:
/* ROSA_delay()															*/
/*																		*/
/* Suspends the calling task for the given number of ticks				*/
/************************************************************************/
int16_t ROSA_delay(uint64_t ticks)
{
800008a0:	eb cd 40 80 	pushm	r7,lr
800008a4:	1a 97       	mov	r7,sp
800008a6:	20 3d       	sub	sp,12
800008a8:	ee eb ff f4 	st.d	r7[-12],r10
	rqe(&EXECTASK);
800008ac:	49 5c       	lddpc	r12,80000900 <ROSA_delay+0x60>
800008ae:	f0 1f 00 16 	mcall	80000904 <ROSA_delay+0x64>
	insertDelayQueue(&EXECTASK, ROSA_getTickCount() + ticks);
800008b2:	f0 1f 00 16 	mcall	80000908 <ROSA_delay+0x68>
800008b6:	ee e8 ff f4 	ld.d	r8,r7[-12]
800008ba:	f4 08 00 08 	add	r8,r10,r8
800008be:	f6 09 00 49 	adc	r9,r11,r9
800008c2:	10 9a       	mov	r10,r8
800008c4:	12 9b       	mov	r11,r9
800008c6:	48 fc       	lddpc	r12,80000900 <ROSA_delay+0x60>
800008c8:	f0 1f 00 11 	mcall	8000090c <ROSA_delay+0x6c>
	int priority = rqsearch();
800008cc:	f0 1f 00 11 	mcall	80000910 <ROSA_delay+0x70>
800008d0:	18 98       	mov	r8,r12
800008d2:	ef 48 ff fc 	st.w	r7[-4],r8
	if (priority >= 0)
800008d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008da:	58 08       	cp.w	r8,0
800008dc:	c0 c5       	brlt	800008f4 <ROSA_delay+0x54>
	{
		PREEMPTASK = PA[priority];
800008de:	ee f9 ff fc 	ld.w	r9,r7[-4]
800008e2:	48 d8       	lddpc	r8,80000914 <ROSA_delay+0x74>
800008e4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800008e8:	48 c8       	lddpc	r8,80000918 <ROSA_delay+0x78>
800008ea:	91 09       	st.w	r8[0x0],r9
	} else {
		return -1;
	}
	ROSA_yield();
800008ec:	f0 1f 00 0c 	mcall	8000091c <ROSA_delay+0x7c>
	return 0;
800008f0:	30 08       	mov	r8,0
800008f2:	c0 28       	rjmp	800008f6 <ROSA_delay+0x56>
	int priority = rqsearch();
	if (priority >= 0)
	{
		PREEMPTASK = PA[priority];
	} else {
		return -1;
800008f4:	3f f8       	mov	r8,-1
	}
	ROSA_yield();
	return 0;
}
800008f6:	10 9c       	mov	r12,r8
800008f8:	2f dd       	sub	sp,-12
800008fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800008fe:	00 00       	add	r0,r0
80000900:	00 00       	add	r0,r0
80000902:	05 9c       	ld.ub	r12,r2[0x1]
80000904:	80 00       	ld.sh	r0,r0[0x0]
80000906:	02 a8       	st.w	r1++,r8
80000908:	80 00       	ld.sh	r0,r0[0x0]
8000090a:	08 88       	andn	r8,r4
8000090c:	80 00       	ld.sh	r0,r0[0x0]
8000090e:	09 c8       	ld.ub	r8,r4[0x4]
80000910:	80 00       	ld.sh	r0,r0[0x0]
80000912:	03 50       	ld.sh	r0,--r1
80000914:	00 00       	add	r0,r0
80000916:	05 68       	ld.uh	r8,--r2
80000918:	00 00       	add	r0,r0
8000091a:	05 98       	ld.ub	r8,r2[0x1]
8000091c:	80 00       	ld.sh	r0,r0[0x0]
8000091e:	06 a6       	st.w	r3++,r6

80000920 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80000920:	eb cd 40 80 	pushm	r7,lr
80000924:	1a 97       	mov	r7,sp
80000926:	20 7d       	sub	sp,28
80000928:	ef 4c ff e4 	st.w	r7[-28],r12
	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
8000092c:	4a 48       	lddpc	r8,800009bc <timerPeriodSet+0x9c>
8000092e:	ee ca 00 18 	sub	r10,r7,24
80000932:	10 9b       	mov	r11,r8
80000934:	f6 e8 00 00 	ld.d	r8,r11[0]
80000938:	f4 e9 00 00 	st.d	r10[0],r8
8000093c:	f6 e8 00 08 	ld.d	r8,r11[8]
80000940:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000944:	30 48       	mov	r8,4
80000946:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
8000094a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000094e:	20 18       	sub	r8,1
80000950:	a3 68       	lsl	r8,0x2
80000952:	ee 08 00 08 	add	r8,r7,r8
80000956:	f0 f9 ff e8 	ld.w	r9,r8[-24]
8000095a:	e0 68 1b 00 	mov	r8,6912
8000095e:	ea 18 00 b7 	orh	r8,0xb7
80000962:	f0 09 0c 08 	divs	r8,r8,r9
80000966:	10 99       	mov	r9,r8
80000968:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000096c:	b1 39       	mul	r9,r8
8000096e:	e0 68 4d d3 	mov	r8,19923
80000972:	ea 18 10 62 	orh	r8,0x1062
80000976:	f2 08 06 48 	mulu.d	r8,r9,r8
8000097a:	f2 08 16 06 	lsr	r8,r9,0x6
8000097e:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80000982:	ee fc ff fc 	ld.w	r12,r7[-4]
80000986:	f0 1f 00 0f 	mcall	800009c0 <timerPeriodSet+0xa0>
	timerRCSet(rc);
8000098a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000098e:	f0 1f 00 0e 	mcall	800009c4 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80000992:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000996:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000099a:	f2 08 02 4a 	mul	r10,r9,r8
8000099e:	e0 68 9f 81 	mov	r8,40833
800009a2:	ea 18 16 5e 	orh	r8,0x165e
800009a6:	f4 08 04 48 	muls.d	r8,r10,r8
800009aa:	b5 49       	asr	r9,0x14
800009ac:	f4 08 14 1f 	asr	r8,r10,0x1f
800009b0:	f2 08 01 08 	sub	r8,r9,r8
}
800009b4:	10 9c       	mov	r12,r8
800009b6:	2f 9d       	sub	sp,-28
800009b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800009bc:	80 00       	ld.sh	r0,r0[0x0]
800009be:	07 68       	ld.uh	r8,--r3
800009c0:	80 00       	ld.sh	r0,r0[0x0]
800009c2:	11 18       	ld.sh	r8,r8++
800009c4:	80 00       	ld.sh	r0,r0[0x0]
800009c6:	11 02       	ld.w	r2,r8++

800009c8 <insertDelayQueue>:
/*																		*/
/* Inserts the given task into the delay queue, before any tasks with	*/
/* a later deadline or lower priority									*/
/************************************************************************/
int insertDelayQueue(ROSA_taskHandle_t ** pth, uint64_t deadline)
{
800009c8:	eb cd 40 80 	pushm	r7,lr
800009cc:	1a 97       	mov	r7,sp
800009ce:	20 5d       	sub	sp,20
800009d0:	ef 4c ff f4 	st.w	r7[-12],r12
800009d4:	ee eb ff ec 	st.d	r7[-20],r10
	(*pth)->delay = deadline;
800009d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009dc:	70 0a       	ld.w	r10,r8[0x0]
800009de:	ee e8 ff ec 	ld.d	r8,r7[-20]
800009e2:	f4 e9 00 68 	st.d	r10[104],r8
	
	if (DELAYQUEUE == NULL) {
800009e6:	4b 48       	lddpc	r8,80000ab4 <insertDelayQueue+0xec>
800009e8:	70 08       	ld.w	r8,r8[0x0]
800009ea:	58 08       	cp.w	r8,0
800009ec:	c0 c1       	brne	80000a04 <insertDelayQueue+0x3c>
		DELAYQUEUE = *pth;
800009ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009f2:	70 09       	ld.w	r9,r8[0x0]
800009f4:	4b 08       	lddpc	r8,80000ab4 <insertDelayQueue+0xec>
800009f6:	91 09       	st.w	r8[0x0],r9
		DELAYQUEUE->nexttcb = NULL;
800009f8:	4a f8       	lddpc	r8,80000ab4 <insertDelayQueue+0xec>
800009fa:	70 08       	ld.w	r8,r8[0x0]
800009fc:	30 09       	mov	r9,0
800009fe:	91 09       	st.w	r8[0x0],r9
		return 0;
80000a00:	30 08       	mov	r8,0
80000a02:	c5 48       	rjmp	80000aaa <insertDelayQueue+0xe2>
	}
	
	ROSA_taskHandle_t * next = DELAYQUEUE;
80000a04:	4a c8       	lddpc	r8,80000ab4 <insertDelayQueue+0xec>
80000a06:	70 08       	ld.w	r8,r8[0x0]
80000a08:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_taskHandle_t * prev;

	// While the next task in the list has an earlier deadline or higher priority and an equal deadline, move down the list
	while (next->delay <= (*pth)->delay || (next->priority >= (*pth)->priority && next->delay == (*pth)->delay))
80000a0c:	c1 b8       	rjmp	80000a42 <insertDelayQueue+0x7a>
	{
		prev = next;
80000a0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a12:	ef 48 ff fc 	st.w	r7[-4],r8
		next = next->nexttcb;
80000a16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a1a:	70 08       	ld.w	r8,r8[0x0]
80000a1c:	ef 48 ff f8 	st.w	r7[-8],r8
		
		// Reach the end of the list
		if (next == NULL) {
80000a20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a24:	58 08       	cp.w	r8,0
80000a26:	c0 e1       	brne	80000a42 <insertDelayQueue+0x7a>
			prev->nexttcb = *pth;
80000a28:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a2c:	70 09       	ld.w	r9,r8[0x0]
80000a2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a32:	91 09       	st.w	r8[0x0],r9
			(*pth)->nexttcb = NULL;
80000a34:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a38:	70 08       	ld.w	r8,r8[0x0]
80000a3a:	30 09       	mov	r9,0
80000a3c:	91 09       	st.w	r8[0x0],r9
			return 0;
80000a3e:	30 08       	mov	r8,0
80000a40:	c3 58       	rjmp	80000aaa <insertDelayQueue+0xe2>
	
	ROSA_taskHandle_t * next = DELAYQUEUE;
	ROSA_taskHandle_t * prev;

	// While the next task in the list has an earlier deadline or higher priority and an equal deadline, move down the list
	while (next->delay <= (*pth)->delay || (next->priority >= (*pth)->priority && next->delay == (*pth)->delay))
80000a42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a46:	f0 ea 00 68 	ld.d	r10,r8[104]
80000a4a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a4e:	70 08       	ld.w	r8,r8[0x0]
80000a50:	f0 e8 00 68 	ld.d	r8,r8[104]
80000a54:	10 3a       	cp.w	r10,r8
80000a56:	f2 0b 13 00 	cpc	r11,r9
80000a5a:	fe 98 ff da 	brls	80000a0e <insertDelayQueue+0x46>
80000a5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a62:	f1 39 00 64 	ld.ub	r9,r8[100]
80000a66:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a6a:	70 08       	ld.w	r8,r8[0x0]
80000a6c:	f1 38 00 64 	ld.ub	r8,r8[100]
80000a70:	f0 09 18 00 	cp.b	r9,r8
80000a74:	c0 e3       	brcs	80000a90 <insertDelayQueue+0xc8>
80000a76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a7a:	f0 ea 00 68 	ld.d	r10,r8[104]
80000a7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a82:	70 08       	ld.w	r8,r8[0x0]
80000a84:	f0 e8 00 68 	ld.d	r8,r8[104]
80000a88:	10 3a       	cp.w	r10,r8
80000a8a:	f2 0b 13 00 	cpc	r11,r9
80000a8e:	cc 00       	breq	80000a0e <insertDelayQueue+0x46>
			(*pth)->nexttcb = NULL;
			return 0;
		}
	}
	
	(*pth)->nexttcb = next;
80000a90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a94:	70 08       	ld.w	r8,r8[0x0]
80000a96:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a9a:	91 09       	st.w	r8[0x0],r9
	prev->nexttcb = *pth;
80000a9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000aa0:	70 09       	ld.w	r9,r8[0x0]
80000aa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000aa6:	91 09       	st.w	r8[0x0],r9
	return 0;
80000aa8:	30 08       	mov	r8,0
}
80000aaa:	10 9c       	mov	r12,r8
80000aac:	2f bd       	sub	sp,-20
80000aae:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ab2:	00 00       	add	r0,r0
80000ab4:	00 00       	add	r0,r0
80000ab6:	05 a0       	ld.ub	r0,r2[0x2]

80000ab8 <removeDelayQueue>:
/* removeDelayQueue()													*/
/*																		*/
/* Removes the given task from the delay queue							*/
/************************************************************************/
int removeDelayQueue(ROSA_taskHandle_t ** pth)
{
80000ab8:	eb cd 40 80 	pushm	r7,lr
80000abc:	1a 97       	mov	r7,sp
80000abe:	20 3d       	sub	sp,12
80000ac0:	ef 4c ff f4 	st.w	r7[-12],r12
	// If there are no tasks in the delay queue, return error code -1
	if (DELAYQUEUE == NULL)
80000ac4:	4a 48       	lddpc	r8,80000b54 <removeDelayQueue+0x9c>
80000ac6:	70 08       	ld.w	r8,r8[0x0]
80000ac8:	58 08       	cp.w	r8,0
80000aca:	c0 31       	brne	80000ad0 <removeDelayQueue+0x18>
	{
		return -1;
80000acc:	3f f8       	mov	r8,-1
80000ace:	c3 f8       	rjmp	80000b4c <removeDelayQueue+0x94>
	}
	// If there is only one task in the status queue and this is pth, remove it from the queue
	if (DELAYQUEUE->id == (*pth)->id)
80000ad0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ad4:	70 09       	ld.w	r9,r8[0x0]
80000ad6:	4a 08       	lddpc	r8,80000b54 <removeDelayQueue+0x9c>
80000ad8:	70 08       	ld.w	r8,r8[0x0]
80000ada:	10 39       	cp.w	r9,r8
80000adc:	c1 21       	brne	80000b00 <removeDelayQueue+0x48>
	{
		if (DELAYQUEUE->nexttcb == NULL)
80000ade:	49 e8       	lddpc	r8,80000b54 <removeDelayQueue+0x9c>
80000ae0:	70 08       	ld.w	r8,r8[0x0]
80000ae2:	70 08       	ld.w	r8,r8[0x0]
80000ae4:	58 08       	cp.w	r8,0
80000ae6:	c0 51       	brne	80000af0 <removeDelayQueue+0x38>
		{
			DELAYQUEUE = NULL; // Task was the only one in the list
80000ae8:	49 b8       	lddpc	r8,80000b54 <removeDelayQueue+0x9c>
80000aea:	30 09       	mov	r9,0
80000aec:	91 09       	st.w	r8[0x0],r9
80000aee:	c0 78       	rjmp	80000afc <removeDelayQueue+0x44>
		} else {
			DELAYQUEUE = (*pth)->nexttcb;
80000af0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000af4:	70 08       	ld.w	r8,r8[0x0]
80000af6:	70 09       	ld.w	r9,r8[0x0]
80000af8:	49 78       	lddpc	r8,80000b54 <removeDelayQueue+0x9c>
80000afa:	91 09       	st.w	r8[0x0],r9
		}
		return 0;
80000afc:	30 08       	mov	r8,0
80000afe:	c2 78       	rjmp	80000b4c <removeDelayQueue+0x94>
	}
	// Else, find the task before pth and point it to the task after pth, removing it
	ROSA_taskHandle_t * next = DELAYQUEUE;
80000b00:	49 58       	lddpc	r8,80000b54 <removeDelayQueue+0x9c>
80000b02:	70 08       	ld.w	r8,r8[0x0]
80000b04:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_taskHandle_t * prev;
	while (next->id != (*pth)->id)
80000b08:	c1 08       	rjmp	80000b28 <removeDelayQueue+0x70>
	{
		prev = next;
80000b0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b0e:	ef 48 ff fc 	st.w	r7[-4],r8
		next = next->nexttcb;
80000b12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b16:	70 08       	ld.w	r8,r8[0x0]
80000b18:	ef 48 ff f8 	st.w	r7[-8],r8
		if(next == NULL)
80000b1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b20:	58 08       	cp.w	r8,0
80000b22:	c0 31       	brne	80000b28 <removeDelayQueue+0x70>
		{
			return -1; //Task is not in the list, so return error code -1
80000b24:	3f f8       	mov	r8,-1
80000b26:	c1 38       	rjmp	80000b4c <removeDelayQueue+0x94>
		return 0;
	}
	// Else, find the task before pth and point it to the task after pth, removing it
	ROSA_taskHandle_t * next = DELAYQUEUE;
	ROSA_taskHandle_t * prev;
	while (next->id != (*pth)->id)
80000b28:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b2c:	70 09       	ld.w	r9,r8[0x0]
80000b2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b32:	10 39       	cp.w	r9,r8
80000b34:	ce b1       	brne	80000b0a <removeDelayQueue+0x52>
		if(next == NULL)
		{
			return -1; //Task is not in the list, so return error code -1
		}
	}
	prev->nexttcb = next->nexttcb;
80000b36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b3a:	70 09       	ld.w	r9,r8[0x0]
80000b3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b40:	91 09       	st.w	r8[0x0],r9
	next->nexttcb = NULL;
80000b42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b46:	30 09       	mov	r9,0
80000b48:	91 09       	st.w	r8[0x0],r9
	return 0;
80000b4a:	30 08       	mov	r8,0
}
80000b4c:	10 9c       	mov	r12,r8
80000b4e:	2f dd       	sub	sp,-12
80000b50:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b54:	00 00       	add	r0,r0
80000b56:	05 a0       	ld.ub	r0,r2[0x2]

80000b58 <buttonInit>:
80000b58:	eb cd 40 80 	pushm	r7,lr
80000b5c:	1a 97       	mov	r7,sp
80000b5e:	30 1b       	mov	r11,1
80000b60:	35 8c       	mov	r12,88
80000b62:	f0 1f 00 07 	mcall	80000b7c <buttonInit+0x24>
80000b66:	30 1b       	mov	r11,1
80000b68:	35 5c       	mov	r12,85
80000b6a:	f0 1f 00 05 	mcall	80000b7c <buttonInit+0x24>
80000b6e:	30 1b       	mov	r11,1
80000b70:	35 2c       	mov	r12,82
80000b72:	f0 1f 00 03 	mcall	80000b7c <buttonInit+0x24>
80000b76:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b7a:	00 00       	add	r0,r0
80000b7c:	80 00       	ld.sh	r0,r0[0x0]
80000b7e:	0b b8       	ld.ub	r8,r5[0x3]

80000b80 <joystickInit>:
80000b80:	eb cd 40 80 	pushm	r7,lr
80000b84:	1a 97       	mov	r7,sp
80000b86:	30 1b       	mov	r11,1
80000b88:	31 bc       	mov	r12,27
80000b8a:	f0 1f 00 0b 	mcall	80000bb4 <joystickInit+0x34>
80000b8e:	30 1b       	mov	r11,1
80000b90:	31 9c       	mov	r12,25
80000b92:	f0 1f 00 09 	mcall	80000bb4 <joystickInit+0x34>
80000b96:	30 1b       	mov	r11,1
80000b98:	31 cc       	mov	r12,28
80000b9a:	f0 1f 00 07 	mcall	80000bb4 <joystickInit+0x34>
80000b9e:	30 1b       	mov	r11,1
80000ba0:	31 4c       	mov	r12,20
80000ba2:	f0 1f 00 05 	mcall	80000bb4 <joystickInit+0x34>
80000ba6:	30 1b       	mov	r11,1
80000ba8:	31 ac       	mov	r12,26
80000baa:	f0 1f 00 03 	mcall	80000bb4 <joystickInit+0x34>
80000bae:	e3 cd 80 80 	ldm	sp++,r7,pc
80000bb2:	00 00       	add	r0,r0
80000bb4:	80 00       	ld.sh	r0,r0[0x0]
80000bb6:	0b b8       	ld.ub	r8,r5[0x3]

80000bb8 <gpioInit>:
80000bb8:	eb cd 40 80 	pushm	r7,lr
80000bbc:	1a 97       	mov	r7,sp
80000bbe:	20 7d       	sub	sp,28
80000bc0:	ef 4c ff ec 	st.w	r7[-20],r12
80000bc4:	ef 4b ff e8 	st.w	r7[-24],r11
80000bc8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000bcc:	a5 58       	asr	r8,0x5
80000bce:	ef 48 ff f4 	st.w	r7[-12],r8
80000bd2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000bd6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000bda:	ef 48 ff fc 	st.w	r7[-4],r8
80000bde:	30 19       	mov	r9,1
80000be0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000be4:	f2 08 09 48 	lsl	r8,r9,r8
80000be8:	ef 48 ff f8 	st.w	r7[-8],r8
80000bec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bf0:	a9 68       	lsl	r8,0x8
80000bf2:	e0 28 f0 00 	sub	r8,61440
80000bf6:	ef 48 ff f0 	st.w	r7[-16],r8
80000bfa:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bfe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c02:	91 19       	st.w	r8[0x4],r9
80000c04:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c08:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c0c:	91 69       	st.w	r8[0x18],r9
80000c0e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c12:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c16:	91 a9       	st.w	r8[0x28],r9
80000c18:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000c1c:	ef 48 ff e4 	st.w	r7[-28],r8
80000c20:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c24:	58 08       	cp.w	r8,0
80000c26:	c0 60       	breq	80000c32 <gpioInit+0x7a>
80000c28:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c2c:	58 18       	cp.w	r8,1
80000c2e:	c0 90       	breq	80000c40 <gpioInit+0x88>
80000c30:	c0 f8       	rjmp	80000c4e <gpioInit+0x96>
80000c32:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c36:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c3a:	f1 49 00 44 	st.w	r8[68],r9
80000c3e:	c0 e8       	rjmp	80000c5a <gpioInit+0xa2>
80000c40:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c44:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c48:	f1 49 00 48 	st.w	r8[72],r9
80000c4c:	c0 78       	rjmp	80000c5a <gpioInit+0xa2>
80000c4e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c52:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c56:	f1 49 00 48 	st.w	r8[72],r9
80000c5a:	2f 9d       	sub	sp,-28
80000c5c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000c60 <gpioClear>:
80000c60:	eb cd 40 80 	pushm	r7,lr
80000c64:	1a 97       	mov	r7,sp
80000c66:	20 5d       	sub	sp,20
80000c68:	ef 4c ff ec 	st.w	r7[-20],r12
80000c6c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c70:	a5 58       	asr	r8,0x5
80000c72:	ef 48 ff f4 	st.w	r7[-12],r8
80000c76:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c7a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000c7e:	ef 48 ff fc 	st.w	r7[-4],r8
80000c82:	30 19       	mov	r9,1
80000c84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c88:	f2 08 09 48 	lsl	r8,r9,r8
80000c8c:	ef 48 ff f8 	st.w	r7[-8],r8
80000c90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c94:	a9 68       	lsl	r8,0x8
80000c96:	e0 28 f0 00 	sub	r8,61440
80000c9a:	ef 48 ff f0 	st.w	r7[-16],r8
80000c9e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ca2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ca6:	f1 49 00 58 	st.w	r8[88],r9
80000caa:	2f bd       	sub	sp,-20
80000cac:	e3 cd 80 80 	ldm	sp++,r7,pc

80000cb0 <gpioSet>:
80000cb0:	eb cd 40 80 	pushm	r7,lr
80000cb4:	1a 97       	mov	r7,sp
80000cb6:	20 5d       	sub	sp,20
80000cb8:	ef 4c ff ec 	st.w	r7[-20],r12
80000cbc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000cc0:	a5 58       	asr	r8,0x5
80000cc2:	ef 48 ff f4 	st.w	r7[-12],r8
80000cc6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000cca:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000cce:	ef 48 ff fc 	st.w	r7[-4],r8
80000cd2:	30 19       	mov	r9,1
80000cd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cd8:	f2 08 09 48 	lsl	r8,r9,r8
80000cdc:	ef 48 ff f8 	st.w	r7[-8],r8
80000ce0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ce4:	a9 68       	lsl	r8,0x8
80000ce6:	e0 28 f0 00 	sub	r8,61440
80000cea:	ef 48 ff f0 	st.w	r7[-16],r8
80000cee:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000cf2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cf6:	f1 49 00 54 	st.w	r8[84],r9
80000cfa:	2f bd       	sub	sp,-20
80000cfc:	e3 cd 80 80 	ldm	sp++,r7,pc

80000d00 <ledInit>:
80000d00:	eb cd 40 80 	pushm	r7,lr
80000d04:	1a 97       	mov	r7,sp
80000d06:	20 9d       	sub	sp,36
80000d08:	49 e8       	lddpc	r8,80000d80 <ledInit+0x80>
80000d0a:	ee cb 00 24 	sub	r11,r7,36
80000d0e:	10 9a       	mov	r10,r8
80000d10:	f4 e8 00 00 	ld.d	r8,r10[0]
80000d14:	f6 e9 00 00 	st.d	r11[0],r8
80000d18:	f4 e8 00 08 	ld.d	r8,r10[8]
80000d1c:	f6 e9 00 08 	st.d	r11[8],r8
80000d20:	f4 e8 00 10 	ld.d	r8,r10[16]
80000d24:	f6 e9 00 10 	st.d	r11[16],r8
80000d28:	f4 e8 00 18 	ld.d	r8,r10[24]
80000d2c:	f6 e9 00 18 	st.d	r11[24],r8
80000d30:	30 08       	mov	r8,0
80000d32:	ef 48 ff fc 	st.w	r7[-4],r8
80000d36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d3a:	a3 68       	lsl	r8,0x2
80000d3c:	ee 08 00 08 	add	r8,r7,r8
80000d40:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000d44:	10 9c       	mov	r12,r8
80000d46:	f0 1f 00 10 	mcall	80000d84 <ledInit+0x84>
80000d4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d4e:	a3 68       	lsl	r8,0x2
80000d50:	ee 08 00 08 	add	r8,r7,r8
80000d54:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000d58:	30 0b       	mov	r11,0
80000d5a:	10 9c       	mov	r12,r8
80000d5c:	f0 1f 00 0b 	mcall	80000d88 <ledInit+0x88>
80000d60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d64:	58 78       	cp.w	r8,7
80000d66:	5f 18       	srne	r8
80000d68:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000d6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d70:	2f f8       	sub	r8,-1
80000d72:	ef 48 ff fc 	st.w	r7[-4],r8
80000d76:	58 09       	cp.w	r9,0
80000d78:	cd f1       	brne	80000d36 <ledInit+0x36>
80000d7a:	2f 7d       	sub	sp,-36
80000d7c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d80:	80 00       	ld.sh	r0,r0[0x0]
80000d82:	1e 00       	add	r0,pc
80000d84:	80 00       	ld.sh	r0,r0[0x0]
80000d86:	0d ac       	ld.ub	r12,r6[0x2]
80000d88:	80 00       	ld.sh	r0,r0[0x0]
80000d8a:	0b b8       	ld.ub	r8,r5[0x3]

80000d8c <ledOn>:
80000d8c:	eb cd 40 80 	pushm	r7,lr
80000d90:	1a 97       	mov	r7,sp
80000d92:	20 1d       	sub	sp,4
80000d94:	ef 4c ff fc 	st.w	r7[-4],r12
80000d98:	ee fc ff fc 	ld.w	r12,r7[-4]
80000d9c:	f0 1f 00 03 	mcall	80000da8 <ledOn+0x1c>
80000da0:	2f fd       	sub	sp,-4
80000da2:	e3 cd 80 80 	ldm	sp++,r7,pc
80000da6:	00 00       	add	r0,r0
80000da8:	80 00       	ld.sh	r0,r0[0x0]
80000daa:	0c 60       	and	r0,r6

80000dac <ledOff>:
80000dac:	eb cd 40 80 	pushm	r7,lr
80000db0:	1a 97       	mov	r7,sp
80000db2:	20 1d       	sub	sp,4
80000db4:	ef 4c ff fc 	st.w	r7[-4],r12
80000db8:	ee fc ff fc 	ld.w	r12,r7[-4]
80000dbc:	f0 1f 00 03 	mcall	80000dc8 <ledOff+0x1c>
80000dc0:	2f fd       	sub	sp,-4
80000dc2:	e3 cd 80 80 	ldm	sp++,r7,pc
80000dc6:	00 00       	add	r0,r0
80000dc8:	80 00       	ld.sh	r0,r0[0x0]
80000dca:	0c b0       	st.h	r6++,r0

80000dcc <potInit>:
80000dcc:	d3 01       	pushm	r11-r12
80000dce:	e0 6c 10 00 	mov	r12,4096
80000dd2:	ea 1c ff ff 	orh	r12,0xffff
80000dd6:	31 6b       	mov	r11,22
80000dd8:	99 2b       	st.w	r12[0x8],r11
80000dda:	99 6b       	st.w	r12[0x18],r11
80000ddc:	99 6b       	st.w	r12[0x18],r11
80000dde:	e0 6c 3c 00 	mov	r12,15360
80000de2:	ea 1c ff ff 	orh	r12,0xffff
80000de6:	30 1b       	mov	r11,1
80000de8:	99 0b       	st.w	r12[0x0],r11
80000dea:	e0 6b 0f 1f 	mov	r11,3871
80000dee:	b1 6b       	lsl	r11,0x10
80000df0:	99 1b       	st.w	r12[0x4],r11
80000df2:	30 2b       	mov	r11,2
80000df4:	99 4b       	st.w	r12[0x10],r11
80000df6:	d3 02       	popm	r11-r12
80000df8:	1c 9f       	mov	pc,lr

80000dfa <potGetValue>:
80000dfa:	d1 81       	pushm	r10-r11
80000dfc:	e0 6c 3c 00 	mov	r12,15360
80000e00:	ea 1c ff ff 	orh	r12,0xffff
80000e04:	30 2b       	mov	r11,2
80000e06:	99 0b       	st.w	r12[0x0],r11

80000e08 <a1>:
80000e08:	78 7a       	ld.w	r10,r12[0x1c]
80000e0a:	16 7a       	tst	r10,r11
80000e0c:	cf e0       	breq	80000e08 <a1>
80000e0e:	78 dc       	ld.w	r12,r12[0x34]
80000e10:	d1 82       	popm	r10-r11
80000e12:	1c 9f       	mov	pc,lr

80000e14 <usartReset>:
80000e14:	eb cd 40 80 	pushm	r7,lr
80000e18:	1a 97       	mov	r7,sp
80000e1a:	20 3d       	sub	sp,12
80000e1c:	ef 4c ff f8 	st.w	r7[-8],r12
80000e20:	f0 1f 00 16 	mcall	80000e78 <usartReset+0x64>
80000e24:	18 98       	mov	r8,r12
80000e26:	ef 48 ff fc 	st.w	r7[-4],r8
80000e2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e2e:	58 08       	cp.w	r8,0
80000e30:	c0 30       	breq	80000e36 <usartReset+0x22>
80000e32:	f0 1f 00 13 	mcall	80000e7c <usartReset+0x68>
80000e36:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e3a:	3f f8       	mov	r8,-1
80000e3c:	93 38       	st.w	r9[0xc],r8
80000e3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e42:	70 58       	ld.w	r8,r8[0x14]
80000e44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e48:	58 08       	cp.w	r8,0
80000e4a:	c0 30       	breq	80000e50 <usartReset+0x3c>
80000e4c:	f0 1f 00 0d 	mcall	80000e80 <usartReset+0x6c>
80000e50:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e54:	30 08       	mov	r8,0
80000e56:	93 18       	st.w	r9[0x4],r8
80000e58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e5c:	30 08       	mov	r8,0
80000e5e:	93 98       	st.w	r9[0x24],r8
80000e60:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e64:	30 08       	mov	r8,0
80000e66:	93 a8       	st.w	r9[0x28],r8
80000e68:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e6c:	ea 68 61 0c 	mov	r8,680204
80000e70:	93 08       	st.w	r9[0x0],r8
80000e72:	2f dd       	sub	sp,-12
80000e74:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e78:	80 00       	ld.sh	r0,r0[0x0]
80000e7a:	1b 6e       	ld.uh	lr,--sp
80000e7c:	80 00       	ld.sh	r0,r0[0x0]
80000e7e:	1b 66       	ld.uh	r6,--sp
80000e80:	80 00       	ld.sh	r0,r0[0x0]
80000e82:	1b 6a       	ld.uh	r10,--sp

80000e84 <usartSetBaudrate>:
80000e84:	eb cd 40 80 	pushm	r7,lr
80000e88:	1a 97       	mov	r7,sp
80000e8a:	20 bd       	sub	sp,44
80000e8c:	ef 4c ff ec 	st.w	r7[-20],r12
80000e90:	ef 4b ff e8 	st.w	r7[-24],r11
80000e94:	ef 4a ff e4 	st.w	r7[-28],r10
80000e98:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000e9c:	f0 09 15 04 	lsl	r9,r8,0x4
80000ea0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000ea4:	10 39       	cp.w	r9,r8
80000ea6:	e0 8b 00 06 	brhi	80000eb2 <usartSetBaudrate+0x2e>
80000eaa:	31 09       	mov	r9,16
80000eac:	ef 49 ff d4 	st.w	r7[-44],r9
80000eb0:	c0 48       	rjmp	80000eb8 <usartSetBaudrate+0x34>
80000eb2:	30 88       	mov	r8,8
80000eb4:	ef 48 ff d4 	st.w	r7[-44],r8
80000eb8:	ee f9 ff d4 	ld.w	r9,r7[-44]
80000ebc:	ef 49 ff f0 	st.w	r7[-16],r9
80000ec0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000ec4:	f0 0a 15 03 	lsl	r10,r8,0x3
80000ec8:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000ecc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000ed0:	f2 08 02 48 	mul	r8,r9,r8
80000ed4:	a1 98       	lsr	r8,0x1
80000ed6:	10 0a       	add	r10,r8
80000ed8:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000edc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000ee0:	f2 08 02 48 	mul	r8,r9,r8
80000ee4:	f4 08 0d 08 	divu	r8,r10,r8
80000ee8:	ef 48 ff f4 	st.w	r7[-12],r8
80000eec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ef0:	a3 98       	lsr	r8,0x3
80000ef2:	ef 48 ff f8 	st.w	r7[-8],r8
80000ef6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000efa:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000efe:	ef 48 ff fc 	st.w	r7[-4],r8
80000f02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f06:	58 08       	cp.w	r8,0
80000f08:	c0 70       	breq	80000f16 <usartSetBaudrate+0x92>
80000f0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f0e:	e0 48 ff ff 	cp.w	r8,65535
80000f12:	e0 88 00 06 	brls	80000f1e <usartSetBaudrate+0x9a>
80000f16:	30 18       	mov	r8,1
80000f18:	ef 48 ff d8 	st.w	r7[-40],r8
80000f1c:	c2 c8       	rjmp	80000f74 <usartSetBaudrate+0xf0>
80000f1e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000f22:	70 18       	ld.w	r8,r8[0x4]
80000f24:	10 99       	mov	r9,r8
80000f26:	e4 19 ff f7 	andh	r9,0xfff7
80000f2a:	e0 19 fe cf 	andl	r9,0xfecf
80000f2e:	ef 49 ff dc 	st.w	r7[-36],r9
80000f32:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f36:	59 08       	cp.w	r8,16
80000f38:	c0 60       	breq	80000f44 <usartSetBaudrate+0xc0>
80000f3a:	e8 68 00 00 	mov	r8,524288
80000f3e:	ef 48 ff e0 	st.w	r7[-32],r8
80000f42:	c0 48       	rjmp	80000f4a <usartSetBaudrate+0xc6>
80000f44:	30 09       	mov	r9,0
80000f46:	ef 49 ff e0 	st.w	r7[-32],r9
80000f4a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80000f4e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80000f52:	10 49       	or	r9,r8
80000f54:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000f58:	91 19       	st.w	r8[0x4],r9
80000f5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f5e:	f0 09 15 10 	lsl	r9,r8,0x10
80000f62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f66:	10 49       	or	r9,r8
80000f68:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000f6c:	91 89       	st.w	r8[0x20],r9
80000f6e:	30 09       	mov	r9,0
80000f70:	ef 49 ff d8 	st.w	r7[-40],r9
80000f74:	ee f8 ff d8 	ld.w	r8,r7[-40]
80000f78:	10 9c       	mov	r12,r8
80000f7a:	2f 5d       	sub	sp,-44
80000f7c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000f80 <usartInit>:
80000f80:	eb cd 40 80 	pushm	r7,lr
80000f84:	1a 97       	mov	r7,sp
80000f86:	20 4d       	sub	sp,16
80000f88:	ef 4c ff f8 	st.w	r7[-8],r12
80000f8c:	ef 4b ff f4 	st.w	r7[-12],r11
80000f90:	ef 4a ff f0 	st.w	r7[-16],r10
80000f94:	fe 78 10 00 	mov	r8,-61440
80000f98:	ef 48 ff fc 	st.w	r7[-4],r8
80000f9c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000fa0:	30 18       	mov	r8,1
80000fa2:	93 28       	st.w	r9[0x8],r8
80000fa4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000fa8:	30 28       	mov	r8,2
80000faa:	93 28       	st.w	r9[0x8],r8
80000fac:	ee fc ff f8 	ld.w	r12,r7[-8]
80000fb0:	f0 1f 00 3b 	mcall	8000109c <usartInit+0x11c>
80000fb4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000fb8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000fbc:	70 08       	ld.w	r8,r8[0x0]
80000fbe:	12 9a       	mov	r10,r9
80000fc0:	10 9b       	mov	r11,r8
80000fc2:	ee fc ff f8 	ld.w	r12,r7[-8]
80000fc6:	f0 1f 00 37 	mcall	800010a0 <usartInit+0x120>
80000fca:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000fce:	11 c9       	ld.ub	r9,r8[0x4]
80000fd0:	30 98       	mov	r8,9
80000fd2:	f0 09 18 00 	cp.b	r9,r8
80000fd6:	c0 a1       	brne	80000fea <usartInit+0x6a>
80000fd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fdc:	70 18       	ld.w	r8,r8[0x4]
80000fde:	10 99       	mov	r9,r8
80000fe0:	b1 b9       	sbr	r9,0x11
80000fe2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fe6:	91 19       	st.w	r8[0x4],r9
80000fe8:	c0 d8       	rjmp	80001002 <usartInit+0x82>
80000fea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fee:	70 19       	ld.w	r9,r8[0x4]
80000ff0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ff4:	11 c8       	ld.ub	r8,r8[0x4]
80000ff6:	20 58       	sub	r8,5
80000ff8:	a7 68       	lsl	r8,0x6
80000ffa:	10 49       	or	r9,r8
80000ffc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001000:	91 19       	st.w	r8[0x4],r9
80001002:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001006:	70 1a       	ld.w	r10,r8[0x4]
80001008:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000100c:	11 d8       	ld.ub	r8,r8[0x5]
8000100e:	f0 09 15 09 	lsl	r9,r8,0x9
80001012:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001016:	f1 38 00 08 	ld.ub	r8,r8[8]
8000101a:	af 68       	lsl	r8,0xe
8000101c:	f3 e8 10 08 	or	r8,r9,r8
80001020:	f5 e8 10 09 	or	r9,r10,r8
80001024:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001028:	91 19       	st.w	r8[0x4],r9
8000102a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000102e:	90 39       	ld.sh	r9,r8[0x6]
80001030:	30 28       	mov	r8,2
80001032:	f0 09 19 00 	cp.h	r9,r8
80001036:	e0 88 00 14 	brls	8000105e <usartInit+0xde>
8000103a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000103e:	70 18       	ld.w	r8,r8[0x4]
80001040:	10 99       	mov	r9,r8
80001042:	ad b9       	sbr	r9,0xd
80001044:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001048:	91 19       	st.w	r8[0x4],r9
8000104a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000104e:	90 38       	ld.sh	r8,r8[0x6]
80001050:	5c 78       	castu.h	r8
80001052:	20 28       	sub	r8,2
80001054:	10 99       	mov	r9,r8
80001056:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000105a:	91 a9       	st.w	r8[0x28],r9
8000105c:	c0 d8       	rjmp	80001076 <usartInit+0xf6>
8000105e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001062:	70 19       	ld.w	r9,r8[0x4]
80001064:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001068:	90 38       	ld.sh	r8,r8[0x6]
8000106a:	5c 78       	castu.h	r8
8000106c:	ad 68       	lsl	r8,0xc
8000106e:	10 49       	or	r9,r8
80001070:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001074:	91 19       	st.w	r8[0x4],r9
80001076:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000107a:	70 18       	ld.w	r8,r8[0x4]
8000107c:	10 99       	mov	r9,r8
8000107e:	e0 19 ff f0 	andl	r9,0xfff0
80001082:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001086:	91 19       	st.w	r8[0x4],r9
80001088:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000108c:	35 08       	mov	r8,80
8000108e:	93 08       	st.w	r9[0x0],r8
80001090:	30 08       	mov	r8,0
80001092:	10 9c       	mov	r12,r8
80001094:	2f cd       	sub	sp,-16
80001096:	e3 cd 80 80 	ldm	sp++,r7,pc
8000109a:	00 00       	add	r0,r0
8000109c:	80 00       	ld.sh	r0,r0[0x0]
8000109e:	0e 14       	sub	r4,r7
800010a0:	80 00       	ld.sh	r0,r0[0x0]
800010a2:	0e 84       	andn	r4,r7

800010a4 <timerInit>:
800010a4:	d5 01       	pushm	r11,lr
800010a6:	d2 01       	pushm	r12
800010a8:	f0 1f 00 28 	mcall	80001148 <timerClearInterrupt+0x10>
800010ac:	f0 1f 00 28 	mcall	8000114c <timerClearInterrupt+0x14>
800010b0:	e0 6c 38 00 	mov	r12,14336
800010b4:	ea 1c ff ff 	orh	r12,0xffff
800010b8:	e0 6b c0 00 	mov	r11,49152
800010bc:	ea 1b 00 00 	orh	r11,0x0
800010c0:	99 1b       	st.w	r12[0x4],r11
800010c2:	30 1b       	mov	r11,1
800010c4:	a5 6b       	lsl	r11,0x4
800010c6:	99 9b       	st.w	r12[0x24],r11
800010c8:	d2 02       	popm	r12
800010ca:	f0 1f 00 22 	mcall	80001150 <timerClearInterrupt+0x18>
800010ce:	d5 02       	popm	r11,lr
800010d0:	1c 9f       	mov	pc,lr

800010d2 <timerReset>:
800010d2:	d3 01       	pushm	r11-r12
800010d4:	e0 6c 38 00 	mov	r12,14336
800010d8:	ea 1c ff ff 	orh	r12,0xffff
800010dc:	30 5b       	mov	r11,5
800010de:	99 0b       	st.w	r12[0x0],r11
800010e0:	e0 6b 00 08 	mov	r11,8
800010e4:	ea 1b 00 00 	orh	r11,0x0
800010e8:	76 0b       	ld.w	r11,r11[0x0]
800010ea:	99 7b       	st.w	r12[0x1c],r11
800010ec:	d3 02       	popm	r11-r12
800010ee:	1c 9f       	mov	pc,lr

800010f0 <timerStop>:
800010f0:	d3 01       	pushm	r11-r12
800010f2:	e0 6c 38 00 	mov	r12,14336
800010f6:	ea 1c ff ff 	orh	r12,0xffff
800010fa:	30 2b       	mov	r11,2
800010fc:	99 0b       	st.w	r12[0x0],r11
800010fe:	d3 02       	popm	r11-r12
80001100:	1c 9f       	mov	pc,lr

80001102 <timerRCSet>:
80001102:	d3 01       	pushm	r11-r12
80001104:	49 4b       	lddpc	r11,80001154 <timerClearInterrupt+0x1c>
80001106:	97 0c       	st.w	r11[0x0],r12
80001108:	e0 6c 38 00 	mov	r12,14336
8000110c:	ea 1c ff ff 	orh	r12,0xffff
80001110:	76 0b       	ld.w	r11,r11[0x0]
80001112:	99 7b       	st.w	r12[0x1c],r11
80001114:	d3 02       	popm	r11-r12
80001116:	1c 9f       	mov	pc,lr

80001118 <timerPrescaleSet>:
80001118:	d3 81       	pushm	r10-r12
8000111a:	49 0b       	lddpc	r11,80001158 <timerClearInterrupt+0x20>
8000111c:	97 0c       	st.w	r11[0x0],r12
8000111e:	e0 6c 38 00 	mov	r12,14336
80001122:	ea 1c ff ff 	orh	r12,0xffff
80001126:	78 1a       	ld.w	r10,r12[0x4]
80001128:	3f 8b       	mov	r11,-8
8000112a:	16 6a       	and	r10,r11
8000112c:	48 bb       	lddpc	r11,80001158 <timerClearInterrupt+0x20>
8000112e:	76 0b       	ld.w	r11,r11[0x0]
80001130:	14 4b       	or	r11,r10
80001132:	99 1b       	st.w	r12[0x4],r11
80001134:	d3 82       	popm	r10-r12
80001136:	1c 9f       	mov	pc,lr

80001138 <timerClearInterrupt>:
80001138:	d2 01       	pushm	r12
8000113a:	e0 6c 38 00 	mov	r12,14336
8000113e:	ea 1c ff ff 	orh	r12,0xffff
80001142:	78 8c       	ld.w	r12,r12[0x20]
80001144:	d2 02       	popm	r12
80001146:	1c 9f       	mov	pc,lr
80001148:	80 00       	ld.sh	r0,r0[0x0]
8000114a:	1b 66       	ld.uh	r6,--sp
8000114c:	80 00       	ld.sh	r0,r0[0x0]
8000114e:	11 38       	ld.ub	r8,r8++
80001150:	80 00       	ld.sh	r0,r0[0x0]
80001152:	09 20       	ld.uh	r0,r4++
80001154:	00 00       	add	r0,r0
80001156:	00 08       	add	r8,r0
80001158:	00 00       	add	r0,r0
8000115a:	00 0c       	add	r12,r0

8000115c <_stext>:
8000115c:	49 7d       	lddpc	sp,800011b8 <udata_end+0x4>
8000115e:	49 80       	lddpc	r0,800011bc <udata_end+0x8>
80001160:	1a d0       	st.w	--sp,r0
80001162:	e5 cd 20 00 	ldmts	sp,sp
80001166:	1b 00       	ld.w	r0,sp++
80001168:	49 60       	lddpc	r0,800011c0 <udata_end+0xc>
8000116a:	e3 b0 00 01 	mtsr	0x4,r0
8000116e:	d5 53       	csrf	0x15
80001170:	e0 6c 0c 00 	mov	r12,3072
80001174:	ea 1c ff ff 	orh	r12,0xffff
80001178:	e0 6b 01 07 	mov	r11,263
8000117c:	99 ab       	st.w	r12[0x28],r11
8000117e:	30 4b       	mov	r11,4
80001180:	99 0b       	st.w	r12[0x0],r11
80001182:	e0 6a 00 80 	mov	r10,128

80001186 <xw8>:
80001186:	79 5b       	ld.w	r11,r12[0x54]
80001188:	14 7b       	tst	r11,r10
8000118a:	cf e0       	breq	80001186 <xw8>
8000118c:	30 5b       	mov	r11,5
8000118e:	99 0b       	st.w	r12[0x0],r11

80001190 <idata_>:
80001190:	48 d0       	lddpc	r0,800011c4 <udata_end+0x10>
80001192:	48 e1       	lddpc	r1,800011c8 <udata_end+0x14>
80001194:	02 30       	cp.w	r0,r1
80001196:	c0 62       	brcc	800011a2 <idata_end>
80001198:	48 d2       	lddpc	r2,800011cc <udata_end+0x18>

8000119a <idata_loop>:
8000119a:	05 04       	ld.w	r4,r2++
8000119c:	00 a4       	st.w	r0++,r4
8000119e:	02 30       	cp.w	r0,r1
800011a0:	cf d3       	brcs	8000119a <idata_loop>

800011a2 <idata_end>:
800011a2:	48 c0       	lddpc	r0,800011d0 <udata_end+0x1c>
800011a4:	48 c1       	lddpc	r1,800011d4 <udata_end+0x20>
800011a6:	02 30       	cp.w	r0,r1
800011a8:	c0 62       	brcc	800011b4 <udata_end>
800011aa:	30 02       	mov	r2,0
800011ac:	30 03       	mov	r3,0

800011ae <udata_loop>:
800011ae:	00 a2       	st.w	r0++,r2
800011b0:	02 30       	cp.w	r0,r1
800011b2:	cf e3       	brcs	800011ae <udata_loop>

800011b4 <udata_end>:
800011b4:	48 9f       	lddpc	pc,800011d8 <udata_end+0x24>
800011b6:	00 00       	add	r0,r0
800011b8:	00 01       	add	r1,r0
800011ba:	00 00       	add	r0,r0
800011bc:	00 00       	add	r0,r0
800011be:	f0 00       	*unknown*
800011c0:	80 00       	ld.sh	r0,r0[0x0]
800011c2:	1a 00       	add	r0,sp
800011c4:	00 00       	add	r0,r0
800011c6:	00 08       	add	r8,r0
800011c8:	00 00       	add	r0,r0
800011ca:	05 18       	ld.sh	r8,r2++
800011cc:	80 00       	ld.sh	r0,r0[0x0]
800011ce:	1e 88       	andn	r8,pc
800011d0:	00 00       	add	r0,r0
800011d2:	05 18       	ld.sh	r8,r2++
800011d4:	00 00       	add	r0,r0
800011d6:	05 b0       	ld.ub	r0,r2[0x3]
800011d8:	80 00       	ld.sh	r0,r0[0x0]
800011da:	01 64       	ld.uh	r4,--r0

800011dc <calloc>:
800011dc:	d4 01       	pushm	lr
800011de:	48 48       	lddpc	r8,800011ec <calloc+0x10>
800011e0:	16 9a       	mov	r10,r11
800011e2:	18 9b       	mov	r11,r12
800011e4:	70 0c       	ld.w	r12,r8[0x0]
800011e6:	f0 1f 00 03 	mcall	800011f0 <calloc+0x14>
800011ea:	d8 02       	popm	pc
800011ec:	00 00       	add	r0,r0
800011ee:	01 00       	ld.w	r0,r0++
800011f0:	80 00       	ld.sh	r0,r0[0x0]
800011f2:	11 f4       	ld.ub	r4,r8[0x7]

800011f4 <_calloc_r>:
800011f4:	d4 21       	pushm	r4-r7,lr
800011f6:	f4 0b 02 4b 	mul	r11,r10,r11
800011fa:	f0 1f 00 15 	mcall	8000124c <_calloc_r+0x58>
800011fe:	18 97       	mov	r7,r12
80001200:	c2 30       	breq	80001246 <_calloc_r+0x52>
80001202:	f8 fa ff fc 	ld.w	r10,r12[-4]
80001206:	e0 1a ff fc 	andl	r10,0xfffc
8000120a:	20 4a       	sub	r10,4
8000120c:	e0 4a 00 24 	cp.w	r10,36
80001210:	e0 8b 00 18 	brhi	80001240 <_calloc_r+0x4c>
80001214:	18 98       	mov	r8,r12
80001216:	59 3a       	cp.w	r10,19
80001218:	e0 88 00 0f 	brls	80001236 <_calloc_r+0x42>
8000121c:	30 09       	mov	r9,0
8000121e:	10 a9       	st.w	r8++,r9
80001220:	10 a9       	st.w	r8++,r9
80001222:	59 ba       	cp.w	r10,27
80001224:	e0 88 00 09 	brls	80001236 <_calloc_r+0x42>
80001228:	10 a9       	st.w	r8++,r9
8000122a:	10 a9       	st.w	r8++,r9
8000122c:	e0 4a 00 24 	cp.w	r10,36
80001230:	c0 31       	brne	80001236 <_calloc_r+0x42>
80001232:	10 a9       	st.w	r8++,r9
80001234:	10 a9       	st.w	r8++,r9
80001236:	30 09       	mov	r9,0
80001238:	10 a9       	st.w	r8++,r9
8000123a:	91 19       	st.w	r8[0x4],r9
8000123c:	91 09       	st.w	r8[0x0],r9
8000123e:	c0 48       	rjmp	80001246 <_calloc_r+0x52>
80001240:	30 0b       	mov	r11,0
80001242:	f0 1f 00 04 	mcall	80001250 <_calloc_r+0x5c>
80001246:	0e 9c       	mov	r12,r7
80001248:	d8 22       	popm	r4-r7,pc
8000124a:	00 00       	add	r0,r0
8000124c:	80 00       	ld.sh	r0,r0[0x0]
8000124e:	12 6c       	and	r12,r9
80001250:	80 00       	ld.sh	r0,r0[0x0]
80001252:	16 bc       	st.h	r11++,r12

80001254 <malloc>:
80001254:	d4 01       	pushm	lr
80001256:	48 48       	lddpc	r8,80001264 <malloc+0x10>
80001258:	18 9b       	mov	r11,r12
8000125a:	70 0c       	ld.w	r12,r8[0x0]
8000125c:	f0 1f 00 03 	mcall	80001268 <malloc+0x14>
80001260:	d8 02       	popm	pc
80001262:	00 00       	add	r0,r0
80001264:	00 00       	add	r0,r0
80001266:	01 00       	ld.w	r0,r0++
80001268:	80 00       	ld.sh	r0,r0[0x0]
8000126a:	12 6c       	and	r12,r9

8000126c <_malloc_r>:
8000126c:	d4 31       	pushm	r0-r7,lr
8000126e:	f6 c8 ff f5 	sub	r8,r11,-11
80001272:	18 95       	mov	r5,r12
80001274:	10 97       	mov	r7,r8
80001276:	e0 17 ff f8 	andl	r7,0xfff8
8000127a:	59 68       	cp.w	r8,22
8000127c:	f9 b7 08 10 	movls	r7,16
80001280:	16 37       	cp.w	r7,r11
80001282:	5f 38       	srlo	r8
80001284:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001288:	c0 50       	breq	80001292 <_malloc_r+0x26>
8000128a:	30 c8       	mov	r8,12
8000128c:	99 38       	st.w	r12[0xc],r8
8000128e:	e0 8f 01 f3 	bral	80001674 <_malloc_r+0x408>
80001292:	f0 1f 00 50 	mcall	800013d0 <_malloc_r+0x164>
80001296:	e0 47 01 f7 	cp.w	r7,503
8000129a:	e0 8b 00 1c 	brhi	800012d2 <_malloc_r+0x66>
8000129e:	ee 03 16 03 	lsr	r3,r7,0x3
800012a2:	4c d8       	lddpc	r8,800013d4 <_malloc_r+0x168>
800012a4:	f0 03 00 38 	add	r8,r8,r3<<0x3
800012a8:	70 36       	ld.w	r6,r8[0xc]
800012aa:	10 36       	cp.w	r6,r8
800012ac:	c0 61       	brne	800012b8 <_malloc_r+0x4c>
800012ae:	ec c8 ff f8 	sub	r8,r6,-8
800012b2:	70 36       	ld.w	r6,r8[0xc]
800012b4:	10 36       	cp.w	r6,r8
800012b6:	c0 c0       	breq	800012ce <_malloc_r+0x62>
800012b8:	6c 18       	ld.w	r8,r6[0x4]
800012ba:	e0 18 ff fc 	andl	r8,0xfffc
800012be:	6c 3a       	ld.w	r10,r6[0xc]
800012c0:	ec 08 00 09 	add	r9,r6,r8
800012c4:	0a 9c       	mov	r12,r5
800012c6:	6c 28       	ld.w	r8,r6[0x8]
800012c8:	95 28       	st.w	r10[0x8],r8
800012ca:	91 3a       	st.w	r8[0xc],r10
800012cc:	c4 68       	rjmp	80001358 <_malloc_r+0xec>
800012ce:	2f e3       	sub	r3,-2
800012d0:	c4 c8       	rjmp	80001368 <_malloc_r+0xfc>
800012d2:	ee 03 16 09 	lsr	r3,r7,0x9
800012d6:	c0 41       	brne	800012de <_malloc_r+0x72>
800012d8:	ee 03 16 03 	lsr	r3,r7,0x3
800012dc:	c2 68       	rjmp	80001328 <_malloc_r+0xbc>
800012de:	58 43       	cp.w	r3,4
800012e0:	e0 8b 00 06 	brhi	800012ec <_malloc_r+0x80>
800012e4:	ee 03 16 06 	lsr	r3,r7,0x6
800012e8:	2c 83       	sub	r3,-56
800012ea:	c1 f8       	rjmp	80001328 <_malloc_r+0xbc>
800012ec:	59 43       	cp.w	r3,20
800012ee:	e0 8b 00 04 	brhi	800012f6 <_malloc_r+0x8a>
800012f2:	2a 53       	sub	r3,-91
800012f4:	c1 a8       	rjmp	80001328 <_malloc_r+0xbc>
800012f6:	e0 43 00 54 	cp.w	r3,84
800012fa:	e0 8b 00 06 	brhi	80001306 <_malloc_r+0x9a>
800012fe:	ee 03 16 0c 	lsr	r3,r7,0xc
80001302:	29 23       	sub	r3,-110
80001304:	c1 28       	rjmp	80001328 <_malloc_r+0xbc>
80001306:	e0 43 01 54 	cp.w	r3,340
8000130a:	e0 8b 00 06 	brhi	80001316 <_malloc_r+0xaa>
8000130e:	ee 03 16 0f 	lsr	r3,r7,0xf
80001312:	28 93       	sub	r3,-119
80001314:	c0 a8       	rjmp	80001328 <_malloc_r+0xbc>
80001316:	e0 43 05 54 	cp.w	r3,1364
8000131a:	e0 88 00 04 	brls	80001322 <_malloc_r+0xb6>
8000131e:	37 e3       	mov	r3,126
80001320:	c0 48       	rjmp	80001328 <_malloc_r+0xbc>
80001322:	ee 03 16 12 	lsr	r3,r7,0x12
80001326:	28 43       	sub	r3,-124
80001328:	4a ba       	lddpc	r10,800013d4 <_malloc_r+0x168>
8000132a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000132e:	74 36       	ld.w	r6,r10[0xc]
80001330:	c1 98       	rjmp	80001362 <_malloc_r+0xf6>
80001332:	6c 19       	ld.w	r9,r6[0x4]
80001334:	e0 19 ff fc 	andl	r9,0xfffc
80001338:	f2 07 01 0b 	sub	r11,r9,r7
8000133c:	58 fb       	cp.w	r11,15
8000133e:	e0 8a 00 04 	brle	80001346 <_malloc_r+0xda>
80001342:	20 13       	sub	r3,1
80001344:	c1 18       	rjmp	80001366 <_malloc_r+0xfa>
80001346:	6c 38       	ld.w	r8,r6[0xc]
80001348:	58 0b       	cp.w	r11,0
8000134a:	c0 b5       	brlt	80001360 <_malloc_r+0xf4>
8000134c:	6c 2a       	ld.w	r10,r6[0x8]
8000134e:	ec 09 00 09 	add	r9,r6,r9
80001352:	0a 9c       	mov	r12,r5
80001354:	91 2a       	st.w	r8[0x8],r10
80001356:	95 38       	st.w	r10[0xc],r8
80001358:	72 18       	ld.w	r8,r9[0x4]
8000135a:	a1 a8       	sbr	r8,0x0
8000135c:	93 18       	st.w	r9[0x4],r8
8000135e:	cb c8       	rjmp	800014d6 <_malloc_r+0x26a>
80001360:	10 96       	mov	r6,r8
80001362:	14 36       	cp.w	r6,r10
80001364:	ce 71       	brne	80001332 <_malloc_r+0xc6>
80001366:	2f f3       	sub	r3,-1
80001368:	49 ba       	lddpc	r10,800013d4 <_malloc_r+0x168>
8000136a:	f4 cc ff f8 	sub	r12,r10,-8
8000136e:	78 26       	ld.w	r6,r12[0x8]
80001370:	18 36       	cp.w	r6,r12
80001372:	c6 e0       	breq	8000144e <_malloc_r+0x1e2>
80001374:	6c 19       	ld.w	r9,r6[0x4]
80001376:	e0 19 ff fc 	andl	r9,0xfffc
8000137a:	f2 07 01 08 	sub	r8,r9,r7
8000137e:	58 f8       	cp.w	r8,15
80001380:	e0 89 00 90 	brgt	800014a0 <_malloc_r+0x234>
80001384:	99 3c       	st.w	r12[0xc],r12
80001386:	99 2c       	st.w	r12[0x8],r12
80001388:	58 08       	cp.w	r8,0
8000138a:	c0 55       	brlt	80001394 <_malloc_r+0x128>
8000138c:	ec 09 00 09 	add	r9,r6,r9
80001390:	0a 9c       	mov	r12,r5
80001392:	ce 3b       	rjmp	80001358 <_malloc_r+0xec>
80001394:	e0 49 01 ff 	cp.w	r9,511
80001398:	e0 8b 00 13 	brhi	800013be <_malloc_r+0x152>
8000139c:	a3 99       	lsr	r9,0x3
8000139e:	f4 09 00 38 	add	r8,r10,r9<<0x3
800013a2:	70 2b       	ld.w	r11,r8[0x8]
800013a4:	8d 38       	st.w	r6[0xc],r8
800013a6:	8d 2b       	st.w	r6[0x8],r11
800013a8:	97 36       	st.w	r11[0xc],r6
800013aa:	91 26       	st.w	r8[0x8],r6
800013ac:	a3 49       	asr	r9,0x2
800013ae:	74 18       	ld.w	r8,r10[0x4]
800013b0:	30 1b       	mov	r11,1
800013b2:	f6 09 09 49 	lsl	r9,r11,r9
800013b6:	f1 e9 10 09 	or	r9,r8,r9
800013ba:	95 19       	st.w	r10[0x4],r9
800013bc:	c4 98       	rjmp	8000144e <_malloc_r+0x1e2>
800013be:	f2 0a 16 09 	lsr	r10,r9,0x9
800013c2:	58 4a       	cp.w	r10,4
800013c4:	e0 8b 00 0a 	brhi	800013d8 <_malloc_r+0x16c>
800013c8:	f2 0a 16 06 	lsr	r10,r9,0x6
800013cc:	2c 8a       	sub	r10,-56
800013ce:	c2 38       	rjmp	80001414 <_malloc_r+0x1a8>
800013d0:	80 00       	ld.sh	r0,r0[0x0]
800013d2:	16 ca       	st.b	r11++,r10
800013d4:	00 00       	add	r0,r0
800013d6:	01 04       	ld.w	r4,r0++
800013d8:	59 4a       	cp.w	r10,20
800013da:	e0 8b 00 04 	brhi	800013e2 <_malloc_r+0x176>
800013de:	2a 5a       	sub	r10,-91
800013e0:	c1 a8       	rjmp	80001414 <_malloc_r+0x1a8>
800013e2:	e0 4a 00 54 	cp.w	r10,84
800013e6:	e0 8b 00 06 	brhi	800013f2 <_malloc_r+0x186>
800013ea:	f2 0a 16 0c 	lsr	r10,r9,0xc
800013ee:	29 2a       	sub	r10,-110
800013f0:	c1 28       	rjmp	80001414 <_malloc_r+0x1a8>
800013f2:	e0 4a 01 54 	cp.w	r10,340
800013f6:	e0 8b 00 06 	brhi	80001402 <_malloc_r+0x196>
800013fa:	f2 0a 16 0f 	lsr	r10,r9,0xf
800013fe:	28 9a       	sub	r10,-119
80001400:	c0 a8       	rjmp	80001414 <_malloc_r+0x1a8>
80001402:	e0 4a 05 54 	cp.w	r10,1364
80001406:	e0 88 00 04 	brls	8000140e <_malloc_r+0x1a2>
8000140a:	37 ea       	mov	r10,126
8000140c:	c0 48       	rjmp	80001414 <_malloc_r+0x1a8>
8000140e:	f2 0a 16 12 	lsr	r10,r9,0x12
80001412:	28 4a       	sub	r10,-124
80001414:	4c 8b       	lddpc	r11,80001534 <_malloc_r+0x2c8>
80001416:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000141a:	68 28       	ld.w	r8,r4[0x8]
8000141c:	08 38       	cp.w	r8,r4
8000141e:	c0 e1       	brne	8000143a <_malloc_r+0x1ce>
80001420:	76 19       	ld.w	r9,r11[0x4]
80001422:	a3 4a       	asr	r10,0x2
80001424:	30 1e       	mov	lr,1
80001426:	fc 0a 09 4a 	lsl	r10,lr,r10
8000142a:	f3 ea 10 0a 	or	r10,r9,r10
8000142e:	10 99       	mov	r9,r8
80001430:	97 1a       	st.w	r11[0x4],r10
80001432:	c0 a8       	rjmp	80001446 <_malloc_r+0x1da>
80001434:	70 28       	ld.w	r8,r8[0x8]
80001436:	08 38       	cp.w	r8,r4
80001438:	c0 60       	breq	80001444 <_malloc_r+0x1d8>
8000143a:	70 1a       	ld.w	r10,r8[0x4]
8000143c:	e0 1a ff fc 	andl	r10,0xfffc
80001440:	14 39       	cp.w	r9,r10
80001442:	cf 93       	brcs	80001434 <_malloc_r+0x1c8>
80001444:	70 39       	ld.w	r9,r8[0xc]
80001446:	8d 39       	st.w	r6[0xc],r9
80001448:	8d 28       	st.w	r6[0x8],r8
8000144a:	91 36       	st.w	r8[0xc],r6
8000144c:	93 26       	st.w	r9[0x8],r6
8000144e:	e6 08 14 02 	asr	r8,r3,0x2
80001452:	30 1b       	mov	r11,1
80001454:	4b 84       	lddpc	r4,80001534 <_malloc_r+0x2c8>
80001456:	f6 08 09 4b 	lsl	r11,r11,r8
8000145a:	68 18       	ld.w	r8,r4[0x4]
8000145c:	10 3b       	cp.w	r11,r8
8000145e:	e0 8b 00 6f 	brhi	8000153c <_malloc_r+0x2d0>
80001462:	f7 e8 00 09 	and	r9,r11,r8
80001466:	c0 b1       	brne	8000147c <_malloc_r+0x210>
80001468:	e0 13 ff fc 	andl	r3,0xfffc
8000146c:	a1 7b       	lsl	r11,0x1
8000146e:	2f c3       	sub	r3,-4
80001470:	c0 38       	rjmp	80001476 <_malloc_r+0x20a>
80001472:	2f c3       	sub	r3,-4
80001474:	a1 7b       	lsl	r11,0x1
80001476:	f7 e8 00 09 	and	r9,r11,r8
8000147a:	cf c0       	breq	80001472 <_malloc_r+0x206>
8000147c:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001480:	06 92       	mov	r2,r3
80001482:	1c 91       	mov	r1,lr
80001484:	62 36       	ld.w	r6,r1[0xc]
80001486:	c2 e8       	rjmp	800014e2 <_malloc_r+0x276>
80001488:	6c 1a       	ld.w	r10,r6[0x4]
8000148a:	e0 1a ff fc 	andl	r10,0xfffc
8000148e:	f4 07 01 08 	sub	r8,r10,r7
80001492:	58 f8       	cp.w	r8,15
80001494:	e0 8a 00 15 	brle	800014be <_malloc_r+0x252>
80001498:	6c 3a       	ld.w	r10,r6[0xc]
8000149a:	6c 29       	ld.w	r9,r6[0x8]
8000149c:	95 29       	st.w	r10[0x8],r9
8000149e:	93 3a       	st.w	r9[0xc],r10
800014a0:	0e 99       	mov	r9,r7
800014a2:	ec 07 00 07 	add	r7,r6,r7
800014a6:	a1 a9       	sbr	r9,0x0
800014a8:	99 37       	st.w	r12[0xc],r7
800014aa:	99 27       	st.w	r12[0x8],r7
800014ac:	8d 19       	st.w	r6[0x4],r9
800014ae:	ee 08 09 08 	st.w	r7[r8],r8
800014b2:	8f 2c       	st.w	r7[0x8],r12
800014b4:	8f 3c       	st.w	r7[0xc],r12
800014b6:	a1 a8       	sbr	r8,0x0
800014b8:	0a 9c       	mov	r12,r5
800014ba:	8f 18       	st.w	r7[0x4],r8
800014bc:	c0 d8       	rjmp	800014d6 <_malloc_r+0x26a>
800014be:	6c 39       	ld.w	r9,r6[0xc]
800014c0:	58 08       	cp.w	r8,0
800014c2:	c0 f5       	brlt	800014e0 <_malloc_r+0x274>
800014c4:	ec 0a 00 0a 	add	r10,r6,r10
800014c8:	74 18       	ld.w	r8,r10[0x4]
800014ca:	a1 a8       	sbr	r8,0x0
800014cc:	0a 9c       	mov	r12,r5
800014ce:	95 18       	st.w	r10[0x4],r8
800014d0:	6c 28       	ld.w	r8,r6[0x8]
800014d2:	93 28       	st.w	r9[0x8],r8
800014d4:	91 39       	st.w	r8[0xc],r9
800014d6:	f0 1f 00 19 	mcall	80001538 <_malloc_r+0x2cc>
800014da:	ec cc ff f8 	sub	r12,r6,-8
800014de:	d8 32       	popm	r0-r7,pc
800014e0:	12 96       	mov	r6,r9
800014e2:	02 36       	cp.w	r6,r1
800014e4:	cd 21       	brne	80001488 <_malloc_r+0x21c>
800014e6:	2f f2       	sub	r2,-1
800014e8:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800014ec:	c0 30       	breq	800014f2 <_malloc_r+0x286>
800014ee:	2f 81       	sub	r1,-8
800014f0:	cc ab       	rjmp	80001484 <_malloc_r+0x218>
800014f2:	1c 98       	mov	r8,lr
800014f4:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800014f8:	c0 81       	brne	80001508 <_malloc_r+0x29c>
800014fa:	68 19       	ld.w	r9,r4[0x4]
800014fc:	f6 08 11 ff 	rsub	r8,r11,-1
80001500:	f3 e8 00 08 	and	r8,r9,r8
80001504:	89 18       	st.w	r4[0x4],r8
80001506:	c0 78       	rjmp	80001514 <_malloc_r+0x2a8>
80001508:	f0 c9 00 08 	sub	r9,r8,8
8000150c:	20 13       	sub	r3,1
8000150e:	70 08       	ld.w	r8,r8[0x0]
80001510:	12 38       	cp.w	r8,r9
80001512:	cf 10       	breq	800014f4 <_malloc_r+0x288>
80001514:	a1 7b       	lsl	r11,0x1
80001516:	68 18       	ld.w	r8,r4[0x4]
80001518:	10 3b       	cp.w	r11,r8
8000151a:	e0 8b 00 11 	brhi	8000153c <_malloc_r+0x2d0>
8000151e:	58 0b       	cp.w	r11,0
80001520:	c0 e0       	breq	8000153c <_malloc_r+0x2d0>
80001522:	04 93       	mov	r3,r2
80001524:	c0 38       	rjmp	8000152a <_malloc_r+0x2be>
80001526:	2f c3       	sub	r3,-4
80001528:	a1 7b       	lsl	r11,0x1
8000152a:	f7 e8 00 09 	and	r9,r11,r8
8000152e:	ca 71       	brne	8000147c <_malloc_r+0x210>
80001530:	cf bb       	rjmp	80001526 <_malloc_r+0x2ba>
80001532:	00 00       	add	r0,r0
80001534:	00 00       	add	r0,r0
80001536:	01 04       	ld.w	r4,r0++
80001538:	80 00       	ld.sh	r0,r0[0x0]
8000153a:	16 cc       	st.b	r11++,r12
8000153c:	68 23       	ld.w	r3,r4[0x8]
8000153e:	66 12       	ld.w	r2,r3[0x4]
80001540:	e0 12 ff fc 	andl	r2,0xfffc
80001544:	0e 32       	cp.w	r2,r7
80001546:	5f 39       	srlo	r9
80001548:	e4 07 01 08 	sub	r8,r2,r7
8000154c:	58 f8       	cp.w	r8,15
8000154e:	5f aa       	srle	r10
80001550:	f5 e9 10 09 	or	r9,r10,r9
80001554:	e0 80 00 a2 	breq	80001698 <_malloc_r+0x42c>
80001558:	4c 88       	lddpc	r8,80001678 <_malloc_r+0x40c>
8000155a:	70 01       	ld.w	r1,r8[0x0]
8000155c:	4c 88       	lddpc	r8,8000167c <_malloc_r+0x410>
8000155e:	2f 01       	sub	r1,-16
80001560:	70 08       	ld.w	r8,r8[0x0]
80001562:	0e 01       	add	r1,r7
80001564:	5b f8       	cp.w	r8,-1
80001566:	c0 40       	breq	8000156e <_malloc_r+0x302>
80001568:	28 11       	sub	r1,-127
8000156a:	e0 11 ff 80 	andl	r1,0xff80
8000156e:	02 9b       	mov	r11,r1
80001570:	0a 9c       	mov	r12,r5
80001572:	f0 1f 00 44 	mcall	80001680 <_malloc_r+0x414>
80001576:	18 96       	mov	r6,r12
80001578:	5b fc       	cp.w	r12,-1
8000157a:	c6 e0       	breq	80001656 <_malloc_r+0x3ea>
8000157c:	e6 02 00 08 	add	r8,r3,r2
80001580:	10 3c       	cp.w	r12,r8
80001582:	c0 32       	brcc	80001588 <_malloc_r+0x31c>
80001584:	08 33       	cp.w	r3,r4
80001586:	c6 81       	brne	80001656 <_malloc_r+0x3ea>
80001588:	4b fa       	lddpc	r10,80001684 <_malloc_r+0x418>
8000158a:	74 09       	ld.w	r9,r10[0x0]
8000158c:	e2 09 00 09 	add	r9,r1,r9
80001590:	95 09       	st.w	r10[0x0],r9
80001592:	10 36       	cp.w	r6,r8
80001594:	c0 a1       	brne	800015a8 <_malloc_r+0x33c>
80001596:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
8000159a:	c0 71       	brne	800015a8 <_malloc_r+0x33c>
8000159c:	e2 02 00 02 	add	r2,r1,r2
800015a0:	68 28       	ld.w	r8,r4[0x8]
800015a2:	a1 a2       	sbr	r2,0x0
800015a4:	91 12       	st.w	r8[0x4],r2
800015a6:	c4 c8       	rjmp	8000163e <_malloc_r+0x3d2>
800015a8:	4b 5a       	lddpc	r10,8000167c <_malloc_r+0x410>
800015aa:	74 0b       	ld.w	r11,r10[0x0]
800015ac:	5b fb       	cp.w	r11,-1
800015ae:	c0 31       	brne	800015b4 <_malloc_r+0x348>
800015b0:	95 06       	st.w	r10[0x0],r6
800015b2:	c0 68       	rjmp	800015be <_malloc_r+0x352>
800015b4:	ec 09 00 09 	add	r9,r6,r9
800015b8:	4b 3a       	lddpc	r10,80001684 <_malloc_r+0x418>
800015ba:	10 19       	sub	r9,r8
800015bc:	95 09       	st.w	r10[0x0],r9
800015be:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800015c2:	f0 09 11 08 	rsub	r9,r8,8
800015c6:	58 08       	cp.w	r8,0
800015c8:	f2 08 17 10 	movne	r8,r9
800015cc:	ed d8 e1 06 	addne	r6,r6,r8
800015d0:	28 08       	sub	r8,-128
800015d2:	ec 01 00 01 	add	r1,r6,r1
800015d6:	0a 9c       	mov	r12,r5
800015d8:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800015dc:	f0 01 01 01 	sub	r1,r8,r1
800015e0:	02 9b       	mov	r11,r1
800015e2:	f0 1f 00 28 	mcall	80001680 <_malloc_r+0x414>
800015e6:	4a 88       	lddpc	r8,80001684 <_malloc_r+0x418>
800015e8:	5b fc       	cp.w	r12,-1
800015ea:	ec 0c 17 00 	moveq	r12,r6
800015ee:	f9 b1 00 00 	moveq	r1,0
800015f2:	70 09       	ld.w	r9,r8[0x0]
800015f4:	0c 1c       	sub	r12,r6
800015f6:	89 26       	st.w	r4[0x8],r6
800015f8:	02 0c       	add	r12,r1
800015fa:	12 01       	add	r1,r9
800015fc:	a1 ac       	sbr	r12,0x0
800015fe:	91 01       	st.w	r8[0x0],r1
80001600:	8d 1c       	st.w	r6[0x4],r12
80001602:	08 33       	cp.w	r3,r4
80001604:	c1 d0       	breq	8000163e <_malloc_r+0x3d2>
80001606:	58 f2       	cp.w	r2,15
80001608:	e0 8b 00 05 	brhi	80001612 <_malloc_r+0x3a6>
8000160c:	30 18       	mov	r8,1
8000160e:	8d 18       	st.w	r6[0x4],r8
80001610:	c2 38       	rjmp	80001656 <_malloc_r+0x3ea>
80001612:	30 59       	mov	r9,5
80001614:	20 c2       	sub	r2,12
80001616:	e0 12 ff f8 	andl	r2,0xfff8
8000161a:	e6 02 00 08 	add	r8,r3,r2
8000161e:	91 29       	st.w	r8[0x8],r9
80001620:	91 19       	st.w	r8[0x4],r9
80001622:	66 18       	ld.w	r8,r3[0x4]
80001624:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001628:	e5 e8 10 08 	or	r8,r2,r8
8000162c:	87 18       	st.w	r3[0x4],r8
8000162e:	58 f2       	cp.w	r2,15
80001630:	e0 88 00 07 	brls	8000163e <_malloc_r+0x3d2>
80001634:	e6 cb ff f8 	sub	r11,r3,-8
80001638:	0a 9c       	mov	r12,r5
8000163a:	f0 1f 00 14 	mcall	80001688 <_malloc_r+0x41c>
8000163e:	49 49       	lddpc	r9,8000168c <_malloc_r+0x420>
80001640:	72 0a       	ld.w	r10,r9[0x0]
80001642:	49 18       	lddpc	r8,80001684 <_malloc_r+0x418>
80001644:	70 08       	ld.w	r8,r8[0x0]
80001646:	14 38       	cp.w	r8,r10
80001648:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000164c:	49 19       	lddpc	r9,80001690 <_malloc_r+0x424>
8000164e:	72 0a       	ld.w	r10,r9[0x0]
80001650:	14 38       	cp.w	r8,r10
80001652:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001656:	68 28       	ld.w	r8,r4[0x8]
80001658:	70 18       	ld.w	r8,r8[0x4]
8000165a:	e0 18 ff fc 	andl	r8,0xfffc
8000165e:	0e 38       	cp.w	r8,r7
80001660:	5f 39       	srlo	r9
80001662:	0e 18       	sub	r8,r7
80001664:	58 f8       	cp.w	r8,15
80001666:	5f aa       	srle	r10
80001668:	f5 e9 10 09 	or	r9,r10,r9
8000166c:	c1 60       	breq	80001698 <_malloc_r+0x42c>
8000166e:	0a 9c       	mov	r12,r5
80001670:	f0 1f 00 09 	mcall	80001694 <_malloc_r+0x428>
80001674:	d8 3a       	popm	r0-r7,pc,r12=0
80001676:	00 00       	add	r0,r0
80001678:	00 00       	add	r0,r0
8000167a:	05 20       	ld.uh	r0,r2++
8000167c:	00 00       	add	r0,r0
8000167e:	05 10       	ld.sh	r0,r2++
80001680:	80 00       	ld.sh	r0,r0[0x0]
80001682:	16 d0       	st.w	--r11,r0
80001684:	00 00       	add	r0,r0
80001686:	05 24       	ld.uh	r4,r2++
80001688:	80 00       	ld.sh	r0,r0[0x0]
8000168a:	17 ec       	ld.ub	r12,r11[0x6]
8000168c:	00 00       	add	r0,r0
8000168e:	05 1c       	ld.sh	r12,r2++
80001690:	00 00       	add	r0,r0
80001692:	05 18       	ld.sh	r8,r2++
80001694:	80 00       	ld.sh	r0,r0[0x0]
80001696:	16 cc       	st.b	r11++,r12
80001698:	68 26       	ld.w	r6,r4[0x8]
8000169a:	a1 a8       	sbr	r8,0x0
8000169c:	0e 99       	mov	r9,r7
8000169e:	a1 a9       	sbr	r9,0x0
800016a0:	8d 19       	st.w	r6[0x4],r9
800016a2:	ec 07 00 07 	add	r7,r6,r7
800016a6:	0a 9c       	mov	r12,r5
800016a8:	89 27       	st.w	r4[0x8],r7
800016aa:	8f 18       	st.w	r7[0x4],r8
800016ac:	f0 1f 00 03 	mcall	800016b8 <_malloc_r+0x44c>
800016b0:	ec cc ff f8 	sub	r12,r6,-8
800016b4:	d8 32       	popm	r0-r7,pc
800016b6:	00 00       	add	r0,r0
800016b8:	80 00       	ld.sh	r0,r0[0x0]
800016ba:	16 cc       	st.b	r11++,r12

800016bc <memset>:
800016bc:	18 98       	mov	r8,r12
800016be:	c0 38       	rjmp	800016c4 <memset+0x8>
800016c0:	10 cb       	st.b	r8++,r11
800016c2:	20 1a       	sub	r10,1
800016c4:	58 0a       	cp.w	r10,0
800016c6:	cf d1       	brne	800016c0 <memset+0x4>
800016c8:	5e fc       	retal	r12

800016ca <__malloc_lock>:
800016ca:	5e fc       	retal	r12

800016cc <__malloc_unlock>:
800016cc:	5e fc       	retal	r12
800016ce:	d7 03       	nop

800016d0 <_sbrk_r>:
800016d0:	d4 21       	pushm	r4-r7,lr
800016d2:	30 08       	mov	r8,0
800016d4:	18 97       	mov	r7,r12
800016d6:	48 76       	lddpc	r6,800016f0 <_sbrk_r+0x20>
800016d8:	16 9c       	mov	r12,r11
800016da:	8d 08       	st.w	r6[0x0],r8
800016dc:	f0 1f 00 06 	mcall	800016f4 <_sbrk_r+0x24>
800016e0:	5b fc       	cp.w	r12,-1
800016e2:	c0 51       	brne	800016ec <_sbrk_r+0x1c>
800016e4:	6c 08       	ld.w	r8,r6[0x0]
800016e6:	58 08       	cp.w	r8,0
800016e8:	ef f8 1a 03 	st.wne	r7[0xc],r8
800016ec:	d8 22       	popm	r4-r7,pc
800016ee:	00 00       	add	r0,r0
800016f0:	00 00       	add	r0,r0
800016f2:	05 ac       	ld.ub	r12,r2[0x2]
800016f4:	80 00       	ld.sh	r0,r0[0x0]
800016f6:	16 f8       	st.b	--r11,r8

800016f8 <_sbrk>:
800016f8:	d4 01       	pushm	lr
800016fa:	48 c8       	lddpc	r8,80001728 <_sbrk+0x30>
800016fc:	70 09       	ld.w	r9,r8[0x0]
800016fe:	58 09       	cp.w	r9,0
80001700:	c0 31       	brne	80001706 <_sbrk+0xe>
80001702:	48 b9       	lddpc	r9,8000172c <_sbrk+0x34>
80001704:	91 09       	st.w	r8[0x0],r9
80001706:	48 99       	lddpc	r9,80001728 <_sbrk+0x30>
80001708:	48 aa       	lddpc	r10,80001730 <_sbrk+0x38>
8000170a:	72 08       	ld.w	r8,r9[0x0]
8000170c:	f0 0c 00 0c 	add	r12,r8,r12
80001710:	14 3c       	cp.w	r12,r10
80001712:	e0 8b 00 04 	brhi	8000171a <_sbrk+0x22>
80001716:	93 0c       	st.w	r9[0x0],r12
80001718:	c0 68       	rjmp	80001724 <_sbrk+0x2c>
8000171a:	f0 1f 00 07 	mcall	80001734 <_sbrk+0x3c>
8000171e:	30 c8       	mov	r8,12
80001720:	99 08       	st.w	r12[0x0],r8
80001722:	3f f8       	mov	r8,-1
80001724:	10 9c       	mov	r12,r8
80001726:	d8 02       	popm	pc
80001728:	00 00       	add	r0,r0
8000172a:	05 4c       	ld.w	r12,--r2
8000172c:	00 00       	add	r0,r0
8000172e:	05 b0       	ld.ub	r0,r2[0x3]
80001730:	00 00       	add	r0,r0
80001732:	e0 00       	*unknown*
80001734:	80 00       	ld.sh	r0,r0[0x0]
80001736:	17 38       	ld.ub	r8,r11++

80001738 <__errno>:
80001738:	48 28       	lddpc	r8,80001740 <__errno+0x8>
8000173a:	70 0c       	ld.w	r12,r8[0x0]
8000173c:	2f 4c       	sub	r12,-12
8000173e:	5e fc       	retal	r12
80001740:	00 00       	add	r0,r0
80001742:	01 00       	ld.w	r0,r0++

80001744 <_malloc_trim_r>:
80001744:	d4 21       	pushm	r4-r7,lr
80001746:	16 95       	mov	r5,r11
80001748:	18 97       	mov	r7,r12
8000174a:	f0 1f 00 23 	mcall	800017d4 <_malloc_trim_r+0x90>
8000174e:	4a 34       	lddpc	r4,800017d8 <_malloc_trim_r+0x94>
80001750:	68 28       	ld.w	r8,r4[0x8]
80001752:	70 16       	ld.w	r6,r8[0x4]
80001754:	e0 16 ff fc 	andl	r6,0xfffc
80001758:	ec c8 ff 91 	sub	r8,r6,-111
8000175c:	f0 05 01 05 	sub	r5,r8,r5
80001760:	e0 15 ff 80 	andl	r5,0xff80
80001764:	ea c5 00 80 	sub	r5,r5,128
80001768:	e0 45 00 7f 	cp.w	r5,127
8000176c:	e0 8a 00 23 	brle	800017b2 <_malloc_trim_r+0x6e>
80001770:	30 0b       	mov	r11,0
80001772:	0e 9c       	mov	r12,r7
80001774:	f0 1f 00 1a 	mcall	800017dc <_malloc_trim_r+0x98>
80001778:	68 28       	ld.w	r8,r4[0x8]
8000177a:	0c 08       	add	r8,r6
8000177c:	10 3c       	cp.w	r12,r8
8000177e:	c1 a1       	brne	800017b2 <_malloc_trim_r+0x6e>
80001780:	ea 0b 11 00 	rsub	r11,r5,0
80001784:	0e 9c       	mov	r12,r7
80001786:	f0 1f 00 16 	mcall	800017dc <_malloc_trim_r+0x98>
8000178a:	5b fc       	cp.w	r12,-1
8000178c:	c1 71       	brne	800017ba <_malloc_trim_r+0x76>
8000178e:	30 0b       	mov	r11,0
80001790:	0e 9c       	mov	r12,r7
80001792:	f0 1f 00 13 	mcall	800017dc <_malloc_trim_r+0x98>
80001796:	68 28       	ld.w	r8,r4[0x8]
80001798:	f8 08 01 09 	sub	r9,r12,r8
8000179c:	58 f9       	cp.w	r9,15
8000179e:	e0 8a 00 0a 	brle	800017b2 <_malloc_trim_r+0x6e>
800017a2:	a1 a9       	sbr	r9,0x0
800017a4:	91 19       	st.w	r8[0x4],r9
800017a6:	48 f8       	lddpc	r8,800017e0 <_malloc_trim_r+0x9c>
800017a8:	70 09       	ld.w	r9,r8[0x0]
800017aa:	48 f8       	lddpc	r8,800017e4 <_malloc_trim_r+0xa0>
800017ac:	f8 09 01 09 	sub	r9,r12,r9
800017b0:	91 09       	st.w	r8[0x0],r9
800017b2:	0e 9c       	mov	r12,r7
800017b4:	f0 1f 00 0d 	mcall	800017e8 <_malloc_trim_r+0xa4>
800017b8:	d8 2a       	popm	r4-r7,pc,r12=0
800017ba:	68 28       	ld.w	r8,r4[0x8]
800017bc:	0a 16       	sub	r6,r5
800017be:	a1 a6       	sbr	r6,0x0
800017c0:	91 16       	st.w	r8[0x4],r6
800017c2:	48 98       	lddpc	r8,800017e4 <_malloc_trim_r+0xa0>
800017c4:	70 09       	ld.w	r9,r8[0x0]
800017c6:	0a 19       	sub	r9,r5
800017c8:	0e 9c       	mov	r12,r7
800017ca:	91 09       	st.w	r8[0x0],r9
800017cc:	f0 1f 00 07 	mcall	800017e8 <_malloc_trim_r+0xa4>
800017d0:	da 2a       	popm	r4-r7,pc,r12=1
800017d2:	00 00       	add	r0,r0
800017d4:	80 00       	ld.sh	r0,r0[0x0]
800017d6:	16 ca       	st.b	r11++,r10
800017d8:	00 00       	add	r0,r0
800017da:	01 04       	ld.w	r4,r0++
800017dc:	80 00       	ld.sh	r0,r0[0x0]
800017de:	16 d0       	st.w	--r11,r0
800017e0:	00 00       	add	r0,r0
800017e2:	05 10       	ld.sh	r0,r2++
800017e4:	00 00       	add	r0,r0
800017e6:	05 24       	ld.uh	r4,r2++
800017e8:	80 00       	ld.sh	r0,r0[0x0]
800017ea:	16 cc       	st.b	r11++,r12

800017ec <_free_r>:
800017ec:	d4 21       	pushm	r4-r7,lr
800017ee:	16 96       	mov	r6,r11
800017f0:	18 97       	mov	r7,r12
800017f2:	58 0b       	cp.w	r11,0
800017f4:	e0 80 00 c8 	breq	80001984 <_free_r+0x198>
800017f8:	f0 1f 00 4c 	mcall	80001928 <_free_r+0x13c>
800017fc:	20 86       	sub	r6,8
800017fe:	4c ca       	lddpc	r10,8000192c <_free_r+0x140>
80001800:	6c 18       	ld.w	r8,r6[0x4]
80001802:	74 2e       	ld.w	lr,r10[0x8]
80001804:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001808:	a1 c8       	cbr	r8,0x0
8000180a:	ec 08 00 09 	add	r9,r6,r8
8000180e:	72 1b       	ld.w	r11,r9[0x4]
80001810:	e0 1b ff fc 	andl	r11,0xfffc
80001814:	1c 39       	cp.w	r9,lr
80001816:	c1 d1       	brne	80001850 <_free_r+0x64>
80001818:	f6 08 00 08 	add	r8,r11,r8
8000181c:	58 0c       	cp.w	r12,0
8000181e:	c0 81       	brne	8000182e <_free_r+0x42>
80001820:	6c 09       	ld.w	r9,r6[0x0]
80001822:	12 16       	sub	r6,r9
80001824:	12 08       	add	r8,r9
80001826:	6c 3b       	ld.w	r11,r6[0xc]
80001828:	6c 29       	ld.w	r9,r6[0x8]
8000182a:	97 29       	st.w	r11[0x8],r9
8000182c:	93 3b       	st.w	r9[0xc],r11
8000182e:	10 99       	mov	r9,r8
80001830:	95 26       	st.w	r10[0x8],r6
80001832:	a1 a9       	sbr	r9,0x0
80001834:	8d 19       	st.w	r6[0x4],r9
80001836:	4b f9       	lddpc	r9,80001930 <_free_r+0x144>
80001838:	72 09       	ld.w	r9,r9[0x0]
8000183a:	12 38       	cp.w	r8,r9
8000183c:	c0 63       	brcs	80001848 <_free_r+0x5c>
8000183e:	4b e8       	lddpc	r8,80001934 <_free_r+0x148>
80001840:	0e 9c       	mov	r12,r7
80001842:	70 0b       	ld.w	r11,r8[0x0]
80001844:	f0 1f 00 3d 	mcall	80001938 <_free_r+0x14c>
80001848:	0e 9c       	mov	r12,r7
8000184a:	f0 1f 00 3d 	mcall	8000193c <_free_r+0x150>
8000184e:	d8 22       	popm	r4-r7,pc
80001850:	93 1b       	st.w	r9[0x4],r11
80001852:	58 0c       	cp.w	r12,0
80001854:	c0 30       	breq	8000185a <_free_r+0x6e>
80001856:	30 0c       	mov	r12,0
80001858:	c1 08       	rjmp	80001878 <_free_r+0x8c>
8000185a:	6c 0e       	ld.w	lr,r6[0x0]
8000185c:	f4 c5 ff f8 	sub	r5,r10,-8
80001860:	1c 16       	sub	r6,lr
80001862:	1c 08       	add	r8,lr
80001864:	6c 2e       	ld.w	lr,r6[0x8]
80001866:	0a 3e       	cp.w	lr,r5
80001868:	f9 bc 00 01 	moveq	r12,1
8000186c:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001870:	eb fe 1a 02 	st.wne	r5[0x8],lr
80001874:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001878:	f2 0b 00 0e 	add	lr,r9,r11
8000187c:	7c 1e       	ld.w	lr,lr[0x4]
8000187e:	ed be 00 00 	bld	lr,0x0
80001882:	c1 30       	breq	800018a8 <_free_r+0xbc>
80001884:	16 08       	add	r8,r11
80001886:	58 0c       	cp.w	r12,0
80001888:	c0 c1       	brne	800018a0 <_free_r+0xb4>
8000188a:	4a 9e       	lddpc	lr,8000192c <_free_r+0x140>
8000188c:	72 2b       	ld.w	r11,r9[0x8]
8000188e:	2f 8e       	sub	lr,-8
80001890:	1c 3b       	cp.w	r11,lr
80001892:	c0 71       	brne	800018a0 <_free_r+0xb4>
80001894:	97 36       	st.w	r11[0xc],r6
80001896:	97 26       	st.w	r11[0x8],r6
80001898:	8d 2b       	st.w	r6[0x8],r11
8000189a:	8d 3b       	st.w	r6[0xc],r11
8000189c:	30 1c       	mov	r12,1
8000189e:	c0 58       	rjmp	800018a8 <_free_r+0xbc>
800018a0:	72 2b       	ld.w	r11,r9[0x8]
800018a2:	72 39       	ld.w	r9,r9[0xc]
800018a4:	93 2b       	st.w	r9[0x8],r11
800018a6:	97 39       	st.w	r11[0xc],r9
800018a8:	10 99       	mov	r9,r8
800018aa:	ec 08 09 08 	st.w	r6[r8],r8
800018ae:	a1 a9       	sbr	r9,0x0
800018b0:	8d 19       	st.w	r6[0x4],r9
800018b2:	58 0c       	cp.w	r12,0
800018b4:	c6 51       	brne	8000197e <_free_r+0x192>
800018b6:	e0 48 01 ff 	cp.w	r8,511
800018ba:	e0 8b 00 13 	brhi	800018e0 <_free_r+0xf4>
800018be:	a3 98       	lsr	r8,0x3
800018c0:	f4 08 00 39 	add	r9,r10,r8<<0x3
800018c4:	72 2b       	ld.w	r11,r9[0x8]
800018c6:	8d 39       	st.w	r6[0xc],r9
800018c8:	8d 2b       	st.w	r6[0x8],r11
800018ca:	97 36       	st.w	r11[0xc],r6
800018cc:	93 26       	st.w	r9[0x8],r6
800018ce:	a3 48       	asr	r8,0x2
800018d0:	74 19       	ld.w	r9,r10[0x4]
800018d2:	30 1b       	mov	r11,1
800018d4:	f6 08 09 48 	lsl	r8,r11,r8
800018d8:	f3 e8 10 08 	or	r8,r9,r8
800018dc:	95 18       	st.w	r10[0x4],r8
800018de:	c5 08       	rjmp	8000197e <_free_r+0x192>
800018e0:	f0 0b 16 09 	lsr	r11,r8,0x9
800018e4:	58 4b       	cp.w	r11,4
800018e6:	e0 8b 00 06 	brhi	800018f2 <_free_r+0x106>
800018ea:	f0 0b 16 06 	lsr	r11,r8,0x6
800018ee:	2c 8b       	sub	r11,-56
800018f0:	c2 b8       	rjmp	80001946 <_free_r+0x15a>
800018f2:	59 4b       	cp.w	r11,20
800018f4:	e0 8b 00 04 	brhi	800018fc <_free_r+0x110>
800018f8:	2a 5b       	sub	r11,-91
800018fa:	c2 68       	rjmp	80001946 <_free_r+0x15a>
800018fc:	e0 4b 00 54 	cp.w	r11,84
80001900:	e0 8b 00 06 	brhi	8000190c <_free_r+0x120>
80001904:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001908:	29 2b       	sub	r11,-110
8000190a:	c1 e8       	rjmp	80001946 <_free_r+0x15a>
8000190c:	e0 4b 01 54 	cp.w	r11,340
80001910:	e0 8b 00 06 	brhi	8000191c <_free_r+0x130>
80001914:	f0 0b 16 0f 	lsr	r11,r8,0xf
80001918:	28 9b       	sub	r11,-119
8000191a:	c1 68       	rjmp	80001946 <_free_r+0x15a>
8000191c:	e0 4b 05 54 	cp.w	r11,1364
80001920:	e0 88 00 10 	brls	80001940 <_free_r+0x154>
80001924:	37 eb       	mov	r11,126
80001926:	c1 08       	rjmp	80001946 <_free_r+0x15a>
80001928:	80 00       	ld.sh	r0,r0[0x0]
8000192a:	16 ca       	st.b	r11++,r10
8000192c:	00 00       	add	r0,r0
8000192e:	01 04       	ld.w	r4,r0++
80001930:	00 00       	add	r0,r0
80001932:	05 0c       	ld.w	r12,r2++
80001934:	00 00       	add	r0,r0
80001936:	05 20       	ld.uh	r0,r2++
80001938:	80 00       	ld.sh	r0,r0[0x0]
8000193a:	17 44       	ld.w	r4,--r11
8000193c:	80 00       	ld.sh	r0,r0[0x0]
8000193e:	16 cc       	st.b	r11++,r12
80001940:	f0 0b 16 12 	lsr	r11,r8,0x12
80001944:	28 4b       	sub	r11,-124
80001946:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000194a:	78 29       	ld.w	r9,r12[0x8]
8000194c:	18 39       	cp.w	r9,r12
8000194e:	c0 e1       	brne	8000196a <_free_r+0x17e>
80001950:	74 18       	ld.w	r8,r10[0x4]
80001952:	a3 4b       	asr	r11,0x2
80001954:	30 1c       	mov	r12,1
80001956:	f8 0b 09 4b 	lsl	r11,r12,r11
8000195a:	f1 eb 10 0b 	or	r11,r8,r11
8000195e:	12 98       	mov	r8,r9
80001960:	95 1b       	st.w	r10[0x4],r11
80001962:	c0 a8       	rjmp	80001976 <_free_r+0x18a>
80001964:	72 29       	ld.w	r9,r9[0x8]
80001966:	18 39       	cp.w	r9,r12
80001968:	c0 60       	breq	80001974 <_free_r+0x188>
8000196a:	72 1a       	ld.w	r10,r9[0x4]
8000196c:	e0 1a ff fc 	andl	r10,0xfffc
80001970:	14 38       	cp.w	r8,r10
80001972:	cf 93       	brcs	80001964 <_free_r+0x178>
80001974:	72 38       	ld.w	r8,r9[0xc]
80001976:	8d 38       	st.w	r6[0xc],r8
80001978:	8d 29       	st.w	r6[0x8],r9
8000197a:	93 36       	st.w	r9[0xc],r6
8000197c:	91 26       	st.w	r8[0x8],r6
8000197e:	0e 9c       	mov	r12,r7
80001980:	f0 1f 00 02 	mcall	80001988 <_free_r+0x19c>
80001984:	d8 22       	popm	r4-r7,pc
80001986:	00 00       	add	r0,r0
80001988:	80 00       	ld.sh	r0,r0[0x0]
8000198a:	16 cc       	st.b	r11++,r12

Disassembly of section .exception:

80001a00 <_evba>:
	...

80001a28 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001a28:	c7 a8       	rjmp	80001b1c <privilegedCalls>
	...

80001b00 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001b00:	1c 9f       	mov	pc,lr

80001b02 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001b02:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001b06:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
80001b0a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
80001b0e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001b12:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001b14:	c0 31       	brne	80001b1a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001b16:	4b 9c       	lddpc	r12,80001bf8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001b18:	18 9f       	mov	pc,r12

80001b1a <_int0_exit>:
_int0_exit:
	rete
80001b1a:	d6 03       	rete

80001b1c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
80001b1c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
80001b1e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001b20:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001b22:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001b24:	9b 3c       	st.w	sp[0xc],r12

80001b26 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001b26:	4b 6c       	lddpc	r12,80001bfc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001b28:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
80001b2a:	c0 61       	brne	80001b36 <priv_interruptenable>
	ld.w r12,sp[USERSR]
80001b2c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
80001b2e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001b30:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001b32:	d3 02       	popm	r11-r12
	rete
80001b34:	d6 03       	rete

80001b36 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001b36:	4b 3c       	lddpc	r12,80001c00 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001b38:	18 3b       	cp.w	r11,r12
	brne privexception
80001b3a:	c0 61       	brne	80001b46 <privexception>
	ld.w r12,sp[USERSR]
80001b3c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
80001b3e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001b40:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001b42:	d3 02       	popm	r11-r12
	rete
80001b44:	d6 03       	rete

80001b46 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001b46:	c0 08       	rjmp	80001b46 <privexception>

80001b48 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001b48:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
80001b4a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
80001b4e:	4a ec       	lddpc	r12,80001c04 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001b50:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001b52:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001b54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001b58:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
80001b5c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001b60:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001b62:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001b64:	1c 9f       	mov	pc,lr

80001b66 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001b66:	d3 03       	ssrf	0x10
	mov pc,lr
80001b68:	1c 9f       	mov	pc,lr

80001b6a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
80001b6a:	d5 03       	csrf	0x10
	mov pc,lr
80001b6c:	1c 9f       	mov	pc,lr

80001b6e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
80001b6e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001b72:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001b74:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001b78:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
80001b7c:	1c 9f       	mov	pc,lr

80001b7e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001b7e:	4a 3c       	lddpc	r12,80001c08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001b80:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001b82:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001b84:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001b86:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001b88:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
80001b8a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
80001b8c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
80001b8e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001b90:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001b92:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001b94:	33 40       	mov	r0,52
	add r0,r12
80001b96:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001b98:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
80001b9c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
80001b9e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
80001ba2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
80001ba4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
80001ba6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
80001ba8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
80001baa:	1a 90       	mov	r0,sp
	st.w --sp,r0
80001bac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80001bae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
80001bb2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
80001bb4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
80001bb6:	1c 9f       	mov	pc,lr

80001bb8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001bb8:	49 4c       	lddpc	r12,80001c08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001bba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
80001bbc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80001bbe:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80001bc0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
80001bc4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
80001bc6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
80001bc8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80001bca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
80001bcc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80001bce:	33 40       	mov	r0,52
	add r0,r12
80001bd0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80001bd2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80001bd6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
80001bd8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
80001bda:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
80001bdc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
80001bde:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
80001be0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
80001be2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
80001be4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
80001be6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
80001be8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80001bea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
80001bec:	d4 01       	pushm	lr
	call timerStart
80001bee:	f0 1f 00 08 	mcall	80001c0c <contextRestoreFromISR+0x54>
	popm lr
80001bf2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
80001bf4:	1c 9f       	mov	pc,lr
80001bf6:	00 00       	add	r0,r0
80001bf8:	80 00       	ld.sh	r0,r0[0x0]
80001bfa:	07 78       	ld.ub	r8,--r3
80001bfc:	80 00       	ld.sh	r0,r0[0x0]
80001bfe:	1b 66       	ld.uh	r6,--sp
80001c00:	80 00       	ld.sh	r0,r0[0x0]
80001c02:	1b 6a       	ld.uh	r10,--sp
80001c04:	80 00       	ld.sh	r0,r0[0x0]
80001c06:	1a 00       	add	r0,sp
80001c08:	00 00       	add	r0,r0
80001c0a:	05 9c       	ld.ub	r12,r2[0x1]
80001c0c:	80 00       	ld.sh	r0,r0[0x0]
80001c0e:	10 d2       	st.w	--r8,r2
	...
