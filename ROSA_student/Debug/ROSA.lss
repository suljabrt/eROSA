
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000217c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80002200  80002200  00002600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80002600  80002600  00002a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002684  80002684  00002a84  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80002688  00002c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002b94  00003114  2**0
                  ALLOC
  9 .bss          000001d0  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000d918  000006e8  000006e8  00000000  2**0
                  ALLOC
 11 .comment      000000bc  00000000  00000000  00003114  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000618  00000000  00000000  000031d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000b3c  00000000  00000000  000037e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000d21b  00000000  00000000  00004324  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00002041  00000000  00000000  0001153f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000471e  00000000  00000000  00013580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000d80  00000000  00000000  00017ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001da8  00000000  00000000  00018a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00001ae0  00000000  00000000  0001a7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 005346ce  00000000  00000000  0001c2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 00000560  00000000  00000000  00550976  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	19 6c       	ld.uh	r12,--r12

Disassembly of section .text:

80000008 <MaxLockedCeiling>:
 * Comment:
 * 	Returns a maximum ceiling of all currently locked semaphores
 *
 **********************************************************/
static uint8_t MaxLockedCeiling(void)
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 2d       	sub	sp,8
	if (LOCKEDSEMAPHORELIST==NULL)
80000010:	49 78       	lddpc	r8,8000006c <MaxLockedCeiling+0x64>
80000012:	70 08       	ld.w	r8,r8[0x0]
80000014:	58 08       	cp.w	r8,0
80000016:	c0 31       	brne	8000001c <MaxLockedCeiling+0x14>
	{
		return 0;
80000018:	30 08       	mov	r8,0
8000001a:	c2 48       	rjmp	80000062 <MaxLockedCeiling+0x5a>
	}
	else
	{
	uint8_t maxCeil=LOCKEDSEMAPHORELIST->ceiling;
8000001c:	49 48       	lddpc	r8,8000006c <MaxLockedCeiling+0x64>
8000001e:	70 08       	ld.w	r8,r8[0x0]
80000020:	11 c8       	ld.ub	r8,r8[0x4]
80000022:	ef 68 ff fb 	st.b	r7[-5],r8
	ROSA_semaphoreHandle * it = LOCKEDSEMAPHORELIST;
80000026:	49 28       	lddpc	r8,8000006c <MaxLockedCeiling+0x64>
80000028:	70 08       	ld.w	r8,r8[0x0]
8000002a:	ef 48 ff fc 	st.w	r7[-4],r8
	while (it->nextLockedSemaphore!=NULL)
8000002e:	c1 38       	rjmp	80000054 <MaxLockedCeiling+0x4c>
	{
		if (it->ceiling>maxCeil)
80000030:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000034:	11 c8       	ld.ub	r8,r8[0x4]
80000036:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000003a:	f0 09 18 00 	cp.b	r9,r8
8000003e:	c0 62       	brcc	8000004a <MaxLockedCeiling+0x42>
		{
			maxCeil=it->ceiling;
80000040:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000044:	11 c8       	ld.ub	r8,r8[0x4]
80000046:	ef 68 ff fb 	st.b	r7[-5],r8
		}
		it=it->nextLockedSemaphore;
8000004a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000004e:	70 28       	ld.w	r8,r8[0x8]
80000050:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
	uint8_t maxCeil=LOCKEDSEMAPHORELIST->ceiling;
	ROSA_semaphoreHandle * it = LOCKEDSEMAPHORELIST;
	while (it->nextLockedSemaphore!=NULL)
80000054:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000058:	70 28       	ld.w	r8,r8[0x8]
8000005a:	58 08       	cp.w	r8,0
8000005c:	ce a1       	brne	80000030 <MaxLockedCeiling+0x28>
			maxCeil=it->ceiling;
		}
		it=it->nextLockedSemaphore;
	}
	
	return maxCeil;
8000005e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
	}
}
80000062:	10 9c       	mov	r12,r8
80000064:	2f ed       	sub	sp,-8
80000066:	e3 cd 80 80 	ldm	sp++,r7,pc
8000006a:	00 00       	add	r0,r0
8000006c:	00 00       	add	r0,r0
8000006e:	05 d0       	ld.ub	r0,r2[0x5]

80000070 <ROSA_semaphoreCreate>:
 *
 * Comment:
 * 	Create a semaphore
 *
 **********************************************************/
int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t * mutex, uint8_t ceiling) {
80000070:	eb cd 40 c0 	pushm	r6-r7,lr
80000074:	1a 97       	mov	r7,sp
80000076:	20 2d       	sub	sp,8
80000078:	ef 4c ff fc 	st.w	r7[-4],r12
8000007c:	16 98       	mov	r8,r11
8000007e:	ef 68 ff f8 	st.b	r7[-8],r8
	**mutex = (ROSA_semaphoreHandle *) calloc(1, sizeof(***mutex));
80000082:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000086:	70 06       	ld.w	r6,r8[0x0]
80000088:	30 cb       	mov	r11,12
8000008a:	30 1c       	mov	r12,1
8000008c:	f0 1f 00 0e 	mcall	800000c4 <ROSA_semaphoreCreate+0x54>
80000090:	18 98       	mov	r8,r12
80000092:	8d 08       	st.w	r6[0x0],r8
	(**mutex)->holder = NULL;
80000094:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000098:	70 08       	ld.w	r8,r8[0x0]
8000009a:	70 08       	ld.w	r8,r8[0x0]
8000009c:	30 09       	mov	r9,0
8000009e:	91 09       	st.w	r8[0x0],r9
	(**mutex)->ceiling = ceiling;
800000a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000a4:	70 08       	ld.w	r8,r8[0x0]
800000a6:	70 09       	ld.w	r9,r8[0x0]
800000a8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800000ac:	b2 c8       	st.b	r9[0x4],r8
	(**mutex)->nextLockedSemaphore=NULL;	
800000ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000b2:	70 08       	ld.w	r8,r8[0x0]
800000b4:	70 08       	ld.w	r8,r8[0x0]
800000b6:	30 09       	mov	r9,0
800000b8:	91 29       	st.w	r8[0x8],r9
	
	return 0;
800000ba:	30 08       	mov	r8,0
}
800000bc:	10 9c       	mov	r12,r8
800000be:	2f ed       	sub	sp,-8
800000c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800000c4:	80 00       	ld.sh	r0,r0[0x0]
800000c6:	19 ec       	ld.ub	r12,r12[0x6]

800000c8 <ROSA_semaphoreLock>:
 *
 * Comment:
 * 	Lock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t  mutex) {
800000c8:	eb cd 40 c0 	pushm	r6-r7,lr
800000cc:	1a 97       	mov	r7,sp
800000ce:	20 2d       	sub	sp,8
800000d0:	ef 4c ff f8 	st.w	r7[-8],r12
	
	if (*mutex==NULL)
800000d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000d8:	70 08       	ld.w	r8,r8[0x0]
800000da:	58 08       	cp.w	r8,0
800000dc:	c0 61       	brne	800000e8 <ROSA_semaphoreLock+0x20>
	{
		return -1; // if the passed pointer to the semaphore handle is non-existent
800000de:	3f f8       	mov	r8,-1
800000e0:	c5 88       	rjmp	80000190 <ROSA_semaphoreLock+0xc8>
	}
	
	while ((*mutex)->holder != NULL || EXECTASK->priority<=MaxLockedCeiling()) //if the semaphore is already locked or IPCP condition P(task)>maxLockedCeil
		ROSA_yield();		
800000e2:	f0 1f 00 2e 	mcall	80000198 <ROSA_semaphoreLock+0xd0>
800000e6:	c0 28       	rjmp	800000ea <ROSA_semaphoreLock+0x22>
	if (*mutex==NULL)
	{
		return -1; // if the passed pointer to the semaphore handle is non-existent
	}
	
	while ((*mutex)->holder != NULL || EXECTASK->priority<=MaxLockedCeiling()) //if the semaphore is already locked or IPCP condition P(task)>maxLockedCeil
800000e8:	d7 03       	nop
800000ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000ee:	70 08       	ld.w	r8,r8[0x0]
800000f0:	70 08       	ld.w	r8,r8[0x0]
800000f2:	58 08       	cp.w	r8,0
800000f4:	cf 71       	brne	800000e2 <ROSA_semaphoreLock+0x1a>
800000f6:	4a a8       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd4>
800000f8:	70 08       	ld.w	r8,r8[0x0]
800000fa:	f1 36 00 64 	ld.ub	r6,r8[100]
800000fe:	f0 1f 00 29 	mcall	800001a0 <ROSA_semaphoreLock+0xd8>
80000102:	18 98       	mov	r8,r12
80000104:	f0 06 18 00 	cp.b	r6,r8
80000108:	fe 98 ff ed 	brls	800000e2 <ROSA_semaphoreLock+0x1a>
		ROSA_yield();		
	
	(*mutex)->holder = EXECTASK;
8000010c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000110:	70 08       	ld.w	r8,r8[0x0]
80000112:	4a 39       	lddpc	r9,8000019c <ROSA_semaphoreLock+0xd4>
80000114:	72 09       	ld.w	r9,r9[0x0]
80000116:	91 09       	st.w	r8[0x0],r9
	if (EXECTASK->priority < (*mutex)->ceiling)
80000118:	4a 18       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd4>
8000011a:	70 08       	ld.w	r8,r8[0x0]
8000011c:	f1 39 00 64 	ld.ub	r9,r8[100]
80000120:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000124:	70 08       	ld.w	r8,r8[0x0]
80000126:	11 c8       	ld.ub	r8,r8[0x4]
80000128:	f0 09 18 00 	cp.b	r9,r8
8000012c:	c1 32       	brcc	80000152 <ROSA_semaphoreLock+0x8a>
	{
		readyQueueExtract(EXECTASK);
8000012e:	49 c8       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd4>
80000130:	70 08       	ld.w	r8,r8[0x0]
80000132:	10 9c       	mov	r12,r8
80000134:	f0 1f 00 1c 	mcall	800001a4 <ROSA_semaphoreLock+0xdc>
		EXECTASK->priority=(*mutex)->ceiling; //IPCP priority inheritance		
80000138:	49 98       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd4>
8000013a:	70 09       	ld.w	r9,r8[0x0]
8000013c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000140:	70 08       	ld.w	r8,r8[0x0]
80000142:	11 c8       	ld.ub	r8,r8[0x4]
80000144:	f3 68 00 64 	st.b	r9[100],r8
		readyQueueInsert(EXECTASK);
80000148:	49 58       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd4>
8000014a:	70 08       	ld.w	r8,r8[0x0]
8000014c:	10 9c       	mov	r12,r8
8000014e:	f0 1f 00 17 	mcall	800001a8 <ROSA_semaphoreLock+0xe0>
	}
		
	if (LOCKEDSEMAPHORELIST==NULL)
80000152:	49 78       	lddpc	r8,800001ac <ROSA_semaphoreLock+0xe4>
80000154:	70 08       	ld.w	r8,r8[0x0]
80000156:	58 08       	cp.w	r8,0
80000158:	c0 61       	brne	80000164 <ROSA_semaphoreLock+0x9c>
	{
		LOCKEDSEMAPHORELIST=mutex;
8000015a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000015e:	49 48       	lddpc	r8,800001ac <ROSA_semaphoreLock+0xe4>
80000160:	91 09       	st.w	r8[0x0],r9
80000162:	c1 68       	rjmp	8000018e <ROSA_semaphoreLock+0xc6>
	}
	else
	{
		ROSA_semaphoreHandle * it; //finding the last semaphore in the list and changing its nextLockedSemaphore field to point to the just locked semaphore
		
		it = LOCKEDSEMAPHORELIST;
80000164:	49 28       	lddpc	r8,800001ac <ROSA_semaphoreLock+0xe4>
80000166:	70 08       	ld.w	r8,r8[0x0]
80000168:	ef 48 ff fc 	st.w	r7[-4],r8
		
		while(it->nextLockedSemaphore!=NULL)
8000016c:	c0 68       	rjmp	80000178 <ROSA_semaphoreLock+0xb0>
		{
			it=it->nextLockedSemaphore;
8000016e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000172:	70 28       	ld.w	r8,r8[0x8]
80000174:	ef 48 ff fc 	st.w	r7[-4],r8
	{
		ROSA_semaphoreHandle * it; //finding the last semaphore in the list and changing its nextLockedSemaphore field to point to the just locked semaphore
		
		it = LOCKEDSEMAPHORELIST;
		
		while(it->nextLockedSemaphore!=NULL)
80000178:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000017c:	70 28       	ld.w	r8,r8[0x8]
8000017e:	58 08       	cp.w	r8,0
80000180:	cf 71       	brne	8000016e <ROSA_semaphoreLock+0xa6>
		{
			it=it->nextLockedSemaphore;
		}
		
		it->nextLockedSemaphore = *mutex;
80000182:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000186:	70 09       	ld.w	r9,r8[0x0]
80000188:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000018c:	91 29       	st.w	r8[0x8],r9
	}
	
	return 0;
8000018e:	30 08       	mov	r8,0
}
80000190:	10 9c       	mov	r12,r8
80000192:	2f ed       	sub	sp,-8
80000194:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80000198:	80 00       	ld.sh	r0,r0[0x0]
8000019a:	0e 1e       	sub	lr,r7
8000019c:	00 00       	add	r0,r0
8000019e:	06 58       	eor	r8,r3
800001a0:	80 00       	ld.sh	r0,r0[0x0]
800001a2:	00 08       	add	r8,r0
800001a4:	80 00       	ld.sh	r0,r0[0x0]
800001a6:	09 84       	ld.ub	r4,r4[0x0]
800001a8:	80 00       	ld.sh	r0,r0[0x0]
800001aa:	08 f0       	st.b	--r4,r0
800001ac:	00 00       	add	r0,r0
800001ae:	05 d0       	ld.ub	r0,r2[0x5]

800001b0 <ROSA_semaphoreUnlock>:
 *
 * Comment:
 * 	Unlock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreUnlock(ROSA_semaphoreHandle_t  mutex) {
800001b0:	eb cd 40 80 	pushm	r7,lr
800001b4:	1a 97       	mov	r7,sp
800001b6:	20 2d       	sub	sp,8
800001b8:	ef 4c ff f8 	st.w	r7[-8],r12
	(*mutex)->holder = NULL;
800001bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001c0:	70 08       	ld.w	r8,r8[0x0]
800001c2:	30 09       	mov	r9,0
800001c4:	91 09       	st.w	r8[0x0],r9
	if (*mutex == LOCKEDSEMAPHORELIST)
800001c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001ca:	70 09       	ld.w	r9,r8[0x0]
800001cc:	49 e8       	lddpc	r8,80000244 <ROSA_semaphoreUnlock+0x94>
800001ce:	70 08       	ld.w	r8,r8[0x0]
800001d0:	10 39       	cp.w	r9,r8
800001d2:	c0 81       	brne	800001e2 <ROSA_semaphoreUnlock+0x32>
	{
		LOCKEDSEMAPHORELIST = (*mutex)->nextLockedSemaphore; //if first locked semaphore needs to be unlocked
800001d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001d8:	70 08       	ld.w	r8,r8[0x0]
800001da:	70 29       	ld.w	r9,r8[0x8]
800001dc:	49 a8       	lddpc	r8,80000244 <ROSA_semaphoreUnlock+0x94>
800001de:	91 09       	st.w	r8[0x0],r9
800001e0:	c1 a8       	rjmp	80000214 <ROSA_semaphoreUnlock+0x64>
	}
	else
	{
		ROSA_semaphoreHandle * it;
		it=LOCKEDSEMAPHORELIST;
800001e2:	49 98       	lddpc	r8,80000244 <ROSA_semaphoreUnlock+0x94>
800001e4:	70 08       	ld.w	r8,r8[0x0]
800001e6:	ef 48 ff fc 	st.w	r7[-4],r8
		while (it->nextLockedSemaphore != *mutex) //find the locked semaphore before the one that needs to be unlocked
800001ea:	c0 68       	rjmp	800001f6 <ROSA_semaphoreUnlock+0x46>
		{
			it=it->nextLockedSemaphore;
800001ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001f0:	70 28       	ld.w	r8,r8[0x8]
800001f2:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
		ROSA_semaphoreHandle * it;
		it=LOCKEDSEMAPHORELIST;
		while (it->nextLockedSemaphore != *mutex) //find the locked semaphore before the one that needs to be unlocked
800001f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001fa:	70 29       	ld.w	r9,r8[0x8]
800001fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000200:	70 08       	ld.w	r8,r8[0x0]
80000202:	10 39       	cp.w	r9,r8
80000204:	cf 41       	brne	800001ec <ROSA_semaphoreUnlock+0x3c>
		{
			it=it->nextLockedSemaphore;
		}
		it->nextLockedSemaphore=(*mutex)->nextLockedSemaphore;
80000206:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000020a:	70 08       	ld.w	r8,r8[0x0]
8000020c:	70 29       	ld.w	r9,r8[0x8]
8000020e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000212:	91 29       	st.w	r8[0x8],r9
	}
	readyQueueExtract(EXECTASK);
80000214:	48 d8       	lddpc	r8,80000248 <ROSA_semaphoreUnlock+0x98>
80000216:	70 08       	ld.w	r8,r8[0x0]
80000218:	10 9c       	mov	r12,r8
8000021a:	f0 1f 00 0d 	mcall	8000024c <ROSA_semaphoreUnlock+0x9c>
	EXECTASK->priority=EXECTASK->originalPriority; //IPCP priority inheritance
8000021e:	48 b8       	lddpc	r8,80000248 <ROSA_semaphoreUnlock+0x98>
80000220:	70 09       	ld.w	r9,r8[0x0]
80000222:	48 a8       	lddpc	r8,80000248 <ROSA_semaphoreUnlock+0x98>
80000224:	70 08       	ld.w	r8,r8[0x0]
80000226:	f1 38 00 71 	ld.ub	r8,r8[113]
8000022a:	f3 68 00 64 	st.b	r9[100],r8
	readyQueueInsert(EXECTASK);
8000022e:	48 78       	lddpc	r8,80000248 <ROSA_semaphoreUnlock+0x98>
80000230:	70 08       	ld.w	r8,r8[0x0]
80000232:	10 9c       	mov	r12,r8
80000234:	f0 1f 00 07 	mcall	80000250 <ROSA_semaphoreUnlock+0xa0>
	
	return 0;
80000238:	30 08       	mov	r8,0
}
8000023a:	10 9c       	mov	r12,r8
8000023c:	2f ed       	sub	sp,-8
8000023e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000242:	00 00       	add	r0,r0
80000244:	00 00       	add	r0,r0
80000246:	05 d0       	ld.ub	r0,r2[0x5]
80000248:	00 00       	add	r0,r0
8000024a:	06 58       	eor	r8,r3
8000024c:	80 00       	ld.sh	r0,r0[0x0]
8000024e:	09 84       	ld.ub	r4,r4[0x0]
80000250:	80 00       	ld.sh	r0,r0[0x0]
80000252:	08 f0       	st.b	--r4,r0

80000254 <usart_options>:
80000254:	00 00 e1 00 08 04 00 00 00 00 00 00 74 61 73 6b     ............task
80000264:	31 31 20 45 6e 74 72 79 0d 0a 00 00 74 61 73 6b     11 Entry....task
80000274:	31 31 20 6c 6f 63 6b 65 64 20 74 68 65 20 6d 75     11 locked the mu
80000284:	74 65 78 0d 0a 00 00 00 74 61 73 6b 31 31 20 75     tex.....task11 u
80000294:	6e 6c 6f 63 6b 65 64 20 74 68 65 20 6d 75 74 65     nlocked the mute
800002a4:	78 0d 0a 00 74 73 6b 31 00 00 00 00 74 73 6b 32     x...tsk1....tsk2
800002b4:	00 00 00 00 74 73 6b 33 00 00 00 00 74 73 6b 34     ....tsk3....tsk4
800002c4:	00 00 00 00 74 73 6b 35 00 00 00 00 74 73 6b 36     ....tsk5....tsk6
800002d4:	00 00 00 00 74 73 6b 37 00 00 00 00 74 73 6b 38     ....tsk7....tsk8
800002e4:	00 00 00 00 74 73 6b 39 00 00 00 00 74 73 6b 31     ....tsk9....tsk1
800002f4:	30 00 00 00 74 73 6b 31 31 00 00 00 74 73 6b 31     0...tsk11...tsk1
80000304:	32 00 00 00                                         2...

80000308 <task1>:
/*************************************************************
 * Task 1
 * Turn LED 1 ON
 ************************************************************/
void task1(void)
{
80000308:	eb cd 40 80 	pushm	r7,lr
8000030c:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex1);
8000030e:	48 b8       	lddpc	r8,80000338 <task1+0x30>
80000310:	70 08       	ld.w	r8,r8[0x0]
80000312:	10 9c       	mov	r12,r8
80000314:	f0 1f 00 0a 	mcall	8000033c <task1+0x34>
		ledOn(LED0_GPIO);
80000318:	33 bc       	mov	r12,59
8000031a:	f0 1f 00 0a 	mcall	80000340 <task1+0x38>
		ROSA_delay(511);
8000031e:	e0 6a 01 ff 	mov	r10,511
80000322:	30 0b       	mov	r11,0
80000324:	f0 1f 00 08 	mcall	80000344 <task1+0x3c>
		ROSA_semaphoreUnlock(mutex1);
80000328:	48 48       	lddpc	r8,80000338 <task1+0x30>
8000032a:	70 08       	ld.w	r8,r8[0x0]
8000032c:	10 9c       	mov	r12,r8
8000032e:	f0 1f 00 07 	mcall	80000348 <task1+0x40>
		ROSA_yield();
80000332:	f0 1f 00 07 	mcall	8000034c <task1+0x44>
	}
80000336:	ce cb       	rjmp	8000030e <task1+0x6>
80000338:	00 00       	add	r0,r0
8000033a:	06 18       	sub	r8,r3
8000033c:	80 00       	ld.sh	r0,r0[0x0]
8000033e:	00 c8       	st.b	r0++,r8
80000340:	80 00       	ld.sh	r0,r0[0x0]
80000342:	14 f0       	st.b	--r10,r0
80000344:	80 00       	ld.sh	r0,r0[0x0]
80000346:	11 70       	ld.ub	r0,--r8
80000348:	80 00       	ld.sh	r0,r0[0x0]
8000034a:	01 b0       	ld.ub	r0,r0[0x3]
8000034c:	80 00       	ld.sh	r0,r0[0x0]
8000034e:	0e 1e       	sub	lr,r7

80000350 <task2>:
/*************************************************************
 * Task 2
 * Turn LED 0 OFF
 ************************************************************/
void task2(void)
{
80000350:	eb cd 40 80 	pushm	r7,lr
80000354:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex1);
80000356:	48 b8       	lddpc	r8,80000380 <task2+0x30>
80000358:	70 08       	ld.w	r8,r8[0x0]
8000035a:	10 9c       	mov	r12,r8
8000035c:	f0 1f 00 0a 	mcall	80000384 <task2+0x34>
		ledOff(LED0_GPIO);
80000360:	33 bc       	mov	r12,59
80000362:	f0 1f 00 0a 	mcall	80000388 <task2+0x38>
		ROSA_delay(510);
80000366:	e0 6a 01 fe 	mov	r10,510
8000036a:	30 0b       	mov	r11,0
8000036c:	f0 1f 00 08 	mcall	8000038c <task2+0x3c>
		ROSA_semaphoreUnlock(mutex1);
80000370:	48 48       	lddpc	r8,80000380 <task2+0x30>
80000372:	70 08       	ld.w	r8,r8[0x0]
80000374:	10 9c       	mov	r12,r8
80000376:	f0 1f 00 07 	mcall	80000390 <task2+0x40>
		ROSA_yield();
8000037a:	f0 1f 00 07 	mcall	80000394 <task2+0x44>
	}
8000037e:	ce cb       	rjmp	80000356 <task2+0x6>
80000380:	00 00       	add	r0,r0
80000382:	06 18       	sub	r8,r3
80000384:	80 00       	ld.sh	r0,r0[0x0]
80000386:	00 c8       	st.b	r0++,r8
80000388:	80 00       	ld.sh	r0,r0[0x0]
8000038a:	15 10       	ld.sh	r0,r10++
8000038c:	80 00       	ld.sh	r0,r0[0x0]
8000038e:	11 70       	ld.ub	r0,--r8
80000390:	80 00       	ld.sh	r0,r0[0x0]
80000392:	01 b0       	ld.ub	r0,r0[0x3]
80000394:	80 00       	ld.sh	r0,r0[0x0]
80000396:	0e 1e       	sub	lr,r7

80000398 <task3>:
/*************************************************************
 * Task 3
 * Turn LED 1 ON
 ************************************************************/
void task3(void)
{
80000398:	eb cd 40 80 	pushm	r7,lr
8000039c:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex2);
8000039e:	48 b8       	lddpc	r8,800003c8 <task3+0x30>
800003a0:	70 08       	ld.w	r8,r8[0x0]
800003a2:	10 9c       	mov	r12,r8
800003a4:	f0 1f 00 0a 	mcall	800003cc <task3+0x34>
		ledOn(LED1_GPIO);
800003a8:	33 cc       	mov	r12,60
800003aa:	f0 1f 00 0a 	mcall	800003d0 <task3+0x38>
		ROSA_delay(509);
800003ae:	e0 6a 01 fd 	mov	r10,509
800003b2:	30 0b       	mov	r11,0
800003b4:	f0 1f 00 08 	mcall	800003d4 <task3+0x3c>
		ROSA_semaphoreUnlock(mutex2);
800003b8:	48 48       	lddpc	r8,800003c8 <task3+0x30>
800003ba:	70 08       	ld.w	r8,r8[0x0]
800003bc:	10 9c       	mov	r12,r8
800003be:	f0 1f 00 07 	mcall	800003d8 <task3+0x40>
		ROSA_yield();
800003c2:	f0 1f 00 07 	mcall	800003dc <task3+0x44>
	}
800003c6:	ce cb       	rjmp	8000039e <task3+0x6>
800003c8:	00 00       	add	r0,r0
800003ca:	05 dc       	ld.ub	r12,r2[0x5]
800003cc:	80 00       	ld.sh	r0,r0[0x0]
800003ce:	00 c8       	st.b	r0++,r8
800003d0:	80 00       	ld.sh	r0,r0[0x0]
800003d2:	14 f0       	st.b	--r10,r0
800003d4:	80 00       	ld.sh	r0,r0[0x0]
800003d6:	11 70       	ld.ub	r0,--r8
800003d8:	80 00       	ld.sh	r0,r0[0x0]
800003da:	01 b0       	ld.ub	r0,r0[0x3]
800003dc:	80 00       	ld.sh	r0,r0[0x0]
800003de:	0e 1e       	sub	lr,r7

800003e0 <task4>:
/*************************************************************
 * Task 4
 * Turn LED 1 OFF
 ************************************************************/
void task4(void)
{
800003e0:	eb cd 40 80 	pushm	r7,lr
800003e4:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex2);
800003e6:	48 b8       	lddpc	r8,80000410 <task4+0x30>
800003e8:	70 08       	ld.w	r8,r8[0x0]
800003ea:	10 9c       	mov	r12,r8
800003ec:	f0 1f 00 0a 	mcall	80000414 <task4+0x34>
		ledOff(LED1_GPIO);
800003f0:	33 cc       	mov	r12,60
800003f2:	f0 1f 00 0a 	mcall	80000418 <task4+0x38>
		ROSA_delay(508);
800003f6:	e0 6a 01 fc 	mov	r10,508
800003fa:	30 0b       	mov	r11,0
800003fc:	f0 1f 00 08 	mcall	8000041c <task4+0x3c>
		ROSA_semaphoreUnlock(mutex2);
80000400:	48 48       	lddpc	r8,80000410 <task4+0x30>
80000402:	70 08       	ld.w	r8,r8[0x0]
80000404:	10 9c       	mov	r12,r8
80000406:	f0 1f 00 07 	mcall	80000420 <task4+0x40>
		ROSA_yield();
8000040a:	f0 1f 00 07 	mcall	80000424 <task4+0x44>
	}
8000040e:	ce cb       	rjmp	800003e6 <task4+0x6>
80000410:	00 00       	add	r0,r0
80000412:	05 dc       	ld.ub	r12,r2[0x5]
80000414:	80 00       	ld.sh	r0,r0[0x0]
80000416:	00 c8       	st.b	r0++,r8
80000418:	80 00       	ld.sh	r0,r0[0x0]
8000041a:	15 10       	ld.sh	r0,r10++
8000041c:	80 00       	ld.sh	r0,r0[0x0]
8000041e:	11 70       	ld.ub	r0,--r8
80000420:	80 00       	ld.sh	r0,r0[0x0]
80000422:	01 b0       	ld.ub	r0,r0[0x3]
80000424:	80 00       	ld.sh	r0,r0[0x0]
80000426:	0e 1e       	sub	lr,r7

80000428 <task5>:
/*************************************************************
 * Task 5
 * Turn LED 2 ON
 ************************************************************/
void task5(void)
{
80000428:	eb cd 40 80 	pushm	r7,lr
8000042c:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex3);
8000042e:	48 b8       	lddpc	r8,80000458 <task5+0x30>
80000430:	70 08       	ld.w	r8,r8[0x0]
80000432:	10 9c       	mov	r12,r8
80000434:	f0 1f 00 0a 	mcall	8000045c <task5+0x34>
		ledOn(LED2_GPIO);
80000438:	33 dc       	mov	r12,61
8000043a:	f0 1f 00 0a 	mcall	80000460 <task5+0x38>
		ROSA_delay(507);
8000043e:	e0 6a 01 fb 	mov	r10,507
80000442:	30 0b       	mov	r11,0
80000444:	f0 1f 00 08 	mcall	80000464 <task5+0x3c>
		ROSA_semaphoreUnlock(mutex3);
80000448:	48 48       	lddpc	r8,80000458 <task5+0x30>
8000044a:	70 08       	ld.w	r8,r8[0x0]
8000044c:	10 9c       	mov	r12,r8
8000044e:	f0 1f 00 07 	mcall	80000468 <task5+0x40>
		ROSA_yield();
80000452:	f0 1f 00 07 	mcall	8000046c <task5+0x44>
	}
80000456:	ce cb       	rjmp	8000042e <task5+0x6>
80000458:	00 00       	add	r0,r0
8000045a:	06 0c       	add	r12,r3
8000045c:	80 00       	ld.sh	r0,r0[0x0]
8000045e:	00 c8       	st.b	r0++,r8
80000460:	80 00       	ld.sh	r0,r0[0x0]
80000462:	14 f0       	st.b	--r10,r0
80000464:	80 00       	ld.sh	r0,r0[0x0]
80000466:	11 70       	ld.ub	r0,--r8
80000468:	80 00       	ld.sh	r0,r0[0x0]
8000046a:	01 b0       	ld.ub	r0,r0[0x3]
8000046c:	80 00       	ld.sh	r0,r0[0x0]
8000046e:	0e 1e       	sub	lr,r7

80000470 <task6>:
/*************************************************************
 * Task 6
 * Turn LED 2 OFF
 ************************************************************/
void task6(void)
{
80000470:	eb cd 40 80 	pushm	r7,lr
80000474:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex3);
80000476:	48 b8       	lddpc	r8,800004a0 <task6+0x30>
80000478:	70 08       	ld.w	r8,r8[0x0]
8000047a:	10 9c       	mov	r12,r8
8000047c:	f0 1f 00 0a 	mcall	800004a4 <task6+0x34>
		ledOff(LED2_GPIO);
80000480:	33 dc       	mov	r12,61
80000482:	f0 1f 00 0a 	mcall	800004a8 <task6+0x38>
		ROSA_delay(506);
80000486:	e0 6a 01 fa 	mov	r10,506
8000048a:	30 0b       	mov	r11,0
8000048c:	f0 1f 00 08 	mcall	800004ac <task6+0x3c>
		ROSA_semaphoreUnlock(mutex3);
80000490:	48 48       	lddpc	r8,800004a0 <task6+0x30>
80000492:	70 08       	ld.w	r8,r8[0x0]
80000494:	10 9c       	mov	r12,r8
80000496:	f0 1f 00 07 	mcall	800004b0 <task6+0x40>
		ROSA_yield();
8000049a:	f0 1f 00 07 	mcall	800004b4 <task6+0x44>
	}
8000049e:	ce cb       	rjmp	80000476 <task6+0x6>
800004a0:	00 00       	add	r0,r0
800004a2:	06 0c       	add	r12,r3
800004a4:	80 00       	ld.sh	r0,r0[0x0]
800004a6:	00 c8       	st.b	r0++,r8
800004a8:	80 00       	ld.sh	r0,r0[0x0]
800004aa:	15 10       	ld.sh	r0,r10++
800004ac:	80 00       	ld.sh	r0,r0[0x0]
800004ae:	11 70       	ld.ub	r0,--r8
800004b0:	80 00       	ld.sh	r0,r0[0x0]
800004b2:	01 b0       	ld.ub	r0,r0[0x3]
800004b4:	80 00       	ld.sh	r0,r0[0x0]
800004b6:	0e 1e       	sub	lr,r7

800004b8 <task7>:
/*************************************************************
 * Task 7
 * Turn LED 3 ON
 ************************************************************/
void task7(void)
{
800004b8:	eb cd 40 80 	pushm	r7,lr
800004bc:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex4);
800004be:	48 b8       	lddpc	r8,800004e8 <task7+0x30>
800004c0:	70 08       	ld.w	r8,r8[0x0]
800004c2:	10 9c       	mov	r12,r8
800004c4:	f0 1f 00 0a 	mcall	800004ec <task7+0x34>
		ledOn(LED3_GPIO);
800004c8:	33 ec       	mov	r12,62
800004ca:	f0 1f 00 0a 	mcall	800004f0 <task7+0x38>
		ROSA_delay(505);
800004ce:	e0 6a 01 f9 	mov	r10,505
800004d2:	30 0b       	mov	r11,0
800004d4:	f0 1f 00 08 	mcall	800004f4 <task7+0x3c>
		ROSA_semaphoreUnlock(mutex4);
800004d8:	48 48       	lddpc	r8,800004e8 <task7+0x30>
800004da:	70 08       	ld.w	r8,r8[0x0]
800004dc:	10 9c       	mov	r12,r8
800004de:	f0 1f 00 07 	mcall	800004f8 <task7+0x40>
		ROSA_yield();
800004e2:	f0 1f 00 07 	mcall	800004fc <task7+0x44>
	}
800004e6:	ce cb       	rjmp	800004be <task7+0x6>
800004e8:	00 00       	add	r0,r0
800004ea:	06 14       	sub	r4,r3
800004ec:	80 00       	ld.sh	r0,r0[0x0]
800004ee:	00 c8       	st.b	r0++,r8
800004f0:	80 00       	ld.sh	r0,r0[0x0]
800004f2:	14 f0       	st.b	--r10,r0
800004f4:	80 00       	ld.sh	r0,r0[0x0]
800004f6:	11 70       	ld.ub	r0,--r8
800004f8:	80 00       	ld.sh	r0,r0[0x0]
800004fa:	01 b0       	ld.ub	r0,r0[0x3]
800004fc:	80 00       	ld.sh	r0,r0[0x0]
800004fe:	0e 1e       	sub	lr,r7

80000500 <task8>:
/*************************************************************
 * Task 8
 * Turn LED 3 OFF
 ************************************************************/
void task8(void)
{
80000500:	eb cd 40 80 	pushm	r7,lr
80000504:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex4);
80000506:	48 b8       	lddpc	r8,80000530 <task8+0x30>
80000508:	70 08       	ld.w	r8,r8[0x0]
8000050a:	10 9c       	mov	r12,r8
8000050c:	f0 1f 00 0a 	mcall	80000534 <task8+0x34>
		ledOff(LED3_GPIO);
80000510:	33 ec       	mov	r12,62
80000512:	f0 1f 00 0a 	mcall	80000538 <task8+0x38>
		ROSA_delay(504);
80000516:	e0 6a 01 f8 	mov	r10,504
8000051a:	30 0b       	mov	r11,0
8000051c:	f0 1f 00 08 	mcall	8000053c <task8+0x3c>
		ROSA_semaphoreUnlock(mutex4);
80000520:	48 48       	lddpc	r8,80000530 <task8+0x30>
80000522:	70 08       	ld.w	r8,r8[0x0]
80000524:	10 9c       	mov	r12,r8
80000526:	f0 1f 00 07 	mcall	80000540 <task8+0x40>
		ROSA_yield();
8000052a:	f0 1f 00 07 	mcall	80000544 <task8+0x44>
	}
8000052e:	ce cb       	rjmp	80000506 <task8+0x6>
80000530:	00 00       	add	r0,r0
80000532:	06 14       	sub	r4,r3
80000534:	80 00       	ld.sh	r0,r0[0x0]
80000536:	00 c8       	st.b	r0++,r8
80000538:	80 00       	ld.sh	r0,r0[0x0]
8000053a:	15 10       	ld.sh	r0,r10++
8000053c:	80 00       	ld.sh	r0,r0[0x0]
8000053e:	11 70       	ld.ub	r0,--r8
80000540:	80 00       	ld.sh	r0,r0[0x0]
80000542:	01 b0       	ld.ub	r0,r0[0x3]
80000544:	80 00       	ld.sh	r0,r0[0x0]
80000546:	0e 1e       	sub	lr,r7

80000548 <task9>:
/*************************************************************
 * Task 9
 * Turn LED 4 ON
 ************************************************************/
void task9(void)
{
80000548:	eb cd 40 80 	pushm	r7,lr
8000054c:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex5);
8000054e:	48 b8       	lddpc	r8,80000578 <task9+0x30>
80000550:	70 08       	ld.w	r8,r8[0x0]
80000552:	10 9c       	mov	r12,r8
80000554:	f0 1f 00 0a 	mcall	8000057c <task9+0x34>
		ledOn(LED4_GPIO);
80000558:	33 3c       	mov	r12,51
8000055a:	f0 1f 00 0a 	mcall	80000580 <task9+0x38>
		ROSA_delay(503);
8000055e:	e0 6a 01 f7 	mov	r10,503
80000562:	30 0b       	mov	r11,0
80000564:	f0 1f 00 08 	mcall	80000584 <task9+0x3c>
		ROSA_semaphoreUnlock(mutex5);
80000568:	48 48       	lddpc	r8,80000578 <task9+0x30>
8000056a:	70 08       	ld.w	r8,r8[0x0]
8000056c:	10 9c       	mov	r12,r8
8000056e:	f0 1f 00 07 	mcall	80000588 <task9+0x40>
		ROSA_yield();
80000572:	f0 1f 00 07 	mcall	8000058c <task9+0x44>
	}
80000576:	ce cb       	rjmp	8000054e <task9+0x6>
80000578:	00 00       	add	r0,r0
8000057a:	05 ec       	ld.ub	r12,r2[0x6]
8000057c:	80 00       	ld.sh	r0,r0[0x0]
8000057e:	00 c8       	st.b	r0++,r8
80000580:	80 00       	ld.sh	r0,r0[0x0]
80000582:	14 f0       	st.b	--r10,r0
80000584:	80 00       	ld.sh	r0,r0[0x0]
80000586:	11 70       	ld.ub	r0,--r8
80000588:	80 00       	ld.sh	r0,r0[0x0]
8000058a:	01 b0       	ld.ub	r0,r0[0x3]
8000058c:	80 00       	ld.sh	r0,r0[0x0]
8000058e:	0e 1e       	sub	lr,r7

80000590 <task10>:
/*************************************************************
 * Task 10
 * Turn LED 4 OFF
 ************************************************************/
void task10(void)
{
80000590:	eb cd 40 80 	pushm	r7,lr
80000594:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex5);
80000596:	48 b8       	lddpc	r8,800005c0 <task10+0x30>
80000598:	70 08       	ld.w	r8,r8[0x0]
8000059a:	10 9c       	mov	r12,r8
8000059c:	f0 1f 00 0a 	mcall	800005c4 <task10+0x34>
		ledOff(LED4_GPIO);
800005a0:	33 3c       	mov	r12,51
800005a2:	f0 1f 00 0a 	mcall	800005c8 <task10+0x38>
		ROSA_delay(502);
800005a6:	e0 6a 01 f6 	mov	r10,502
800005aa:	30 0b       	mov	r11,0
800005ac:	f0 1f 00 08 	mcall	800005cc <task10+0x3c>
		ROSA_semaphoreUnlock(mutex5);
800005b0:	48 48       	lddpc	r8,800005c0 <task10+0x30>
800005b2:	70 08       	ld.w	r8,r8[0x0]
800005b4:	10 9c       	mov	r12,r8
800005b6:	f0 1f 00 07 	mcall	800005d0 <task10+0x40>
		ROSA_yield();
800005ba:	f0 1f 00 07 	mcall	800005d4 <task10+0x44>
	}
800005be:	ce cb       	rjmp	80000596 <task10+0x6>
800005c0:	00 00       	add	r0,r0
800005c2:	05 ec       	ld.ub	r12,r2[0x6]
800005c4:	80 00       	ld.sh	r0,r0[0x0]
800005c6:	00 c8       	st.b	r0++,r8
800005c8:	80 00       	ld.sh	r0,r0[0x0]
800005ca:	15 10       	ld.sh	r0,r10++
800005cc:	80 00       	ld.sh	r0,r0[0x0]
800005ce:	11 70       	ld.ub	r0,--r8
800005d0:	80 00       	ld.sh	r0,r0[0x0]
800005d2:	01 b0       	ld.ub	r0,r0[0x3]
800005d4:	80 00       	ld.sh	r0,r0[0x0]
800005d6:	0e 1e       	sub	lr,r7

800005d8 <task11>:
/*************************************************************
 * Task 11
 * Turn LED 5 ON
 ************************************************************/
void task11(void)
{
800005d8:	eb cd 40 80 	pushm	r7,lr
800005dc:	1a 97       	mov	r7,sp
	while(1) {
		usartWriteLine(USART, "task11 Entry\r\n");
800005de:	49 2b       	lddpc	r11,80000624 <task11+0x4c>
800005e0:	fe 7c 14 00 	mov	r12,-60416
800005e4:	f0 1f 00 11 	mcall	80000628 <task11+0x50>
		ROSA_semaphoreLock(mutex6);
800005e8:	49 18       	lddpc	r8,8000062c <task11+0x54>
800005ea:	70 08       	ld.w	r8,r8[0x0]
800005ec:	10 9c       	mov	r12,r8
800005ee:	f0 1f 00 11 	mcall	80000630 <task11+0x58>
		usartWriteLine(USART, "task11 locked the mutex\r\n");
800005f2:	49 1b       	lddpc	r11,80000634 <task11+0x5c>
800005f4:	fe 7c 14 00 	mov	r12,-60416
800005f8:	f0 1f 00 0c 	mcall	80000628 <task11+0x50>
		ledOn(LED5_GPIO);
800005fc:	33 4c       	mov	r12,52
800005fe:	f0 1f 00 0f 	mcall	80000638 <task11+0x60>
		delay_ms(500);
80000602:	e0 6c 01 f4 	mov	r12,500
80000606:	f0 1f 00 0e 	mcall	8000063c <task11+0x64>
		//ROSA_delay(501);
		ROSA_semaphoreUnlock(mutex6);
8000060a:	48 98       	lddpc	r8,8000062c <task11+0x54>
8000060c:	70 08       	ld.w	r8,r8[0x0]
8000060e:	10 9c       	mov	r12,r8
80000610:	f0 1f 00 0c 	mcall	80000640 <task11+0x68>
		usartWriteLine(USART, "task11 unlocked the mutex\r\n");
80000614:	48 cb       	lddpc	r11,80000644 <task11+0x6c>
80000616:	fe 7c 14 00 	mov	r12,-60416
8000061a:	f0 1f 00 04 	mcall	80000628 <task11+0x50>
		ROSA_yield();
8000061e:	f0 1f 00 0b 	mcall	80000648 <task11+0x70>
	}
80000622:	cd eb       	rjmp	800005de <task11+0x6>
80000624:	80 00       	ld.sh	r0,r0[0x0]
80000626:	02 60       	and	r0,r1
80000628:	80 00       	ld.sh	r0,r0[0x0]
8000062a:	18 60       	and	r0,r12
8000062c:	00 00       	add	r0,r0
8000062e:	05 d4       	ld.ub	r4,r2[0x5]
80000630:	80 00       	ld.sh	r0,r0[0x0]
80000632:	00 c8       	st.b	r0++,r8
80000634:	80 00       	ld.sh	r0,r0[0x0]
80000636:	02 70       	tst	r0,r1
80000638:	80 00       	ld.sh	r0,r0[0x0]
8000063a:	14 f0       	st.b	--r10,r0
8000063c:	80 00       	ld.sh	r0,r0[0x0]
8000063e:	12 e8       	st.h	--r9,r8
80000640:	80 00       	ld.sh	r0,r0[0x0]
80000642:	01 b0       	ld.ub	r0,r0[0x3]
80000644:	80 00       	ld.sh	r0,r0[0x0]
80000646:	02 8c       	andn	r12,r1
80000648:	80 00       	ld.sh	r0,r0[0x0]
8000064a:	0e 1e       	sub	lr,r7

8000064c <task12>:
/*************************************************************
 * Task 12
 * Turn LED 5 OFF
 ************************************************************/
void task12(void)
{
8000064c:	eb cd 40 80 	pushm	r7,lr
80000650:	1a 97       	mov	r7,sp
	while(1) {
		usartWriteLine(USART, "task11 Entry\r\n");
80000652:	48 db       	lddpc	r11,80000684 <task12+0x38>
80000654:	fe 7c 14 00 	mov	r12,-60416
80000658:	f0 1f 00 0c 	mcall	80000688 <task12+0x3c>
		ROSA_semaphoreLock(mutex6);
8000065c:	48 c8       	lddpc	r8,8000068c <task12+0x40>
8000065e:	70 08       	ld.w	r8,r8[0x0]
80000660:	10 9c       	mov	r12,r8
80000662:	f0 1f 00 0c 	mcall	80000690 <task12+0x44>
		ledOff(LED5_GPIO);
80000666:	33 4c       	mov	r12,52
80000668:	f0 1f 00 0b 	mcall	80000694 <task12+0x48>
		delay_ms(500);
8000066c:	e0 6c 01 f4 	mov	r12,500
80000670:	f0 1f 00 0a 	mcall	80000698 <task12+0x4c>
		//ROSA_delay(500);
		ROSA_semaphoreUnlock(mutex6);
80000674:	48 68       	lddpc	r8,8000068c <task12+0x40>
80000676:	70 08       	ld.w	r8,r8[0x0]
80000678:	10 9c       	mov	r12,r8
8000067a:	f0 1f 00 09 	mcall	8000069c <task12+0x50>
		ROSA_yield();
8000067e:	f0 1f 00 09 	mcall	800006a0 <task12+0x54>
	}
80000682:	ce 8b       	rjmp	80000652 <task12+0x6>
80000684:	80 00       	ld.sh	r0,r0[0x0]
80000686:	02 60       	and	r0,r1
80000688:	80 00       	ld.sh	r0,r0[0x0]
8000068a:	18 60       	and	r0,r12
8000068c:	00 00       	add	r0,r0
8000068e:	05 d4       	ld.ub	r4,r2[0x5]
80000690:	80 00       	ld.sh	r0,r0[0x0]
80000692:	00 c8       	st.b	r0++,r8
80000694:	80 00       	ld.sh	r0,r0[0x0]
80000696:	15 10       	ld.sh	r0,r10++
80000698:	80 00       	ld.sh	r0,r0[0x0]
8000069a:	12 e8       	st.h	--r9,r8
8000069c:	80 00       	ld.sh	r0,r0[0x0]
8000069e:	01 b0       	ld.ub	r0,r0[0x3]
800006a0:	80 00       	ld.sh	r0,r0[0x0]
800006a2:	0e 1e       	sub	lr,r7

800006a4 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
800006a4:	eb cd 40 80 	pushm	r7,lr
800006a8:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
800006aa:	f0 1f 00 3f 	mcall	800007a4 <main+0x100>
	
	//Create tasks and install them into the ROSA kernel
	ROSA_taskCreate(t1_tcb, "tsk1", task1, T1_STACK_SIZE, 1);
800006ae:	4b f8       	lddpc	r8,800007a8 <main+0x104>
800006b0:	70 0c       	ld.w	r12,r8[0x0]
800006b2:	30 18       	mov	r8,1
800006b4:	32 09       	mov	r9,32
800006b6:	4b ea       	lddpc	r10,800007ac <main+0x108>
800006b8:	4b eb       	lddpc	r11,800007b0 <main+0x10c>
800006ba:	f0 1f 00 3f 	mcall	800007b4 <main+0x110>
	ROSA_taskCreate(t2_tcb, "tsk2", task2, T2_STACK_SIZE, 2);
800006be:	4b f8       	lddpc	r8,800007b8 <main+0x114>
800006c0:	70 0c       	ld.w	r12,r8[0x0]
800006c2:	30 28       	mov	r8,2
800006c4:	32 09       	mov	r9,32
800006c6:	4b ea       	lddpc	r10,800007bc <main+0x118>
800006c8:	4b eb       	lddpc	r11,800007c0 <main+0x11c>
800006ca:	f0 1f 00 3b 	mcall	800007b4 <main+0x110>
	ROSA_taskCreate(t3_tcb, "tsk3", task3, T3_STACK_SIZE, 3);
800006ce:	4b e8       	lddpc	r8,800007c4 <main+0x120>
800006d0:	70 0c       	ld.w	r12,r8[0x0]
800006d2:	30 38       	mov	r8,3
800006d4:	32 09       	mov	r9,32
800006d6:	4b da       	lddpc	r10,800007c8 <main+0x124>
800006d8:	4b db       	lddpc	r11,800007cc <main+0x128>
800006da:	f0 1f 00 37 	mcall	800007b4 <main+0x110>
	ROSA_taskCreate(t4_tcb, "tsk4", task4, T4_STACK_SIZE, 4);
800006de:	4b d8       	lddpc	r8,800007d0 <main+0x12c>
800006e0:	70 0c       	ld.w	r12,r8[0x0]
800006e2:	30 48       	mov	r8,4
800006e4:	32 09       	mov	r9,32
800006e6:	4b ca       	lddpc	r10,800007d4 <main+0x130>
800006e8:	4b cb       	lddpc	r11,800007d8 <main+0x134>
800006ea:	f0 1f 00 33 	mcall	800007b4 <main+0x110>
	ROSA_taskCreate(t5_tcb, "tsk5", task5, T5_STACK_SIZE, 5);
800006ee:	4b c8       	lddpc	r8,800007dc <main+0x138>
800006f0:	70 0c       	ld.w	r12,r8[0x0]
800006f2:	30 58       	mov	r8,5
800006f4:	32 09       	mov	r9,32
800006f6:	4b ba       	lddpc	r10,800007e0 <main+0x13c>
800006f8:	4b bb       	lddpc	r11,800007e4 <main+0x140>
800006fa:	f0 1f 00 2f 	mcall	800007b4 <main+0x110>
	ROSA_taskCreate(t6_tcb, "tsk6", task6, T6_STACK_SIZE, 6);
800006fe:	4b b8       	lddpc	r8,800007e8 <main+0x144>
80000700:	70 0c       	ld.w	r12,r8[0x0]
80000702:	30 68       	mov	r8,6
80000704:	32 09       	mov	r9,32
80000706:	4b aa       	lddpc	r10,800007ec <main+0x148>
80000708:	4b ab       	lddpc	r11,800007f0 <main+0x14c>
8000070a:	f0 1f 00 2b 	mcall	800007b4 <main+0x110>
	ROSA_taskCreate(t7_tcb, "tsk7", task7, T7_STACK_SIZE, 7);
8000070e:	4b a8       	lddpc	r8,800007f4 <main+0x150>
80000710:	70 0c       	ld.w	r12,r8[0x0]
80000712:	30 78       	mov	r8,7
80000714:	32 09       	mov	r9,32
80000716:	4b 9a       	lddpc	r10,800007f8 <main+0x154>
80000718:	4b 9b       	lddpc	r11,800007fc <main+0x158>
8000071a:	f0 1f 00 27 	mcall	800007b4 <main+0x110>
	ROSA_taskCreate(t8_tcb, "tsk8", task8, T8_STACK_SIZE, 8);
8000071e:	4b 98       	lddpc	r8,80000800 <main+0x15c>
80000720:	70 0c       	ld.w	r12,r8[0x0]
80000722:	30 88       	mov	r8,8
80000724:	32 09       	mov	r9,32
80000726:	4b 8a       	lddpc	r10,80000804 <main+0x160>
80000728:	4b 8b       	lddpc	r11,80000808 <main+0x164>
8000072a:	f0 1f 00 23 	mcall	800007b4 <main+0x110>
	ROSA_taskCreate(t9_tcb, "tsk9", task9, T9_STACK_SIZE, 9);
8000072e:	4b 88       	lddpc	r8,8000080c <main+0x168>
80000730:	70 0c       	ld.w	r12,r8[0x0]
80000732:	30 98       	mov	r8,9
80000734:	32 09       	mov	r9,32
80000736:	4b 7a       	lddpc	r10,80000810 <main+0x16c>
80000738:	4b 7b       	lddpc	r11,80000814 <main+0x170>
8000073a:	f0 1f 00 1f 	mcall	800007b4 <main+0x110>
	ROSA_taskCreate(t10_tcb, "tsk10", task10, T10_STACK_SIZE, 10);
8000073e:	4b 78       	lddpc	r8,80000818 <main+0x174>
80000740:	70 0c       	ld.w	r12,r8[0x0]
80000742:	30 a8       	mov	r8,10
80000744:	32 09       	mov	r9,32
80000746:	4b 6a       	lddpc	r10,8000081c <main+0x178>
80000748:	4b 6b       	lddpc	r11,80000820 <main+0x17c>
8000074a:	f0 1f 00 1b 	mcall	800007b4 <main+0x110>
	ROSA_taskCreate(t11_tcb, "tsk11", task11, T11_STACK_SIZE, 11);
8000074e:	4b 68       	lddpc	r8,80000824 <main+0x180>
80000750:	70 0c       	ld.w	r12,r8[0x0]
80000752:	30 b8       	mov	r8,11
80000754:	32 09       	mov	r9,32
80000756:	4b 5a       	lddpc	r10,80000828 <main+0x184>
80000758:	4b 5b       	lddpc	r11,8000082c <main+0x188>
8000075a:	f0 1f 00 17 	mcall	800007b4 <main+0x110>
	ROSA_taskCreate(t12_tcb, "tsk12", task12, T12_STACK_SIZE, 12);
8000075e:	4b 58       	lddpc	r8,80000830 <main+0x18c>
80000760:	70 0c       	ld.w	r12,r8[0x0]
80000762:	30 c8       	mov	r8,12
80000764:	32 09       	mov	r9,32
80000766:	4b 4a       	lddpc	r10,80000834 <main+0x190>
80000768:	4b 4b       	lddpc	r11,80000838 <main+0x194>
8000076a:	f0 1f 00 13 	mcall	800007b4 <main+0x110>
	
	ROSA_semaphoreCreate(&mutex1, 1);
8000076e:	30 1b       	mov	r11,1
80000770:	4b 3c       	lddpc	r12,8000083c <main+0x198>
80000772:	f0 1f 00 34 	mcall	80000840 <main+0x19c>
	ROSA_semaphoreCreate(&mutex2, 1);
80000776:	30 1b       	mov	r11,1
80000778:	4b 3c       	lddpc	r12,80000844 <main+0x1a0>
8000077a:	f0 1f 00 32 	mcall	80000840 <main+0x19c>
	ROSA_semaphoreCreate(&mutex3, 1);
8000077e:	30 1b       	mov	r11,1
80000780:	4b 2c       	lddpc	r12,80000848 <main+0x1a4>
80000782:	f0 1f 00 30 	mcall	80000840 <main+0x19c>
	ROSA_semaphoreCreate(&mutex4, 1);
80000786:	30 1b       	mov	r11,1
80000788:	4b 1c       	lddpc	r12,8000084c <main+0x1a8>
8000078a:	f0 1f 00 2e 	mcall	80000840 <main+0x19c>
	ROSA_semaphoreCreate(&mutex5, 1);
8000078e:	30 1b       	mov	r11,1
80000790:	4b 0c       	lddpc	r12,80000850 <main+0x1ac>
80000792:	f0 1f 00 2c 	mcall	80000840 <main+0x19c>
	ROSA_semaphoreCreate(&mutex6, 1);
80000796:	30 1b       	mov	r11,1
80000798:	4a fc       	lddpc	r12,80000854 <main+0x1b0>
8000079a:	f0 1f 00 2a 	mcall	80000840 <main+0x19c>

	ROSA_startScheduler();
8000079e:	f0 1f 00 2f 	mcall	80000858 <main+0x1b4>

	/* Execution will never return here */
	while(1);
800007a2:	c0 08       	rjmp	800007a2 <main+0xfe>
800007a4:	80 00       	ld.sh	r0,r0[0x0]
800007a6:	0a a0       	st.w	r5++,r0
800007a8:	00 00       	add	r0,r0
800007aa:	05 f8       	ld.ub	r8,r2[0x7]
800007ac:	80 00       	ld.sh	r0,r0[0x0]
800007ae:	03 08       	ld.w	r8,r1++
800007b0:	80 00       	ld.sh	r0,r0[0x0]
800007b2:	02 a8       	st.w	r1++,r8
800007b4:	80 00       	ld.sh	r0,r0[0x0]
800007b6:	0c 40       	or	r0,r6
800007b8:	00 00       	add	r0,r0
800007ba:	05 f4       	ld.ub	r4,r2[0x7]
800007bc:	80 00       	ld.sh	r0,r0[0x0]
800007be:	03 50       	ld.sh	r0,--r1
800007c0:	80 00       	ld.sh	r0,r0[0x0]
800007c2:	02 b0       	st.h	r1++,r0
800007c4:	00 00       	add	r0,r0
800007c6:	05 d8       	ld.ub	r8,r2[0x5]
800007c8:	80 00       	ld.sh	r0,r0[0x0]
800007ca:	03 98       	ld.ub	r8,r1[0x1]
800007cc:	80 00       	ld.sh	r0,r0[0x0]
800007ce:	02 b8       	st.h	r1++,r8
800007d0:	00 00       	add	r0,r0
800007d2:	05 e8       	ld.ub	r8,r2[0x6]
800007d4:	80 00       	ld.sh	r0,r0[0x0]
800007d6:	03 e0       	ld.ub	r0,r1[0x6]
800007d8:	80 00       	ld.sh	r0,r0[0x0]
800007da:	02 c0       	st.b	r1++,r0
800007dc:	00 00       	add	r0,r0
800007de:	05 e4       	ld.ub	r4,r2[0x6]
800007e0:	80 00       	ld.sh	r0,r0[0x0]
800007e2:	04 28       	rsub	r8,r2
800007e4:	80 00       	ld.sh	r0,r0[0x0]
800007e6:	02 c8       	st.b	r1++,r8
800007e8:	00 00       	add	r0,r0
800007ea:	06 04       	add	r4,r3
800007ec:	80 00       	ld.sh	r0,r0[0x0]
800007ee:	04 70       	tst	r0,r2
800007f0:	80 00       	ld.sh	r0,r0[0x0]
800007f2:	02 d0       	st.w	--r1,r0
800007f4:	00 00       	add	r0,r0
800007f6:	05 fc       	ld.ub	r12,r2[0x7]
800007f8:	80 00       	ld.sh	r0,r0[0x0]
800007fa:	04 b8       	st.h	r2++,r8
800007fc:	80 00       	ld.sh	r0,r0[0x0]
800007fe:	02 d8       	st.w	--r1,r8
80000800:	00 00       	add	r0,r0
80000802:	06 10       	sub	r0,r3
80000804:	80 00       	ld.sh	r0,r0[0x0]
80000806:	05 00       	ld.w	r0,r2++
80000808:	80 00       	ld.sh	r0,r0[0x0]
8000080a:	02 e0       	st.h	--r1,r0
8000080c:	00 00       	add	r0,r0
8000080e:	06 00       	add	r0,r3
80000810:	80 00       	ld.sh	r0,r0[0x0]
80000812:	05 48       	ld.w	r8,--r2
80000814:	80 00       	ld.sh	r0,r0[0x0]
80000816:	02 e8       	st.h	--r1,r8
80000818:	00 00       	add	r0,r0
8000081a:	05 f0       	ld.ub	r0,r2[0x7]
8000081c:	80 00       	ld.sh	r0,r0[0x0]
8000081e:	05 90       	ld.ub	r0,r2[0x1]
80000820:	80 00       	ld.sh	r0,r0[0x0]
80000822:	02 f0       	st.b	--r1,r0
80000824:	00 00       	add	r0,r0
80000826:	06 08       	add	r8,r3
80000828:	80 00       	ld.sh	r0,r0[0x0]
8000082a:	05 d8       	ld.ub	r8,r2[0x5]
8000082c:	80 00       	ld.sh	r0,r0[0x0]
8000082e:	02 f8       	st.b	--r1,r8
80000830:	00 00       	add	r0,r0
80000832:	05 e0       	ld.ub	r0,r2[0x6]
80000834:	80 00       	ld.sh	r0,r0[0x0]
80000836:	06 4c       	or	r12,r3
80000838:	80 00       	ld.sh	r0,r0[0x0]
8000083a:	03 00       	ld.w	r0,r1++
8000083c:	00 00       	add	r0,r0
8000083e:	06 18       	sub	r8,r3
80000840:	80 00       	ld.sh	r0,r0[0x0]
80000842:	00 70       	tst	r0,r0
80000844:	00 00       	add	r0,r0
80000846:	05 dc       	ld.ub	r12,r2[0x5]
80000848:	00 00       	add	r0,r0
8000084a:	06 0c       	add	r12,r3
8000084c:	00 00       	add	r0,r0
8000084e:	06 14       	sub	r4,r3
80000850:	00 00       	add	r0,r0
80000852:	05 ec       	ld.ub	r12,r2[0x6]
80000854:	00 00       	add	r0,r0
80000856:	05 d4       	ld.ub	r4,r2[0x5]
80000858:	80 00       	ld.sh	r0,r0[0x0]
8000085a:	0e 88       	andn	r8,r7

8000085c <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
8000085c:	eb cd 40 80 	pushm	r7,lr
80000860:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
80000862:	f0 1f 00 05 	mcall	80000874 <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
80000866:	f0 1f 00 05 	mcall	80000878 <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it
8000086a:	f0 1f 00 05 	mcall	8000087c <ROSA_yieldFromISR+0x20>
}
8000086e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000872:	00 00       	add	r0,r0
80000874:	80 00       	ld.sh	r0,r0[0x0]
80000876:	23 7e       	sub	lr,55
80000878:	80 00       	ld.sh	r0,r0[0x0]
8000087a:	0e 3c       	cp.w	r12,r7
8000087c:	80 00       	ld.sh	r0,r0[0x0]
8000087e:	23 b8       	sub	r8,59

80000880 <usart_options>:
80000880:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
80000890:	0a 00 00 00 69 64 6c 65 00 00 00 00                 ....idle....

8000089c <idle>:

/** @fn void idle(void)
	@brief Idle task body.
*/
void idle(void)
{
8000089c:	eb cd 40 80 	pushm	r7,lr
800008a0:	1a 97       	mov	r7,sp
	while(1)
	{
		usartWriteLine(USART, "idle\n");
800008a2:	48 4b       	lddpc	r11,800008b0 <idle+0x14>
800008a4:	fe 7c 14 00 	mov	r12,-60416
800008a8:	f0 1f 00 03 	mcall	800008b4 <idle+0x18>
	}
800008ac:	cf bb       	rjmp	800008a2 <idle+0x6>
800008ae:	00 00       	add	r0,r0
800008b0:	80 00       	ld.sh	r0,r0[0x0]
800008b2:	08 8c       	andn	r12,r4
800008b4:	80 00       	ld.sh	r0,r0[0x0]
800008b6:	18 60       	and	r0,r12

800008b8 <idleCreate>:

/** @fn void idleCreate(void)
	@brief Creation of the idle task.
*/
void idleCreate(void)
{
800008b8:	eb cd 40 80 	pushm	r7,lr
800008bc:	1a 97       	mov	r7,sp
	ROSA_tcbCreate(&IDLETASK_TCB, "idle", idle, idle_stack, IDLE_STACK_SIZE);
800008be:	32 08       	mov	r8,32
800008c0:	48 69       	lddpc	r9,800008d8 <idleCreate+0x20>
800008c2:	48 7a       	lddpc	r10,800008dc <idleCreate+0x24>
800008c4:	48 7b       	lddpc	r11,800008e0 <idleCreate+0x28>
800008c6:	48 8c       	lddpc	r12,800008e4 <idleCreate+0x2c>
800008c8:	f0 1f 00 08 	mcall	800008e8 <idleCreate+0x30>
	IDLETASK = &IDLETASK_TCB;
800008cc:	48 88       	lddpc	r8,800008ec <idleCreate+0x34>
800008ce:	48 69       	lddpc	r9,800008e4 <idleCreate+0x2c>
800008d0:	91 09       	st.w	r8[0x0],r9
}
800008d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800008d6:	00 00       	add	r0,r0
800008d8:	00 00       	add	r0,r0
800008da:	05 18       	ld.sh	r8,r2++
800008dc:	80 00       	ld.sh	r0,r0[0x0]
800008de:	08 9c       	mov	r12,r4
800008e0:	80 00       	ld.sh	r0,r0[0x0]
800008e2:	08 94       	mov	r4,r4
800008e4:	00 00       	add	r0,r0
800008e6:	06 60       	and	r0,r3
800008e8:	80 00       	ld.sh	r0,r0[0x0]
800008ea:	0b 8c       	ld.ub	r12,r5[0x0]
800008ec:	00 00       	add	r0,r0
800008ee:	06 1c       	sub	r12,r3

800008f0 <readyQueueInsert>:
	@brief Inserts the given task into the ready queue by its priority.
	@param th Task structure (tcb structure).
	@return A status code (1 - item has been added to the empty queue, 0 - otherwise).
*/
int readyQueueInsert(ROSA_taskHandle_t pth)
{
800008f0:	eb cd 40 80 	pushm	r7,lr
800008f4:	1a 97       	mov	r7,sp
800008f6:	20 3d       	sub	sp,12
800008f8:	ef 4c ff f4 	st.w	r7[-12],r12
	uint8_t priority;
	int retval;
	
	priority = pth->priority;
800008fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000900:	f1 38 00 64 	ld.ub	r8,r8[100]
80000904:	ef 68 ff fb 	st.b	r7[-5],r8
	
	/* Check the given queue for the emptiness */
	if (PA[priority] == NULL)
80000908:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000090c:	49 d8       	lddpc	r8,80000980 <readyQueueInsert+0x90>
8000090e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000912:	58 08       	cp.w	r8,0
80000914:	c1 41       	brne	8000093c <readyQueueInsert+0x4c>
	{
		PA[priority] = pth;
80000916:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000091a:	49 a8       	lddpc	r8,80000980 <readyQueueInsert+0x90>
8000091c:	ee fa ff f4 	ld.w	r10,r7[-12]
80000920:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		PA[priority]->nexttcb = pth;
80000924:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000928:	49 68       	lddpc	r8,80000980 <readyQueueInsert+0x90>
8000092a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000092e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000932:	91 09       	st.w	r8[0x0],r9
		
		retval = 1;
80000934:	30 18       	mov	r8,1
80000936:	ef 48 ff fc 	st.w	r7[-4],r8
8000093a:	c1 c8       	rjmp	80000972 <readyQueueInsert+0x82>
	}
	else
	{
		pth->nexttcb = PA[priority]->nexttcb;
8000093c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000940:	49 08       	lddpc	r8,80000980 <readyQueueInsert+0x90>
80000942:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000946:	70 09       	ld.w	r9,r8[0x0]
80000948:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000094c:	91 09       	st.w	r8[0x0],r9
		PA[priority]->nexttcb = pth;
8000094e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000952:	48 c8       	lddpc	r8,80000980 <readyQueueInsert+0x90>
80000954:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000958:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000095c:	91 09       	st.w	r8[0x0],r9
		PA[priority] = pth;
8000095e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000962:	48 88       	lddpc	r8,80000980 <readyQueueInsert+0x90>
80000964:	ee fa ff f4 	ld.w	r10,r7[-12]
80000968:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		retval = 0;
8000096c:	30 08       	mov	r8,0
8000096e:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return retval;
80000972:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80000976:	10 9c       	mov	r12,r8
80000978:	2f dd       	sub	sp,-12
8000097a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000097e:	00 00       	add	r0,r0
80000980:	00 00       	add	r0,r0
80000982:	06 24       	rsub	r4,r3

80000984 <readyQueueExtract>:
	@brief Extracts the given task from the ready queue by its priority.
	@param th Task structure (tcb structure).
	@return A status code (1 - queue is empty after extraction, 0 - otherwise).
*/
int readyQueueExtract(ROSA_taskHandle_t pth)
{
80000984:	eb cd 40 80 	pushm	r7,lr
80000988:	1a 97       	mov	r7,sp
8000098a:	20 4d       	sub	sp,16
8000098c:	ef 4c ff f0 	st.w	r7[-16],r12
	ROSA_taskHandle_t thTmp;
	uint8_t priority;
	int retval;
	
	priority = pth->priority;
80000990:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000994:	f1 38 00 64 	ld.ub	r8,r8[100]
80000998:	ef 68 ff fb 	st.b	r7[-5],r8
	thTmp = PA[priority];
8000099c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800009a0:	4a 28       	lddpc	r8,80000a28 <readyQueueExtract+0xa4>
800009a2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800009a6:	ef 48 ff f4 	st.w	r7[-12],r8
	
	/* Check whether the deleted task is the last in the queue or not */
	if (pth->nexttcb == pth) 
800009aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009ae:	70 09       	ld.w	r9,r8[0x0]
800009b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009b4:	10 39       	cp.w	r9,r8
800009b6:	c1 11       	brne	800009d8 <readyQueueExtract+0x54>
	{
		/* It's enough to extract the deleted task from the queue */
		PA[priority] = NULL;
800009b8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800009bc:	49 b8       	lddpc	r8,80000a28 <readyQueueExtract+0xa4>
800009be:	30 0a       	mov	r10,0
800009c0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		retval = 1;
800009c4:	30 18       	mov	r8,1
800009c6:	ef 48 ff fc 	st.w	r7[-4],r8
800009ca:	c2 88       	rjmp	80000a1a <readyQueueExtract+0x96>
	else 
	{
		/* Search for delete task */
		while (thTmp->nexttcb != pth) 
		{
			thTmp = thTmp->nexttcb;
800009cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009d0:	70 08       	ld.w	r8,r8[0x0]
800009d2:	ef 48 ff f4 	st.w	r7[-12],r8
800009d6:	c0 28       	rjmp	800009da <readyQueueExtract+0x56>
		retval = 1;
	}
	else 
	{
		/* Search for delete task */
		while (thTmp->nexttcb != pth) 
800009d8:	d7 03       	nop
800009da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009de:	70 09       	ld.w	r9,r8[0x0]
800009e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009e4:	10 39       	cp.w	r9,r8
800009e6:	cf 31       	brne	800009cc <readyQueueExtract+0x48>
		{
			thTmp = thTmp->nexttcb;
		}
		
		/* Check whether the PA[priority] points to the deleted task or not */
		if (PA[priority] == pth)
800009e8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800009ec:	48 f8       	lddpc	r8,80000a28 <readyQueueExtract+0xa4>
800009ee:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800009f2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009f6:	10 39       	cp.w	r9,r8
800009f8:	c0 81       	brne	80000a08 <readyQueueExtract+0x84>
		{
			/* Move PA[priority] pointer to the previous task in the queue */ 
			PA[priority] = thTmp;
800009fa:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800009fe:	48 b8       	lddpc	r8,80000a28 <readyQueueExtract+0xa4>
80000a00:	ee fa ff f4 	ld.w	r10,r7[-12]
80000a04:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		}
		
		thTmp->nexttcb = pth->nexttcb;
80000a08:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000a0c:	70 09       	ld.w	r9,r8[0x0]
80000a0e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a12:	91 09       	st.w	r8[0x0],r9
		
		retval = 0;
80000a14:	30 08       	mov	r8,0
80000a16:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return retval;
80000a1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80000a1e:	10 9c       	mov	r12,r8
80000a20:	2f cd       	sub	sp,-16
80000a22:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a26:	00 00       	add	r0,r0
80000a28:	00 00       	add	r0,r0
80000a2a:	06 24       	rsub	r4,r3

80000a2c <readyQueueSearch>:
/** @fn int readyQueueSearch(void)
	@brief Search for the first non-empty highest priority queue.
	@return Pointer to the last tcb in the queue (in other words - PA[i]).
*/
ROSA_taskHandle_t readyQueueSearch(void)
{
80000a2c:	eb cd 40 80 	pushm	r7,lr
80000a30:	1a 97       	mov	r7,sp
80000a32:	20 2d       	sub	sp,8
	int i = MAXNPRIO;
80000a34:	30 c8       	mov	r8,12
80000a36:	ef 48 ff f8 	st.w	r7[-8],r8
	tcb * rettcb;
	
	/* Search for the first non-empty queue. */
	while ( (PA[--i] == NULL) && (i > 0))
80000a3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a3e:	20 18       	sub	r8,1
80000a40:	ef 48 ff f8 	st.w	r7[-8],r8
80000a44:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a48:	49 48       	lddpc	r8,80000a98 <readyQueueSearch+0x6c>
80000a4a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000a4e:	58 08       	cp.w	r8,0
80000a50:	c0 61       	brne	80000a5c <readyQueueSearch+0x30>
80000a52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a56:	58 08       	cp.w	r8,0
80000a58:	fe 99 ff f1 	brgt	80000a3a <readyQueueSearch+0xe>
	{
		;
	}
		
	/* Check the PA for emptiness. */
	if ((i == 0) && (PA[i] == NULL))
80000a5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a60:	58 08       	cp.w	r8,0
80000a62:	c0 d1       	brne	80000a7c <readyQueueSearch+0x50>
80000a64:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a68:	48 c8       	lddpc	r8,80000a98 <readyQueueSearch+0x6c>
80000a6a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000a6e:	58 08       	cp.w	r8,0
80000a70:	c0 61       	brne	80000a7c <readyQueueSearch+0x50>
	{
		rettcb = IDLETASK;
80000a72:	48 b8       	lddpc	r8,80000a9c <readyQueueSearch+0x70>
80000a74:	70 08       	ld.w	r8,r8[0x0]
80000a76:	ef 48 ff fc 	st.w	r7[-4],r8
	{
		;
	}
		
	/* Check the PA for emptiness. */
	if ((i == 0) && (PA[i] == NULL))
80000a7a:	c0 88       	rjmp	80000a8a <readyQueueSearch+0x5e>
	{
		rettcb = IDLETASK;
	}
	else
	{
		rettcb = PA[i];
80000a7c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a80:	48 68       	lddpc	r8,80000a98 <readyQueueSearch+0x6c>
80000a82:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000a86:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return rettcb;
80000a8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80000a8e:	10 9c       	mov	r12,r8
80000a90:	2f ed       	sub	sp,-8
80000a92:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a96:	00 00       	add	r0,r0
80000a98:	00 00       	add	r0,r0
80000a9a:	06 24       	rsub	r4,r3
80000a9c:	00 00       	add	r0,r0
80000a9e:	06 1c       	sub	r12,r3

80000aa0 <ROSA_init>:

void ROSA_init(void)
{	
80000aa0:	eb cd 40 80 	pushm	r7,lr
80000aa4:	1a 97       	mov	r7,sp
80000aa6:	20 1d       	sub	sp,4
	int i = 0;
80000aa8:	30 08       	mov	r8,0
80000aaa:	ef 48 ff fc 	st.w	r7[-4],r8
	systemTick = 0;
80000aae:	4a 6a       	lddpc	r10,80000b44 <ROSA_init+0xa4>
80000ab0:	30 08       	mov	r8,0
80000ab2:	30 09       	mov	r9,0
80000ab4:	f4 e9 00 00 	st.d	r10[0],r8

	if (ROSA_INIT_GUARD == 0)
80000ab8:	4a 48       	lddpc	r8,80000b48 <ROSA_init+0xa8>
80000aba:	70 08       	ld.w	r8,r8[0x0]
80000abc:	58 08       	cp.w	r8,0
80000abe:	c3 d1       	brne	80000b38 <ROSA_init+0x98>
	{
		//Do initialization of I/O drivers
		ledInit();									//LEDs
80000ac0:	f0 1f 00 23 	mcall	80000b4c <ROSA_init+0xac>
		buttonInit();								//Buttons
80000ac4:	f0 1f 00 23 	mcall	80000b50 <ROSA_init+0xb0>
		joystickInit();								//Joystick
80000ac8:	f0 1f 00 23 	mcall	80000b54 <ROSA_init+0xb4>
		potInit();									//Potentiometer
80000acc:	f0 1f 00 23 	mcall	80000b58 <ROSA_init+0xb8>
		usartInit(USART, &usart_options, FOSC0);	//Serial communication
80000ad0:	e0 6a 1b 00 	mov	r10,6912
80000ad4:	ea 1a 00 b7 	orh	r10,0xb7
80000ad8:	4a 1b       	lddpc	r11,80000b5c <ROSA_init+0xbc>
80000ada:	fe 7c 14 00 	mov	r12,-60416
80000ade:	f0 1f 00 21 	mcall	80000b60 <ROSA_init+0xc0>

		interruptInit();
80000ae2:	f0 1f 00 21 	mcall	80000b64 <ROSA_init+0xc4>
		interruptEnable();
80000ae6:	f0 1f 00 21 	mcall	80000b68 <ROSA_init+0xc8>
		timerInit(1);
80000aea:	30 1c       	mov	r12,1
80000aec:	f0 1f 00 20 	mcall	80000b6c <ROSA_init+0xcc>
		timerStart();
80000af0:	f0 1f 00 20 	mcall	80000b70 <ROSA_init+0xd0>
	
		//Start with empty TCBLIST and no EXECTASK.
		TCBLIST = NULL;
80000af4:	4a 08       	lddpc	r8,80000b74 <ROSA_init+0xd4>
80000af6:	30 09       	mov	r9,0
80000af8:	91 09       	st.w	r8[0x0],r9
		EXECTASK = NULL;
80000afa:	4a 08       	lddpc	r8,80000b78 <ROSA_init+0xd8>
80000afc:	30 09       	mov	r9,0
80000afe:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
80000b00:	49 f8       	lddpc	r8,80000b7c <ROSA_init+0xdc>
80000b02:	30 09       	mov	r9,0
80000b04:	91 09       	st.w	r8[0x0],r9
		LOCKEDSEMAPHORELIST=NULL;
80000b06:	49 f8       	lddpc	r8,80000b80 <ROSA_init+0xe0>
80000b08:	30 09       	mov	r9,0
80000b0a:	91 09       	st.w	r8[0x0],r9
	
		/* Create idle task. */
		idleCreate();
80000b0c:	f0 1f 00 1e 	mcall	80000b84 <ROSA_init+0xe4>
	
		for (i = 0; i < MAXNPRIO; i++) {
80000b10:	30 08       	mov	r8,0
80000b12:	ef 48 ff fc 	st.w	r7[-4],r8
80000b16:	c0 c8       	rjmp	80000b2e <ROSA_init+0x8e>
			PA[i] = NULL;
80000b18:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000b1c:	49 b8       	lddpc	r8,80000b88 <ROSA_init+0xe8>
80000b1e:	30 0a       	mov	r10,0
80000b20:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		LOCKEDSEMAPHORELIST=NULL;
	
		/* Create idle task. */
		idleCreate();
	
		for (i = 0; i < MAXNPRIO; i++) {
80000b24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b28:	2f f8       	sub	r8,-1
80000b2a:	ef 48 ff fc 	st.w	r7[-4],r8
80000b2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b32:	58 b8       	cp.w	r8,11
80000b34:	fe 9a ff f2 	brle	80000b18 <ROSA_init+0x78>
			PA[i] = NULL;
		}
	}
	
	ROSA_INIT_GUARD = 1;
80000b38:	48 48       	lddpc	r8,80000b48 <ROSA_init+0xa8>
80000b3a:	30 19       	mov	r9,1
80000b3c:	91 09       	st.w	r8[0x0],r9
}
80000b3e:	2f fd       	sub	sp,-4
80000b40:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b44:	00 00       	add	r0,r0
80000b46:	06 d8       	st.w	--r3,r8
80000b48:	00 00       	add	r0,r0
80000b4a:	06 5c       	eor	r12,r3
80000b4c:	80 00       	ld.sh	r0,r0[0x0]
80000b4e:	14 64       	and	r4,r10
80000b50:	80 00       	ld.sh	r0,r0[0x0]
80000b52:	12 88       	andn	r8,r9
80000b54:	80 00       	ld.sh	r0,r0[0x0]
80000b56:	12 b0       	st.h	r9++,r0
80000b58:	80 00       	ld.sh	r0,r0[0x0]
80000b5a:	15 30       	ld.ub	r0,r10++
80000b5c:	80 00       	ld.sh	r0,r0[0x0]
80000b5e:	08 80       	andn	r0,r4
80000b60:	80 00       	ld.sh	r0,r0[0x0]
80000b62:	16 e4       	st.h	--r11,r4
80000b64:	80 00       	ld.sh	r0,r0[0x0]
80000b66:	23 48       	sub	r8,52
80000b68:	80 00       	ld.sh	r0,r0[0x0]
80000b6a:	23 6a       	sub	r10,54
80000b6c:	80 00       	ld.sh	r0,r0[0x0]
80000b6e:	18 b4       	st.h	r12++,r4
80000b70:	80 00       	ld.sh	r0,r0[0x0]
80000b72:	18 e2       	st.h	--r12,r2
80000b74:	00 00       	add	r0,r0
80000b76:	06 20       	rsub	r0,r3
80000b78:	00 00       	add	r0,r0
80000b7a:	06 58       	eor	r8,r3
80000b7c:	00 00       	add	r0,r0
80000b7e:	06 54       	eor	r4,r3
80000b80:	00 00       	add	r0,r0
80000b82:	05 d0       	ld.ub	r0,r2[0x5]
80000b84:	80 00       	ld.sh	r0,r0[0x0]
80000b86:	08 b8       	st.h	r4++,r8
80000b88:	00 00       	add	r0,r0
80000b8a:	06 24       	rsub	r4,r3

80000b8c <ROSA_tcbCreate>:

void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
80000b8c:	eb cd 40 80 	pushm	r7,lr
80000b90:	1a 97       	mov	r7,sp
80000b92:	20 6d       	sub	sp,24
80000b94:	ef 4c ff f8 	st.w	r7[-8],r12
80000b98:	ef 4b ff f4 	st.w	r7[-12],r11
80000b9c:	ef 4a ff f0 	st.w	r7[-16],r10
80000ba0:	ef 49 ff ec 	st.w	r7[-20],r9
80000ba4:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000ba8:	30 08       	mov	r8,0
80000baa:	ef 48 ff fc 	st.w	r7[-4],r8
80000bae:	c1 48       	rjmp	80000bd6 <ROSA_tcbCreate+0x4a>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
80000bb0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000bb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bb8:	ee fa ff f4 	ld.w	r10,r7[-12]
80000bbc:	f4 08 00 08 	add	r8,r10,r8
80000bc0:	11 88       	ld.ub	r8,r8[0x0]
80000bc2:	ee fa ff f8 	ld.w	r10,r7[-8]
80000bc6:	f4 09 00 09 	add	r9,r10,r9
80000bca:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000bcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bd0:	2f f8       	sub	r8,-1
80000bd2:	ef 48 ff fc 	st.w	r7[-4],r8
80000bd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bda:	58 38       	cp.w	r8,3
80000bdc:	fe 9a ff ea 	brle	80000bb0 <ROSA_tcbCreate+0x24>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
80000be0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000be4:	30 09       	mov	r9,0
80000be6:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
80000be8:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000bec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bf0:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
80000bf2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000bf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bfa:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
80000bfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c00:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000c04:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
80000c06:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000c0a:	a3 68       	lsl	r8,0x2
80000c0c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000c10:	10 09       	add	r9,r8
80000c12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c16:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
80000c18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c1c:	70 39       	ld.w	r9,r8[0xc]
80000c1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c22:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
80000c24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c28:	fc 19 00 1c 	movh	r9,0x1c
80000c2c:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
80000c2e:	ee fc ff f8 	ld.w	r12,r7[-8]
80000c32:	f0 1f 00 03 	mcall	80000c3c <ROSA_tcbCreate+0xb0>
}
80000c36:	2f ad       	sub	sp,-24
80000c38:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c3c:	80 00       	ld.sh	r0,r0[0x0]
80000c3e:	0d 92       	ld.ub	r2,r6[0x1]

80000c40 <ROSA_taskCreate>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

int16_t ROSA_taskCreate(ROSA_taskHandle_t * pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
80000c40:	eb cd 40 80 	pushm	r7,lr
80000c44:	1a 97       	mov	r7,sp
80000c46:	20 6d       	sub	sp,24
80000c48:	ef 4c ff f8 	st.w	r7[-8],r12
80000c4c:	ef 4b ff f4 	st.w	r7[-12],r11
80000c50:	ef 4a ff f0 	st.w	r7[-16],r10
80000c54:	ef 49 ff ec 	st.w	r7[-20],r9
80000c58:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) calloc(stackSize, sizeof(uint32_t)); 
80000c5c:	30 4b       	mov	r11,4
80000c5e:	ee fc ff ec 	ld.w	r12,r7[-20]
80000c62:	f0 1f 00 38 	mcall	80000d40 <ROSA_taskCreate+0x100>
80000c66:	18 98       	mov	r8,r12
80000c68:	ef 48 ff fc 	st.w	r7[-4],r8
	ASSERT_MEM_ALLOC(tcbStack);
80000c6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c70:	58 08       	cp.w	r8,0
80000c72:	c0 31       	brne	80000c78 <ROSA_taskCreate+0x38>
80000c74:	3f f8       	mov	r8,-1
80000c76:	c6 08       	rjmp	80000d36 <ROSA_taskCreate+0xf6>
		
	*pth = (ROSA_taskHandle_t) calloc(1, sizeof(tcb));
80000c78:	37 4b       	mov	r11,116
80000c7a:	30 1c       	mov	r12,1
80000c7c:	f0 1f 00 31 	mcall	80000d40 <ROSA_taskCreate+0x100>
80000c80:	18 98       	mov	r8,r12
80000c82:	10 99       	mov	r9,r8
80000c84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c88:	91 09       	st.w	r8[0x0],r9
	ASSERT_MEM_ALLOC(*pth);
80000c8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c8e:	70 08       	ld.w	r8,r8[0x0]
80000c90:	58 08       	cp.w	r8,0
80000c92:	c0 31       	brne	80000c98 <ROSA_taskCreate+0x58>
80000c94:	3f f8       	mov	r8,-1
80000c96:	c5 08       	rjmp	80000d36 <ROSA_taskCreate+0xf6>

	if (priority > MAXNPRIO - 1)
80000c98:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000c9c:	30 b8       	mov	r8,11
80000c9e:	f0 09 18 00 	cp.b	r9,r8
80000ca2:	e0 88 00 04 	brls	80000caa <ROSA_taskCreate+0x6a>
	{
		return -1;
80000ca6:	3f f8       	mov	r8,-1
80000ca8:	c4 78       	rjmp	80000d36 <ROSA_taskCreate+0xf6>
	}

	(*pth)->priority = priority;
80000caa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cae:	70 09       	ld.w	r9,r8[0x0]
80000cb0:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80000cb4:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
80000cb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cbc:	70 0a       	ld.w	r10,r8[0x0]
80000cbe:	30 08       	mov	r8,0
80000cc0:	30 09       	mov	r9,0
80000cc2:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
80000cc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cca:	70 09       	ld.w	r9,r8[0x0]
80000ccc:	30 08       	mov	r8,0
80000cce:	f3 68 00 70 	st.b	r9[112],r8
	(*pth)->originalPriority = priority;
80000cd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cd6:	70 09       	ld.w	r9,r8[0x0]
80000cd8:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80000cdc:	f3 68 00 71 	st.b	r9[113],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
80000ce0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ce4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ce8:	72 0c       	ld.w	r12,r9[0x0]
80000cea:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000cee:	ee fa ff f0 	ld.w	r10,r7[-16]
80000cf2:	ee fb ff f4 	ld.w	r11,r7[-12]
80000cf6:	f0 1f 00 14 	mcall	80000d44 <ROSA_taskCreate+0x104>
	
	readyQueueInsert(*pth);
80000cfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cfe:	70 08       	ld.w	r8,r8[0x0]
80000d00:	10 9c       	mov	r12,r8
80000d02:	f0 1f 00 12 	mcall	80000d48 <ROSA_taskCreate+0x108>
	
	if (EXECTASK != NULL) {
80000d06:	49 28       	lddpc	r8,80000d4c <ROSA_taskCreate+0x10c>
80000d08:	70 08       	ld.w	r8,r8[0x0]
80000d0a:	58 08       	cp.w	r8,0
80000d0c:	c1 40       	breq	80000d34 <ROSA_taskCreate+0xf4>
		if (EXECTASK->priority < priority) {
80000d0e:	49 08       	lddpc	r8,80000d4c <ROSA_taskCreate+0x10c>
80000d10:	70 08       	ld.w	r8,r8[0x0]
80000d12:	f1 38 00 64 	ld.ub	r8,r8[100]
80000d16:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000d1a:	f0 09 18 00 	cp.b	r9,r8
80000d1e:	e0 88 00 0b 	brls	80000d34 <ROSA_taskCreate+0xf4>
			PREEMPTASK = PA[priority];
80000d22:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000d26:	48 b8       	lddpc	r8,80000d50 <ROSA_taskCreate+0x110>
80000d28:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000d2c:	48 a8       	lddpc	r8,80000d54 <ROSA_taskCreate+0x114>
80000d2e:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
80000d30:	f0 1f 00 0a 	mcall	80000d58 <ROSA_taskCreate+0x118>
		}	
	}
	
	return 0;
80000d34:	30 08       	mov	r8,0
}
80000d36:	10 9c       	mov	r12,r8
80000d38:	2f ad       	sub	sp,-24
80000d3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d3e:	00 00       	add	r0,r0
80000d40:	80 00       	ld.sh	r0,r0[0x0]
80000d42:	19 ec       	ld.ub	r12,r12[0x6]
80000d44:	80 00       	ld.sh	r0,r0[0x0]
80000d46:	0b 8c       	ld.ub	r12,r5[0x0]
80000d48:	80 00       	ld.sh	r0,r0[0x0]
80000d4a:	08 f0       	st.b	--r4,r0
80000d4c:	00 00       	add	r0,r0
80000d4e:	06 58       	eor	r8,r3
80000d50:	00 00       	add	r0,r0
80000d52:	06 24       	rsub	r4,r3
80000d54:	00 00       	add	r0,r0
80000d56:	06 54       	eor	r4,r3
80000d58:	80 00       	ld.sh	r0,r0[0x0]
80000d5a:	0e 1e       	sub	lr,r7

80000d5c <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80000d5c:	4b 5c       	lddpc	r12,80000e30 <_yield+0xa>
	lda.w r11,EXECTASK
80000d5e:	4b 6b       	lddpc	r11,80000e34 <_yield+0xe>
	ld.w r12,r12[0x0]
80000d60:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
80000d62:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000d64:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000d66:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000d68:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000d6c:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
80000d6e:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
80000d70:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
80000d72:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80000d76:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000d78:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80000d7a:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000d7c:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
80000d7e:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
80000d80:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
80000d82:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000d84:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80000d86:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000d88:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000d8a:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000d8c:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000d8e:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000d90:	1c 9f       	mov	pc,lr

80000d92 <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
80000d92:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000d94:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80000d96:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000d98:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000d9c:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80000da0:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000da4:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000da8:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000dac:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000db0:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000db4:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000db8:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000dbc:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
80000dbe:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80000dc0:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
80000dc2:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000dc4:	1c 9f       	mov	pc,lr

80000dc6 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
80000dc6:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000dc8:	49 bc       	lddpc	r12,80000e34 <_yield+0xe>
	ld.w r12,r12[0x0]
80000dca:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000dcc:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
80000dce:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
80000dd0:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
80000dd2:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
80000dd4:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
80000dd6:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
80000dd8:	33 40       	mov	r0,52
	add r0,r12
80000dda:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000ddc:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80000de0:	1a 90       	mov	r0,sp
	st.w --sp,r0
80000de2:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80000de4:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
80000de8:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
80000dea:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80000dec:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
80000dee:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
80000df0:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
80000df2:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80000df4:	1c 9f       	mov	pc,lr

80000df6 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000df6:	49 0c       	lddpc	r12,80000e34 <_yield+0xe>
	ld.w r12,r12[0x0]
80000df8:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
80000dfa:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000dfc:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
80000dfe:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
80000e02:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80000e04:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80000e06:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
80000e08:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80000e0a:	33 40       	mov	r0,52
	add r0,r12
80000e0c:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80000e0e:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80000e12:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000e14:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80000e16:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80000e18:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000e1a:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80000e1c:	d6 13       	rets

80000e1e <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
80000e1e:	d4 01       	pushm	lr
	lda.w lr,_yield
80000e20:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000e24:	d7 33       	scall

80000e26 <_yield>:
_yield:
	call contextSave
80000e26:	cd 0f       	rcall	80000dc6 <contextSave>
	call scheduler
80000e28:	f0 1f 00 04 	mcall	80000e38 <_yield+0x12>
	call contextRestore
80000e2c:	ce 5f       	rcall	80000df6 <contextRestore>
80000e2e:	00 00       	add	r0,r0
80000e30:	00 00       	add	r0,r0
80000e32:	06 20       	rsub	r0,r3
80000e34:	00 00       	add	r0,r0
80000e36:	06 58       	eor	r8,r3
80000e38:	80 00       	ld.sh	r0,r0[0x0]
80000e3a:	0e 3c       	cp.w	r12,r7

80000e3c <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000e3c:	eb cd 40 80 	pushm	r7,lr
80000e40:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK == NULL) {
80000e42:	48 f8       	lddpc	r8,80000e7c <scheduler+0x40>
80000e44:	70 08       	ld.w	r8,r8[0x0]
80000e46:	58 08       	cp.w	r8,0
80000e48:	c1 11       	brne	80000e6a <scheduler+0x2e>
		PA[EXECTASK->priority] = EXECTASK;
80000e4a:	48 e8       	lddpc	r8,80000e80 <scheduler+0x44>
80000e4c:	70 08       	ld.w	r8,r8[0x0]
80000e4e:	f1 38 00 64 	ld.ub	r8,r8[100]
80000e52:	10 99       	mov	r9,r8
80000e54:	48 b8       	lddpc	r8,80000e80 <scheduler+0x44>
80000e56:	70 0a       	ld.w	r10,r8[0x0]
80000e58:	48 b8       	lddpc	r8,80000e84 <scheduler+0x48>
80000e5a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		EXECTASK = EXECTASK->nexttcb;
80000e5e:	48 98       	lddpc	r8,80000e80 <scheduler+0x44>
80000e60:	70 08       	ld.w	r8,r8[0x0]
80000e62:	70 09       	ld.w	r9,r8[0x0]
80000e64:	48 78       	lddpc	r8,80000e80 <scheduler+0x44>
80000e66:	91 09       	st.w	r8[0x0],r9
80000e68:	c0 88       	rjmp	80000e78 <scheduler+0x3c>
	}
	else {
		EXECTASK = PREEMPTASK;
80000e6a:	48 58       	lddpc	r8,80000e7c <scheduler+0x40>
80000e6c:	70 09       	ld.w	r9,r8[0x0]
80000e6e:	48 58       	lddpc	r8,80000e80 <scheduler+0x44>
80000e70:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
80000e72:	48 38       	lddpc	r8,80000e7c <scheduler+0x40>
80000e74:	30 09       	mov	r9,0
80000e76:	91 09       	st.w	r8[0x0],r9
	}
}
80000e78:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e7c:	00 00       	add	r0,r0
80000e7e:	06 54       	eor	r4,r3
80000e80:	00 00       	add	r0,r0
80000e82:	06 58       	eor	r8,r3
80000e84:	00 00       	add	r0,r0
80000e86:	06 24       	rsub	r4,r3

80000e88 <ROSA_startScheduler>:

void ROSA_startScheduler(void)
{
80000e88:	eb cd 40 80 	pushm	r7,lr
80000e8c:	1a 97       	mov	r7,sp
80000e8e:	20 1d       	sub	sp,4
	tcb * tmp = readyQueueSearch();	
80000e90:	f0 1f 00 0a 	mcall	80000eb8 <ROSA_startScheduler+0x30>
80000e94:	18 98       	mov	r8,r12
80000e96:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if (EXECTASK == NULL)
80000e9a:	48 98       	lddpc	r8,80000ebc <ROSA_startScheduler+0x34>
80000e9c:	70 08       	ld.w	r8,r8[0x0]
80000e9e:	58 08       	cp.w	r8,0
80000ea0:	c0 81       	brne	80000eb0 <ROSA_startScheduler+0x28>
	{
		TCBLIST = tmp->nexttcb;
80000ea2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ea6:	70 09       	ld.w	r9,r8[0x0]
80000ea8:	48 68       	lddpc	r8,80000ec0 <ROSA_startScheduler+0x38>
80000eaa:	91 09       	st.w	r8[0x0],r9
		ROSA_start();
80000eac:	f0 1f 00 06 	mcall	80000ec4 <ROSA_startScheduler+0x3c>
	}
}
80000eb0:	2f fd       	sub	sp,-4
80000eb2:	e3 cd 80 80 	ldm	sp++,r7,pc
80000eb6:	00 00       	add	r0,r0
80000eb8:	80 00       	ld.sh	r0,r0[0x0]
80000eba:	0a 2c       	rsub	r12,r5
80000ebc:	00 00       	add	r0,r0
80000ebe:	06 58       	eor	r8,r3
80000ec0:	00 00       	add	r0,r0
80000ec2:	06 20       	rsub	r0,r3
80000ec4:	80 00       	ld.sh	r0,r0[0x0]
80000ec6:	0d 5c       	ld.sh	r12,--r6

80000ec8 <C.18.9634>:
80000ec8:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000ed8 <insertDelayQueue>:
/* param pth: pointer to the task to be inserted in the delay queue		*/
/* param deadline: integer with the number of ticks at which the task	*/
/* needs to be woken up													*/
/************************************************************************/
int insertDelayQueue(ROSA_taskHandle_t pth, uint64_t deadline)
{
80000ed8:	eb cd 40 80 	pushm	r7,lr
80000edc:	1a 97       	mov	r7,sp
80000ede:	20 5d       	sub	sp,20
80000ee0:	ef 4c ff f4 	st.w	r7[-12],r12
80000ee4:	ee eb ff ec 	st.d	r7[-20],r10
	pth->delay = deadline;
80000ee8:	ee fa ff f4 	ld.w	r10,r7[-12]
80000eec:	ee e8 ff ec 	ld.d	r8,r7[-20]
80000ef0:	f4 e9 00 68 	st.d	r10[104],r8
	
	if (DELAYQUEUE == NULL) {
80000ef4:	4a f8       	lddpc	r8,80000fb0 <insertDelayQueue+0xd8>
80000ef6:	70 08       	ld.w	r8,r8[0x0]
80000ef8:	58 08       	cp.w	r8,0
80000efa:	c0 b1       	brne	80000f10 <insertDelayQueue+0x38>
		DELAYQUEUE = pth;
80000efc:	4a d8       	lddpc	r8,80000fb0 <insertDelayQueue+0xd8>
80000efe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000f02:	91 09       	st.w	r8[0x0],r9
		DELAYQUEUE->nexttcb = NULL;
80000f04:	4a b8       	lddpc	r8,80000fb0 <insertDelayQueue+0xd8>
80000f06:	70 08       	ld.w	r8,r8[0x0]
80000f08:	30 09       	mov	r9,0
80000f0a:	91 09       	st.w	r8[0x0],r9
		return 0;
80000f0c:	30 08       	mov	r8,0
80000f0e:	c4 d8       	rjmp	80000fa8 <insertDelayQueue+0xd0>
	}
	
	ROSA_taskHandle_t next = DELAYQUEUE;
80000f10:	4a 88       	lddpc	r8,80000fb0 <insertDelayQueue+0xd8>
80000f12:	70 08       	ld.w	r8,r8[0x0]
80000f14:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_taskHandle_t prev;

	// While the next task in the list has an earlier deadline or higher priority and an equal deadline, move down the list
	while (next->delay <= pth->delay || (next->priority >= pth->priority && next->delay == pth->delay))
80000f18:	c1 98       	rjmp	80000f4a <insertDelayQueue+0x72>
	{
		prev = next;
80000f1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f1e:	ef 48 ff fc 	st.w	r7[-4],r8
		next = next->nexttcb;
80000f22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f26:	70 08       	ld.w	r8,r8[0x0]
80000f28:	ef 48 ff f8 	st.w	r7[-8],r8
		
		// Reach the end of the list
		if (next == NULL) {
80000f2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f30:	58 08       	cp.w	r8,0
80000f32:	c0 c1       	brne	80000f4a <insertDelayQueue+0x72>
			prev->nexttcb = pth;
80000f34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f38:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000f3c:	91 09       	st.w	r8[0x0],r9
			pth->nexttcb = NULL;
80000f3e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f42:	30 09       	mov	r9,0
80000f44:	91 09       	st.w	r8[0x0],r9
			return 0;
80000f46:	30 08       	mov	r8,0
80000f48:	c3 08       	rjmp	80000fa8 <insertDelayQueue+0xd0>
	
	ROSA_taskHandle_t next = DELAYQUEUE;
	ROSA_taskHandle_t prev;

	// While the next task in the list has an earlier deadline or higher priority and an equal deadline, move down the list
	while (next->delay <= pth->delay || (next->priority >= pth->priority && next->delay == pth->delay))
80000f4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f4e:	f0 ea 00 68 	ld.d	r10,r8[104]
80000f52:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f56:	f0 e8 00 68 	ld.d	r8,r8[104]
80000f5a:	10 3a       	cp.w	r10,r8
80000f5c:	f2 0b 13 00 	cpc	r11,r9
80000f60:	fe 98 ff dd 	brls	80000f1a <insertDelayQueue+0x42>
80000f64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f68:	f1 39 00 64 	ld.ub	r9,r8[100]
80000f6c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f70:	f1 38 00 64 	ld.ub	r8,r8[100]
80000f74:	f0 09 18 00 	cp.b	r9,r8
80000f78:	c0 d3       	brcs	80000f92 <insertDelayQueue+0xba>
80000f7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f7e:	f0 ea 00 68 	ld.d	r10,r8[104]
80000f82:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f86:	f0 e8 00 68 	ld.d	r8,r8[104]
80000f8a:	10 3a       	cp.w	r10,r8
80000f8c:	f2 0b 13 00 	cpc	r11,r9
80000f90:	cc 50       	breq	80000f1a <insertDelayQueue+0x42>
			pth->nexttcb = NULL;
			return 0;
		}
	}
	
	pth->nexttcb = next;
80000f92:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f96:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f9a:	91 09       	st.w	r8[0x0],r9
	prev->nexttcb = pth;
80000f9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fa0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000fa4:	91 09       	st.w	r8[0x0],r9
	return 0;
80000fa6:	30 08       	mov	r8,0
}
80000fa8:	10 9c       	mov	r12,r8
80000faa:	2f bd       	sub	sp,-20
80000fac:	e3 cd 80 80 	ldm	sp++,r7,pc
80000fb0:	00 00       	add	r0,r0
80000fb2:	06 d4       	st.w	--r3,r4

80000fb4 <removeDelayQueue>:
/*																		*/
/* Removes the given task from the delay queue							*/
/* Param pth: pointer to the task to be removed from the delay queue	*/
/************************************************************************/
int removeDelayQueue(ROSA_taskHandle_t pth)
{
80000fb4:	eb cd 40 80 	pushm	r7,lr
80000fb8:	1a 97       	mov	r7,sp
80000fba:	20 3d       	sub	sp,12
80000fbc:	ef 4c ff f4 	st.w	r7[-12],r12
	// If there are no tasks in the delay queue, return error code -1
	if (DELAYQUEUE == NULL)
80000fc0:	4a 38       	lddpc	r8,8000104c <removeDelayQueue+0x98>
80000fc2:	70 08       	ld.w	r8,r8[0x0]
80000fc4:	58 08       	cp.w	r8,0
80000fc6:	c0 31       	brne	80000fcc <removeDelayQueue+0x18>
	{
		return -1;
80000fc8:	3f f8       	mov	r8,-1
80000fca:	c3 c8       	rjmp	80001042 <removeDelayQueue+0x8e>
	}
	// If there is only one task in the status queue and this is pth, remove it from the queue
	if (DELAYQUEUE == pth)
80000fcc:	4a 08       	lddpc	r8,8000104c <removeDelayQueue+0x98>
80000fce:	70 09       	ld.w	r9,r8[0x0]
80000fd0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000fd4:	10 39       	cp.w	r9,r8
80000fd6:	c1 11       	brne	80000ff8 <removeDelayQueue+0x44>
	{
		if (DELAYQUEUE->nexttcb == NULL)
80000fd8:	49 d8       	lddpc	r8,8000104c <removeDelayQueue+0x98>
80000fda:	70 08       	ld.w	r8,r8[0x0]
80000fdc:	70 08       	ld.w	r8,r8[0x0]
80000fde:	58 08       	cp.w	r8,0
80000fe0:	c0 51       	brne	80000fea <removeDelayQueue+0x36>
		{
			DELAYQUEUE = NULL; // Task was the only one in the list
80000fe2:	49 b8       	lddpc	r8,8000104c <removeDelayQueue+0x98>
80000fe4:	30 09       	mov	r9,0
80000fe6:	91 09       	st.w	r8[0x0],r9
80000fe8:	c0 68       	rjmp	80000ff4 <removeDelayQueue+0x40>
			} else {
			DELAYQUEUE = pth->nexttcb;
80000fea:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000fee:	70 09       	ld.w	r9,r8[0x0]
80000ff0:	49 78       	lddpc	r8,8000104c <removeDelayQueue+0x98>
80000ff2:	91 09       	st.w	r8[0x0],r9
		}
		return 0;
80000ff4:	30 08       	mov	r8,0
80000ff6:	c2 68       	rjmp	80001042 <removeDelayQueue+0x8e>
	}
	// Else, find the task before pth and point it to the task after pth, removing it
	ROSA_taskHandle_t next = DELAYQUEUE;
80000ff8:	49 58       	lddpc	r8,8000104c <removeDelayQueue+0x98>
80000ffa:	70 08       	ld.w	r8,r8[0x0]
80000ffc:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_taskHandle_t prev;
	while (next != pth)
80001000:	c1 08       	rjmp	80001020 <removeDelayQueue+0x6c>
	{
		prev = next;
80001002:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001006:	ef 48 ff fc 	st.w	r7[-4],r8
		next = next->nexttcb;
8000100a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000100e:	70 08       	ld.w	r8,r8[0x0]
80001010:	ef 48 ff f8 	st.w	r7[-8],r8
		if(next == NULL)
80001014:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001018:	58 08       	cp.w	r8,0
8000101a:	c0 31       	brne	80001020 <removeDelayQueue+0x6c>
		{
			return -1; //Task is not in the list, so return error code -1
8000101c:	3f f8       	mov	r8,-1
8000101e:	c1 28       	rjmp	80001042 <removeDelayQueue+0x8e>
		return 0;
	}
	// Else, find the task before pth and point it to the task after pth, removing it
	ROSA_taskHandle_t next = DELAYQUEUE;
	ROSA_taskHandle_t prev;
	while (next != pth)
80001020:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001024:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001028:	10 39       	cp.w	r9,r8
8000102a:	ce c1       	brne	80001002 <removeDelayQueue+0x4e>
		if(next == NULL)
		{
			return -1; //Task is not in the list, so return error code -1
		}
	}
	prev->nexttcb = next->nexttcb;
8000102c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001030:	70 09       	ld.w	r9,r8[0x0]
80001032:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001036:	91 09       	st.w	r8[0x0],r9
	next->nexttcb = NULL;
80001038:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000103c:	30 09       	mov	r9,0
8000103e:	91 09       	st.w	r8[0x0],r9
	return 0;
80001040:	30 08       	mov	r8,0
}
80001042:	10 9c       	mov	r12,r8
80001044:	2f dd       	sub	sp,-12
80001046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000104a:	00 00       	add	r0,r0
8000104c:	00 00       	add	r0,r0
8000104e:	06 d4       	st.w	--r3,r4

80001050 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80001050:	eb cd 40 80 	pushm	r7,lr
80001054:	1a 97       	mov	r7,sp
80001056:	20 5d       	sub	sp,20
	interruptDisable();
80001058:	f0 1f 00 36 	mcall	80001130 <timerISR+0xe0>
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
8000105c:	fe 78 38 00 	mov	r8,-51200
80001060:	ef 48 ff f0 	st.w	r7[-16],r8
	ROSA_taskHandle_t tmptsk;
	ROSA_taskHandle_t tmp;
	bool interruptTask;
	
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80001064:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001068:	70 88       	ld.w	r8,r8[0x20]
8000106a:	ef 48 ff ec 	st.w	r7[-20],r8
	if (sr & AVR32_TC_CPCS_MASK)
8000106e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001072:	e2 18 00 10 	andl	r8,0x10,COH
80001076:	c5 60       	breq	80001122 <timerISR+0xd2>
	{
		systemTick++;
80001078:	4a f8       	lddpc	r8,80001134 <timerISR+0xe4>
8000107a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000107e:	30 18       	mov	r8,1
80001080:	30 09       	mov	r9,0
80001082:	f4 08 00 08 	add	r8,r10,r8
80001086:	f6 09 00 49 	adc	r9,r11,r9
8000108a:	4a ba       	lddpc	r10,80001134 <timerISR+0xe4>
8000108c:	f4 e9 00 00 	st.d	r10[0],r8
		interruptTask = false;
80001090:	30 08       	mov	r8,0
80001092:	ef 68 ff ff 	st.b	r7[-1],r8
		
		while (DELAYQUEUE != NULL && DELAYQUEUE->delay <= systemTick)
80001096:	c1 78       	rjmp	800010c4 <timerISR+0x74>
		{
			tmptsk = DELAYQUEUE;
80001098:	4a 88       	lddpc	r8,80001138 <timerISR+0xe8>
8000109a:	70 08       	ld.w	r8,r8[0x0]
8000109c:	ef 48 ff f4 	st.w	r7[-12],r8
			removeDelayQueue(DELAYQUEUE);
800010a0:	4a 68       	lddpc	r8,80001138 <timerISR+0xe8>
800010a2:	70 08       	ld.w	r8,r8[0x0]
800010a4:	10 9c       	mov	r12,r8
800010a6:	f0 1f 00 26 	mcall	8000113c <timerISR+0xec>
			tmptsk->delay = 0;
800010aa:	ee fa ff f4 	ld.w	r10,r7[-12]
800010ae:	30 08       	mov	r8,0
800010b0:	30 09       	mov	r9,0
800010b2:	f4 e9 00 68 	st.d	r10[104],r8
			readyQueueInsert(tmptsk);
800010b6:	ee fc ff f4 	ld.w	r12,r7[-12]
800010ba:	f0 1f 00 22 	mcall	80001140 <timerISR+0xf0>
			interruptTask = true;
800010be:	30 18       	mov	r8,1
800010c0:	ef 68 ff ff 	st.b	r7[-1],r8
	if (sr & AVR32_TC_CPCS_MASK)
	{
		systemTick++;
		interruptTask = false;
		
		while (DELAYQUEUE != NULL && DELAYQUEUE->delay <= systemTick)
800010c4:	49 d8       	lddpc	r8,80001138 <timerISR+0xe8>
800010c6:	70 08       	ld.w	r8,r8[0x0]
800010c8:	58 08       	cp.w	r8,0
800010ca:	c0 d0       	breq	800010e4 <timerISR+0x94>
800010cc:	49 b8       	lddpc	r8,80001138 <timerISR+0xe8>
800010ce:	70 08       	ld.w	r8,r8[0x0]
800010d0:	f0 ea 00 68 	ld.d	r10,r8[104]
800010d4:	49 88       	lddpc	r8,80001134 <timerISR+0xe4>
800010d6:	f0 e8 00 00 	ld.d	r8,r8[0]
800010da:	10 3a       	cp.w	r10,r8
800010dc:	f2 0b 13 00 	cpc	r11,r9
800010e0:	fe 98 ff dc 	brls	80001098 <timerISR+0x48>
			removeDelayQueue(DELAYQUEUE);
			tmptsk->delay = 0;
			readyQueueInsert(tmptsk);
			interruptTask = true;
		}
		if (interruptTask)
800010e4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800010e8:	30 08       	mov	r8,0
800010ea:	f0 09 18 00 	cp.b	r9,r8
800010ee:	c1 a0       	breq	80001122 <timerISR+0xd2>
		{
			tmp = readyQueueSearch();
800010f0:	f0 1f 00 15 	mcall	80001144 <timerISR+0xf4>
800010f4:	18 98       	mov	r8,r12
800010f6:	ef 48 ff f8 	st.w	r7[-8],r8
			if (EXECTASK->priority < tmptsk->priority)
800010fa:	49 48       	lddpc	r8,80001148 <timerISR+0xf8>
800010fc:	70 08       	ld.w	r8,r8[0x0]
800010fe:	f1 39 00 64 	ld.ub	r9,r8[100]
80001102:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001106:	f1 38 00 64 	ld.ub	r8,r8[100]
8000110a:	f0 09 18 00 	cp.b	r9,r8
8000110e:	c0 a2       	brcc	80001122 <timerISR+0xd2>
			{
				PREEMPTASK = tmp->nexttcb;
80001110:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001114:	70 09       	ld.w	r9,r8[0x0]
80001116:	48 e8       	lddpc	r8,8000114c <timerISR+0xfc>
80001118:	91 09       	st.w	r8[0x0],r9
				interruptEnable();
8000111a:	f0 1f 00 0e 	mcall	80001150 <timerISR+0x100>
				ROSA_yieldFromISR();
8000111e:	f0 1f 00 0e 	mcall	80001154 <timerISR+0x104>
			}
		}
	}
	//timerClearInterrupt(); //Disabled until we know what it actually does
	interruptEnable();
80001122:	f0 1f 00 0c 	mcall	80001150 <timerISR+0x100>
}
80001126:	2f bd       	sub	sp,-20
80001128:	e3 cd 40 80 	ldm	sp++,r7,lr
8000112c:	d6 03       	rete
8000112e:	00 00       	add	r0,r0
80001130:	80 00       	ld.sh	r0,r0[0x0]
80001132:	23 66       	sub	r6,54
80001134:	00 00       	add	r0,r0
80001136:	06 d8       	st.w	--r3,r8
80001138:	00 00       	add	r0,r0
8000113a:	06 d4       	st.w	--r3,r4
8000113c:	80 00       	ld.sh	r0,r0[0x0]
8000113e:	0f b4       	ld.ub	r4,r7[0x3]
80001140:	80 00       	ld.sh	r0,r0[0x0]
80001142:	08 f0       	st.b	--r4,r0
80001144:	80 00       	ld.sh	r0,r0[0x0]
80001146:	0a 2c       	rsub	r12,r5
80001148:	00 00       	add	r0,r0
8000114a:	06 58       	eor	r8,r3
8000114c:	00 00       	add	r0,r0
8000114e:	06 54       	eor	r4,r3
80001150:	80 00       	ld.sh	r0,r0[0x0]
80001152:	23 6a       	sub	r10,54
80001154:	80 00       	ld.sh	r0,r0[0x0]
80001156:	08 5c       	eor	r12,r4

80001158 <ROSA_getTickCount>:
/*																		*/
/* Returns the current number of system ticks, relative to start		*/
/* of the system.                                                       */
/************************************************************************/
uint64_t ROSA_getTickCount()
{
80001158:	eb cd 40 80 	pushm	r7,lr
8000115c:	1a 97       	mov	r7,sp
	return systemTick;
8000115e:	48 48       	lddpc	r8,8000116c <ROSA_getTickCount+0x14>
80001160:	f0 e8 00 00 	ld.d	r8,r8[0]
}
80001164:	10 9a       	mov	r10,r8
80001166:	12 9b       	mov	r11,r9
80001168:	e3 cd 80 80 	ldm	sp++,r7,pc
8000116c:	00 00       	add	r0,r0
8000116e:	06 d8       	st.w	--r3,r8

80001170 <ROSA_delay>:
/* ROSA_delay()															*/
/*																		*/
/* Suspends the calling task for the given number of ticks				*/
/************************************************************************/
int16_t ROSA_delay(uint64_t ticks)
{
80001170:	eb cd 40 80 	pushm	r7,lr
80001174:	1a 97       	mov	r7,sp
80001176:	20 3d       	sub	sp,12
80001178:	ee eb ff f4 	st.d	r7[-12],r10
	readyQueueExtract(EXECTASK);
8000117c:	49 28       	lddpc	r8,800011c4 <ROSA_delay+0x54>
8000117e:	70 08       	ld.w	r8,r8[0x0]
80001180:	10 9c       	mov	r12,r8
80001182:	f0 1f 00 12 	mcall	800011c8 <ROSA_delay+0x58>
	insertDelayQueue(EXECTASK, ROSA_getTickCount() + ticks);
80001186:	f0 1f 00 12 	mcall	800011cc <ROSA_delay+0x5c>
8000118a:	ee e8 ff f4 	ld.d	r8,r7[-12]
8000118e:	f4 08 00 08 	add	r8,r10,r8
80001192:	f6 09 00 49 	adc	r9,r11,r9
80001196:	48 ca       	lddpc	r10,800011c4 <ROSA_delay+0x54>
80001198:	74 0c       	ld.w	r12,r10[0x0]
8000119a:	10 9a       	mov	r10,r8
8000119c:	12 9b       	mov	r11,r9
8000119e:	f0 1f 00 0d 	mcall	800011d0 <ROSA_delay+0x60>
	tcb * tmp = readyQueueSearch();
800011a2:	f0 1f 00 0d 	mcall	800011d4 <ROSA_delay+0x64>
800011a6:	18 98       	mov	r8,r12
800011a8:	ef 48 ff fc 	st.w	r7[-4],r8
	if (tmp->priority >= 0)
	{
		PREEMPTASK = tmp;
800011ac:	48 b8       	lddpc	r8,800011d8 <ROSA_delay+0x68>
800011ae:	ee f9 ff fc 	ld.w	r9,r7[-4]
800011b2:	91 09       	st.w	r8[0x0],r9
	} else {
		return -1;
	}
	ROSA_yield();
800011b4:	f0 1f 00 0a 	mcall	800011dc <ROSA_delay+0x6c>
	return 0;
800011b8:	30 08       	mov	r8,0
}
800011ba:	10 9c       	mov	r12,r8
800011bc:	2f dd       	sub	sp,-12
800011be:	e3 cd 80 80 	ldm	sp++,r7,pc
800011c2:	00 00       	add	r0,r0
800011c4:	00 00       	add	r0,r0
800011c6:	06 58       	eor	r8,r3
800011c8:	80 00       	ld.sh	r0,r0[0x0]
800011ca:	09 84       	ld.ub	r4,r4[0x0]
800011cc:	80 00       	ld.sh	r0,r0[0x0]
800011ce:	11 58       	ld.sh	r8,--r8
800011d0:	80 00       	ld.sh	r0,r0[0x0]
800011d2:	0e d8       	st.w	--r7,r8
800011d4:	80 00       	ld.sh	r0,r0[0x0]
800011d6:	0a 2c       	rsub	r12,r5
800011d8:	00 00       	add	r0,r0
800011da:	06 54       	eor	r4,r3
800011dc:	80 00       	ld.sh	r0,r0[0x0]
800011de:	0e 1e       	sub	lr,r7

800011e0 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
800011e0:	eb cd 40 80 	pushm	r7,lr
800011e4:	1a 97       	mov	r7,sp
800011e6:	20 7d       	sub	sp,28
800011e8:	ef 4c ff e4 	st.w	r7[-28],r12
	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
800011ec:	4a 48       	lddpc	r8,8000127c <timerPeriodSet+0x9c>
800011ee:	ee ca 00 18 	sub	r10,r7,24
800011f2:	10 9b       	mov	r11,r8
800011f4:	f6 e8 00 00 	ld.d	r8,r11[0]
800011f8:	f4 e9 00 00 	st.d	r10[0],r8
800011fc:	f6 e8 00 08 	ld.d	r8,r11[8]
80001200:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80001204:	30 48       	mov	r8,4
80001206:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
8000120a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000120e:	20 18       	sub	r8,1
80001210:	a3 68       	lsl	r8,0x2
80001212:	ee 08 00 08 	add	r8,r7,r8
80001216:	f0 f9 ff e8 	ld.w	r9,r8[-24]
8000121a:	e0 68 1b 00 	mov	r8,6912
8000121e:	ea 18 00 b7 	orh	r8,0xb7
80001222:	f0 09 0c 08 	divs	r8,r8,r9
80001226:	10 99       	mov	r9,r8
80001228:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000122c:	b1 39       	mul	r9,r8
8000122e:	e0 68 4d d3 	mov	r8,19923
80001232:	ea 18 10 62 	orh	r8,0x1062
80001236:	f2 08 06 48 	mulu.d	r8,r9,r8
8000123a:	f2 08 16 06 	lsr	r8,r9,0x6
8000123e:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80001242:	ee fc ff fc 	ld.w	r12,r7[-4]
80001246:	f0 1f 00 0f 	mcall	80001280 <timerPeriodSet+0xa0>
	timerRCSet(rc);
8000124a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000124e:	f0 1f 00 0e 	mcall	80001284 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80001252:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001256:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000125a:	f2 08 02 4a 	mul	r10,r9,r8
8000125e:	e0 68 9f 81 	mov	r8,40833
80001262:	ea 18 16 5e 	orh	r8,0x165e
80001266:	f4 08 04 48 	muls.d	r8,r10,r8
8000126a:	b5 49       	asr	r9,0x14
8000126c:	f4 08 14 1f 	asr	r8,r10,0x1f
80001270:	f2 08 01 08 	sub	r8,r9,r8
}
80001274:	10 9c       	mov	r12,r8
80001276:	2f 9d       	sub	sp,-28
80001278:	e3 cd 80 80 	ldm	sp++,r7,pc
8000127c:	80 00       	ld.sh	r0,r0[0x0]
8000127e:	0e c8       	st.b	r7++,r8
80001280:	80 00       	ld.sh	r0,r0[0x0]
80001282:	19 28       	ld.uh	r8,r12++
80001284:	80 00       	ld.sh	r0,r0[0x0]
80001286:	19 12       	ld.sh	r2,r12++

80001288 <buttonInit>:
80001288:	eb cd 40 80 	pushm	r7,lr
8000128c:	1a 97       	mov	r7,sp
8000128e:	30 1b       	mov	r11,1
80001290:	35 8c       	mov	r12,88
80001292:	f0 1f 00 07 	mcall	800012ac <buttonInit+0x24>
80001296:	30 1b       	mov	r11,1
80001298:	35 5c       	mov	r12,85
8000129a:	f0 1f 00 05 	mcall	800012ac <buttonInit+0x24>
8000129e:	30 1b       	mov	r11,1
800012a0:	35 2c       	mov	r12,82
800012a2:	f0 1f 00 03 	mcall	800012ac <buttonInit+0x24>
800012a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800012aa:	00 00       	add	r0,r0
800012ac:	80 00       	ld.sh	r0,r0[0x0]
800012ae:	13 1c       	ld.sh	r12,r9++

800012b0 <joystickInit>:
800012b0:	eb cd 40 80 	pushm	r7,lr
800012b4:	1a 97       	mov	r7,sp
800012b6:	30 1b       	mov	r11,1
800012b8:	31 bc       	mov	r12,27
800012ba:	f0 1f 00 0b 	mcall	800012e4 <joystickInit+0x34>
800012be:	30 1b       	mov	r11,1
800012c0:	31 9c       	mov	r12,25
800012c2:	f0 1f 00 09 	mcall	800012e4 <joystickInit+0x34>
800012c6:	30 1b       	mov	r11,1
800012c8:	31 cc       	mov	r12,28
800012ca:	f0 1f 00 07 	mcall	800012e4 <joystickInit+0x34>
800012ce:	30 1b       	mov	r11,1
800012d0:	31 4c       	mov	r12,20
800012d2:	f0 1f 00 05 	mcall	800012e4 <joystickInit+0x34>
800012d6:	30 1b       	mov	r11,1
800012d8:	31 ac       	mov	r12,26
800012da:	f0 1f 00 03 	mcall	800012e4 <joystickInit+0x34>
800012de:	e3 cd 80 80 	ldm	sp++,r7,pc
800012e2:	00 00       	add	r0,r0
800012e4:	80 00       	ld.sh	r0,r0[0x0]
800012e6:	13 1c       	ld.sh	r12,r9++

800012e8 <delay_ms>:
800012e8:	eb cd 40 80 	pushm	r7,lr
800012ec:	1a 97       	mov	r7,sp
800012ee:	20 2d       	sub	sp,8
800012f0:	ef 4c ff f8 	st.w	r7[-8],r12
800012f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012f8:	e0 69 04 42 	mov	r9,1090
800012fc:	b3 38       	mul	r8,r9
800012fe:	ef 48 ff fc 	st.w	r7[-4],r8
80001302:	c0 68       	rjmp	8000130e <delay_ms+0x26>
80001304:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001308:	20 18       	sub	r8,1
8000130a:	ef 48 ff fc 	st.w	r7[-4],r8
8000130e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001312:	58 08       	cp.w	r8,0
80001314:	cf 81       	brne	80001304 <delay_ms+0x1c>
80001316:	2f ed       	sub	sp,-8
80001318:	e3 cd 80 80 	ldm	sp++,r7,pc

8000131c <gpioInit>:
8000131c:	eb cd 40 80 	pushm	r7,lr
80001320:	1a 97       	mov	r7,sp
80001322:	20 7d       	sub	sp,28
80001324:	ef 4c ff ec 	st.w	r7[-20],r12
80001328:	ef 4b ff e8 	st.w	r7[-24],r11
8000132c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001330:	a5 58       	asr	r8,0x5
80001332:	ef 48 ff f4 	st.w	r7[-12],r8
80001336:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000133a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000133e:	ef 48 ff fc 	st.w	r7[-4],r8
80001342:	30 19       	mov	r9,1
80001344:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001348:	f2 08 09 48 	lsl	r8,r9,r8
8000134c:	ef 48 ff f8 	st.w	r7[-8],r8
80001350:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001354:	a9 68       	lsl	r8,0x8
80001356:	e0 28 f0 00 	sub	r8,61440
8000135a:	ef 48 ff f0 	st.w	r7[-16],r8
8000135e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001362:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001366:	91 19       	st.w	r8[0x4],r9
80001368:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000136c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001370:	91 69       	st.w	r8[0x18],r9
80001372:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001376:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000137a:	91 a9       	st.w	r8[0x28],r9
8000137c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001380:	ef 48 ff e4 	st.w	r7[-28],r8
80001384:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001388:	58 08       	cp.w	r8,0
8000138a:	c0 60       	breq	80001396 <gpioInit+0x7a>
8000138c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001390:	58 18       	cp.w	r8,1
80001392:	c0 90       	breq	800013a4 <gpioInit+0x88>
80001394:	c0 f8       	rjmp	800013b2 <gpioInit+0x96>
80001396:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000139a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000139e:	f1 49 00 44 	st.w	r8[68],r9
800013a2:	c0 e8       	rjmp	800013be <gpioInit+0xa2>
800013a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800013a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800013ac:	f1 49 00 48 	st.w	r8[72],r9
800013b0:	c0 78       	rjmp	800013be <gpioInit+0xa2>
800013b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800013b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800013ba:	f1 49 00 48 	st.w	r8[72],r9
800013be:	2f 9d       	sub	sp,-28
800013c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800013c4 <gpioClear>:
800013c4:	eb cd 40 80 	pushm	r7,lr
800013c8:	1a 97       	mov	r7,sp
800013ca:	20 5d       	sub	sp,20
800013cc:	ef 4c ff ec 	st.w	r7[-20],r12
800013d0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800013d4:	a5 58       	asr	r8,0x5
800013d6:	ef 48 ff f4 	st.w	r7[-12],r8
800013da:	ee f8 ff ec 	ld.w	r8,r7[-20]
800013de:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800013e2:	ef 48 ff fc 	st.w	r7[-4],r8
800013e6:	30 19       	mov	r9,1
800013e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013ec:	f2 08 09 48 	lsl	r8,r9,r8
800013f0:	ef 48 ff f8 	st.w	r7[-8],r8
800013f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800013f8:	a9 68       	lsl	r8,0x8
800013fa:	e0 28 f0 00 	sub	r8,61440
800013fe:	ef 48 ff f0 	st.w	r7[-16],r8
80001402:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001406:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000140a:	f1 49 00 58 	st.w	r8[88],r9
8000140e:	2f bd       	sub	sp,-20
80001410:	e3 cd 80 80 	ldm	sp++,r7,pc

80001414 <gpioSet>:
80001414:	eb cd 40 80 	pushm	r7,lr
80001418:	1a 97       	mov	r7,sp
8000141a:	20 5d       	sub	sp,20
8000141c:	ef 4c ff ec 	st.w	r7[-20],r12
80001420:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001424:	a5 58       	asr	r8,0x5
80001426:	ef 48 ff f4 	st.w	r7[-12],r8
8000142a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000142e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001432:	ef 48 ff fc 	st.w	r7[-4],r8
80001436:	30 19       	mov	r9,1
80001438:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000143c:	f2 08 09 48 	lsl	r8,r9,r8
80001440:	ef 48 ff f8 	st.w	r7[-8],r8
80001444:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001448:	a9 68       	lsl	r8,0x8
8000144a:	e0 28 f0 00 	sub	r8,61440
8000144e:	ef 48 ff f0 	st.w	r7[-16],r8
80001452:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001456:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000145a:	f1 49 00 54 	st.w	r8[84],r9
8000145e:	2f bd       	sub	sp,-20
80001460:	e3 cd 80 80 	ldm	sp++,r7,pc

80001464 <ledInit>:
80001464:	eb cd 40 80 	pushm	r7,lr
80001468:	1a 97       	mov	r7,sp
8000146a:	20 9d       	sub	sp,36
8000146c:	49 e8       	lddpc	r8,800014e4 <ledInit+0x80>
8000146e:	ee cb 00 24 	sub	r11,r7,36
80001472:	10 9a       	mov	r10,r8
80001474:	f4 e8 00 00 	ld.d	r8,r10[0]
80001478:	f6 e9 00 00 	st.d	r11[0],r8
8000147c:	f4 e8 00 08 	ld.d	r8,r10[8]
80001480:	f6 e9 00 08 	st.d	r11[8],r8
80001484:	f4 e8 00 10 	ld.d	r8,r10[16]
80001488:	f6 e9 00 10 	st.d	r11[16],r8
8000148c:	f4 e8 00 18 	ld.d	r8,r10[24]
80001490:	f6 e9 00 18 	st.d	r11[24],r8
80001494:	30 08       	mov	r8,0
80001496:	ef 48 ff fc 	st.w	r7[-4],r8
8000149a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000149e:	a3 68       	lsl	r8,0x2
800014a0:	ee 08 00 08 	add	r8,r7,r8
800014a4:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800014a8:	10 9c       	mov	r12,r8
800014aa:	f0 1f 00 10 	mcall	800014e8 <ledInit+0x84>
800014ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800014b2:	a3 68       	lsl	r8,0x2
800014b4:	ee 08 00 08 	add	r8,r7,r8
800014b8:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800014bc:	30 0b       	mov	r11,0
800014be:	10 9c       	mov	r12,r8
800014c0:	f0 1f 00 0b 	mcall	800014ec <ledInit+0x88>
800014c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800014c8:	58 78       	cp.w	r8,7
800014ca:	5f 18       	srne	r8
800014cc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800014d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800014d4:	2f f8       	sub	r8,-1
800014d6:	ef 48 ff fc 	st.w	r7[-4],r8
800014da:	58 09       	cp.w	r9,0
800014dc:	cd f1       	brne	8000149a <ledInit+0x36>
800014de:	2f 7d       	sub	sp,-36
800014e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800014e4:	80 00       	ld.sh	r0,r0[0x0]
800014e6:	26 00       	sub	r0,96
800014e8:	80 00       	ld.sh	r0,r0[0x0]
800014ea:	15 10       	ld.sh	r0,r10++
800014ec:	80 00       	ld.sh	r0,r0[0x0]
800014ee:	13 1c       	ld.sh	r12,r9++

800014f0 <ledOn>:
800014f0:	eb cd 40 80 	pushm	r7,lr
800014f4:	1a 97       	mov	r7,sp
800014f6:	20 1d       	sub	sp,4
800014f8:	ef 4c ff fc 	st.w	r7[-4],r12
800014fc:	ee fc ff fc 	ld.w	r12,r7[-4]
80001500:	f0 1f 00 03 	mcall	8000150c <ledOn+0x1c>
80001504:	2f fd       	sub	sp,-4
80001506:	e3 cd 80 80 	ldm	sp++,r7,pc
8000150a:	00 00       	add	r0,r0
8000150c:	80 00       	ld.sh	r0,r0[0x0]
8000150e:	13 c4       	ld.ub	r4,r9[0x4]

80001510 <ledOff>:
80001510:	eb cd 40 80 	pushm	r7,lr
80001514:	1a 97       	mov	r7,sp
80001516:	20 1d       	sub	sp,4
80001518:	ef 4c ff fc 	st.w	r7[-4],r12
8000151c:	ee fc ff fc 	ld.w	r12,r7[-4]
80001520:	f0 1f 00 03 	mcall	8000152c <ledOff+0x1c>
80001524:	2f fd       	sub	sp,-4
80001526:	e3 cd 80 80 	ldm	sp++,r7,pc
8000152a:	00 00       	add	r0,r0
8000152c:	80 00       	ld.sh	r0,r0[0x0]
8000152e:	14 14       	sub	r4,r10

80001530 <potInit>:
80001530:	d3 01       	pushm	r11-r12
80001532:	e0 6c 10 00 	mov	r12,4096
80001536:	ea 1c ff ff 	orh	r12,0xffff
8000153a:	31 6b       	mov	r11,22
8000153c:	99 2b       	st.w	r12[0x8],r11
8000153e:	99 6b       	st.w	r12[0x18],r11
80001540:	99 6b       	st.w	r12[0x18],r11
80001542:	e0 6c 3c 00 	mov	r12,15360
80001546:	ea 1c ff ff 	orh	r12,0xffff
8000154a:	30 1b       	mov	r11,1
8000154c:	99 0b       	st.w	r12[0x0],r11
8000154e:	e0 6b 0f 1f 	mov	r11,3871
80001552:	b1 6b       	lsl	r11,0x10
80001554:	99 1b       	st.w	r12[0x4],r11
80001556:	30 2b       	mov	r11,2
80001558:	99 4b       	st.w	r12[0x10],r11
8000155a:	d3 02       	popm	r11-r12
8000155c:	1c 9f       	mov	pc,lr

8000155e <potGetValue>:
8000155e:	d1 81       	pushm	r10-r11
80001560:	e0 6c 3c 00 	mov	r12,15360
80001564:	ea 1c ff ff 	orh	r12,0xffff
80001568:	30 2b       	mov	r11,2
8000156a:	99 0b       	st.w	r12[0x0],r11

8000156c <a1>:
8000156c:	78 7a       	ld.w	r10,r12[0x1c]
8000156e:	16 7a       	tst	r10,r11
80001570:	cf e0       	breq	8000156c <a1>
80001572:	78 dc       	ld.w	r12,r12[0x34]
80001574:	d1 82       	popm	r10-r11
80001576:	1c 9f       	mov	pc,lr

80001578 <usartReset>:
80001578:	eb cd 40 80 	pushm	r7,lr
8000157c:	1a 97       	mov	r7,sp
8000157e:	20 3d       	sub	sp,12
80001580:	ef 4c ff f8 	st.w	r7[-8],r12
80001584:	f0 1f 00 16 	mcall	800015dc <usartReset+0x64>
80001588:	18 98       	mov	r8,r12
8000158a:	ef 48 ff fc 	st.w	r7[-4],r8
8000158e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001592:	58 08       	cp.w	r8,0
80001594:	c0 30       	breq	8000159a <usartReset+0x22>
80001596:	f0 1f 00 13 	mcall	800015e0 <usartReset+0x68>
8000159a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000159e:	3f f8       	mov	r8,-1
800015a0:	93 38       	st.w	r9[0xc],r8
800015a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015a6:	70 58       	ld.w	r8,r8[0x14]
800015a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015ac:	58 08       	cp.w	r8,0
800015ae:	c0 30       	breq	800015b4 <usartReset+0x3c>
800015b0:	f0 1f 00 0d 	mcall	800015e4 <usartReset+0x6c>
800015b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800015b8:	30 08       	mov	r8,0
800015ba:	93 18       	st.w	r9[0x4],r8
800015bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800015c0:	30 08       	mov	r8,0
800015c2:	93 98       	st.w	r9[0x24],r8
800015c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800015c8:	30 08       	mov	r8,0
800015ca:	93 a8       	st.w	r9[0x28],r8
800015cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800015d0:	ea 68 61 0c 	mov	r8,680204
800015d4:	93 08       	st.w	r9[0x0],r8
800015d6:	2f dd       	sub	sp,-12
800015d8:	e3 cd 80 80 	ldm	sp++,r7,pc
800015dc:	80 00       	ld.sh	r0,r0[0x0]
800015de:	23 6e       	sub	lr,54
800015e0:	80 00       	ld.sh	r0,r0[0x0]
800015e2:	23 66       	sub	r6,54
800015e4:	80 00       	ld.sh	r0,r0[0x0]
800015e6:	23 6a       	sub	r10,54

800015e8 <usartSetBaudrate>:
800015e8:	eb cd 40 80 	pushm	r7,lr
800015ec:	1a 97       	mov	r7,sp
800015ee:	20 bd       	sub	sp,44
800015f0:	ef 4c ff ec 	st.w	r7[-20],r12
800015f4:	ef 4b ff e8 	st.w	r7[-24],r11
800015f8:	ef 4a ff e4 	st.w	r7[-28],r10
800015fc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001600:	f0 09 15 04 	lsl	r9,r8,0x4
80001604:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001608:	10 39       	cp.w	r9,r8
8000160a:	e0 8b 00 06 	brhi	80001616 <usartSetBaudrate+0x2e>
8000160e:	31 09       	mov	r9,16
80001610:	ef 49 ff d4 	st.w	r7[-44],r9
80001614:	c0 48       	rjmp	8000161c <usartSetBaudrate+0x34>
80001616:	30 88       	mov	r8,8
80001618:	ef 48 ff d4 	st.w	r7[-44],r8
8000161c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80001620:	ef 49 ff f0 	st.w	r7[-16],r9
80001624:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001628:	f0 0a 15 03 	lsl	r10,r8,0x3
8000162c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001630:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001634:	f2 08 02 48 	mul	r8,r9,r8
80001638:	a1 98       	lsr	r8,0x1
8000163a:	10 0a       	add	r10,r8
8000163c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001640:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001644:	f2 08 02 48 	mul	r8,r9,r8
80001648:	f4 08 0d 08 	divu	r8,r10,r8
8000164c:	ef 48 ff f4 	st.w	r7[-12],r8
80001650:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001654:	a3 98       	lsr	r8,0x3
80001656:	ef 48 ff f8 	st.w	r7[-8],r8
8000165a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000165e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80001662:	ef 48 ff fc 	st.w	r7[-4],r8
80001666:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000166a:	58 08       	cp.w	r8,0
8000166c:	c0 70       	breq	8000167a <usartSetBaudrate+0x92>
8000166e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001672:	e0 48 ff ff 	cp.w	r8,65535
80001676:	e0 88 00 06 	brls	80001682 <usartSetBaudrate+0x9a>
8000167a:	30 18       	mov	r8,1
8000167c:	ef 48 ff d8 	st.w	r7[-40],r8
80001680:	c2 c8       	rjmp	800016d8 <usartSetBaudrate+0xf0>
80001682:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001686:	70 18       	ld.w	r8,r8[0x4]
80001688:	10 99       	mov	r9,r8
8000168a:	e4 19 ff f7 	andh	r9,0xfff7
8000168e:	e0 19 fe cf 	andl	r9,0xfecf
80001692:	ef 49 ff dc 	st.w	r7[-36],r9
80001696:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000169a:	59 08       	cp.w	r8,16
8000169c:	c0 60       	breq	800016a8 <usartSetBaudrate+0xc0>
8000169e:	e8 68 00 00 	mov	r8,524288
800016a2:	ef 48 ff e0 	st.w	r7[-32],r8
800016a6:	c0 48       	rjmp	800016ae <usartSetBaudrate+0xc6>
800016a8:	30 09       	mov	r9,0
800016aa:	ef 49 ff e0 	st.w	r7[-32],r9
800016ae:	ee f9 ff dc 	ld.w	r9,r7[-36]
800016b2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800016b6:	10 49       	or	r9,r8
800016b8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800016bc:	91 19       	st.w	r8[0x4],r9
800016be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800016c2:	f0 09 15 10 	lsl	r9,r8,0x10
800016c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016ca:	10 49       	or	r9,r8
800016cc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800016d0:	91 89       	st.w	r8[0x20],r9
800016d2:	30 09       	mov	r9,0
800016d4:	ef 49 ff d8 	st.w	r7[-40],r9
800016d8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800016dc:	10 9c       	mov	r12,r8
800016de:	2f 5d       	sub	sp,-44
800016e0:	e3 cd 80 80 	ldm	sp++,r7,pc

800016e4 <usartInit>:
800016e4:	eb cd 40 80 	pushm	r7,lr
800016e8:	1a 97       	mov	r7,sp
800016ea:	20 4d       	sub	sp,16
800016ec:	ef 4c ff f8 	st.w	r7[-8],r12
800016f0:	ef 4b ff f4 	st.w	r7[-12],r11
800016f4:	ef 4a ff f0 	st.w	r7[-16],r10
800016f8:	fe 78 10 00 	mov	r8,-61440
800016fc:	ef 48 ff fc 	st.w	r7[-4],r8
80001700:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001704:	30 18       	mov	r8,1
80001706:	93 28       	st.w	r9[0x8],r8
80001708:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000170c:	30 28       	mov	r8,2
8000170e:	93 28       	st.w	r9[0x8],r8
80001710:	ee fc ff f8 	ld.w	r12,r7[-8]
80001714:	f0 1f 00 3b 	mcall	80001800 <usartInit+0x11c>
80001718:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000171c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001720:	70 08       	ld.w	r8,r8[0x0]
80001722:	12 9a       	mov	r10,r9
80001724:	10 9b       	mov	r11,r8
80001726:	ee fc ff f8 	ld.w	r12,r7[-8]
8000172a:	f0 1f 00 37 	mcall	80001804 <usartInit+0x120>
8000172e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001732:	11 c9       	ld.ub	r9,r8[0x4]
80001734:	30 98       	mov	r8,9
80001736:	f0 09 18 00 	cp.b	r9,r8
8000173a:	c0 a1       	brne	8000174e <usartInit+0x6a>
8000173c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001740:	70 18       	ld.w	r8,r8[0x4]
80001742:	10 99       	mov	r9,r8
80001744:	b1 b9       	sbr	r9,0x11
80001746:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000174a:	91 19       	st.w	r8[0x4],r9
8000174c:	c0 d8       	rjmp	80001766 <usartInit+0x82>
8000174e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001752:	70 19       	ld.w	r9,r8[0x4]
80001754:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001758:	11 c8       	ld.ub	r8,r8[0x4]
8000175a:	20 58       	sub	r8,5
8000175c:	a7 68       	lsl	r8,0x6
8000175e:	10 49       	or	r9,r8
80001760:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001764:	91 19       	st.w	r8[0x4],r9
80001766:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000176a:	70 1a       	ld.w	r10,r8[0x4]
8000176c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001770:	11 d8       	ld.ub	r8,r8[0x5]
80001772:	f0 09 15 09 	lsl	r9,r8,0x9
80001776:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000177a:	f1 38 00 08 	ld.ub	r8,r8[8]
8000177e:	af 68       	lsl	r8,0xe
80001780:	f3 e8 10 08 	or	r8,r9,r8
80001784:	f5 e8 10 09 	or	r9,r10,r8
80001788:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000178c:	91 19       	st.w	r8[0x4],r9
8000178e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001792:	90 39       	ld.sh	r9,r8[0x6]
80001794:	30 28       	mov	r8,2
80001796:	f0 09 19 00 	cp.h	r9,r8
8000179a:	e0 88 00 14 	brls	800017c2 <usartInit+0xde>
8000179e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800017a2:	70 18       	ld.w	r8,r8[0x4]
800017a4:	10 99       	mov	r9,r8
800017a6:	ad b9       	sbr	r9,0xd
800017a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800017ac:	91 19       	st.w	r8[0x4],r9
800017ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
800017b2:	90 38       	ld.sh	r8,r8[0x6]
800017b4:	5c 78       	castu.h	r8
800017b6:	20 28       	sub	r8,2
800017b8:	10 99       	mov	r9,r8
800017ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800017be:	91 a9       	st.w	r8[0x28],r9
800017c0:	c0 d8       	rjmp	800017da <usartInit+0xf6>
800017c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800017c6:	70 19       	ld.w	r9,r8[0x4]
800017c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800017cc:	90 38       	ld.sh	r8,r8[0x6]
800017ce:	5c 78       	castu.h	r8
800017d0:	ad 68       	lsl	r8,0xc
800017d2:	10 49       	or	r9,r8
800017d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800017d8:	91 19       	st.w	r8[0x4],r9
800017da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800017de:	70 18       	ld.w	r8,r8[0x4]
800017e0:	10 99       	mov	r9,r8
800017e2:	e0 19 ff f0 	andl	r9,0xfff0
800017e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800017ea:	91 19       	st.w	r8[0x4],r9
800017ec:	ee f9 ff f8 	ld.w	r9,r7[-8]
800017f0:	35 08       	mov	r8,80
800017f2:	93 08       	st.w	r9[0x0],r8
800017f4:	30 08       	mov	r8,0
800017f6:	10 9c       	mov	r12,r8
800017f8:	2f cd       	sub	sp,-16
800017fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800017fe:	00 00       	add	r0,r0
80001800:	80 00       	ld.sh	r0,r0[0x0]
80001802:	15 78       	ld.ub	r8,--r10
80001804:	80 00       	ld.sh	r0,r0[0x0]
80001806:	15 e8       	ld.ub	r8,r10[0x6]

80001808 <usartWriteChar>:
80001808:	eb cd 40 80 	pushm	r7,lr
8000180c:	1a 97       	mov	r7,sp
8000180e:	20 3d       	sub	sp,12
80001810:	ef 4c ff f8 	st.w	r7[-8],r12
80001814:	16 98       	mov	r8,r11
80001816:	ef 68 ff f4 	st.b	r7[-12],r8
8000181a:	e4 68 00 00 	mov	r8,262144
8000181e:	ef 48 ff fc 	st.w	r7[-4],r8
80001822:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001826:	58 08       	cp.w	r8,0
80001828:	5f 18       	srne	r8
8000182a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000182e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001832:	20 18       	sub	r8,1
80001834:	ef 48 ff fc 	st.w	r7[-4],r8
80001838:	12 98       	mov	r8,r9
8000183a:	ec 18 00 01 	eorl	r8,0x1
8000183e:	5c 58       	castu.b	r8
80001840:	c0 71       	brne	8000184e <usartWriteChar+0x46>
80001842:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001846:	70 58       	ld.w	r8,r8[0x14]
80001848:	e2 18 00 02 	andl	r8,0x2,COH
8000184c:	ce b0       	breq	80001822 <usartWriteChar+0x1a>
8000184e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80001852:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001856:	91 79       	st.w	r8[0x1c],r9
80001858:	2f dd       	sub	sp,-12
8000185a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000185e:	d7 03       	nop

80001860 <usartWriteLine>:
80001860:	eb cd 40 80 	pushm	r7,lr
80001864:	1a 97       	mov	r7,sp
80001866:	20 2d       	sub	sp,8
80001868:	ef 4c ff fc 	st.w	r7[-4],r12
8000186c:	ef 4b ff f8 	st.w	r7[-8],r11
80001870:	c1 88       	rjmp	800018a0 <usartWriteLine+0x40>
80001872:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001876:	11 88       	ld.ub	r8,r8[0x0]
80001878:	58 a8       	cp.w	r8,10
8000187a:	c0 61       	brne	80001886 <usartWriteLine+0x26>
8000187c:	30 db       	mov	r11,13
8000187e:	ee fc ff fc 	ld.w	r12,r7[-4]
80001882:	f0 1f 00 0c 	mcall	800018b0 <usartWriteLine+0x50>
80001886:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000188a:	11 88       	ld.ub	r8,r8[0x0]
8000188c:	10 9b       	mov	r11,r8
8000188e:	ee fc ff fc 	ld.w	r12,r7[-4]
80001892:	f0 1f 00 08 	mcall	800018b0 <usartWriteLine+0x50>
80001896:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000189a:	2f f8       	sub	r8,-1
8000189c:	ef 48 ff f8 	st.w	r7[-8],r8
800018a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800018a4:	11 88       	ld.ub	r8,r8[0x0]
800018a6:	58 08       	cp.w	r8,0
800018a8:	ce 51       	brne	80001872 <usartWriteLine+0x12>
800018aa:	2f ed       	sub	sp,-8
800018ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800018b0:	80 00       	ld.sh	r0,r0[0x0]
800018b2:	18 08       	add	r8,r12

800018b4 <timerInit>:
800018b4:	d5 01       	pushm	r11,lr
800018b6:	d2 01       	pushm	r12
800018b8:	f0 1f 00 28 	mcall	80001958 <timerClearInterrupt+0x10>
800018bc:	f0 1f 00 28 	mcall	8000195c <timerClearInterrupt+0x14>
800018c0:	e0 6c 38 00 	mov	r12,14336
800018c4:	ea 1c ff ff 	orh	r12,0xffff
800018c8:	e0 6b c0 00 	mov	r11,49152
800018cc:	ea 1b 00 00 	orh	r11,0x0
800018d0:	99 1b       	st.w	r12[0x4],r11
800018d2:	30 1b       	mov	r11,1
800018d4:	a5 6b       	lsl	r11,0x4
800018d6:	99 9b       	st.w	r12[0x24],r11
800018d8:	d2 02       	popm	r12
800018da:	f0 1f 00 22 	mcall	80001960 <timerClearInterrupt+0x18>
800018de:	d5 02       	popm	r11,lr
800018e0:	1c 9f       	mov	pc,lr

800018e2 <timerReset>:
800018e2:	d3 01       	pushm	r11-r12
800018e4:	e0 6c 38 00 	mov	r12,14336
800018e8:	ea 1c ff ff 	orh	r12,0xffff
800018ec:	30 5b       	mov	r11,5
800018ee:	99 0b       	st.w	r12[0x0],r11
800018f0:	e0 6b 00 08 	mov	r11,8
800018f4:	ea 1b 00 00 	orh	r11,0x0
800018f8:	76 0b       	ld.w	r11,r11[0x0]
800018fa:	99 7b       	st.w	r12[0x1c],r11
800018fc:	d3 02       	popm	r11-r12
800018fe:	1c 9f       	mov	pc,lr

80001900 <timerStop>:
80001900:	d3 01       	pushm	r11-r12
80001902:	e0 6c 38 00 	mov	r12,14336
80001906:	ea 1c ff ff 	orh	r12,0xffff
8000190a:	30 2b       	mov	r11,2
8000190c:	99 0b       	st.w	r12[0x0],r11
8000190e:	d3 02       	popm	r11-r12
80001910:	1c 9f       	mov	pc,lr

80001912 <timerRCSet>:
80001912:	d3 01       	pushm	r11-r12
80001914:	49 4b       	lddpc	r11,80001964 <timerClearInterrupt+0x1c>
80001916:	97 0c       	st.w	r11[0x0],r12
80001918:	e0 6c 38 00 	mov	r12,14336
8000191c:	ea 1c ff ff 	orh	r12,0xffff
80001920:	76 0b       	ld.w	r11,r11[0x0]
80001922:	99 7b       	st.w	r12[0x1c],r11
80001924:	d3 02       	popm	r11-r12
80001926:	1c 9f       	mov	pc,lr

80001928 <timerPrescaleSet>:
80001928:	d3 81       	pushm	r10-r12
8000192a:	49 0b       	lddpc	r11,80001968 <timerClearInterrupt+0x20>
8000192c:	97 0c       	st.w	r11[0x0],r12
8000192e:	e0 6c 38 00 	mov	r12,14336
80001932:	ea 1c ff ff 	orh	r12,0xffff
80001936:	78 1a       	ld.w	r10,r12[0x4]
80001938:	3f 8b       	mov	r11,-8
8000193a:	16 6a       	and	r10,r11
8000193c:	48 bb       	lddpc	r11,80001968 <timerClearInterrupt+0x20>
8000193e:	76 0b       	ld.w	r11,r11[0x0]
80001940:	14 4b       	or	r11,r10
80001942:	99 1b       	st.w	r12[0x4],r11
80001944:	d3 82       	popm	r10-r12
80001946:	1c 9f       	mov	pc,lr

80001948 <timerClearInterrupt>:
80001948:	d2 01       	pushm	r12
8000194a:	e0 6c 38 00 	mov	r12,14336
8000194e:	ea 1c ff ff 	orh	r12,0xffff
80001952:	78 8c       	ld.w	r12,r12[0x20]
80001954:	d2 02       	popm	r12
80001956:	1c 9f       	mov	pc,lr
80001958:	80 00       	ld.sh	r0,r0[0x0]
8000195a:	23 66       	sub	r6,54
8000195c:	80 00       	ld.sh	r0,r0[0x0]
8000195e:	19 48       	ld.w	r8,--r12
80001960:	80 00       	ld.sh	r0,r0[0x0]
80001962:	11 e0       	ld.ub	r0,r8[0x6]
80001964:	00 00       	add	r0,r0
80001966:	00 08       	add	r8,r0
80001968:	00 00       	add	r0,r0
8000196a:	00 0c       	add	r12,r0

8000196c <_stext>:
8000196c:	49 7d       	lddpc	sp,800019c8 <udata_end+0x4>
8000196e:	49 80       	lddpc	r0,800019cc <udata_end+0x8>
80001970:	1a d0       	st.w	--sp,r0
80001972:	e5 cd 20 00 	ldmts	sp,sp
80001976:	1b 00       	ld.w	r0,sp++
80001978:	49 60       	lddpc	r0,800019d0 <udata_end+0xc>
8000197a:	e3 b0 00 01 	mtsr	0x4,r0
8000197e:	d5 53       	csrf	0x15
80001980:	e0 6c 0c 00 	mov	r12,3072
80001984:	ea 1c ff ff 	orh	r12,0xffff
80001988:	e0 6b 01 07 	mov	r11,263
8000198c:	99 ab       	st.w	r12[0x28],r11
8000198e:	30 4b       	mov	r11,4
80001990:	99 0b       	st.w	r12[0x0],r11
80001992:	e0 6a 00 80 	mov	r10,128

80001996 <xw8>:
80001996:	79 5b       	ld.w	r11,r12[0x54]
80001998:	14 7b       	tst	r11,r10
8000199a:	cf e0       	breq	80001996 <xw8>
8000199c:	30 5b       	mov	r11,5
8000199e:	99 0b       	st.w	r12[0x0],r11

800019a0 <idata_>:
800019a0:	48 d0       	lddpc	r0,800019d4 <udata_end+0x10>
800019a2:	48 e1       	lddpc	r1,800019d8 <udata_end+0x14>
800019a4:	02 30       	cp.w	r0,r1
800019a6:	c0 62       	brcc	800019b2 <idata_end>
800019a8:	48 d2       	lddpc	r2,800019dc <udata_end+0x18>

800019aa <idata_loop>:
800019aa:	05 04       	ld.w	r4,r2++
800019ac:	00 a4       	st.w	r0++,r4
800019ae:	02 30       	cp.w	r0,r1
800019b0:	cf d3       	brcs	800019aa <idata_loop>

800019b2 <idata_end>:
800019b2:	48 c0       	lddpc	r0,800019e0 <udata_end+0x1c>
800019b4:	48 c1       	lddpc	r1,800019e4 <udata_end+0x20>
800019b6:	02 30       	cp.w	r0,r1
800019b8:	c0 62       	brcc	800019c4 <udata_end>
800019ba:	30 02       	mov	r2,0
800019bc:	30 03       	mov	r3,0

800019be <udata_loop>:
800019be:	00 a2       	st.w	r0++,r2
800019c0:	02 30       	cp.w	r0,r1
800019c2:	cf e3       	brcs	800019be <udata_loop>

800019c4 <udata_end>:
800019c4:	48 9f       	lddpc	pc,800019e8 <udata_end+0x24>
800019c6:	00 00       	add	r0,r0
800019c8:	00 01       	add	r1,r0
800019ca:	00 00       	add	r0,r0
800019cc:	00 00       	add	r0,r0
800019ce:	f0 00       	*unknown*
800019d0:	80 00       	ld.sh	r0,r0[0x0]
800019d2:	22 00       	sub	r0,32
800019d4:	00 00       	add	r0,r0
800019d6:	00 08       	add	r8,r0
800019d8:	00 00       	add	r0,r0
800019da:	05 18       	ld.sh	r8,r2++
800019dc:	80 00       	ld.sh	r0,r0[0x0]
800019de:	26 88       	sub	r8,104
800019e0:	00 00       	add	r0,r0
800019e2:	05 18       	ld.sh	r8,r2++
800019e4:	00 00       	add	r0,r0
800019e6:	06 e8       	st.h	--r3,r8
800019e8:	80 00       	ld.sh	r0,r0[0x0]
800019ea:	06 a4       	st.w	r3++,r4

800019ec <calloc>:
800019ec:	d4 01       	pushm	lr
800019ee:	48 48       	lddpc	r8,800019fc <calloc+0x10>
800019f0:	16 9a       	mov	r10,r11
800019f2:	18 9b       	mov	r11,r12
800019f4:	70 0c       	ld.w	r12,r8[0x0]
800019f6:	f0 1f 00 03 	mcall	80001a00 <calloc+0x14>
800019fa:	d8 02       	popm	pc
800019fc:	00 00       	add	r0,r0
800019fe:	01 00       	ld.w	r0,r0++
80001a00:	80 00       	ld.sh	r0,r0[0x0]
80001a02:	1a 04       	add	r4,sp

80001a04 <_calloc_r>:
80001a04:	d4 21       	pushm	r4-r7,lr
80001a06:	f4 0b 02 4b 	mul	r11,r10,r11
80001a0a:	f0 1f 00 15 	mcall	80001a5c <_calloc_r+0x58>
80001a0e:	18 97       	mov	r7,r12
80001a10:	c2 30       	breq	80001a56 <_calloc_r+0x52>
80001a12:	f8 fa ff fc 	ld.w	r10,r12[-4]
80001a16:	e0 1a ff fc 	andl	r10,0xfffc
80001a1a:	20 4a       	sub	r10,4
80001a1c:	e0 4a 00 24 	cp.w	r10,36
80001a20:	e0 8b 00 18 	brhi	80001a50 <_calloc_r+0x4c>
80001a24:	18 98       	mov	r8,r12
80001a26:	59 3a       	cp.w	r10,19
80001a28:	e0 88 00 0f 	brls	80001a46 <_calloc_r+0x42>
80001a2c:	30 09       	mov	r9,0
80001a2e:	10 a9       	st.w	r8++,r9
80001a30:	10 a9       	st.w	r8++,r9
80001a32:	59 ba       	cp.w	r10,27
80001a34:	e0 88 00 09 	brls	80001a46 <_calloc_r+0x42>
80001a38:	10 a9       	st.w	r8++,r9
80001a3a:	10 a9       	st.w	r8++,r9
80001a3c:	e0 4a 00 24 	cp.w	r10,36
80001a40:	c0 31       	brne	80001a46 <_calloc_r+0x42>
80001a42:	10 a9       	st.w	r8++,r9
80001a44:	10 a9       	st.w	r8++,r9
80001a46:	30 09       	mov	r9,0
80001a48:	10 a9       	st.w	r8++,r9
80001a4a:	91 19       	st.w	r8[0x4],r9
80001a4c:	91 09       	st.w	r8[0x0],r9
80001a4e:	c0 48       	rjmp	80001a56 <_calloc_r+0x52>
80001a50:	30 0b       	mov	r11,0
80001a52:	f0 1f 00 04 	mcall	80001a60 <_calloc_r+0x5c>
80001a56:	0e 9c       	mov	r12,r7
80001a58:	d8 22       	popm	r4-r7,pc
80001a5a:	00 00       	add	r0,r0
80001a5c:	80 00       	ld.sh	r0,r0[0x0]
80001a5e:	1a 64       	and	r4,sp
80001a60:	80 00       	ld.sh	r0,r0[0x0]
80001a62:	1e b4       	st.h	pc++,r4

80001a64 <_malloc_r>:
80001a64:	d4 31       	pushm	r0-r7,lr
80001a66:	f6 c8 ff f5 	sub	r8,r11,-11
80001a6a:	18 95       	mov	r5,r12
80001a6c:	10 97       	mov	r7,r8
80001a6e:	e0 17 ff f8 	andl	r7,0xfff8
80001a72:	59 68       	cp.w	r8,22
80001a74:	f9 b7 08 10 	movls	r7,16
80001a78:	16 37       	cp.w	r7,r11
80001a7a:	5f 38       	srlo	r8
80001a7c:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001a80:	c0 50       	breq	80001a8a <_malloc_r+0x26>
80001a82:	30 c8       	mov	r8,12
80001a84:	99 38       	st.w	r12[0xc],r8
80001a86:	e0 8f 01 f3 	bral	80001e6c <_malloc_r+0x408>
80001a8a:	f0 1f 00 50 	mcall	80001bc8 <_malloc_r+0x164>
80001a8e:	e0 47 01 f7 	cp.w	r7,503
80001a92:	e0 8b 00 1c 	brhi	80001aca <_malloc_r+0x66>
80001a96:	ee 03 16 03 	lsr	r3,r7,0x3
80001a9a:	4c d8       	lddpc	r8,80001bcc <_malloc_r+0x168>
80001a9c:	f0 03 00 38 	add	r8,r8,r3<<0x3
80001aa0:	70 36       	ld.w	r6,r8[0xc]
80001aa2:	10 36       	cp.w	r6,r8
80001aa4:	c0 61       	brne	80001ab0 <_malloc_r+0x4c>
80001aa6:	ec c8 ff f8 	sub	r8,r6,-8
80001aaa:	70 36       	ld.w	r6,r8[0xc]
80001aac:	10 36       	cp.w	r6,r8
80001aae:	c0 c0       	breq	80001ac6 <_malloc_r+0x62>
80001ab0:	6c 18       	ld.w	r8,r6[0x4]
80001ab2:	e0 18 ff fc 	andl	r8,0xfffc
80001ab6:	6c 3a       	ld.w	r10,r6[0xc]
80001ab8:	ec 08 00 09 	add	r9,r6,r8
80001abc:	0a 9c       	mov	r12,r5
80001abe:	6c 28       	ld.w	r8,r6[0x8]
80001ac0:	95 28       	st.w	r10[0x8],r8
80001ac2:	91 3a       	st.w	r8[0xc],r10
80001ac4:	c4 68       	rjmp	80001b50 <_malloc_r+0xec>
80001ac6:	2f e3       	sub	r3,-2
80001ac8:	c4 c8       	rjmp	80001b60 <_malloc_r+0xfc>
80001aca:	ee 03 16 09 	lsr	r3,r7,0x9
80001ace:	c0 41       	brne	80001ad6 <_malloc_r+0x72>
80001ad0:	ee 03 16 03 	lsr	r3,r7,0x3
80001ad4:	c2 68       	rjmp	80001b20 <_malloc_r+0xbc>
80001ad6:	58 43       	cp.w	r3,4
80001ad8:	e0 8b 00 06 	brhi	80001ae4 <_malloc_r+0x80>
80001adc:	ee 03 16 06 	lsr	r3,r7,0x6
80001ae0:	2c 83       	sub	r3,-56
80001ae2:	c1 f8       	rjmp	80001b20 <_malloc_r+0xbc>
80001ae4:	59 43       	cp.w	r3,20
80001ae6:	e0 8b 00 04 	brhi	80001aee <_malloc_r+0x8a>
80001aea:	2a 53       	sub	r3,-91
80001aec:	c1 a8       	rjmp	80001b20 <_malloc_r+0xbc>
80001aee:	e0 43 00 54 	cp.w	r3,84
80001af2:	e0 8b 00 06 	brhi	80001afe <_malloc_r+0x9a>
80001af6:	ee 03 16 0c 	lsr	r3,r7,0xc
80001afa:	29 23       	sub	r3,-110
80001afc:	c1 28       	rjmp	80001b20 <_malloc_r+0xbc>
80001afe:	e0 43 01 54 	cp.w	r3,340
80001b02:	e0 8b 00 06 	brhi	80001b0e <_malloc_r+0xaa>
80001b06:	ee 03 16 0f 	lsr	r3,r7,0xf
80001b0a:	28 93       	sub	r3,-119
80001b0c:	c0 a8       	rjmp	80001b20 <_malloc_r+0xbc>
80001b0e:	e0 43 05 54 	cp.w	r3,1364
80001b12:	e0 88 00 04 	brls	80001b1a <_malloc_r+0xb6>
80001b16:	37 e3       	mov	r3,126
80001b18:	c0 48       	rjmp	80001b20 <_malloc_r+0xbc>
80001b1a:	ee 03 16 12 	lsr	r3,r7,0x12
80001b1e:	28 43       	sub	r3,-124
80001b20:	4a ba       	lddpc	r10,80001bcc <_malloc_r+0x168>
80001b22:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80001b26:	74 36       	ld.w	r6,r10[0xc]
80001b28:	c1 98       	rjmp	80001b5a <_malloc_r+0xf6>
80001b2a:	6c 19       	ld.w	r9,r6[0x4]
80001b2c:	e0 19 ff fc 	andl	r9,0xfffc
80001b30:	f2 07 01 0b 	sub	r11,r9,r7
80001b34:	58 fb       	cp.w	r11,15
80001b36:	e0 8a 00 04 	brle	80001b3e <_malloc_r+0xda>
80001b3a:	20 13       	sub	r3,1
80001b3c:	c1 18       	rjmp	80001b5e <_malloc_r+0xfa>
80001b3e:	6c 38       	ld.w	r8,r6[0xc]
80001b40:	58 0b       	cp.w	r11,0
80001b42:	c0 b5       	brlt	80001b58 <_malloc_r+0xf4>
80001b44:	6c 2a       	ld.w	r10,r6[0x8]
80001b46:	ec 09 00 09 	add	r9,r6,r9
80001b4a:	0a 9c       	mov	r12,r5
80001b4c:	91 2a       	st.w	r8[0x8],r10
80001b4e:	95 38       	st.w	r10[0xc],r8
80001b50:	72 18       	ld.w	r8,r9[0x4]
80001b52:	a1 a8       	sbr	r8,0x0
80001b54:	93 18       	st.w	r9[0x4],r8
80001b56:	cb c8       	rjmp	80001cce <_malloc_r+0x26a>
80001b58:	10 96       	mov	r6,r8
80001b5a:	14 36       	cp.w	r6,r10
80001b5c:	ce 71       	brne	80001b2a <_malloc_r+0xc6>
80001b5e:	2f f3       	sub	r3,-1
80001b60:	49 ba       	lddpc	r10,80001bcc <_malloc_r+0x168>
80001b62:	f4 cc ff f8 	sub	r12,r10,-8
80001b66:	78 26       	ld.w	r6,r12[0x8]
80001b68:	18 36       	cp.w	r6,r12
80001b6a:	c6 e0       	breq	80001c46 <_malloc_r+0x1e2>
80001b6c:	6c 19       	ld.w	r9,r6[0x4]
80001b6e:	e0 19 ff fc 	andl	r9,0xfffc
80001b72:	f2 07 01 08 	sub	r8,r9,r7
80001b76:	58 f8       	cp.w	r8,15
80001b78:	e0 89 00 90 	brgt	80001c98 <_malloc_r+0x234>
80001b7c:	99 3c       	st.w	r12[0xc],r12
80001b7e:	99 2c       	st.w	r12[0x8],r12
80001b80:	58 08       	cp.w	r8,0
80001b82:	c0 55       	brlt	80001b8c <_malloc_r+0x128>
80001b84:	ec 09 00 09 	add	r9,r6,r9
80001b88:	0a 9c       	mov	r12,r5
80001b8a:	ce 3b       	rjmp	80001b50 <_malloc_r+0xec>
80001b8c:	e0 49 01 ff 	cp.w	r9,511
80001b90:	e0 8b 00 13 	brhi	80001bb6 <_malloc_r+0x152>
80001b94:	a3 99       	lsr	r9,0x3
80001b96:	f4 09 00 38 	add	r8,r10,r9<<0x3
80001b9a:	70 2b       	ld.w	r11,r8[0x8]
80001b9c:	8d 38       	st.w	r6[0xc],r8
80001b9e:	8d 2b       	st.w	r6[0x8],r11
80001ba0:	97 36       	st.w	r11[0xc],r6
80001ba2:	91 26       	st.w	r8[0x8],r6
80001ba4:	a3 49       	asr	r9,0x2
80001ba6:	74 18       	ld.w	r8,r10[0x4]
80001ba8:	30 1b       	mov	r11,1
80001baa:	f6 09 09 49 	lsl	r9,r11,r9
80001bae:	f1 e9 10 09 	or	r9,r8,r9
80001bb2:	95 19       	st.w	r10[0x4],r9
80001bb4:	c4 98       	rjmp	80001c46 <_malloc_r+0x1e2>
80001bb6:	f2 0a 16 09 	lsr	r10,r9,0x9
80001bba:	58 4a       	cp.w	r10,4
80001bbc:	e0 8b 00 0a 	brhi	80001bd0 <_malloc_r+0x16c>
80001bc0:	f2 0a 16 06 	lsr	r10,r9,0x6
80001bc4:	2c 8a       	sub	r10,-56
80001bc6:	c2 38       	rjmp	80001c0c <_malloc_r+0x1a8>
80001bc8:	80 00       	ld.sh	r0,r0[0x0]
80001bca:	1e c2       	st.b	pc++,r2
80001bcc:	00 00       	add	r0,r0
80001bce:	01 04       	ld.w	r4,r0++
80001bd0:	59 4a       	cp.w	r10,20
80001bd2:	e0 8b 00 04 	brhi	80001bda <_malloc_r+0x176>
80001bd6:	2a 5a       	sub	r10,-91
80001bd8:	c1 a8       	rjmp	80001c0c <_malloc_r+0x1a8>
80001bda:	e0 4a 00 54 	cp.w	r10,84
80001bde:	e0 8b 00 06 	brhi	80001bea <_malloc_r+0x186>
80001be2:	f2 0a 16 0c 	lsr	r10,r9,0xc
80001be6:	29 2a       	sub	r10,-110
80001be8:	c1 28       	rjmp	80001c0c <_malloc_r+0x1a8>
80001bea:	e0 4a 01 54 	cp.w	r10,340
80001bee:	e0 8b 00 06 	brhi	80001bfa <_malloc_r+0x196>
80001bf2:	f2 0a 16 0f 	lsr	r10,r9,0xf
80001bf6:	28 9a       	sub	r10,-119
80001bf8:	c0 a8       	rjmp	80001c0c <_malloc_r+0x1a8>
80001bfa:	e0 4a 05 54 	cp.w	r10,1364
80001bfe:	e0 88 00 04 	brls	80001c06 <_malloc_r+0x1a2>
80001c02:	37 ea       	mov	r10,126
80001c04:	c0 48       	rjmp	80001c0c <_malloc_r+0x1a8>
80001c06:	f2 0a 16 12 	lsr	r10,r9,0x12
80001c0a:	28 4a       	sub	r10,-124
80001c0c:	4c 8b       	lddpc	r11,80001d2c <_malloc_r+0x2c8>
80001c0e:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80001c12:	68 28       	ld.w	r8,r4[0x8]
80001c14:	08 38       	cp.w	r8,r4
80001c16:	c0 e1       	brne	80001c32 <_malloc_r+0x1ce>
80001c18:	76 19       	ld.w	r9,r11[0x4]
80001c1a:	a3 4a       	asr	r10,0x2
80001c1c:	30 1e       	mov	lr,1
80001c1e:	fc 0a 09 4a 	lsl	r10,lr,r10
80001c22:	f3 ea 10 0a 	or	r10,r9,r10
80001c26:	10 99       	mov	r9,r8
80001c28:	97 1a       	st.w	r11[0x4],r10
80001c2a:	c0 a8       	rjmp	80001c3e <_malloc_r+0x1da>
80001c2c:	70 28       	ld.w	r8,r8[0x8]
80001c2e:	08 38       	cp.w	r8,r4
80001c30:	c0 60       	breq	80001c3c <_malloc_r+0x1d8>
80001c32:	70 1a       	ld.w	r10,r8[0x4]
80001c34:	e0 1a ff fc 	andl	r10,0xfffc
80001c38:	14 39       	cp.w	r9,r10
80001c3a:	cf 93       	brcs	80001c2c <_malloc_r+0x1c8>
80001c3c:	70 39       	ld.w	r9,r8[0xc]
80001c3e:	8d 39       	st.w	r6[0xc],r9
80001c40:	8d 28       	st.w	r6[0x8],r8
80001c42:	91 36       	st.w	r8[0xc],r6
80001c44:	93 26       	st.w	r9[0x8],r6
80001c46:	e6 08 14 02 	asr	r8,r3,0x2
80001c4a:	30 1b       	mov	r11,1
80001c4c:	4b 84       	lddpc	r4,80001d2c <_malloc_r+0x2c8>
80001c4e:	f6 08 09 4b 	lsl	r11,r11,r8
80001c52:	68 18       	ld.w	r8,r4[0x4]
80001c54:	10 3b       	cp.w	r11,r8
80001c56:	e0 8b 00 6f 	brhi	80001d34 <_malloc_r+0x2d0>
80001c5a:	f7 e8 00 09 	and	r9,r11,r8
80001c5e:	c0 b1       	brne	80001c74 <_malloc_r+0x210>
80001c60:	e0 13 ff fc 	andl	r3,0xfffc
80001c64:	a1 7b       	lsl	r11,0x1
80001c66:	2f c3       	sub	r3,-4
80001c68:	c0 38       	rjmp	80001c6e <_malloc_r+0x20a>
80001c6a:	2f c3       	sub	r3,-4
80001c6c:	a1 7b       	lsl	r11,0x1
80001c6e:	f7 e8 00 09 	and	r9,r11,r8
80001c72:	cf c0       	breq	80001c6a <_malloc_r+0x206>
80001c74:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001c78:	06 92       	mov	r2,r3
80001c7a:	1c 91       	mov	r1,lr
80001c7c:	62 36       	ld.w	r6,r1[0xc]
80001c7e:	c2 e8       	rjmp	80001cda <_malloc_r+0x276>
80001c80:	6c 1a       	ld.w	r10,r6[0x4]
80001c82:	e0 1a ff fc 	andl	r10,0xfffc
80001c86:	f4 07 01 08 	sub	r8,r10,r7
80001c8a:	58 f8       	cp.w	r8,15
80001c8c:	e0 8a 00 15 	brle	80001cb6 <_malloc_r+0x252>
80001c90:	6c 3a       	ld.w	r10,r6[0xc]
80001c92:	6c 29       	ld.w	r9,r6[0x8]
80001c94:	95 29       	st.w	r10[0x8],r9
80001c96:	93 3a       	st.w	r9[0xc],r10
80001c98:	0e 99       	mov	r9,r7
80001c9a:	ec 07 00 07 	add	r7,r6,r7
80001c9e:	a1 a9       	sbr	r9,0x0
80001ca0:	99 37       	st.w	r12[0xc],r7
80001ca2:	99 27       	st.w	r12[0x8],r7
80001ca4:	8d 19       	st.w	r6[0x4],r9
80001ca6:	ee 08 09 08 	st.w	r7[r8],r8
80001caa:	8f 2c       	st.w	r7[0x8],r12
80001cac:	8f 3c       	st.w	r7[0xc],r12
80001cae:	a1 a8       	sbr	r8,0x0
80001cb0:	0a 9c       	mov	r12,r5
80001cb2:	8f 18       	st.w	r7[0x4],r8
80001cb4:	c0 d8       	rjmp	80001cce <_malloc_r+0x26a>
80001cb6:	6c 39       	ld.w	r9,r6[0xc]
80001cb8:	58 08       	cp.w	r8,0
80001cba:	c0 f5       	brlt	80001cd8 <_malloc_r+0x274>
80001cbc:	ec 0a 00 0a 	add	r10,r6,r10
80001cc0:	74 18       	ld.w	r8,r10[0x4]
80001cc2:	a1 a8       	sbr	r8,0x0
80001cc4:	0a 9c       	mov	r12,r5
80001cc6:	95 18       	st.w	r10[0x4],r8
80001cc8:	6c 28       	ld.w	r8,r6[0x8]
80001cca:	93 28       	st.w	r9[0x8],r8
80001ccc:	91 39       	st.w	r8[0xc],r9
80001cce:	f0 1f 00 19 	mcall	80001d30 <_malloc_r+0x2cc>
80001cd2:	ec cc ff f8 	sub	r12,r6,-8
80001cd6:	d8 32       	popm	r0-r7,pc
80001cd8:	12 96       	mov	r6,r9
80001cda:	02 36       	cp.w	r6,r1
80001cdc:	cd 21       	brne	80001c80 <_malloc_r+0x21c>
80001cde:	2f f2       	sub	r2,-1
80001ce0:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001ce4:	c0 30       	breq	80001cea <_malloc_r+0x286>
80001ce6:	2f 81       	sub	r1,-8
80001ce8:	cc ab       	rjmp	80001c7c <_malloc_r+0x218>
80001cea:	1c 98       	mov	r8,lr
80001cec:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001cf0:	c0 81       	brne	80001d00 <_malloc_r+0x29c>
80001cf2:	68 19       	ld.w	r9,r4[0x4]
80001cf4:	f6 08 11 ff 	rsub	r8,r11,-1
80001cf8:	f3 e8 00 08 	and	r8,r9,r8
80001cfc:	89 18       	st.w	r4[0x4],r8
80001cfe:	c0 78       	rjmp	80001d0c <_malloc_r+0x2a8>
80001d00:	f0 c9 00 08 	sub	r9,r8,8
80001d04:	20 13       	sub	r3,1
80001d06:	70 08       	ld.w	r8,r8[0x0]
80001d08:	12 38       	cp.w	r8,r9
80001d0a:	cf 10       	breq	80001cec <_malloc_r+0x288>
80001d0c:	a1 7b       	lsl	r11,0x1
80001d0e:	68 18       	ld.w	r8,r4[0x4]
80001d10:	10 3b       	cp.w	r11,r8
80001d12:	e0 8b 00 11 	brhi	80001d34 <_malloc_r+0x2d0>
80001d16:	58 0b       	cp.w	r11,0
80001d18:	c0 e0       	breq	80001d34 <_malloc_r+0x2d0>
80001d1a:	04 93       	mov	r3,r2
80001d1c:	c0 38       	rjmp	80001d22 <_malloc_r+0x2be>
80001d1e:	2f c3       	sub	r3,-4
80001d20:	a1 7b       	lsl	r11,0x1
80001d22:	f7 e8 00 09 	and	r9,r11,r8
80001d26:	ca 71       	brne	80001c74 <_malloc_r+0x210>
80001d28:	cf bb       	rjmp	80001d1e <_malloc_r+0x2ba>
80001d2a:	00 00       	add	r0,r0
80001d2c:	00 00       	add	r0,r0
80001d2e:	01 04       	ld.w	r4,r0++
80001d30:	80 00       	ld.sh	r0,r0[0x0]
80001d32:	1e c4       	st.b	pc++,r4
80001d34:	68 23       	ld.w	r3,r4[0x8]
80001d36:	66 12       	ld.w	r2,r3[0x4]
80001d38:	e0 12 ff fc 	andl	r2,0xfffc
80001d3c:	0e 32       	cp.w	r2,r7
80001d3e:	5f 39       	srlo	r9
80001d40:	e4 07 01 08 	sub	r8,r2,r7
80001d44:	58 f8       	cp.w	r8,15
80001d46:	5f aa       	srle	r10
80001d48:	f5 e9 10 09 	or	r9,r10,r9
80001d4c:	e0 80 00 a2 	breq	80001e90 <_malloc_r+0x42c>
80001d50:	4c 88       	lddpc	r8,80001e70 <_malloc_r+0x40c>
80001d52:	70 01       	ld.w	r1,r8[0x0]
80001d54:	4c 88       	lddpc	r8,80001e74 <_malloc_r+0x410>
80001d56:	2f 01       	sub	r1,-16
80001d58:	70 08       	ld.w	r8,r8[0x0]
80001d5a:	0e 01       	add	r1,r7
80001d5c:	5b f8       	cp.w	r8,-1
80001d5e:	c0 40       	breq	80001d66 <_malloc_r+0x302>
80001d60:	28 11       	sub	r1,-127
80001d62:	e0 11 ff 80 	andl	r1,0xff80
80001d66:	02 9b       	mov	r11,r1
80001d68:	0a 9c       	mov	r12,r5
80001d6a:	f0 1f 00 44 	mcall	80001e78 <_malloc_r+0x414>
80001d6e:	18 96       	mov	r6,r12
80001d70:	5b fc       	cp.w	r12,-1
80001d72:	c6 e0       	breq	80001e4e <_malloc_r+0x3ea>
80001d74:	e6 02 00 08 	add	r8,r3,r2
80001d78:	10 3c       	cp.w	r12,r8
80001d7a:	c0 32       	brcc	80001d80 <_malloc_r+0x31c>
80001d7c:	08 33       	cp.w	r3,r4
80001d7e:	c6 81       	brne	80001e4e <_malloc_r+0x3ea>
80001d80:	4b fa       	lddpc	r10,80001e7c <_malloc_r+0x418>
80001d82:	74 09       	ld.w	r9,r10[0x0]
80001d84:	e2 09 00 09 	add	r9,r1,r9
80001d88:	95 09       	st.w	r10[0x0],r9
80001d8a:	10 36       	cp.w	r6,r8
80001d8c:	c0 a1       	brne	80001da0 <_malloc_r+0x33c>
80001d8e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80001d92:	c0 71       	brne	80001da0 <_malloc_r+0x33c>
80001d94:	e2 02 00 02 	add	r2,r1,r2
80001d98:	68 28       	ld.w	r8,r4[0x8]
80001d9a:	a1 a2       	sbr	r2,0x0
80001d9c:	91 12       	st.w	r8[0x4],r2
80001d9e:	c4 c8       	rjmp	80001e36 <_malloc_r+0x3d2>
80001da0:	4b 5a       	lddpc	r10,80001e74 <_malloc_r+0x410>
80001da2:	74 0b       	ld.w	r11,r10[0x0]
80001da4:	5b fb       	cp.w	r11,-1
80001da6:	c0 31       	brne	80001dac <_malloc_r+0x348>
80001da8:	95 06       	st.w	r10[0x0],r6
80001daa:	c0 68       	rjmp	80001db6 <_malloc_r+0x352>
80001dac:	ec 09 00 09 	add	r9,r6,r9
80001db0:	4b 3a       	lddpc	r10,80001e7c <_malloc_r+0x418>
80001db2:	10 19       	sub	r9,r8
80001db4:	95 09       	st.w	r10[0x0],r9
80001db6:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80001dba:	f0 09 11 08 	rsub	r9,r8,8
80001dbe:	58 08       	cp.w	r8,0
80001dc0:	f2 08 17 10 	movne	r8,r9
80001dc4:	ed d8 e1 06 	addne	r6,r6,r8
80001dc8:	28 08       	sub	r8,-128
80001dca:	ec 01 00 01 	add	r1,r6,r1
80001dce:	0a 9c       	mov	r12,r5
80001dd0:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80001dd4:	f0 01 01 01 	sub	r1,r8,r1
80001dd8:	02 9b       	mov	r11,r1
80001dda:	f0 1f 00 28 	mcall	80001e78 <_malloc_r+0x414>
80001dde:	4a 88       	lddpc	r8,80001e7c <_malloc_r+0x418>
80001de0:	5b fc       	cp.w	r12,-1
80001de2:	ec 0c 17 00 	moveq	r12,r6
80001de6:	f9 b1 00 00 	moveq	r1,0
80001dea:	70 09       	ld.w	r9,r8[0x0]
80001dec:	0c 1c       	sub	r12,r6
80001dee:	89 26       	st.w	r4[0x8],r6
80001df0:	02 0c       	add	r12,r1
80001df2:	12 01       	add	r1,r9
80001df4:	a1 ac       	sbr	r12,0x0
80001df6:	91 01       	st.w	r8[0x0],r1
80001df8:	8d 1c       	st.w	r6[0x4],r12
80001dfa:	08 33       	cp.w	r3,r4
80001dfc:	c1 d0       	breq	80001e36 <_malloc_r+0x3d2>
80001dfe:	58 f2       	cp.w	r2,15
80001e00:	e0 8b 00 05 	brhi	80001e0a <_malloc_r+0x3a6>
80001e04:	30 18       	mov	r8,1
80001e06:	8d 18       	st.w	r6[0x4],r8
80001e08:	c2 38       	rjmp	80001e4e <_malloc_r+0x3ea>
80001e0a:	30 59       	mov	r9,5
80001e0c:	20 c2       	sub	r2,12
80001e0e:	e0 12 ff f8 	andl	r2,0xfff8
80001e12:	e6 02 00 08 	add	r8,r3,r2
80001e16:	91 29       	st.w	r8[0x8],r9
80001e18:	91 19       	st.w	r8[0x4],r9
80001e1a:	66 18       	ld.w	r8,r3[0x4]
80001e1c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001e20:	e5 e8 10 08 	or	r8,r2,r8
80001e24:	87 18       	st.w	r3[0x4],r8
80001e26:	58 f2       	cp.w	r2,15
80001e28:	e0 88 00 07 	brls	80001e36 <_malloc_r+0x3d2>
80001e2c:	e6 cb ff f8 	sub	r11,r3,-8
80001e30:	0a 9c       	mov	r12,r5
80001e32:	f0 1f 00 14 	mcall	80001e80 <_malloc_r+0x41c>
80001e36:	49 49       	lddpc	r9,80001e84 <_malloc_r+0x420>
80001e38:	72 0a       	ld.w	r10,r9[0x0]
80001e3a:	49 18       	lddpc	r8,80001e7c <_malloc_r+0x418>
80001e3c:	70 08       	ld.w	r8,r8[0x0]
80001e3e:	14 38       	cp.w	r8,r10
80001e40:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001e44:	49 19       	lddpc	r9,80001e88 <_malloc_r+0x424>
80001e46:	72 0a       	ld.w	r10,r9[0x0]
80001e48:	14 38       	cp.w	r8,r10
80001e4a:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001e4e:	68 28       	ld.w	r8,r4[0x8]
80001e50:	70 18       	ld.w	r8,r8[0x4]
80001e52:	e0 18 ff fc 	andl	r8,0xfffc
80001e56:	0e 38       	cp.w	r8,r7
80001e58:	5f 39       	srlo	r9
80001e5a:	0e 18       	sub	r8,r7
80001e5c:	58 f8       	cp.w	r8,15
80001e5e:	5f aa       	srle	r10
80001e60:	f5 e9 10 09 	or	r9,r10,r9
80001e64:	c1 60       	breq	80001e90 <_malloc_r+0x42c>
80001e66:	0a 9c       	mov	r12,r5
80001e68:	f0 1f 00 09 	mcall	80001e8c <_malloc_r+0x428>
80001e6c:	d8 3a       	popm	r0-r7,pc,r12=0
80001e6e:	00 00       	add	r0,r0
80001e70:	00 00       	add	r0,r0
80001e72:	05 a0       	ld.ub	r0,r2[0x2]
80001e74:	00 00       	add	r0,r0
80001e76:	05 10       	ld.sh	r0,r2++
80001e78:	80 00       	ld.sh	r0,r0[0x0]
80001e7a:	1e c8       	st.b	pc++,r8
80001e7c:	00 00       	add	r0,r0
80001e7e:	05 a4       	ld.ub	r4,r2[0x2]
80001e80:	80 00       	ld.sh	r0,r0[0x0]
80001e82:	1f e4       	ld.ub	r4,pc[0x6]
80001e84:	00 00       	add	r0,r0
80001e86:	05 9c       	ld.ub	r12,r2[0x1]
80001e88:	00 00       	add	r0,r0
80001e8a:	05 98       	ld.ub	r8,r2[0x1]
80001e8c:	80 00       	ld.sh	r0,r0[0x0]
80001e8e:	1e c4       	st.b	pc++,r4
80001e90:	68 26       	ld.w	r6,r4[0x8]
80001e92:	a1 a8       	sbr	r8,0x0
80001e94:	0e 99       	mov	r9,r7
80001e96:	a1 a9       	sbr	r9,0x0
80001e98:	8d 19       	st.w	r6[0x4],r9
80001e9a:	ec 07 00 07 	add	r7,r6,r7
80001e9e:	0a 9c       	mov	r12,r5
80001ea0:	89 27       	st.w	r4[0x8],r7
80001ea2:	8f 18       	st.w	r7[0x4],r8
80001ea4:	f0 1f 00 03 	mcall	80001eb0 <_malloc_r+0x44c>
80001ea8:	ec cc ff f8 	sub	r12,r6,-8
80001eac:	d8 32       	popm	r0-r7,pc
80001eae:	00 00       	add	r0,r0
80001eb0:	80 00       	ld.sh	r0,r0[0x0]
80001eb2:	1e c4       	st.b	pc++,r4

80001eb4 <memset>:
80001eb4:	18 98       	mov	r8,r12
80001eb6:	c0 38       	rjmp	80001ebc <memset+0x8>
80001eb8:	10 cb       	st.b	r8++,r11
80001eba:	20 1a       	sub	r10,1
80001ebc:	58 0a       	cp.w	r10,0
80001ebe:	cf d1       	brne	80001eb8 <memset+0x4>
80001ec0:	5e fc       	retal	r12

80001ec2 <__malloc_lock>:
80001ec2:	5e fc       	retal	r12

80001ec4 <__malloc_unlock>:
80001ec4:	5e fc       	retal	r12
80001ec6:	d7 03       	nop

80001ec8 <_sbrk_r>:
80001ec8:	d4 21       	pushm	r4-r7,lr
80001eca:	30 08       	mov	r8,0
80001ecc:	18 97       	mov	r7,r12
80001ece:	48 76       	lddpc	r6,80001ee8 <_sbrk_r+0x20>
80001ed0:	16 9c       	mov	r12,r11
80001ed2:	8d 08       	st.w	r6[0x0],r8
80001ed4:	f0 1f 00 06 	mcall	80001eec <_sbrk_r+0x24>
80001ed8:	5b fc       	cp.w	r12,-1
80001eda:	c0 51       	brne	80001ee4 <_sbrk_r+0x1c>
80001edc:	6c 08       	ld.w	r8,r6[0x0]
80001ede:	58 08       	cp.w	r8,0
80001ee0:	ef f8 1a 03 	st.wne	r7[0xc],r8
80001ee4:	d8 22       	popm	r4-r7,pc
80001ee6:	00 00       	add	r0,r0
80001ee8:	00 00       	add	r0,r0
80001eea:	06 e0       	st.h	--r3,r0
80001eec:	80 00       	ld.sh	r0,r0[0x0]
80001eee:	1e f0       	st.b	--pc,r0

80001ef0 <_sbrk>:
80001ef0:	d4 01       	pushm	lr
80001ef2:	48 c8       	lddpc	r8,80001f20 <_sbrk+0x30>
80001ef4:	70 09       	ld.w	r9,r8[0x0]
80001ef6:	58 09       	cp.w	r9,0
80001ef8:	c0 31       	brne	80001efe <_sbrk+0xe>
80001efa:	48 b9       	lddpc	r9,80001f24 <_sbrk+0x34>
80001efc:	91 09       	st.w	r8[0x0],r9
80001efe:	48 99       	lddpc	r9,80001f20 <_sbrk+0x30>
80001f00:	48 aa       	lddpc	r10,80001f28 <_sbrk+0x38>
80001f02:	72 08       	ld.w	r8,r9[0x0]
80001f04:	f0 0c 00 0c 	add	r12,r8,r12
80001f08:	14 3c       	cp.w	r12,r10
80001f0a:	e0 8b 00 04 	brhi	80001f12 <_sbrk+0x22>
80001f0e:	93 0c       	st.w	r9[0x0],r12
80001f10:	c0 68       	rjmp	80001f1c <_sbrk+0x2c>
80001f12:	f0 1f 00 07 	mcall	80001f2c <_sbrk+0x3c>
80001f16:	30 c8       	mov	r8,12
80001f18:	99 08       	st.w	r12[0x0],r8
80001f1a:	3f f8       	mov	r8,-1
80001f1c:	10 9c       	mov	r12,r8
80001f1e:	d8 02       	popm	pc
80001f20:	00 00       	add	r0,r0
80001f22:	05 cc       	ld.ub	r12,r2[0x4]
80001f24:	00 00       	add	r0,r0
80001f26:	06 e8       	st.h	--r3,r8
80001f28:	00 00       	add	r0,r0
80001f2a:	e0 00       	*unknown*
80001f2c:	80 00       	ld.sh	r0,r0[0x0]
80001f2e:	1f 30       	ld.ub	r0,pc++

80001f30 <__errno>:
80001f30:	48 28       	lddpc	r8,80001f38 <__errno+0x8>
80001f32:	70 0c       	ld.w	r12,r8[0x0]
80001f34:	2f 4c       	sub	r12,-12
80001f36:	5e fc       	retal	r12
80001f38:	00 00       	add	r0,r0
80001f3a:	01 00       	ld.w	r0,r0++

80001f3c <_malloc_trim_r>:
80001f3c:	d4 21       	pushm	r4-r7,lr
80001f3e:	16 95       	mov	r5,r11
80001f40:	18 97       	mov	r7,r12
80001f42:	f0 1f 00 23 	mcall	80001fcc <_malloc_trim_r+0x90>
80001f46:	4a 34       	lddpc	r4,80001fd0 <_malloc_trim_r+0x94>
80001f48:	68 28       	ld.w	r8,r4[0x8]
80001f4a:	70 16       	ld.w	r6,r8[0x4]
80001f4c:	e0 16 ff fc 	andl	r6,0xfffc
80001f50:	ec c8 ff 91 	sub	r8,r6,-111
80001f54:	f0 05 01 05 	sub	r5,r8,r5
80001f58:	e0 15 ff 80 	andl	r5,0xff80
80001f5c:	ea c5 00 80 	sub	r5,r5,128
80001f60:	e0 45 00 7f 	cp.w	r5,127
80001f64:	e0 8a 00 23 	brle	80001faa <_malloc_trim_r+0x6e>
80001f68:	30 0b       	mov	r11,0
80001f6a:	0e 9c       	mov	r12,r7
80001f6c:	f0 1f 00 1a 	mcall	80001fd4 <_malloc_trim_r+0x98>
80001f70:	68 28       	ld.w	r8,r4[0x8]
80001f72:	0c 08       	add	r8,r6
80001f74:	10 3c       	cp.w	r12,r8
80001f76:	c1 a1       	brne	80001faa <_malloc_trim_r+0x6e>
80001f78:	ea 0b 11 00 	rsub	r11,r5,0
80001f7c:	0e 9c       	mov	r12,r7
80001f7e:	f0 1f 00 16 	mcall	80001fd4 <_malloc_trim_r+0x98>
80001f82:	5b fc       	cp.w	r12,-1
80001f84:	c1 71       	brne	80001fb2 <_malloc_trim_r+0x76>
80001f86:	30 0b       	mov	r11,0
80001f88:	0e 9c       	mov	r12,r7
80001f8a:	f0 1f 00 13 	mcall	80001fd4 <_malloc_trim_r+0x98>
80001f8e:	68 28       	ld.w	r8,r4[0x8]
80001f90:	f8 08 01 09 	sub	r9,r12,r8
80001f94:	58 f9       	cp.w	r9,15
80001f96:	e0 8a 00 0a 	brle	80001faa <_malloc_trim_r+0x6e>
80001f9a:	a1 a9       	sbr	r9,0x0
80001f9c:	91 19       	st.w	r8[0x4],r9
80001f9e:	48 f8       	lddpc	r8,80001fd8 <_malloc_trim_r+0x9c>
80001fa0:	70 09       	ld.w	r9,r8[0x0]
80001fa2:	48 f8       	lddpc	r8,80001fdc <_malloc_trim_r+0xa0>
80001fa4:	f8 09 01 09 	sub	r9,r12,r9
80001fa8:	91 09       	st.w	r8[0x0],r9
80001faa:	0e 9c       	mov	r12,r7
80001fac:	f0 1f 00 0d 	mcall	80001fe0 <_malloc_trim_r+0xa4>
80001fb0:	d8 2a       	popm	r4-r7,pc,r12=0
80001fb2:	68 28       	ld.w	r8,r4[0x8]
80001fb4:	0a 16       	sub	r6,r5
80001fb6:	a1 a6       	sbr	r6,0x0
80001fb8:	91 16       	st.w	r8[0x4],r6
80001fba:	48 98       	lddpc	r8,80001fdc <_malloc_trim_r+0xa0>
80001fbc:	70 09       	ld.w	r9,r8[0x0]
80001fbe:	0a 19       	sub	r9,r5
80001fc0:	0e 9c       	mov	r12,r7
80001fc2:	91 09       	st.w	r8[0x0],r9
80001fc4:	f0 1f 00 07 	mcall	80001fe0 <_malloc_trim_r+0xa4>
80001fc8:	da 2a       	popm	r4-r7,pc,r12=1
80001fca:	00 00       	add	r0,r0
80001fcc:	80 00       	ld.sh	r0,r0[0x0]
80001fce:	1e c2       	st.b	pc++,r2
80001fd0:	00 00       	add	r0,r0
80001fd2:	01 04       	ld.w	r4,r0++
80001fd4:	80 00       	ld.sh	r0,r0[0x0]
80001fd6:	1e c8       	st.b	pc++,r8
80001fd8:	00 00       	add	r0,r0
80001fda:	05 10       	ld.sh	r0,r2++
80001fdc:	00 00       	add	r0,r0
80001fde:	05 a4       	ld.ub	r4,r2[0x2]
80001fe0:	80 00       	ld.sh	r0,r0[0x0]
80001fe2:	1e c4       	st.b	pc++,r4

80001fe4 <_free_r>:
80001fe4:	d4 21       	pushm	r4-r7,lr
80001fe6:	16 96       	mov	r6,r11
80001fe8:	18 97       	mov	r7,r12
80001fea:	58 0b       	cp.w	r11,0
80001fec:	e0 80 00 c8 	breq	8000217c <_free_r+0x198>
80001ff0:	f0 1f 00 4c 	mcall	80002120 <_free_r+0x13c>
80001ff4:	20 86       	sub	r6,8
80001ff6:	4c ca       	lddpc	r10,80002124 <_free_r+0x140>
80001ff8:	6c 18       	ld.w	r8,r6[0x4]
80001ffa:	74 2e       	ld.w	lr,r10[0x8]
80001ffc:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80002000:	a1 c8       	cbr	r8,0x0
80002002:	ec 08 00 09 	add	r9,r6,r8
80002006:	72 1b       	ld.w	r11,r9[0x4]
80002008:	e0 1b ff fc 	andl	r11,0xfffc
8000200c:	1c 39       	cp.w	r9,lr
8000200e:	c1 d1       	brne	80002048 <_free_r+0x64>
80002010:	f6 08 00 08 	add	r8,r11,r8
80002014:	58 0c       	cp.w	r12,0
80002016:	c0 81       	brne	80002026 <_free_r+0x42>
80002018:	6c 09       	ld.w	r9,r6[0x0]
8000201a:	12 16       	sub	r6,r9
8000201c:	12 08       	add	r8,r9
8000201e:	6c 3b       	ld.w	r11,r6[0xc]
80002020:	6c 29       	ld.w	r9,r6[0x8]
80002022:	97 29       	st.w	r11[0x8],r9
80002024:	93 3b       	st.w	r9[0xc],r11
80002026:	10 99       	mov	r9,r8
80002028:	95 26       	st.w	r10[0x8],r6
8000202a:	a1 a9       	sbr	r9,0x0
8000202c:	8d 19       	st.w	r6[0x4],r9
8000202e:	4b f9       	lddpc	r9,80002128 <_free_r+0x144>
80002030:	72 09       	ld.w	r9,r9[0x0]
80002032:	12 38       	cp.w	r8,r9
80002034:	c0 63       	brcs	80002040 <_free_r+0x5c>
80002036:	4b e8       	lddpc	r8,8000212c <_free_r+0x148>
80002038:	0e 9c       	mov	r12,r7
8000203a:	70 0b       	ld.w	r11,r8[0x0]
8000203c:	f0 1f 00 3d 	mcall	80002130 <_free_r+0x14c>
80002040:	0e 9c       	mov	r12,r7
80002042:	f0 1f 00 3d 	mcall	80002134 <_free_r+0x150>
80002046:	d8 22       	popm	r4-r7,pc
80002048:	93 1b       	st.w	r9[0x4],r11
8000204a:	58 0c       	cp.w	r12,0
8000204c:	c0 30       	breq	80002052 <_free_r+0x6e>
8000204e:	30 0c       	mov	r12,0
80002050:	c1 08       	rjmp	80002070 <_free_r+0x8c>
80002052:	6c 0e       	ld.w	lr,r6[0x0]
80002054:	f4 c5 ff f8 	sub	r5,r10,-8
80002058:	1c 16       	sub	r6,lr
8000205a:	1c 08       	add	r8,lr
8000205c:	6c 2e       	ld.w	lr,r6[0x8]
8000205e:	0a 3e       	cp.w	lr,r5
80002060:	f9 bc 00 01 	moveq	r12,1
80002064:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80002068:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000206c:	fd f5 1a 03 	st.wne	lr[0xc],r5
80002070:	f2 0b 00 0e 	add	lr,r9,r11
80002074:	7c 1e       	ld.w	lr,lr[0x4]
80002076:	ed be 00 00 	bld	lr,0x0
8000207a:	c1 30       	breq	800020a0 <_free_r+0xbc>
8000207c:	16 08       	add	r8,r11
8000207e:	58 0c       	cp.w	r12,0
80002080:	c0 c1       	brne	80002098 <_free_r+0xb4>
80002082:	4a 9e       	lddpc	lr,80002124 <_free_r+0x140>
80002084:	72 2b       	ld.w	r11,r9[0x8]
80002086:	2f 8e       	sub	lr,-8
80002088:	1c 3b       	cp.w	r11,lr
8000208a:	c0 71       	brne	80002098 <_free_r+0xb4>
8000208c:	97 36       	st.w	r11[0xc],r6
8000208e:	97 26       	st.w	r11[0x8],r6
80002090:	8d 2b       	st.w	r6[0x8],r11
80002092:	8d 3b       	st.w	r6[0xc],r11
80002094:	30 1c       	mov	r12,1
80002096:	c0 58       	rjmp	800020a0 <_free_r+0xbc>
80002098:	72 2b       	ld.w	r11,r9[0x8]
8000209a:	72 39       	ld.w	r9,r9[0xc]
8000209c:	93 2b       	st.w	r9[0x8],r11
8000209e:	97 39       	st.w	r11[0xc],r9
800020a0:	10 99       	mov	r9,r8
800020a2:	ec 08 09 08 	st.w	r6[r8],r8
800020a6:	a1 a9       	sbr	r9,0x0
800020a8:	8d 19       	st.w	r6[0x4],r9
800020aa:	58 0c       	cp.w	r12,0
800020ac:	c6 51       	brne	80002176 <_free_r+0x192>
800020ae:	e0 48 01 ff 	cp.w	r8,511
800020b2:	e0 8b 00 13 	brhi	800020d8 <_free_r+0xf4>
800020b6:	a3 98       	lsr	r8,0x3
800020b8:	f4 08 00 39 	add	r9,r10,r8<<0x3
800020bc:	72 2b       	ld.w	r11,r9[0x8]
800020be:	8d 39       	st.w	r6[0xc],r9
800020c0:	8d 2b       	st.w	r6[0x8],r11
800020c2:	97 36       	st.w	r11[0xc],r6
800020c4:	93 26       	st.w	r9[0x8],r6
800020c6:	a3 48       	asr	r8,0x2
800020c8:	74 19       	ld.w	r9,r10[0x4]
800020ca:	30 1b       	mov	r11,1
800020cc:	f6 08 09 48 	lsl	r8,r11,r8
800020d0:	f3 e8 10 08 	or	r8,r9,r8
800020d4:	95 18       	st.w	r10[0x4],r8
800020d6:	c5 08       	rjmp	80002176 <_free_r+0x192>
800020d8:	f0 0b 16 09 	lsr	r11,r8,0x9
800020dc:	58 4b       	cp.w	r11,4
800020de:	e0 8b 00 06 	brhi	800020ea <_free_r+0x106>
800020e2:	f0 0b 16 06 	lsr	r11,r8,0x6
800020e6:	2c 8b       	sub	r11,-56
800020e8:	c2 b8       	rjmp	8000213e <_free_r+0x15a>
800020ea:	59 4b       	cp.w	r11,20
800020ec:	e0 8b 00 04 	brhi	800020f4 <_free_r+0x110>
800020f0:	2a 5b       	sub	r11,-91
800020f2:	c2 68       	rjmp	8000213e <_free_r+0x15a>
800020f4:	e0 4b 00 54 	cp.w	r11,84
800020f8:	e0 8b 00 06 	brhi	80002104 <_free_r+0x120>
800020fc:	f0 0b 16 0c 	lsr	r11,r8,0xc
80002100:	29 2b       	sub	r11,-110
80002102:	c1 e8       	rjmp	8000213e <_free_r+0x15a>
80002104:	e0 4b 01 54 	cp.w	r11,340
80002108:	e0 8b 00 06 	brhi	80002114 <_free_r+0x130>
8000210c:	f0 0b 16 0f 	lsr	r11,r8,0xf
80002110:	28 9b       	sub	r11,-119
80002112:	c1 68       	rjmp	8000213e <_free_r+0x15a>
80002114:	e0 4b 05 54 	cp.w	r11,1364
80002118:	e0 88 00 10 	brls	80002138 <_free_r+0x154>
8000211c:	37 eb       	mov	r11,126
8000211e:	c1 08       	rjmp	8000213e <_free_r+0x15a>
80002120:	80 00       	ld.sh	r0,r0[0x0]
80002122:	1e c2       	st.b	pc++,r2
80002124:	00 00       	add	r0,r0
80002126:	01 04       	ld.w	r4,r0++
80002128:	00 00       	add	r0,r0
8000212a:	05 0c       	ld.w	r12,r2++
8000212c:	00 00       	add	r0,r0
8000212e:	05 a0       	ld.ub	r0,r2[0x2]
80002130:	80 00       	ld.sh	r0,r0[0x0]
80002132:	1f 3c       	ld.ub	r12,pc++
80002134:	80 00       	ld.sh	r0,r0[0x0]
80002136:	1e c4       	st.b	pc++,r4
80002138:	f0 0b 16 12 	lsr	r11,r8,0x12
8000213c:	28 4b       	sub	r11,-124
8000213e:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80002142:	78 29       	ld.w	r9,r12[0x8]
80002144:	18 39       	cp.w	r9,r12
80002146:	c0 e1       	brne	80002162 <_free_r+0x17e>
80002148:	74 18       	ld.w	r8,r10[0x4]
8000214a:	a3 4b       	asr	r11,0x2
8000214c:	30 1c       	mov	r12,1
8000214e:	f8 0b 09 4b 	lsl	r11,r12,r11
80002152:	f1 eb 10 0b 	or	r11,r8,r11
80002156:	12 98       	mov	r8,r9
80002158:	95 1b       	st.w	r10[0x4],r11
8000215a:	c0 a8       	rjmp	8000216e <_free_r+0x18a>
8000215c:	72 29       	ld.w	r9,r9[0x8]
8000215e:	18 39       	cp.w	r9,r12
80002160:	c0 60       	breq	8000216c <_free_r+0x188>
80002162:	72 1a       	ld.w	r10,r9[0x4]
80002164:	e0 1a ff fc 	andl	r10,0xfffc
80002168:	14 38       	cp.w	r8,r10
8000216a:	cf 93       	brcs	8000215c <_free_r+0x178>
8000216c:	72 38       	ld.w	r8,r9[0xc]
8000216e:	8d 38       	st.w	r6[0xc],r8
80002170:	8d 29       	st.w	r6[0x8],r9
80002172:	93 36       	st.w	r9[0xc],r6
80002174:	91 26       	st.w	r8[0x8],r6
80002176:	0e 9c       	mov	r12,r7
80002178:	f0 1f 00 02 	mcall	80002180 <_free_r+0x19c>
8000217c:	d8 22       	popm	r4-r7,pc
8000217e:	00 00       	add	r0,r0
80002180:	80 00       	ld.sh	r0,r0[0x0]
80002182:	1e c4       	st.b	pc++,r4

Disassembly of section .exception:

80002200 <_evba>:
	...

80002228 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80002228:	c7 a8       	rjmp	8000231c <privilegedCalls>
	...

80002300 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80002300:	1c 9f       	mov	pc,lr

80002302 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80002302:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80002306:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
8000230a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
8000230e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80002312:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80002314:	c0 31       	brne	8000231a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80002316:	4b 9c       	lddpc	r12,800023f8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80002318:	18 9f       	mov	pc,r12

8000231a <_int0_exit>:
_int0_exit:
	rete
8000231a:	d6 03       	rete

8000231c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
8000231c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
8000231e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80002320:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80002322:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80002324:	9b 3c       	st.w	sp[0xc],r12

80002326 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80002326:	4b 6c       	lddpc	r12,800023fc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80002328:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
8000232a:	c0 61       	brne	80002336 <priv_interruptenable>
	ld.w r12,sp[USERSR]
8000232c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
8000232e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80002330:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002332:	d3 02       	popm	r11-r12
	rete
80002334:	d6 03       	rete

80002336 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80002336:	4b 3c       	lddpc	r12,80002400 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80002338:	18 3b       	cp.w	r11,r12
	brne privexception
8000233a:	c0 61       	brne	80002346 <privexception>
	ld.w r12,sp[USERSR]
8000233c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
8000233e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80002340:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002342:	d3 02       	popm	r11-r12
	rete
80002344:	d6 03       	rete

80002346 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80002346:	c0 08       	rjmp	80002346 <privexception>

80002348 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80002348:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
8000234a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
8000234e:	4a ec       	lddpc	r12,80002404 <contextRestoreFromISR+0x4c>
	sub r11,r12
80002350:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80002352:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80002354:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80002358:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
8000235c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80002360:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80002362:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80002364:	1c 9f       	mov	pc,lr

80002366 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80002366:	d3 03       	ssrf	0x10
	mov pc,lr
80002368:	1c 9f       	mov	pc,lr

8000236a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
8000236a:	d5 03       	csrf	0x10
	mov pc,lr
8000236c:	1c 9f       	mov	pc,lr

8000236e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
8000236e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80002372:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80002374:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80002378:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
8000237c:	1c 9f       	mov	pc,lr

8000237e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000237e:	4a 3c       	lddpc	r12,80002408 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80002380:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80002382:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80002384:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80002386:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80002388:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
8000238a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
8000238c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
8000238e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80002390:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80002392:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80002394:	33 40       	mov	r0,52
	add r0,r12
80002396:	18 00       	add	r0,r12
	stmts r0,r0-r11
80002398:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
8000239c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
8000239e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
800023a2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
800023a4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
800023a6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
800023a8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
800023aa:	1a 90       	mov	r0,sp
	st.w --sp,r0
800023ac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800023ae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
800023b2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
800023b4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
800023b6:	1c 9f       	mov	pc,lr

800023b8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800023b8:	49 4c       	lddpc	r12,80002408 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
800023ba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
800023bc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800023be:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800023c0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
800023c4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
800023c6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
800023c8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800023ca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
800023cc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800023ce:	33 40       	mov	r0,52
	add r0,r12
800023d0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800023d2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800023d6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
800023d8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
800023da:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
800023dc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
800023de:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
800023e0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
800023e2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
800023e4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
800023e6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
800023e8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800023ea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
800023ec:	d4 01       	pushm	lr
	call timerStart
800023ee:	f0 1f 00 08 	mcall	8000240c <contextRestoreFromISR+0x54>
	popm lr
800023f2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
800023f4:	1c 9f       	mov	pc,lr
800023f6:	00 00       	add	r0,r0
800023f8:	80 00       	ld.sh	r0,r0[0x0]
800023fa:	10 50       	eor	r0,r8
800023fc:	80 00       	ld.sh	r0,r0[0x0]
800023fe:	23 66       	sub	r6,54
80002400:	80 00       	ld.sh	r0,r0[0x0]
80002402:	23 6a       	sub	r10,54
80002404:	80 00       	ld.sh	r0,r0[0x0]
80002406:	22 00       	sub	r0,32
80002408:	00 00       	add	r0,r0
8000240a:	06 58       	eor	r8,r3
8000240c:	80 00       	ld.sh	r0,r0[0x0]
8000240e:	18 e2       	st.h	--r12,r2
	...
