
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001a4c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001c00  80001c00  00002000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80002000  80002000  00002400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002084  80002084  00002484  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80002088  00002808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002594  00002d14  2**0
                  ALLOC
  9 .bss          00000298  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000d850  000007b0  000007b0  00000000  2**0
                  ALLOC
 11 .comment      000000a0  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000570  00000000  00000000  00002db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 000009f3  00000000  00000000  00003328  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c58c  00000000  00000000  00003d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00001e07  00000000  00000000  000102a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004264  00000000  00000000  000120ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000c08  00000000  00000000  00016314  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001c75  00000000  00000000  00016f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00001869  00000000  00000000  00018b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 005345bf  00000000  00000000  0001a3fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 000004d0  00000000  00000000  0054e9b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	12 ac       	st.w	r9++,r12

Disassembly of section .text:

80000008 <usart_options>:
80000008:	00 00 e1 00 08 04 00 00 00 00 00 00 74 61 73 6b     ............task
80000018:	20 31 0a 00 74 61 73 6b 20 32 0a 00 74 73 6b 31      1..task 2..tsk1
80000028:	00 00 00 00 74 61 73 6b 20 33 0a 00 74 73 6b 32     ....task 3..tsk2
80000038:	00 00 00 00 74 73 6b 33 00 00 00 00                 ....tsk3....

80000044 <task1>:
ROSA_taskHandle_t task1_handle=NULL;
ROSA_taskHandle_t task2_handle=NULL;
ROSA_taskHandle_t task3_handle=NULL;

void task1(void)
{
80000044:	eb cd 40 80 	pushm	r7,lr
80000048:	1a 97       	mov	r7,sp
	while(1) {
		usartWriteLine(USART, "task 1\n");
8000004a:	48 8b       	lddpc	r11,80000068 <task1+0x24>
8000004c:	fe 7c 14 00 	mov	r12,-60416
80000050:	f0 1f 00 07 	mcall	8000006c <task1+0x28>
		ledToggle(LED0_GPIO);
80000054:	33 bc       	mov	r12,59
80000056:	f0 1f 00 07 	mcall	80000070 <task1+0x2c>
		//ROSA_taskCreate(&task2_handle, "tsk2", task2, 0x40, 2);
		ROSA_delay(1000);
8000005a:	e0 6a 03 e8 	mov	r10,1000
8000005e:	30 0b       	mov	r11,0
80000060:	f0 1f 00 05 	mcall	80000074 <task1+0x30>
	}
80000064:	cf 3b       	rjmp	8000004a <task1+0x6>
80000066:	00 00       	add	r0,r0
80000068:	80 00       	ld.sh	r0,r0[0x0]
8000006a:	00 14       	sub	r4,r0
8000006c:	80 00       	ld.sh	r0,r0[0x0]
8000006e:	11 a0       	ld.ub	r0,r8[0x2]
80000070:	80 00       	ld.sh	r0,r0[0x0]
80000072:	0e 50       	eor	r0,r7
80000074:	80 00       	ld.sh	r0,r0[0x0]
80000076:	07 88       	ld.ub	r8,r3[0x0]

80000078 <task2>:
}


void task2(void)
{
80000078:	eb cd 40 80 	pushm	r7,lr
8000007c:	1a 97       	mov	r7,sp
	while(1) {
		usartWriteLine(USART, "task 2\n");
8000007e:	48 bb       	lddpc	r11,800000a8 <task2+0x30>
80000080:	fe 7c 14 00 	mov	r12,-60416
80000084:	f0 1f 00 0a 	mcall	800000ac <task2+0x34>
		ledToggle(LED1_GPIO);
80000088:	33 cc       	mov	r12,60
8000008a:	f0 1f 00 0a 	mcall	800000b0 <task2+0x38>
		ROSA_taskCreate(&task1_handle, "tsk1", task1, 0x40, 2);
8000008e:	30 28       	mov	r8,2
80000090:	34 09       	mov	r9,64
80000092:	48 9a       	lddpc	r10,800000b4 <task2+0x3c>
80000094:	48 9b       	lddpc	r11,800000b8 <task2+0x40>
80000096:	48 ac       	lddpc	r12,800000bc <task2+0x44>
80000098:	f0 1f 00 0a 	mcall	800000c0 <task2+0x48>
		//ROSA_taskDelete(task2_handle);
		ROSA_delay(1000);
8000009c:	e0 6a 03 e8 	mov	r10,1000
800000a0:	30 0b       	mov	r11,0
800000a2:	f0 1f 00 09 	mcall	800000c4 <task2+0x4c>
	}
800000a6:	ce cb       	rjmp	8000007e <task2+0x6>
800000a8:	80 00       	ld.sh	r0,r0[0x0]
800000aa:	00 1c       	sub	r12,r0
800000ac:	80 00       	ld.sh	r0,r0[0x0]
800000ae:	11 a0       	ld.ub	r0,r8[0x2]
800000b0:	80 00       	ld.sh	r0,r0[0x0]
800000b2:	0e 50       	eor	r0,r7
800000b4:	80 00       	ld.sh	r0,r0[0x0]
800000b6:	00 44       	or	r4,r0
800000b8:	80 00       	ld.sh	r0,r0[0x0]
800000ba:	00 24       	rsub	r4,r0
800000bc:	00 00       	add	r0,r0
800000be:	05 18       	ld.sh	r8,r2++
800000c0:	80 00       	ld.sh	r0,r0[0x0]
800000c2:	06 18       	sub	r8,r3
800000c4:	80 00       	ld.sh	r0,r0[0x0]
800000c6:	07 88       	ld.ub	r8,r3[0x0]

800000c8 <task3>:
}

void task3(void)
{
800000c8:	eb cd 40 80 	pushm	r7,lr
800000cc:	1a 97       	mov	r7,sp
	while(1)
	{
		usartWriteLine(USART, "task 3\n");
800000ce:	48 8b       	lddpc	r11,800000ec <task3+0x24>
800000d0:	fe 7c 14 00 	mov	r12,-60416
800000d4:	f0 1f 00 07 	mcall	800000f0 <task3+0x28>
		ledToggle(LED2_GPIO);
800000d8:	33 dc       	mov	r12,61
800000da:	f0 1f 00 07 	mcall	800000f4 <task3+0x2c>
		//ROSA_taskDelete(task1_handle);
		ROSA_delay(1000);
800000de:	e0 6a 03 e8 	mov	r10,1000
800000e2:	30 0b       	mov	r11,0
800000e4:	f0 1f 00 05 	mcall	800000f8 <task3+0x30>
	}
800000e8:	cf 3b       	rjmp	800000ce <task3+0x6>
800000ea:	00 00       	add	r0,r0
800000ec:	80 00       	ld.sh	r0,r0[0x0]
800000ee:	00 2c       	rsub	r12,r0
800000f0:	80 00       	ld.sh	r0,r0[0x0]
800000f2:	11 a0       	ld.ub	r0,r8[0x2]
800000f4:	80 00       	ld.sh	r0,r0[0x0]
800000f6:	0e 50       	eor	r0,r7
800000f8:	80 00       	ld.sh	r0,r0[0x0]
800000fa:	07 88       	ld.ub	r8,r3[0x0]

800000fc <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
800000fc:	eb cd 40 80 	pushm	r7,lr
80000100:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
80000102:	f0 1f 00 0e 	mcall	80000138 <main+0x3c>
	
	ROSA_taskCreate(&task1_handle, "tsk1", task1, 0x40, 2);
80000106:	30 28       	mov	r8,2
80000108:	34 09       	mov	r9,64
8000010a:	48 da       	lddpc	r10,8000013c <main+0x40>
8000010c:	48 db       	lddpc	r11,80000140 <main+0x44>
8000010e:	48 ec       	lddpc	r12,80000144 <main+0x48>
80000110:	f0 1f 00 0e 	mcall	80000148 <main+0x4c>
	ROSA_taskCreate(&task2_handle, "tsk2", task2, 0x40, 2);	
80000114:	30 28       	mov	r8,2
80000116:	34 09       	mov	r9,64
80000118:	48 da       	lddpc	r10,8000014c <main+0x50>
8000011a:	48 eb       	lddpc	r11,80000150 <main+0x54>
8000011c:	48 ec       	lddpc	r12,80000154 <main+0x58>
8000011e:	f0 1f 00 0b 	mcall	80000148 <main+0x4c>
	ROSA_taskCreate(&task3_handle, "tsk3", task3, 0x40, 2);	
80000122:	30 28       	mov	r8,2
80000124:	34 09       	mov	r9,64
80000126:	48 da       	lddpc	r10,80000158 <main+0x5c>
80000128:	48 db       	lddpc	r11,8000015c <main+0x60>
8000012a:	48 ec       	lddpc	r12,80000160 <main+0x64>
8000012c:	f0 1f 00 07 	mcall	80000148 <main+0x4c>
	
	//Start the timer
	//timerStart();
	
	ROSA_startScheduler();
80000130:	f0 1f 00 0d 	mcall	80000164 <main+0x68>
	/* Execution will never return here */
	while(1);
80000134:	c0 08       	rjmp	80000134 <main+0x38>
80000136:	00 00       	add	r0,r0
80000138:	80 00       	ld.sh	r0,r0[0x0]
8000013a:	04 44       	or	r4,r2
8000013c:	80 00       	ld.sh	r0,r0[0x0]
8000013e:	00 44       	or	r4,r0
80000140:	80 00       	ld.sh	r0,r0[0x0]
80000142:	00 24       	rsub	r4,r0
80000144:	00 00       	add	r0,r0
80000146:	05 18       	ld.sh	r8,r2++
80000148:	80 00       	ld.sh	r0,r0[0x0]
8000014a:	06 18       	sub	r8,r3
8000014c:	80 00       	ld.sh	r0,r0[0x0]
8000014e:	00 78       	tst	r8,r0
80000150:	80 00       	ld.sh	r0,r0[0x0]
80000152:	00 34       	cp.w	r4,r0
80000154:	00 00       	add	r0,r0
80000156:	05 1c       	ld.sh	r12,r2++
80000158:	80 00       	ld.sh	r0,r0[0x0]
8000015a:	00 c8       	st.b	r0++,r8
8000015c:	80 00       	ld.sh	r0,r0[0x0]
8000015e:	00 3c       	cp.w	r12,r0
80000160:	00 00       	add	r0,r0
80000162:	05 20       	ld.uh	r0,r2++
80000164:	80 00       	ld.sh	r0,r0[0x0]
80000166:	0a 68       	and	r8,r5

80000168 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
80000168:	eb cd 40 80 	pushm	r7,lr
8000016c:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
8000016e:	f0 1f 00 05 	mcall	80000180 <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
80000172:	f0 1f 00 05 	mcall	80000184 <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it
80000176:	f0 1f 00 05 	mcall	80000188 <ROSA_yieldFromISR+0x20>
}
8000017a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000017e:	00 00       	add	r0,r0
80000180:	80 00       	ld.sh	r0,r0[0x0]
80000182:	1d 7e       	ld.ub	lr,--lr
80000184:	80 00       	ld.sh	r0,r0[0x0]
80000186:	0a 1c       	sub	r12,r5
80000188:	80 00       	ld.sh	r0,r0[0x0]
8000018a:	1d b8       	ld.ub	r8,lr[0x3]

8000018c <usart_options>:
8000018c:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
8000019c:	00 00 00 00 64 6c 61 79 00 00 00 00 55 53 41 52     ....dlay....USAR
800001ac:	54 20 69 6e 69 74 69 61 6c 69 7a 65 64 0d 0a 00     T initialized...

800001bc <idle>:

/** @fn void idle(void)
	@brief Idle task body.
*/
void idle(void)
{
800001bc:	eb cd 40 80 	pushm	r7,lr
800001c0:	1a 97       	mov	r7,sp
	while(1);
800001c2:	c0 08       	rjmp	800001c2 <idle+0x6>

800001c4 <ROSA_tcbInstall>:
 * Comment:
 * 	Install the TCB into the TCBLIST.
 *
 **********************************************************/
void ROSA_tcbInstall(tcb * tcbTask)
{
800001c4:	eb cd 40 80 	pushm	r7,lr
800001c8:	1a 97       	mov	r7,sp
800001ca:	20 1d       	sub	sp,4
800001cc:	ef 4c ff fc 	st.w	r7[-4],r12
	/* Is this the first tcb installed? */
	if(TCBLIST == NULL)
800001d0:	49 38       	lddpc	r8,8000021c <ROSA_tcbInstall+0x58>
800001d2:	70 08       	ld.w	r8,r8[0x0]
800001d4:	58 08       	cp.w	r8,0
800001d6:	c1 01       	brne	800001f6 <ROSA_tcbInstall+0x32>
	{
		TCBLIST = tcbTask;
800001d8:	49 18       	lddpc	r8,8000021c <ROSA_tcbInstall+0x58>
800001da:	ee f9 ff fc 	ld.w	r9,r7[-4]
800001de:	91 09       	st.w	r8[0x0],r9
		TCBLIST->nexttcb = tcbTask;			//Install the first tcb
800001e0:	48 f8       	lddpc	r8,8000021c <ROSA_tcbInstall+0x58>
800001e2:	70 08       	ld.w	r8,r8[0x0]
800001e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800001e8:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
800001ea:	48 d8       	lddpc	r8,8000021c <ROSA_tcbInstall+0x58>
800001ec:	70 09       	ld.w	r9,r8[0x0]
800001ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001f2:	91 09       	st.w	r8[0x0],r9
800001f4:	c1 08       	rjmp	80000214 <ROSA_tcbInstall+0x50>
	}
	else
	{
		tcbTask->nexttcb = TCBLIST->nexttcb;
800001f6:	48 a8       	lddpc	r8,8000021c <ROSA_tcbInstall+0x58>
800001f8:	70 08       	ld.w	r8,r8[0x0]
800001fa:	70 09       	ld.w	r9,r8[0x0]
800001fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000200:	91 09       	st.w	r8[0x0],r9
		TCBLIST->nexttcb = tcbTask;
80000202:	48 78       	lddpc	r8,8000021c <ROSA_tcbInstall+0x58>
80000204:	70 08       	ld.w	r8,r8[0x0]
80000206:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000020a:	91 09       	st.w	r8[0x0],r9
		TCBLIST = tcbTask;
8000020c:	48 48       	lddpc	r8,8000021c <ROSA_tcbInstall+0x58>
8000020e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000212:	91 09       	st.w	r8[0x0],r9
	
	if (OLD_API)
	{
		TCBLIST = TCBLIST->nexttcb;
	}
}
80000214:	2f fd       	sub	sp,-4
80000216:	e3 cd 80 80 	ldm	sp++,r7,pc
8000021a:	00 00       	add	r0,r0
8000021c:	00 00       	add	r0,r0
8000021e:	06 6c       	and	r12,r3

80000220 <ROSA_tcbUninstall>:

void ROSA_tcbUninstall(tcb * tcbTask)
{
80000220:	eb cd 40 80 	pushm	r7,lr
80000224:	1a 97       	mov	r7,sp
80000226:	20 1d       	sub	sp,4
80000228:	ef 4c ff fc 	st.w	r7[-4],r12
	while (TCBLIST->nexttcb != tcbTask)
8000022c:	c0 68       	rjmp	80000238 <ROSA_tcbUninstall+0x18>
	{
		TCBLIST = TCBLIST->nexttcb;
8000022e:	49 88       	lddpc	r8,8000028c <ROSA_tcbUninstall+0x6c>
80000230:	70 08       	ld.w	r8,r8[0x0]
80000232:	70 09       	ld.w	r9,r8[0x0]
80000234:	49 68       	lddpc	r8,8000028c <ROSA_tcbUninstall+0x6c>
80000236:	91 09       	st.w	r8[0x0],r9
	}
}

void ROSA_tcbUninstall(tcb * tcbTask)
{
	while (TCBLIST->nexttcb != tcbTask)
80000238:	49 58       	lddpc	r8,8000028c <ROSA_tcbUninstall+0x6c>
8000023a:	70 08       	ld.w	r8,r8[0x0]
8000023c:	70 09       	ld.w	r9,r8[0x0]
8000023e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000242:	10 39       	cp.w	r9,r8
80000244:	cf 51       	brne	8000022e <ROSA_tcbUninstall+0xe>
	{
		TCBLIST = TCBLIST->nexttcb;
	}
	
	TCBLIST->nexttcb = tcbTask->nexttcb;
80000246:	49 28       	lddpc	r8,8000028c <ROSA_tcbUninstall+0x6c>
80000248:	70 08       	ld.w	r8,r8[0x0]
8000024a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000024e:	72 09       	ld.w	r9,r9[0x0]
80000250:	91 09       	st.w	r8[0x0],r9
	tcbTask->nexttcb = NULL;
80000252:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000256:	30 09       	mov	r9,0
80000258:	91 09       	st.w	r8[0x0],r9
	
	if (tcbTask->delay)	
8000025a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000025e:	f0 e8 00 68 	ld.d	r8,r8[104]
80000262:	58 08       	cp.w	r8,0
80000264:	5c 29       	cpc	r9
80000266:	c0 70       	breq	80000274 <ROSA_tcbUninstall+0x54>
	{
		TCBLIST = TCBLIST->nexttcb;
80000268:	48 98       	lddpc	r8,8000028c <ROSA_tcbUninstall+0x6c>
8000026a:	70 08       	ld.w	r8,r8[0x0]
8000026c:	70 09       	ld.w	r9,r8[0x0]
8000026e:	48 88       	lddpc	r8,8000028c <ROSA_tcbUninstall+0x6c>
80000270:	91 09       	st.w	r8[0x0],r9
80000272:	c0 a8       	rjmp	80000286 <ROSA_tcbUninstall+0x66>
	}
	else if (TCBLIST == tcbTask)
80000274:	48 68       	lddpc	r8,8000028c <ROSA_tcbUninstall+0x6c>
80000276:	70 09       	ld.w	r9,r8[0x0]
80000278:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000027c:	10 39       	cp.w	r9,r8
8000027e:	c0 41       	brne	80000286 <ROSA_tcbUninstall+0x66>
	{
		TCBLIST = NULL;	
80000280:	48 38       	lddpc	r8,8000028c <ROSA_tcbUninstall+0x6c>
80000282:	30 09       	mov	r9,0
80000284:	91 09       	st.w	r8[0x0],r9
	}
}
80000286:	2f fd       	sub	sp,-4
80000288:	e3 cd 80 80 	ldm	sp++,r7,pc
8000028c:	00 00       	add	r0,r0
8000028e:	06 6c       	and	r12,r3

80000290 <readyQueueSearch>:
/** @fn int readyQueueSearch(void)
	@brief Search for the first non-empty highest priority queue.
	@return Pointer to the last tcb in the queue (in other words - PA[i]).
*/
tcb * readyQueueSearch(void)
{
80000290:	eb cd 40 80 	pushm	r7,lr
80000294:	1a 97       	mov	r7,sp
80000296:	20 2d       	sub	sp,8
	int i = MAXNPRIO;
80000298:	30 c8       	mov	r8,12
8000029a:	ef 48 ff f8 	st.w	r7[-8],r8
	tcb * retval;
		
	interruptDisable();
8000029e:	f0 1f 00 1a 	mcall	80000304 <readyQueueSearch+0x74>
	/* Search for the first non-empty queue. */
	while ( (PA[--i] == NULL) && (i > 0));
800002a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002a6:	20 18       	sub	r8,1
800002a8:	ef 48 ff f8 	st.w	r7[-8],r8
800002ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
800002b0:	49 68       	lddpc	r8,80000308 <readyQueueSearch+0x78>
800002b2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800002b6:	58 08       	cp.w	r8,0
800002b8:	c0 61       	brne	800002c4 <readyQueueSearch+0x34>
800002ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002be:	58 08       	cp.w	r8,0
800002c0:	fe 99 ff f1 	brgt	800002a2 <readyQueueSearch+0x12>
	
	if ((i == 0) && (PA[i] == NULL))
800002c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002c8:	58 08       	cp.w	r8,0
800002ca:	c0 d1       	brne	800002e4 <readyQueueSearch+0x54>
800002cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800002d0:	48 e8       	lddpc	r8,80000308 <readyQueueSearch+0x78>
800002d2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800002d6:	58 08       	cp.w	r8,0
800002d8:	c0 61       	brne	800002e4 <readyQueueSearch+0x54>
	{
		retval = IDLETASK;
800002da:	48 d8       	lddpc	r8,8000030c <readyQueueSearch+0x7c>
800002dc:	70 08       	ld.w	r8,r8[0x0]
800002de:	ef 48 ff fc 	st.w	r7[-4],r8
		
	interruptDisable();
	/* Search for the first non-empty queue. */
	while ( (PA[--i] == NULL) && (i > 0));
	
	if ((i == 0) && (PA[i] == NULL))
800002e2:	c0 88       	rjmp	800002f2 <readyQueueSearch+0x62>
	{
		retval = IDLETASK;
	}
	else
	{
		retval = PA[i];
800002e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800002e8:	48 88       	lddpc	r8,80000308 <readyQueueSearch+0x78>
800002ea:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800002ee:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	interruptEnable();
800002f2:	f0 1f 00 08 	mcall	80000310 <readyQueueSearch+0x80>
	
	return retval;
800002f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800002fa:	10 9c       	mov	r12,r8
800002fc:	2f ed       	sub	sp,-8
800002fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80000302:	00 00       	add	r0,r0
80000304:	80 00       	ld.sh	r0,r0[0x0]
80000306:	1d 66       	ld.uh	r6,--lr
80000308:	00 00       	add	r0,r0
8000030a:	06 70       	tst	r0,r3
8000030c:	00 00       	add	r0,r0
8000030e:	06 68       	and	r8,r3
80000310:	80 00       	ld.sh	r0,r0[0x0]
80000312:	1d 6a       	ld.uh	r10,--lr

80000314 <dlay>:

void dlay()
{
80000314:	eb cd 40 80 	pushm	r7,lr
80000318:	1a 97       	mov	r7,sp
8000031a:	20 1d       	sub	sp,4
	
	while (1)
	{	
		//interruptDisable();
			
		while ((DQ) && (DQ->delay <= systemTick))
8000031c:	c3 48       	rjmp	80000384 <dlay+0x70>
		{	
			tmp = DQ;
8000031e:	4a 88       	lddpc	r8,800003bc <dlay+0xa8>
80000320:	70 08       	ld.w	r8,r8[0x0]
80000322:	ef 48 ff fc 	st.w	r7[-4],r8

			ROSA_TM_ACTION(DQ, DQ, Uninstall);
80000326:	4a 68       	lddpc	r8,800003bc <dlay+0xa8>
80000328:	70 09       	ld.w	r9,r8[0x0]
8000032a:	4a 68       	lddpc	r8,800003c0 <dlay+0xac>
8000032c:	91 09       	st.w	r8[0x0],r9
8000032e:	4a 48       	lddpc	r8,800003bc <dlay+0xa8>
80000330:	70 08       	ld.w	r8,r8[0x0]
80000332:	10 9c       	mov	r12,r8
80000334:	f0 1f 00 24 	mcall	800003c4 <dlay+0xb0>
80000338:	4a 28       	lddpc	r8,800003c0 <dlay+0xac>
8000033a:	70 09       	ld.w	r9,r8[0x0]
8000033c:	4a 08       	lddpc	r8,800003bc <dlay+0xa8>
8000033e:	91 09       	st.w	r8[0x0],r9
			DQ = TCBLIST;
80000340:	4a 08       	lddpc	r8,800003c0 <dlay+0xac>
80000342:	70 09       	ld.w	r9,r8[0x0]
80000344:	49 e8       	lddpc	r8,800003bc <dlay+0xa8>
80000346:	91 09       	st.w	r8[0x0],r9
			tmp->delay = 0;
80000348:	ee fa ff fc 	ld.w	r10,r7[-4]
8000034c:	30 08       	mov	r8,0
8000034e:	30 09       	mov	r9,0
80000350:	f4 e9 00 68 	st.d	r10[104],r8
			ROSA_TM_ACTION(PA[tmp->priority], tmp, Install);
80000354:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000358:	f1 38 00 64 	ld.ub	r8,r8[100]
8000035c:	10 99       	mov	r9,r8
8000035e:	49 b8       	lddpc	r8,800003c8 <dlay+0xb4>
80000360:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000364:	49 78       	lddpc	r8,800003c0 <dlay+0xac>
80000366:	91 09       	st.w	r8[0x0],r9
80000368:	ee fc ff fc 	ld.w	r12,r7[-4]
8000036c:	f0 1f 00 18 	mcall	800003cc <dlay+0xb8>
80000370:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000374:	f1 38 00 64 	ld.ub	r8,r8[100]
80000378:	10 99       	mov	r9,r8
8000037a:	49 28       	lddpc	r8,800003c0 <dlay+0xac>
8000037c:	70 0a       	ld.w	r10,r8[0x0]
8000037e:	49 38       	lddpc	r8,800003c8 <dlay+0xb4>
80000380:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	
	while (1)
	{	
		//interruptDisable();
			
		while ((DQ) && (DQ->delay <= systemTick))
80000384:	48 e8       	lddpc	r8,800003bc <dlay+0xa8>
80000386:	70 08       	ld.w	r8,r8[0x0]
80000388:	58 08       	cp.w	r8,0
8000038a:	c0 d0       	breq	800003a4 <dlay+0x90>
8000038c:	48 c8       	lddpc	r8,800003bc <dlay+0xa8>
8000038e:	70 08       	ld.w	r8,r8[0x0]
80000390:	f0 ea 00 68 	ld.d	r10,r8[104]
80000394:	48 f8       	lddpc	r8,800003d0 <dlay+0xbc>
80000396:	f0 e8 00 00 	ld.d	r8,r8[0]
8000039a:	10 3a       	cp.w	r10,r8
8000039c:	f2 0b 13 00 	cpc	r11,r9
800003a0:	fe 98 ff bf 	brls	8000031e <dlay+0xa>
			DQ = TCBLIST;
			tmp->delay = 0;
			ROSA_TM_ACTION(PA[tmp->priority], tmp, Install);
		}

		PREEMPTASK = readyQueueSearch();
800003a4:	f0 1f 00 0c 	mcall	800003d4 <dlay+0xc0>
800003a8:	18 99       	mov	r9,r12
800003aa:	48 c8       	lddpc	r8,800003d8 <dlay+0xc4>
800003ac:	91 09       	st.w	r8[0x0],r9
		
		interruptEnable();
800003ae:	f0 1f 00 0c 	mcall	800003dc <dlay+0xc8>
		
		ROSA_yield();
800003b2:	f0 1f 00 0c 	mcall	800003e0 <dlay+0xcc>
	}
800003b6:	d7 03       	nop
	
	while (1)
	{	
		//interruptDisable();
			
		while ((DQ) && (DQ->delay <= systemTick))
800003b8:	ce 6b       	rjmp	80000384 <dlay+0x70>
800003ba:	00 00       	add	r0,r0
800003bc:	00 00       	add	r0,r0
800003be:	07 24       	ld.uh	r4,r3++
800003c0:	00 00       	add	r0,r0
800003c2:	06 6c       	and	r12,r3
800003c4:	80 00       	ld.sh	r0,r0[0x0]
800003c6:	02 20       	rsub	r0,r1
800003c8:	00 00       	add	r0,r0
800003ca:	06 70       	tst	r0,r3
800003cc:	80 00       	ld.sh	r0,r0[0x0]
800003ce:	01 c4       	ld.ub	r4,r0[0x4]
800003d0:	00 00       	add	r0,r0
800003d2:	07 a0       	ld.ub	r0,r3[0x2]
800003d4:	80 00       	ld.sh	r0,r0[0x0]
800003d6:	02 90       	mov	r0,r1
800003d8:	00 00       	add	r0,r0
800003da:	06 a4       	st.w	r3++,r4
800003dc:	80 00       	ld.sh	r0,r0[0x0]
800003de:	1d 6a       	ld.uh	r10,--lr
800003e0:	80 00       	ld.sh	r0,r0[0x0]
800003e2:	09 fe       	ld.ub	lr,r4[0x7]

800003e4 <sysTasksCreate>:

/** @fn void idleCreate(void)
	@brief Creation of the idle task.
*/
void sysTasksCreate(void)
{
800003e4:	eb cd 40 80 	pushm	r7,lr
800003e8:	1a 97       	mov	r7,sp
	ROSA_tcbCreate(&IDLETASK_TCB, "idle", idle, idle_stack, SYS_TASK_STACK_SIZE);
800003ea:	32 08       	mov	r8,32
800003ec:	48 b9       	lddpc	r9,80000418 <sysTasksCreate+0x34>
800003ee:	48 ca       	lddpc	r10,8000041c <sysTasksCreate+0x38>
800003f0:	48 cb       	lddpc	r11,80000420 <sysTasksCreate+0x3c>
800003f2:	48 dc       	lddpc	r12,80000424 <sysTasksCreate+0x40>
800003f4:	f0 1f 00 0d 	mcall	80000428 <sysTasksCreate+0x44>
	IDLETASK = &IDLETASK_TCB;
800003f8:	48 d8       	lddpc	r8,8000042c <sysTasksCreate+0x48>
800003fa:	48 b9       	lddpc	r9,80000424 <sysTasksCreate+0x40>
800003fc:	91 09       	st.w	r8[0x0],r9
	
	ROSA_tcbCreate(&DELHANDL_TCB, "dlay", dlay, dlay_stack, SYS_TASK_STACK_SIZE);
800003fe:	32 08       	mov	r8,32
80000400:	48 c9       	lddpc	r9,80000430 <sysTasksCreate+0x4c>
80000402:	48 da       	lddpc	r10,80000434 <sysTasksCreate+0x50>
80000404:	48 db       	lddpc	r11,80000438 <sysTasksCreate+0x54>
80000406:	48 ec       	lddpc	r12,8000043c <sysTasksCreate+0x58>
80000408:	f0 1f 00 08 	mcall	80000428 <sysTasksCreate+0x44>
	DELHANDL = &DELHANDL_TCB;
8000040c:	48 d8       	lddpc	r8,80000440 <sysTasksCreate+0x5c>
8000040e:	48 c9       	lddpc	r9,8000043c <sysTasksCreate+0x58>
80000410:	91 09       	st.w	r8[0x0],r9
}
80000412:	e3 cd 80 80 	ldm	sp++,r7,pc
80000416:	00 00       	add	r0,r0
80000418:	00 00       	add	r0,r0
8000041a:	05 28       	ld.uh	r8,r2++
8000041c:	80 00       	ld.sh	r0,r0[0x0]
8000041e:	01 bc       	ld.ub	r12,r0[0x3]
80000420:	80 00       	ld.sh	r0,r0[0x0]
80000422:	01 98       	ld.ub	r8,r0[0x1]
80000424:	00 00       	add	r0,r0
80000426:	07 28       	ld.uh	r8,r3++
80000428:	80 00       	ld.sh	r0,r0[0x0]
8000042a:	05 64       	ld.uh	r4,--r2
8000042c:	00 00       	add	r0,r0
8000042e:	06 68       	and	r8,r3
80000430:	00 00       	add	r0,r0
80000432:	05 a8       	ld.ub	r8,r2[0x2]
80000434:	80 00       	ld.sh	r0,r0[0x0]
80000436:	03 14       	ld.sh	r4,r1++
80000438:	80 00       	ld.sh	r0,r0[0x0]
8000043a:	01 a0       	ld.ub	r0,r0[0x2]
8000043c:	00 00       	add	r0,r0
8000043e:	06 a8       	st.w	r3++,r8
80000440:	00 00       	add	r0,r0
80000442:	06 a0       	st.w	r3++,r0

80000444 <ROSA_init>:

void ROSA_init(void)
{
80000444:	eb cd 40 80 	pushm	r7,lr
80000448:	1a 97       	mov	r7,sp
8000044a:	20 1d       	sub	sp,4
	int i = 0;
8000044c:	30 08       	mov	r8,0
8000044e:	ef 48 ff fc 	st.w	r7[-4],r8
	systemTick = 0;
80000452:	4b 0a       	lddpc	r10,80000510 <ROSA_init+0xcc>
80000454:	30 08       	mov	r8,0
80000456:	30 09       	mov	r9,0
80000458:	f4 e9 00 00 	st.d	r10[0],r8
	
	if (ROSA_init_GUARD == 0)
8000045c:	4a e8       	lddpc	r8,80000514 <ROSA_init+0xd0>
8000045e:	70 08       	ld.w	r8,r8[0x0]
80000460:	58 08       	cp.w	r8,0
80000462:	c5 01       	brne	80000502 <ROSA_init+0xbe>
	{
		//Do initialization of I/O drivers
		ledInit();									//LEDs
80000464:	f0 1f 00 2d 	mcall	80000518 <ROSA_init+0xd4>
		buttonInit();								//Buttons
80000468:	f0 1f 00 2d 	mcall	8000051c <ROSA_init+0xd8>
		joystickInit();								//Joystick
8000046c:	f0 1f 00 2d 	mcall	80000520 <ROSA_init+0xdc>
		potInit();									//Potentiometer
80000470:	f0 1f 00 2d 	mcall	80000524 <ROSA_init+0xe0>
		usartInit(USART, &usart_options, FOSC0);	//Serial communication
80000474:	e0 6a 1b 00 	mov	r10,6912
80000478:	ea 1a 00 b7 	orh	r10,0xb7
8000047c:	4a bb       	lddpc	r11,80000528 <ROSA_init+0xe4>
8000047e:	fe 7c 14 00 	mov	r12,-60416
80000482:	f0 1f 00 2b 	mcall	8000052c <ROSA_init+0xe8>
		usartWriteLine(USART, "USART initialized\r\n");
80000486:	4a bb       	lddpc	r11,80000530 <ROSA_init+0xec>
80000488:	fe 7c 14 00 	mov	r12,-60416
8000048c:	f0 1f 00 2a 	mcall	80000534 <ROSA_init+0xf0>

		if (!OLD_API)
		{
			interruptInit();
80000490:	f0 1f 00 2a 	mcall	80000538 <ROSA_init+0xf4>
			interruptEnable();
80000494:	f0 1f 00 2a 	mcall	8000053c <ROSA_init+0xf8>
			timerInit(1);
80000498:	30 1c       	mov	r12,1
8000049a:	f0 1f 00 2a 	mcall	80000540 <ROSA_init+0xfc>
			timerStart();
8000049e:	f0 1f 00 2a 	mcall	80000544 <ROSA_init+0x100>
			/* Create system's tasks (idle, delay). */
			sysTasksCreate();
800004a2:	f0 1f 00 2a 	mcall	80000548 <ROSA_init+0x104>
			for (i = 0; i < MAXNPRIO; PA[i++] = NULL);
800004a6:	30 08       	mov	r8,0
800004a8:	ef 48 ff fc 	st.w	r7[-4],r8
800004ac:	c0 c8       	rjmp	800004c4 <ROSA_init+0x80>
800004ae:	ee f9 ff fc 	ld.w	r9,r7[-4]
800004b2:	4a 78       	lddpc	r8,8000054c <ROSA_init+0x108>
800004b4:	30 0a       	mov	r10,0
800004b6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800004ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004be:	2f f8       	sub	r8,-1
800004c0:	ef 48 ff fc 	st.w	r7[-4],r8
800004c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004c8:	58 b8       	cp.w	r8,11
800004ca:	fe 9a ff f2 	brle	800004ae <ROSA_init+0x6a>
		}
	
		//Start with empty TCBLIST and no EXECTASK.
		TCBLIST = NULL;
800004ce:	4a 18       	lddpc	r8,80000550 <ROSA_init+0x10c>
800004d0:	30 09       	mov	r9,0
800004d2:	91 09       	st.w	r8[0x0],r9
		EXECTASK = NULL;
800004d4:	4a 08       	lddpc	r8,80000554 <ROSA_init+0x110>
800004d6:	30 09       	mov	r9,0
800004d8:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
800004da:	4a 08       	lddpc	r8,80000558 <ROSA_init+0x114>
800004dc:	30 09       	mov	r9,0
800004de:	91 09       	st.w	r8[0x0],r9
		DQ = NULL;
800004e0:	49 f8       	lddpc	r8,8000055c <ROSA_init+0x118>
800004e2:	30 09       	mov	r9,0
800004e4:	91 09       	st.w	r8[0x0],r9
		DQ->delay = 0;
800004e6:	49 e8       	lddpc	r8,8000055c <ROSA_init+0x118>
800004e8:	70 0a       	ld.w	r10,r8[0x0]
800004ea:	30 08       	mov	r8,0
800004ec:	30 09       	mov	r9,0
800004ee:	f4 e9 00 68 	st.d	r10[104],r8
		DQ->nexttcb = DQ;
800004f2:	49 b8       	lddpc	r8,8000055c <ROSA_init+0x118>
800004f4:	70 08       	ld.w	r8,r8[0x0]
800004f6:	49 a9       	lddpc	r9,8000055c <ROSA_init+0x118>
800004f8:	72 09       	ld.w	r9,r9[0x0]
800004fa:	91 09       	st.w	r8[0x0],r9
		LOCKEDSEMAPHORELIST=NULL;
800004fc:	49 98       	lddpc	r8,80000560 <ROSA_init+0x11c>
800004fe:	30 09       	mov	r9,0
80000500:	91 09       	st.w	r8[0x0],r9
	}
	
	ROSA_init_GUARD = 1;
80000502:	48 58       	lddpc	r8,80000514 <ROSA_init+0xd0>
80000504:	30 19       	mov	r9,1
80000506:	91 09       	st.w	r8[0x0],r9
}
80000508:	2f fd       	sub	sp,-4
8000050a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000050e:	00 00       	add	r0,r0
80000510:	00 00       	add	r0,r0
80000512:	07 a0       	ld.ub	r0,r3[0x2]
80000514:	00 00       	add	r0,r0
80000516:	05 24       	ld.uh	r4,r2++
80000518:	80 00       	ld.sh	r0,r0[0x0]
8000051a:	0d a4       	ld.ub	r4,r6[0x2]
8000051c:	80 00       	ld.sh	r0,r0[0x0]
8000051e:	0b fc       	ld.ub	r12,r5[0x7]
80000520:	80 00       	ld.sh	r0,r0[0x0]
80000522:	0c 24       	rsub	r4,r6
80000524:	80 00       	ld.sh	r0,r0[0x0]
80000526:	0e 70       	tst	r0,r7
80000528:	80 00       	ld.sh	r0,r0[0x0]
8000052a:	01 8c       	ld.ub	r12,r0[0x0]
8000052c:	80 00       	ld.sh	r0,r0[0x0]
8000052e:	10 24       	rsub	r4,r8
80000530:	80 00       	ld.sh	r0,r0[0x0]
80000532:	01 a8       	ld.ub	r8,r0[0x2]
80000534:	80 00       	ld.sh	r0,r0[0x0]
80000536:	11 a0       	ld.ub	r0,r8[0x2]
80000538:	80 00       	ld.sh	r0,r0[0x0]
8000053a:	1d 48       	ld.w	r8,--lr
8000053c:	80 00       	ld.sh	r0,r0[0x0]
8000053e:	1d 6a       	ld.uh	r10,--lr
80000540:	80 00       	ld.sh	r0,r0[0x0]
80000542:	11 f4       	ld.ub	r4,r8[0x7]
80000544:	80 00       	ld.sh	r0,r0[0x0]
80000546:	12 22       	rsub	r2,r9
80000548:	80 00       	ld.sh	r0,r0[0x0]
8000054a:	03 e4       	ld.ub	r4,r1[0x6]
8000054c:	00 00       	add	r0,r0
8000054e:	06 70       	tst	r0,r3
80000550:	00 00       	add	r0,r0
80000552:	06 6c       	and	r12,r3
80000554:	00 00       	add	r0,r0
80000556:	07 20       	ld.uh	r0,r3++
80000558:	00 00       	add	r0,r0
8000055a:	06 a4       	st.w	r3++,r4
8000055c:	00 00       	add	r0,r0
8000055e:	07 24       	ld.uh	r4,r3++
80000560:	00 00       	add	r0,r0
80000562:	06 64       	and	r4,r3

80000564 <ROSA_tcbCreate>:

void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
80000564:	eb cd 40 80 	pushm	r7,lr
80000568:	1a 97       	mov	r7,sp
8000056a:	20 6d       	sub	sp,24
8000056c:	ef 4c ff f8 	st.w	r7[-8],r12
80000570:	ef 4b ff f4 	st.w	r7[-12],r11
80000574:	ef 4a ff f0 	st.w	r7[-16],r10
80000578:	ef 49 ff ec 	st.w	r7[-20],r9
8000057c:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++)
80000580:	30 08       	mov	r8,0
80000582:	ef 48 ff fc 	st.w	r7[-4],r8
80000586:	c1 48       	rjmp	800005ae <ROSA_tcbCreate+0x4a>
	{
		tcbTask->id[i] = tcbName[i];
80000588:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000058c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000590:	ee fa ff f4 	ld.w	r10,r7[-12]
80000594:	f4 08 00 08 	add	r8,r10,r8
80000598:	11 88       	ld.ub	r8,r8[0x0]
8000059a:	ee fa ff f8 	ld.w	r10,r7[-8]
8000059e:	f4 09 00 09 	add	r9,r10,r9
800005a2:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++)
800005a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005a8:	2f f8       	sub	r8,-1
800005aa:	ef 48 ff fc 	st.w	r7[-4],r8
800005ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005b2:	58 38       	cp.w	r8,3
800005b4:	fe 9a ff ea 	brle	80000588 <ROSA_tcbCreate+0x24>
	{
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
800005b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005bc:	30 09       	mov	r9,0
800005be:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
800005c0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800005c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005c8:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
800005ca:	ee f9 ff f0 	ld.w	r9,r7[-16]
800005ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005d2:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
800005d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005d8:	ee f9 ff e8 	ld.w	r9,r7[-24]
800005dc:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
800005de:	ee f8 ff e8 	ld.w	r8,r7[-24]
800005e2:	a3 68       	lsl	r8,0x2
800005e4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800005e8:	10 09       	add	r9,r8
800005ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005ee:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
800005f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005f4:	70 39       	ld.w	r9,r8[0xc]
800005f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005fa:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
800005fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000600:	fc 19 00 1c 	movh	r9,0x1c
80000604:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
80000606:	ee fc ff f8 	ld.w	r12,r7[-8]
8000060a:	f0 1f 00 03 	mcall	80000614 <ROSA_tcbCreate+0xb0>
}
8000060e:	2f ad       	sub	sp,-24
80000610:	e3 cd 80 80 	ldm	sp++,r7,pc
80000614:	80 00       	ld.sh	r0,r0[0x0]
80000616:	09 72       	ld.ub	r2,--r4

80000618 <ROSA_taskCreate>:

int16_t ROSA_taskCreate(ROSA_taskHandle_t * pth_a, char * id, void* taskFunction, uint32_t stackSize, uint8_t prio)
{
80000618:	eb cd 40 80 	pushm	r7,lr
8000061c:	1a 97       	mov	r7,sp
8000061e:	20 7d       	sub	sp,28
80000620:	ef 4c ff f4 	st.w	r7[-12],r12
80000624:	ef 4b ff f0 	st.w	r7[-16],r11
80000628:	ef 4a ff ec 	st.w	r7[-20],r10
8000062c:	ef 49 ff e8 	st.w	r7[-24],r9
80000630:	ef 68 ff e4 	st.b	r7[-28],r8
	tcb ** pth;
	
	//pth = *pth_a;
	
	// Task cannot be created since it already exists
	if (**pth_a != NULL)
80000634:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000638:	70 08       	ld.w	r8,r8[0x0]
8000063a:	70 08       	ld.w	r8,r8[0x0]
8000063c:	58 08       	cp.w	r8,0
8000063e:	c0 30       	breq	80000644 <ROSA_taskCreate+0x2c>
	{
		return -1;
80000640:	3f f8       	mov	r8,-1
80000642:	c8 a8       	rjmp	80000756 <ROSA_taskCreate+0x13e>
	}
	
	tcbStack = (int *) malloc(stackSize * sizeof(uint32_t)); 
80000644:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000648:	a3 68       	lsl	r8,0x2
8000064a:	10 9c       	mov	r12,r8
8000064c:	f0 1f 00 45 	mcall	80000760 <ROSA_taskCreate+0x148>
80000650:	18 98       	mov	r8,r12
80000652:	ef 48 ff f8 	st.w	r7[-8],r8
	MEM_CHECK(tcbStack);
80000656:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000065a:	58 08       	cp.w	r8,0
8000065c:	c0 31       	brne	80000662 <ROSA_taskCreate+0x4a>
8000065e:	3f f8       	mov	r8,-1
80000660:	c7 b8       	rjmp	80000756 <ROSA_taskCreate+0x13e>
	
	pth = (tcb **) malloc(sizeof(ROSA_taskHandle_t));
80000662:	30 4c       	mov	r12,4
80000664:	f0 1f 00 3f 	mcall	80000760 <ROSA_taskCreate+0x148>
80000668:	18 98       	mov	r8,r12
8000066a:	ef 48 ff fc 	st.w	r7[-4],r8
	*pth = (tcb *) malloc(sizeof(tcb));
8000066e:	37 8c       	mov	r12,120
80000670:	f0 1f 00 3c 	mcall	80000760 <ROSA_taskCreate+0x148>
80000674:	18 98       	mov	r8,r12
80000676:	10 99       	mov	r9,r8
80000678:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000067c:	91 09       	st.w	r8[0x0],r9
	MEM_CHECK(*pth);
8000067e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000682:	70 08       	ld.w	r8,r8[0x0]
80000684:	58 08       	cp.w	r8,0
80000686:	c0 31       	brne	8000068c <ROSA_taskCreate+0x74>
80000688:	3f f8       	mov	r8,-1
8000068a:	c6 68       	rjmp	80000756 <ROSA_taskCreate+0x13e>
	
	*pth_a = pth;
8000068c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000690:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000694:	91 09       	st.w	r8[0x0],r9
	
	(*pth)->priority = prio;
80000696:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000069a:	70 09       	ld.w	r9,r8[0x0]
8000069c:	ef 38 ff e4 	ld.ub	r8,r7[-28]
800006a0:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
800006a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006a8:	70 0a       	ld.w	r10,r8[0x0]
800006aa:	30 08       	mov	r8,0
800006ac:	30 09       	mov	r9,0
800006ae:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
800006b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006b6:	70 09       	ld.w	r9,r8[0x0]
800006b8:	30 08       	mov	r8,0
800006ba:	f3 68 00 70 	st.b	r9[112],r8
	(*pth)->originalPriority = prio;
800006be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006c2:	70 09       	ld.w	r9,r8[0x0]
800006c4:	ef 38 ff e4 	ld.ub	r8,r7[-28]
800006c8:	f3 68 00 71 	st.b	r9[113],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
800006cc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800006d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800006d4:	72 0c       	ld.w	r12,r9[0x0]
800006d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800006da:	ee fa ff ec 	ld.w	r10,r7[-20]
800006de:	ee fb ff f0 	ld.w	r11,r7[-16]
800006e2:	f0 1f 00 21 	mcall	80000764 <ROSA_taskCreate+0x14c>
	
	interruptDisable();
800006e6:	f0 1f 00 21 	mcall	80000768 <ROSA_taskCreate+0x150>
	ROSA_TM_ACTION(PA[(*pth)->priority], *pth, Install);
800006ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006ee:	70 08       	ld.w	r8,r8[0x0]
800006f0:	f1 38 00 64 	ld.ub	r8,r8[100]
800006f4:	10 99       	mov	r9,r8
800006f6:	49 e8       	lddpc	r8,8000076c <ROSA_taskCreate+0x154>
800006f8:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800006fc:	49 d8       	lddpc	r8,80000770 <ROSA_taskCreate+0x158>
800006fe:	91 09       	st.w	r8[0x0],r9
80000700:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000704:	70 08       	ld.w	r8,r8[0x0]
80000706:	10 9c       	mov	r12,r8
80000708:	f0 1f 00 1b 	mcall	80000774 <ROSA_taskCreate+0x15c>
8000070c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000710:	70 08       	ld.w	r8,r8[0x0]
80000712:	f1 38 00 64 	ld.ub	r8,r8[100]
80000716:	10 99       	mov	r9,r8
80000718:	49 68       	lddpc	r8,80000770 <ROSA_taskCreate+0x158>
8000071a:	70 0a       	ld.w	r10,r8[0x0]
8000071c:	49 48       	lddpc	r8,8000076c <ROSA_taskCreate+0x154>
8000071e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	interruptEnable();
80000722:	f0 1f 00 16 	mcall	80000778 <ROSA_taskCreate+0x160>
	if ((EXECTASK) && (EXECTASK->priority < prio))
80000726:	49 68       	lddpc	r8,8000077c <ROSA_taskCreate+0x164>
80000728:	70 08       	ld.w	r8,r8[0x0]
8000072a:	58 08       	cp.w	r8,0
8000072c:	c1 40       	breq	80000754 <ROSA_taskCreate+0x13c>
8000072e:	49 48       	lddpc	r8,8000077c <ROSA_taskCreate+0x164>
80000730:	70 08       	ld.w	r8,r8[0x0]
80000732:	f1 38 00 64 	ld.ub	r8,r8[100]
80000736:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8000073a:	f0 09 18 00 	cp.b	r9,r8
8000073e:	e0 88 00 0b 	brls	80000754 <ROSA_taskCreate+0x13c>
	{
		PREEMPTASK = PA[prio];
80000742:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80000746:	48 a8       	lddpc	r8,8000076c <ROSA_taskCreate+0x154>
80000748:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000074c:	48 d8       	lddpc	r8,80000780 <ROSA_taskCreate+0x168>
8000074e:	91 09       	st.w	r8[0x0],r9
		ROSA_yield();
80000750:	f0 1f 00 0d 	mcall	80000784 <ROSA_taskCreate+0x16c>
	}	
	
	return 0;
80000754:	30 08       	mov	r8,0
}
80000756:	10 9c       	mov	r12,r8
80000758:	2f 9d       	sub	sp,-28
8000075a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000075e:	00 00       	add	r0,r0
80000760:	80 00       	ld.sh	r0,r0[0x0]
80000762:	13 2c       	ld.uh	r12,r9++
80000764:	80 00       	ld.sh	r0,r0[0x0]
80000766:	05 64       	ld.uh	r4,--r2
80000768:	80 00       	ld.sh	r0,r0[0x0]
8000076a:	1d 66       	ld.uh	r6,--lr
8000076c:	00 00       	add	r0,r0
8000076e:	06 70       	tst	r0,r3
80000770:	00 00       	add	r0,r0
80000772:	06 6c       	and	r12,r3
80000774:	80 00       	ld.sh	r0,r0[0x0]
80000776:	01 c4       	ld.ub	r4,r0[0x4]
80000778:	80 00       	ld.sh	r0,r0[0x0]
8000077a:	1d 6a       	ld.uh	r10,--lr
8000077c:	00 00       	add	r0,r0
8000077e:	07 20       	ld.uh	r0,r3++
80000780:	00 00       	add	r0,r0
80000782:	06 a4       	st.w	r3++,r4
80000784:	80 00       	ld.sh	r0,r0[0x0]
80000786:	09 fe       	ld.ub	lr,r4[0x7]

80000788 <ROSA_delay>:
/* ROSA_delay()															*/
/*																		*/
/* Suspends the calling task for the given number of ticks				*/
/************************************************************************/
int16_t ROSA_delay(uint64_t ticks)
{
80000788:	eb cd 40 c0 	pushm	r6-r7,lr
8000078c:	1a 97       	mov	r7,sp
8000078e:	20 5d       	sub	sp,20
80000790:	ee eb ff ec 	st.d	r7[-20],r10
	uint64_t dv;
	uint8_t pr;
	
	interruptDisable();
80000794:	f0 1f 00 5e 	mcall	8000090c <ROSA_delay+0x184>
	
	dv = ROSA_getTickCount() + ticks;
80000798:	f0 1f 00 5e 	mcall	80000910 <ROSA_delay+0x188>
8000079c:	ee e8 ff ec 	ld.d	r8,r7[-20]
800007a0:	f4 08 00 08 	add	r8,r10,r8
800007a4:	f6 09 00 49 	adc	r9,r11,r9
800007a8:	ee e9 ff f4 	st.d	r7[-12],r8
	pr = EXECTASK->priority;
800007ac:	4d a8       	lddpc	r8,80000914 <ROSA_delay+0x18c>
800007ae:	70 08       	ld.w	r8,r8[0x0]
800007b0:	f1 38 00 64 	ld.ub	r8,r8[100]
800007b4:	ef 68 ff ff 	st.b	r7[-1],r8
	
	EXECTASK->delay = dv;
800007b8:	4d 78       	lddpc	r8,80000914 <ROSA_delay+0x18c>
800007ba:	70 0a       	ld.w	r10,r8[0x0]
800007bc:	ee e8 ff f4 	ld.d	r8,r7[-12]
800007c0:	f4 e9 00 68 	st.d	r10[104],r8

	/* Extract task from its queue */
	ROSA_TM_ACTION(PA[pr], EXECTASK, Uninstall);
800007c4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800007c8:	4d 48       	lddpc	r8,80000918 <ROSA_delay+0x190>
800007ca:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800007ce:	4d 48       	lddpc	r8,8000091c <ROSA_delay+0x194>
800007d0:	91 09       	st.w	r8[0x0],r9
800007d2:	4d 18       	lddpc	r8,80000914 <ROSA_delay+0x18c>
800007d4:	70 08       	ld.w	r8,r8[0x0]
800007d6:	10 9c       	mov	r12,r8
800007d8:	f0 1f 00 52 	mcall	80000920 <ROSA_delay+0x198>
800007dc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800007e0:	4c f8       	lddpc	r8,8000091c <ROSA_delay+0x194>
800007e2:	70 0a       	ld.w	r10,r8[0x0]
800007e4:	4c d8       	lddpc	r8,80000918 <ROSA_delay+0x190>
800007e6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	
	/* Check the current queue for emptiness */	
	if (PA[pr])
800007ea:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800007ee:	4c b8       	lddpc	r8,80000918 <ROSA_delay+0x190>
800007f0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800007f4:	58 08       	cp.w	r8,0
800007f6:	c0 a0       	breq	8000080a <ROSA_delay+0x82>
	{
		PREEMPTASK = PA[pr]->nexttcb;
800007f8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800007fc:	4c 78       	lddpc	r8,80000918 <ROSA_delay+0x190>
800007fe:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000802:	70 09       	ld.w	r9,r8[0x0]
80000804:	4c 88       	lddpc	r8,80000924 <ROSA_delay+0x19c>
80000806:	91 09       	st.w	r8[0x0],r9
80000808:	c0 68       	rjmp	80000814 <ROSA_delay+0x8c>
	}
	else
	{
		PREEMPTASK = readyQueueSearch();	
8000080a:	f0 1f 00 48 	mcall	80000928 <ROSA_delay+0x1a0>
8000080e:	18 99       	mov	r9,r12
80000810:	4c 58       	lddpc	r8,80000924 <ROSA_delay+0x19c>
80000812:	91 09       	st.w	r8[0x0],r9
	}
	
	if (!DQ)
80000814:	4c 68       	lddpc	r8,8000092c <ROSA_delay+0x1a4>
80000816:	70 08       	ld.w	r8,r8[0x0]
80000818:	58 08       	cp.w	r8,0
8000081a:	c0 b1       	brne	80000830 <ROSA_delay+0xa8>
	{
		DQ = EXECTASK;
8000081c:	4b e8       	lddpc	r8,80000914 <ROSA_delay+0x18c>
8000081e:	70 09       	ld.w	r9,r8[0x0]
80000820:	4c 38       	lddpc	r8,8000092c <ROSA_delay+0x1a4>
80000822:	91 09       	st.w	r8[0x0],r9
		EXECTASK->nexttcb = DQ;
80000824:	4b c8       	lddpc	r8,80000914 <ROSA_delay+0x18c>
80000826:	70 08       	ld.w	r8,r8[0x0]
80000828:	4c 19       	lddpc	r9,8000092c <ROSA_delay+0x1a4>
8000082a:	72 09       	ld.w	r9,r9[0x0]
8000082c:	91 09       	st.w	r8[0x0],r9
8000082e:	c3 f8       	rjmp	800008ac <ROSA_delay+0x124>
	}
	else if (DQ->nexttcb == DQ)
80000830:	4b f8       	lddpc	r8,8000092c <ROSA_delay+0x1a4>
80000832:	70 08       	ld.w	r8,r8[0x0]
80000834:	70 09       	ld.w	r9,r8[0x0]
80000836:	4b e8       	lddpc	r8,8000092c <ROSA_delay+0x1a4>
80000838:	70 08       	ld.w	r8,r8[0x0]
8000083a:	10 39       	cp.w	r9,r8
8000083c:	c0 c1       	brne	80000854 <ROSA_delay+0xcc>
	{
		DQ->nexttcb = EXECTASK;
8000083e:	4b c8       	lddpc	r8,8000092c <ROSA_delay+0x1a4>
80000840:	70 08       	ld.w	r8,r8[0x0]
80000842:	4b 59       	lddpc	r9,80000914 <ROSA_delay+0x18c>
80000844:	72 09       	ld.w	r9,r9[0x0]
80000846:	91 09       	st.w	r8[0x0],r9
		EXECTASK->nexttcb = DQ;
80000848:	4b 38       	lddpc	r8,80000914 <ROSA_delay+0x18c>
8000084a:	70 08       	ld.w	r8,r8[0x0]
8000084c:	4b 89       	lddpc	r9,8000092c <ROSA_delay+0x1a4>
8000084e:	72 09       	ld.w	r9,r9[0x0]
80000850:	91 09       	st.w	r8[0x0],r9
80000852:	c2 d8       	rjmp	800008ac <ROSA_delay+0x124>
	}
	else
	{
		TCBLIST = DQ;
80000854:	4b 68       	lddpc	r8,8000092c <ROSA_delay+0x1a4>
80000856:	70 09       	ld.w	r9,r8[0x0]
80000858:	4b 18       	lddpc	r8,8000091c <ROSA_delay+0x194>
8000085a:	91 09       	st.w	r8[0x0],r9
		while (!( (TCBLIST->delay <= dv) && (dv <= TCBLIST->nexttcb->delay) ) && (TCBLIST->nexttcb != DQ))
8000085c:	c0 68       	rjmp	80000868 <ROSA_delay+0xe0>
			TCBLIST = TCBLIST->nexttcb;
8000085e:	4b 08       	lddpc	r8,8000091c <ROSA_delay+0x194>
80000860:	70 08       	ld.w	r8,r8[0x0]
80000862:	70 09       	ld.w	r9,r8[0x0]
80000864:	4a e8       	lddpc	r8,8000091c <ROSA_delay+0x194>
80000866:	91 09       	st.w	r8[0x0],r9
		EXECTASK->nexttcb = DQ;
	}
	else
	{
		TCBLIST = DQ;
		while (!( (TCBLIST->delay <= dv) && (dv <= TCBLIST->nexttcb->delay) ) && (TCBLIST->nexttcb != DQ))
80000868:	4a d8       	lddpc	r8,8000091c <ROSA_delay+0x194>
8000086a:	70 08       	ld.w	r8,r8[0x0]
8000086c:	f0 ea 00 68 	ld.d	r10,r8[104]
80000870:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000874:	10 3a       	cp.w	r10,r8
80000876:	f2 0b 13 00 	cpc	r11,r9
8000087a:	e0 8b 00 0d 	brhi	80000894 <ROSA_delay+0x10c>
8000087e:	4a 88       	lddpc	r8,8000091c <ROSA_delay+0x194>
80000880:	70 08       	ld.w	r8,r8[0x0]
80000882:	70 08       	ld.w	r8,r8[0x0]
80000884:	f0 ea 00 68 	ld.d	r10,r8[104]
80000888:	ee e8 ff f4 	ld.d	r8,r7[-12]
8000088c:	10 3a       	cp.w	r10,r8
8000088e:	f2 0b 13 00 	cpc	r11,r9
80000892:	c0 82       	brcc	800008a2 <ROSA_delay+0x11a>
80000894:	4a 28       	lddpc	r8,8000091c <ROSA_delay+0x194>
80000896:	70 08       	ld.w	r8,r8[0x0]
80000898:	70 09       	ld.w	r9,r8[0x0]
8000089a:	4a 58       	lddpc	r8,8000092c <ROSA_delay+0x1a4>
8000089c:	70 08       	ld.w	r8,r8[0x0]
8000089e:	10 39       	cp.w	r9,r8
800008a0:	cd f1       	brne	8000085e <ROSA_delay+0xd6>
			TCBLIST = TCBLIST->nexttcb;
		ROSA_tcbInstall(EXECTASK);
800008a2:	49 d8       	lddpc	r8,80000914 <ROSA_delay+0x18c>
800008a4:	70 08       	ld.w	r8,r8[0x0]
800008a6:	10 9c       	mov	r12,r8
800008a8:	f0 1f 00 22 	mcall	80000930 <ROSA_delay+0x1a8>
	}
	
	if (DQ->delay > EXECTASK->delay)
800008ac:	4a 08       	lddpc	r8,8000092c <ROSA_delay+0x1a4>
800008ae:	70 08       	ld.w	r8,r8[0x0]
800008b0:	f0 ea 00 68 	ld.d	r10,r8[104]
800008b4:	49 88       	lddpc	r8,80000914 <ROSA_delay+0x18c>
800008b6:	70 08       	ld.w	r8,r8[0x0]
800008b8:	f0 e8 00 68 	ld.d	r8,r8[104]
800008bc:	10 3a       	cp.w	r10,r8
800008be:	f2 0b 13 00 	cpc	r11,r9
800008c2:	e0 88 00 06 	brls	800008ce <ROSA_delay+0x146>
	{
		DQ = EXECTASK;
800008c6:	49 48       	lddpc	r8,80000914 <ROSA_delay+0x18c>
800008c8:	70 09       	ld.w	r9,r8[0x0]
800008ca:	49 98       	lddpc	r8,8000092c <ROSA_delay+0x1a4>
800008cc:	91 09       	st.w	r8[0x0],r9
/*	usartWriteLine(USART, "*********DELAY**********\n");
	usartWriteTcb(USART, DQ);
	usartWriteTcb(USART, DQ->nexttcb);
	usartWriteTcb(USART, DQ->nexttcb->nexttcb);
	usartWriteLine(USART, "************************\n");*/
	interruptEnable();
800008ce:	f0 1f 00 1a 	mcall	80000934 <ROSA_delay+0x1ac>
	
	ROSA_yield();
800008d2:	f0 1f 00 1a 	mcall	80000938 <ROSA_delay+0x1b0>
	
	if (ROSA_getTickCount()>dv)
800008d6:	f0 1f 00 0f 	mcall	80000910 <ROSA_delay+0x188>
800008da:	ee e8 ff f4 	ld.d	r8,r7[-12]
800008de:	10 3a       	cp.w	r10,r8
800008e0:	f2 0b 13 00 	cpc	r11,r9
800008e4:	e0 88 00 0e 	brls	80000900 <ROSA_delay+0x178>
	{
		return dv-ROSA_getTickCount();
800008e8:	ef 06 ff fa 	ld.sh	r6,r7[-6]
800008ec:	f0 1f 00 09 	mcall	80000910 <ROSA_delay+0x188>
800008f0:	14 98       	mov	r8,r10
800008f2:	16 99       	mov	r9,r11
800008f4:	5c 88       	casts.h	r8
800008f6:	ec 08 01 08 	sub	r8,r6,r8
800008fa:	5c 88       	casts.h	r8
800008fc:	5c 88       	casts.h	r8
800008fe:	c0 28       	rjmp	80000902 <ROSA_delay+0x17a>
	}
	
	return 0;
80000900:	30 08       	mov	r8,0
}
80000902:	10 9c       	mov	r12,r8
80000904:	2f bd       	sub	sp,-20
80000906:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000090a:	00 00       	add	r0,r0
8000090c:	80 00       	ld.sh	r0,r0[0x0]
8000090e:	1d 66       	ld.uh	r6,--lr
80000910:	80 00       	ld.sh	r0,r0[0x0]
80000912:	0b 3c       	ld.ub	r12,r5++
80000914:	00 00       	add	r0,r0
80000916:	07 20       	ld.uh	r0,r3++
80000918:	00 00       	add	r0,r0
8000091a:	06 70       	tst	r0,r3
8000091c:	00 00       	add	r0,r0
8000091e:	06 6c       	and	r12,r3
80000920:	80 00       	ld.sh	r0,r0[0x0]
80000922:	02 20       	rsub	r0,r1
80000924:	00 00       	add	r0,r0
80000926:	06 a4       	st.w	r3++,r4
80000928:	80 00       	ld.sh	r0,r0[0x0]
8000092a:	02 90       	mov	r0,r1
8000092c:	00 00       	add	r0,r0
8000092e:	07 24       	ld.uh	r4,r3++
80000930:	80 00       	ld.sh	r0,r0[0x0]
80000932:	01 c4       	ld.ub	r4,r0[0x4]
80000934:	80 00       	ld.sh	r0,r0[0x0]
80000936:	1d 6a       	ld.uh	r10,--lr
80000938:	80 00       	ld.sh	r0,r0[0x0]
8000093a:	09 fe       	ld.ub	lr,r4[0x7]

8000093c <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
8000093c:	4b 5c       	lddpc	r12,80000a10 <_yield+0xa>
	lda.w r11,EXECTASK
8000093e:	4b 6b       	lddpc	r11,80000a14 <_yield+0xe>
	ld.w r12,r12[0x0]
80000940:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
80000942:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000944:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000946:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000948:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
8000094c:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
8000094e:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
80000950:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
80000952:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80000956:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000958:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
8000095a:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
8000095c:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
8000095e:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
80000960:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
80000962:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000964:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80000966:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000968:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
8000096a:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
8000096c:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
8000096e:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000970:	1c 9f       	mov	pc,lr

80000972 <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
80000972:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000974:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80000976:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000978:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
8000097c:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80000980:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000984:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000988:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
8000098c:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000990:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000994:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000998:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
8000099c:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
8000099e:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
800009a0:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
800009a2:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
800009a4:	1c 9f       	mov	pc,lr

800009a6 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
800009a6:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
800009a8:	49 bc       	lddpc	r12,80000a14 <_yield+0xe>
	ld.w r12,r12[0x0]
800009aa:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
800009ac:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
800009ae:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
800009b0:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
800009b2:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
800009b4:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
800009b6:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
800009b8:	33 40       	mov	r0,52
	add r0,r12
800009ba:	18 00       	add	r0,r12
	stmts r0,r0-r11
800009bc:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
800009c0:	1a 90       	mov	r0,sp
	st.w --sp,r0
800009c2:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800009c4:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
800009c8:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
800009ca:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
800009cc:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
800009ce:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
800009d0:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
800009d2:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
800009d4:	1c 9f       	mov	pc,lr

800009d6 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800009d6:	49 0c       	lddpc	r12,80000a14 <_yield+0xe>
	ld.w r12,r12[0x0]
800009d8:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
800009da:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
800009dc:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
800009de:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
800009e2:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
800009e4:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800009e6:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
800009e8:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800009ea:	33 40       	mov	r0,52
	add r0,r12
800009ec:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800009ee:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800009f2:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
800009f4:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800009f6:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
800009f8:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
800009fa:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
800009fc:	d6 13       	rets

800009fe <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
800009fe:	d4 01       	pushm	lr
	lda.w lr,_yield
80000a00:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000a04:	d7 33       	scall

80000a06 <_yield>:
_yield:
	call contextSave
80000a06:	cd 0f       	rcall	800009a6 <contextSave>
	call scheduler
80000a08:	f0 1f 00 04 	mcall	80000a18 <_yield+0x12>
	call contextRestore
80000a0c:	ce 5f       	rcall	800009d6 <contextRestore>
80000a0e:	00 00       	add	r0,r0
80000a10:	00 00       	add	r0,r0
80000a12:	06 6c       	and	r12,r3
80000a14:	00 00       	add	r0,r0
80000a16:	07 20       	ld.uh	r0,r3++
80000a18:	80 00       	ld.sh	r0,r0[0x0]
80000a1a:	0a 1c       	sub	r12,r5

80000a1c <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000a1c:	eb cd 40 80 	pushm	r7,lr
80000a20:	1a 97       	mov	r7,sp
	{
		EXECTASK = EXECTASK->nexttcb;
	}
	else
	{
		if (PREEMPTASK) {
80000a22:	48 f8       	lddpc	r8,80000a5c <scheduler+0x40>
80000a24:	70 08       	ld.w	r8,r8[0x0]
80000a26:	58 08       	cp.w	r8,0
80000a28:	c0 90       	breq	80000a3a <scheduler+0x1e>
			EXECTASK = PREEMPTASK;
80000a2a:	48 d8       	lddpc	r8,80000a5c <scheduler+0x40>
80000a2c:	70 09       	ld.w	r9,r8[0x0]
80000a2e:	48 d8       	lddpc	r8,80000a60 <scheduler+0x44>
80000a30:	91 09       	st.w	r8[0x0],r9
			PREEMPTASK = NULL;
80000a32:	48 b8       	lddpc	r8,80000a5c <scheduler+0x40>
80000a34:	30 09       	mov	r9,0
80000a36:	91 09       	st.w	r8[0x0],r9
80000a38:	c1 08       	rjmp	80000a58 <scheduler+0x3c>
		}
		else {
			PA[EXECTASK->priority] = EXECTASK;
80000a3a:	48 a8       	lddpc	r8,80000a60 <scheduler+0x44>
80000a3c:	70 08       	ld.w	r8,r8[0x0]
80000a3e:	f1 38 00 64 	ld.ub	r8,r8[100]
80000a42:	10 99       	mov	r9,r8
80000a44:	48 78       	lddpc	r8,80000a60 <scheduler+0x44>
80000a46:	70 0a       	ld.w	r10,r8[0x0]
80000a48:	48 78       	lddpc	r8,80000a64 <scheduler+0x48>
80000a4a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			EXECTASK = EXECTASK->nexttcb;
80000a4e:	48 58       	lddpc	r8,80000a60 <scheduler+0x44>
80000a50:	70 08       	ld.w	r8,r8[0x0]
80000a52:	70 09       	ld.w	r9,r8[0x0]
80000a54:	48 38       	lddpc	r8,80000a60 <scheduler+0x44>
80000a56:	91 09       	st.w	r8[0x0],r9
		}
	}
}
80000a58:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a5c:	00 00       	add	r0,r0
80000a5e:	06 a4       	st.w	r3++,r4
80000a60:	00 00       	add	r0,r0
80000a62:	07 20       	ld.uh	r0,r3++
80000a64:	00 00       	add	r0,r0
80000a66:	06 70       	tst	r0,r3

80000a68 <ROSA_startScheduler>:
extern tcb * readyQueueSearch(void);

int startScheduler_GUARD = 0;

void ROSA_startScheduler(void)
{	
80000a68:	eb cd 40 80 	pushm	r7,lr
80000a6c:	1a 97       	mov	r7,sp
	if (startScheduler_GUARD == 0)
80000a6e:	48 98       	lddpc	r8,80000a90 <ROSA_startScheduler+0x28>
80000a70:	70 08       	ld.w	r8,r8[0x0]
80000a72:	58 08       	cp.w	r8,0
80000a74:	c0 c1       	brne	80000a8c <ROSA_startScheduler+0x24>
	{	
		TCBLIST = ((tcb *) readyQueueSearch())->nexttcb;
80000a76:	f0 1f 00 08 	mcall	80000a94 <ROSA_startScheduler+0x2c>
80000a7a:	18 98       	mov	r8,r12
80000a7c:	70 09       	ld.w	r9,r8[0x0]
80000a7e:	48 78       	lddpc	r8,80000a98 <ROSA_startScheduler+0x30>
80000a80:	91 09       	st.w	r8[0x0],r9
		startScheduler_GUARD = 1;
80000a82:	48 48       	lddpc	r8,80000a90 <ROSA_startScheduler+0x28>
80000a84:	30 19       	mov	r9,1
80000a86:	91 09       	st.w	r8[0x0],r9
		ROSA_start();
80000a88:	f0 1f 00 05 	mcall	80000a9c <ROSA_startScheduler+0x34>
	}
}
80000a8c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a90:	00 00       	add	r0,r0
80000a92:	06 28       	rsub	r8,r3
80000a94:	80 00       	ld.sh	r0,r0[0x0]
80000a96:	02 90       	mov	r0,r1
80000a98:	00 00       	add	r0,r0
80000a9a:	06 6c       	and	r12,r3
80000a9c:	80 00       	ld.sh	r0,r0[0x0]
80000a9e:	09 3c       	ld.ub	r12,r4++

80000aa0 <C.6.9529>:
80000aa0:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000ab0 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000ab0:	eb cd 40 80 	pushm	r7,lr
80000ab4:	1a 97       	mov	r7,sp
80000ab6:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000ab8:	fe 78 38 00 	mov	r8,-51200
80000abc:	ef 48 ff fc 	st.w	r7[-4],r8
	
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000ac0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ac4:	70 88       	ld.w	r8,r8[0x20]
80000ac6:	ef 48 ff f8 	st.w	r7[-8],r8
	if (sr & AVR32_TC_CPCS_MASK)
80000aca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ace:	e2 18 00 10 	andl	r8,0x10,COH
80000ad2:	c2 50       	breq	80000b1c <timerISR+0x6c>
	{
		systemTick++;
80000ad4:	49 48       	lddpc	r8,80000b24 <timerISR+0x74>
80000ad6:	f0 ea 00 00 	ld.d	r10,r8[0]
80000ada:	30 18       	mov	r8,1
80000adc:	30 09       	mov	r9,0
80000ade:	f4 08 00 08 	add	r8,r10,r8
80000ae2:	f6 09 00 49 	adc	r9,r11,r9
80000ae6:	49 0a       	lddpc	r10,80000b24 <timerISR+0x74>
80000ae8:	f4 e9 00 00 	st.d	r10[0],r8
		
		if ( (DQ) && (DQ->delay <= systemTick) ) 
80000aec:	48 f8       	lddpc	r8,80000b28 <timerISR+0x78>
80000aee:	70 08       	ld.w	r8,r8[0x0]
80000af0:	58 08       	cp.w	r8,0
80000af2:	c1 50       	breq	80000b1c <timerISR+0x6c>
80000af4:	48 d8       	lddpc	r8,80000b28 <timerISR+0x78>
80000af6:	70 08       	ld.w	r8,r8[0x0]
80000af8:	f0 ea 00 68 	ld.d	r10,r8[104]
80000afc:	48 a8       	lddpc	r8,80000b24 <timerISR+0x74>
80000afe:	f0 e8 00 00 	ld.d	r8,r8[0]
80000b02:	10 3a       	cp.w	r10,r8
80000b04:	f2 0b 13 00 	cpc	r11,r9
80000b08:	e0 8b 00 0a 	brhi	80000b1c <timerISR+0x6c>
		{
			interruptDisable();
80000b0c:	f0 1f 00 08 	mcall	80000b2c <timerISR+0x7c>
			PREEMPTASK = DELHANDL;
80000b10:	48 88       	lddpc	r8,80000b30 <timerISR+0x80>
80000b12:	70 09       	ld.w	r9,r8[0x0]
80000b14:	48 88       	lddpc	r8,80000b34 <timerISR+0x84>
80000b16:	91 09       	st.w	r8[0x0],r9
			ROSA_yieldFromISR();
80000b18:	f0 1f 00 08 	mcall	80000b38 <timerISR+0x88>
		}
	}
}
80000b1c:	2f ed       	sub	sp,-8
80000b1e:	e3 cd 40 80 	ldm	sp++,r7,lr
80000b22:	d6 03       	rete
80000b24:	00 00       	add	r0,r0
80000b26:	07 a0       	ld.ub	r0,r3[0x2]
80000b28:	00 00       	add	r0,r0
80000b2a:	07 24       	ld.uh	r4,r3++
80000b2c:	80 00       	ld.sh	r0,r0[0x0]
80000b2e:	1d 66       	ld.uh	r6,--lr
80000b30:	00 00       	add	r0,r0
80000b32:	06 a0       	st.w	r3++,r0
80000b34:	00 00       	add	r0,r0
80000b36:	06 a4       	st.w	r3++,r4
80000b38:	80 00       	ld.sh	r0,r0[0x0]
80000b3a:	01 68       	ld.uh	r8,--r0

80000b3c <ROSA_getTickCount>:
/*																		*/
/* Returns the current number of system ticks, relative to start		*/
/* of the system.                                                       */
/************************************************************************/
uint64_t ROSA_getTickCount()
{
80000b3c:	eb cd 40 80 	pushm	r7,lr
80000b40:	1a 97       	mov	r7,sp
	return systemTick;
80000b42:	48 48       	lddpc	r8,80000b50 <ROSA_getTickCount+0x14>
80000b44:	f0 e8 00 00 	ld.d	r8,r8[0]
}
80000b48:	10 9a       	mov	r10,r8
80000b4a:	12 9b       	mov	r11,r9
80000b4c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b50:	00 00       	add	r0,r0
80000b52:	07 a0       	ld.ub	r0,r3[0x2]

80000b54 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80000b54:	eb cd 40 80 	pushm	r7,lr
80000b58:	1a 97       	mov	r7,sp
80000b5a:	20 7d       	sub	sp,28
80000b5c:	ef 4c ff e4 	st.w	r7[-28],r12
	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000b60:	4a 48       	lddpc	r8,80000bf0 <timerPeriodSet+0x9c>
80000b62:	ee ca 00 18 	sub	r10,r7,24
80000b66:	10 9b       	mov	r11,r8
80000b68:	f6 e8 00 00 	ld.d	r8,r11[0]
80000b6c:	f4 e9 00 00 	st.d	r10[0],r8
80000b70:	f6 e8 00 08 	ld.d	r8,r11[8]
80000b74:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000b78:	30 48       	mov	r8,4
80000b7a:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80000b7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b82:	20 18       	sub	r8,1
80000b84:	a3 68       	lsl	r8,0x2
80000b86:	ee 08 00 08 	add	r8,r7,r8
80000b8a:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000b8e:	e0 68 1b 00 	mov	r8,6912
80000b92:	ea 18 00 b7 	orh	r8,0xb7
80000b96:	f0 09 0c 08 	divs	r8,r8,r9
80000b9a:	10 99       	mov	r9,r8
80000b9c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000ba0:	b1 39       	mul	r9,r8
80000ba2:	e0 68 4d d3 	mov	r8,19923
80000ba6:	ea 18 10 62 	orh	r8,0x1062
80000baa:	f2 08 06 48 	mulu.d	r8,r9,r8
80000bae:	f2 08 16 06 	lsr	r8,r9,0x6
80000bb2:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80000bb6:	ee fc ff fc 	ld.w	r12,r7[-4]
80000bba:	f0 1f 00 0f 	mcall	80000bf4 <timerPeriodSet+0xa0>
	timerRCSet(rc);
80000bbe:	ee fc ff f8 	ld.w	r12,r7[-8]
80000bc2:	f0 1f 00 0e 	mcall	80000bf8 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80000bc6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bce:	f2 08 02 4a 	mul	r10,r9,r8
80000bd2:	e0 68 9f 81 	mov	r8,40833
80000bd6:	ea 18 16 5e 	orh	r8,0x165e
80000bda:	f4 08 04 48 	muls.d	r8,r10,r8
80000bde:	b5 49       	asr	r9,0x14
80000be0:	f4 08 14 1f 	asr	r8,r10,0x1f
80000be4:	f2 08 01 08 	sub	r8,r9,r8
}
80000be8:	10 9c       	mov	r12,r8
80000bea:	2f 9d       	sub	sp,-28
80000bec:	e3 cd 80 80 	ldm	sp++,r7,pc
80000bf0:	80 00       	ld.sh	r0,r0[0x0]
80000bf2:	0a a0       	st.w	r5++,r0
80000bf4:	80 00       	ld.sh	r0,r0[0x0]
80000bf6:	12 68       	and	r8,r9
80000bf8:	80 00       	ld.sh	r0,r0[0x0]
80000bfa:	12 52       	eor	r2,r9

80000bfc <buttonInit>:
80000bfc:	eb cd 40 80 	pushm	r7,lr
80000c00:	1a 97       	mov	r7,sp
80000c02:	30 1b       	mov	r11,1
80000c04:	35 8c       	mov	r12,88
80000c06:	f0 1f 00 07 	mcall	80000c20 <buttonInit+0x24>
80000c0a:	30 1b       	mov	r11,1
80000c0c:	35 5c       	mov	r12,85
80000c0e:	f0 1f 00 05 	mcall	80000c20 <buttonInit+0x24>
80000c12:	30 1b       	mov	r11,1
80000c14:	35 2c       	mov	r12,82
80000c16:	f0 1f 00 03 	mcall	80000c20 <buttonInit+0x24>
80000c1a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c1e:	00 00       	add	r0,r0
80000c20:	80 00       	ld.sh	r0,r0[0x0]
80000c22:	0c 5c       	eor	r12,r6

80000c24 <joystickInit>:
80000c24:	eb cd 40 80 	pushm	r7,lr
80000c28:	1a 97       	mov	r7,sp
80000c2a:	30 1b       	mov	r11,1
80000c2c:	31 bc       	mov	r12,27
80000c2e:	f0 1f 00 0b 	mcall	80000c58 <joystickInit+0x34>
80000c32:	30 1b       	mov	r11,1
80000c34:	31 9c       	mov	r12,25
80000c36:	f0 1f 00 09 	mcall	80000c58 <joystickInit+0x34>
80000c3a:	30 1b       	mov	r11,1
80000c3c:	31 cc       	mov	r12,28
80000c3e:	f0 1f 00 07 	mcall	80000c58 <joystickInit+0x34>
80000c42:	30 1b       	mov	r11,1
80000c44:	31 4c       	mov	r12,20
80000c46:	f0 1f 00 05 	mcall	80000c58 <joystickInit+0x34>
80000c4a:	30 1b       	mov	r11,1
80000c4c:	31 ac       	mov	r12,26
80000c4e:	f0 1f 00 03 	mcall	80000c58 <joystickInit+0x34>
80000c52:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c56:	00 00       	add	r0,r0
80000c58:	80 00       	ld.sh	r0,r0[0x0]
80000c5a:	0c 5c       	eor	r12,r6

80000c5c <gpioInit>:
80000c5c:	eb cd 40 80 	pushm	r7,lr
80000c60:	1a 97       	mov	r7,sp
80000c62:	20 7d       	sub	sp,28
80000c64:	ef 4c ff ec 	st.w	r7[-20],r12
80000c68:	ef 4b ff e8 	st.w	r7[-24],r11
80000c6c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c70:	a5 58       	asr	r8,0x5
80000c72:	ef 48 ff f4 	st.w	r7[-12],r8
80000c76:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c7a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000c7e:	ef 48 ff fc 	st.w	r7[-4],r8
80000c82:	30 19       	mov	r9,1
80000c84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c88:	f2 08 09 48 	lsl	r8,r9,r8
80000c8c:	ef 48 ff f8 	st.w	r7[-8],r8
80000c90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c94:	a9 68       	lsl	r8,0x8
80000c96:	e0 28 f0 00 	sub	r8,61440
80000c9a:	ef 48 ff f0 	st.w	r7[-16],r8
80000c9e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ca2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ca6:	91 19       	st.w	r8[0x4],r9
80000ca8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000cac:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cb0:	91 69       	st.w	r8[0x18],r9
80000cb2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000cb6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cba:	91 a9       	st.w	r8[0x28],r9
80000cbc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000cc0:	ef 48 ff e4 	st.w	r7[-28],r8
80000cc4:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000cc8:	58 08       	cp.w	r8,0
80000cca:	c0 60       	breq	80000cd6 <gpioInit+0x7a>
80000ccc:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000cd0:	58 18       	cp.w	r8,1
80000cd2:	c0 90       	breq	80000ce4 <gpioInit+0x88>
80000cd4:	c0 f8       	rjmp	80000cf2 <gpioInit+0x96>
80000cd6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000cda:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cde:	f1 49 00 44 	st.w	r8[68],r9
80000ce2:	c0 e8       	rjmp	80000cfe <gpioInit+0xa2>
80000ce4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ce8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cec:	f1 49 00 48 	st.w	r8[72],r9
80000cf0:	c0 78       	rjmp	80000cfe <gpioInit+0xa2>
80000cf2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000cf6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cfa:	f1 49 00 48 	st.w	r8[72],r9
80000cfe:	2f 9d       	sub	sp,-28
80000d00:	e3 cd 80 80 	ldm	sp++,r7,pc

80000d04 <gpioSet>:
80000d04:	eb cd 40 80 	pushm	r7,lr
80000d08:	1a 97       	mov	r7,sp
80000d0a:	20 5d       	sub	sp,20
80000d0c:	ef 4c ff ec 	st.w	r7[-20],r12
80000d10:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d14:	a5 58       	asr	r8,0x5
80000d16:	ef 48 ff f4 	st.w	r7[-12],r8
80000d1a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d1e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000d22:	ef 48 ff fc 	st.w	r7[-4],r8
80000d26:	30 19       	mov	r9,1
80000d28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d2c:	f2 08 09 48 	lsl	r8,r9,r8
80000d30:	ef 48 ff f8 	st.w	r7[-8],r8
80000d34:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d38:	a9 68       	lsl	r8,0x8
80000d3a:	e0 28 f0 00 	sub	r8,61440
80000d3e:	ef 48 ff f0 	st.w	r7[-16],r8
80000d42:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d46:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000d4a:	f1 49 00 54 	st.w	r8[84],r9
80000d4e:	2f bd       	sub	sp,-20
80000d50:	e3 cd 80 80 	ldm	sp++,r7,pc

80000d54 <gpioToggle>:
80000d54:	eb cd 40 80 	pushm	r7,lr
80000d58:	1a 97       	mov	r7,sp
80000d5a:	20 5d       	sub	sp,20
80000d5c:	ef 4c ff ec 	st.w	r7[-20],r12
80000d60:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d64:	a5 58       	asr	r8,0x5
80000d66:	ef 48 ff f4 	st.w	r7[-12],r8
80000d6a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d6e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000d72:	ef 48 ff fc 	st.w	r7[-4],r8
80000d76:	30 19       	mov	r9,1
80000d78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d7c:	f2 08 09 48 	lsl	r8,r9,r8
80000d80:	ef 48 ff f8 	st.w	r7[-8],r8
80000d84:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d88:	a9 68       	lsl	r8,0x8
80000d8a:	e0 28 f0 00 	sub	r8,61440
80000d8e:	ef 48 ff f0 	st.w	r7[-16],r8
80000d92:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d96:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000d9a:	f1 49 00 5c 	st.w	r8[92],r9
80000d9e:	2f bd       	sub	sp,-20
80000da0:	e3 cd 80 80 	ldm	sp++,r7,pc

80000da4 <ledInit>:
80000da4:	eb cd 40 80 	pushm	r7,lr
80000da8:	1a 97       	mov	r7,sp
80000daa:	20 9d       	sub	sp,36
80000dac:	49 e8       	lddpc	r8,80000e24 <ledInit+0x80>
80000dae:	ee cb 00 24 	sub	r11,r7,36
80000db2:	10 9a       	mov	r10,r8
80000db4:	f4 e8 00 00 	ld.d	r8,r10[0]
80000db8:	f6 e9 00 00 	st.d	r11[0],r8
80000dbc:	f4 e8 00 08 	ld.d	r8,r10[8]
80000dc0:	f6 e9 00 08 	st.d	r11[8],r8
80000dc4:	f4 e8 00 10 	ld.d	r8,r10[16]
80000dc8:	f6 e9 00 10 	st.d	r11[16],r8
80000dcc:	f4 e8 00 18 	ld.d	r8,r10[24]
80000dd0:	f6 e9 00 18 	st.d	r11[24],r8
80000dd4:	30 08       	mov	r8,0
80000dd6:	ef 48 ff fc 	st.w	r7[-4],r8
80000dda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dde:	a3 68       	lsl	r8,0x2
80000de0:	ee 08 00 08 	add	r8,r7,r8
80000de4:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000de8:	10 9c       	mov	r12,r8
80000dea:	f0 1f 00 10 	mcall	80000e28 <ledInit+0x84>
80000dee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000df2:	a3 68       	lsl	r8,0x2
80000df4:	ee 08 00 08 	add	r8,r7,r8
80000df8:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000dfc:	30 0b       	mov	r11,0
80000dfe:	10 9c       	mov	r12,r8
80000e00:	f0 1f 00 0b 	mcall	80000e2c <ledInit+0x88>
80000e04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e08:	58 78       	cp.w	r8,7
80000e0a:	5f 18       	srne	r8
80000e0c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000e10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e14:	2f f8       	sub	r8,-1
80000e16:	ef 48 ff fc 	st.w	r7[-4],r8
80000e1a:	58 09       	cp.w	r9,0
80000e1c:	cd f1       	brne	80000dda <ledInit+0x36>
80000e1e:	2f 7d       	sub	sp,-36
80000e20:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e24:	80 00       	ld.sh	r0,r0[0x0]
80000e26:	20 00       	sub	r0,0
80000e28:	80 00       	ld.sh	r0,r0[0x0]
80000e2a:	0e 30       	cp.w	r0,r7
80000e2c:	80 00       	ld.sh	r0,r0[0x0]
80000e2e:	0c 5c       	eor	r12,r6

80000e30 <ledOff>:
80000e30:	eb cd 40 80 	pushm	r7,lr
80000e34:	1a 97       	mov	r7,sp
80000e36:	20 1d       	sub	sp,4
80000e38:	ef 4c ff fc 	st.w	r7[-4],r12
80000e3c:	ee fc ff fc 	ld.w	r12,r7[-4]
80000e40:	f0 1f 00 03 	mcall	80000e4c <ledOff+0x1c>
80000e44:	2f fd       	sub	sp,-4
80000e46:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e4a:	00 00       	add	r0,r0
80000e4c:	80 00       	ld.sh	r0,r0[0x0]
80000e4e:	0d 04       	ld.w	r4,r6++

80000e50 <ledToggle>:
80000e50:	eb cd 40 80 	pushm	r7,lr
80000e54:	1a 97       	mov	r7,sp
80000e56:	20 1d       	sub	sp,4
80000e58:	ef 4c ff fc 	st.w	r7[-4],r12
80000e5c:	ee fc ff fc 	ld.w	r12,r7[-4]
80000e60:	f0 1f 00 03 	mcall	80000e6c <ledToggle+0x1c>
80000e64:	2f fd       	sub	sp,-4
80000e66:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e6a:	00 00       	add	r0,r0
80000e6c:	80 00       	ld.sh	r0,r0[0x0]
80000e6e:	0d 54       	ld.sh	r4,--r6

80000e70 <potInit>:
80000e70:	d3 01       	pushm	r11-r12
80000e72:	e0 6c 10 00 	mov	r12,4096
80000e76:	ea 1c ff ff 	orh	r12,0xffff
80000e7a:	31 6b       	mov	r11,22
80000e7c:	99 2b       	st.w	r12[0x8],r11
80000e7e:	99 6b       	st.w	r12[0x18],r11
80000e80:	99 6b       	st.w	r12[0x18],r11
80000e82:	e0 6c 3c 00 	mov	r12,15360
80000e86:	ea 1c ff ff 	orh	r12,0xffff
80000e8a:	30 1b       	mov	r11,1
80000e8c:	99 0b       	st.w	r12[0x0],r11
80000e8e:	e0 6b 0f 1f 	mov	r11,3871
80000e92:	b1 6b       	lsl	r11,0x10
80000e94:	99 1b       	st.w	r12[0x4],r11
80000e96:	30 2b       	mov	r11,2
80000e98:	99 4b       	st.w	r12[0x10],r11
80000e9a:	d3 02       	popm	r11-r12
80000e9c:	1c 9f       	mov	pc,lr

80000e9e <potGetValue>:
80000e9e:	d1 81       	pushm	r10-r11
80000ea0:	e0 6c 3c 00 	mov	r12,15360
80000ea4:	ea 1c ff ff 	orh	r12,0xffff
80000ea8:	30 2b       	mov	r11,2
80000eaa:	99 0b       	st.w	r12[0x0],r11

80000eac <a1>:
80000eac:	78 7a       	ld.w	r10,r12[0x1c]
80000eae:	16 7a       	tst	r10,r11
80000eb0:	cf e0       	breq	80000eac <a1>
80000eb2:	78 dc       	ld.w	r12,r12[0x34]
80000eb4:	d1 82       	popm	r10-r11
80000eb6:	1c 9f       	mov	pc,lr

80000eb8 <usartReset>:
80000eb8:	eb cd 40 80 	pushm	r7,lr
80000ebc:	1a 97       	mov	r7,sp
80000ebe:	20 3d       	sub	sp,12
80000ec0:	ef 4c ff f8 	st.w	r7[-8],r12
80000ec4:	f0 1f 00 16 	mcall	80000f1c <usartReset+0x64>
80000ec8:	18 98       	mov	r8,r12
80000eca:	ef 48 ff fc 	st.w	r7[-4],r8
80000ece:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ed2:	58 08       	cp.w	r8,0
80000ed4:	c0 30       	breq	80000eda <usartReset+0x22>
80000ed6:	f0 1f 00 13 	mcall	80000f20 <usartReset+0x68>
80000eda:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ede:	3f f8       	mov	r8,-1
80000ee0:	93 38       	st.w	r9[0xc],r8
80000ee2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ee6:	70 58       	ld.w	r8,r8[0x14]
80000ee8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000eec:	58 08       	cp.w	r8,0
80000eee:	c0 30       	breq	80000ef4 <usartReset+0x3c>
80000ef0:	f0 1f 00 0d 	mcall	80000f24 <usartReset+0x6c>
80000ef4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ef8:	30 08       	mov	r8,0
80000efa:	93 18       	st.w	r9[0x4],r8
80000efc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f00:	30 08       	mov	r8,0
80000f02:	93 98       	st.w	r9[0x24],r8
80000f04:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f08:	30 08       	mov	r8,0
80000f0a:	93 a8       	st.w	r9[0x28],r8
80000f0c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f10:	ea 68 61 0c 	mov	r8,680204
80000f14:	93 08       	st.w	r9[0x0],r8
80000f16:	2f dd       	sub	sp,-12
80000f18:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f1c:	80 00       	ld.sh	r0,r0[0x0]
80000f1e:	1d 6e       	ld.uh	lr,--lr
80000f20:	80 00       	ld.sh	r0,r0[0x0]
80000f22:	1d 66       	ld.uh	r6,--lr
80000f24:	80 00       	ld.sh	r0,r0[0x0]
80000f26:	1d 6a       	ld.uh	r10,--lr

80000f28 <usartSetBaudrate>:
80000f28:	eb cd 40 80 	pushm	r7,lr
80000f2c:	1a 97       	mov	r7,sp
80000f2e:	20 bd       	sub	sp,44
80000f30:	ef 4c ff ec 	st.w	r7[-20],r12
80000f34:	ef 4b ff e8 	st.w	r7[-24],r11
80000f38:	ef 4a ff e4 	st.w	r7[-28],r10
80000f3c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000f40:	f0 09 15 04 	lsl	r9,r8,0x4
80000f44:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000f48:	10 39       	cp.w	r9,r8
80000f4a:	e0 8b 00 06 	brhi	80000f56 <usartSetBaudrate+0x2e>
80000f4e:	31 09       	mov	r9,16
80000f50:	ef 49 ff d4 	st.w	r7[-44],r9
80000f54:	c0 48       	rjmp	80000f5c <usartSetBaudrate+0x34>
80000f56:	30 88       	mov	r8,8
80000f58:	ef 48 ff d4 	st.w	r7[-44],r8
80000f5c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80000f60:	ef 49 ff f0 	st.w	r7[-16],r9
80000f64:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000f68:	f0 0a 15 03 	lsl	r10,r8,0x3
80000f6c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000f70:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000f74:	f2 08 02 48 	mul	r8,r9,r8
80000f78:	a1 98       	lsr	r8,0x1
80000f7a:	10 0a       	add	r10,r8
80000f7c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000f80:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000f84:	f2 08 02 48 	mul	r8,r9,r8
80000f88:	f4 08 0d 08 	divu	r8,r10,r8
80000f8c:	ef 48 ff f4 	st.w	r7[-12],r8
80000f90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f94:	a3 98       	lsr	r8,0x3
80000f96:	ef 48 ff f8 	st.w	r7[-8],r8
80000f9a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f9e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000fa2:	ef 48 ff fc 	st.w	r7[-4],r8
80000fa6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000faa:	58 08       	cp.w	r8,0
80000fac:	c0 70       	breq	80000fba <usartSetBaudrate+0x92>
80000fae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fb2:	e0 48 ff ff 	cp.w	r8,65535
80000fb6:	e0 88 00 06 	brls	80000fc2 <usartSetBaudrate+0x9a>
80000fba:	30 18       	mov	r8,1
80000fbc:	ef 48 ff d8 	st.w	r7[-40],r8
80000fc0:	c2 c8       	rjmp	80001018 <usartSetBaudrate+0xf0>
80000fc2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000fc6:	70 18       	ld.w	r8,r8[0x4]
80000fc8:	10 99       	mov	r9,r8
80000fca:	e4 19 ff f7 	andh	r9,0xfff7
80000fce:	e0 19 fe cf 	andl	r9,0xfecf
80000fd2:	ef 49 ff dc 	st.w	r7[-36],r9
80000fd6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000fda:	59 08       	cp.w	r8,16
80000fdc:	c0 60       	breq	80000fe8 <usartSetBaudrate+0xc0>
80000fde:	e8 68 00 00 	mov	r8,524288
80000fe2:	ef 48 ff e0 	st.w	r7[-32],r8
80000fe6:	c0 48       	rjmp	80000fee <usartSetBaudrate+0xc6>
80000fe8:	30 09       	mov	r9,0
80000fea:	ef 49 ff e0 	st.w	r7[-32],r9
80000fee:	ee f9 ff dc 	ld.w	r9,r7[-36]
80000ff2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80000ff6:	10 49       	or	r9,r8
80000ff8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ffc:	91 19       	st.w	r8[0x4],r9
80000ffe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001002:	f0 09 15 10 	lsl	r9,r8,0x10
80001006:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000100a:	10 49       	or	r9,r8
8000100c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001010:	91 89       	st.w	r8[0x20],r9
80001012:	30 09       	mov	r9,0
80001014:	ef 49 ff d8 	st.w	r7[-40],r9
80001018:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000101c:	10 9c       	mov	r12,r8
8000101e:	2f 5d       	sub	sp,-44
80001020:	e3 cd 80 80 	ldm	sp++,r7,pc

80001024 <usartInit>:
80001024:	eb cd 40 80 	pushm	r7,lr
80001028:	1a 97       	mov	r7,sp
8000102a:	20 4d       	sub	sp,16
8000102c:	ef 4c ff f8 	st.w	r7[-8],r12
80001030:	ef 4b ff f4 	st.w	r7[-12],r11
80001034:	ef 4a ff f0 	st.w	r7[-16],r10
80001038:	fe 78 10 00 	mov	r8,-61440
8000103c:	ef 48 ff fc 	st.w	r7[-4],r8
80001040:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001044:	30 18       	mov	r8,1
80001046:	93 28       	st.w	r9[0x8],r8
80001048:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000104c:	30 28       	mov	r8,2
8000104e:	93 28       	st.w	r9[0x8],r8
80001050:	ee fc ff f8 	ld.w	r12,r7[-8]
80001054:	f0 1f 00 3b 	mcall	80001140 <usartInit+0x11c>
80001058:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000105c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001060:	70 08       	ld.w	r8,r8[0x0]
80001062:	12 9a       	mov	r10,r9
80001064:	10 9b       	mov	r11,r8
80001066:	ee fc ff f8 	ld.w	r12,r7[-8]
8000106a:	f0 1f 00 37 	mcall	80001144 <usartInit+0x120>
8000106e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001072:	11 c9       	ld.ub	r9,r8[0x4]
80001074:	30 98       	mov	r8,9
80001076:	f0 09 18 00 	cp.b	r9,r8
8000107a:	c0 a1       	brne	8000108e <usartInit+0x6a>
8000107c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001080:	70 18       	ld.w	r8,r8[0x4]
80001082:	10 99       	mov	r9,r8
80001084:	b1 b9       	sbr	r9,0x11
80001086:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000108a:	91 19       	st.w	r8[0x4],r9
8000108c:	c0 d8       	rjmp	800010a6 <usartInit+0x82>
8000108e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001092:	70 19       	ld.w	r9,r8[0x4]
80001094:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001098:	11 c8       	ld.ub	r8,r8[0x4]
8000109a:	20 58       	sub	r8,5
8000109c:	a7 68       	lsl	r8,0x6
8000109e:	10 49       	or	r9,r8
800010a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010a4:	91 19       	st.w	r8[0x4],r9
800010a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010aa:	70 1a       	ld.w	r10,r8[0x4]
800010ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010b0:	11 d8       	ld.ub	r8,r8[0x5]
800010b2:	f0 09 15 09 	lsl	r9,r8,0x9
800010b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010ba:	f1 38 00 08 	ld.ub	r8,r8[8]
800010be:	af 68       	lsl	r8,0xe
800010c0:	f3 e8 10 08 	or	r8,r9,r8
800010c4:	f5 e8 10 09 	or	r9,r10,r8
800010c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010cc:	91 19       	st.w	r8[0x4],r9
800010ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010d2:	90 39       	ld.sh	r9,r8[0x6]
800010d4:	30 28       	mov	r8,2
800010d6:	f0 09 19 00 	cp.h	r9,r8
800010da:	e0 88 00 14 	brls	80001102 <usartInit+0xde>
800010de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010e2:	70 18       	ld.w	r8,r8[0x4]
800010e4:	10 99       	mov	r9,r8
800010e6:	ad b9       	sbr	r9,0xd
800010e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010ec:	91 19       	st.w	r8[0x4],r9
800010ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010f2:	90 38       	ld.sh	r8,r8[0x6]
800010f4:	5c 78       	castu.h	r8
800010f6:	20 28       	sub	r8,2
800010f8:	10 99       	mov	r9,r8
800010fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010fe:	91 a9       	st.w	r8[0x28],r9
80001100:	c0 d8       	rjmp	8000111a <usartInit+0xf6>
80001102:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001106:	70 19       	ld.w	r9,r8[0x4]
80001108:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000110c:	90 38       	ld.sh	r8,r8[0x6]
8000110e:	5c 78       	castu.h	r8
80001110:	ad 68       	lsl	r8,0xc
80001112:	10 49       	or	r9,r8
80001114:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001118:	91 19       	st.w	r8[0x4],r9
8000111a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000111e:	70 18       	ld.w	r8,r8[0x4]
80001120:	10 99       	mov	r9,r8
80001122:	e0 19 ff f0 	andl	r9,0xfff0
80001126:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000112a:	91 19       	st.w	r8[0x4],r9
8000112c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001130:	35 08       	mov	r8,80
80001132:	93 08       	st.w	r9[0x0],r8
80001134:	30 08       	mov	r8,0
80001136:	10 9c       	mov	r12,r8
80001138:	2f cd       	sub	sp,-16
8000113a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000113e:	00 00       	add	r0,r0
80001140:	80 00       	ld.sh	r0,r0[0x0]
80001142:	0e b8       	st.h	r7++,r8
80001144:	80 00       	ld.sh	r0,r0[0x0]
80001146:	0f 28       	ld.uh	r8,r7++

80001148 <usartWriteChar>:
80001148:	eb cd 40 80 	pushm	r7,lr
8000114c:	1a 97       	mov	r7,sp
8000114e:	20 3d       	sub	sp,12
80001150:	ef 4c ff f8 	st.w	r7[-8],r12
80001154:	16 98       	mov	r8,r11
80001156:	ef 68 ff f4 	st.b	r7[-12],r8
8000115a:	e4 68 00 00 	mov	r8,262144
8000115e:	ef 48 ff fc 	st.w	r7[-4],r8
80001162:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001166:	58 08       	cp.w	r8,0
80001168:	5f 18       	srne	r8
8000116a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000116e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001172:	20 18       	sub	r8,1
80001174:	ef 48 ff fc 	st.w	r7[-4],r8
80001178:	12 98       	mov	r8,r9
8000117a:	ec 18 00 01 	eorl	r8,0x1
8000117e:	5c 58       	castu.b	r8
80001180:	c0 71       	brne	8000118e <usartWriteChar+0x46>
80001182:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001186:	70 58       	ld.w	r8,r8[0x14]
80001188:	e2 18 00 02 	andl	r8,0x2,COH
8000118c:	ce b0       	breq	80001162 <usartWriteChar+0x1a>
8000118e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80001192:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001196:	91 79       	st.w	r8[0x1c],r9
80001198:	2f dd       	sub	sp,-12
8000119a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000119e:	d7 03       	nop

800011a0 <usartWriteLine>:
800011a0:	eb cd 40 80 	pushm	r7,lr
800011a4:	1a 97       	mov	r7,sp
800011a6:	20 2d       	sub	sp,8
800011a8:	ef 4c ff fc 	st.w	r7[-4],r12
800011ac:	ef 4b ff f8 	st.w	r7[-8],r11
800011b0:	c1 88       	rjmp	800011e0 <usartWriteLine+0x40>
800011b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800011b6:	11 88       	ld.ub	r8,r8[0x0]
800011b8:	58 a8       	cp.w	r8,10
800011ba:	c0 61       	brne	800011c6 <usartWriteLine+0x26>
800011bc:	30 db       	mov	r11,13
800011be:	ee fc ff fc 	ld.w	r12,r7[-4]
800011c2:	f0 1f 00 0c 	mcall	800011f0 <usartWriteLine+0x50>
800011c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800011ca:	11 88       	ld.ub	r8,r8[0x0]
800011cc:	10 9b       	mov	r11,r8
800011ce:	ee fc ff fc 	ld.w	r12,r7[-4]
800011d2:	f0 1f 00 08 	mcall	800011f0 <usartWriteLine+0x50>
800011d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800011da:	2f f8       	sub	r8,-1
800011dc:	ef 48 ff f8 	st.w	r7[-8],r8
800011e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800011e4:	11 88       	ld.ub	r8,r8[0x0]
800011e6:	58 08       	cp.w	r8,0
800011e8:	ce 51       	brne	800011b2 <usartWriteLine+0x12>
800011ea:	2f ed       	sub	sp,-8
800011ec:	e3 cd 80 80 	ldm	sp++,r7,pc
800011f0:	80 00       	ld.sh	r0,r0[0x0]
800011f2:	11 48       	ld.w	r8,--r8

800011f4 <timerInit>:
800011f4:	d5 01       	pushm	r11,lr
800011f6:	d2 01       	pushm	r12
800011f8:	f0 1f 00 28 	mcall	80001298 <timerClearInterrupt+0x10>
800011fc:	f0 1f 00 28 	mcall	8000129c <timerClearInterrupt+0x14>
80001200:	e0 6c 38 00 	mov	r12,14336
80001204:	ea 1c ff ff 	orh	r12,0xffff
80001208:	e0 6b c0 00 	mov	r11,49152
8000120c:	ea 1b 00 00 	orh	r11,0x0
80001210:	99 1b       	st.w	r12[0x4],r11
80001212:	30 1b       	mov	r11,1
80001214:	a5 6b       	lsl	r11,0x4
80001216:	99 9b       	st.w	r12[0x24],r11
80001218:	d2 02       	popm	r12
8000121a:	f0 1f 00 22 	mcall	800012a0 <timerClearInterrupt+0x18>
8000121e:	d5 02       	popm	r11,lr
80001220:	1c 9f       	mov	pc,lr

80001222 <timerReset>:
80001222:	d3 01       	pushm	r11-r12
80001224:	e0 6c 38 00 	mov	r12,14336
80001228:	ea 1c ff ff 	orh	r12,0xffff
8000122c:	30 5b       	mov	r11,5
8000122e:	99 0b       	st.w	r12[0x0],r11
80001230:	e0 6b 00 08 	mov	r11,8
80001234:	ea 1b 00 00 	orh	r11,0x0
80001238:	76 0b       	ld.w	r11,r11[0x0]
8000123a:	99 7b       	st.w	r12[0x1c],r11
8000123c:	d3 02       	popm	r11-r12
8000123e:	1c 9f       	mov	pc,lr

80001240 <timerStop>:
80001240:	d3 01       	pushm	r11-r12
80001242:	e0 6c 38 00 	mov	r12,14336
80001246:	ea 1c ff ff 	orh	r12,0xffff
8000124a:	30 2b       	mov	r11,2
8000124c:	99 0b       	st.w	r12[0x0],r11
8000124e:	d3 02       	popm	r11-r12
80001250:	1c 9f       	mov	pc,lr

80001252 <timerRCSet>:
80001252:	d3 01       	pushm	r11-r12
80001254:	49 4b       	lddpc	r11,800012a4 <timerClearInterrupt+0x1c>
80001256:	97 0c       	st.w	r11[0x0],r12
80001258:	e0 6c 38 00 	mov	r12,14336
8000125c:	ea 1c ff ff 	orh	r12,0xffff
80001260:	76 0b       	ld.w	r11,r11[0x0]
80001262:	99 7b       	st.w	r12[0x1c],r11
80001264:	d3 02       	popm	r11-r12
80001266:	1c 9f       	mov	pc,lr

80001268 <timerPrescaleSet>:
80001268:	d3 81       	pushm	r10-r12
8000126a:	49 0b       	lddpc	r11,800012a8 <timerClearInterrupt+0x20>
8000126c:	97 0c       	st.w	r11[0x0],r12
8000126e:	e0 6c 38 00 	mov	r12,14336
80001272:	ea 1c ff ff 	orh	r12,0xffff
80001276:	78 1a       	ld.w	r10,r12[0x4]
80001278:	3f 8b       	mov	r11,-8
8000127a:	16 6a       	and	r10,r11
8000127c:	48 bb       	lddpc	r11,800012a8 <timerClearInterrupt+0x20>
8000127e:	76 0b       	ld.w	r11,r11[0x0]
80001280:	14 4b       	or	r11,r10
80001282:	99 1b       	st.w	r12[0x4],r11
80001284:	d3 82       	popm	r10-r12
80001286:	1c 9f       	mov	pc,lr

80001288 <timerClearInterrupt>:
80001288:	d2 01       	pushm	r12
8000128a:	e0 6c 38 00 	mov	r12,14336
8000128e:	ea 1c ff ff 	orh	r12,0xffff
80001292:	78 8c       	ld.w	r12,r12[0x20]
80001294:	d2 02       	popm	r12
80001296:	1c 9f       	mov	pc,lr
80001298:	80 00       	ld.sh	r0,r0[0x0]
8000129a:	1d 66       	ld.uh	r6,--lr
8000129c:	80 00       	ld.sh	r0,r0[0x0]
8000129e:	12 88       	andn	r8,r9
800012a0:	80 00       	ld.sh	r0,r0[0x0]
800012a2:	0b 54       	ld.sh	r4,--r5
800012a4:	00 00       	add	r0,r0
800012a6:	00 08       	add	r8,r0
800012a8:	00 00       	add	r0,r0
800012aa:	00 0c       	add	r12,r0

800012ac <_stext>:
800012ac:	49 7d       	lddpc	sp,80001308 <udata_end+0x4>
800012ae:	49 80       	lddpc	r0,8000130c <udata_end+0x8>
800012b0:	1a d0       	st.w	--sp,r0
800012b2:	e5 cd 20 00 	ldmts	sp,sp
800012b6:	1b 00       	ld.w	r0,sp++
800012b8:	49 60       	lddpc	r0,80001310 <udata_end+0xc>
800012ba:	e3 b0 00 01 	mtsr	0x4,r0
800012be:	d5 53       	csrf	0x15
800012c0:	e0 6c 0c 00 	mov	r12,3072
800012c4:	ea 1c ff ff 	orh	r12,0xffff
800012c8:	e0 6b 01 07 	mov	r11,263
800012cc:	99 ab       	st.w	r12[0x28],r11
800012ce:	30 4b       	mov	r11,4
800012d0:	99 0b       	st.w	r12[0x0],r11
800012d2:	e0 6a 00 80 	mov	r10,128

800012d6 <xw8>:
800012d6:	79 5b       	ld.w	r11,r12[0x54]
800012d8:	14 7b       	tst	r11,r10
800012da:	cf e0       	breq	800012d6 <xw8>
800012dc:	30 5b       	mov	r11,5
800012de:	99 0b       	st.w	r12[0x0],r11

800012e0 <idata_>:
800012e0:	48 d0       	lddpc	r0,80001314 <udata_end+0x10>
800012e2:	48 e1       	lddpc	r1,80001318 <udata_end+0x14>
800012e4:	02 30       	cp.w	r0,r1
800012e6:	c0 62       	brcc	800012f2 <idata_end>
800012e8:	48 d2       	lddpc	r2,8000131c <udata_end+0x18>

800012ea <idata_loop>:
800012ea:	05 04       	ld.w	r4,r2++
800012ec:	00 a4       	st.w	r0++,r4
800012ee:	02 30       	cp.w	r0,r1
800012f0:	cf d3       	brcs	800012ea <idata_loop>

800012f2 <idata_end>:
800012f2:	48 c0       	lddpc	r0,80001320 <udata_end+0x1c>
800012f4:	48 c1       	lddpc	r1,80001324 <udata_end+0x20>
800012f6:	02 30       	cp.w	r0,r1
800012f8:	c0 62       	brcc	80001304 <udata_end>
800012fa:	30 02       	mov	r2,0
800012fc:	30 03       	mov	r3,0

800012fe <udata_loop>:
800012fe:	00 a2       	st.w	r0++,r2
80001300:	02 30       	cp.w	r0,r1
80001302:	cf e3       	brcs	800012fe <udata_loop>

80001304 <udata_end>:
80001304:	48 9f       	lddpc	pc,80001328 <udata_end+0x24>
80001306:	00 00       	add	r0,r0
80001308:	00 01       	add	r1,r0
8000130a:	00 00       	add	r0,r0
8000130c:	00 00       	add	r0,r0
8000130e:	f0 00       	*unknown*
80001310:	80 00       	ld.sh	r0,r0[0x0]
80001312:	1c 00       	add	r0,lr
80001314:	00 00       	add	r0,r0
80001316:	00 08       	add	r8,r0
80001318:	00 00       	add	r0,r0
8000131a:	05 18       	ld.sh	r8,r2++
8000131c:	80 00       	ld.sh	r0,r0[0x0]
8000131e:	20 88       	sub	r8,8
80001320:	00 00       	add	r0,r0
80001322:	05 18       	ld.sh	r8,r2++
80001324:	00 00       	add	r0,r0
80001326:	07 b0       	ld.ub	r0,r3[0x3]
80001328:	80 00       	ld.sh	r0,r0[0x0]
8000132a:	00 fc       	st.b	--r0,r12

8000132c <malloc>:
8000132c:	d4 01       	pushm	lr
8000132e:	48 48       	lddpc	r8,8000133c <malloc+0x10>
80001330:	18 9b       	mov	r11,r12
80001332:	70 0c       	ld.w	r12,r8[0x0]
80001334:	f0 1f 00 03 	mcall	80001340 <malloc+0x14>
80001338:	d8 02       	popm	pc
8000133a:	00 00       	add	r0,r0
8000133c:	00 00       	add	r0,r0
8000133e:	01 00       	ld.w	r0,r0++
80001340:	80 00       	ld.sh	r0,r0[0x0]
80001342:	13 44       	ld.w	r4,--r9

80001344 <_malloc_r>:
80001344:	d4 31       	pushm	r0-r7,lr
80001346:	f6 c8 ff f5 	sub	r8,r11,-11
8000134a:	18 95       	mov	r5,r12
8000134c:	10 97       	mov	r7,r8
8000134e:	e0 17 ff f8 	andl	r7,0xfff8
80001352:	59 68       	cp.w	r8,22
80001354:	f9 b7 08 10 	movls	r7,16
80001358:	16 37       	cp.w	r7,r11
8000135a:	5f 38       	srlo	r8
8000135c:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001360:	c0 50       	breq	8000136a <_malloc_r+0x26>
80001362:	30 c8       	mov	r8,12
80001364:	99 38       	st.w	r12[0xc],r8
80001366:	e0 8f 01 f3 	bral	8000174c <_malloc_r+0x408>
8000136a:	f0 1f 00 50 	mcall	800014a8 <_malloc_r+0x164>
8000136e:	e0 47 01 f7 	cp.w	r7,503
80001372:	e0 8b 00 1c 	brhi	800013aa <_malloc_r+0x66>
80001376:	ee 03 16 03 	lsr	r3,r7,0x3
8000137a:	4c d8       	lddpc	r8,800014ac <_malloc_r+0x168>
8000137c:	f0 03 00 38 	add	r8,r8,r3<<0x3
80001380:	70 36       	ld.w	r6,r8[0xc]
80001382:	10 36       	cp.w	r6,r8
80001384:	c0 61       	brne	80001390 <_malloc_r+0x4c>
80001386:	ec c8 ff f8 	sub	r8,r6,-8
8000138a:	70 36       	ld.w	r6,r8[0xc]
8000138c:	10 36       	cp.w	r6,r8
8000138e:	c0 c0       	breq	800013a6 <_malloc_r+0x62>
80001390:	6c 18       	ld.w	r8,r6[0x4]
80001392:	e0 18 ff fc 	andl	r8,0xfffc
80001396:	6c 3a       	ld.w	r10,r6[0xc]
80001398:	ec 08 00 09 	add	r9,r6,r8
8000139c:	0a 9c       	mov	r12,r5
8000139e:	6c 28       	ld.w	r8,r6[0x8]
800013a0:	95 28       	st.w	r10[0x8],r8
800013a2:	91 3a       	st.w	r8[0xc],r10
800013a4:	c4 68       	rjmp	80001430 <_malloc_r+0xec>
800013a6:	2f e3       	sub	r3,-2
800013a8:	c4 c8       	rjmp	80001440 <_malloc_r+0xfc>
800013aa:	ee 03 16 09 	lsr	r3,r7,0x9
800013ae:	c0 41       	brne	800013b6 <_malloc_r+0x72>
800013b0:	ee 03 16 03 	lsr	r3,r7,0x3
800013b4:	c2 68       	rjmp	80001400 <_malloc_r+0xbc>
800013b6:	58 43       	cp.w	r3,4
800013b8:	e0 8b 00 06 	brhi	800013c4 <_malloc_r+0x80>
800013bc:	ee 03 16 06 	lsr	r3,r7,0x6
800013c0:	2c 83       	sub	r3,-56
800013c2:	c1 f8       	rjmp	80001400 <_malloc_r+0xbc>
800013c4:	59 43       	cp.w	r3,20
800013c6:	e0 8b 00 04 	brhi	800013ce <_malloc_r+0x8a>
800013ca:	2a 53       	sub	r3,-91
800013cc:	c1 a8       	rjmp	80001400 <_malloc_r+0xbc>
800013ce:	e0 43 00 54 	cp.w	r3,84
800013d2:	e0 8b 00 06 	brhi	800013de <_malloc_r+0x9a>
800013d6:	ee 03 16 0c 	lsr	r3,r7,0xc
800013da:	29 23       	sub	r3,-110
800013dc:	c1 28       	rjmp	80001400 <_malloc_r+0xbc>
800013de:	e0 43 01 54 	cp.w	r3,340
800013e2:	e0 8b 00 06 	brhi	800013ee <_malloc_r+0xaa>
800013e6:	ee 03 16 0f 	lsr	r3,r7,0xf
800013ea:	28 93       	sub	r3,-119
800013ec:	c0 a8       	rjmp	80001400 <_malloc_r+0xbc>
800013ee:	e0 43 05 54 	cp.w	r3,1364
800013f2:	e0 88 00 04 	brls	800013fa <_malloc_r+0xb6>
800013f6:	37 e3       	mov	r3,126
800013f8:	c0 48       	rjmp	80001400 <_malloc_r+0xbc>
800013fa:	ee 03 16 12 	lsr	r3,r7,0x12
800013fe:	28 43       	sub	r3,-124
80001400:	4a ba       	lddpc	r10,800014ac <_malloc_r+0x168>
80001402:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80001406:	74 36       	ld.w	r6,r10[0xc]
80001408:	c1 98       	rjmp	8000143a <_malloc_r+0xf6>
8000140a:	6c 19       	ld.w	r9,r6[0x4]
8000140c:	e0 19 ff fc 	andl	r9,0xfffc
80001410:	f2 07 01 0b 	sub	r11,r9,r7
80001414:	58 fb       	cp.w	r11,15
80001416:	e0 8a 00 04 	brle	8000141e <_malloc_r+0xda>
8000141a:	20 13       	sub	r3,1
8000141c:	c1 18       	rjmp	8000143e <_malloc_r+0xfa>
8000141e:	6c 38       	ld.w	r8,r6[0xc]
80001420:	58 0b       	cp.w	r11,0
80001422:	c0 b5       	brlt	80001438 <_malloc_r+0xf4>
80001424:	6c 2a       	ld.w	r10,r6[0x8]
80001426:	ec 09 00 09 	add	r9,r6,r9
8000142a:	0a 9c       	mov	r12,r5
8000142c:	91 2a       	st.w	r8[0x8],r10
8000142e:	95 38       	st.w	r10[0xc],r8
80001430:	72 18       	ld.w	r8,r9[0x4]
80001432:	a1 a8       	sbr	r8,0x0
80001434:	93 18       	st.w	r9[0x4],r8
80001436:	cb c8       	rjmp	800015ae <_malloc_r+0x26a>
80001438:	10 96       	mov	r6,r8
8000143a:	14 36       	cp.w	r6,r10
8000143c:	ce 71       	brne	8000140a <_malloc_r+0xc6>
8000143e:	2f f3       	sub	r3,-1
80001440:	49 ba       	lddpc	r10,800014ac <_malloc_r+0x168>
80001442:	f4 cc ff f8 	sub	r12,r10,-8
80001446:	78 26       	ld.w	r6,r12[0x8]
80001448:	18 36       	cp.w	r6,r12
8000144a:	c6 e0       	breq	80001526 <_malloc_r+0x1e2>
8000144c:	6c 19       	ld.w	r9,r6[0x4]
8000144e:	e0 19 ff fc 	andl	r9,0xfffc
80001452:	f2 07 01 08 	sub	r8,r9,r7
80001456:	58 f8       	cp.w	r8,15
80001458:	e0 89 00 90 	brgt	80001578 <_malloc_r+0x234>
8000145c:	99 3c       	st.w	r12[0xc],r12
8000145e:	99 2c       	st.w	r12[0x8],r12
80001460:	58 08       	cp.w	r8,0
80001462:	c0 55       	brlt	8000146c <_malloc_r+0x128>
80001464:	ec 09 00 09 	add	r9,r6,r9
80001468:	0a 9c       	mov	r12,r5
8000146a:	ce 3b       	rjmp	80001430 <_malloc_r+0xec>
8000146c:	e0 49 01 ff 	cp.w	r9,511
80001470:	e0 8b 00 13 	brhi	80001496 <_malloc_r+0x152>
80001474:	a3 99       	lsr	r9,0x3
80001476:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000147a:	70 2b       	ld.w	r11,r8[0x8]
8000147c:	8d 38       	st.w	r6[0xc],r8
8000147e:	8d 2b       	st.w	r6[0x8],r11
80001480:	97 36       	st.w	r11[0xc],r6
80001482:	91 26       	st.w	r8[0x8],r6
80001484:	a3 49       	asr	r9,0x2
80001486:	74 18       	ld.w	r8,r10[0x4]
80001488:	30 1b       	mov	r11,1
8000148a:	f6 09 09 49 	lsl	r9,r11,r9
8000148e:	f1 e9 10 09 	or	r9,r8,r9
80001492:	95 19       	st.w	r10[0x4],r9
80001494:	c4 98       	rjmp	80001526 <_malloc_r+0x1e2>
80001496:	f2 0a 16 09 	lsr	r10,r9,0x9
8000149a:	58 4a       	cp.w	r10,4
8000149c:	e0 8b 00 0a 	brhi	800014b0 <_malloc_r+0x16c>
800014a0:	f2 0a 16 06 	lsr	r10,r9,0x6
800014a4:	2c 8a       	sub	r10,-56
800014a6:	c2 38       	rjmp	800014ec <_malloc_r+0x1a8>
800014a8:	80 00       	ld.sh	r0,r0[0x0]
800014aa:	17 94       	ld.ub	r4,r11[0x1]
800014ac:	00 00       	add	r0,r0
800014ae:	01 04       	ld.w	r4,r0++
800014b0:	59 4a       	cp.w	r10,20
800014b2:	e0 8b 00 04 	brhi	800014ba <_malloc_r+0x176>
800014b6:	2a 5a       	sub	r10,-91
800014b8:	c1 a8       	rjmp	800014ec <_malloc_r+0x1a8>
800014ba:	e0 4a 00 54 	cp.w	r10,84
800014be:	e0 8b 00 06 	brhi	800014ca <_malloc_r+0x186>
800014c2:	f2 0a 16 0c 	lsr	r10,r9,0xc
800014c6:	29 2a       	sub	r10,-110
800014c8:	c1 28       	rjmp	800014ec <_malloc_r+0x1a8>
800014ca:	e0 4a 01 54 	cp.w	r10,340
800014ce:	e0 8b 00 06 	brhi	800014da <_malloc_r+0x196>
800014d2:	f2 0a 16 0f 	lsr	r10,r9,0xf
800014d6:	28 9a       	sub	r10,-119
800014d8:	c0 a8       	rjmp	800014ec <_malloc_r+0x1a8>
800014da:	e0 4a 05 54 	cp.w	r10,1364
800014de:	e0 88 00 04 	brls	800014e6 <_malloc_r+0x1a2>
800014e2:	37 ea       	mov	r10,126
800014e4:	c0 48       	rjmp	800014ec <_malloc_r+0x1a8>
800014e6:	f2 0a 16 12 	lsr	r10,r9,0x12
800014ea:	28 4a       	sub	r10,-124
800014ec:	4c 8b       	lddpc	r11,8000160c <_malloc_r+0x2c8>
800014ee:	f6 0a 00 34 	add	r4,r11,r10<<0x3
800014f2:	68 28       	ld.w	r8,r4[0x8]
800014f4:	08 38       	cp.w	r8,r4
800014f6:	c0 e1       	brne	80001512 <_malloc_r+0x1ce>
800014f8:	76 19       	ld.w	r9,r11[0x4]
800014fa:	a3 4a       	asr	r10,0x2
800014fc:	30 1e       	mov	lr,1
800014fe:	fc 0a 09 4a 	lsl	r10,lr,r10
80001502:	f3 ea 10 0a 	or	r10,r9,r10
80001506:	10 99       	mov	r9,r8
80001508:	97 1a       	st.w	r11[0x4],r10
8000150a:	c0 a8       	rjmp	8000151e <_malloc_r+0x1da>
8000150c:	70 28       	ld.w	r8,r8[0x8]
8000150e:	08 38       	cp.w	r8,r4
80001510:	c0 60       	breq	8000151c <_malloc_r+0x1d8>
80001512:	70 1a       	ld.w	r10,r8[0x4]
80001514:	e0 1a ff fc 	andl	r10,0xfffc
80001518:	14 39       	cp.w	r9,r10
8000151a:	cf 93       	brcs	8000150c <_malloc_r+0x1c8>
8000151c:	70 39       	ld.w	r9,r8[0xc]
8000151e:	8d 39       	st.w	r6[0xc],r9
80001520:	8d 28       	st.w	r6[0x8],r8
80001522:	91 36       	st.w	r8[0xc],r6
80001524:	93 26       	st.w	r9[0x8],r6
80001526:	e6 08 14 02 	asr	r8,r3,0x2
8000152a:	30 1b       	mov	r11,1
8000152c:	4b 84       	lddpc	r4,8000160c <_malloc_r+0x2c8>
8000152e:	f6 08 09 4b 	lsl	r11,r11,r8
80001532:	68 18       	ld.w	r8,r4[0x4]
80001534:	10 3b       	cp.w	r11,r8
80001536:	e0 8b 00 6f 	brhi	80001614 <_malloc_r+0x2d0>
8000153a:	f7 e8 00 09 	and	r9,r11,r8
8000153e:	c0 b1       	brne	80001554 <_malloc_r+0x210>
80001540:	e0 13 ff fc 	andl	r3,0xfffc
80001544:	a1 7b       	lsl	r11,0x1
80001546:	2f c3       	sub	r3,-4
80001548:	c0 38       	rjmp	8000154e <_malloc_r+0x20a>
8000154a:	2f c3       	sub	r3,-4
8000154c:	a1 7b       	lsl	r11,0x1
8000154e:	f7 e8 00 09 	and	r9,r11,r8
80001552:	cf c0       	breq	8000154a <_malloc_r+0x206>
80001554:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001558:	06 92       	mov	r2,r3
8000155a:	1c 91       	mov	r1,lr
8000155c:	62 36       	ld.w	r6,r1[0xc]
8000155e:	c2 e8       	rjmp	800015ba <_malloc_r+0x276>
80001560:	6c 1a       	ld.w	r10,r6[0x4]
80001562:	e0 1a ff fc 	andl	r10,0xfffc
80001566:	f4 07 01 08 	sub	r8,r10,r7
8000156a:	58 f8       	cp.w	r8,15
8000156c:	e0 8a 00 15 	brle	80001596 <_malloc_r+0x252>
80001570:	6c 3a       	ld.w	r10,r6[0xc]
80001572:	6c 29       	ld.w	r9,r6[0x8]
80001574:	95 29       	st.w	r10[0x8],r9
80001576:	93 3a       	st.w	r9[0xc],r10
80001578:	0e 99       	mov	r9,r7
8000157a:	ec 07 00 07 	add	r7,r6,r7
8000157e:	a1 a9       	sbr	r9,0x0
80001580:	99 37       	st.w	r12[0xc],r7
80001582:	99 27       	st.w	r12[0x8],r7
80001584:	8d 19       	st.w	r6[0x4],r9
80001586:	ee 08 09 08 	st.w	r7[r8],r8
8000158a:	8f 2c       	st.w	r7[0x8],r12
8000158c:	8f 3c       	st.w	r7[0xc],r12
8000158e:	a1 a8       	sbr	r8,0x0
80001590:	0a 9c       	mov	r12,r5
80001592:	8f 18       	st.w	r7[0x4],r8
80001594:	c0 d8       	rjmp	800015ae <_malloc_r+0x26a>
80001596:	6c 39       	ld.w	r9,r6[0xc]
80001598:	58 08       	cp.w	r8,0
8000159a:	c0 f5       	brlt	800015b8 <_malloc_r+0x274>
8000159c:	ec 0a 00 0a 	add	r10,r6,r10
800015a0:	74 18       	ld.w	r8,r10[0x4]
800015a2:	a1 a8       	sbr	r8,0x0
800015a4:	0a 9c       	mov	r12,r5
800015a6:	95 18       	st.w	r10[0x4],r8
800015a8:	6c 28       	ld.w	r8,r6[0x8]
800015aa:	93 28       	st.w	r9[0x8],r8
800015ac:	91 39       	st.w	r8[0xc],r9
800015ae:	f0 1f 00 19 	mcall	80001610 <_malloc_r+0x2cc>
800015b2:	ec cc ff f8 	sub	r12,r6,-8
800015b6:	d8 32       	popm	r0-r7,pc
800015b8:	12 96       	mov	r6,r9
800015ba:	02 36       	cp.w	r6,r1
800015bc:	cd 21       	brne	80001560 <_malloc_r+0x21c>
800015be:	2f f2       	sub	r2,-1
800015c0:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800015c4:	c0 30       	breq	800015ca <_malloc_r+0x286>
800015c6:	2f 81       	sub	r1,-8
800015c8:	cc ab       	rjmp	8000155c <_malloc_r+0x218>
800015ca:	1c 98       	mov	r8,lr
800015cc:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800015d0:	c0 81       	brne	800015e0 <_malloc_r+0x29c>
800015d2:	68 19       	ld.w	r9,r4[0x4]
800015d4:	f6 08 11 ff 	rsub	r8,r11,-1
800015d8:	f3 e8 00 08 	and	r8,r9,r8
800015dc:	89 18       	st.w	r4[0x4],r8
800015de:	c0 78       	rjmp	800015ec <_malloc_r+0x2a8>
800015e0:	f0 c9 00 08 	sub	r9,r8,8
800015e4:	20 13       	sub	r3,1
800015e6:	70 08       	ld.w	r8,r8[0x0]
800015e8:	12 38       	cp.w	r8,r9
800015ea:	cf 10       	breq	800015cc <_malloc_r+0x288>
800015ec:	a1 7b       	lsl	r11,0x1
800015ee:	68 18       	ld.w	r8,r4[0x4]
800015f0:	10 3b       	cp.w	r11,r8
800015f2:	e0 8b 00 11 	brhi	80001614 <_malloc_r+0x2d0>
800015f6:	58 0b       	cp.w	r11,0
800015f8:	c0 e0       	breq	80001614 <_malloc_r+0x2d0>
800015fa:	04 93       	mov	r3,r2
800015fc:	c0 38       	rjmp	80001602 <_malloc_r+0x2be>
800015fe:	2f c3       	sub	r3,-4
80001600:	a1 7b       	lsl	r11,0x1
80001602:	f7 e8 00 09 	and	r9,r11,r8
80001606:	ca 71       	brne	80001554 <_malloc_r+0x210>
80001608:	cf bb       	rjmp	800015fe <_malloc_r+0x2ba>
8000160a:	00 00       	add	r0,r0
8000160c:	00 00       	add	r0,r0
8000160e:	01 04       	ld.w	r4,r0++
80001610:	80 00       	ld.sh	r0,r0[0x0]
80001612:	17 96       	ld.ub	r6,r11[0x1]
80001614:	68 23       	ld.w	r3,r4[0x8]
80001616:	66 12       	ld.w	r2,r3[0x4]
80001618:	e0 12 ff fc 	andl	r2,0xfffc
8000161c:	0e 32       	cp.w	r2,r7
8000161e:	5f 39       	srlo	r9
80001620:	e4 07 01 08 	sub	r8,r2,r7
80001624:	58 f8       	cp.w	r8,15
80001626:	5f aa       	srle	r10
80001628:	f5 e9 10 09 	or	r9,r10,r9
8000162c:	e0 80 00 a2 	breq	80001770 <_malloc_r+0x42c>
80001630:	4c 88       	lddpc	r8,80001750 <_malloc_r+0x40c>
80001632:	70 01       	ld.w	r1,r8[0x0]
80001634:	4c 88       	lddpc	r8,80001754 <_malloc_r+0x410>
80001636:	2f 01       	sub	r1,-16
80001638:	70 08       	ld.w	r8,r8[0x0]
8000163a:	0e 01       	add	r1,r7
8000163c:	5b f8       	cp.w	r8,-1
8000163e:	c0 40       	breq	80001646 <_malloc_r+0x302>
80001640:	28 11       	sub	r1,-127
80001642:	e0 11 ff 80 	andl	r1,0xff80
80001646:	02 9b       	mov	r11,r1
80001648:	0a 9c       	mov	r12,r5
8000164a:	f0 1f 00 44 	mcall	80001758 <_malloc_r+0x414>
8000164e:	18 96       	mov	r6,r12
80001650:	5b fc       	cp.w	r12,-1
80001652:	c6 e0       	breq	8000172e <_malloc_r+0x3ea>
80001654:	e6 02 00 08 	add	r8,r3,r2
80001658:	10 3c       	cp.w	r12,r8
8000165a:	c0 32       	brcc	80001660 <_malloc_r+0x31c>
8000165c:	08 33       	cp.w	r3,r4
8000165e:	c6 81       	brne	8000172e <_malloc_r+0x3ea>
80001660:	4b fa       	lddpc	r10,8000175c <_malloc_r+0x418>
80001662:	74 09       	ld.w	r9,r10[0x0]
80001664:	e2 09 00 09 	add	r9,r1,r9
80001668:	95 09       	st.w	r10[0x0],r9
8000166a:	10 36       	cp.w	r6,r8
8000166c:	c0 a1       	brne	80001680 <_malloc_r+0x33c>
8000166e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80001672:	c0 71       	brne	80001680 <_malloc_r+0x33c>
80001674:	e2 02 00 02 	add	r2,r1,r2
80001678:	68 28       	ld.w	r8,r4[0x8]
8000167a:	a1 a2       	sbr	r2,0x0
8000167c:	91 12       	st.w	r8[0x4],r2
8000167e:	c4 c8       	rjmp	80001716 <_malloc_r+0x3d2>
80001680:	4b 5a       	lddpc	r10,80001754 <_malloc_r+0x410>
80001682:	74 0b       	ld.w	r11,r10[0x0]
80001684:	5b fb       	cp.w	r11,-1
80001686:	c0 31       	brne	8000168c <_malloc_r+0x348>
80001688:	95 06       	st.w	r10[0x0],r6
8000168a:	c0 68       	rjmp	80001696 <_malloc_r+0x352>
8000168c:	ec 09 00 09 	add	r9,r6,r9
80001690:	4b 3a       	lddpc	r10,8000175c <_malloc_r+0x418>
80001692:	10 19       	sub	r9,r8
80001694:	95 09       	st.w	r10[0x0],r9
80001696:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000169a:	f0 09 11 08 	rsub	r9,r8,8
8000169e:	58 08       	cp.w	r8,0
800016a0:	f2 08 17 10 	movne	r8,r9
800016a4:	ed d8 e1 06 	addne	r6,r6,r8
800016a8:	28 08       	sub	r8,-128
800016aa:	ec 01 00 01 	add	r1,r6,r1
800016ae:	0a 9c       	mov	r12,r5
800016b0:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800016b4:	f0 01 01 01 	sub	r1,r8,r1
800016b8:	02 9b       	mov	r11,r1
800016ba:	f0 1f 00 28 	mcall	80001758 <_malloc_r+0x414>
800016be:	4a 88       	lddpc	r8,8000175c <_malloc_r+0x418>
800016c0:	5b fc       	cp.w	r12,-1
800016c2:	ec 0c 17 00 	moveq	r12,r6
800016c6:	f9 b1 00 00 	moveq	r1,0
800016ca:	70 09       	ld.w	r9,r8[0x0]
800016cc:	0c 1c       	sub	r12,r6
800016ce:	89 26       	st.w	r4[0x8],r6
800016d0:	02 0c       	add	r12,r1
800016d2:	12 01       	add	r1,r9
800016d4:	a1 ac       	sbr	r12,0x0
800016d6:	91 01       	st.w	r8[0x0],r1
800016d8:	8d 1c       	st.w	r6[0x4],r12
800016da:	08 33       	cp.w	r3,r4
800016dc:	c1 d0       	breq	80001716 <_malloc_r+0x3d2>
800016de:	58 f2       	cp.w	r2,15
800016e0:	e0 8b 00 05 	brhi	800016ea <_malloc_r+0x3a6>
800016e4:	30 18       	mov	r8,1
800016e6:	8d 18       	st.w	r6[0x4],r8
800016e8:	c2 38       	rjmp	8000172e <_malloc_r+0x3ea>
800016ea:	30 59       	mov	r9,5
800016ec:	20 c2       	sub	r2,12
800016ee:	e0 12 ff f8 	andl	r2,0xfff8
800016f2:	e6 02 00 08 	add	r8,r3,r2
800016f6:	91 29       	st.w	r8[0x8],r9
800016f8:	91 19       	st.w	r8[0x4],r9
800016fa:	66 18       	ld.w	r8,r3[0x4]
800016fc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001700:	e5 e8 10 08 	or	r8,r2,r8
80001704:	87 18       	st.w	r3[0x4],r8
80001706:	58 f2       	cp.w	r2,15
80001708:	e0 88 00 07 	brls	80001716 <_malloc_r+0x3d2>
8000170c:	e6 cb ff f8 	sub	r11,r3,-8
80001710:	0a 9c       	mov	r12,r5
80001712:	f0 1f 00 14 	mcall	80001760 <_malloc_r+0x41c>
80001716:	49 49       	lddpc	r9,80001764 <_malloc_r+0x420>
80001718:	72 0a       	ld.w	r10,r9[0x0]
8000171a:	49 18       	lddpc	r8,8000175c <_malloc_r+0x418>
8000171c:	70 08       	ld.w	r8,r8[0x0]
8000171e:	14 38       	cp.w	r8,r10
80001720:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001724:	49 19       	lddpc	r9,80001768 <_malloc_r+0x424>
80001726:	72 0a       	ld.w	r10,r9[0x0]
80001728:	14 38       	cp.w	r8,r10
8000172a:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000172e:	68 28       	ld.w	r8,r4[0x8]
80001730:	70 18       	ld.w	r8,r8[0x4]
80001732:	e0 18 ff fc 	andl	r8,0xfffc
80001736:	0e 38       	cp.w	r8,r7
80001738:	5f 39       	srlo	r9
8000173a:	0e 18       	sub	r8,r7
8000173c:	58 f8       	cp.w	r8,15
8000173e:	5f aa       	srle	r10
80001740:	f5 e9 10 09 	or	r9,r10,r9
80001744:	c1 60       	breq	80001770 <_malloc_r+0x42c>
80001746:	0a 9c       	mov	r12,r5
80001748:	f0 1f 00 09 	mcall	8000176c <_malloc_r+0x428>
8000174c:	d8 3a       	popm	r0-r7,pc,r12=0
8000174e:	00 00       	add	r0,r0
80001750:	00 00       	add	r0,r0
80001752:	06 34       	cp.w	r4,r3
80001754:	00 00       	add	r0,r0
80001756:	05 10       	ld.sh	r0,r2++
80001758:	80 00       	ld.sh	r0,r0[0x0]
8000175a:	17 98       	ld.ub	r8,r11[0x1]
8000175c:	00 00       	add	r0,r0
8000175e:	06 38       	cp.w	r8,r3
80001760:	80 00       	ld.sh	r0,r0[0x0]
80001762:	18 b4       	st.h	r12++,r4
80001764:	00 00       	add	r0,r0
80001766:	06 30       	cp.w	r0,r3
80001768:	00 00       	add	r0,r0
8000176a:	06 2c       	rsub	r12,r3
8000176c:	80 00       	ld.sh	r0,r0[0x0]
8000176e:	17 96       	ld.ub	r6,r11[0x1]
80001770:	68 26       	ld.w	r6,r4[0x8]
80001772:	a1 a8       	sbr	r8,0x0
80001774:	0e 99       	mov	r9,r7
80001776:	a1 a9       	sbr	r9,0x0
80001778:	8d 19       	st.w	r6[0x4],r9
8000177a:	ec 07 00 07 	add	r7,r6,r7
8000177e:	0a 9c       	mov	r12,r5
80001780:	89 27       	st.w	r4[0x8],r7
80001782:	8f 18       	st.w	r7[0x4],r8
80001784:	f0 1f 00 03 	mcall	80001790 <_malloc_r+0x44c>
80001788:	ec cc ff f8 	sub	r12,r6,-8
8000178c:	d8 32       	popm	r0-r7,pc
8000178e:	00 00       	add	r0,r0
80001790:	80 00       	ld.sh	r0,r0[0x0]
80001792:	17 96       	ld.ub	r6,r11[0x1]

80001794 <__malloc_lock>:
80001794:	5e fc       	retal	r12

80001796 <__malloc_unlock>:
80001796:	5e fc       	retal	r12

80001798 <_sbrk_r>:
80001798:	d4 21       	pushm	r4-r7,lr
8000179a:	30 08       	mov	r8,0
8000179c:	18 97       	mov	r7,r12
8000179e:	48 76       	lddpc	r6,800017b8 <_sbrk_r+0x20>
800017a0:	16 9c       	mov	r12,r11
800017a2:	8d 08       	st.w	r6[0x0],r8
800017a4:	f0 1f 00 06 	mcall	800017bc <_sbrk_r+0x24>
800017a8:	5b fc       	cp.w	r12,-1
800017aa:	c0 51       	brne	800017b4 <_sbrk_r+0x1c>
800017ac:	6c 08       	ld.w	r8,r6[0x0]
800017ae:	58 08       	cp.w	r8,0
800017b0:	ef f8 1a 03 	st.wne	r7[0xc],r8
800017b4:	d8 22       	popm	r4-r7,pc
800017b6:	00 00       	add	r0,r0
800017b8:	00 00       	add	r0,r0
800017ba:	07 a8       	ld.ub	r8,r3[0x2]
800017bc:	80 00       	ld.sh	r0,r0[0x0]
800017be:	17 c0       	ld.ub	r0,r11[0x4]

800017c0 <_sbrk>:
800017c0:	d4 01       	pushm	lr
800017c2:	48 c8       	lddpc	r8,800017f0 <_sbrk+0x30>
800017c4:	70 09       	ld.w	r9,r8[0x0]
800017c6:	58 09       	cp.w	r9,0
800017c8:	c0 31       	brne	800017ce <_sbrk+0xe>
800017ca:	48 b9       	lddpc	r9,800017f4 <_sbrk+0x34>
800017cc:	91 09       	st.w	r8[0x0],r9
800017ce:	48 99       	lddpc	r9,800017f0 <_sbrk+0x30>
800017d0:	48 aa       	lddpc	r10,800017f8 <_sbrk+0x38>
800017d2:	72 08       	ld.w	r8,r9[0x0]
800017d4:	f0 0c 00 0c 	add	r12,r8,r12
800017d8:	14 3c       	cp.w	r12,r10
800017da:	e0 8b 00 04 	brhi	800017e2 <_sbrk+0x22>
800017de:	93 0c       	st.w	r9[0x0],r12
800017e0:	c0 68       	rjmp	800017ec <_sbrk+0x2c>
800017e2:	f0 1f 00 07 	mcall	800017fc <_sbrk+0x3c>
800017e6:	30 c8       	mov	r8,12
800017e8:	99 08       	st.w	r12[0x0],r8
800017ea:	3f f8       	mov	r8,-1
800017ec:	10 9c       	mov	r12,r8
800017ee:	d8 02       	popm	pc
800017f0:	00 00       	add	r0,r0
800017f2:	06 60       	and	r0,r3
800017f4:	00 00       	add	r0,r0
800017f6:	07 b0       	ld.ub	r0,r3[0x3]
800017f8:	00 00       	add	r0,r0
800017fa:	e0 00       	*unknown*
800017fc:	80 00       	ld.sh	r0,r0[0x0]
800017fe:	18 00       	add	r0,r12

80001800 <__errno>:
80001800:	48 28       	lddpc	r8,80001808 <__errno+0x8>
80001802:	70 0c       	ld.w	r12,r8[0x0]
80001804:	2f 4c       	sub	r12,-12
80001806:	5e fc       	retal	r12
80001808:	00 00       	add	r0,r0
8000180a:	01 00       	ld.w	r0,r0++

8000180c <_malloc_trim_r>:
8000180c:	d4 21       	pushm	r4-r7,lr
8000180e:	16 95       	mov	r5,r11
80001810:	18 97       	mov	r7,r12
80001812:	f0 1f 00 23 	mcall	8000189c <_malloc_trim_r+0x90>
80001816:	4a 34       	lddpc	r4,800018a0 <_malloc_trim_r+0x94>
80001818:	68 28       	ld.w	r8,r4[0x8]
8000181a:	70 16       	ld.w	r6,r8[0x4]
8000181c:	e0 16 ff fc 	andl	r6,0xfffc
80001820:	ec c8 ff 91 	sub	r8,r6,-111
80001824:	f0 05 01 05 	sub	r5,r8,r5
80001828:	e0 15 ff 80 	andl	r5,0xff80
8000182c:	ea c5 00 80 	sub	r5,r5,128
80001830:	e0 45 00 7f 	cp.w	r5,127
80001834:	e0 8a 00 23 	brle	8000187a <_malloc_trim_r+0x6e>
80001838:	30 0b       	mov	r11,0
8000183a:	0e 9c       	mov	r12,r7
8000183c:	f0 1f 00 1a 	mcall	800018a4 <_malloc_trim_r+0x98>
80001840:	68 28       	ld.w	r8,r4[0x8]
80001842:	0c 08       	add	r8,r6
80001844:	10 3c       	cp.w	r12,r8
80001846:	c1 a1       	brne	8000187a <_malloc_trim_r+0x6e>
80001848:	ea 0b 11 00 	rsub	r11,r5,0
8000184c:	0e 9c       	mov	r12,r7
8000184e:	f0 1f 00 16 	mcall	800018a4 <_malloc_trim_r+0x98>
80001852:	5b fc       	cp.w	r12,-1
80001854:	c1 71       	brne	80001882 <_malloc_trim_r+0x76>
80001856:	30 0b       	mov	r11,0
80001858:	0e 9c       	mov	r12,r7
8000185a:	f0 1f 00 13 	mcall	800018a4 <_malloc_trim_r+0x98>
8000185e:	68 28       	ld.w	r8,r4[0x8]
80001860:	f8 08 01 09 	sub	r9,r12,r8
80001864:	58 f9       	cp.w	r9,15
80001866:	e0 8a 00 0a 	brle	8000187a <_malloc_trim_r+0x6e>
8000186a:	a1 a9       	sbr	r9,0x0
8000186c:	91 19       	st.w	r8[0x4],r9
8000186e:	48 f8       	lddpc	r8,800018a8 <_malloc_trim_r+0x9c>
80001870:	70 09       	ld.w	r9,r8[0x0]
80001872:	48 f8       	lddpc	r8,800018ac <_malloc_trim_r+0xa0>
80001874:	f8 09 01 09 	sub	r9,r12,r9
80001878:	91 09       	st.w	r8[0x0],r9
8000187a:	0e 9c       	mov	r12,r7
8000187c:	f0 1f 00 0d 	mcall	800018b0 <_malloc_trim_r+0xa4>
80001880:	d8 2a       	popm	r4-r7,pc,r12=0
80001882:	68 28       	ld.w	r8,r4[0x8]
80001884:	0a 16       	sub	r6,r5
80001886:	a1 a6       	sbr	r6,0x0
80001888:	91 16       	st.w	r8[0x4],r6
8000188a:	48 98       	lddpc	r8,800018ac <_malloc_trim_r+0xa0>
8000188c:	70 09       	ld.w	r9,r8[0x0]
8000188e:	0a 19       	sub	r9,r5
80001890:	0e 9c       	mov	r12,r7
80001892:	91 09       	st.w	r8[0x0],r9
80001894:	f0 1f 00 07 	mcall	800018b0 <_malloc_trim_r+0xa4>
80001898:	da 2a       	popm	r4-r7,pc,r12=1
8000189a:	00 00       	add	r0,r0
8000189c:	80 00       	ld.sh	r0,r0[0x0]
8000189e:	17 94       	ld.ub	r4,r11[0x1]
800018a0:	00 00       	add	r0,r0
800018a2:	01 04       	ld.w	r4,r0++
800018a4:	80 00       	ld.sh	r0,r0[0x0]
800018a6:	17 98       	ld.ub	r8,r11[0x1]
800018a8:	00 00       	add	r0,r0
800018aa:	05 10       	ld.sh	r0,r2++
800018ac:	00 00       	add	r0,r0
800018ae:	06 38       	cp.w	r8,r3
800018b0:	80 00       	ld.sh	r0,r0[0x0]
800018b2:	17 96       	ld.ub	r6,r11[0x1]

800018b4 <_free_r>:
800018b4:	d4 21       	pushm	r4-r7,lr
800018b6:	16 96       	mov	r6,r11
800018b8:	18 97       	mov	r7,r12
800018ba:	58 0b       	cp.w	r11,0
800018bc:	e0 80 00 c8 	breq	80001a4c <_free_r+0x198>
800018c0:	f0 1f 00 4c 	mcall	800019f0 <_free_r+0x13c>
800018c4:	20 86       	sub	r6,8
800018c6:	4c ca       	lddpc	r10,800019f4 <_free_r+0x140>
800018c8:	6c 18       	ld.w	r8,r6[0x4]
800018ca:	74 2e       	ld.w	lr,r10[0x8]
800018cc:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800018d0:	a1 c8       	cbr	r8,0x0
800018d2:	ec 08 00 09 	add	r9,r6,r8
800018d6:	72 1b       	ld.w	r11,r9[0x4]
800018d8:	e0 1b ff fc 	andl	r11,0xfffc
800018dc:	1c 39       	cp.w	r9,lr
800018de:	c1 d1       	brne	80001918 <_free_r+0x64>
800018e0:	f6 08 00 08 	add	r8,r11,r8
800018e4:	58 0c       	cp.w	r12,0
800018e6:	c0 81       	brne	800018f6 <_free_r+0x42>
800018e8:	6c 09       	ld.w	r9,r6[0x0]
800018ea:	12 16       	sub	r6,r9
800018ec:	12 08       	add	r8,r9
800018ee:	6c 3b       	ld.w	r11,r6[0xc]
800018f0:	6c 29       	ld.w	r9,r6[0x8]
800018f2:	97 29       	st.w	r11[0x8],r9
800018f4:	93 3b       	st.w	r9[0xc],r11
800018f6:	10 99       	mov	r9,r8
800018f8:	95 26       	st.w	r10[0x8],r6
800018fa:	a1 a9       	sbr	r9,0x0
800018fc:	8d 19       	st.w	r6[0x4],r9
800018fe:	4b f9       	lddpc	r9,800019f8 <_free_r+0x144>
80001900:	72 09       	ld.w	r9,r9[0x0]
80001902:	12 38       	cp.w	r8,r9
80001904:	c0 63       	brcs	80001910 <_free_r+0x5c>
80001906:	4b e8       	lddpc	r8,800019fc <_free_r+0x148>
80001908:	0e 9c       	mov	r12,r7
8000190a:	70 0b       	ld.w	r11,r8[0x0]
8000190c:	f0 1f 00 3d 	mcall	80001a00 <_free_r+0x14c>
80001910:	0e 9c       	mov	r12,r7
80001912:	f0 1f 00 3d 	mcall	80001a04 <_free_r+0x150>
80001916:	d8 22       	popm	r4-r7,pc
80001918:	93 1b       	st.w	r9[0x4],r11
8000191a:	58 0c       	cp.w	r12,0
8000191c:	c0 30       	breq	80001922 <_free_r+0x6e>
8000191e:	30 0c       	mov	r12,0
80001920:	c1 08       	rjmp	80001940 <_free_r+0x8c>
80001922:	6c 0e       	ld.w	lr,r6[0x0]
80001924:	f4 c5 ff f8 	sub	r5,r10,-8
80001928:	1c 16       	sub	r6,lr
8000192a:	1c 08       	add	r8,lr
8000192c:	6c 2e       	ld.w	lr,r6[0x8]
8000192e:	0a 3e       	cp.w	lr,r5
80001930:	f9 bc 00 01 	moveq	r12,1
80001934:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001938:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000193c:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001940:	f2 0b 00 0e 	add	lr,r9,r11
80001944:	7c 1e       	ld.w	lr,lr[0x4]
80001946:	ed be 00 00 	bld	lr,0x0
8000194a:	c1 30       	breq	80001970 <_free_r+0xbc>
8000194c:	16 08       	add	r8,r11
8000194e:	58 0c       	cp.w	r12,0
80001950:	c0 c1       	brne	80001968 <_free_r+0xb4>
80001952:	4a 9e       	lddpc	lr,800019f4 <_free_r+0x140>
80001954:	72 2b       	ld.w	r11,r9[0x8]
80001956:	2f 8e       	sub	lr,-8
80001958:	1c 3b       	cp.w	r11,lr
8000195a:	c0 71       	brne	80001968 <_free_r+0xb4>
8000195c:	97 36       	st.w	r11[0xc],r6
8000195e:	97 26       	st.w	r11[0x8],r6
80001960:	8d 2b       	st.w	r6[0x8],r11
80001962:	8d 3b       	st.w	r6[0xc],r11
80001964:	30 1c       	mov	r12,1
80001966:	c0 58       	rjmp	80001970 <_free_r+0xbc>
80001968:	72 2b       	ld.w	r11,r9[0x8]
8000196a:	72 39       	ld.w	r9,r9[0xc]
8000196c:	93 2b       	st.w	r9[0x8],r11
8000196e:	97 39       	st.w	r11[0xc],r9
80001970:	10 99       	mov	r9,r8
80001972:	ec 08 09 08 	st.w	r6[r8],r8
80001976:	a1 a9       	sbr	r9,0x0
80001978:	8d 19       	st.w	r6[0x4],r9
8000197a:	58 0c       	cp.w	r12,0
8000197c:	c6 51       	brne	80001a46 <_free_r+0x192>
8000197e:	e0 48 01 ff 	cp.w	r8,511
80001982:	e0 8b 00 13 	brhi	800019a8 <_free_r+0xf4>
80001986:	a3 98       	lsr	r8,0x3
80001988:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000198c:	72 2b       	ld.w	r11,r9[0x8]
8000198e:	8d 39       	st.w	r6[0xc],r9
80001990:	8d 2b       	st.w	r6[0x8],r11
80001992:	97 36       	st.w	r11[0xc],r6
80001994:	93 26       	st.w	r9[0x8],r6
80001996:	a3 48       	asr	r8,0x2
80001998:	74 19       	ld.w	r9,r10[0x4]
8000199a:	30 1b       	mov	r11,1
8000199c:	f6 08 09 48 	lsl	r8,r11,r8
800019a0:	f3 e8 10 08 	or	r8,r9,r8
800019a4:	95 18       	st.w	r10[0x4],r8
800019a6:	c5 08       	rjmp	80001a46 <_free_r+0x192>
800019a8:	f0 0b 16 09 	lsr	r11,r8,0x9
800019ac:	58 4b       	cp.w	r11,4
800019ae:	e0 8b 00 06 	brhi	800019ba <_free_r+0x106>
800019b2:	f0 0b 16 06 	lsr	r11,r8,0x6
800019b6:	2c 8b       	sub	r11,-56
800019b8:	c2 b8       	rjmp	80001a0e <_free_r+0x15a>
800019ba:	59 4b       	cp.w	r11,20
800019bc:	e0 8b 00 04 	brhi	800019c4 <_free_r+0x110>
800019c0:	2a 5b       	sub	r11,-91
800019c2:	c2 68       	rjmp	80001a0e <_free_r+0x15a>
800019c4:	e0 4b 00 54 	cp.w	r11,84
800019c8:	e0 8b 00 06 	brhi	800019d4 <_free_r+0x120>
800019cc:	f0 0b 16 0c 	lsr	r11,r8,0xc
800019d0:	29 2b       	sub	r11,-110
800019d2:	c1 e8       	rjmp	80001a0e <_free_r+0x15a>
800019d4:	e0 4b 01 54 	cp.w	r11,340
800019d8:	e0 8b 00 06 	brhi	800019e4 <_free_r+0x130>
800019dc:	f0 0b 16 0f 	lsr	r11,r8,0xf
800019e0:	28 9b       	sub	r11,-119
800019e2:	c1 68       	rjmp	80001a0e <_free_r+0x15a>
800019e4:	e0 4b 05 54 	cp.w	r11,1364
800019e8:	e0 88 00 10 	brls	80001a08 <_free_r+0x154>
800019ec:	37 eb       	mov	r11,126
800019ee:	c1 08       	rjmp	80001a0e <_free_r+0x15a>
800019f0:	80 00       	ld.sh	r0,r0[0x0]
800019f2:	17 94       	ld.ub	r4,r11[0x1]
800019f4:	00 00       	add	r0,r0
800019f6:	01 04       	ld.w	r4,r0++
800019f8:	00 00       	add	r0,r0
800019fa:	05 0c       	ld.w	r12,r2++
800019fc:	00 00       	add	r0,r0
800019fe:	06 34       	cp.w	r4,r3
80001a00:	80 00       	ld.sh	r0,r0[0x0]
80001a02:	18 0c       	add	r12,r12
80001a04:	80 00       	ld.sh	r0,r0[0x0]
80001a06:	17 96       	ld.ub	r6,r11[0x1]
80001a08:	f0 0b 16 12 	lsr	r11,r8,0x12
80001a0c:	28 4b       	sub	r11,-124
80001a0e:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80001a12:	78 29       	ld.w	r9,r12[0x8]
80001a14:	18 39       	cp.w	r9,r12
80001a16:	c0 e1       	brne	80001a32 <_free_r+0x17e>
80001a18:	74 18       	ld.w	r8,r10[0x4]
80001a1a:	a3 4b       	asr	r11,0x2
80001a1c:	30 1c       	mov	r12,1
80001a1e:	f8 0b 09 4b 	lsl	r11,r12,r11
80001a22:	f1 eb 10 0b 	or	r11,r8,r11
80001a26:	12 98       	mov	r8,r9
80001a28:	95 1b       	st.w	r10[0x4],r11
80001a2a:	c0 a8       	rjmp	80001a3e <_free_r+0x18a>
80001a2c:	72 29       	ld.w	r9,r9[0x8]
80001a2e:	18 39       	cp.w	r9,r12
80001a30:	c0 60       	breq	80001a3c <_free_r+0x188>
80001a32:	72 1a       	ld.w	r10,r9[0x4]
80001a34:	e0 1a ff fc 	andl	r10,0xfffc
80001a38:	14 38       	cp.w	r8,r10
80001a3a:	cf 93       	brcs	80001a2c <_free_r+0x178>
80001a3c:	72 38       	ld.w	r8,r9[0xc]
80001a3e:	8d 38       	st.w	r6[0xc],r8
80001a40:	8d 29       	st.w	r6[0x8],r9
80001a42:	93 36       	st.w	r9[0xc],r6
80001a44:	91 26       	st.w	r8[0x8],r6
80001a46:	0e 9c       	mov	r12,r7
80001a48:	f0 1f 00 02 	mcall	80001a50 <_free_r+0x19c>
80001a4c:	d8 22       	popm	r4-r7,pc
80001a4e:	00 00       	add	r0,r0
80001a50:	80 00       	ld.sh	r0,r0[0x0]
80001a52:	17 96       	ld.ub	r6,r11[0x1]

Disassembly of section .exception:

80001c00 <_evba>:
	...

80001c28 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001c28:	c7 a8       	rjmp	80001d1c <privilegedCalls>
	...

80001d00 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001d00:	1c 9f       	mov	pc,lr

80001d02 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001d02:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001d06:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
80001d0a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
80001d0e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001d12:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001d14:	c0 31       	brne	80001d1a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001d16:	4b 9c       	lddpc	r12,80001df8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001d18:	18 9f       	mov	pc,r12

80001d1a <_int0_exit>:
_int0_exit:
	rete
80001d1a:	d6 03       	rete

80001d1c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
80001d1c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
80001d1e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001d20:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001d22:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001d24:	9b 3c       	st.w	sp[0xc],r12

80001d26 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001d26:	4b 6c       	lddpc	r12,80001dfc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001d28:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
80001d2a:	c0 61       	brne	80001d36 <priv_interruptenable>
	ld.w r12,sp[USERSR]
80001d2c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
80001d2e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001d30:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001d32:	d3 02       	popm	r11-r12
	rete
80001d34:	d6 03       	rete

80001d36 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001d36:	4b 3c       	lddpc	r12,80001e00 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001d38:	18 3b       	cp.w	r11,r12
	brne privexception
80001d3a:	c0 61       	brne	80001d46 <privexception>
	ld.w r12,sp[USERSR]
80001d3c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
80001d3e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001d40:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001d42:	d3 02       	popm	r11-r12
	rete
80001d44:	d6 03       	rete

80001d46 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001d46:	c0 08       	rjmp	80001d46 <privexception>

80001d48 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001d48:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
80001d4a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
80001d4e:	4a ec       	lddpc	r12,80001e04 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001d50:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001d52:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001d54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001d58:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
80001d5c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001d60:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001d62:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001d64:	1c 9f       	mov	pc,lr

80001d66 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001d66:	d3 03       	ssrf	0x10
	mov pc,lr
80001d68:	1c 9f       	mov	pc,lr

80001d6a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
80001d6a:	d5 03       	csrf	0x10
	mov pc,lr
80001d6c:	1c 9f       	mov	pc,lr

80001d6e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
80001d6e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001d72:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001d74:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001d78:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
80001d7c:	1c 9f       	mov	pc,lr

80001d7e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001d7e:	4a 3c       	lddpc	r12,80001e08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001d80:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001d82:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001d84:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001d86:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001d88:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
80001d8a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
80001d8c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
80001d8e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001d90:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001d92:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001d94:	33 40       	mov	r0,52
	add r0,r12
80001d96:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001d98:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
80001d9c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
80001d9e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
80001da2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
80001da4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
80001da6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
80001da8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
80001daa:	1a 90       	mov	r0,sp
	st.w --sp,r0
80001dac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80001dae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
80001db2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
80001db4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
80001db6:	1c 9f       	mov	pc,lr

80001db8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001db8:	49 4c       	lddpc	r12,80001e08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001dba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
80001dbc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80001dbe:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80001dc0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
80001dc4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
80001dc6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
80001dc8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80001dca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
80001dcc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80001dce:	33 40       	mov	r0,52
	add r0,r12
80001dd0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80001dd2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80001dd6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
80001dd8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
80001dda:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
80001ddc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
80001dde:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
80001de0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
80001de2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
80001de4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
80001de6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
80001de8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80001dea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
80001dec:	d4 01       	pushm	lr
	call timerStart
80001dee:	f0 1f 00 08 	mcall	80001e0c <contextRestoreFromISR+0x54>
	popm lr
80001df2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
80001df4:	1c 9f       	mov	pc,lr
80001df6:	00 00       	add	r0,r0
80001df8:	80 00       	ld.sh	r0,r0[0x0]
80001dfa:	0a b0       	st.h	r5++,r0
80001dfc:	80 00       	ld.sh	r0,r0[0x0]
80001dfe:	1d 66       	ld.uh	r6,--lr
80001e00:	80 00       	ld.sh	r0,r0[0x0]
80001e02:	1d 6a       	ld.uh	r10,--lr
80001e04:	80 00       	ld.sh	r0,r0[0x0]
80001e06:	1c 00       	add	r0,lr
80001e08:	00 00       	add	r0,r0
80001e0a:	07 20       	ld.uh	r0,r3++
80001e0c:	80 00       	ld.sh	r0,r0[0x0]
80001e0e:	12 22       	rsub	r2,r9
	...
