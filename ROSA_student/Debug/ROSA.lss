
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001714  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001800  80001800  00001c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80001c00  80001c00  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80001c84  80001c84  00002084  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80001c88  00002408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002194  00002914  2**0
                  ALLOC
  9 .bss          00000088  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000da60  000005a0  000005a0  00000000  2**0
                  ALLOC
 11 .comment      000000bc  00000000  00000000  00002914  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000558  00000000  00000000  000029d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 000008a2  00000000  00000000  00002f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000bdfb  00000000  00000000  000037ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00001ea6  00000000  00000000  0000f5c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003cad  00000000  00000000  0001146b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000b14  00000000  00000000  00015118  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001b00  00000000  00000000  00015c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00001767  00000000  00000000  0001772c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00377003  00000000  00000000  00018e93  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 000004a8  00000000  00000000  0038fe96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	0e d4       	st.w	--r7,r4

Disassembly of section .text:

80000008 <usart_options>:
80000008:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 33     ............tsk3
80000018:	00 00 00 00 74 73 6b 31 00 00 00 00 74 73 6b 32     ....tsk1....tsk2
80000028:	00 00 00 00                                         ....

8000002c <task1>:
 * Task1
 * LED0 lights up
 * LED1 goes dark
 ************************************************************/
void task1(void)
{
8000002c:	eb cd 40 80 	pushm	r7,lr
80000030:	1a 97       	mov	r7,sp
	while(1) {
		ledOn(LED0_GPIO);
80000032:	33 bc       	mov	r12,59
80000034:	f0 1f 00 08 	mcall	80000054 <task1+0x28>
		delay_ms(350);
80000038:	e0 6c 01 5e 	mov	r12,350
8000003c:	f0 1f 00 07 	mcall	80000058 <task1+0x2c>
		ledOff(LED0_GPIO);
80000040:	33 bc       	mov	r12,59
80000042:	f0 1f 00 07 	mcall	8000005c <task1+0x30>
		delay_ms(350);
80000046:	e0 6c 01 5e 	mov	r12,350
8000004a:	f0 1f 00 04 	mcall	80000058 <task1+0x2c>
		//ledOff(LED1_GPIO);
		//delay_ms(350);
		ROSA_yield();
8000004e:	f0 1f 00 05 	mcall	80000060 <task1+0x34>
	}
80000052:	cf 0b       	rjmp	80000032 <task1+0x6>
80000054:	80 00       	ld.sh	r0,r0[0x0]
80000056:	0b 04       	ld.w	r4,r5++
80000058:	80 00       	ld.sh	r0,r0[0x0]
8000005a:	08 fc       	st.b	--r4,r12
8000005c:	80 00       	ld.sh	r0,r0[0x0]
8000005e:	0b 24       	ld.uh	r4,r5++
80000060:	80 00       	ld.sh	r0,r0[0x0]
80000062:	07 0a       	ld.w	r10,r3++

80000064 <task3>:
		ROSA_yield();
	}
}

void task3(void)
{
80000064:	eb cd 40 80 	pushm	r7,lr
80000068:	1a 97       	mov	r7,sp
	while(1) {
		ledOn(LED2_GPIO);
8000006a:	33 dc       	mov	r12,61
8000006c:	f0 1f 00 0a 	mcall	80000094 <task3+0x30>
		delay_ms(350);
80000070:	e0 6c 01 5e 	mov	r12,350
80000074:	f0 1f 00 09 	mcall	80000098 <task3+0x34>
		ledOff(LED2_GPIO);
80000078:	33 dc       	mov	r12,61
8000007a:	f0 1f 00 09 	mcall	8000009c <task3+0x38>
		//ledOff(LED1_GPIO);
		delay_ms(350);
8000007e:	e0 6c 01 5e 	mov	r12,350
80000082:	f0 1f 00 06 	mcall	80000098 <task3+0x34>
		ROSA_taskDelete(&t3_tcb);
80000086:	48 7c       	lddpc	r12,800000a0 <task3+0x3c>
80000088:	f0 1f 00 07 	mcall	800000a4 <task3+0x40>
		ROSA_yield();
8000008c:	f0 1f 00 07 	mcall	800000a8 <task3+0x44>
	}
80000090:	ce db       	rjmp	8000006a <task3+0x6>
80000092:	00 00       	add	r0,r0
80000094:	80 00       	ld.sh	r0,r0[0x0]
80000096:	0b 04       	ld.w	r4,r5++
80000098:	80 00       	ld.sh	r0,r0[0x0]
8000009a:	08 fc       	st.b	--r4,r12
8000009c:	80 00       	ld.sh	r0,r0[0x0]
8000009e:	0b 24       	ld.uh	r4,r5++
800000a0:	00 00       	add	r0,r0
800000a2:	05 50       	ld.sh	r0,--r2
800000a4:	80 00       	ld.sh	r0,r0[0x0]
800000a6:	05 20       	ld.uh	r0,r2++
800000a8:	80 00       	ld.sh	r0,r0[0x0]
800000aa:	07 0a       	ld.w	r10,r3++

800000ac <task2>:
 * Task2
 * LED0 goes dark
 * LED1 lights up
 ************************************************************/
void task2(void)
{
800000ac:	eb cd 40 80 	pushm	r7,lr
800000b0:	1a 97       	mov	r7,sp
	while(1) {
		ledOn(LED1_GPIO);
800000b2:	33 cc       	mov	r12,60
800000b4:	f0 1f 00 12 	mcall	800000fc <task2+0x50>
		delay_ms(350);
800000b8:	e0 6c 01 5e 	mov	r12,350
800000bc:	f0 1f 00 11 	mcall	80000100 <task2+0x54>
		ledOff(LED1_GPIO);
800000c0:	33 cc       	mov	r12,60
800000c2:	f0 1f 00 11 	mcall	80000104 <task2+0x58>
		delay_ms(350);
800000c6:	e0 6c 01 5e 	mov	r12,350
800000ca:	f0 1f 00 0e 	mcall	80000100 <task2+0x54>
		ROSA_taskCreate(&t3_tcb, "tsk3", task3, T3_STACK_SIZE, 5);
800000ce:	30 58       	mov	r8,5
800000d0:	32 09       	mov	r9,32
800000d2:	48 ea       	lddpc	r10,80000108 <task2+0x5c>
800000d4:	48 eb       	lddpc	r11,8000010c <task2+0x60>
800000d6:	48 fc       	lddpc	r12,80000110 <task2+0x64>
800000d8:	f0 1f 00 0f 	mcall	80000114 <task2+0x68>
		ledOn(LED1_GPIO);
800000dc:	33 cc       	mov	r12,60
800000de:	f0 1f 00 08 	mcall	800000fc <task2+0x50>
		ROSA_taskDelete(&t2_tcb);
800000e2:	48 ec       	lddpc	r12,80000118 <task2+0x6c>
800000e4:	f0 1f 00 0e 	mcall	8000011c <task2+0x70>
	//	ledOn(LED1_GPIO);
	//	delay_ms(350);
		ledOff(LED1_GPIO);
800000e8:	33 cc       	mov	r12,60
800000ea:	f0 1f 00 07 	mcall	80000104 <task2+0x58>
		//ledOff(LED1_GPIO);
		delay_ms(350);
800000ee:	e0 6c 01 5e 	mov	r12,350
800000f2:	f0 1f 00 04 	mcall	80000100 <task2+0x54>
		ROSA_yield();
800000f6:	f0 1f 00 0b 	mcall	80000120 <task2+0x74>
	}
800000fa:	cd cb       	rjmp	800000b2 <task2+0x6>
800000fc:	80 00       	ld.sh	r0,r0[0x0]
800000fe:	0b 04       	ld.w	r4,r5++
80000100:	80 00       	ld.sh	r0,r0[0x0]
80000102:	08 fc       	st.b	--r4,r12
80000104:	80 00       	ld.sh	r0,r0[0x0]
80000106:	0b 24       	ld.uh	r4,r5++
80000108:	80 00       	ld.sh	r0,r0[0x0]
8000010a:	00 64       	and	r4,r0
8000010c:	80 00       	ld.sh	r0,r0[0x0]
8000010e:	00 14       	sub	r4,r0
80000110:	00 00       	add	r0,r0
80000112:	05 50       	ld.sh	r0,--r2
80000114:	80 00       	ld.sh	r0,r0[0x0]
80000116:	04 40       	or	r0,r2
80000118:	00 00       	add	r0,r0
8000011a:	05 58       	ld.sh	r8,--r2
8000011c:	80 00       	ld.sh	r0,r0[0x0]
8000011e:	05 20       	ld.uh	r0,r2++
80000120:	80 00       	ld.sh	r0,r0[0x0]
80000122:	07 0a       	ld.w	r10,r3++

80000124 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
80000124:	eb cd 40 80 	pushm	r7,lr
80000128:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
8000012a:	f0 1f 00 0a 	mcall	80000150 <main+0x2c>

	//Create tasks and install them into the ROSA kernel
	ROSA_taskCreate(&t1_tcb, "tsk1", task1, T1_STACK_SIZE, 4);
8000012e:	30 48       	mov	r8,4
80000130:	32 09       	mov	r9,32
80000132:	48 9a       	lddpc	r10,80000154 <main+0x30>
80000134:	48 9b       	lddpc	r11,80000158 <main+0x34>
80000136:	48 ac       	lddpc	r12,8000015c <main+0x38>
80000138:	f0 1f 00 0a 	mcall	80000160 <main+0x3c>
	ROSA_taskCreate(&t2_tcb, "tsk2", task2, T2_STACK_SIZE, 4);
8000013c:	30 48       	mov	r8,4
8000013e:	32 09       	mov	r9,32
80000140:	48 9a       	lddpc	r10,80000164 <main+0x40>
80000142:	48 ab       	lddpc	r11,80000168 <main+0x44>
80000144:	48 ac       	lddpc	r12,8000016c <main+0x48>
80000146:	f0 1f 00 07 	mcall	80000160 <main+0x3c>
	ROSA_tcbInstall(&t2_tcb);*/

	//Start the ROSA kernel
	//TCBLIST = PA[2]->nexttcb;
	//ROSA_start();
	ROSA_startScheduler();
8000014a:	f0 1f 00 0a 	mcall	80000170 <main+0x4c>
	//ledOn(LED1_GPIO);
	/* Execution will never return here */
	while(1);
8000014e:	c0 08       	rjmp	8000014e <main+0x2a>
80000150:	80 00       	ld.sh	r0,r0[0x0]
80000152:	02 f4       	st.b	--r1,r4
80000154:	80 00       	ld.sh	r0,r0[0x0]
80000156:	00 2c       	rsub	r12,r0
80000158:	80 00       	ld.sh	r0,r0[0x0]
8000015a:	00 1c       	sub	r12,r0
8000015c:	00 00       	add	r0,r0
8000015e:	05 5c       	ld.sh	r12,--r2
80000160:	80 00       	ld.sh	r0,r0[0x0]
80000162:	04 40       	or	r0,r2
80000164:	80 00       	ld.sh	r0,r0[0x0]
80000166:	00 ac       	st.w	r0++,r12
80000168:	80 00       	ld.sh	r0,r0[0x0]
8000016a:	00 24       	rsub	r4,r0
8000016c:	00 00       	add	r0,r0
8000016e:	05 58       	ld.sh	r8,--r2
80000170:	80 00       	ld.sh	r0,r0[0x0]
80000172:	07 74       	ld.ub	r4,--r3

80000174 <usart_options>:
80000174:	00 00 e1 00 08 04 00 00 00 00 00 00                 ............

80000180 <rqsearch>:
ROSA_taskHandle_t * PA[MAXNPRIO];

int rqi(ROSA_taskHandle_t ** th);  // Insert task th into queue pQ
int rqe(ROSA_taskHandle_t ** th); // Extract task th from queue pQ

int rqsearch(void) {
80000180:	eb cd 40 80 	pushm	r7,lr
80000184:	1a 97       	mov	r7,sp
80000186:	20 1d       	sub	sp,4
	int i = MAXNPRIO;
80000188:	30 c8       	mov	r8,12
8000018a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	while (PA[--i] == NULL) {
8000018e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000192:	20 18       	sub	r8,1
80000194:	ef 48 ff fc 	st.w	r7[-4],r8
80000198:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000019c:	48 68       	lddpc	r8,800001b4 <rqsearch+0x34>
8000019e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800001a2:	58 08       	cp.w	r8,0
800001a4:	cf 50       	breq	8000018e <rqsearch+0xe>
		;
	}
	
	return i;
800001a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800001aa:	10 9c       	mov	r12,r8
800001ac:	2f fd       	sub	sp,-4
800001ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800001b2:	00 00       	add	r0,r0
800001b4:	00 00       	add	r0,r0
800001b6:	05 64       	ld.uh	r4,--r2

800001b8 <rqi>:

int rqi(ROSA_taskHandle_t ** pth)
{
800001b8:	eb cd 40 80 	pushm	r7,lr
800001bc:	1a 97       	mov	r7,sp
800001be:	20 2d       	sub	sp,8
800001c0:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t priority;
	
	priority = (*pth)->priority;
800001c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001c8:	70 08       	ld.w	r8,r8[0x0]
800001ca:	f1 38 00 64 	ld.ub	r8,r8[100]
800001ce:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (PA[priority] == NULL) {
800001d2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800001d6:	49 d8       	lddpc	r8,80000248 <rqi+0x90>
800001d8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800001dc:	58 08       	cp.w	r8,0
800001de:	c1 41       	brne	80000206 <rqi+0x4e>
		PA[priority] = *pth;
800001e0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800001e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001e8:	70 0a       	ld.w	r10,r8[0x0]
800001ea:	49 88       	lddpc	r8,80000248 <rqi+0x90>
800001ec:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		PA[priority]->nexttcb = *pth;
800001f0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800001f4:	49 58       	lddpc	r8,80000248 <rqi+0x90>
800001f6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800001fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800001fe:	72 09       	ld.w	r9,r9[0x0]
80000200:	91 09       	st.w	r8[0x0],r9
		return 0;
80000202:	30 08       	mov	r8,0
80000204:	c1 d8       	rjmp	8000023e <rqi+0x86>
	}
	else {
		(*pth)->nexttcb = PA[priority]->nexttcb;
80000206:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000020a:	70 08       	ld.w	r8,r8[0x0]
8000020c:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80000210:	48 e9       	lddpc	r9,80000248 <rqi+0x90>
80000212:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80000216:	72 09       	ld.w	r9,r9[0x0]
80000218:	91 09       	st.w	r8[0x0],r9
		PA[priority]->nexttcb = *pth;
8000021a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000021e:	48 b8       	lddpc	r8,80000248 <rqi+0x90>
80000220:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000224:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000228:	72 09       	ld.w	r9,r9[0x0]
8000022a:	91 09       	st.w	r8[0x0],r9
		PA[priority] = *pth;
8000022c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000230:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000234:	70 0a       	ld.w	r10,r8[0x0]
80000236:	48 58       	lddpc	r8,80000248 <rqi+0x90>
80000238:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		return 0;
8000023c:	30 08       	mov	r8,0
	}
}
8000023e:	10 9c       	mov	r12,r8
80000240:	2f ed       	sub	sp,-8
80000242:	e3 cd 80 80 	ldm	sp++,r7,pc
80000246:	00 00       	add	r0,r0
80000248:	00 00       	add	r0,r0
8000024a:	05 64       	ld.uh	r4,--r2

8000024c <rqe>:

int rqe(ROSA_taskHandle_t ** pth)
{
8000024c:	eb cd 40 80 	pushm	r7,lr
80000250:	1a 97       	mov	r7,sp
80000252:	20 3d       	sub	sp,12
80000254:	ef 4c ff f4 	st.w	r7[-12],r12
	ROSA_taskHandle_t * thTmp;
	
	uint8_t priority;
	
	priority = (*pth)->priority;
80000258:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000025c:	70 08       	ld.w	r8,r8[0x0]
8000025e:	f1 38 00 64 	ld.ub	r8,r8[100]
80000262:	ef 68 ff ff 	st.b	r7[-1],r8
	thTmp = PA[priority];
80000266:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000026a:	4a 28       	lddpc	r8,800002f0 <rqe+0xa4>
8000026c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000270:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if ((*pth)->nexttcb == *pth) {
80000274:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000278:	70 08       	ld.w	r8,r8[0x0]
8000027a:	70 09       	ld.w	r9,r8[0x0]
8000027c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000280:	70 08       	ld.w	r8,r8[0x0]
80000282:	10 39       	cp.w	r9,r8
80000284:	c0 f1       	brne	800002a2 <rqe+0x56>
		PA[priority] = NULL;
80000286:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000028a:	49 a8       	lddpc	r8,800002f0 <rqe+0xa4>
8000028c:	30 0a       	mov	r10,0
8000028e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		return 1;
80000292:	30 18       	mov	r8,1
80000294:	c2 98       	rjmp	800002e6 <rqe+0x9a>
	}
	else {
		while (thTmp->nexttcb != (*pth)) {
			thTmp = thTmp->nexttcb;
80000296:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000029a:	70 08       	ld.w	r8,r8[0x0]
8000029c:	ef 48 ff f8 	st.w	r7[-8],r8
800002a0:	c0 28       	rjmp	800002a4 <rqe+0x58>
	if ((*pth)->nexttcb == *pth) {
		PA[priority] = NULL;
		return 1;
	}
	else {
		while (thTmp->nexttcb != (*pth)) {
800002a2:	d7 03       	nop
800002a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002a8:	70 09       	ld.w	r9,r8[0x0]
800002aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002ae:	70 08       	ld.w	r8,r8[0x0]
800002b0:	10 39       	cp.w	r9,r8
800002b2:	cf 21       	brne	80000296 <rqe+0x4a>
			thTmp = thTmp->nexttcb;
		}
		if (PA[priority] == *pth) {
800002b4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800002b8:	48 e8       	lddpc	r8,800002f0 <rqe+0xa4>
800002ba:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800002be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002c2:	70 08       	ld.w	r8,r8[0x0]
800002c4:	10 39       	cp.w	r9,r8
800002c6:	c0 81       	brne	800002d6 <rqe+0x8a>
			PA[priority] = thTmp;
800002c8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800002cc:	48 98       	lddpc	r8,800002f0 <rqe+0xa4>
800002ce:	ee fa ff f8 	ld.w	r10,r7[-8]
800002d2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		}
		thTmp->nexttcb = (*pth)->nexttcb;
800002d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002da:	70 08       	ld.w	r8,r8[0x0]
800002dc:	70 09       	ld.w	r9,r8[0x0]
800002de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002e2:	91 09       	st.w	r8[0x0],r9
		return 0;
800002e4:	30 08       	mov	r8,0
	}
}
800002e6:	10 9c       	mov	r12,r8
800002e8:	2f dd       	sub	sp,-12
800002ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800002ee:	00 00       	add	r0,r0
800002f0:	00 00       	add	r0,r0
800002f2:	05 64       	ld.uh	r4,--r2

800002f4 <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
800002f4:	eb cd 40 80 	pushm	r7,lr
800002f8:	1a 97       	mov	r7,sp
800002fa:	20 1d       	sub	sp,4
	int i = 0;
800002fc:	30 08       	mov	r8,0
800002fe:	ef 48 ff fc 	st.w	r7[-4],r8
	
	//Do initialization of I/O drivers
	ledInit();									//LEDs
80000302:	f0 1f 00 19 	mcall	80000364 <ROSA_init+0x70>
	buttonInit();								//Buttons
80000306:	f0 1f 00 19 	mcall	80000368 <ROSA_init+0x74>
	joystickInit();								//Joystick
8000030a:	f0 1f 00 19 	mcall	8000036c <ROSA_init+0x78>
	potInit();									//Potentiometer
8000030e:	f0 1f 00 19 	mcall	80000370 <ROSA_init+0x7c>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
80000312:	e0 6a 1b 00 	mov	r10,6912
80000316:	ea 1a 00 b7 	orh	r10,0xb7
8000031a:	49 7b       	lddpc	r11,80000374 <ROSA_init+0x80>
8000031c:	fe 7c 14 00 	mov	r12,-60416
80000320:	f0 1f 00 16 	mcall	80000378 <ROSA_init+0x84>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
80000324:	49 68       	lddpc	r8,8000037c <ROSA_init+0x88>
80000326:	30 09       	mov	r9,0
80000328:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
8000032a:	49 68       	lddpc	r8,80000380 <ROSA_init+0x8c>
8000032c:	30 09       	mov	r9,0
8000032e:	91 09       	st.w	r8[0x0],r9
	PREEMPTASK = NULL;
80000330:	49 58       	lddpc	r8,80000384 <ROSA_init+0x90>
80000332:	30 09       	mov	r9,0
80000334:	91 09       	st.w	r8[0x0],r9
	
	for (i = 0; i < MAXNPRIO; i++) {
80000336:	30 08       	mov	r8,0
80000338:	ef 48 ff fc 	st.w	r7[-4],r8
8000033c:	c0 c8       	rjmp	80000354 <ROSA_init+0x60>
		PA[i] = NULL;
8000033e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000342:	49 28       	lddpc	r8,80000388 <ROSA_init+0x94>
80000344:	30 0a       	mov	r10,0
80000346:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
	EXECTASK = NULL;
	PREEMPTASK = NULL;
	
	for (i = 0; i < MAXNPRIO; i++) {
8000034a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000034e:	2f f8       	sub	r8,-1
80000350:	ef 48 ff fc 	st.w	r7[-4],r8
80000354:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000358:	58 b8       	cp.w	r8,11
8000035a:	fe 9a ff f2 	brle	8000033e <ROSA_init+0x4a>
	
	//Initialize the timer to 100 ms period.
	//...
	//timerInit(100);
	//...
}
8000035e:	2f fd       	sub	sp,-4
80000360:	e3 cd 80 80 	ldm	sp++,r7,pc
80000364:	80 00       	ld.sh	r0,r0[0x0]
80000366:	0a 78       	tst	r8,r5
80000368:	80 00       	ld.sh	r0,r0[0x0]
8000036a:	08 9c       	mov	r12,r4
8000036c:	80 00       	ld.sh	r0,r0[0x0]
8000036e:	08 c4       	st.b	r4++,r4
80000370:	80 00       	ld.sh	r0,r0[0x0]
80000372:	0b 44       	ld.w	r4,--r5
80000374:	80 00       	ld.sh	r0,r0[0x0]
80000376:	01 74       	ld.ub	r4,--r0
80000378:	80 00       	ld.sh	r0,r0[0x0]
8000037a:	0c f8       	st.b	--r6,r8
8000037c:	00 00       	add	r0,r0
8000037e:	05 60       	ld.uh	r0,--r2
80000380:	00 00       	add	r0,r0
80000382:	05 98       	ld.ub	r8,r2[0x1]
80000384:	00 00       	add	r0,r0
80000386:	05 94       	ld.ub	r4,r2[0x1]
80000388:	00 00       	add	r0,r0
8000038a:	05 64       	ld.uh	r4,--r2

8000038c <ROSA_tcbCreate>:
 * Comment:
 * 	Create the TCB with correct values.
 *
 **********************************************************/
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
8000038c:	eb cd 40 80 	pushm	r7,lr
80000390:	1a 97       	mov	r7,sp
80000392:	20 6d       	sub	sp,24
80000394:	ef 4c ff f8 	st.w	r7[-8],r12
80000398:	ef 4b ff f4 	st.w	r7[-12],r11
8000039c:	ef 4a ff f0 	st.w	r7[-16],r10
800003a0:	ef 49 ff ec 	st.w	r7[-20],r9
800003a4:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800003a8:	30 08       	mov	r8,0
800003aa:	ef 48 ff fc 	st.w	r7[-4],r8
800003ae:	c1 48       	rjmp	800003d6 <ROSA_tcbCreate+0x4a>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
800003b0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800003b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003b8:	ee fa ff f4 	ld.w	r10,r7[-12]
800003bc:	f4 08 00 08 	add	r8,r10,r8
800003c0:	11 88       	ld.ub	r8,r8[0x0]
800003c2:	ee fa ff f8 	ld.w	r10,r7[-8]
800003c6:	f4 09 00 09 	add	r9,r10,r9
800003ca:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800003cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003d0:	2f f8       	sub	r8,-1
800003d2:	ef 48 ff fc 	st.w	r7[-4],r8
800003d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003da:	58 38       	cp.w	r8,3
800003dc:	fe 9a ff ea 	brle	800003b0 <ROSA_tcbCreate+0x24>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
800003e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003e4:	30 09       	mov	r9,0
800003e6:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
800003e8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800003ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003f0:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
800003f2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800003f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003fa:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
800003fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000400:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000404:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
80000406:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000040a:	a3 68       	lsl	r8,0x2
8000040c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000410:	10 09       	add	r9,r8
80000412:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000416:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
80000418:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000041c:	70 39       	ld.w	r9,r8[0xc]
8000041e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000422:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
80000424:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000428:	fc 19 00 1c 	movh	r9,0x1c
8000042c:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
8000042e:	ee fc ff f8 	ld.w	r12,r7[-8]
80000432:	f0 1f 00 03 	mcall	8000043c <ROSA_tcbCreate+0xb0>
}
80000436:	2f ad       	sub	sp,-24
80000438:	e3 cd 80 80 	ldm	sp++,r7,pc
8000043c:	80 00       	ld.sh	r0,r0[0x0]
8000043e:	06 7e       	tst	lr,r3

80000440 <ROSA_taskCreate>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

int16_t ROSA_taskCreate(ROSA_taskHandle_t ** pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
80000440:	eb cd 40 80 	pushm	r7,lr
80000444:	1a 97       	mov	r7,sp
80000446:	20 6d       	sub	sp,24
80000448:	ef 4c ff f8 	st.w	r7[-8],r12
8000044c:	ef 4b ff f4 	st.w	r7[-12],r11
80000450:	ef 4a ff f0 	st.w	r7[-16],r10
80000454:	ef 49 ff ec 	st.w	r7[-20],r9
80000458:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) calloc(stackSize, sizeof(uint32_t)); 
8000045c:	30 4b       	mov	r11,4
8000045e:	ee fc ff ec 	ld.w	r12,r7[-20]
80000462:	f0 1f 00 28 	mcall	80000500 <ROSA_taskCreate+0xc0>
80000466:	18 98       	mov	r8,r12
80000468:	ef 48 ff fc 	st.w	r7[-4],r8
	
	*pth = (ROSA_taskHandle_t *) malloc(sizeof(ROSA_taskHandle_t));			
8000046c:	37 4c       	mov	r12,116
8000046e:	f0 1f 00 26 	mcall	80000504 <ROSA_taskCreate+0xc4>
80000472:	18 98       	mov	r8,r12
80000474:	10 99       	mov	r9,r8
80000476:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000047a:	91 09       	st.w	r8[0x0],r9
	(*pth)->priority = priority;
8000047c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000480:	70 09       	ld.w	r9,r8[0x0]
80000482:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80000486:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
8000048a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000048e:	70 0a       	ld.w	r10,r8[0x0]
80000490:	30 08       	mov	r8,0
80000492:	30 09       	mov	r9,0
80000494:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
80000498:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000049c:	70 09       	ld.w	r9,r8[0x0]
8000049e:	30 08       	mov	r8,0
800004a0:	f3 68 00 70 	st.b	r9[112],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
800004a4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800004a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800004ac:	72 0c       	ld.w	r12,r9[0x0]
800004ae:	ee f9 ff fc 	ld.w	r9,r7[-4]
800004b2:	ee fa ff f0 	ld.w	r10,r7[-16]
800004b6:	ee fb ff f4 	ld.w	r11,r7[-12]
800004ba:	f0 1f 00 14 	mcall	80000508 <ROSA_taskCreate+0xc8>
	
	rqi(pth);
800004be:	ee fc ff f8 	ld.w	r12,r7[-8]
800004c2:	f0 1f 00 13 	mcall	8000050c <ROSA_taskCreate+0xcc>
	
	if (EXECTASK != NULL) {
800004c6:	49 38       	lddpc	r8,80000510 <ROSA_taskCreate+0xd0>
800004c8:	70 08       	ld.w	r8,r8[0x0]
800004ca:	58 08       	cp.w	r8,0
800004cc:	c1 40       	breq	800004f4 <ROSA_taskCreate+0xb4>
		if (EXECTASK->priority < priority) {
800004ce:	49 18       	lddpc	r8,80000510 <ROSA_taskCreate+0xd0>
800004d0:	70 08       	ld.w	r8,r8[0x0]
800004d2:	f1 38 00 64 	ld.ub	r8,r8[100]
800004d6:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800004da:	f0 09 18 00 	cp.b	r9,r8
800004de:	e0 88 00 0b 	brls	800004f4 <ROSA_taskCreate+0xb4>
			PREEMPTASK = PA[priority];
800004e2:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800004e6:	48 c8       	lddpc	r8,80000514 <ROSA_taskCreate+0xd4>
800004e8:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800004ec:	48 b8       	lddpc	r8,80000518 <ROSA_taskCreate+0xd8>
800004ee:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
800004f0:	f0 1f 00 0b 	mcall	8000051c <ROSA_taskCreate+0xdc>
		}	
	}
	
	return 0;
800004f4:	30 08       	mov	r8,0
}
800004f6:	10 9c       	mov	r12,r8
800004f8:	2f ad       	sub	sp,-24
800004fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800004fe:	00 00       	add	r0,r0
80000500:	80 00       	ld.sh	r0,r0[0x0]
80000502:	0f 54       	ld.sh	r4,--r7
80000504:	80 00       	ld.sh	r0,r0[0x0]
80000506:	0f e4       	ld.ub	r4,r7[0x6]
80000508:	80 00       	ld.sh	r0,r0[0x0]
8000050a:	03 8c       	ld.ub	r12,r1[0x0]
8000050c:	80 00       	ld.sh	r0,r0[0x0]
8000050e:	01 b8       	ld.ub	r8,r0[0x3]
80000510:	00 00       	add	r0,r0
80000512:	05 98       	ld.ub	r8,r2[0x1]
80000514:	00 00       	add	r0,r0
80000516:	05 64       	ld.uh	r4,--r2
80000518:	00 00       	add	r0,r0
8000051a:	05 94       	ld.ub	r4,r2[0x1]
8000051c:	80 00       	ld.sh	r0,r0[0x0]
8000051e:	07 0a       	ld.w	r10,r3++

80000520 <ROSA_taskDelete>:

int16_t ROSA_taskDelete(ROSA_taskHandle_t ** pth)
{	
80000520:	eb cd 40 80 	pushm	r7,lr
80000524:	1a 97       	mov	r7,sp
80000526:	20 2d       	sub	sp,8
80000528:	ef 4c ff f8 	st.w	r7[-8],r12
	rqe(pth);
8000052c:	ee fc ff f8 	ld.w	r12,r7[-8]
80000530:	f0 1f 00 3f 	mcall	8000062c <ROSA_taskDelete+0x10c>
	uint8_t priority;
	
	priority = (*pth)->priority;
80000534:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000538:	70 08       	ld.w	r8,r8[0x0]
8000053a:	f1 38 00 64 	ld.ub	r8,r8[100]
8000053e:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (EXECTASK == (*pth)) {
80000542:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000546:	70 09       	ld.w	r9,r8[0x0]
80000548:	4b a8       	lddpc	r8,80000630 <ROSA_taskDelete+0x110>
8000054a:	70 08       	ld.w	r8,r8[0x0]
8000054c:	10 39       	cp.w	r9,r8
8000054e:	c5 01       	brne	800005ee <ROSA_taskDelete+0xce>
		if (PA[priority] == NULL) {
80000550:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000554:	4b 88       	lddpc	r8,80000634 <ROSA_taskDelete+0x114>
80000556:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000055a:	58 08       	cp.w	r8,0
8000055c:	c2 91       	brne	800005ae <ROSA_taskDelete+0x8e>
			priority = rqsearch();
8000055e:	f0 1f 00 37 	mcall	80000638 <ROSA_taskDelete+0x118>
80000562:	18 98       	mov	r8,r12
80000564:	ef 68 ff ff 	st.b	r7[-1],r8
			PREEMPTASK = PA[priority];
80000568:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000056c:	4b 28       	lddpc	r8,80000634 <ROSA_taskDelete+0x114>
8000056e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000572:	4b 38       	lddpc	r8,8000063c <ROSA_taskDelete+0x11c>
80000574:	91 09       	st.w	r8[0x0],r9
			free( (*pth)->dataarea - (*pth)->datasize);
80000576:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000057a:	70 08       	ld.w	r8,r8[0x0]
8000057c:	70 39       	ld.w	r9,r8[0xc]
8000057e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000582:	70 08       	ld.w	r8,r8[0x0]
80000584:	70 48       	ld.w	r8,r8[0x10]
80000586:	a3 68       	lsl	r8,0x2
80000588:	5c 38       	neg	r8
8000058a:	f2 08 00 08 	add	r8,r9,r8
8000058e:	10 9c       	mov	r12,r8
80000590:	f0 1f 00 2c 	mcall	80000640 <ROSA_taskDelete+0x120>
			free(*pth);
80000594:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000598:	70 08       	ld.w	r8,r8[0x0]
8000059a:	10 9c       	mov	r12,r8
8000059c:	f0 1f 00 29 	mcall	80000640 <ROSA_taskDelete+0x120>
			*pth = NULL;
800005a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005a4:	30 09       	mov	r9,0
800005a6:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
800005a8:	f0 1f 00 27 	mcall	80000644 <ROSA_taskDelete+0x124>
800005ac:	c2 18       	rjmp	800005ee <ROSA_taskDelete+0xce>
		}		
		else {
			PREEMPTASK = EXECTASK->nexttcb;
800005ae:	4a 18       	lddpc	r8,80000630 <ROSA_taskDelete+0x110>
800005b0:	70 08       	ld.w	r8,r8[0x0]
800005b2:	70 09       	ld.w	r9,r8[0x0]
800005b4:	4a 28       	lddpc	r8,8000063c <ROSA_taskDelete+0x11c>
800005b6:	91 09       	st.w	r8[0x0],r9
			free( (*pth)->dataarea - (*pth)->datasize);
800005b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005bc:	70 08       	ld.w	r8,r8[0x0]
800005be:	70 39       	ld.w	r9,r8[0xc]
800005c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005c4:	70 08       	ld.w	r8,r8[0x0]
800005c6:	70 48       	ld.w	r8,r8[0x10]
800005c8:	a3 68       	lsl	r8,0x2
800005ca:	5c 38       	neg	r8
800005cc:	f2 08 00 08 	add	r8,r9,r8
800005d0:	10 9c       	mov	r12,r8
800005d2:	f0 1f 00 1c 	mcall	80000640 <ROSA_taskDelete+0x120>
			free(*pth);
800005d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005da:	70 08       	ld.w	r8,r8[0x0]
800005dc:	10 9c       	mov	r12,r8
800005de:	f0 1f 00 19 	mcall	80000640 <ROSA_taskDelete+0x120>
			*pth = NULL;
800005e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005e6:	30 09       	mov	r9,0
800005e8:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
800005ea:	f0 1f 00 17 	mcall	80000644 <ROSA_taskDelete+0x124>
		}
	}
	
	free( (*pth)->dataarea - (*pth)->datasize);
800005ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005f2:	70 08       	ld.w	r8,r8[0x0]
800005f4:	70 39       	ld.w	r9,r8[0xc]
800005f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005fa:	70 08       	ld.w	r8,r8[0x0]
800005fc:	70 48       	ld.w	r8,r8[0x10]
800005fe:	a3 68       	lsl	r8,0x2
80000600:	5c 38       	neg	r8
80000602:	f2 08 00 08 	add	r8,r9,r8
80000606:	10 9c       	mov	r12,r8
80000608:	f0 1f 00 0e 	mcall	80000640 <ROSA_taskDelete+0x120>
	free(*pth);
8000060c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000610:	70 08       	ld.w	r8,r8[0x0]
80000612:	10 9c       	mov	r12,r8
80000614:	f0 1f 00 0b 	mcall	80000640 <ROSA_taskDelete+0x120>
	*pth = NULL;
80000618:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000061c:	30 09       	mov	r9,0
8000061e:	91 09       	st.w	r8[0x0],r9
	
	return 0;
80000620:	30 08       	mov	r8,0
80000622:	10 9c       	mov	r12,r8
80000624:	2f ed       	sub	sp,-8
80000626:	e3 cd 80 80 	ldm	sp++,r7,pc
8000062a:	00 00       	add	r0,r0
8000062c:	80 00       	ld.sh	r0,r0[0x0]
8000062e:	02 4c       	or	r12,r1
80000630:	00 00       	add	r0,r0
80000632:	05 98       	ld.ub	r8,r2[0x1]
80000634:	00 00       	add	r0,r0
80000636:	05 64       	ld.uh	r4,--r2
80000638:	80 00       	ld.sh	r0,r0[0x0]
8000063a:	01 80       	ld.ub	r0,r0[0x0]
8000063c:	00 00       	add	r0,r0
8000063e:	05 94       	ld.ub	r4,r2[0x1]
80000640:	80 00       	ld.sh	r0,r0[0x0]
80000642:	0f cc       	ld.ub	r12,r7[0x4]
80000644:	80 00       	ld.sh	r0,r0[0x0]
80000646:	07 0a       	ld.w	r10,r3++

80000648 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80000648:	4b 5c       	lddpc	r12,8000071c <_yield+0xa>
	lda.w r11,EXECTASK
8000064a:	4b 6b       	lddpc	r11,80000720 <_yield+0xe>
	ld.w r12,r12[0x0]
8000064c:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
8000064e:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000650:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000652:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000654:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000658:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
8000065a:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
8000065c:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
8000065e:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80000662:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000664:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80000666:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000668:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
8000066a:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
8000066c:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
8000066e:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000670:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80000672:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000674:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000676:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000678:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
8000067a:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
8000067c:	1c 9f       	mov	pc,lr

8000067e <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
8000067e:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000680:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80000682:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000684:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000688:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
8000068c:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000690:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000694:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000698:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
8000069c:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
800006a0:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
800006a4:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
800006a8:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
800006aa:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
800006ac:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
800006ae:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
800006b0:	1c 9f       	mov	pc,lr

800006b2 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
800006b2:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
800006b4:	49 bc       	lddpc	r12,80000720 <_yield+0xe>
	ld.w r12,r12[0x0]
800006b6:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
800006b8:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
800006ba:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
800006bc:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
800006be:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
800006c0:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
800006c2:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
800006c4:	33 40       	mov	r0,52
	add r0,r12
800006c6:	18 00       	add	r0,r12
	stmts r0,r0-r11
800006c8:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
800006cc:	1a 90       	mov	r0,sp
	st.w --sp,r0
800006ce:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800006d0:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
800006d4:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
800006d6:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
800006d8:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
800006da:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
800006dc:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
800006de:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
800006e0:	1c 9f       	mov	pc,lr

800006e2 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800006e2:	49 0c       	lddpc	r12,80000720 <_yield+0xe>
	ld.w r12,r12[0x0]
800006e4:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
800006e6:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
800006e8:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
800006ea:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
800006ee:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
800006f0:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800006f2:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
800006f4:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800006f6:	33 40       	mov	r0,52
	add r0,r12
800006f8:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800006fa:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800006fe:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000700:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80000702:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80000704:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000706:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80000708:	d6 13       	rets

8000070a <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
8000070a:	d4 01       	pushm	lr
	lda.w lr,_yield
8000070c:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000710:	d7 33       	scall

80000712 <_yield>:
_yield:
	call contextSave
80000712:	cd 0f       	rcall	800006b2 <contextSave>
	call scheduler
80000714:	f0 1f 00 04 	mcall	80000724 <_yield+0x12>
	call contextRestore
80000718:	ce 5f       	rcall	800006e2 <contextRestore>
8000071a:	00 00       	add	r0,r0
8000071c:	00 00       	add	r0,r0
8000071e:	05 60       	ld.uh	r0,--r2
80000720:	00 00       	add	r0,r0
80000722:	05 98       	ld.ub	r8,r2[0x1]
80000724:	80 00       	ld.sh	r0,r0[0x0]
80000726:	07 28       	ld.uh	r8,r3++

80000728 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000728:	eb cd 40 80 	pushm	r7,lr
8000072c:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK == NULL) {
8000072e:	48 f8       	lddpc	r8,80000768 <scheduler+0x40>
80000730:	70 08       	ld.w	r8,r8[0x0]
80000732:	58 08       	cp.w	r8,0
80000734:	c1 11       	brne	80000756 <scheduler+0x2e>
		PA[EXECTASK->priority] = EXECTASK;
80000736:	48 e8       	lddpc	r8,8000076c <scheduler+0x44>
80000738:	70 08       	ld.w	r8,r8[0x0]
8000073a:	f1 38 00 64 	ld.ub	r8,r8[100]
8000073e:	10 99       	mov	r9,r8
80000740:	48 b8       	lddpc	r8,8000076c <scheduler+0x44>
80000742:	70 0a       	ld.w	r10,r8[0x0]
80000744:	48 b8       	lddpc	r8,80000770 <scheduler+0x48>
80000746:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		EXECTASK = EXECTASK->nexttcb;
8000074a:	48 98       	lddpc	r8,8000076c <scheduler+0x44>
8000074c:	70 08       	ld.w	r8,r8[0x0]
8000074e:	70 09       	ld.w	r9,r8[0x0]
80000750:	48 78       	lddpc	r8,8000076c <scheduler+0x44>
80000752:	91 09       	st.w	r8[0x0],r9
80000754:	c0 88       	rjmp	80000764 <scheduler+0x3c>
	}
	else {
		EXECTASK = PREEMPTASK;
80000756:	48 58       	lddpc	r8,80000768 <scheduler+0x40>
80000758:	70 09       	ld.w	r9,r8[0x0]
8000075a:	48 58       	lddpc	r8,8000076c <scheduler+0x44>
8000075c:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
8000075e:	48 38       	lddpc	r8,80000768 <scheduler+0x40>
80000760:	30 09       	mov	r9,0
80000762:	91 09       	st.w	r8[0x0],r9
	}
}
80000764:	e3 cd 80 80 	ldm	sp++,r7,pc
80000768:	00 00       	add	r0,r0
8000076a:	05 94       	ld.ub	r4,r2[0x1]
8000076c:	00 00       	add	r0,r0
8000076e:	05 98       	ld.ub	r8,r2[0x1]
80000770:	00 00       	add	r0,r0
80000772:	05 64       	ld.uh	r4,--r2

80000774 <ROSA_startScheduler>:

void ROSA_startScheduler(void)
{
80000774:	eb cd 40 80 	pushm	r7,lr
80000778:	1a 97       	mov	r7,sp
8000077a:	20 1d       	sub	sp,4
	int i = MAXNPRIO;
8000077c:	30 c8       	mov	r8,12
8000077e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	while (PA[--i] == NULL) {
80000782:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000786:	20 18       	sub	r8,1
80000788:	ef 48 ff fc 	st.w	r7[-4],r8
8000078c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000790:	48 98       	lddpc	r8,800007b4 <ROSA_startScheduler+0x40>
80000792:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000796:	58 08       	cp.w	r8,0
80000798:	cf 50       	breq	80000782 <ROSA_startScheduler+0xe>
		;
	}
	
	TCBLIST = PA[i]->nexttcb;
8000079a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000079e:	48 68       	lddpc	r8,800007b4 <ROSA_startScheduler+0x40>
800007a0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800007a4:	70 09       	ld.w	r9,r8[0x0]
800007a6:	48 58       	lddpc	r8,800007b8 <ROSA_startScheduler+0x44>
800007a8:	91 09       	st.w	r8[0x0],r9
	
	ROSA_start();
800007aa:	f0 1f 00 05 	mcall	800007bc <ROSA_startScheduler+0x48>
}
800007ae:	2f fd       	sub	sp,-4
800007b0:	e3 cd 80 80 	ldm	sp++,r7,pc
800007b4:	00 00       	add	r0,r0
800007b6:	05 64       	ld.uh	r4,--r2
800007b8:	00 00       	add	r0,r0
800007ba:	05 60       	ld.uh	r0,--r2
800007bc:	80 00       	ld.sh	r0,r0[0x0]
800007be:	06 48       	or	r8,r3

800007c0 <C.0.9414>:
800007c0:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

800007d0 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
800007d0:	eb cd 40 80 	pushm	r7,lr
800007d4:	1a 97       	mov	r7,sp
800007d6:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
800007d8:	fe 78 38 00 	mov	r8,-51200
800007dc:	ef 48 ff fc 	st.w	r7[-4],r8

	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
800007e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007e4:	70 88       	ld.w	r8,r8[0x20]
800007e6:	ef 48 ff f8 	st.w	r7[-8],r8
	//if(sr & AVR32_TC_CPCS_MASK)
		//ROSA_yieldFromISR();
}
800007ea:	2f ed       	sub	sp,-8
800007ec:	e3 cd 40 80 	ldm	sp++,r7,lr
800007f0:	d6 03       	rete
800007f2:	d7 03       	nop

800007f4 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
800007f4:	eb cd 40 80 	pushm	r7,lr
800007f8:	1a 97       	mov	r7,sp
800007fa:	20 7d       	sub	sp,28
800007fc:	ef 4c ff e4 	st.w	r7[-28],r12

	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000800:	4a 48       	lddpc	r8,80000890 <timerPeriodSet+0x9c>
80000802:	ee ca 00 18 	sub	r10,r7,24
80000806:	10 9b       	mov	r11,r8
80000808:	f6 e8 00 00 	ld.d	r8,r11[0]
8000080c:	f4 e9 00 00 	st.d	r10[0],r8
80000810:	f6 e8 00 08 	ld.d	r8,r11[8]
80000814:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000818:	30 48       	mov	r8,4
8000081a:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
8000081e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000822:	20 18       	sub	r8,1
80000824:	a3 68       	lsl	r8,0x2
80000826:	ee 08 00 08 	add	r8,r7,r8
8000082a:	f0 f9 ff e8 	ld.w	r9,r8[-24]
8000082e:	e0 68 1b 00 	mov	r8,6912
80000832:	ea 18 00 b7 	orh	r8,0xb7
80000836:	f0 09 0c 08 	divs	r8,r8,r9
8000083a:	10 99       	mov	r9,r8
8000083c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000840:	b1 39       	mul	r9,r8
80000842:	e0 68 4d d3 	mov	r8,19923
80000846:	ea 18 10 62 	orh	r8,0x1062
8000084a:	f2 08 06 48 	mulu.d	r8,r9,r8
8000084e:	f2 08 16 06 	lsr	r8,r9,0x6
80000852:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80000856:	ee fc ff fc 	ld.w	r12,r7[-4]
8000085a:	f0 1f 00 0f 	mcall	80000894 <timerPeriodSet+0xa0>
	timerRCSet(rc);
8000085e:	ee fc ff f8 	ld.w	r12,r7[-8]
80000862:	f0 1f 00 0e 	mcall	80000898 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80000866:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000086a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000086e:	f2 08 02 4a 	mul	r10,r9,r8
80000872:	e0 68 9f 81 	mov	r8,40833
80000876:	ea 18 16 5e 	orh	r8,0x165e
8000087a:	f4 08 04 48 	muls.d	r8,r10,r8
8000087e:	b5 49       	asr	r9,0x14
80000880:	f4 08 14 1f 	asr	r8,r10,0x1f
80000884:	f2 08 01 08 	sub	r8,r9,r8
}
80000888:	10 9c       	mov	r12,r8
8000088a:	2f 9d       	sub	sp,-28
8000088c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000890:	80 00       	ld.sh	r0,r0[0x0]
80000892:	07 c0       	ld.ub	r0,r3[0x4]
80000894:	80 00       	ld.sh	r0,r0[0x0]
80000896:	0e 90       	mov	r0,r7
80000898:	80 00       	ld.sh	r0,r0[0x0]
8000089a:	0e 7a       	tst	r10,r7

8000089c <buttonInit>:
8000089c:	eb cd 40 80 	pushm	r7,lr
800008a0:	1a 97       	mov	r7,sp
800008a2:	30 1b       	mov	r11,1
800008a4:	35 8c       	mov	r12,88
800008a6:	f0 1f 00 07 	mcall	800008c0 <buttonInit+0x24>
800008aa:	30 1b       	mov	r11,1
800008ac:	35 5c       	mov	r12,85
800008ae:	f0 1f 00 05 	mcall	800008c0 <buttonInit+0x24>
800008b2:	30 1b       	mov	r11,1
800008b4:	35 2c       	mov	r12,82
800008b6:	f0 1f 00 03 	mcall	800008c0 <buttonInit+0x24>
800008ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800008be:	00 00       	add	r0,r0
800008c0:	80 00       	ld.sh	r0,r0[0x0]
800008c2:	09 30       	ld.ub	r0,r4++

800008c4 <joystickInit>:
800008c4:	eb cd 40 80 	pushm	r7,lr
800008c8:	1a 97       	mov	r7,sp
800008ca:	30 1b       	mov	r11,1
800008cc:	31 bc       	mov	r12,27
800008ce:	f0 1f 00 0b 	mcall	800008f8 <joystickInit+0x34>
800008d2:	30 1b       	mov	r11,1
800008d4:	31 9c       	mov	r12,25
800008d6:	f0 1f 00 09 	mcall	800008f8 <joystickInit+0x34>
800008da:	30 1b       	mov	r11,1
800008dc:	31 cc       	mov	r12,28
800008de:	f0 1f 00 07 	mcall	800008f8 <joystickInit+0x34>
800008e2:	30 1b       	mov	r11,1
800008e4:	31 4c       	mov	r12,20
800008e6:	f0 1f 00 05 	mcall	800008f8 <joystickInit+0x34>
800008ea:	30 1b       	mov	r11,1
800008ec:	31 ac       	mov	r12,26
800008ee:	f0 1f 00 03 	mcall	800008f8 <joystickInit+0x34>
800008f2:	e3 cd 80 80 	ldm	sp++,r7,pc
800008f6:	00 00       	add	r0,r0
800008f8:	80 00       	ld.sh	r0,r0[0x0]
800008fa:	09 30       	ld.ub	r0,r4++

800008fc <delay_ms>:
800008fc:	eb cd 40 80 	pushm	r7,lr
80000900:	1a 97       	mov	r7,sp
80000902:	20 2d       	sub	sp,8
80000904:	ef 4c ff f8 	st.w	r7[-8],r12
80000908:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000090c:	e0 69 04 42 	mov	r9,1090
80000910:	b3 38       	mul	r8,r9
80000912:	ef 48 ff fc 	st.w	r7[-4],r8
80000916:	c0 68       	rjmp	80000922 <delay_ms+0x26>
80000918:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000091c:	20 18       	sub	r8,1
8000091e:	ef 48 ff fc 	st.w	r7[-4],r8
80000922:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000926:	58 08       	cp.w	r8,0
80000928:	cf 81       	brne	80000918 <delay_ms+0x1c>
8000092a:	2f ed       	sub	sp,-8
8000092c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000930 <gpioInit>:
80000930:	eb cd 40 80 	pushm	r7,lr
80000934:	1a 97       	mov	r7,sp
80000936:	20 7d       	sub	sp,28
80000938:	ef 4c ff ec 	st.w	r7[-20],r12
8000093c:	ef 4b ff e8 	st.w	r7[-24],r11
80000940:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000944:	a5 58       	asr	r8,0x5
80000946:	ef 48 ff f4 	st.w	r7[-12],r8
8000094a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000094e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000952:	ef 48 ff fc 	st.w	r7[-4],r8
80000956:	30 19       	mov	r9,1
80000958:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000095c:	f2 08 09 48 	lsl	r8,r9,r8
80000960:	ef 48 ff f8 	st.w	r7[-8],r8
80000964:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000968:	a9 68       	lsl	r8,0x8
8000096a:	e0 28 f0 00 	sub	r8,61440
8000096e:	ef 48 ff f0 	st.w	r7[-16],r8
80000972:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000976:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000097a:	91 19       	st.w	r8[0x4],r9
8000097c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000980:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000984:	91 69       	st.w	r8[0x18],r9
80000986:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000098a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000098e:	91 a9       	st.w	r8[0x28],r9
80000990:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000994:	ef 48 ff e4 	st.w	r7[-28],r8
80000998:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000099c:	58 08       	cp.w	r8,0
8000099e:	c0 60       	breq	800009aa <gpioInit+0x7a>
800009a0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800009a4:	58 18       	cp.w	r8,1
800009a6:	c0 90       	breq	800009b8 <gpioInit+0x88>
800009a8:	c0 f8       	rjmp	800009c6 <gpioInit+0x96>
800009aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009b2:	f1 49 00 44 	st.w	r8[68],r9
800009b6:	c0 e8       	rjmp	800009d2 <gpioInit+0xa2>
800009b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009c0:	f1 49 00 48 	st.w	r8[72],r9
800009c4:	c0 78       	rjmp	800009d2 <gpioInit+0xa2>
800009c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009ce:	f1 49 00 48 	st.w	r8[72],r9
800009d2:	2f 9d       	sub	sp,-28
800009d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800009d8 <gpioClear>:
800009d8:	eb cd 40 80 	pushm	r7,lr
800009dc:	1a 97       	mov	r7,sp
800009de:	20 5d       	sub	sp,20
800009e0:	ef 4c ff ec 	st.w	r7[-20],r12
800009e4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800009e8:	a5 58       	asr	r8,0x5
800009ea:	ef 48 ff f4 	st.w	r7[-12],r8
800009ee:	ee f8 ff ec 	ld.w	r8,r7[-20]
800009f2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800009f6:	ef 48 ff fc 	st.w	r7[-4],r8
800009fa:	30 19       	mov	r9,1
800009fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a00:	f2 08 09 48 	lsl	r8,r9,r8
80000a04:	ef 48 ff f8 	st.w	r7[-8],r8
80000a08:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a0c:	a9 68       	lsl	r8,0x8
80000a0e:	e0 28 f0 00 	sub	r8,61440
80000a12:	ef 48 ff f0 	st.w	r7[-16],r8
80000a16:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a1a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000a1e:	f1 49 00 58 	st.w	r8[88],r9
80000a22:	2f bd       	sub	sp,-20
80000a24:	e3 cd 80 80 	ldm	sp++,r7,pc

80000a28 <gpioSet>:
80000a28:	eb cd 40 80 	pushm	r7,lr
80000a2c:	1a 97       	mov	r7,sp
80000a2e:	20 5d       	sub	sp,20
80000a30:	ef 4c ff ec 	st.w	r7[-20],r12
80000a34:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000a38:	a5 58       	asr	r8,0x5
80000a3a:	ef 48 ff f4 	st.w	r7[-12],r8
80000a3e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000a42:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000a46:	ef 48 ff fc 	st.w	r7[-4],r8
80000a4a:	30 19       	mov	r9,1
80000a4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a50:	f2 08 09 48 	lsl	r8,r9,r8
80000a54:	ef 48 ff f8 	st.w	r7[-8],r8
80000a58:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a5c:	a9 68       	lsl	r8,0x8
80000a5e:	e0 28 f0 00 	sub	r8,61440
80000a62:	ef 48 ff f0 	st.w	r7[-16],r8
80000a66:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a6a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000a6e:	f1 49 00 54 	st.w	r8[84],r9
80000a72:	2f bd       	sub	sp,-20
80000a74:	e3 cd 80 80 	ldm	sp++,r7,pc

80000a78 <ledInit>:
80000a78:	eb cd 40 80 	pushm	r7,lr
80000a7c:	1a 97       	mov	r7,sp
80000a7e:	20 9d       	sub	sp,36
80000a80:	49 e8       	lddpc	r8,80000af8 <ledInit+0x80>
80000a82:	ee cb 00 24 	sub	r11,r7,36
80000a86:	10 9a       	mov	r10,r8
80000a88:	f4 e8 00 00 	ld.d	r8,r10[0]
80000a8c:	f6 e9 00 00 	st.d	r11[0],r8
80000a90:	f4 e8 00 08 	ld.d	r8,r10[8]
80000a94:	f6 e9 00 08 	st.d	r11[8],r8
80000a98:	f4 e8 00 10 	ld.d	r8,r10[16]
80000a9c:	f6 e9 00 10 	st.d	r11[16],r8
80000aa0:	f4 e8 00 18 	ld.d	r8,r10[24]
80000aa4:	f6 e9 00 18 	st.d	r11[24],r8
80000aa8:	30 08       	mov	r8,0
80000aaa:	ef 48 ff fc 	st.w	r7[-4],r8
80000aae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ab2:	a3 68       	lsl	r8,0x2
80000ab4:	ee 08 00 08 	add	r8,r7,r8
80000ab8:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000abc:	10 9c       	mov	r12,r8
80000abe:	f0 1f 00 10 	mcall	80000afc <ledInit+0x84>
80000ac2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ac6:	a3 68       	lsl	r8,0x2
80000ac8:	ee 08 00 08 	add	r8,r7,r8
80000acc:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000ad0:	30 0b       	mov	r11,0
80000ad2:	10 9c       	mov	r12,r8
80000ad4:	f0 1f 00 0b 	mcall	80000b00 <ledInit+0x88>
80000ad8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000adc:	58 78       	cp.w	r8,7
80000ade:	5f 18       	srne	r8
80000ae0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000ae4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ae8:	2f f8       	sub	r8,-1
80000aea:	ef 48 ff fc 	st.w	r7[-4],r8
80000aee:	58 09       	cp.w	r9,0
80000af0:	cd f1       	brne	80000aae <ledInit+0x36>
80000af2:	2f 7d       	sub	sp,-36
80000af4:	e3 cd 80 80 	ldm	sp++,r7,pc
80000af8:	80 00       	ld.sh	r0,r0[0x0]
80000afa:	1c 00       	add	r0,lr
80000afc:	80 00       	ld.sh	r0,r0[0x0]
80000afe:	0b 24       	ld.uh	r4,r5++
80000b00:	80 00       	ld.sh	r0,r0[0x0]
80000b02:	09 30       	ld.ub	r0,r4++

80000b04 <ledOn>:
80000b04:	eb cd 40 80 	pushm	r7,lr
80000b08:	1a 97       	mov	r7,sp
80000b0a:	20 1d       	sub	sp,4
80000b0c:	ef 4c ff fc 	st.w	r7[-4],r12
80000b10:	ee fc ff fc 	ld.w	r12,r7[-4]
80000b14:	f0 1f 00 03 	mcall	80000b20 <ledOn+0x1c>
80000b18:	2f fd       	sub	sp,-4
80000b1a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b1e:	00 00       	add	r0,r0
80000b20:	80 00       	ld.sh	r0,r0[0x0]
80000b22:	09 d8       	ld.ub	r8,r4[0x5]

80000b24 <ledOff>:
80000b24:	eb cd 40 80 	pushm	r7,lr
80000b28:	1a 97       	mov	r7,sp
80000b2a:	20 1d       	sub	sp,4
80000b2c:	ef 4c ff fc 	st.w	r7[-4],r12
80000b30:	ee fc ff fc 	ld.w	r12,r7[-4]
80000b34:	f0 1f 00 03 	mcall	80000b40 <ledOff+0x1c>
80000b38:	2f fd       	sub	sp,-4
80000b3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b3e:	00 00       	add	r0,r0
80000b40:	80 00       	ld.sh	r0,r0[0x0]
80000b42:	0a 28       	rsub	r8,r5

80000b44 <potInit>:
80000b44:	d3 01       	pushm	r11-r12
80000b46:	e0 6c 10 00 	mov	r12,4096
80000b4a:	ea 1c ff ff 	orh	r12,0xffff
80000b4e:	31 6b       	mov	r11,22
80000b50:	99 2b       	st.w	r12[0x8],r11
80000b52:	99 6b       	st.w	r12[0x18],r11
80000b54:	99 6b       	st.w	r12[0x18],r11
80000b56:	e0 6c 3c 00 	mov	r12,15360
80000b5a:	ea 1c ff ff 	orh	r12,0xffff
80000b5e:	30 1b       	mov	r11,1
80000b60:	99 0b       	st.w	r12[0x0],r11
80000b62:	e0 6b 0f 1f 	mov	r11,3871
80000b66:	b1 6b       	lsl	r11,0x10
80000b68:	99 1b       	st.w	r12[0x4],r11
80000b6a:	30 2b       	mov	r11,2
80000b6c:	99 4b       	st.w	r12[0x10],r11
80000b6e:	d3 02       	popm	r11-r12
80000b70:	1c 9f       	mov	pc,lr

80000b72 <potGetValue>:
80000b72:	d1 81       	pushm	r10-r11
80000b74:	e0 6c 3c 00 	mov	r12,15360
80000b78:	ea 1c ff ff 	orh	r12,0xffff
80000b7c:	30 2b       	mov	r11,2
80000b7e:	99 0b       	st.w	r12[0x0],r11

80000b80 <a1>:
80000b80:	78 7a       	ld.w	r10,r12[0x1c]
80000b82:	16 7a       	tst	r10,r11
80000b84:	cf e0       	breq	80000b80 <a1>
80000b86:	78 dc       	ld.w	r12,r12[0x34]
80000b88:	d1 82       	popm	r10-r11
80000b8a:	1c 9f       	mov	pc,lr

80000b8c <usartReset>:
80000b8c:	eb cd 40 80 	pushm	r7,lr
80000b90:	1a 97       	mov	r7,sp
80000b92:	20 3d       	sub	sp,12
80000b94:	ef 4c ff f8 	st.w	r7[-8],r12
80000b98:	f0 1f 00 16 	mcall	80000bf0 <usartReset+0x64>
80000b9c:	18 98       	mov	r8,r12
80000b9e:	ef 48 ff fc 	st.w	r7[-4],r8
80000ba2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ba6:	58 08       	cp.w	r8,0
80000ba8:	c0 30       	breq	80000bae <usartReset+0x22>
80000baa:	f0 1f 00 13 	mcall	80000bf4 <usartReset+0x68>
80000bae:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bb2:	3f f8       	mov	r8,-1
80000bb4:	93 38       	st.w	r9[0xc],r8
80000bb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bba:	70 58       	ld.w	r8,r8[0x14]
80000bbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bc0:	58 08       	cp.w	r8,0
80000bc2:	c0 30       	breq	80000bc8 <usartReset+0x3c>
80000bc4:	f0 1f 00 0d 	mcall	80000bf8 <usartReset+0x6c>
80000bc8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bcc:	30 08       	mov	r8,0
80000bce:	93 18       	st.w	r9[0x4],r8
80000bd0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bd4:	30 08       	mov	r8,0
80000bd6:	93 98       	st.w	r9[0x24],r8
80000bd8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bdc:	30 08       	mov	r8,0
80000bde:	93 a8       	st.w	r9[0x28],r8
80000be0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000be4:	ea 68 61 0c 	mov	r8,680204
80000be8:	93 08       	st.w	r9[0x0],r8
80000bea:	2f dd       	sub	sp,-12
80000bec:	e3 cd 80 80 	ldm	sp++,r7,pc
80000bf0:	80 00       	ld.sh	r0,r0[0x0]
80000bf2:	19 6e       	ld.uh	lr,--r12
80000bf4:	80 00       	ld.sh	r0,r0[0x0]
80000bf6:	19 66       	ld.uh	r6,--r12
80000bf8:	80 00       	ld.sh	r0,r0[0x0]
80000bfa:	19 6a       	ld.uh	r10,--r12

80000bfc <usartSetBaudrate>:
80000bfc:	eb cd 40 80 	pushm	r7,lr
80000c00:	1a 97       	mov	r7,sp
80000c02:	20 bd       	sub	sp,44
80000c04:	ef 4c ff ec 	st.w	r7[-20],r12
80000c08:	ef 4b ff e8 	st.w	r7[-24],r11
80000c0c:	ef 4a ff e4 	st.w	r7[-28],r10
80000c10:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000c14:	f0 09 15 04 	lsl	r9,r8,0x4
80000c18:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c1c:	10 39       	cp.w	r9,r8
80000c1e:	e0 8b 00 06 	brhi	80000c2a <usartSetBaudrate+0x2e>
80000c22:	31 09       	mov	r9,16
80000c24:	ef 49 ff d4 	st.w	r7[-44],r9
80000c28:	c0 48       	rjmp	80000c30 <usartSetBaudrate+0x34>
80000c2a:	30 88       	mov	r8,8
80000c2c:	ef 48 ff d4 	st.w	r7[-44],r8
80000c30:	ee f9 ff d4 	ld.w	r9,r7[-44]
80000c34:	ef 49 ff f0 	st.w	r7[-16],r9
80000c38:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c3c:	f0 0a 15 03 	lsl	r10,r8,0x3
80000c40:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000c44:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000c48:	f2 08 02 48 	mul	r8,r9,r8
80000c4c:	a1 98       	lsr	r8,0x1
80000c4e:	10 0a       	add	r10,r8
80000c50:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000c54:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000c58:	f2 08 02 48 	mul	r8,r9,r8
80000c5c:	f4 08 0d 08 	divu	r8,r10,r8
80000c60:	ef 48 ff f4 	st.w	r7[-12],r8
80000c64:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c68:	a3 98       	lsr	r8,0x3
80000c6a:	ef 48 ff f8 	st.w	r7[-8],r8
80000c6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c72:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000c76:	ef 48 ff fc 	st.w	r7[-4],r8
80000c7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c7e:	58 08       	cp.w	r8,0
80000c80:	c0 70       	breq	80000c8e <usartSetBaudrate+0x92>
80000c82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c86:	e0 48 ff ff 	cp.w	r8,65535
80000c8a:	e0 88 00 06 	brls	80000c96 <usartSetBaudrate+0x9a>
80000c8e:	30 18       	mov	r8,1
80000c90:	ef 48 ff d8 	st.w	r7[-40],r8
80000c94:	c2 c8       	rjmp	80000cec <usartSetBaudrate+0xf0>
80000c96:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c9a:	70 18       	ld.w	r8,r8[0x4]
80000c9c:	10 99       	mov	r9,r8
80000c9e:	e4 19 ff f7 	andh	r9,0xfff7
80000ca2:	e0 19 fe cf 	andl	r9,0xfecf
80000ca6:	ef 49 ff dc 	st.w	r7[-36],r9
80000caa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cae:	59 08       	cp.w	r8,16
80000cb0:	c0 60       	breq	80000cbc <usartSetBaudrate+0xc0>
80000cb2:	e8 68 00 00 	mov	r8,524288
80000cb6:	ef 48 ff e0 	st.w	r7[-32],r8
80000cba:	c0 48       	rjmp	80000cc2 <usartSetBaudrate+0xc6>
80000cbc:	30 09       	mov	r9,0
80000cbe:	ef 49 ff e0 	st.w	r7[-32],r9
80000cc2:	ee f9 ff dc 	ld.w	r9,r7[-36]
80000cc6:	ee f8 ff e0 	ld.w	r8,r7[-32]
80000cca:	10 49       	or	r9,r8
80000ccc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000cd0:	91 19       	st.w	r8[0x4],r9
80000cd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cd6:	f0 09 15 10 	lsl	r9,r8,0x10
80000cda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cde:	10 49       	or	r9,r8
80000ce0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ce4:	91 89       	st.w	r8[0x20],r9
80000ce6:	30 09       	mov	r9,0
80000ce8:	ef 49 ff d8 	st.w	r7[-40],r9
80000cec:	ee f8 ff d8 	ld.w	r8,r7[-40]
80000cf0:	10 9c       	mov	r12,r8
80000cf2:	2f 5d       	sub	sp,-44
80000cf4:	e3 cd 80 80 	ldm	sp++,r7,pc

80000cf8 <usartInit>:
80000cf8:	eb cd 40 80 	pushm	r7,lr
80000cfc:	1a 97       	mov	r7,sp
80000cfe:	20 4d       	sub	sp,16
80000d00:	ef 4c ff f8 	st.w	r7[-8],r12
80000d04:	ef 4b ff f4 	st.w	r7[-12],r11
80000d08:	ef 4a ff f0 	st.w	r7[-16],r10
80000d0c:	fe 78 10 00 	mov	r8,-61440
80000d10:	ef 48 ff fc 	st.w	r7[-4],r8
80000d14:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000d18:	30 18       	mov	r8,1
80000d1a:	93 28       	st.w	r9[0x8],r8
80000d1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000d20:	30 28       	mov	r8,2
80000d22:	93 28       	st.w	r9[0x8],r8
80000d24:	ee fc ff f8 	ld.w	r12,r7[-8]
80000d28:	f0 1f 00 3b 	mcall	80000e14 <usartInit+0x11c>
80000d2c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000d30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d34:	70 08       	ld.w	r8,r8[0x0]
80000d36:	12 9a       	mov	r10,r9
80000d38:	10 9b       	mov	r11,r8
80000d3a:	ee fc ff f8 	ld.w	r12,r7[-8]
80000d3e:	f0 1f 00 37 	mcall	80000e18 <usartInit+0x120>
80000d42:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d46:	11 c9       	ld.ub	r9,r8[0x4]
80000d48:	30 98       	mov	r8,9
80000d4a:	f0 09 18 00 	cp.b	r9,r8
80000d4e:	c0 a1       	brne	80000d62 <usartInit+0x6a>
80000d50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d54:	70 18       	ld.w	r8,r8[0x4]
80000d56:	10 99       	mov	r9,r8
80000d58:	b1 b9       	sbr	r9,0x11
80000d5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d5e:	91 19       	st.w	r8[0x4],r9
80000d60:	c0 d8       	rjmp	80000d7a <usartInit+0x82>
80000d62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d66:	70 19       	ld.w	r9,r8[0x4]
80000d68:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d6c:	11 c8       	ld.ub	r8,r8[0x4]
80000d6e:	20 58       	sub	r8,5
80000d70:	a7 68       	lsl	r8,0x6
80000d72:	10 49       	or	r9,r8
80000d74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d78:	91 19       	st.w	r8[0x4],r9
80000d7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d7e:	70 1a       	ld.w	r10,r8[0x4]
80000d80:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d84:	11 d8       	ld.ub	r8,r8[0x5]
80000d86:	f0 09 15 09 	lsl	r9,r8,0x9
80000d8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d8e:	f1 38 00 08 	ld.ub	r8,r8[8]
80000d92:	af 68       	lsl	r8,0xe
80000d94:	f3 e8 10 08 	or	r8,r9,r8
80000d98:	f5 e8 10 09 	or	r9,r10,r8
80000d9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000da0:	91 19       	st.w	r8[0x4],r9
80000da2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000da6:	90 39       	ld.sh	r9,r8[0x6]
80000da8:	30 28       	mov	r8,2
80000daa:	f0 09 19 00 	cp.h	r9,r8
80000dae:	e0 88 00 14 	brls	80000dd6 <usartInit+0xde>
80000db2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000db6:	70 18       	ld.w	r8,r8[0x4]
80000db8:	10 99       	mov	r9,r8
80000dba:	ad b9       	sbr	r9,0xd
80000dbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dc0:	91 19       	st.w	r8[0x4],r9
80000dc2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000dc6:	90 38       	ld.sh	r8,r8[0x6]
80000dc8:	5c 78       	castu.h	r8
80000dca:	20 28       	sub	r8,2
80000dcc:	10 99       	mov	r9,r8
80000dce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dd2:	91 a9       	st.w	r8[0x28],r9
80000dd4:	c0 d8       	rjmp	80000dee <usartInit+0xf6>
80000dd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dda:	70 19       	ld.w	r9,r8[0x4]
80000ddc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000de0:	90 38       	ld.sh	r8,r8[0x6]
80000de2:	5c 78       	castu.h	r8
80000de4:	ad 68       	lsl	r8,0xc
80000de6:	10 49       	or	r9,r8
80000de8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dec:	91 19       	st.w	r8[0x4],r9
80000dee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000df2:	70 18       	ld.w	r8,r8[0x4]
80000df4:	10 99       	mov	r9,r8
80000df6:	e0 19 ff f0 	andl	r9,0xfff0
80000dfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dfe:	91 19       	st.w	r8[0x4],r9
80000e00:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e04:	35 08       	mov	r8,80
80000e06:	93 08       	st.w	r9[0x0],r8
80000e08:	30 08       	mov	r8,0
80000e0a:	10 9c       	mov	r12,r8
80000e0c:	2f cd       	sub	sp,-16
80000e0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e12:	00 00       	add	r0,r0
80000e14:	80 00       	ld.sh	r0,r0[0x0]
80000e16:	0b 8c       	ld.ub	r12,r5[0x0]
80000e18:	80 00       	ld.sh	r0,r0[0x0]
80000e1a:	0b fc       	ld.ub	r12,r5[0x7]

80000e1c <timerInit>:
80000e1c:	d5 01       	pushm	r11,lr
80000e1e:	d2 01       	pushm	r12
80000e20:	f0 1f 00 28 	mcall	80000ec0 <timerClearInterrupt+0x10>
80000e24:	f0 1f 00 28 	mcall	80000ec4 <timerClearInterrupt+0x14>
80000e28:	e0 6c 38 00 	mov	r12,14336
80000e2c:	ea 1c ff ff 	orh	r12,0xffff
80000e30:	e0 6b c0 00 	mov	r11,49152
80000e34:	ea 1b 00 00 	orh	r11,0x0
80000e38:	99 1b       	st.w	r12[0x4],r11
80000e3a:	30 1b       	mov	r11,1
80000e3c:	a5 6b       	lsl	r11,0x4
80000e3e:	99 9b       	st.w	r12[0x24],r11
80000e40:	d2 02       	popm	r12
80000e42:	f0 1f 00 22 	mcall	80000ec8 <timerClearInterrupt+0x18>
80000e46:	d5 02       	popm	r11,lr
80000e48:	1c 9f       	mov	pc,lr

80000e4a <timerReset>:
80000e4a:	d3 01       	pushm	r11-r12
80000e4c:	e0 6c 38 00 	mov	r12,14336
80000e50:	ea 1c ff ff 	orh	r12,0xffff
80000e54:	30 5b       	mov	r11,5
80000e56:	99 0b       	st.w	r12[0x0],r11
80000e58:	e0 6b 00 08 	mov	r11,8
80000e5c:	ea 1b 00 00 	orh	r11,0x0
80000e60:	76 0b       	ld.w	r11,r11[0x0]
80000e62:	99 7b       	st.w	r12[0x1c],r11
80000e64:	d3 02       	popm	r11-r12
80000e66:	1c 9f       	mov	pc,lr

80000e68 <timerStop>:
80000e68:	d3 01       	pushm	r11-r12
80000e6a:	e0 6c 38 00 	mov	r12,14336
80000e6e:	ea 1c ff ff 	orh	r12,0xffff
80000e72:	30 2b       	mov	r11,2
80000e74:	99 0b       	st.w	r12[0x0],r11
80000e76:	d3 02       	popm	r11-r12
80000e78:	1c 9f       	mov	pc,lr

80000e7a <timerRCSet>:
80000e7a:	d3 01       	pushm	r11-r12
80000e7c:	49 4b       	lddpc	r11,80000ecc <timerClearInterrupt+0x1c>
80000e7e:	97 0c       	st.w	r11[0x0],r12
80000e80:	e0 6c 38 00 	mov	r12,14336
80000e84:	ea 1c ff ff 	orh	r12,0xffff
80000e88:	76 0b       	ld.w	r11,r11[0x0]
80000e8a:	99 7b       	st.w	r12[0x1c],r11
80000e8c:	d3 02       	popm	r11-r12
80000e8e:	1c 9f       	mov	pc,lr

80000e90 <timerPrescaleSet>:
80000e90:	d3 81       	pushm	r10-r12
80000e92:	49 0b       	lddpc	r11,80000ed0 <timerClearInterrupt+0x20>
80000e94:	97 0c       	st.w	r11[0x0],r12
80000e96:	e0 6c 38 00 	mov	r12,14336
80000e9a:	ea 1c ff ff 	orh	r12,0xffff
80000e9e:	78 1a       	ld.w	r10,r12[0x4]
80000ea0:	3f 8b       	mov	r11,-8
80000ea2:	16 6a       	and	r10,r11
80000ea4:	48 bb       	lddpc	r11,80000ed0 <timerClearInterrupt+0x20>
80000ea6:	76 0b       	ld.w	r11,r11[0x0]
80000ea8:	14 4b       	or	r11,r10
80000eaa:	99 1b       	st.w	r12[0x4],r11
80000eac:	d3 82       	popm	r10-r12
80000eae:	1c 9f       	mov	pc,lr

80000eb0 <timerClearInterrupt>:
80000eb0:	d2 01       	pushm	r12
80000eb2:	e0 6c 38 00 	mov	r12,14336
80000eb6:	ea 1c ff ff 	orh	r12,0xffff
80000eba:	78 8c       	ld.w	r12,r12[0x20]
80000ebc:	d2 02       	popm	r12
80000ebe:	1c 9f       	mov	pc,lr
80000ec0:	80 00       	ld.sh	r0,r0[0x0]
80000ec2:	19 66       	ld.uh	r6,--r12
80000ec4:	80 00       	ld.sh	r0,r0[0x0]
80000ec6:	0e b0       	st.h	r7++,r0
80000ec8:	80 00       	ld.sh	r0,r0[0x0]
80000eca:	07 f4       	ld.ub	r4,r3[0x7]
80000ecc:	00 00       	add	r0,r0
80000ece:	00 08       	add	r8,r0
80000ed0:	00 00       	add	r0,r0
80000ed2:	00 0c       	add	r12,r0

80000ed4 <_stext>:
80000ed4:	49 7d       	lddpc	sp,80000f30 <udata_end+0x4>
80000ed6:	49 80       	lddpc	r0,80000f34 <udata_end+0x8>
80000ed8:	1a d0       	st.w	--sp,r0
80000eda:	e5 cd 20 00 	ldmts	sp,sp
80000ede:	1b 00       	ld.w	r0,sp++
80000ee0:	49 60       	lddpc	r0,80000f38 <udata_end+0xc>
80000ee2:	e3 b0 00 01 	mtsr	0x4,r0
80000ee6:	d5 53       	csrf	0x15
80000ee8:	e0 6c 0c 00 	mov	r12,3072
80000eec:	ea 1c ff ff 	orh	r12,0xffff
80000ef0:	e0 6b 01 07 	mov	r11,263
80000ef4:	99 ab       	st.w	r12[0x28],r11
80000ef6:	30 4b       	mov	r11,4
80000ef8:	99 0b       	st.w	r12[0x0],r11
80000efa:	e0 6a 00 80 	mov	r10,128

80000efe <xw8>:
80000efe:	79 5b       	ld.w	r11,r12[0x54]
80000f00:	14 7b       	tst	r11,r10
80000f02:	cf e0       	breq	80000efe <xw8>
80000f04:	30 5b       	mov	r11,5
80000f06:	99 0b       	st.w	r12[0x0],r11

80000f08 <idata_>:
80000f08:	48 d0       	lddpc	r0,80000f3c <udata_end+0x10>
80000f0a:	48 e1       	lddpc	r1,80000f40 <udata_end+0x14>
80000f0c:	02 30       	cp.w	r0,r1
80000f0e:	c0 62       	brcc	80000f1a <idata_end>
80000f10:	48 d2       	lddpc	r2,80000f44 <udata_end+0x18>

80000f12 <idata_loop>:
80000f12:	05 04       	ld.w	r4,r2++
80000f14:	00 a4       	st.w	r0++,r4
80000f16:	02 30       	cp.w	r0,r1
80000f18:	cf d3       	brcs	80000f12 <idata_loop>

80000f1a <idata_end>:
80000f1a:	48 c0       	lddpc	r0,80000f48 <udata_end+0x1c>
80000f1c:	48 c1       	lddpc	r1,80000f4c <udata_end+0x20>
80000f1e:	02 30       	cp.w	r0,r1
80000f20:	c0 62       	brcc	80000f2c <udata_end>
80000f22:	30 02       	mov	r2,0
80000f24:	30 03       	mov	r3,0

80000f26 <udata_loop>:
80000f26:	00 a2       	st.w	r0++,r2
80000f28:	02 30       	cp.w	r0,r1
80000f2a:	cf e3       	brcs	80000f26 <udata_loop>

80000f2c <udata_end>:
80000f2c:	48 9f       	lddpc	pc,80000f50 <udata_end+0x24>
80000f2e:	00 00       	add	r0,r0
80000f30:	00 01       	add	r1,r0
80000f32:	00 00       	add	r0,r0
80000f34:	00 00       	add	r0,r0
80000f36:	f0 00       	*unknown*
80000f38:	80 00       	ld.sh	r0,r0[0x0]
80000f3a:	18 00       	add	r0,r12
80000f3c:	00 00       	add	r0,r0
80000f3e:	00 08       	add	r8,r0
80000f40:	00 00       	add	r0,r0
80000f42:	05 18       	ld.sh	r8,r2++
80000f44:	80 00       	ld.sh	r0,r0[0x0]
80000f46:	1c 88       	andn	r8,lr
80000f48:	00 00       	add	r0,r0
80000f4a:	05 18       	ld.sh	r8,r2++
80000f4c:	00 00       	add	r0,r0
80000f4e:	05 a0       	ld.ub	r0,r2[0x2]
80000f50:	80 00       	ld.sh	r0,r0[0x0]
80000f52:	01 24       	ld.uh	r4,r0++

80000f54 <calloc>:
80000f54:	d4 01       	pushm	lr
80000f56:	48 48       	lddpc	r8,80000f64 <calloc+0x10>
80000f58:	16 9a       	mov	r10,r11
80000f5a:	18 9b       	mov	r11,r12
80000f5c:	70 0c       	ld.w	r12,r8[0x0]
80000f5e:	f0 1f 00 03 	mcall	80000f68 <calloc+0x14>
80000f62:	d8 02       	popm	pc
80000f64:	00 00       	add	r0,r0
80000f66:	01 00       	ld.w	r0,r0++
80000f68:	80 00       	ld.sh	r0,r0[0x0]
80000f6a:	0f 6c       	ld.uh	r12,--r7

80000f6c <_calloc_r>:
80000f6c:	d4 21       	pushm	r4-r7,lr
80000f6e:	f4 0b 02 4b 	mul	r11,r10,r11
80000f72:	f0 1f 00 15 	mcall	80000fc4 <_calloc_r+0x58>
80000f76:	18 97       	mov	r7,r12
80000f78:	c2 30       	breq	80000fbe <_calloc_r+0x52>
80000f7a:	f8 fa ff fc 	ld.w	r10,r12[-4]
80000f7e:	e0 1a ff fc 	andl	r10,0xfffc
80000f82:	20 4a       	sub	r10,4
80000f84:	e0 4a 00 24 	cp.w	r10,36
80000f88:	e0 8b 00 18 	brhi	80000fb8 <_calloc_r+0x4c>
80000f8c:	18 98       	mov	r8,r12
80000f8e:	59 3a       	cp.w	r10,19
80000f90:	e0 88 00 0f 	brls	80000fae <_calloc_r+0x42>
80000f94:	30 09       	mov	r9,0
80000f96:	10 a9       	st.w	r8++,r9
80000f98:	10 a9       	st.w	r8++,r9
80000f9a:	59 ba       	cp.w	r10,27
80000f9c:	e0 88 00 09 	brls	80000fae <_calloc_r+0x42>
80000fa0:	10 a9       	st.w	r8++,r9
80000fa2:	10 a9       	st.w	r8++,r9
80000fa4:	e0 4a 00 24 	cp.w	r10,36
80000fa8:	c0 31       	brne	80000fae <_calloc_r+0x42>
80000faa:	10 a9       	st.w	r8++,r9
80000fac:	10 a9       	st.w	r8++,r9
80000fae:	30 09       	mov	r9,0
80000fb0:	10 a9       	st.w	r8++,r9
80000fb2:	91 19       	st.w	r8[0x4],r9
80000fb4:	91 09       	st.w	r8[0x0],r9
80000fb6:	c0 48       	rjmp	80000fbe <_calloc_r+0x52>
80000fb8:	30 0b       	mov	r11,0
80000fba:	f0 1f 00 04 	mcall	80000fc8 <_calloc_r+0x5c>
80000fbe:	0e 9c       	mov	r12,r7
80000fc0:	d8 22       	popm	r4-r7,pc
80000fc2:	00 00       	add	r0,r0
80000fc4:	80 00       	ld.sh	r0,r0[0x0]
80000fc6:	0f fc       	ld.ub	r12,r7[0x7]
80000fc8:	80 00       	ld.sh	r0,r0[0x0]
80000fca:	14 4c       	or	r12,r10

80000fcc <free>:
80000fcc:	d4 01       	pushm	lr
80000fce:	48 48       	lddpc	r8,80000fdc <free+0x10>
80000fd0:	18 9b       	mov	r11,r12
80000fd2:	70 0c       	ld.w	r12,r8[0x0]
80000fd4:	f0 1f 00 03 	mcall	80000fe0 <free+0x14>
80000fd8:	d8 02       	popm	pc
80000fda:	00 00       	add	r0,r0
80000fdc:	00 00       	add	r0,r0
80000fde:	01 00       	ld.w	r0,r0++
80000fe0:	80 00       	ld.sh	r0,r0[0x0]
80000fe2:	15 7c       	ld.ub	r12,--r10

80000fe4 <malloc>:
80000fe4:	d4 01       	pushm	lr
80000fe6:	48 48       	lddpc	r8,80000ff4 <malloc+0x10>
80000fe8:	18 9b       	mov	r11,r12
80000fea:	70 0c       	ld.w	r12,r8[0x0]
80000fec:	f0 1f 00 03 	mcall	80000ff8 <malloc+0x14>
80000ff0:	d8 02       	popm	pc
80000ff2:	00 00       	add	r0,r0
80000ff4:	00 00       	add	r0,r0
80000ff6:	01 00       	ld.w	r0,r0++
80000ff8:	80 00       	ld.sh	r0,r0[0x0]
80000ffa:	0f fc       	ld.ub	r12,r7[0x7]

80000ffc <_malloc_r>:
80000ffc:	d4 31       	pushm	r0-r7,lr
80000ffe:	f6 c8 ff f5 	sub	r8,r11,-11
80001002:	18 95       	mov	r5,r12
80001004:	10 97       	mov	r7,r8
80001006:	e0 17 ff f8 	andl	r7,0xfff8
8000100a:	59 68       	cp.w	r8,22
8000100c:	f9 b7 08 10 	movls	r7,16
80001010:	16 37       	cp.w	r7,r11
80001012:	5f 38       	srlo	r8
80001014:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001018:	c0 50       	breq	80001022 <_malloc_r+0x26>
8000101a:	30 c8       	mov	r8,12
8000101c:	99 38       	st.w	r12[0xc],r8
8000101e:	e0 8f 01 f3 	bral	80001404 <_malloc_r+0x408>
80001022:	f0 1f 00 50 	mcall	80001160 <_malloc_r+0x164>
80001026:	e0 47 01 f7 	cp.w	r7,503
8000102a:	e0 8b 00 1c 	brhi	80001062 <_malloc_r+0x66>
8000102e:	ee 03 16 03 	lsr	r3,r7,0x3
80001032:	4c d8       	lddpc	r8,80001164 <_malloc_r+0x168>
80001034:	f0 03 00 38 	add	r8,r8,r3<<0x3
80001038:	70 36       	ld.w	r6,r8[0xc]
8000103a:	10 36       	cp.w	r6,r8
8000103c:	c0 61       	brne	80001048 <_malloc_r+0x4c>
8000103e:	ec c8 ff f8 	sub	r8,r6,-8
80001042:	70 36       	ld.w	r6,r8[0xc]
80001044:	10 36       	cp.w	r6,r8
80001046:	c0 c0       	breq	8000105e <_malloc_r+0x62>
80001048:	6c 18       	ld.w	r8,r6[0x4]
8000104a:	e0 18 ff fc 	andl	r8,0xfffc
8000104e:	6c 3a       	ld.w	r10,r6[0xc]
80001050:	ec 08 00 09 	add	r9,r6,r8
80001054:	0a 9c       	mov	r12,r5
80001056:	6c 28       	ld.w	r8,r6[0x8]
80001058:	95 28       	st.w	r10[0x8],r8
8000105a:	91 3a       	st.w	r8[0xc],r10
8000105c:	c4 68       	rjmp	800010e8 <_malloc_r+0xec>
8000105e:	2f e3       	sub	r3,-2
80001060:	c4 c8       	rjmp	800010f8 <_malloc_r+0xfc>
80001062:	ee 03 16 09 	lsr	r3,r7,0x9
80001066:	c0 41       	brne	8000106e <_malloc_r+0x72>
80001068:	ee 03 16 03 	lsr	r3,r7,0x3
8000106c:	c2 68       	rjmp	800010b8 <_malloc_r+0xbc>
8000106e:	58 43       	cp.w	r3,4
80001070:	e0 8b 00 06 	brhi	8000107c <_malloc_r+0x80>
80001074:	ee 03 16 06 	lsr	r3,r7,0x6
80001078:	2c 83       	sub	r3,-56
8000107a:	c1 f8       	rjmp	800010b8 <_malloc_r+0xbc>
8000107c:	59 43       	cp.w	r3,20
8000107e:	e0 8b 00 04 	brhi	80001086 <_malloc_r+0x8a>
80001082:	2a 53       	sub	r3,-91
80001084:	c1 a8       	rjmp	800010b8 <_malloc_r+0xbc>
80001086:	e0 43 00 54 	cp.w	r3,84
8000108a:	e0 8b 00 06 	brhi	80001096 <_malloc_r+0x9a>
8000108e:	ee 03 16 0c 	lsr	r3,r7,0xc
80001092:	29 23       	sub	r3,-110
80001094:	c1 28       	rjmp	800010b8 <_malloc_r+0xbc>
80001096:	e0 43 01 54 	cp.w	r3,340
8000109a:	e0 8b 00 06 	brhi	800010a6 <_malloc_r+0xaa>
8000109e:	ee 03 16 0f 	lsr	r3,r7,0xf
800010a2:	28 93       	sub	r3,-119
800010a4:	c0 a8       	rjmp	800010b8 <_malloc_r+0xbc>
800010a6:	e0 43 05 54 	cp.w	r3,1364
800010aa:	e0 88 00 04 	brls	800010b2 <_malloc_r+0xb6>
800010ae:	37 e3       	mov	r3,126
800010b0:	c0 48       	rjmp	800010b8 <_malloc_r+0xbc>
800010b2:	ee 03 16 12 	lsr	r3,r7,0x12
800010b6:	28 43       	sub	r3,-124
800010b8:	4a ba       	lddpc	r10,80001164 <_malloc_r+0x168>
800010ba:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800010be:	74 36       	ld.w	r6,r10[0xc]
800010c0:	c1 98       	rjmp	800010f2 <_malloc_r+0xf6>
800010c2:	6c 19       	ld.w	r9,r6[0x4]
800010c4:	e0 19 ff fc 	andl	r9,0xfffc
800010c8:	f2 07 01 0b 	sub	r11,r9,r7
800010cc:	58 fb       	cp.w	r11,15
800010ce:	e0 8a 00 04 	brle	800010d6 <_malloc_r+0xda>
800010d2:	20 13       	sub	r3,1
800010d4:	c1 18       	rjmp	800010f6 <_malloc_r+0xfa>
800010d6:	6c 38       	ld.w	r8,r6[0xc]
800010d8:	58 0b       	cp.w	r11,0
800010da:	c0 b5       	brlt	800010f0 <_malloc_r+0xf4>
800010dc:	6c 2a       	ld.w	r10,r6[0x8]
800010de:	ec 09 00 09 	add	r9,r6,r9
800010e2:	0a 9c       	mov	r12,r5
800010e4:	91 2a       	st.w	r8[0x8],r10
800010e6:	95 38       	st.w	r10[0xc],r8
800010e8:	72 18       	ld.w	r8,r9[0x4]
800010ea:	a1 a8       	sbr	r8,0x0
800010ec:	93 18       	st.w	r9[0x4],r8
800010ee:	cb c8       	rjmp	80001266 <_malloc_r+0x26a>
800010f0:	10 96       	mov	r6,r8
800010f2:	14 36       	cp.w	r6,r10
800010f4:	ce 71       	brne	800010c2 <_malloc_r+0xc6>
800010f6:	2f f3       	sub	r3,-1
800010f8:	49 ba       	lddpc	r10,80001164 <_malloc_r+0x168>
800010fa:	f4 cc ff f8 	sub	r12,r10,-8
800010fe:	78 26       	ld.w	r6,r12[0x8]
80001100:	18 36       	cp.w	r6,r12
80001102:	c6 e0       	breq	800011de <_malloc_r+0x1e2>
80001104:	6c 19       	ld.w	r9,r6[0x4]
80001106:	e0 19 ff fc 	andl	r9,0xfffc
8000110a:	f2 07 01 08 	sub	r8,r9,r7
8000110e:	58 f8       	cp.w	r8,15
80001110:	e0 89 00 90 	brgt	80001230 <_malloc_r+0x234>
80001114:	99 3c       	st.w	r12[0xc],r12
80001116:	99 2c       	st.w	r12[0x8],r12
80001118:	58 08       	cp.w	r8,0
8000111a:	c0 55       	brlt	80001124 <_malloc_r+0x128>
8000111c:	ec 09 00 09 	add	r9,r6,r9
80001120:	0a 9c       	mov	r12,r5
80001122:	ce 3b       	rjmp	800010e8 <_malloc_r+0xec>
80001124:	e0 49 01 ff 	cp.w	r9,511
80001128:	e0 8b 00 13 	brhi	8000114e <_malloc_r+0x152>
8000112c:	a3 99       	lsr	r9,0x3
8000112e:	f4 09 00 38 	add	r8,r10,r9<<0x3
80001132:	70 2b       	ld.w	r11,r8[0x8]
80001134:	8d 38       	st.w	r6[0xc],r8
80001136:	8d 2b       	st.w	r6[0x8],r11
80001138:	97 36       	st.w	r11[0xc],r6
8000113a:	91 26       	st.w	r8[0x8],r6
8000113c:	a3 49       	asr	r9,0x2
8000113e:	74 18       	ld.w	r8,r10[0x4]
80001140:	30 1b       	mov	r11,1
80001142:	f6 09 09 49 	lsl	r9,r11,r9
80001146:	f1 e9 10 09 	or	r9,r8,r9
8000114a:	95 19       	st.w	r10[0x4],r9
8000114c:	c4 98       	rjmp	800011de <_malloc_r+0x1e2>
8000114e:	f2 0a 16 09 	lsr	r10,r9,0x9
80001152:	58 4a       	cp.w	r10,4
80001154:	e0 8b 00 0a 	brhi	80001168 <_malloc_r+0x16c>
80001158:	f2 0a 16 06 	lsr	r10,r9,0x6
8000115c:	2c 8a       	sub	r10,-56
8000115e:	c2 38       	rjmp	800011a4 <_malloc_r+0x1a8>
80001160:	80 00       	ld.sh	r0,r0[0x0]
80001162:	14 5a       	eor	r10,r10
80001164:	00 00       	add	r0,r0
80001166:	01 04       	ld.w	r4,r0++
80001168:	59 4a       	cp.w	r10,20
8000116a:	e0 8b 00 04 	brhi	80001172 <_malloc_r+0x176>
8000116e:	2a 5a       	sub	r10,-91
80001170:	c1 a8       	rjmp	800011a4 <_malloc_r+0x1a8>
80001172:	e0 4a 00 54 	cp.w	r10,84
80001176:	e0 8b 00 06 	brhi	80001182 <_malloc_r+0x186>
8000117a:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000117e:	29 2a       	sub	r10,-110
80001180:	c1 28       	rjmp	800011a4 <_malloc_r+0x1a8>
80001182:	e0 4a 01 54 	cp.w	r10,340
80001186:	e0 8b 00 06 	brhi	80001192 <_malloc_r+0x196>
8000118a:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000118e:	28 9a       	sub	r10,-119
80001190:	c0 a8       	rjmp	800011a4 <_malloc_r+0x1a8>
80001192:	e0 4a 05 54 	cp.w	r10,1364
80001196:	e0 88 00 04 	brls	8000119e <_malloc_r+0x1a2>
8000119a:	37 ea       	mov	r10,126
8000119c:	c0 48       	rjmp	800011a4 <_malloc_r+0x1a8>
8000119e:	f2 0a 16 12 	lsr	r10,r9,0x12
800011a2:	28 4a       	sub	r10,-124
800011a4:	4c 8b       	lddpc	r11,800012c4 <_malloc_r+0x2c8>
800011a6:	f6 0a 00 34 	add	r4,r11,r10<<0x3
800011aa:	68 28       	ld.w	r8,r4[0x8]
800011ac:	08 38       	cp.w	r8,r4
800011ae:	c0 e1       	brne	800011ca <_malloc_r+0x1ce>
800011b0:	76 19       	ld.w	r9,r11[0x4]
800011b2:	a3 4a       	asr	r10,0x2
800011b4:	30 1e       	mov	lr,1
800011b6:	fc 0a 09 4a 	lsl	r10,lr,r10
800011ba:	f3 ea 10 0a 	or	r10,r9,r10
800011be:	10 99       	mov	r9,r8
800011c0:	97 1a       	st.w	r11[0x4],r10
800011c2:	c0 a8       	rjmp	800011d6 <_malloc_r+0x1da>
800011c4:	70 28       	ld.w	r8,r8[0x8]
800011c6:	08 38       	cp.w	r8,r4
800011c8:	c0 60       	breq	800011d4 <_malloc_r+0x1d8>
800011ca:	70 1a       	ld.w	r10,r8[0x4]
800011cc:	e0 1a ff fc 	andl	r10,0xfffc
800011d0:	14 39       	cp.w	r9,r10
800011d2:	cf 93       	brcs	800011c4 <_malloc_r+0x1c8>
800011d4:	70 39       	ld.w	r9,r8[0xc]
800011d6:	8d 39       	st.w	r6[0xc],r9
800011d8:	8d 28       	st.w	r6[0x8],r8
800011da:	91 36       	st.w	r8[0xc],r6
800011dc:	93 26       	st.w	r9[0x8],r6
800011de:	e6 08 14 02 	asr	r8,r3,0x2
800011e2:	30 1b       	mov	r11,1
800011e4:	4b 84       	lddpc	r4,800012c4 <_malloc_r+0x2c8>
800011e6:	f6 08 09 4b 	lsl	r11,r11,r8
800011ea:	68 18       	ld.w	r8,r4[0x4]
800011ec:	10 3b       	cp.w	r11,r8
800011ee:	e0 8b 00 6f 	brhi	800012cc <_malloc_r+0x2d0>
800011f2:	f7 e8 00 09 	and	r9,r11,r8
800011f6:	c0 b1       	brne	8000120c <_malloc_r+0x210>
800011f8:	e0 13 ff fc 	andl	r3,0xfffc
800011fc:	a1 7b       	lsl	r11,0x1
800011fe:	2f c3       	sub	r3,-4
80001200:	c0 38       	rjmp	80001206 <_malloc_r+0x20a>
80001202:	2f c3       	sub	r3,-4
80001204:	a1 7b       	lsl	r11,0x1
80001206:	f7 e8 00 09 	and	r9,r11,r8
8000120a:	cf c0       	breq	80001202 <_malloc_r+0x206>
8000120c:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001210:	06 92       	mov	r2,r3
80001212:	1c 91       	mov	r1,lr
80001214:	62 36       	ld.w	r6,r1[0xc]
80001216:	c2 e8       	rjmp	80001272 <_malloc_r+0x276>
80001218:	6c 1a       	ld.w	r10,r6[0x4]
8000121a:	e0 1a ff fc 	andl	r10,0xfffc
8000121e:	f4 07 01 08 	sub	r8,r10,r7
80001222:	58 f8       	cp.w	r8,15
80001224:	e0 8a 00 15 	brle	8000124e <_malloc_r+0x252>
80001228:	6c 3a       	ld.w	r10,r6[0xc]
8000122a:	6c 29       	ld.w	r9,r6[0x8]
8000122c:	95 29       	st.w	r10[0x8],r9
8000122e:	93 3a       	st.w	r9[0xc],r10
80001230:	0e 99       	mov	r9,r7
80001232:	ec 07 00 07 	add	r7,r6,r7
80001236:	a1 a9       	sbr	r9,0x0
80001238:	99 37       	st.w	r12[0xc],r7
8000123a:	99 27       	st.w	r12[0x8],r7
8000123c:	8d 19       	st.w	r6[0x4],r9
8000123e:	ee 08 09 08 	st.w	r7[r8],r8
80001242:	8f 2c       	st.w	r7[0x8],r12
80001244:	8f 3c       	st.w	r7[0xc],r12
80001246:	a1 a8       	sbr	r8,0x0
80001248:	0a 9c       	mov	r12,r5
8000124a:	8f 18       	st.w	r7[0x4],r8
8000124c:	c0 d8       	rjmp	80001266 <_malloc_r+0x26a>
8000124e:	6c 39       	ld.w	r9,r6[0xc]
80001250:	58 08       	cp.w	r8,0
80001252:	c0 f5       	brlt	80001270 <_malloc_r+0x274>
80001254:	ec 0a 00 0a 	add	r10,r6,r10
80001258:	74 18       	ld.w	r8,r10[0x4]
8000125a:	a1 a8       	sbr	r8,0x0
8000125c:	0a 9c       	mov	r12,r5
8000125e:	95 18       	st.w	r10[0x4],r8
80001260:	6c 28       	ld.w	r8,r6[0x8]
80001262:	93 28       	st.w	r9[0x8],r8
80001264:	91 39       	st.w	r8[0xc],r9
80001266:	f0 1f 00 19 	mcall	800012c8 <_malloc_r+0x2cc>
8000126a:	ec cc ff f8 	sub	r12,r6,-8
8000126e:	d8 32       	popm	r0-r7,pc
80001270:	12 96       	mov	r6,r9
80001272:	02 36       	cp.w	r6,r1
80001274:	cd 21       	brne	80001218 <_malloc_r+0x21c>
80001276:	2f f2       	sub	r2,-1
80001278:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000127c:	c0 30       	breq	80001282 <_malloc_r+0x286>
8000127e:	2f 81       	sub	r1,-8
80001280:	cc ab       	rjmp	80001214 <_malloc_r+0x218>
80001282:	1c 98       	mov	r8,lr
80001284:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001288:	c0 81       	brne	80001298 <_malloc_r+0x29c>
8000128a:	68 19       	ld.w	r9,r4[0x4]
8000128c:	f6 08 11 ff 	rsub	r8,r11,-1
80001290:	f3 e8 00 08 	and	r8,r9,r8
80001294:	89 18       	st.w	r4[0x4],r8
80001296:	c0 78       	rjmp	800012a4 <_malloc_r+0x2a8>
80001298:	f0 c9 00 08 	sub	r9,r8,8
8000129c:	20 13       	sub	r3,1
8000129e:	70 08       	ld.w	r8,r8[0x0]
800012a0:	12 38       	cp.w	r8,r9
800012a2:	cf 10       	breq	80001284 <_malloc_r+0x288>
800012a4:	a1 7b       	lsl	r11,0x1
800012a6:	68 18       	ld.w	r8,r4[0x4]
800012a8:	10 3b       	cp.w	r11,r8
800012aa:	e0 8b 00 11 	brhi	800012cc <_malloc_r+0x2d0>
800012ae:	58 0b       	cp.w	r11,0
800012b0:	c0 e0       	breq	800012cc <_malloc_r+0x2d0>
800012b2:	04 93       	mov	r3,r2
800012b4:	c0 38       	rjmp	800012ba <_malloc_r+0x2be>
800012b6:	2f c3       	sub	r3,-4
800012b8:	a1 7b       	lsl	r11,0x1
800012ba:	f7 e8 00 09 	and	r9,r11,r8
800012be:	ca 71       	brne	8000120c <_malloc_r+0x210>
800012c0:	cf bb       	rjmp	800012b6 <_malloc_r+0x2ba>
800012c2:	00 00       	add	r0,r0
800012c4:	00 00       	add	r0,r0
800012c6:	01 04       	ld.w	r4,r0++
800012c8:	80 00       	ld.sh	r0,r0[0x0]
800012ca:	14 5c       	eor	r12,r10
800012cc:	68 23       	ld.w	r3,r4[0x8]
800012ce:	66 12       	ld.w	r2,r3[0x4]
800012d0:	e0 12 ff fc 	andl	r2,0xfffc
800012d4:	0e 32       	cp.w	r2,r7
800012d6:	5f 39       	srlo	r9
800012d8:	e4 07 01 08 	sub	r8,r2,r7
800012dc:	58 f8       	cp.w	r8,15
800012de:	5f aa       	srle	r10
800012e0:	f5 e9 10 09 	or	r9,r10,r9
800012e4:	e0 80 00 a2 	breq	80001428 <_malloc_r+0x42c>
800012e8:	4c 88       	lddpc	r8,80001408 <_malloc_r+0x40c>
800012ea:	70 01       	ld.w	r1,r8[0x0]
800012ec:	4c 88       	lddpc	r8,8000140c <_malloc_r+0x410>
800012ee:	2f 01       	sub	r1,-16
800012f0:	70 08       	ld.w	r8,r8[0x0]
800012f2:	0e 01       	add	r1,r7
800012f4:	5b f8       	cp.w	r8,-1
800012f6:	c0 40       	breq	800012fe <_malloc_r+0x302>
800012f8:	28 11       	sub	r1,-127
800012fa:	e0 11 ff 80 	andl	r1,0xff80
800012fe:	02 9b       	mov	r11,r1
80001300:	0a 9c       	mov	r12,r5
80001302:	f0 1f 00 44 	mcall	80001410 <_malloc_r+0x414>
80001306:	18 96       	mov	r6,r12
80001308:	5b fc       	cp.w	r12,-1
8000130a:	c6 e0       	breq	800013e6 <_malloc_r+0x3ea>
8000130c:	e6 02 00 08 	add	r8,r3,r2
80001310:	10 3c       	cp.w	r12,r8
80001312:	c0 32       	brcc	80001318 <_malloc_r+0x31c>
80001314:	08 33       	cp.w	r3,r4
80001316:	c6 81       	brne	800013e6 <_malloc_r+0x3ea>
80001318:	4b fa       	lddpc	r10,80001414 <_malloc_r+0x418>
8000131a:	74 09       	ld.w	r9,r10[0x0]
8000131c:	e2 09 00 09 	add	r9,r1,r9
80001320:	95 09       	st.w	r10[0x0],r9
80001322:	10 36       	cp.w	r6,r8
80001324:	c0 a1       	brne	80001338 <_malloc_r+0x33c>
80001326:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
8000132a:	c0 71       	brne	80001338 <_malloc_r+0x33c>
8000132c:	e2 02 00 02 	add	r2,r1,r2
80001330:	68 28       	ld.w	r8,r4[0x8]
80001332:	a1 a2       	sbr	r2,0x0
80001334:	91 12       	st.w	r8[0x4],r2
80001336:	c4 c8       	rjmp	800013ce <_malloc_r+0x3d2>
80001338:	4b 5a       	lddpc	r10,8000140c <_malloc_r+0x410>
8000133a:	74 0b       	ld.w	r11,r10[0x0]
8000133c:	5b fb       	cp.w	r11,-1
8000133e:	c0 31       	brne	80001344 <_malloc_r+0x348>
80001340:	95 06       	st.w	r10[0x0],r6
80001342:	c0 68       	rjmp	8000134e <_malloc_r+0x352>
80001344:	ec 09 00 09 	add	r9,r6,r9
80001348:	4b 3a       	lddpc	r10,80001414 <_malloc_r+0x418>
8000134a:	10 19       	sub	r9,r8
8000134c:	95 09       	st.w	r10[0x0],r9
8000134e:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80001352:	f0 09 11 08 	rsub	r9,r8,8
80001356:	58 08       	cp.w	r8,0
80001358:	f2 08 17 10 	movne	r8,r9
8000135c:	ed d8 e1 06 	addne	r6,r6,r8
80001360:	28 08       	sub	r8,-128
80001362:	ec 01 00 01 	add	r1,r6,r1
80001366:	0a 9c       	mov	r12,r5
80001368:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000136c:	f0 01 01 01 	sub	r1,r8,r1
80001370:	02 9b       	mov	r11,r1
80001372:	f0 1f 00 28 	mcall	80001410 <_malloc_r+0x414>
80001376:	4a 88       	lddpc	r8,80001414 <_malloc_r+0x418>
80001378:	5b fc       	cp.w	r12,-1
8000137a:	ec 0c 17 00 	moveq	r12,r6
8000137e:	f9 b1 00 00 	moveq	r1,0
80001382:	70 09       	ld.w	r9,r8[0x0]
80001384:	0c 1c       	sub	r12,r6
80001386:	89 26       	st.w	r4[0x8],r6
80001388:	02 0c       	add	r12,r1
8000138a:	12 01       	add	r1,r9
8000138c:	a1 ac       	sbr	r12,0x0
8000138e:	91 01       	st.w	r8[0x0],r1
80001390:	8d 1c       	st.w	r6[0x4],r12
80001392:	08 33       	cp.w	r3,r4
80001394:	c1 d0       	breq	800013ce <_malloc_r+0x3d2>
80001396:	58 f2       	cp.w	r2,15
80001398:	e0 8b 00 05 	brhi	800013a2 <_malloc_r+0x3a6>
8000139c:	30 18       	mov	r8,1
8000139e:	8d 18       	st.w	r6[0x4],r8
800013a0:	c2 38       	rjmp	800013e6 <_malloc_r+0x3ea>
800013a2:	30 59       	mov	r9,5
800013a4:	20 c2       	sub	r2,12
800013a6:	e0 12 ff f8 	andl	r2,0xfff8
800013aa:	e6 02 00 08 	add	r8,r3,r2
800013ae:	91 29       	st.w	r8[0x8],r9
800013b0:	91 19       	st.w	r8[0x4],r9
800013b2:	66 18       	ld.w	r8,r3[0x4]
800013b4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800013b8:	e5 e8 10 08 	or	r8,r2,r8
800013bc:	87 18       	st.w	r3[0x4],r8
800013be:	58 f2       	cp.w	r2,15
800013c0:	e0 88 00 07 	brls	800013ce <_malloc_r+0x3d2>
800013c4:	e6 cb ff f8 	sub	r11,r3,-8
800013c8:	0a 9c       	mov	r12,r5
800013ca:	f0 1f 00 14 	mcall	80001418 <_malloc_r+0x41c>
800013ce:	49 49       	lddpc	r9,8000141c <_malloc_r+0x420>
800013d0:	72 0a       	ld.w	r10,r9[0x0]
800013d2:	49 18       	lddpc	r8,80001414 <_malloc_r+0x418>
800013d4:	70 08       	ld.w	r8,r8[0x0]
800013d6:	14 38       	cp.w	r8,r10
800013d8:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800013dc:	49 19       	lddpc	r9,80001420 <_malloc_r+0x424>
800013de:	72 0a       	ld.w	r10,r9[0x0]
800013e0:	14 38       	cp.w	r8,r10
800013e2:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800013e6:	68 28       	ld.w	r8,r4[0x8]
800013e8:	70 18       	ld.w	r8,r8[0x4]
800013ea:	e0 18 ff fc 	andl	r8,0xfffc
800013ee:	0e 38       	cp.w	r8,r7
800013f0:	5f 39       	srlo	r9
800013f2:	0e 18       	sub	r8,r7
800013f4:	58 f8       	cp.w	r8,15
800013f6:	5f aa       	srle	r10
800013f8:	f5 e9 10 09 	or	r9,r10,r9
800013fc:	c1 60       	breq	80001428 <_malloc_r+0x42c>
800013fe:	0a 9c       	mov	r12,r5
80001400:	f0 1f 00 09 	mcall	80001424 <_malloc_r+0x428>
80001404:	d8 3a       	popm	r0-r7,pc,r12=0
80001406:	00 00       	add	r0,r0
80001408:	00 00       	add	r0,r0
8000140a:	05 20       	ld.uh	r0,r2++
8000140c:	00 00       	add	r0,r0
8000140e:	05 10       	ld.sh	r0,r2++
80001410:	80 00       	ld.sh	r0,r0[0x0]
80001412:	14 60       	and	r0,r10
80001414:	00 00       	add	r0,r0
80001416:	05 24       	ld.uh	r4,r2++
80001418:	80 00       	ld.sh	r0,r0[0x0]
8000141a:	15 7c       	ld.ub	r12,--r10
8000141c:	00 00       	add	r0,r0
8000141e:	05 1c       	ld.sh	r12,r2++
80001420:	00 00       	add	r0,r0
80001422:	05 18       	ld.sh	r8,r2++
80001424:	80 00       	ld.sh	r0,r0[0x0]
80001426:	14 5c       	eor	r12,r10
80001428:	68 26       	ld.w	r6,r4[0x8]
8000142a:	a1 a8       	sbr	r8,0x0
8000142c:	0e 99       	mov	r9,r7
8000142e:	a1 a9       	sbr	r9,0x0
80001430:	8d 19       	st.w	r6[0x4],r9
80001432:	ec 07 00 07 	add	r7,r6,r7
80001436:	0a 9c       	mov	r12,r5
80001438:	89 27       	st.w	r4[0x8],r7
8000143a:	8f 18       	st.w	r7[0x4],r8
8000143c:	f0 1f 00 03 	mcall	80001448 <_malloc_r+0x44c>
80001440:	ec cc ff f8 	sub	r12,r6,-8
80001444:	d8 32       	popm	r0-r7,pc
80001446:	00 00       	add	r0,r0
80001448:	80 00       	ld.sh	r0,r0[0x0]
8000144a:	14 5c       	eor	r12,r10

8000144c <memset>:
8000144c:	18 98       	mov	r8,r12
8000144e:	c0 38       	rjmp	80001454 <memset+0x8>
80001450:	10 cb       	st.b	r8++,r11
80001452:	20 1a       	sub	r10,1
80001454:	58 0a       	cp.w	r10,0
80001456:	cf d1       	brne	80001450 <memset+0x4>
80001458:	5e fc       	retal	r12

8000145a <__malloc_lock>:
8000145a:	5e fc       	retal	r12

8000145c <__malloc_unlock>:
8000145c:	5e fc       	retal	r12
8000145e:	d7 03       	nop

80001460 <_sbrk_r>:
80001460:	d4 21       	pushm	r4-r7,lr
80001462:	30 08       	mov	r8,0
80001464:	18 97       	mov	r7,r12
80001466:	48 76       	lddpc	r6,80001480 <_sbrk_r+0x20>
80001468:	16 9c       	mov	r12,r11
8000146a:	8d 08       	st.w	r6[0x0],r8
8000146c:	f0 1f 00 06 	mcall	80001484 <_sbrk_r+0x24>
80001470:	5b fc       	cp.w	r12,-1
80001472:	c0 51       	brne	8000147c <_sbrk_r+0x1c>
80001474:	6c 08       	ld.w	r8,r6[0x0]
80001476:	58 08       	cp.w	r8,0
80001478:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000147c:	d8 22       	popm	r4-r7,pc
8000147e:	00 00       	add	r0,r0
80001480:	00 00       	add	r0,r0
80001482:	05 9c       	ld.ub	r12,r2[0x1]
80001484:	80 00       	ld.sh	r0,r0[0x0]
80001486:	14 88       	andn	r8,r10

80001488 <_sbrk>:
80001488:	d4 01       	pushm	lr
8000148a:	48 c8       	lddpc	r8,800014b8 <_sbrk+0x30>
8000148c:	70 09       	ld.w	r9,r8[0x0]
8000148e:	58 09       	cp.w	r9,0
80001490:	c0 31       	brne	80001496 <_sbrk+0xe>
80001492:	48 b9       	lddpc	r9,800014bc <_sbrk+0x34>
80001494:	91 09       	st.w	r8[0x0],r9
80001496:	48 99       	lddpc	r9,800014b8 <_sbrk+0x30>
80001498:	48 aa       	lddpc	r10,800014c0 <_sbrk+0x38>
8000149a:	72 08       	ld.w	r8,r9[0x0]
8000149c:	f0 0c 00 0c 	add	r12,r8,r12
800014a0:	14 3c       	cp.w	r12,r10
800014a2:	e0 8b 00 04 	brhi	800014aa <_sbrk+0x22>
800014a6:	93 0c       	st.w	r9[0x0],r12
800014a8:	c0 68       	rjmp	800014b4 <_sbrk+0x2c>
800014aa:	f0 1f 00 07 	mcall	800014c4 <_sbrk+0x3c>
800014ae:	30 c8       	mov	r8,12
800014b0:	99 08       	st.w	r12[0x0],r8
800014b2:	3f f8       	mov	r8,-1
800014b4:	10 9c       	mov	r12,r8
800014b6:	d8 02       	popm	pc
800014b8:	00 00       	add	r0,r0
800014ba:	05 4c       	ld.w	r12,--r2
800014bc:	00 00       	add	r0,r0
800014be:	05 a0       	ld.ub	r0,r2[0x2]
800014c0:	00 00       	add	r0,r0
800014c2:	e0 00       	*unknown*
800014c4:	80 00       	ld.sh	r0,r0[0x0]
800014c6:	14 c8       	st.b	r10++,r8

800014c8 <__errno>:
800014c8:	48 28       	lddpc	r8,800014d0 <__errno+0x8>
800014ca:	70 0c       	ld.w	r12,r8[0x0]
800014cc:	2f 4c       	sub	r12,-12
800014ce:	5e fc       	retal	r12
800014d0:	00 00       	add	r0,r0
800014d2:	01 00       	ld.w	r0,r0++

800014d4 <_malloc_trim_r>:
800014d4:	d4 21       	pushm	r4-r7,lr
800014d6:	16 95       	mov	r5,r11
800014d8:	18 97       	mov	r7,r12
800014da:	f0 1f 00 23 	mcall	80001564 <_malloc_trim_r+0x90>
800014de:	4a 34       	lddpc	r4,80001568 <_malloc_trim_r+0x94>
800014e0:	68 28       	ld.w	r8,r4[0x8]
800014e2:	70 16       	ld.w	r6,r8[0x4]
800014e4:	e0 16 ff fc 	andl	r6,0xfffc
800014e8:	ec c8 ff 91 	sub	r8,r6,-111
800014ec:	f0 05 01 05 	sub	r5,r8,r5
800014f0:	e0 15 ff 80 	andl	r5,0xff80
800014f4:	ea c5 00 80 	sub	r5,r5,128
800014f8:	e0 45 00 7f 	cp.w	r5,127
800014fc:	e0 8a 00 23 	brle	80001542 <_malloc_trim_r+0x6e>
80001500:	30 0b       	mov	r11,0
80001502:	0e 9c       	mov	r12,r7
80001504:	f0 1f 00 1a 	mcall	8000156c <_malloc_trim_r+0x98>
80001508:	68 28       	ld.w	r8,r4[0x8]
8000150a:	0c 08       	add	r8,r6
8000150c:	10 3c       	cp.w	r12,r8
8000150e:	c1 a1       	brne	80001542 <_malloc_trim_r+0x6e>
80001510:	ea 0b 11 00 	rsub	r11,r5,0
80001514:	0e 9c       	mov	r12,r7
80001516:	f0 1f 00 16 	mcall	8000156c <_malloc_trim_r+0x98>
8000151a:	5b fc       	cp.w	r12,-1
8000151c:	c1 71       	brne	8000154a <_malloc_trim_r+0x76>
8000151e:	30 0b       	mov	r11,0
80001520:	0e 9c       	mov	r12,r7
80001522:	f0 1f 00 13 	mcall	8000156c <_malloc_trim_r+0x98>
80001526:	68 28       	ld.w	r8,r4[0x8]
80001528:	f8 08 01 09 	sub	r9,r12,r8
8000152c:	58 f9       	cp.w	r9,15
8000152e:	e0 8a 00 0a 	brle	80001542 <_malloc_trim_r+0x6e>
80001532:	a1 a9       	sbr	r9,0x0
80001534:	91 19       	st.w	r8[0x4],r9
80001536:	48 f8       	lddpc	r8,80001570 <_malloc_trim_r+0x9c>
80001538:	70 09       	ld.w	r9,r8[0x0]
8000153a:	48 f8       	lddpc	r8,80001574 <_malloc_trim_r+0xa0>
8000153c:	f8 09 01 09 	sub	r9,r12,r9
80001540:	91 09       	st.w	r8[0x0],r9
80001542:	0e 9c       	mov	r12,r7
80001544:	f0 1f 00 0d 	mcall	80001578 <_malloc_trim_r+0xa4>
80001548:	d8 2a       	popm	r4-r7,pc,r12=0
8000154a:	68 28       	ld.w	r8,r4[0x8]
8000154c:	0a 16       	sub	r6,r5
8000154e:	a1 a6       	sbr	r6,0x0
80001550:	91 16       	st.w	r8[0x4],r6
80001552:	48 98       	lddpc	r8,80001574 <_malloc_trim_r+0xa0>
80001554:	70 09       	ld.w	r9,r8[0x0]
80001556:	0a 19       	sub	r9,r5
80001558:	0e 9c       	mov	r12,r7
8000155a:	91 09       	st.w	r8[0x0],r9
8000155c:	f0 1f 00 07 	mcall	80001578 <_malloc_trim_r+0xa4>
80001560:	da 2a       	popm	r4-r7,pc,r12=1
80001562:	00 00       	add	r0,r0
80001564:	80 00       	ld.sh	r0,r0[0x0]
80001566:	14 5a       	eor	r10,r10
80001568:	00 00       	add	r0,r0
8000156a:	01 04       	ld.w	r4,r0++
8000156c:	80 00       	ld.sh	r0,r0[0x0]
8000156e:	14 60       	and	r0,r10
80001570:	00 00       	add	r0,r0
80001572:	05 10       	ld.sh	r0,r2++
80001574:	00 00       	add	r0,r0
80001576:	05 24       	ld.uh	r4,r2++
80001578:	80 00       	ld.sh	r0,r0[0x0]
8000157a:	14 5c       	eor	r12,r10

8000157c <_free_r>:
8000157c:	d4 21       	pushm	r4-r7,lr
8000157e:	16 96       	mov	r6,r11
80001580:	18 97       	mov	r7,r12
80001582:	58 0b       	cp.w	r11,0
80001584:	e0 80 00 c8 	breq	80001714 <_free_r+0x198>
80001588:	f0 1f 00 4c 	mcall	800016b8 <_free_r+0x13c>
8000158c:	20 86       	sub	r6,8
8000158e:	4c ca       	lddpc	r10,800016bc <_free_r+0x140>
80001590:	6c 18       	ld.w	r8,r6[0x4]
80001592:	74 2e       	ld.w	lr,r10[0x8]
80001594:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001598:	a1 c8       	cbr	r8,0x0
8000159a:	ec 08 00 09 	add	r9,r6,r8
8000159e:	72 1b       	ld.w	r11,r9[0x4]
800015a0:	e0 1b ff fc 	andl	r11,0xfffc
800015a4:	1c 39       	cp.w	r9,lr
800015a6:	c1 d1       	brne	800015e0 <_free_r+0x64>
800015a8:	f6 08 00 08 	add	r8,r11,r8
800015ac:	58 0c       	cp.w	r12,0
800015ae:	c0 81       	brne	800015be <_free_r+0x42>
800015b0:	6c 09       	ld.w	r9,r6[0x0]
800015b2:	12 16       	sub	r6,r9
800015b4:	12 08       	add	r8,r9
800015b6:	6c 3b       	ld.w	r11,r6[0xc]
800015b8:	6c 29       	ld.w	r9,r6[0x8]
800015ba:	97 29       	st.w	r11[0x8],r9
800015bc:	93 3b       	st.w	r9[0xc],r11
800015be:	10 99       	mov	r9,r8
800015c0:	95 26       	st.w	r10[0x8],r6
800015c2:	a1 a9       	sbr	r9,0x0
800015c4:	8d 19       	st.w	r6[0x4],r9
800015c6:	4b f9       	lddpc	r9,800016c0 <_free_r+0x144>
800015c8:	72 09       	ld.w	r9,r9[0x0]
800015ca:	12 38       	cp.w	r8,r9
800015cc:	c0 63       	brcs	800015d8 <_free_r+0x5c>
800015ce:	4b e8       	lddpc	r8,800016c4 <_free_r+0x148>
800015d0:	0e 9c       	mov	r12,r7
800015d2:	70 0b       	ld.w	r11,r8[0x0]
800015d4:	f0 1f 00 3d 	mcall	800016c8 <_free_r+0x14c>
800015d8:	0e 9c       	mov	r12,r7
800015da:	f0 1f 00 3d 	mcall	800016cc <_free_r+0x150>
800015de:	d8 22       	popm	r4-r7,pc
800015e0:	93 1b       	st.w	r9[0x4],r11
800015e2:	58 0c       	cp.w	r12,0
800015e4:	c0 30       	breq	800015ea <_free_r+0x6e>
800015e6:	30 0c       	mov	r12,0
800015e8:	c1 08       	rjmp	80001608 <_free_r+0x8c>
800015ea:	6c 0e       	ld.w	lr,r6[0x0]
800015ec:	f4 c5 ff f8 	sub	r5,r10,-8
800015f0:	1c 16       	sub	r6,lr
800015f2:	1c 08       	add	r8,lr
800015f4:	6c 2e       	ld.w	lr,r6[0x8]
800015f6:	0a 3e       	cp.w	lr,r5
800015f8:	f9 bc 00 01 	moveq	r12,1
800015fc:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001600:	eb fe 1a 02 	st.wne	r5[0x8],lr
80001604:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001608:	f2 0b 00 0e 	add	lr,r9,r11
8000160c:	7c 1e       	ld.w	lr,lr[0x4]
8000160e:	ed be 00 00 	bld	lr,0x0
80001612:	c1 30       	breq	80001638 <_free_r+0xbc>
80001614:	16 08       	add	r8,r11
80001616:	58 0c       	cp.w	r12,0
80001618:	c0 c1       	brne	80001630 <_free_r+0xb4>
8000161a:	4a 9e       	lddpc	lr,800016bc <_free_r+0x140>
8000161c:	72 2b       	ld.w	r11,r9[0x8]
8000161e:	2f 8e       	sub	lr,-8
80001620:	1c 3b       	cp.w	r11,lr
80001622:	c0 71       	brne	80001630 <_free_r+0xb4>
80001624:	97 36       	st.w	r11[0xc],r6
80001626:	97 26       	st.w	r11[0x8],r6
80001628:	8d 2b       	st.w	r6[0x8],r11
8000162a:	8d 3b       	st.w	r6[0xc],r11
8000162c:	30 1c       	mov	r12,1
8000162e:	c0 58       	rjmp	80001638 <_free_r+0xbc>
80001630:	72 2b       	ld.w	r11,r9[0x8]
80001632:	72 39       	ld.w	r9,r9[0xc]
80001634:	93 2b       	st.w	r9[0x8],r11
80001636:	97 39       	st.w	r11[0xc],r9
80001638:	10 99       	mov	r9,r8
8000163a:	ec 08 09 08 	st.w	r6[r8],r8
8000163e:	a1 a9       	sbr	r9,0x0
80001640:	8d 19       	st.w	r6[0x4],r9
80001642:	58 0c       	cp.w	r12,0
80001644:	c6 51       	brne	8000170e <_free_r+0x192>
80001646:	e0 48 01 ff 	cp.w	r8,511
8000164a:	e0 8b 00 13 	brhi	80001670 <_free_r+0xf4>
8000164e:	a3 98       	lsr	r8,0x3
80001650:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001654:	72 2b       	ld.w	r11,r9[0x8]
80001656:	8d 39       	st.w	r6[0xc],r9
80001658:	8d 2b       	st.w	r6[0x8],r11
8000165a:	97 36       	st.w	r11[0xc],r6
8000165c:	93 26       	st.w	r9[0x8],r6
8000165e:	a3 48       	asr	r8,0x2
80001660:	74 19       	ld.w	r9,r10[0x4]
80001662:	30 1b       	mov	r11,1
80001664:	f6 08 09 48 	lsl	r8,r11,r8
80001668:	f3 e8 10 08 	or	r8,r9,r8
8000166c:	95 18       	st.w	r10[0x4],r8
8000166e:	c5 08       	rjmp	8000170e <_free_r+0x192>
80001670:	f0 0b 16 09 	lsr	r11,r8,0x9
80001674:	58 4b       	cp.w	r11,4
80001676:	e0 8b 00 06 	brhi	80001682 <_free_r+0x106>
8000167a:	f0 0b 16 06 	lsr	r11,r8,0x6
8000167e:	2c 8b       	sub	r11,-56
80001680:	c2 b8       	rjmp	800016d6 <_free_r+0x15a>
80001682:	59 4b       	cp.w	r11,20
80001684:	e0 8b 00 04 	brhi	8000168c <_free_r+0x110>
80001688:	2a 5b       	sub	r11,-91
8000168a:	c2 68       	rjmp	800016d6 <_free_r+0x15a>
8000168c:	e0 4b 00 54 	cp.w	r11,84
80001690:	e0 8b 00 06 	brhi	8000169c <_free_r+0x120>
80001694:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001698:	29 2b       	sub	r11,-110
8000169a:	c1 e8       	rjmp	800016d6 <_free_r+0x15a>
8000169c:	e0 4b 01 54 	cp.w	r11,340
800016a0:	e0 8b 00 06 	brhi	800016ac <_free_r+0x130>
800016a4:	f0 0b 16 0f 	lsr	r11,r8,0xf
800016a8:	28 9b       	sub	r11,-119
800016aa:	c1 68       	rjmp	800016d6 <_free_r+0x15a>
800016ac:	e0 4b 05 54 	cp.w	r11,1364
800016b0:	e0 88 00 10 	brls	800016d0 <_free_r+0x154>
800016b4:	37 eb       	mov	r11,126
800016b6:	c1 08       	rjmp	800016d6 <_free_r+0x15a>
800016b8:	80 00       	ld.sh	r0,r0[0x0]
800016ba:	14 5a       	eor	r10,r10
800016bc:	00 00       	add	r0,r0
800016be:	01 04       	ld.w	r4,r0++
800016c0:	00 00       	add	r0,r0
800016c2:	05 0c       	ld.w	r12,r2++
800016c4:	00 00       	add	r0,r0
800016c6:	05 20       	ld.uh	r0,r2++
800016c8:	80 00       	ld.sh	r0,r0[0x0]
800016ca:	14 d4       	st.w	--r10,r4
800016cc:	80 00       	ld.sh	r0,r0[0x0]
800016ce:	14 5c       	eor	r12,r10
800016d0:	f0 0b 16 12 	lsr	r11,r8,0x12
800016d4:	28 4b       	sub	r11,-124
800016d6:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800016da:	78 29       	ld.w	r9,r12[0x8]
800016dc:	18 39       	cp.w	r9,r12
800016de:	c0 e1       	brne	800016fa <_free_r+0x17e>
800016e0:	74 18       	ld.w	r8,r10[0x4]
800016e2:	a3 4b       	asr	r11,0x2
800016e4:	30 1c       	mov	r12,1
800016e6:	f8 0b 09 4b 	lsl	r11,r12,r11
800016ea:	f1 eb 10 0b 	or	r11,r8,r11
800016ee:	12 98       	mov	r8,r9
800016f0:	95 1b       	st.w	r10[0x4],r11
800016f2:	c0 a8       	rjmp	80001706 <_free_r+0x18a>
800016f4:	72 29       	ld.w	r9,r9[0x8]
800016f6:	18 39       	cp.w	r9,r12
800016f8:	c0 60       	breq	80001704 <_free_r+0x188>
800016fa:	72 1a       	ld.w	r10,r9[0x4]
800016fc:	e0 1a ff fc 	andl	r10,0xfffc
80001700:	14 38       	cp.w	r8,r10
80001702:	cf 93       	brcs	800016f4 <_free_r+0x178>
80001704:	72 38       	ld.w	r8,r9[0xc]
80001706:	8d 38       	st.w	r6[0xc],r8
80001708:	8d 29       	st.w	r6[0x8],r9
8000170a:	93 36       	st.w	r9[0xc],r6
8000170c:	91 26       	st.w	r8[0x8],r6
8000170e:	0e 9c       	mov	r12,r7
80001710:	f0 1f 00 02 	mcall	80001718 <_free_r+0x19c>
80001714:	d8 22       	popm	r4-r7,pc
80001716:	00 00       	add	r0,r0
80001718:	80 00       	ld.sh	r0,r0[0x0]
8000171a:	14 5c       	eor	r12,r10

Disassembly of section .exception:

80001800 <_evba>:
	...

80001828 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001828:	c7 a8       	rjmp	8000191c <privilegedCalls>
	...

80001900 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001900:	1c 9f       	mov	pc,lr

80001902 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001902:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001906:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
8000190a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
8000190e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001912:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001914:	c0 31       	brne	8000191a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001916:	4b 9c       	lddpc	r12,800019f8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001918:	18 9f       	mov	pc,r12

8000191a <_int0_exit>:
_int0_exit:
	rete
8000191a:	d6 03       	rete

8000191c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
8000191c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
8000191e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001920:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001922:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001924:	9b 3c       	st.w	sp[0xc],r12

80001926 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001926:	4b 6c       	lddpc	r12,800019fc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001928:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
8000192a:	c0 61       	brne	80001936 <priv_interruptenable>
	ld.w r12,sp[USERSR]
8000192c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
8000192e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001930:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001932:	d3 02       	popm	r11-r12
	rete
80001934:	d6 03       	rete

80001936 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001936:	4b 3c       	lddpc	r12,80001a00 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001938:	18 3b       	cp.w	r11,r12
	brne privexception
8000193a:	c0 61       	brne	80001946 <privexception>
	ld.w r12,sp[USERSR]
8000193c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
8000193e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001940:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001942:	d3 02       	popm	r11-r12
	rete
80001944:	d6 03       	rete

80001946 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001946:	c0 08       	rjmp	80001946 <privexception>

80001948 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001948:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
8000194a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
8000194e:	4a ec       	lddpc	r12,80001a04 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001950:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001952:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001954:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001958:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
8000195c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001960:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001962:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001964:	1c 9f       	mov	pc,lr

80001966 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001966:	d3 03       	ssrf	0x10
	mov pc,lr
80001968:	1c 9f       	mov	pc,lr

8000196a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
8000196a:	d5 03       	csrf	0x10
	mov pc,lr
8000196c:	1c 9f       	mov	pc,lr

8000196e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
8000196e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001972:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001974:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001978:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
8000197c:	1c 9f       	mov	pc,lr

8000197e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000197e:	4a 3c       	lddpc	r12,80001a08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001980:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001982:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001984:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001986:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001988:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
8000198a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
8000198c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
8000198e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001990:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001992:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001994:	33 40       	mov	r0,52
	add r0,r12
80001996:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001998:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
8000199c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
8000199e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
800019a2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
800019a4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
800019a6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
800019a8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
800019aa:	1a 90       	mov	r0,sp
	st.w --sp,r0
800019ac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800019ae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
800019b2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
800019b4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
800019b6:	1c 9f       	mov	pc,lr

800019b8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800019b8:	49 4c       	lddpc	r12,80001a08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
800019ba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
800019bc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800019be:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800019c0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
800019c4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
800019c6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
800019c8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800019ca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
800019cc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800019ce:	33 40       	mov	r0,52
	add r0,r12
800019d0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800019d2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800019d6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
800019d8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
800019da:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
800019dc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
800019de:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
800019e0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
800019e2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
800019e4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
800019e6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
800019e8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800019ea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
800019ec:	d4 01       	pushm	lr
	call timerStart
800019ee:	f0 1f 00 08 	mcall	80001a0c <contextRestoreFromISR+0x54>
	popm lr
800019f2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
800019f4:	1c 9f       	mov	pc,lr
800019f6:	00 00       	add	r0,r0
800019f8:	80 00       	ld.sh	r0,r0[0x0]
800019fa:	07 d0       	ld.ub	r0,r3[0x5]
800019fc:	80 00       	ld.sh	r0,r0[0x0]
800019fe:	19 66       	ld.uh	r6,--r12
80001a00:	80 00       	ld.sh	r0,r0[0x0]
80001a02:	19 6a       	ld.uh	r10,--r12
80001a04:	80 00       	ld.sh	r0,r0[0x0]
80001a06:	18 00       	add	r0,r12
80001a08:	00 00       	add	r0,r0
80001a0a:	05 98       	ld.ub	r8,r2[0x1]
80001a0c:	80 00       	ld.sh	r0,r0[0x0]
80001a0e:	0e 4a       	or	r10,r7
	...
