
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000155c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001600  80001600  00001a00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80001a00  80001a00  00001e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80001a84  80001a84  00001e84  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80001a88  00002008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80001f94  00002514  2**0
                  ALLOC
  9 .bss          00000090  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000da58  000005a8  000005a8  00000000  2**0
                  ALLOC
 11 .comment      000000bc  00000000  00000000  00002514  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000588  00000000  00000000  000025d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 0000093b  00000000  00000000  00002b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c19b  00000000  00000000  00003493  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00001fb3  00000000  00000000  0000f62e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000429c  00000000  00000000  000115e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000b78  00000000  00000000  00015880  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001bd6  00000000  00000000  000163f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000017e8  00000000  00000000  00017fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 004566cd  00000000  00000000  000197b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 000004d0  00000000  00000000  0046fe83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	0d 34       	ld.ub	r4,r6++

Disassembly of section .text:

80000008 <ROSA_semaphoreCreate>:
 *
 * Comment:
 * 	Create a semaphore
 *
 **********************************************************/
int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t ** mutex, uint8_t ceiling) {
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 2d       	sub	sp,8
80000010:	ef 4c ff fc 	st.w	r7[-4],r12
80000014:	16 98       	mov	r8,r11
80000016:	ef 68 ff f8 	st.b	r7[-8],r8
	*mutex = (ROSA_semaphoreHandle_t*) malloc(sizeof(ROSA_semaphoreHandle_t*));
8000001a:	30 4c       	mov	r12,4
8000001c:	f0 1f 00 0c 	mcall	8000004c <ROSA_semaphoreCreate+0x44>
80000020:	18 98       	mov	r8,r12
80000022:	10 99       	mov	r9,r8
80000024:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000028:	91 09       	st.w	r8[0x0],r9
	(*mutex)->holder = NULL;
8000002a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000002e:	70 08       	ld.w	r8,r8[0x0]
80000030:	30 09       	mov	r9,0
80000032:	91 09       	st.w	r8[0x0],r9
	(*mutex)->ceiling = ceiling;
80000034:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000038:	70 09       	ld.w	r9,r8[0x0]
8000003a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000003e:	b2 c8       	st.b	r9[0x4],r8
	
	return 0;
80000040:	30 08       	mov	r8,0
}
80000042:	10 9c       	mov	r12,r8
80000044:	2f ed       	sub	sp,-8
80000046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000004a:	00 00       	add	r0,r0
8000004c:	80 00       	ld.sh	r0,r0[0x0]
8000004e:	0e 2c       	rsub	r12,r7

80000050 <ROSA_semaphoreLock>:
 *
 * Comment:
 * 	Lock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t ** mutex) {
80000050:	eb cd 40 80 	pushm	r7,lr
80000054:	1a 97       	mov	r7,sp
80000056:	20 1d       	sub	sp,4
80000058:	ef 4c ff fc 	st.w	r7[-4],r12
	while ((*mutex)->holder != NULL) {
8000005c:	c0 38       	rjmp	80000062 <ROSA_semaphoreLock+0x12>
		ROSA_yield();	
8000005e:	f0 1f 00 0a 	mcall	80000084 <ROSA_semaphoreLock+0x34>
 * Comment:
 * 	Lock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t ** mutex) {
	while ((*mutex)->holder != NULL) {
80000062:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000066:	70 08       	ld.w	r8,r8[0x0]
80000068:	70 08       	ld.w	r8,r8[0x0]
8000006a:	58 08       	cp.w	r8,0
8000006c:	cf 91       	brne	8000005e <ROSA_semaphoreLock+0xe>
		ROSA_yield();	
	}
	
	(*mutex)->holder = EXECTASK;
8000006e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000072:	70 08       	ld.w	r8,r8[0x0]
80000074:	48 59       	lddpc	r9,80000088 <ROSA_semaphoreLock+0x38>
80000076:	72 09       	ld.w	r9,r9[0x0]
80000078:	91 09       	st.w	r8[0x0],r9
	//EXECTASK->priority=mutex->ceiling;
	//*PA[EXECTASK->priority]->nexttcb=mutex->holder;
	// ... raise priority of E
	// ... move it to the corresponded rQi by using priority array.
	
	return 0;
8000007a:	30 08       	mov	r8,0
}
8000007c:	10 9c       	mov	r12,r8
8000007e:	2f fd       	sub	sp,-4
80000080:	e3 cd 80 80 	ldm	sp++,r7,pc
80000084:	80 00       	ld.sh	r0,r0[0x0]
80000086:	05 6a       	ld.uh	r10,--r2
80000088:	00 00       	add	r0,r0
8000008a:	05 9c       	ld.ub	r12,r2[0x1]

8000008c <ROSA_semaphoreUnlock>:
 *
 * Comment:
 * 	Unlock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreUnlock(ROSA_semaphoreHandle_t ** mutex) {
8000008c:	eb cd 40 80 	pushm	r7,lr
80000090:	1a 97       	mov	r7,sp
80000092:	20 1d       	sub	sp,4
80000094:	ef 4c ff fc 	st.w	r7[-4],r12
	if ((*mutex)->holder == EXECTASK) {
80000098:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000009c:	70 08       	ld.w	r8,r8[0x0]
8000009e:	70 09       	ld.w	r9,r8[0x0]
800000a0:	48 78       	lddpc	r8,800000bc <ROSA_semaphoreUnlock+0x30>
800000a2:	70 08       	ld.w	r8,r8[0x0]
800000a4:	10 39       	cp.w	r9,r8
800000a6:	c0 61       	brne	800000b2 <ROSA_semaphoreUnlock+0x26>
		(*mutex)->holder = NULL;	
800000a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000ac:	70 08       	ld.w	r8,r8[0x0]
800000ae:	30 09       	mov	r9,0
800000b0:	91 09       	st.w	r8[0x0],r9
	}
	
	return 0;
800000b2:	30 08       	mov	r8,0
}
800000b4:	10 9c       	mov	r12,r8
800000b6:	2f fd       	sub	sp,-4
800000b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800000bc:	00 00       	add	r0,r0
800000be:	05 9c       	ld.ub	r12,r2[0x1]

800000c0 <usart_options>:
800000c0:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 31     ............tsk1
800000d0:	00 00 00 00 74 73 6b 32 00 00 00 00                 ....tsk2....

800000dc <task1>:
 * Task1
 * LED0 lights up
 * LED1 goes dark
 ************************************************************/
void task1(void)
{
800000dc:	eb cd 40 80 	pushm	r7,lr
800000e0:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(&mutex);
800000e2:	48 cc       	lddpc	r12,80000110 <task1+0x34>
800000e4:	f0 1f 00 0c 	mcall	80000114 <task1+0x38>
		ledOn(LED0_GPIO);
800000e8:	33 bc       	mov	r12,59
800000ea:	f0 1f 00 0c 	mcall	80000118 <task1+0x3c>
		delay_ms(350);
800000ee:	e0 6c 01 5e 	mov	r12,350
800000f2:	f0 1f 00 0b 	mcall	8000011c <task1+0x40>
		ledOff(LED0_GPIO);
800000f6:	33 bc       	mov	r12,59
800000f8:	f0 1f 00 0a 	mcall	80000120 <task1+0x44>
		delay_ms(350);
800000fc:	e0 6c 01 5e 	mov	r12,350
80000100:	f0 1f 00 07 	mcall	8000011c <task1+0x40>
		ROSA_yield();
80000104:	f0 1f 00 08 	mcall	80000124 <task1+0x48>
		ROSA_semaphoreUnlock(&mutex);
80000108:	48 2c       	lddpc	r12,80000110 <task1+0x34>
8000010a:	f0 1f 00 08 	mcall	80000128 <task1+0x4c>
	}
8000010e:	ce ab       	rjmp	800000e2 <task1+0x6>
80000110:	00 00       	add	r0,r0
80000112:	05 5c       	ld.sh	r12,--r2
80000114:	80 00       	ld.sh	r0,r0[0x0]
80000116:	00 50       	eor	r0,r0
80000118:	80 00       	ld.sh	r0,r0[0x0]
8000011a:	09 64       	ld.uh	r4,--r4
8000011c:	80 00       	ld.sh	r0,r0[0x0]
8000011e:	07 5c       	ld.sh	r12,--r3
80000120:	80 00       	ld.sh	r0,r0[0x0]
80000122:	09 84       	ld.ub	r4,r4[0x0]
80000124:	80 00       	ld.sh	r0,r0[0x0]
80000126:	05 6a       	ld.uh	r10,--r2
80000128:	80 00       	ld.sh	r0,r0[0x0]
8000012a:	00 8c       	andn	r12,r0

8000012c <task2>:
 * Task2
 * LED0 goes dark
 * LED1 lights up
 ************************************************************/
void task2(void)
{
8000012c:	eb cd 40 80 	pushm	r7,lr
80000130:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(&mutex);
80000132:	48 cc       	lddpc	r12,80000160 <task2+0x34>
80000134:	f0 1f 00 0c 	mcall	80000164 <task2+0x38>
		ledOn(LED1_GPIO);
80000138:	33 cc       	mov	r12,60
8000013a:	f0 1f 00 0c 	mcall	80000168 <task2+0x3c>
		delay_ms(350);
8000013e:	e0 6c 01 5e 	mov	r12,350
80000142:	f0 1f 00 0b 	mcall	8000016c <task2+0x40>
		ledOff(LED1_GPIO);
80000146:	33 cc       	mov	r12,60
80000148:	f0 1f 00 0a 	mcall	80000170 <task2+0x44>
		delay_ms(350);
8000014c:	e0 6c 01 5e 	mov	r12,350
80000150:	f0 1f 00 07 	mcall	8000016c <task2+0x40>
		ROSA_semaphoreUnlock(&mutex);
80000154:	48 3c       	lddpc	r12,80000160 <task2+0x34>
80000156:	f0 1f 00 08 	mcall	80000174 <task2+0x48>
		ROSA_yield();
8000015a:	f0 1f 00 08 	mcall	80000178 <task2+0x4c>
	}
8000015e:	ce ab       	rjmp	80000132 <task2+0x6>
80000160:	00 00       	add	r0,r0
80000162:	05 5c       	ld.sh	r12,--r2
80000164:	80 00       	ld.sh	r0,r0[0x0]
80000166:	00 50       	eor	r0,r0
80000168:	80 00       	ld.sh	r0,r0[0x0]
8000016a:	09 64       	ld.uh	r4,--r4
8000016c:	80 00       	ld.sh	r0,r0[0x0]
8000016e:	07 5c       	ld.sh	r12,--r3
80000170:	80 00       	ld.sh	r0,r0[0x0]
80000172:	09 84       	ld.ub	r4,r4[0x0]
80000174:	80 00       	ld.sh	r0,r0[0x0]
80000176:	00 8c       	andn	r12,r0
80000178:	80 00       	ld.sh	r0,r0[0x0]
8000017a:	05 6a       	ld.uh	r10,--r2

8000017c <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
8000017c:	eb cd 40 80 	pushm	r7,lr
80000180:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
80000182:	f0 1f 00 0c 	mcall	800001b0 <main+0x34>
	
	//Create tasks and install them into the ROSA kernel
	ROSA_taskCreate(&t1_tcb, "tsk1", task1, T1_STACK_SIZE, 4);
80000186:	30 48       	mov	r8,4
80000188:	32 09       	mov	r9,32
8000018a:	48 ba       	lddpc	r10,800001b4 <main+0x38>
8000018c:	48 bb       	lddpc	r11,800001b8 <main+0x3c>
8000018e:	48 cc       	lddpc	r12,800001bc <main+0x40>
80000190:	f0 1f 00 0c 	mcall	800001c0 <main+0x44>
	ROSA_taskCreate(&t2_tcb, "tsk2", task2, T2_STACK_SIZE, 4);
80000194:	30 48       	mov	r8,4
80000196:	32 09       	mov	r9,32
80000198:	48 ba       	lddpc	r10,800001c4 <main+0x48>
8000019a:	48 cb       	lddpc	r11,800001c8 <main+0x4c>
8000019c:	48 cc       	lddpc	r12,800001cc <main+0x50>
8000019e:	f0 1f 00 09 	mcall	800001c0 <main+0x44>
	ROSA_semaphoreCreate(&mutex, 1);
800001a2:	30 1b       	mov	r11,1
800001a4:	48 bc       	lddpc	r12,800001d0 <main+0x54>
800001a6:	f0 1f 00 0c 	mcall	800001d4 <main+0x58>
	ROSA_tcbInstall(&t2_tcb);*/

	//Start the ROSA kernel
	//TCBLIST = PA[2]->nexttcb;
	//ROSA_start();
	ROSA_startScheduler();
800001aa:	f0 1f 00 0c 	mcall	800001d8 <main+0x5c>
	//ledOn(LED1_GPIO);
	/* Execution will never return here */
	while(1);
800001ae:	c0 08       	rjmp	800001ae <main+0x32>
800001b0:	80 00       	ld.sh	r0,r0[0x0]
800001b2:	02 7c       	tst	r12,r1
800001b4:	80 00       	ld.sh	r0,r0[0x0]
800001b6:	00 dc       	st.w	--r0,r12
800001b8:	80 00       	ld.sh	r0,r0[0x0]
800001ba:	00 cc       	st.b	r0++,r12
800001bc:	00 00       	add	r0,r0
800001be:	05 60       	ld.uh	r0,--r2
800001c0:	80 00       	ld.sh	r0,r0[0x0]
800001c2:	03 c8       	ld.ub	r8,r1[0x4]
800001c4:	80 00       	ld.sh	r0,r0[0x0]
800001c6:	01 2c       	ld.uh	r12,r0++
800001c8:	80 00       	ld.sh	r0,r0[0x0]
800001ca:	00 d4       	st.w	--r0,r4
800001cc:	00 00       	add	r0,r0
800001ce:	05 58       	ld.sh	r8,--r2
800001d0:	00 00       	add	r0,r0
800001d2:	05 5c       	ld.sh	r12,--r2
800001d4:	80 00       	ld.sh	r0,r0[0x0]
800001d6:	00 08       	add	r8,r0
800001d8:	80 00       	ld.sh	r0,r0[0x0]
800001da:	05 d4       	ld.ub	r4,r2[0x5]

800001dc <usart_options>:
800001dc:	00 00 e1 00 08 04 00 00 00 00 00 00                 ............

800001e8 <rqi>:
	
	return i;
}

int rqi(ROSA_taskHandle_t ** pth)
{
800001e8:	eb cd 40 80 	pushm	r7,lr
800001ec:	1a 97       	mov	r7,sp
800001ee:	20 2d       	sub	sp,8
800001f0:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t priority;
	
	priority = (*pth)->priority;
800001f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001f8:	70 08       	ld.w	r8,r8[0x0]
800001fa:	f1 38 00 64 	ld.ub	r8,r8[100]
800001fe:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (PA[priority] == NULL) {
80000202:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000206:	49 d8       	lddpc	r8,80000278 <rqi+0x90>
80000208:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000020c:	58 08       	cp.w	r8,0
8000020e:	c1 41       	brne	80000236 <rqi+0x4e>
		PA[priority] = *pth;
80000210:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000214:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000218:	70 0a       	ld.w	r10,r8[0x0]
8000021a:	49 88       	lddpc	r8,80000278 <rqi+0x90>
8000021c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		PA[priority]->nexttcb = *pth;
80000220:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000224:	49 58       	lddpc	r8,80000278 <rqi+0x90>
80000226:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000022a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000022e:	72 09       	ld.w	r9,r9[0x0]
80000230:	91 09       	st.w	r8[0x0],r9
		return 0;
80000232:	30 08       	mov	r8,0
80000234:	c1 d8       	rjmp	8000026e <rqi+0x86>
	}
	else {
		(*pth)->nexttcb = PA[priority]->nexttcb;
80000236:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000023a:	70 08       	ld.w	r8,r8[0x0]
8000023c:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80000240:	48 e9       	lddpc	r9,80000278 <rqi+0x90>
80000242:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80000246:	72 09       	ld.w	r9,r9[0x0]
80000248:	91 09       	st.w	r8[0x0],r9
		PA[priority]->nexttcb = *pth;
8000024a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000024e:	48 b8       	lddpc	r8,80000278 <rqi+0x90>
80000250:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000254:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000258:	72 09       	ld.w	r9,r9[0x0]
8000025a:	91 09       	st.w	r8[0x0],r9
		PA[priority] = *pth;
8000025c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000260:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000264:	70 0a       	ld.w	r10,r8[0x0]
80000266:	48 58       	lddpc	r8,80000278 <rqi+0x90>
80000268:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		return 0;
8000026c:	30 08       	mov	r8,0
	}
}
8000026e:	10 9c       	mov	r12,r8
80000270:	2f ed       	sub	sp,-8
80000272:	e3 cd 80 80 	ldm	sp++,r7,pc
80000276:	00 00       	add	r0,r0
80000278:	00 00       	add	r0,r0
8000027a:	05 68       	ld.uh	r8,--r2

8000027c <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
8000027c:	eb cd 40 80 	pushm	r7,lr
80000280:	1a 97       	mov	r7,sp
80000282:	20 1d       	sub	sp,4
	int i = 0;
80000284:	30 08       	mov	r8,0
80000286:	ef 48 ff fc 	st.w	r7[-4],r8
	
	//Do initialization of I/O drivers
	ledInit();									//LEDs
8000028a:	f0 1f 00 19 	mcall	800002ec <ROSA_init+0x70>
	buttonInit();								//Buttons
8000028e:	f0 1f 00 19 	mcall	800002f0 <ROSA_init+0x74>
	joystickInit();								//Joystick
80000292:	f0 1f 00 19 	mcall	800002f4 <ROSA_init+0x78>
	potInit();									//Potentiometer
80000296:	f0 1f 00 19 	mcall	800002f8 <ROSA_init+0x7c>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
8000029a:	e0 6a 1b 00 	mov	r10,6912
8000029e:	ea 1a 00 b7 	orh	r10,0xb7
800002a2:	49 7b       	lddpc	r11,800002fc <ROSA_init+0x80>
800002a4:	fe 7c 14 00 	mov	r12,-60416
800002a8:	f0 1f 00 16 	mcall	80000300 <ROSA_init+0x84>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
800002ac:	49 68       	lddpc	r8,80000304 <ROSA_init+0x88>
800002ae:	30 09       	mov	r9,0
800002b0:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
800002b2:	49 68       	lddpc	r8,80000308 <ROSA_init+0x8c>
800002b4:	30 09       	mov	r9,0
800002b6:	91 09       	st.w	r8[0x0],r9
	PREEMPTASK = NULL;
800002b8:	49 58       	lddpc	r8,8000030c <ROSA_init+0x90>
800002ba:	30 09       	mov	r9,0
800002bc:	91 09       	st.w	r8[0x0],r9
	
	for (i = 0; i < MAXNPRIO; i++) {
800002be:	30 08       	mov	r8,0
800002c0:	ef 48 ff fc 	st.w	r7[-4],r8
800002c4:	c0 c8       	rjmp	800002dc <ROSA_init+0x60>
		PA[i] = NULL;
800002c6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002ca:	49 28       	lddpc	r8,80000310 <ROSA_init+0x94>
800002cc:	30 0a       	mov	r10,0
800002ce:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
	EXECTASK = NULL;
	PREEMPTASK = NULL;
	
	for (i = 0; i < MAXNPRIO; i++) {
800002d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002d6:	2f f8       	sub	r8,-1
800002d8:	ef 48 ff fc 	st.w	r7[-4],r8
800002dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002e0:	58 b8       	cp.w	r8,11
800002e2:	fe 9a ff f2 	brle	800002c6 <ROSA_init+0x4a>
	
	//Initialize the timer to 100 ms period.
	//...
	//timerInit(100);
	//...
}
800002e6:	2f fd       	sub	sp,-4
800002e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800002ec:	80 00       	ld.sh	r0,r0[0x0]
800002ee:	08 d8       	st.w	--r4,r8
800002f0:	80 00       	ld.sh	r0,r0[0x0]
800002f2:	06 fc       	st.b	--r3,r12
800002f4:	80 00       	ld.sh	r0,r0[0x0]
800002f6:	07 24       	ld.uh	r4,r3++
800002f8:	80 00       	ld.sh	r0,r0[0x0]
800002fa:	09 a4       	ld.ub	r4,r4[0x2]
800002fc:	80 00       	ld.sh	r0,r0[0x0]
800002fe:	01 dc       	ld.ub	r12,r0[0x5]
80000300:	80 00       	ld.sh	r0,r0[0x0]
80000302:	0b 58       	ld.sh	r8,--r5
80000304:	00 00       	add	r0,r0
80000306:	05 64       	ld.uh	r4,--r2
80000308:	00 00       	add	r0,r0
8000030a:	05 9c       	ld.ub	r12,r2[0x1]
8000030c:	00 00       	add	r0,r0
8000030e:	05 98       	ld.ub	r8,r2[0x1]
80000310:	00 00       	add	r0,r0
80000312:	05 68       	ld.uh	r8,--r2

80000314 <ROSA_tcbCreate>:
 * Comment:
 * 	Create the TCB with correct values.
 *
 **********************************************************/
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
80000314:	eb cd 40 80 	pushm	r7,lr
80000318:	1a 97       	mov	r7,sp
8000031a:	20 6d       	sub	sp,24
8000031c:	ef 4c ff f8 	st.w	r7[-8],r12
80000320:	ef 4b ff f4 	st.w	r7[-12],r11
80000324:	ef 4a ff f0 	st.w	r7[-16],r10
80000328:	ef 49 ff ec 	st.w	r7[-20],r9
8000032c:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000330:	30 08       	mov	r8,0
80000332:	ef 48 ff fc 	st.w	r7[-4],r8
80000336:	c1 48       	rjmp	8000035e <ROSA_tcbCreate+0x4a>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
80000338:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000033c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000340:	ee fa ff f4 	ld.w	r10,r7[-12]
80000344:	f4 08 00 08 	add	r8,r10,r8
80000348:	11 88       	ld.ub	r8,r8[0x0]
8000034a:	ee fa ff f8 	ld.w	r10,r7[-8]
8000034e:	f4 09 00 09 	add	r9,r10,r9
80000352:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000354:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000358:	2f f8       	sub	r8,-1
8000035a:	ef 48 ff fc 	st.w	r7[-4],r8
8000035e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000362:	58 38       	cp.w	r8,3
80000364:	fe 9a ff ea 	brle	80000338 <ROSA_tcbCreate+0x24>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
80000368:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000036c:	30 09       	mov	r9,0
8000036e:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
80000370:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000374:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000378:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
8000037a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000037e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000382:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
80000384:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000388:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000038c:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
8000038e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000392:	a3 68       	lsl	r8,0x2
80000394:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000398:	10 09       	add	r9,r8
8000039a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000039e:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
800003a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003a4:	70 39       	ld.w	r9,r8[0xc]
800003a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003aa:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
800003ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003b0:	fc 19 00 1c 	movh	r9,0x1c
800003b4:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
800003b6:	ee fc ff f8 	ld.w	r12,r7[-8]
800003ba:	f0 1f 00 03 	mcall	800003c4 <ROSA_tcbCreate+0xb0>
}
800003be:	2f ad       	sub	sp,-24
800003c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800003c4:	80 00       	ld.sh	r0,r0[0x0]
800003c6:	04 de       	st.w	--r2,lr

800003c8 <ROSA_taskCreate>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

int16_t ROSA_taskCreate(ROSA_taskHandle_t ** pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
800003c8:	eb cd 40 80 	pushm	r7,lr
800003cc:	1a 97       	mov	r7,sp
800003ce:	20 6d       	sub	sp,24
800003d0:	ef 4c ff f8 	st.w	r7[-8],r12
800003d4:	ef 4b ff f4 	st.w	r7[-12],r11
800003d8:	ef 4a ff f0 	st.w	r7[-16],r10
800003dc:	ef 49 ff ec 	st.w	r7[-20],r9
800003e0:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) calloc(stackSize, sizeof(uint32_t)); 
800003e4:	30 4b       	mov	r11,4
800003e6:	ee fc ff ec 	ld.w	r12,r7[-20]
800003ea:	f0 1f 00 28 	mcall	80000488 <ROSA_taskCreate+0xc0>
800003ee:	18 98       	mov	r8,r12
800003f0:	ef 48 ff fc 	st.w	r7[-4],r8
	
	*pth = (ROSA_taskHandle_t *) malloc(sizeof(ROSA_taskHandle_t));			
800003f4:	37 4c       	mov	r12,116
800003f6:	f0 1f 00 26 	mcall	8000048c <ROSA_taskCreate+0xc4>
800003fa:	18 98       	mov	r8,r12
800003fc:	10 99       	mov	r9,r8
800003fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000402:	91 09       	st.w	r8[0x0],r9
	(*pth)->priority = priority;
80000404:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000408:	70 09       	ld.w	r9,r8[0x0]
8000040a:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000040e:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
80000412:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000416:	70 0a       	ld.w	r10,r8[0x0]
80000418:	30 08       	mov	r8,0
8000041a:	30 09       	mov	r9,0
8000041c:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
80000420:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000424:	70 09       	ld.w	r9,r8[0x0]
80000426:	30 08       	mov	r8,0
80000428:	f3 68 00 70 	st.b	r9[112],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
8000042c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000430:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000434:	72 0c       	ld.w	r12,r9[0x0]
80000436:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000043a:	ee fa ff f0 	ld.w	r10,r7[-16]
8000043e:	ee fb ff f4 	ld.w	r11,r7[-12]
80000442:	f0 1f 00 14 	mcall	80000490 <ROSA_taskCreate+0xc8>
	
	rqi(pth);
80000446:	ee fc ff f8 	ld.w	r12,r7[-8]
8000044a:	f0 1f 00 13 	mcall	80000494 <ROSA_taskCreate+0xcc>
	
	if (EXECTASK != NULL) {
8000044e:	49 38       	lddpc	r8,80000498 <ROSA_taskCreate+0xd0>
80000450:	70 08       	ld.w	r8,r8[0x0]
80000452:	58 08       	cp.w	r8,0
80000454:	c1 40       	breq	8000047c <ROSA_taskCreate+0xb4>
		if (EXECTASK->priority < priority) {
80000456:	49 18       	lddpc	r8,80000498 <ROSA_taskCreate+0xd0>
80000458:	70 08       	ld.w	r8,r8[0x0]
8000045a:	f1 38 00 64 	ld.ub	r8,r8[100]
8000045e:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000462:	f0 09 18 00 	cp.b	r9,r8
80000466:	e0 88 00 0b 	brls	8000047c <ROSA_taskCreate+0xb4>
			PREEMPTASK = PA[priority];
8000046a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000046e:	48 c8       	lddpc	r8,8000049c <ROSA_taskCreate+0xd4>
80000470:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000474:	48 b8       	lddpc	r8,800004a0 <ROSA_taskCreate+0xd8>
80000476:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
80000478:	f0 1f 00 0b 	mcall	800004a4 <ROSA_taskCreate+0xdc>
		}	
	}
	
	return 0;
8000047c:	30 08       	mov	r8,0
}
8000047e:	10 9c       	mov	r12,r8
80000480:	2f ad       	sub	sp,-24
80000482:	e3 cd 80 80 	ldm	sp++,r7,pc
80000486:	00 00       	add	r0,r0
80000488:	80 00       	ld.sh	r0,r0[0x0]
8000048a:	0d b4       	ld.ub	r4,r6[0x3]
8000048c:	80 00       	ld.sh	r0,r0[0x0]
8000048e:	0e 2c       	rsub	r12,r7
80000490:	80 00       	ld.sh	r0,r0[0x0]
80000492:	03 14       	ld.sh	r4,r1++
80000494:	80 00       	ld.sh	r0,r0[0x0]
80000496:	01 e8       	ld.ub	r8,r0[0x6]
80000498:	00 00       	add	r0,r0
8000049a:	05 9c       	ld.ub	r12,r2[0x1]
8000049c:	00 00       	add	r0,r0
8000049e:	05 68       	ld.uh	r8,--r2
800004a0:	00 00       	add	r0,r0
800004a2:	05 98       	ld.ub	r8,r2[0x1]
800004a4:	80 00       	ld.sh	r0,r0[0x0]
800004a6:	05 6a       	ld.uh	r10,--r2

800004a8 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
800004a8:	4b 5c       	lddpc	r12,8000057c <_yield+0xa>
	lda.w r11,EXECTASK
800004aa:	4b 6b       	lddpc	r11,80000580 <_yield+0xe>
	ld.w r12,r12[0x0]
800004ac:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
800004ae:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
800004b0:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800004b2:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800004b4:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
800004b8:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
800004ba:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
800004bc:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
800004be:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
800004c2:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
800004c4:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
800004c6:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
800004c8:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
800004ca:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
800004cc:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
800004ce:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
800004d0:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
800004d2:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
800004d4:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
800004d6:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
800004d8:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
800004da:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
800004dc:	1c 9f       	mov	pc,lr

800004de <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
800004de:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
800004e0:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
800004e2:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
800004e4:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
800004e8:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
800004ec:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
800004f0:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
800004f4:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
800004f8:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
800004fc:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000500:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000504:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000508:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
8000050a:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
8000050c:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
8000050e:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000510:	1c 9f       	mov	pc,lr

80000512 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
80000512:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000514:	49 bc       	lddpc	r12,80000580 <_yield+0xe>
	ld.w r12,r12[0x0]
80000516:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000518:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
8000051a:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
8000051c:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
8000051e:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
80000520:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
80000522:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
80000524:	33 40       	mov	r0,52
	add r0,r12
80000526:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000528:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
8000052c:	1a 90       	mov	r0,sp
	st.w --sp,r0
8000052e:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80000530:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
80000534:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
80000536:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80000538:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
8000053a:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
8000053c:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
8000053e:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80000540:	1c 9f       	mov	pc,lr

80000542 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000542:	49 0c       	lddpc	r12,80000580 <_yield+0xe>
	ld.w r12,r12[0x0]
80000544:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
80000546:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000548:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
8000054a:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
8000054e:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80000550:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80000552:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
80000554:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80000556:	33 40       	mov	r0,52
	add r0,r12
80000558:	18 00       	add	r0,r12
	ldmts r0,r0-r11
8000055a:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
8000055e:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000560:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80000562:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80000564:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000566:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80000568:	d6 13       	rets

8000056a <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
8000056a:	d4 01       	pushm	lr
	lda.w lr,_yield
8000056c:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000570:	d7 33       	scall

80000572 <_yield>:
_yield:
	call contextSave
80000572:	cd 0f       	rcall	80000512 <contextSave>
	call scheduler
80000574:	f0 1f 00 04 	mcall	80000584 <_yield+0x12>
	call contextRestore
80000578:	ce 5f       	rcall	80000542 <contextRestore>
8000057a:	00 00       	add	r0,r0
8000057c:	00 00       	add	r0,r0
8000057e:	05 64       	ld.uh	r4,--r2
80000580:	00 00       	add	r0,r0
80000582:	05 9c       	ld.ub	r12,r2[0x1]
80000584:	80 00       	ld.sh	r0,r0[0x0]
80000586:	05 88       	ld.ub	r8,r2[0x0]

80000588 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000588:	eb cd 40 80 	pushm	r7,lr
8000058c:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK == NULL) {
8000058e:	48 f8       	lddpc	r8,800005c8 <scheduler+0x40>
80000590:	70 08       	ld.w	r8,r8[0x0]
80000592:	58 08       	cp.w	r8,0
80000594:	c1 11       	brne	800005b6 <scheduler+0x2e>
		PA[EXECTASK->priority] = EXECTASK;
80000596:	48 e8       	lddpc	r8,800005cc <scheduler+0x44>
80000598:	70 08       	ld.w	r8,r8[0x0]
8000059a:	f1 38 00 64 	ld.ub	r8,r8[100]
8000059e:	10 99       	mov	r9,r8
800005a0:	48 b8       	lddpc	r8,800005cc <scheduler+0x44>
800005a2:	70 0a       	ld.w	r10,r8[0x0]
800005a4:	48 b8       	lddpc	r8,800005d0 <scheduler+0x48>
800005a6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		EXECTASK = EXECTASK->nexttcb;
800005aa:	48 98       	lddpc	r8,800005cc <scheduler+0x44>
800005ac:	70 08       	ld.w	r8,r8[0x0]
800005ae:	70 09       	ld.w	r9,r8[0x0]
800005b0:	48 78       	lddpc	r8,800005cc <scheduler+0x44>
800005b2:	91 09       	st.w	r8[0x0],r9
800005b4:	c0 88       	rjmp	800005c4 <scheduler+0x3c>
	}
	else {
		EXECTASK = PREEMPTASK;
800005b6:	48 58       	lddpc	r8,800005c8 <scheduler+0x40>
800005b8:	70 09       	ld.w	r9,r8[0x0]
800005ba:	48 58       	lddpc	r8,800005cc <scheduler+0x44>
800005bc:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
800005be:	48 38       	lddpc	r8,800005c8 <scheduler+0x40>
800005c0:	30 09       	mov	r9,0
800005c2:	91 09       	st.w	r8[0x0],r9
	}
}
800005c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800005c8:	00 00       	add	r0,r0
800005ca:	05 98       	ld.ub	r8,r2[0x1]
800005cc:	00 00       	add	r0,r0
800005ce:	05 9c       	ld.ub	r12,r2[0x1]
800005d0:	00 00       	add	r0,r0
800005d2:	05 68       	ld.uh	r8,--r2

800005d4 <ROSA_startScheduler>:

void ROSA_startScheduler(void)
{
800005d4:	eb cd 40 80 	pushm	r7,lr
800005d8:	1a 97       	mov	r7,sp
800005da:	20 1d       	sub	sp,4
	int i = MAXNPRIO;
800005dc:	30 c8       	mov	r8,12
800005de:	ef 48 ff fc 	st.w	r7[-4],r8
	
	while (PA[--i] == NULL) {
800005e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005e6:	20 18       	sub	r8,1
800005e8:	ef 48 ff fc 	st.w	r7[-4],r8
800005ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800005f0:	48 98       	lddpc	r8,80000614 <ROSA_startScheduler+0x40>
800005f2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800005f6:	58 08       	cp.w	r8,0
800005f8:	cf 50       	breq	800005e2 <ROSA_startScheduler+0xe>
		;
	}
	
	TCBLIST = PA[i]->nexttcb;
800005fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800005fe:	48 68       	lddpc	r8,80000614 <ROSA_startScheduler+0x40>
80000600:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000604:	70 09       	ld.w	r9,r8[0x0]
80000606:	48 58       	lddpc	r8,80000618 <ROSA_startScheduler+0x44>
80000608:	91 09       	st.w	r8[0x0],r9
	
	ROSA_start();
8000060a:	f0 1f 00 05 	mcall	8000061c <ROSA_startScheduler+0x48>
}
8000060e:	2f fd       	sub	sp,-4
80000610:	e3 cd 80 80 	ldm	sp++,r7,pc
80000614:	00 00       	add	r0,r0
80000616:	05 68       	ld.uh	r8,--r2
80000618:	00 00       	add	r0,r0
8000061a:	05 64       	ld.uh	r4,--r2
8000061c:	80 00       	ld.sh	r0,r0[0x0]
8000061e:	04 a8       	st.w	r2++,r8

80000620 <C.0.9414>:
80000620:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000630 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000630:	eb cd 40 80 	pushm	r7,lr
80000634:	1a 97       	mov	r7,sp
80000636:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000638:	fe 78 38 00 	mov	r8,-51200
8000063c:	ef 48 ff fc 	st.w	r7[-4],r8

	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000640:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000644:	70 88       	ld.w	r8,r8[0x20]
80000646:	ef 48 ff f8 	st.w	r7[-8],r8
	//if(sr & AVR32_TC_CPCS_MASK)
		//ROSA_yieldFromISR();
}
8000064a:	2f ed       	sub	sp,-8
8000064c:	e3 cd 40 80 	ldm	sp++,r7,lr
80000650:	d6 03       	rete
80000652:	d7 03       	nop

80000654 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80000654:	eb cd 40 80 	pushm	r7,lr
80000658:	1a 97       	mov	r7,sp
8000065a:	20 7d       	sub	sp,28
8000065c:	ef 4c ff e4 	st.w	r7[-28],r12

	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000660:	4a 48       	lddpc	r8,800006f0 <timerPeriodSet+0x9c>
80000662:	ee ca 00 18 	sub	r10,r7,24
80000666:	10 9b       	mov	r11,r8
80000668:	f6 e8 00 00 	ld.d	r8,r11[0]
8000066c:	f4 e9 00 00 	st.d	r10[0],r8
80000670:	f6 e8 00 08 	ld.d	r8,r11[8]
80000674:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000678:	30 48       	mov	r8,4
8000067a:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
8000067e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000682:	20 18       	sub	r8,1
80000684:	a3 68       	lsl	r8,0x2
80000686:	ee 08 00 08 	add	r8,r7,r8
8000068a:	f0 f9 ff e8 	ld.w	r9,r8[-24]
8000068e:	e0 68 1b 00 	mov	r8,6912
80000692:	ea 18 00 b7 	orh	r8,0xb7
80000696:	f0 09 0c 08 	divs	r8,r8,r9
8000069a:	10 99       	mov	r9,r8
8000069c:	ee f8 ff e4 	ld.w	r8,r7[-28]
800006a0:	b1 39       	mul	r9,r8
800006a2:	e0 68 4d d3 	mov	r8,19923
800006a6:	ea 18 10 62 	orh	r8,0x1062
800006aa:	f2 08 06 48 	mulu.d	r8,r9,r8
800006ae:	f2 08 16 06 	lsr	r8,r9,0x6
800006b2:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
800006b6:	ee fc ff fc 	ld.w	r12,r7[-4]
800006ba:	f0 1f 00 0f 	mcall	800006f4 <timerPeriodSet+0xa0>
	timerRCSet(rc);
800006be:	ee fc ff f8 	ld.w	r12,r7[-8]
800006c2:	f0 1f 00 0e 	mcall	800006f8 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
800006c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800006ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006ce:	f2 08 02 4a 	mul	r10,r9,r8
800006d2:	e0 68 9f 81 	mov	r8,40833
800006d6:	ea 18 16 5e 	orh	r8,0x165e
800006da:	f4 08 04 48 	muls.d	r8,r10,r8
800006de:	b5 49       	asr	r9,0x14
800006e0:	f4 08 14 1f 	asr	r8,r10,0x1f
800006e4:	f2 08 01 08 	sub	r8,r9,r8
}
800006e8:	10 9c       	mov	r12,r8
800006ea:	2f 9d       	sub	sp,-28
800006ec:	e3 cd 80 80 	ldm	sp++,r7,pc
800006f0:	80 00       	ld.sh	r0,r0[0x0]
800006f2:	06 20       	rsub	r0,r3
800006f4:	80 00       	ld.sh	r0,r0[0x0]
800006f6:	0c f0       	st.b	--r6,r0
800006f8:	80 00       	ld.sh	r0,r0[0x0]
800006fa:	0c da       	st.w	--r6,r10

800006fc <buttonInit>:
800006fc:	eb cd 40 80 	pushm	r7,lr
80000700:	1a 97       	mov	r7,sp
80000702:	30 1b       	mov	r11,1
80000704:	35 8c       	mov	r12,88
80000706:	f0 1f 00 07 	mcall	80000720 <buttonInit+0x24>
8000070a:	30 1b       	mov	r11,1
8000070c:	35 5c       	mov	r12,85
8000070e:	f0 1f 00 05 	mcall	80000720 <buttonInit+0x24>
80000712:	30 1b       	mov	r11,1
80000714:	35 2c       	mov	r12,82
80000716:	f0 1f 00 03 	mcall	80000720 <buttonInit+0x24>
8000071a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000071e:	00 00       	add	r0,r0
80000720:	80 00       	ld.sh	r0,r0[0x0]
80000722:	07 90       	ld.ub	r0,r3[0x1]

80000724 <joystickInit>:
80000724:	eb cd 40 80 	pushm	r7,lr
80000728:	1a 97       	mov	r7,sp
8000072a:	30 1b       	mov	r11,1
8000072c:	31 bc       	mov	r12,27
8000072e:	f0 1f 00 0b 	mcall	80000758 <joystickInit+0x34>
80000732:	30 1b       	mov	r11,1
80000734:	31 9c       	mov	r12,25
80000736:	f0 1f 00 09 	mcall	80000758 <joystickInit+0x34>
8000073a:	30 1b       	mov	r11,1
8000073c:	31 cc       	mov	r12,28
8000073e:	f0 1f 00 07 	mcall	80000758 <joystickInit+0x34>
80000742:	30 1b       	mov	r11,1
80000744:	31 4c       	mov	r12,20
80000746:	f0 1f 00 05 	mcall	80000758 <joystickInit+0x34>
8000074a:	30 1b       	mov	r11,1
8000074c:	31 ac       	mov	r12,26
8000074e:	f0 1f 00 03 	mcall	80000758 <joystickInit+0x34>
80000752:	e3 cd 80 80 	ldm	sp++,r7,pc
80000756:	00 00       	add	r0,r0
80000758:	80 00       	ld.sh	r0,r0[0x0]
8000075a:	07 90       	ld.ub	r0,r3[0x1]

8000075c <delay_ms>:
8000075c:	eb cd 40 80 	pushm	r7,lr
80000760:	1a 97       	mov	r7,sp
80000762:	20 2d       	sub	sp,8
80000764:	ef 4c ff f8 	st.w	r7[-8],r12
80000768:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000076c:	e0 69 04 42 	mov	r9,1090
80000770:	b3 38       	mul	r8,r9
80000772:	ef 48 ff fc 	st.w	r7[-4],r8
80000776:	c0 68       	rjmp	80000782 <delay_ms+0x26>
80000778:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000077c:	20 18       	sub	r8,1
8000077e:	ef 48 ff fc 	st.w	r7[-4],r8
80000782:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000786:	58 08       	cp.w	r8,0
80000788:	cf 81       	brne	80000778 <delay_ms+0x1c>
8000078a:	2f ed       	sub	sp,-8
8000078c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000790 <gpioInit>:
80000790:	eb cd 40 80 	pushm	r7,lr
80000794:	1a 97       	mov	r7,sp
80000796:	20 7d       	sub	sp,28
80000798:	ef 4c ff ec 	st.w	r7[-20],r12
8000079c:	ef 4b ff e8 	st.w	r7[-24],r11
800007a0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800007a4:	a5 58       	asr	r8,0x5
800007a6:	ef 48 ff f4 	st.w	r7[-12],r8
800007aa:	ee f8 ff ec 	ld.w	r8,r7[-20]
800007ae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800007b2:	ef 48 ff fc 	st.w	r7[-4],r8
800007b6:	30 19       	mov	r9,1
800007b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007bc:	f2 08 09 48 	lsl	r8,r9,r8
800007c0:	ef 48 ff f8 	st.w	r7[-8],r8
800007c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800007c8:	a9 68       	lsl	r8,0x8
800007ca:	e0 28 f0 00 	sub	r8,61440
800007ce:	ef 48 ff f0 	st.w	r7[-16],r8
800007d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800007d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800007da:	91 19       	st.w	r8[0x4],r9
800007dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800007e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800007e4:	91 69       	st.w	r8[0x18],r9
800007e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800007ea:	ee f8 ff f0 	ld.w	r8,r7[-16]
800007ee:	91 a9       	st.w	r8[0x28],r9
800007f0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800007f4:	ef 48 ff e4 	st.w	r7[-28],r8
800007f8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800007fc:	58 08       	cp.w	r8,0
800007fe:	c0 60       	breq	8000080a <gpioInit+0x7a>
80000800:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000804:	58 18       	cp.w	r8,1
80000806:	c0 90       	breq	80000818 <gpioInit+0x88>
80000808:	c0 f8       	rjmp	80000826 <gpioInit+0x96>
8000080a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000080e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000812:	f1 49 00 44 	st.w	r8[68],r9
80000816:	c0 e8       	rjmp	80000832 <gpioInit+0xa2>
80000818:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000081c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000820:	f1 49 00 48 	st.w	r8[72],r9
80000824:	c0 78       	rjmp	80000832 <gpioInit+0xa2>
80000826:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000082a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000082e:	f1 49 00 48 	st.w	r8[72],r9
80000832:	2f 9d       	sub	sp,-28
80000834:	e3 cd 80 80 	ldm	sp++,r7,pc

80000838 <gpioClear>:
80000838:	eb cd 40 80 	pushm	r7,lr
8000083c:	1a 97       	mov	r7,sp
8000083e:	20 5d       	sub	sp,20
80000840:	ef 4c ff ec 	st.w	r7[-20],r12
80000844:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000848:	a5 58       	asr	r8,0x5
8000084a:	ef 48 ff f4 	st.w	r7[-12],r8
8000084e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000852:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000856:	ef 48 ff fc 	st.w	r7[-4],r8
8000085a:	30 19       	mov	r9,1
8000085c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000860:	f2 08 09 48 	lsl	r8,r9,r8
80000864:	ef 48 ff f8 	st.w	r7[-8],r8
80000868:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000086c:	a9 68       	lsl	r8,0x8
8000086e:	e0 28 f0 00 	sub	r8,61440
80000872:	ef 48 ff f0 	st.w	r7[-16],r8
80000876:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000087a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000087e:	f1 49 00 58 	st.w	r8[88],r9
80000882:	2f bd       	sub	sp,-20
80000884:	e3 cd 80 80 	ldm	sp++,r7,pc

80000888 <gpioSet>:
80000888:	eb cd 40 80 	pushm	r7,lr
8000088c:	1a 97       	mov	r7,sp
8000088e:	20 5d       	sub	sp,20
80000890:	ef 4c ff ec 	st.w	r7[-20],r12
80000894:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000898:	a5 58       	asr	r8,0x5
8000089a:	ef 48 ff f4 	st.w	r7[-12],r8
8000089e:	ee f8 ff ec 	ld.w	r8,r7[-20]
800008a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800008a6:	ef 48 ff fc 	st.w	r7[-4],r8
800008aa:	30 19       	mov	r9,1
800008ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008b0:	f2 08 09 48 	lsl	r8,r9,r8
800008b4:	ef 48 ff f8 	st.w	r7[-8],r8
800008b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008bc:	a9 68       	lsl	r8,0x8
800008be:	e0 28 f0 00 	sub	r8,61440
800008c2:	ef 48 ff f0 	st.w	r7[-16],r8
800008c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800008ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800008ce:	f1 49 00 54 	st.w	r8[84],r9
800008d2:	2f bd       	sub	sp,-20
800008d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800008d8 <ledInit>:
800008d8:	eb cd 40 80 	pushm	r7,lr
800008dc:	1a 97       	mov	r7,sp
800008de:	20 9d       	sub	sp,36
800008e0:	49 e8       	lddpc	r8,80000958 <ledInit+0x80>
800008e2:	ee cb 00 24 	sub	r11,r7,36
800008e6:	10 9a       	mov	r10,r8
800008e8:	f4 e8 00 00 	ld.d	r8,r10[0]
800008ec:	f6 e9 00 00 	st.d	r11[0],r8
800008f0:	f4 e8 00 08 	ld.d	r8,r10[8]
800008f4:	f6 e9 00 08 	st.d	r11[8],r8
800008f8:	f4 e8 00 10 	ld.d	r8,r10[16]
800008fc:	f6 e9 00 10 	st.d	r11[16],r8
80000900:	f4 e8 00 18 	ld.d	r8,r10[24]
80000904:	f6 e9 00 18 	st.d	r11[24],r8
80000908:	30 08       	mov	r8,0
8000090a:	ef 48 ff fc 	st.w	r7[-4],r8
8000090e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000912:	a3 68       	lsl	r8,0x2
80000914:	ee 08 00 08 	add	r8,r7,r8
80000918:	f0 f8 ff dc 	ld.w	r8,r8[-36]
8000091c:	10 9c       	mov	r12,r8
8000091e:	f0 1f 00 10 	mcall	8000095c <ledInit+0x84>
80000922:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000926:	a3 68       	lsl	r8,0x2
80000928:	ee 08 00 08 	add	r8,r7,r8
8000092c:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000930:	30 0b       	mov	r11,0
80000932:	10 9c       	mov	r12,r8
80000934:	f0 1f 00 0b 	mcall	80000960 <ledInit+0x88>
80000938:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000093c:	58 78       	cp.w	r8,7
8000093e:	5f 18       	srne	r8
80000940:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000944:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000948:	2f f8       	sub	r8,-1
8000094a:	ef 48 ff fc 	st.w	r7[-4],r8
8000094e:	58 09       	cp.w	r9,0
80000950:	cd f1       	brne	8000090e <ledInit+0x36>
80000952:	2f 7d       	sub	sp,-36
80000954:	e3 cd 80 80 	ldm	sp++,r7,pc
80000958:	80 00       	ld.sh	r0,r0[0x0]
8000095a:	1a 00       	add	r0,sp
8000095c:	80 00       	ld.sh	r0,r0[0x0]
8000095e:	09 84       	ld.ub	r4,r4[0x0]
80000960:	80 00       	ld.sh	r0,r0[0x0]
80000962:	07 90       	ld.ub	r0,r3[0x1]

80000964 <ledOn>:
80000964:	eb cd 40 80 	pushm	r7,lr
80000968:	1a 97       	mov	r7,sp
8000096a:	20 1d       	sub	sp,4
8000096c:	ef 4c ff fc 	st.w	r7[-4],r12
80000970:	ee fc ff fc 	ld.w	r12,r7[-4]
80000974:	f0 1f 00 03 	mcall	80000980 <ledOn+0x1c>
80000978:	2f fd       	sub	sp,-4
8000097a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000097e:	00 00       	add	r0,r0
80000980:	80 00       	ld.sh	r0,r0[0x0]
80000982:	08 38       	cp.w	r8,r4

80000984 <ledOff>:
80000984:	eb cd 40 80 	pushm	r7,lr
80000988:	1a 97       	mov	r7,sp
8000098a:	20 1d       	sub	sp,4
8000098c:	ef 4c ff fc 	st.w	r7[-4],r12
80000990:	ee fc ff fc 	ld.w	r12,r7[-4]
80000994:	f0 1f 00 03 	mcall	800009a0 <ledOff+0x1c>
80000998:	2f fd       	sub	sp,-4
8000099a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000099e:	00 00       	add	r0,r0
800009a0:	80 00       	ld.sh	r0,r0[0x0]
800009a2:	08 88       	andn	r8,r4

800009a4 <potInit>:
800009a4:	d3 01       	pushm	r11-r12
800009a6:	e0 6c 10 00 	mov	r12,4096
800009aa:	ea 1c ff ff 	orh	r12,0xffff
800009ae:	31 6b       	mov	r11,22
800009b0:	99 2b       	st.w	r12[0x8],r11
800009b2:	99 6b       	st.w	r12[0x18],r11
800009b4:	99 6b       	st.w	r12[0x18],r11
800009b6:	e0 6c 3c 00 	mov	r12,15360
800009ba:	ea 1c ff ff 	orh	r12,0xffff
800009be:	30 1b       	mov	r11,1
800009c0:	99 0b       	st.w	r12[0x0],r11
800009c2:	e0 6b 0f 1f 	mov	r11,3871
800009c6:	b1 6b       	lsl	r11,0x10
800009c8:	99 1b       	st.w	r12[0x4],r11
800009ca:	30 2b       	mov	r11,2
800009cc:	99 4b       	st.w	r12[0x10],r11
800009ce:	d3 02       	popm	r11-r12
800009d0:	1c 9f       	mov	pc,lr

800009d2 <potGetValue>:
800009d2:	d1 81       	pushm	r10-r11
800009d4:	e0 6c 3c 00 	mov	r12,15360
800009d8:	ea 1c ff ff 	orh	r12,0xffff
800009dc:	30 2b       	mov	r11,2
800009de:	99 0b       	st.w	r12[0x0],r11

800009e0 <a1>:
800009e0:	78 7a       	ld.w	r10,r12[0x1c]
800009e2:	16 7a       	tst	r10,r11
800009e4:	cf e0       	breq	800009e0 <a1>
800009e6:	78 dc       	ld.w	r12,r12[0x34]
800009e8:	d1 82       	popm	r10-r11
800009ea:	1c 9f       	mov	pc,lr

800009ec <usartReset>:
800009ec:	eb cd 40 80 	pushm	r7,lr
800009f0:	1a 97       	mov	r7,sp
800009f2:	20 3d       	sub	sp,12
800009f4:	ef 4c ff f8 	st.w	r7[-8],r12
800009f8:	f0 1f 00 16 	mcall	80000a50 <usartReset+0x64>
800009fc:	18 98       	mov	r8,r12
800009fe:	ef 48 ff fc 	st.w	r7[-4],r8
80000a02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a06:	58 08       	cp.w	r8,0
80000a08:	c0 30       	breq	80000a0e <usartReset+0x22>
80000a0a:	f0 1f 00 13 	mcall	80000a54 <usartReset+0x68>
80000a0e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a12:	3f f8       	mov	r8,-1
80000a14:	93 38       	st.w	r9[0xc],r8
80000a16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a1a:	70 58       	ld.w	r8,r8[0x14]
80000a1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a20:	58 08       	cp.w	r8,0
80000a22:	c0 30       	breq	80000a28 <usartReset+0x3c>
80000a24:	f0 1f 00 0d 	mcall	80000a58 <usartReset+0x6c>
80000a28:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a2c:	30 08       	mov	r8,0
80000a2e:	93 18       	st.w	r9[0x4],r8
80000a30:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a34:	30 08       	mov	r8,0
80000a36:	93 98       	st.w	r9[0x24],r8
80000a38:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a3c:	30 08       	mov	r8,0
80000a3e:	93 a8       	st.w	r9[0x28],r8
80000a40:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a44:	ea 68 61 0c 	mov	r8,680204
80000a48:	93 08       	st.w	r9[0x0],r8
80000a4a:	2f dd       	sub	sp,-12
80000a4c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a50:	80 00       	ld.sh	r0,r0[0x0]
80000a52:	17 6e       	ld.uh	lr,--r11
80000a54:	80 00       	ld.sh	r0,r0[0x0]
80000a56:	17 66       	ld.uh	r6,--r11
80000a58:	80 00       	ld.sh	r0,r0[0x0]
80000a5a:	17 6a       	ld.uh	r10,--r11

80000a5c <usartSetBaudrate>:
80000a5c:	eb cd 40 80 	pushm	r7,lr
80000a60:	1a 97       	mov	r7,sp
80000a62:	20 bd       	sub	sp,44
80000a64:	ef 4c ff ec 	st.w	r7[-20],r12
80000a68:	ef 4b ff e8 	st.w	r7[-24],r11
80000a6c:	ef 4a ff e4 	st.w	r7[-28],r10
80000a70:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000a74:	f0 09 15 04 	lsl	r9,r8,0x4
80000a78:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000a7c:	10 39       	cp.w	r9,r8
80000a7e:	e0 8b 00 06 	brhi	80000a8a <usartSetBaudrate+0x2e>
80000a82:	31 09       	mov	r9,16
80000a84:	ef 49 ff d4 	st.w	r7[-44],r9
80000a88:	c0 48       	rjmp	80000a90 <usartSetBaudrate+0x34>
80000a8a:	30 88       	mov	r8,8
80000a8c:	ef 48 ff d4 	st.w	r7[-44],r8
80000a90:	ee f9 ff d4 	ld.w	r9,r7[-44]
80000a94:	ef 49 ff f0 	st.w	r7[-16],r9
80000a98:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000a9c:	f0 0a 15 03 	lsl	r10,r8,0x3
80000aa0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000aa4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000aa8:	f2 08 02 48 	mul	r8,r9,r8
80000aac:	a1 98       	lsr	r8,0x1
80000aae:	10 0a       	add	r10,r8
80000ab0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000ab4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000ab8:	f2 08 02 48 	mul	r8,r9,r8
80000abc:	f4 08 0d 08 	divu	r8,r10,r8
80000ac0:	ef 48 ff f4 	st.w	r7[-12],r8
80000ac4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ac8:	a3 98       	lsr	r8,0x3
80000aca:	ef 48 ff f8 	st.w	r7[-8],r8
80000ace:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ad2:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000ad6:	ef 48 ff fc 	st.w	r7[-4],r8
80000ada:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ade:	58 08       	cp.w	r8,0
80000ae0:	c0 70       	breq	80000aee <usartSetBaudrate+0x92>
80000ae2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ae6:	e0 48 ff ff 	cp.w	r8,65535
80000aea:	e0 88 00 06 	brls	80000af6 <usartSetBaudrate+0x9a>
80000aee:	30 18       	mov	r8,1
80000af0:	ef 48 ff d8 	st.w	r7[-40],r8
80000af4:	c2 c8       	rjmp	80000b4c <usartSetBaudrate+0xf0>
80000af6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000afa:	70 18       	ld.w	r8,r8[0x4]
80000afc:	10 99       	mov	r9,r8
80000afe:	e4 19 ff f7 	andh	r9,0xfff7
80000b02:	e0 19 fe cf 	andl	r9,0xfecf
80000b06:	ef 49 ff dc 	st.w	r7[-36],r9
80000b0a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000b0e:	59 08       	cp.w	r8,16
80000b10:	c0 60       	breq	80000b1c <usartSetBaudrate+0xc0>
80000b12:	e8 68 00 00 	mov	r8,524288
80000b16:	ef 48 ff e0 	st.w	r7[-32],r8
80000b1a:	c0 48       	rjmp	80000b22 <usartSetBaudrate+0xc6>
80000b1c:	30 09       	mov	r9,0
80000b1e:	ef 49 ff e0 	st.w	r7[-32],r9
80000b22:	ee f9 ff dc 	ld.w	r9,r7[-36]
80000b26:	ee f8 ff e0 	ld.w	r8,r7[-32]
80000b2a:	10 49       	or	r9,r8
80000b2c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000b30:	91 19       	st.w	r8[0x4],r9
80000b32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b36:	f0 09 15 10 	lsl	r9,r8,0x10
80000b3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b3e:	10 49       	or	r9,r8
80000b40:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000b44:	91 89       	st.w	r8[0x20],r9
80000b46:	30 09       	mov	r9,0
80000b48:	ef 49 ff d8 	st.w	r7[-40],r9
80000b4c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80000b50:	10 9c       	mov	r12,r8
80000b52:	2f 5d       	sub	sp,-44
80000b54:	e3 cd 80 80 	ldm	sp++,r7,pc

80000b58 <usartInit>:
80000b58:	eb cd 40 80 	pushm	r7,lr
80000b5c:	1a 97       	mov	r7,sp
80000b5e:	20 4d       	sub	sp,16
80000b60:	ef 4c ff f8 	st.w	r7[-8],r12
80000b64:	ef 4b ff f4 	st.w	r7[-12],r11
80000b68:	ef 4a ff f0 	st.w	r7[-16],r10
80000b6c:	fe 78 10 00 	mov	r8,-61440
80000b70:	ef 48 ff fc 	st.w	r7[-4],r8
80000b74:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000b78:	30 18       	mov	r8,1
80000b7a:	93 28       	st.w	r9[0x8],r8
80000b7c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000b80:	30 28       	mov	r8,2
80000b82:	93 28       	st.w	r9[0x8],r8
80000b84:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b88:	f0 1f 00 3b 	mcall	80000c74 <usartInit+0x11c>
80000b8c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000b90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b94:	70 08       	ld.w	r8,r8[0x0]
80000b96:	12 9a       	mov	r10,r9
80000b98:	10 9b       	mov	r11,r8
80000b9a:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b9e:	f0 1f 00 37 	mcall	80000c78 <usartInit+0x120>
80000ba2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ba6:	11 c9       	ld.ub	r9,r8[0x4]
80000ba8:	30 98       	mov	r8,9
80000baa:	f0 09 18 00 	cp.b	r9,r8
80000bae:	c0 a1       	brne	80000bc2 <usartInit+0x6a>
80000bb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bb4:	70 18       	ld.w	r8,r8[0x4]
80000bb6:	10 99       	mov	r9,r8
80000bb8:	b1 b9       	sbr	r9,0x11
80000bba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bbe:	91 19       	st.w	r8[0x4],r9
80000bc0:	c0 d8       	rjmp	80000bda <usartInit+0x82>
80000bc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bc6:	70 19       	ld.w	r9,r8[0x4]
80000bc8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bcc:	11 c8       	ld.ub	r8,r8[0x4]
80000bce:	20 58       	sub	r8,5
80000bd0:	a7 68       	lsl	r8,0x6
80000bd2:	10 49       	or	r9,r8
80000bd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bd8:	91 19       	st.w	r8[0x4],r9
80000bda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bde:	70 1a       	ld.w	r10,r8[0x4]
80000be0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000be4:	11 d8       	ld.ub	r8,r8[0x5]
80000be6:	f0 09 15 09 	lsl	r9,r8,0x9
80000bea:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bee:	f1 38 00 08 	ld.ub	r8,r8[8]
80000bf2:	af 68       	lsl	r8,0xe
80000bf4:	f3 e8 10 08 	or	r8,r9,r8
80000bf8:	f5 e8 10 09 	or	r9,r10,r8
80000bfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c00:	91 19       	st.w	r8[0x4],r9
80000c02:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c06:	90 39       	ld.sh	r9,r8[0x6]
80000c08:	30 28       	mov	r8,2
80000c0a:	f0 09 19 00 	cp.h	r9,r8
80000c0e:	e0 88 00 14 	brls	80000c36 <usartInit+0xde>
80000c12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c16:	70 18       	ld.w	r8,r8[0x4]
80000c18:	10 99       	mov	r9,r8
80000c1a:	ad b9       	sbr	r9,0xd
80000c1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c20:	91 19       	st.w	r8[0x4],r9
80000c22:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c26:	90 38       	ld.sh	r8,r8[0x6]
80000c28:	5c 78       	castu.h	r8
80000c2a:	20 28       	sub	r8,2
80000c2c:	10 99       	mov	r9,r8
80000c2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c32:	91 a9       	st.w	r8[0x28],r9
80000c34:	c0 d8       	rjmp	80000c4e <usartInit+0xf6>
80000c36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c3a:	70 19       	ld.w	r9,r8[0x4]
80000c3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c40:	90 38       	ld.sh	r8,r8[0x6]
80000c42:	5c 78       	castu.h	r8
80000c44:	ad 68       	lsl	r8,0xc
80000c46:	10 49       	or	r9,r8
80000c48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c4c:	91 19       	st.w	r8[0x4],r9
80000c4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c52:	70 18       	ld.w	r8,r8[0x4]
80000c54:	10 99       	mov	r9,r8
80000c56:	e0 19 ff f0 	andl	r9,0xfff0
80000c5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c5e:	91 19       	st.w	r8[0x4],r9
80000c60:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c64:	35 08       	mov	r8,80
80000c66:	93 08       	st.w	r9[0x0],r8
80000c68:	30 08       	mov	r8,0
80000c6a:	10 9c       	mov	r12,r8
80000c6c:	2f cd       	sub	sp,-16
80000c6e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c72:	00 00       	add	r0,r0
80000c74:	80 00       	ld.sh	r0,r0[0x0]
80000c76:	09 ec       	ld.ub	r12,r4[0x6]
80000c78:	80 00       	ld.sh	r0,r0[0x0]
80000c7a:	0a 5c       	eor	r12,r5

80000c7c <timerInit>:
80000c7c:	d5 01       	pushm	r11,lr
80000c7e:	d2 01       	pushm	r12
80000c80:	f0 1f 00 28 	mcall	80000d20 <timerClearInterrupt+0x10>
80000c84:	f0 1f 00 28 	mcall	80000d24 <timerClearInterrupt+0x14>
80000c88:	e0 6c 38 00 	mov	r12,14336
80000c8c:	ea 1c ff ff 	orh	r12,0xffff
80000c90:	e0 6b c0 00 	mov	r11,49152
80000c94:	ea 1b 00 00 	orh	r11,0x0
80000c98:	99 1b       	st.w	r12[0x4],r11
80000c9a:	30 1b       	mov	r11,1
80000c9c:	a5 6b       	lsl	r11,0x4
80000c9e:	99 9b       	st.w	r12[0x24],r11
80000ca0:	d2 02       	popm	r12
80000ca2:	f0 1f 00 22 	mcall	80000d28 <timerClearInterrupt+0x18>
80000ca6:	d5 02       	popm	r11,lr
80000ca8:	1c 9f       	mov	pc,lr

80000caa <timerReset>:
80000caa:	d3 01       	pushm	r11-r12
80000cac:	e0 6c 38 00 	mov	r12,14336
80000cb0:	ea 1c ff ff 	orh	r12,0xffff
80000cb4:	30 5b       	mov	r11,5
80000cb6:	99 0b       	st.w	r12[0x0],r11
80000cb8:	e0 6b 00 08 	mov	r11,8
80000cbc:	ea 1b 00 00 	orh	r11,0x0
80000cc0:	76 0b       	ld.w	r11,r11[0x0]
80000cc2:	99 7b       	st.w	r12[0x1c],r11
80000cc4:	d3 02       	popm	r11-r12
80000cc6:	1c 9f       	mov	pc,lr

80000cc8 <timerStop>:
80000cc8:	d3 01       	pushm	r11-r12
80000cca:	e0 6c 38 00 	mov	r12,14336
80000cce:	ea 1c ff ff 	orh	r12,0xffff
80000cd2:	30 2b       	mov	r11,2
80000cd4:	99 0b       	st.w	r12[0x0],r11
80000cd6:	d3 02       	popm	r11-r12
80000cd8:	1c 9f       	mov	pc,lr

80000cda <timerRCSet>:
80000cda:	d3 01       	pushm	r11-r12
80000cdc:	49 4b       	lddpc	r11,80000d2c <timerClearInterrupt+0x1c>
80000cde:	97 0c       	st.w	r11[0x0],r12
80000ce0:	e0 6c 38 00 	mov	r12,14336
80000ce4:	ea 1c ff ff 	orh	r12,0xffff
80000ce8:	76 0b       	ld.w	r11,r11[0x0]
80000cea:	99 7b       	st.w	r12[0x1c],r11
80000cec:	d3 02       	popm	r11-r12
80000cee:	1c 9f       	mov	pc,lr

80000cf0 <timerPrescaleSet>:
80000cf0:	d3 81       	pushm	r10-r12
80000cf2:	49 0b       	lddpc	r11,80000d30 <timerClearInterrupt+0x20>
80000cf4:	97 0c       	st.w	r11[0x0],r12
80000cf6:	e0 6c 38 00 	mov	r12,14336
80000cfa:	ea 1c ff ff 	orh	r12,0xffff
80000cfe:	78 1a       	ld.w	r10,r12[0x4]
80000d00:	3f 8b       	mov	r11,-8
80000d02:	16 6a       	and	r10,r11
80000d04:	48 bb       	lddpc	r11,80000d30 <timerClearInterrupt+0x20>
80000d06:	76 0b       	ld.w	r11,r11[0x0]
80000d08:	14 4b       	or	r11,r10
80000d0a:	99 1b       	st.w	r12[0x4],r11
80000d0c:	d3 82       	popm	r10-r12
80000d0e:	1c 9f       	mov	pc,lr

80000d10 <timerClearInterrupt>:
80000d10:	d2 01       	pushm	r12
80000d12:	e0 6c 38 00 	mov	r12,14336
80000d16:	ea 1c ff ff 	orh	r12,0xffff
80000d1a:	78 8c       	ld.w	r12,r12[0x20]
80000d1c:	d2 02       	popm	r12
80000d1e:	1c 9f       	mov	pc,lr
80000d20:	80 00       	ld.sh	r0,r0[0x0]
80000d22:	17 66       	ld.uh	r6,--r11
80000d24:	80 00       	ld.sh	r0,r0[0x0]
80000d26:	0d 10       	ld.sh	r0,r6++
80000d28:	80 00       	ld.sh	r0,r0[0x0]
80000d2a:	06 54       	eor	r4,r3
80000d2c:	00 00       	add	r0,r0
80000d2e:	00 08       	add	r8,r0
80000d30:	00 00       	add	r0,r0
80000d32:	00 0c       	add	r12,r0

80000d34 <_stext>:
80000d34:	49 7d       	lddpc	sp,80000d90 <udata_end+0x4>
80000d36:	49 80       	lddpc	r0,80000d94 <udata_end+0x8>
80000d38:	1a d0       	st.w	--sp,r0
80000d3a:	e5 cd 20 00 	ldmts	sp,sp
80000d3e:	1b 00       	ld.w	r0,sp++
80000d40:	49 60       	lddpc	r0,80000d98 <udata_end+0xc>
80000d42:	e3 b0 00 01 	mtsr	0x4,r0
80000d46:	d5 53       	csrf	0x15
80000d48:	e0 6c 0c 00 	mov	r12,3072
80000d4c:	ea 1c ff ff 	orh	r12,0xffff
80000d50:	e0 6b 01 07 	mov	r11,263
80000d54:	99 ab       	st.w	r12[0x28],r11
80000d56:	30 4b       	mov	r11,4
80000d58:	99 0b       	st.w	r12[0x0],r11
80000d5a:	e0 6a 00 80 	mov	r10,128

80000d5e <xw8>:
80000d5e:	79 5b       	ld.w	r11,r12[0x54]
80000d60:	14 7b       	tst	r11,r10
80000d62:	cf e0       	breq	80000d5e <xw8>
80000d64:	30 5b       	mov	r11,5
80000d66:	99 0b       	st.w	r12[0x0],r11

80000d68 <idata_>:
80000d68:	48 d0       	lddpc	r0,80000d9c <udata_end+0x10>
80000d6a:	48 e1       	lddpc	r1,80000da0 <udata_end+0x14>
80000d6c:	02 30       	cp.w	r0,r1
80000d6e:	c0 62       	brcc	80000d7a <idata_end>
80000d70:	48 d2       	lddpc	r2,80000da4 <udata_end+0x18>

80000d72 <idata_loop>:
80000d72:	05 04       	ld.w	r4,r2++
80000d74:	00 a4       	st.w	r0++,r4
80000d76:	02 30       	cp.w	r0,r1
80000d78:	cf d3       	brcs	80000d72 <idata_loop>

80000d7a <idata_end>:
80000d7a:	48 c0       	lddpc	r0,80000da8 <udata_end+0x1c>
80000d7c:	48 c1       	lddpc	r1,80000dac <udata_end+0x20>
80000d7e:	02 30       	cp.w	r0,r1
80000d80:	c0 62       	brcc	80000d8c <udata_end>
80000d82:	30 02       	mov	r2,0
80000d84:	30 03       	mov	r3,0

80000d86 <udata_loop>:
80000d86:	00 a2       	st.w	r0++,r2
80000d88:	02 30       	cp.w	r0,r1
80000d8a:	cf e3       	brcs	80000d86 <udata_loop>

80000d8c <udata_end>:
80000d8c:	48 9f       	lddpc	pc,80000db0 <udata_end+0x24>
80000d8e:	00 00       	add	r0,r0
80000d90:	00 01       	add	r1,r0
80000d92:	00 00       	add	r0,r0
80000d94:	00 00       	add	r0,r0
80000d96:	f0 00       	*unknown*
80000d98:	80 00       	ld.sh	r0,r0[0x0]
80000d9a:	16 00       	add	r0,r11
80000d9c:	00 00       	add	r0,r0
80000d9e:	00 08       	add	r8,r0
80000da0:	00 00       	add	r0,r0
80000da2:	05 18       	ld.sh	r8,r2++
80000da4:	80 00       	ld.sh	r0,r0[0x0]
80000da6:	1a 88       	andn	r8,sp
80000da8:	00 00       	add	r0,r0
80000daa:	05 18       	ld.sh	r8,r2++
80000dac:	00 00       	add	r0,r0
80000dae:	05 a8       	ld.ub	r8,r2[0x2]
80000db0:	80 00       	ld.sh	r0,r0[0x0]
80000db2:	01 7c       	ld.ub	r12,--r0

80000db4 <calloc>:
80000db4:	d4 01       	pushm	lr
80000db6:	48 48       	lddpc	r8,80000dc4 <calloc+0x10>
80000db8:	16 9a       	mov	r10,r11
80000dba:	18 9b       	mov	r11,r12
80000dbc:	70 0c       	ld.w	r12,r8[0x0]
80000dbe:	f0 1f 00 03 	mcall	80000dc8 <calloc+0x14>
80000dc2:	d8 02       	popm	pc
80000dc4:	00 00       	add	r0,r0
80000dc6:	01 00       	ld.w	r0,r0++
80000dc8:	80 00       	ld.sh	r0,r0[0x0]
80000dca:	0d cc       	ld.ub	r12,r6[0x4]

80000dcc <_calloc_r>:
80000dcc:	d4 21       	pushm	r4-r7,lr
80000dce:	f4 0b 02 4b 	mul	r11,r10,r11
80000dd2:	f0 1f 00 15 	mcall	80000e24 <_calloc_r+0x58>
80000dd6:	18 97       	mov	r7,r12
80000dd8:	c2 30       	breq	80000e1e <_calloc_r+0x52>
80000dda:	f8 fa ff fc 	ld.w	r10,r12[-4]
80000dde:	e0 1a ff fc 	andl	r10,0xfffc
80000de2:	20 4a       	sub	r10,4
80000de4:	e0 4a 00 24 	cp.w	r10,36
80000de8:	e0 8b 00 18 	brhi	80000e18 <_calloc_r+0x4c>
80000dec:	18 98       	mov	r8,r12
80000dee:	59 3a       	cp.w	r10,19
80000df0:	e0 88 00 0f 	brls	80000e0e <_calloc_r+0x42>
80000df4:	30 09       	mov	r9,0
80000df6:	10 a9       	st.w	r8++,r9
80000df8:	10 a9       	st.w	r8++,r9
80000dfa:	59 ba       	cp.w	r10,27
80000dfc:	e0 88 00 09 	brls	80000e0e <_calloc_r+0x42>
80000e00:	10 a9       	st.w	r8++,r9
80000e02:	10 a9       	st.w	r8++,r9
80000e04:	e0 4a 00 24 	cp.w	r10,36
80000e08:	c0 31       	brne	80000e0e <_calloc_r+0x42>
80000e0a:	10 a9       	st.w	r8++,r9
80000e0c:	10 a9       	st.w	r8++,r9
80000e0e:	30 09       	mov	r9,0
80000e10:	10 a9       	st.w	r8++,r9
80000e12:	91 19       	st.w	r8[0x4],r9
80000e14:	91 09       	st.w	r8[0x0],r9
80000e16:	c0 48       	rjmp	80000e1e <_calloc_r+0x52>
80000e18:	30 0b       	mov	r11,0
80000e1a:	f0 1f 00 04 	mcall	80000e28 <_calloc_r+0x5c>
80000e1e:	0e 9c       	mov	r12,r7
80000e20:	d8 22       	popm	r4-r7,pc
80000e22:	00 00       	add	r0,r0
80000e24:	80 00       	ld.sh	r0,r0[0x0]
80000e26:	0e 44       	or	r4,r7
80000e28:	80 00       	ld.sh	r0,r0[0x0]
80000e2a:	12 94       	mov	r4,r9

80000e2c <malloc>:
80000e2c:	d4 01       	pushm	lr
80000e2e:	48 48       	lddpc	r8,80000e3c <malloc+0x10>
80000e30:	18 9b       	mov	r11,r12
80000e32:	70 0c       	ld.w	r12,r8[0x0]
80000e34:	f0 1f 00 03 	mcall	80000e40 <malloc+0x14>
80000e38:	d8 02       	popm	pc
80000e3a:	00 00       	add	r0,r0
80000e3c:	00 00       	add	r0,r0
80000e3e:	01 00       	ld.w	r0,r0++
80000e40:	80 00       	ld.sh	r0,r0[0x0]
80000e42:	0e 44       	or	r4,r7

80000e44 <_malloc_r>:
80000e44:	d4 31       	pushm	r0-r7,lr
80000e46:	f6 c8 ff f5 	sub	r8,r11,-11
80000e4a:	18 95       	mov	r5,r12
80000e4c:	10 97       	mov	r7,r8
80000e4e:	e0 17 ff f8 	andl	r7,0xfff8
80000e52:	59 68       	cp.w	r8,22
80000e54:	f9 b7 08 10 	movls	r7,16
80000e58:	16 37       	cp.w	r7,r11
80000e5a:	5f 38       	srlo	r8
80000e5c:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80000e60:	c0 50       	breq	80000e6a <_malloc_r+0x26>
80000e62:	30 c8       	mov	r8,12
80000e64:	99 38       	st.w	r12[0xc],r8
80000e66:	e0 8f 01 f3 	bral	8000124c <_malloc_r+0x408>
80000e6a:	f0 1f 00 50 	mcall	80000fa8 <_malloc_r+0x164>
80000e6e:	e0 47 01 f7 	cp.w	r7,503
80000e72:	e0 8b 00 1c 	brhi	80000eaa <_malloc_r+0x66>
80000e76:	ee 03 16 03 	lsr	r3,r7,0x3
80000e7a:	4c d8       	lddpc	r8,80000fac <_malloc_r+0x168>
80000e7c:	f0 03 00 38 	add	r8,r8,r3<<0x3
80000e80:	70 36       	ld.w	r6,r8[0xc]
80000e82:	10 36       	cp.w	r6,r8
80000e84:	c0 61       	brne	80000e90 <_malloc_r+0x4c>
80000e86:	ec c8 ff f8 	sub	r8,r6,-8
80000e8a:	70 36       	ld.w	r6,r8[0xc]
80000e8c:	10 36       	cp.w	r6,r8
80000e8e:	c0 c0       	breq	80000ea6 <_malloc_r+0x62>
80000e90:	6c 18       	ld.w	r8,r6[0x4]
80000e92:	e0 18 ff fc 	andl	r8,0xfffc
80000e96:	6c 3a       	ld.w	r10,r6[0xc]
80000e98:	ec 08 00 09 	add	r9,r6,r8
80000e9c:	0a 9c       	mov	r12,r5
80000e9e:	6c 28       	ld.w	r8,r6[0x8]
80000ea0:	95 28       	st.w	r10[0x8],r8
80000ea2:	91 3a       	st.w	r8[0xc],r10
80000ea4:	c4 68       	rjmp	80000f30 <_malloc_r+0xec>
80000ea6:	2f e3       	sub	r3,-2
80000ea8:	c4 c8       	rjmp	80000f40 <_malloc_r+0xfc>
80000eaa:	ee 03 16 09 	lsr	r3,r7,0x9
80000eae:	c0 41       	brne	80000eb6 <_malloc_r+0x72>
80000eb0:	ee 03 16 03 	lsr	r3,r7,0x3
80000eb4:	c2 68       	rjmp	80000f00 <_malloc_r+0xbc>
80000eb6:	58 43       	cp.w	r3,4
80000eb8:	e0 8b 00 06 	brhi	80000ec4 <_malloc_r+0x80>
80000ebc:	ee 03 16 06 	lsr	r3,r7,0x6
80000ec0:	2c 83       	sub	r3,-56
80000ec2:	c1 f8       	rjmp	80000f00 <_malloc_r+0xbc>
80000ec4:	59 43       	cp.w	r3,20
80000ec6:	e0 8b 00 04 	brhi	80000ece <_malloc_r+0x8a>
80000eca:	2a 53       	sub	r3,-91
80000ecc:	c1 a8       	rjmp	80000f00 <_malloc_r+0xbc>
80000ece:	e0 43 00 54 	cp.w	r3,84
80000ed2:	e0 8b 00 06 	brhi	80000ede <_malloc_r+0x9a>
80000ed6:	ee 03 16 0c 	lsr	r3,r7,0xc
80000eda:	29 23       	sub	r3,-110
80000edc:	c1 28       	rjmp	80000f00 <_malloc_r+0xbc>
80000ede:	e0 43 01 54 	cp.w	r3,340
80000ee2:	e0 8b 00 06 	brhi	80000eee <_malloc_r+0xaa>
80000ee6:	ee 03 16 0f 	lsr	r3,r7,0xf
80000eea:	28 93       	sub	r3,-119
80000eec:	c0 a8       	rjmp	80000f00 <_malloc_r+0xbc>
80000eee:	e0 43 05 54 	cp.w	r3,1364
80000ef2:	e0 88 00 04 	brls	80000efa <_malloc_r+0xb6>
80000ef6:	37 e3       	mov	r3,126
80000ef8:	c0 48       	rjmp	80000f00 <_malloc_r+0xbc>
80000efa:	ee 03 16 12 	lsr	r3,r7,0x12
80000efe:	28 43       	sub	r3,-124
80000f00:	4a ba       	lddpc	r10,80000fac <_malloc_r+0x168>
80000f02:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80000f06:	74 36       	ld.w	r6,r10[0xc]
80000f08:	c1 98       	rjmp	80000f3a <_malloc_r+0xf6>
80000f0a:	6c 19       	ld.w	r9,r6[0x4]
80000f0c:	e0 19 ff fc 	andl	r9,0xfffc
80000f10:	f2 07 01 0b 	sub	r11,r9,r7
80000f14:	58 fb       	cp.w	r11,15
80000f16:	e0 8a 00 04 	brle	80000f1e <_malloc_r+0xda>
80000f1a:	20 13       	sub	r3,1
80000f1c:	c1 18       	rjmp	80000f3e <_malloc_r+0xfa>
80000f1e:	6c 38       	ld.w	r8,r6[0xc]
80000f20:	58 0b       	cp.w	r11,0
80000f22:	c0 b5       	brlt	80000f38 <_malloc_r+0xf4>
80000f24:	6c 2a       	ld.w	r10,r6[0x8]
80000f26:	ec 09 00 09 	add	r9,r6,r9
80000f2a:	0a 9c       	mov	r12,r5
80000f2c:	91 2a       	st.w	r8[0x8],r10
80000f2e:	95 38       	st.w	r10[0xc],r8
80000f30:	72 18       	ld.w	r8,r9[0x4]
80000f32:	a1 a8       	sbr	r8,0x0
80000f34:	93 18       	st.w	r9[0x4],r8
80000f36:	cb c8       	rjmp	800010ae <_malloc_r+0x26a>
80000f38:	10 96       	mov	r6,r8
80000f3a:	14 36       	cp.w	r6,r10
80000f3c:	ce 71       	brne	80000f0a <_malloc_r+0xc6>
80000f3e:	2f f3       	sub	r3,-1
80000f40:	49 ba       	lddpc	r10,80000fac <_malloc_r+0x168>
80000f42:	f4 cc ff f8 	sub	r12,r10,-8
80000f46:	78 26       	ld.w	r6,r12[0x8]
80000f48:	18 36       	cp.w	r6,r12
80000f4a:	c6 e0       	breq	80001026 <_malloc_r+0x1e2>
80000f4c:	6c 19       	ld.w	r9,r6[0x4]
80000f4e:	e0 19 ff fc 	andl	r9,0xfffc
80000f52:	f2 07 01 08 	sub	r8,r9,r7
80000f56:	58 f8       	cp.w	r8,15
80000f58:	e0 89 00 90 	brgt	80001078 <_malloc_r+0x234>
80000f5c:	99 3c       	st.w	r12[0xc],r12
80000f5e:	99 2c       	st.w	r12[0x8],r12
80000f60:	58 08       	cp.w	r8,0
80000f62:	c0 55       	brlt	80000f6c <_malloc_r+0x128>
80000f64:	ec 09 00 09 	add	r9,r6,r9
80000f68:	0a 9c       	mov	r12,r5
80000f6a:	ce 3b       	rjmp	80000f30 <_malloc_r+0xec>
80000f6c:	e0 49 01 ff 	cp.w	r9,511
80000f70:	e0 8b 00 13 	brhi	80000f96 <_malloc_r+0x152>
80000f74:	a3 99       	lsr	r9,0x3
80000f76:	f4 09 00 38 	add	r8,r10,r9<<0x3
80000f7a:	70 2b       	ld.w	r11,r8[0x8]
80000f7c:	8d 38       	st.w	r6[0xc],r8
80000f7e:	8d 2b       	st.w	r6[0x8],r11
80000f80:	97 36       	st.w	r11[0xc],r6
80000f82:	91 26       	st.w	r8[0x8],r6
80000f84:	a3 49       	asr	r9,0x2
80000f86:	74 18       	ld.w	r8,r10[0x4]
80000f88:	30 1b       	mov	r11,1
80000f8a:	f6 09 09 49 	lsl	r9,r11,r9
80000f8e:	f1 e9 10 09 	or	r9,r8,r9
80000f92:	95 19       	st.w	r10[0x4],r9
80000f94:	c4 98       	rjmp	80001026 <_malloc_r+0x1e2>
80000f96:	f2 0a 16 09 	lsr	r10,r9,0x9
80000f9a:	58 4a       	cp.w	r10,4
80000f9c:	e0 8b 00 0a 	brhi	80000fb0 <_malloc_r+0x16c>
80000fa0:	f2 0a 16 06 	lsr	r10,r9,0x6
80000fa4:	2c 8a       	sub	r10,-56
80000fa6:	c2 38       	rjmp	80000fec <_malloc_r+0x1a8>
80000fa8:	80 00       	ld.sh	r0,r0[0x0]
80000faa:	12 a2       	st.w	r9++,r2
80000fac:	00 00       	add	r0,r0
80000fae:	01 04       	ld.w	r4,r0++
80000fb0:	59 4a       	cp.w	r10,20
80000fb2:	e0 8b 00 04 	brhi	80000fba <_malloc_r+0x176>
80000fb6:	2a 5a       	sub	r10,-91
80000fb8:	c1 a8       	rjmp	80000fec <_malloc_r+0x1a8>
80000fba:	e0 4a 00 54 	cp.w	r10,84
80000fbe:	e0 8b 00 06 	brhi	80000fca <_malloc_r+0x186>
80000fc2:	f2 0a 16 0c 	lsr	r10,r9,0xc
80000fc6:	29 2a       	sub	r10,-110
80000fc8:	c1 28       	rjmp	80000fec <_malloc_r+0x1a8>
80000fca:	e0 4a 01 54 	cp.w	r10,340
80000fce:	e0 8b 00 06 	brhi	80000fda <_malloc_r+0x196>
80000fd2:	f2 0a 16 0f 	lsr	r10,r9,0xf
80000fd6:	28 9a       	sub	r10,-119
80000fd8:	c0 a8       	rjmp	80000fec <_malloc_r+0x1a8>
80000fda:	e0 4a 05 54 	cp.w	r10,1364
80000fde:	e0 88 00 04 	brls	80000fe6 <_malloc_r+0x1a2>
80000fe2:	37 ea       	mov	r10,126
80000fe4:	c0 48       	rjmp	80000fec <_malloc_r+0x1a8>
80000fe6:	f2 0a 16 12 	lsr	r10,r9,0x12
80000fea:	28 4a       	sub	r10,-124
80000fec:	4c 8b       	lddpc	r11,8000110c <_malloc_r+0x2c8>
80000fee:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80000ff2:	68 28       	ld.w	r8,r4[0x8]
80000ff4:	08 38       	cp.w	r8,r4
80000ff6:	c0 e1       	brne	80001012 <_malloc_r+0x1ce>
80000ff8:	76 19       	ld.w	r9,r11[0x4]
80000ffa:	a3 4a       	asr	r10,0x2
80000ffc:	30 1e       	mov	lr,1
80000ffe:	fc 0a 09 4a 	lsl	r10,lr,r10
80001002:	f3 ea 10 0a 	or	r10,r9,r10
80001006:	10 99       	mov	r9,r8
80001008:	97 1a       	st.w	r11[0x4],r10
8000100a:	c0 a8       	rjmp	8000101e <_malloc_r+0x1da>
8000100c:	70 28       	ld.w	r8,r8[0x8]
8000100e:	08 38       	cp.w	r8,r4
80001010:	c0 60       	breq	8000101c <_malloc_r+0x1d8>
80001012:	70 1a       	ld.w	r10,r8[0x4]
80001014:	e0 1a ff fc 	andl	r10,0xfffc
80001018:	14 39       	cp.w	r9,r10
8000101a:	cf 93       	brcs	8000100c <_malloc_r+0x1c8>
8000101c:	70 39       	ld.w	r9,r8[0xc]
8000101e:	8d 39       	st.w	r6[0xc],r9
80001020:	8d 28       	st.w	r6[0x8],r8
80001022:	91 36       	st.w	r8[0xc],r6
80001024:	93 26       	st.w	r9[0x8],r6
80001026:	e6 08 14 02 	asr	r8,r3,0x2
8000102a:	30 1b       	mov	r11,1
8000102c:	4b 84       	lddpc	r4,8000110c <_malloc_r+0x2c8>
8000102e:	f6 08 09 4b 	lsl	r11,r11,r8
80001032:	68 18       	ld.w	r8,r4[0x4]
80001034:	10 3b       	cp.w	r11,r8
80001036:	e0 8b 00 6f 	brhi	80001114 <_malloc_r+0x2d0>
8000103a:	f7 e8 00 09 	and	r9,r11,r8
8000103e:	c0 b1       	brne	80001054 <_malloc_r+0x210>
80001040:	e0 13 ff fc 	andl	r3,0xfffc
80001044:	a1 7b       	lsl	r11,0x1
80001046:	2f c3       	sub	r3,-4
80001048:	c0 38       	rjmp	8000104e <_malloc_r+0x20a>
8000104a:	2f c3       	sub	r3,-4
8000104c:	a1 7b       	lsl	r11,0x1
8000104e:	f7 e8 00 09 	and	r9,r11,r8
80001052:	cf c0       	breq	8000104a <_malloc_r+0x206>
80001054:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001058:	06 92       	mov	r2,r3
8000105a:	1c 91       	mov	r1,lr
8000105c:	62 36       	ld.w	r6,r1[0xc]
8000105e:	c2 e8       	rjmp	800010ba <_malloc_r+0x276>
80001060:	6c 1a       	ld.w	r10,r6[0x4]
80001062:	e0 1a ff fc 	andl	r10,0xfffc
80001066:	f4 07 01 08 	sub	r8,r10,r7
8000106a:	58 f8       	cp.w	r8,15
8000106c:	e0 8a 00 15 	brle	80001096 <_malloc_r+0x252>
80001070:	6c 3a       	ld.w	r10,r6[0xc]
80001072:	6c 29       	ld.w	r9,r6[0x8]
80001074:	95 29       	st.w	r10[0x8],r9
80001076:	93 3a       	st.w	r9[0xc],r10
80001078:	0e 99       	mov	r9,r7
8000107a:	ec 07 00 07 	add	r7,r6,r7
8000107e:	a1 a9       	sbr	r9,0x0
80001080:	99 37       	st.w	r12[0xc],r7
80001082:	99 27       	st.w	r12[0x8],r7
80001084:	8d 19       	st.w	r6[0x4],r9
80001086:	ee 08 09 08 	st.w	r7[r8],r8
8000108a:	8f 2c       	st.w	r7[0x8],r12
8000108c:	8f 3c       	st.w	r7[0xc],r12
8000108e:	a1 a8       	sbr	r8,0x0
80001090:	0a 9c       	mov	r12,r5
80001092:	8f 18       	st.w	r7[0x4],r8
80001094:	c0 d8       	rjmp	800010ae <_malloc_r+0x26a>
80001096:	6c 39       	ld.w	r9,r6[0xc]
80001098:	58 08       	cp.w	r8,0
8000109a:	c0 f5       	brlt	800010b8 <_malloc_r+0x274>
8000109c:	ec 0a 00 0a 	add	r10,r6,r10
800010a0:	74 18       	ld.w	r8,r10[0x4]
800010a2:	a1 a8       	sbr	r8,0x0
800010a4:	0a 9c       	mov	r12,r5
800010a6:	95 18       	st.w	r10[0x4],r8
800010a8:	6c 28       	ld.w	r8,r6[0x8]
800010aa:	93 28       	st.w	r9[0x8],r8
800010ac:	91 39       	st.w	r8[0xc],r9
800010ae:	f0 1f 00 19 	mcall	80001110 <_malloc_r+0x2cc>
800010b2:	ec cc ff f8 	sub	r12,r6,-8
800010b6:	d8 32       	popm	r0-r7,pc
800010b8:	12 96       	mov	r6,r9
800010ba:	02 36       	cp.w	r6,r1
800010bc:	cd 21       	brne	80001060 <_malloc_r+0x21c>
800010be:	2f f2       	sub	r2,-1
800010c0:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800010c4:	c0 30       	breq	800010ca <_malloc_r+0x286>
800010c6:	2f 81       	sub	r1,-8
800010c8:	cc ab       	rjmp	8000105c <_malloc_r+0x218>
800010ca:	1c 98       	mov	r8,lr
800010cc:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800010d0:	c0 81       	brne	800010e0 <_malloc_r+0x29c>
800010d2:	68 19       	ld.w	r9,r4[0x4]
800010d4:	f6 08 11 ff 	rsub	r8,r11,-1
800010d8:	f3 e8 00 08 	and	r8,r9,r8
800010dc:	89 18       	st.w	r4[0x4],r8
800010de:	c0 78       	rjmp	800010ec <_malloc_r+0x2a8>
800010e0:	f0 c9 00 08 	sub	r9,r8,8
800010e4:	20 13       	sub	r3,1
800010e6:	70 08       	ld.w	r8,r8[0x0]
800010e8:	12 38       	cp.w	r8,r9
800010ea:	cf 10       	breq	800010cc <_malloc_r+0x288>
800010ec:	a1 7b       	lsl	r11,0x1
800010ee:	68 18       	ld.w	r8,r4[0x4]
800010f0:	10 3b       	cp.w	r11,r8
800010f2:	e0 8b 00 11 	brhi	80001114 <_malloc_r+0x2d0>
800010f6:	58 0b       	cp.w	r11,0
800010f8:	c0 e0       	breq	80001114 <_malloc_r+0x2d0>
800010fa:	04 93       	mov	r3,r2
800010fc:	c0 38       	rjmp	80001102 <_malloc_r+0x2be>
800010fe:	2f c3       	sub	r3,-4
80001100:	a1 7b       	lsl	r11,0x1
80001102:	f7 e8 00 09 	and	r9,r11,r8
80001106:	ca 71       	brne	80001054 <_malloc_r+0x210>
80001108:	cf bb       	rjmp	800010fe <_malloc_r+0x2ba>
8000110a:	00 00       	add	r0,r0
8000110c:	00 00       	add	r0,r0
8000110e:	01 04       	ld.w	r4,r0++
80001110:	80 00       	ld.sh	r0,r0[0x0]
80001112:	12 a4       	st.w	r9++,r4
80001114:	68 23       	ld.w	r3,r4[0x8]
80001116:	66 12       	ld.w	r2,r3[0x4]
80001118:	e0 12 ff fc 	andl	r2,0xfffc
8000111c:	0e 32       	cp.w	r2,r7
8000111e:	5f 39       	srlo	r9
80001120:	e4 07 01 08 	sub	r8,r2,r7
80001124:	58 f8       	cp.w	r8,15
80001126:	5f aa       	srle	r10
80001128:	f5 e9 10 09 	or	r9,r10,r9
8000112c:	e0 80 00 a2 	breq	80001270 <_malloc_r+0x42c>
80001130:	4c 88       	lddpc	r8,80001250 <_malloc_r+0x40c>
80001132:	70 01       	ld.w	r1,r8[0x0]
80001134:	4c 88       	lddpc	r8,80001254 <_malloc_r+0x410>
80001136:	2f 01       	sub	r1,-16
80001138:	70 08       	ld.w	r8,r8[0x0]
8000113a:	0e 01       	add	r1,r7
8000113c:	5b f8       	cp.w	r8,-1
8000113e:	c0 40       	breq	80001146 <_malloc_r+0x302>
80001140:	28 11       	sub	r1,-127
80001142:	e0 11 ff 80 	andl	r1,0xff80
80001146:	02 9b       	mov	r11,r1
80001148:	0a 9c       	mov	r12,r5
8000114a:	f0 1f 00 44 	mcall	80001258 <_malloc_r+0x414>
8000114e:	18 96       	mov	r6,r12
80001150:	5b fc       	cp.w	r12,-1
80001152:	c6 e0       	breq	8000122e <_malloc_r+0x3ea>
80001154:	e6 02 00 08 	add	r8,r3,r2
80001158:	10 3c       	cp.w	r12,r8
8000115a:	c0 32       	brcc	80001160 <_malloc_r+0x31c>
8000115c:	08 33       	cp.w	r3,r4
8000115e:	c6 81       	brne	8000122e <_malloc_r+0x3ea>
80001160:	4b fa       	lddpc	r10,8000125c <_malloc_r+0x418>
80001162:	74 09       	ld.w	r9,r10[0x0]
80001164:	e2 09 00 09 	add	r9,r1,r9
80001168:	95 09       	st.w	r10[0x0],r9
8000116a:	10 36       	cp.w	r6,r8
8000116c:	c0 a1       	brne	80001180 <_malloc_r+0x33c>
8000116e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80001172:	c0 71       	brne	80001180 <_malloc_r+0x33c>
80001174:	e2 02 00 02 	add	r2,r1,r2
80001178:	68 28       	ld.w	r8,r4[0x8]
8000117a:	a1 a2       	sbr	r2,0x0
8000117c:	91 12       	st.w	r8[0x4],r2
8000117e:	c4 c8       	rjmp	80001216 <_malloc_r+0x3d2>
80001180:	4b 5a       	lddpc	r10,80001254 <_malloc_r+0x410>
80001182:	74 0b       	ld.w	r11,r10[0x0]
80001184:	5b fb       	cp.w	r11,-1
80001186:	c0 31       	brne	8000118c <_malloc_r+0x348>
80001188:	95 06       	st.w	r10[0x0],r6
8000118a:	c0 68       	rjmp	80001196 <_malloc_r+0x352>
8000118c:	ec 09 00 09 	add	r9,r6,r9
80001190:	4b 3a       	lddpc	r10,8000125c <_malloc_r+0x418>
80001192:	10 19       	sub	r9,r8
80001194:	95 09       	st.w	r10[0x0],r9
80001196:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000119a:	f0 09 11 08 	rsub	r9,r8,8
8000119e:	58 08       	cp.w	r8,0
800011a0:	f2 08 17 10 	movne	r8,r9
800011a4:	ed d8 e1 06 	addne	r6,r6,r8
800011a8:	28 08       	sub	r8,-128
800011aa:	ec 01 00 01 	add	r1,r6,r1
800011ae:	0a 9c       	mov	r12,r5
800011b0:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800011b4:	f0 01 01 01 	sub	r1,r8,r1
800011b8:	02 9b       	mov	r11,r1
800011ba:	f0 1f 00 28 	mcall	80001258 <_malloc_r+0x414>
800011be:	4a 88       	lddpc	r8,8000125c <_malloc_r+0x418>
800011c0:	5b fc       	cp.w	r12,-1
800011c2:	ec 0c 17 00 	moveq	r12,r6
800011c6:	f9 b1 00 00 	moveq	r1,0
800011ca:	70 09       	ld.w	r9,r8[0x0]
800011cc:	0c 1c       	sub	r12,r6
800011ce:	89 26       	st.w	r4[0x8],r6
800011d0:	02 0c       	add	r12,r1
800011d2:	12 01       	add	r1,r9
800011d4:	a1 ac       	sbr	r12,0x0
800011d6:	91 01       	st.w	r8[0x0],r1
800011d8:	8d 1c       	st.w	r6[0x4],r12
800011da:	08 33       	cp.w	r3,r4
800011dc:	c1 d0       	breq	80001216 <_malloc_r+0x3d2>
800011de:	58 f2       	cp.w	r2,15
800011e0:	e0 8b 00 05 	brhi	800011ea <_malloc_r+0x3a6>
800011e4:	30 18       	mov	r8,1
800011e6:	8d 18       	st.w	r6[0x4],r8
800011e8:	c2 38       	rjmp	8000122e <_malloc_r+0x3ea>
800011ea:	30 59       	mov	r9,5
800011ec:	20 c2       	sub	r2,12
800011ee:	e0 12 ff f8 	andl	r2,0xfff8
800011f2:	e6 02 00 08 	add	r8,r3,r2
800011f6:	91 29       	st.w	r8[0x8],r9
800011f8:	91 19       	st.w	r8[0x4],r9
800011fa:	66 18       	ld.w	r8,r3[0x4]
800011fc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001200:	e5 e8 10 08 	or	r8,r2,r8
80001204:	87 18       	st.w	r3[0x4],r8
80001206:	58 f2       	cp.w	r2,15
80001208:	e0 88 00 07 	brls	80001216 <_malloc_r+0x3d2>
8000120c:	e6 cb ff f8 	sub	r11,r3,-8
80001210:	0a 9c       	mov	r12,r5
80001212:	f0 1f 00 14 	mcall	80001260 <_malloc_r+0x41c>
80001216:	49 49       	lddpc	r9,80001264 <_malloc_r+0x420>
80001218:	72 0a       	ld.w	r10,r9[0x0]
8000121a:	49 18       	lddpc	r8,8000125c <_malloc_r+0x418>
8000121c:	70 08       	ld.w	r8,r8[0x0]
8000121e:	14 38       	cp.w	r8,r10
80001220:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001224:	49 19       	lddpc	r9,80001268 <_malloc_r+0x424>
80001226:	72 0a       	ld.w	r10,r9[0x0]
80001228:	14 38       	cp.w	r8,r10
8000122a:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000122e:	68 28       	ld.w	r8,r4[0x8]
80001230:	70 18       	ld.w	r8,r8[0x4]
80001232:	e0 18 ff fc 	andl	r8,0xfffc
80001236:	0e 38       	cp.w	r8,r7
80001238:	5f 39       	srlo	r9
8000123a:	0e 18       	sub	r8,r7
8000123c:	58 f8       	cp.w	r8,15
8000123e:	5f aa       	srle	r10
80001240:	f5 e9 10 09 	or	r9,r10,r9
80001244:	c1 60       	breq	80001270 <_malloc_r+0x42c>
80001246:	0a 9c       	mov	r12,r5
80001248:	f0 1f 00 09 	mcall	8000126c <_malloc_r+0x428>
8000124c:	d8 3a       	popm	r0-r7,pc,r12=0
8000124e:	00 00       	add	r0,r0
80001250:	00 00       	add	r0,r0
80001252:	05 20       	ld.uh	r0,r2++
80001254:	00 00       	add	r0,r0
80001256:	05 10       	ld.sh	r0,r2++
80001258:	80 00       	ld.sh	r0,r0[0x0]
8000125a:	12 a8       	st.w	r9++,r8
8000125c:	00 00       	add	r0,r0
8000125e:	05 24       	ld.uh	r4,r2++
80001260:	80 00       	ld.sh	r0,r0[0x0]
80001262:	13 c4       	ld.ub	r4,r9[0x4]
80001264:	00 00       	add	r0,r0
80001266:	05 1c       	ld.sh	r12,r2++
80001268:	00 00       	add	r0,r0
8000126a:	05 18       	ld.sh	r8,r2++
8000126c:	80 00       	ld.sh	r0,r0[0x0]
8000126e:	12 a4       	st.w	r9++,r4
80001270:	68 26       	ld.w	r6,r4[0x8]
80001272:	a1 a8       	sbr	r8,0x0
80001274:	0e 99       	mov	r9,r7
80001276:	a1 a9       	sbr	r9,0x0
80001278:	8d 19       	st.w	r6[0x4],r9
8000127a:	ec 07 00 07 	add	r7,r6,r7
8000127e:	0a 9c       	mov	r12,r5
80001280:	89 27       	st.w	r4[0x8],r7
80001282:	8f 18       	st.w	r7[0x4],r8
80001284:	f0 1f 00 03 	mcall	80001290 <_malloc_r+0x44c>
80001288:	ec cc ff f8 	sub	r12,r6,-8
8000128c:	d8 32       	popm	r0-r7,pc
8000128e:	00 00       	add	r0,r0
80001290:	80 00       	ld.sh	r0,r0[0x0]
80001292:	12 a4       	st.w	r9++,r4

80001294 <memset>:
80001294:	18 98       	mov	r8,r12
80001296:	c0 38       	rjmp	8000129c <memset+0x8>
80001298:	10 cb       	st.b	r8++,r11
8000129a:	20 1a       	sub	r10,1
8000129c:	58 0a       	cp.w	r10,0
8000129e:	cf d1       	brne	80001298 <memset+0x4>
800012a0:	5e fc       	retal	r12

800012a2 <__malloc_lock>:
800012a2:	5e fc       	retal	r12

800012a4 <__malloc_unlock>:
800012a4:	5e fc       	retal	r12
800012a6:	d7 03       	nop

800012a8 <_sbrk_r>:
800012a8:	d4 21       	pushm	r4-r7,lr
800012aa:	30 08       	mov	r8,0
800012ac:	18 97       	mov	r7,r12
800012ae:	48 76       	lddpc	r6,800012c8 <_sbrk_r+0x20>
800012b0:	16 9c       	mov	r12,r11
800012b2:	8d 08       	st.w	r6[0x0],r8
800012b4:	f0 1f 00 06 	mcall	800012cc <_sbrk_r+0x24>
800012b8:	5b fc       	cp.w	r12,-1
800012ba:	c0 51       	brne	800012c4 <_sbrk_r+0x1c>
800012bc:	6c 08       	ld.w	r8,r6[0x0]
800012be:	58 08       	cp.w	r8,0
800012c0:	ef f8 1a 03 	st.wne	r7[0xc],r8
800012c4:	d8 22       	popm	r4-r7,pc
800012c6:	00 00       	add	r0,r0
800012c8:	00 00       	add	r0,r0
800012ca:	05 a0       	ld.ub	r0,r2[0x2]
800012cc:	80 00       	ld.sh	r0,r0[0x0]
800012ce:	12 d0       	st.w	--r9,r0

800012d0 <_sbrk>:
800012d0:	d4 01       	pushm	lr
800012d2:	48 c8       	lddpc	r8,80001300 <_sbrk+0x30>
800012d4:	70 09       	ld.w	r9,r8[0x0]
800012d6:	58 09       	cp.w	r9,0
800012d8:	c0 31       	brne	800012de <_sbrk+0xe>
800012da:	48 b9       	lddpc	r9,80001304 <_sbrk+0x34>
800012dc:	91 09       	st.w	r8[0x0],r9
800012de:	48 99       	lddpc	r9,80001300 <_sbrk+0x30>
800012e0:	48 aa       	lddpc	r10,80001308 <_sbrk+0x38>
800012e2:	72 08       	ld.w	r8,r9[0x0]
800012e4:	f0 0c 00 0c 	add	r12,r8,r12
800012e8:	14 3c       	cp.w	r12,r10
800012ea:	e0 8b 00 04 	brhi	800012f2 <_sbrk+0x22>
800012ee:	93 0c       	st.w	r9[0x0],r12
800012f0:	c0 68       	rjmp	800012fc <_sbrk+0x2c>
800012f2:	f0 1f 00 07 	mcall	8000130c <_sbrk+0x3c>
800012f6:	30 c8       	mov	r8,12
800012f8:	99 08       	st.w	r12[0x0],r8
800012fa:	3f f8       	mov	r8,-1
800012fc:	10 9c       	mov	r12,r8
800012fe:	d8 02       	popm	pc
80001300:	00 00       	add	r0,r0
80001302:	05 4c       	ld.w	r12,--r2
80001304:	00 00       	add	r0,r0
80001306:	05 a8       	ld.ub	r8,r2[0x2]
80001308:	00 00       	add	r0,r0
8000130a:	e0 00       	*unknown*
8000130c:	80 00       	ld.sh	r0,r0[0x0]
8000130e:	13 10       	ld.sh	r0,r9++

80001310 <__errno>:
80001310:	48 28       	lddpc	r8,80001318 <__errno+0x8>
80001312:	70 0c       	ld.w	r12,r8[0x0]
80001314:	2f 4c       	sub	r12,-12
80001316:	5e fc       	retal	r12
80001318:	00 00       	add	r0,r0
8000131a:	01 00       	ld.w	r0,r0++

8000131c <_malloc_trim_r>:
8000131c:	d4 21       	pushm	r4-r7,lr
8000131e:	16 95       	mov	r5,r11
80001320:	18 97       	mov	r7,r12
80001322:	f0 1f 00 23 	mcall	800013ac <_malloc_trim_r+0x90>
80001326:	4a 34       	lddpc	r4,800013b0 <_malloc_trim_r+0x94>
80001328:	68 28       	ld.w	r8,r4[0x8]
8000132a:	70 16       	ld.w	r6,r8[0x4]
8000132c:	e0 16 ff fc 	andl	r6,0xfffc
80001330:	ec c8 ff 91 	sub	r8,r6,-111
80001334:	f0 05 01 05 	sub	r5,r8,r5
80001338:	e0 15 ff 80 	andl	r5,0xff80
8000133c:	ea c5 00 80 	sub	r5,r5,128
80001340:	e0 45 00 7f 	cp.w	r5,127
80001344:	e0 8a 00 23 	brle	8000138a <_malloc_trim_r+0x6e>
80001348:	30 0b       	mov	r11,0
8000134a:	0e 9c       	mov	r12,r7
8000134c:	f0 1f 00 1a 	mcall	800013b4 <_malloc_trim_r+0x98>
80001350:	68 28       	ld.w	r8,r4[0x8]
80001352:	0c 08       	add	r8,r6
80001354:	10 3c       	cp.w	r12,r8
80001356:	c1 a1       	brne	8000138a <_malloc_trim_r+0x6e>
80001358:	ea 0b 11 00 	rsub	r11,r5,0
8000135c:	0e 9c       	mov	r12,r7
8000135e:	f0 1f 00 16 	mcall	800013b4 <_malloc_trim_r+0x98>
80001362:	5b fc       	cp.w	r12,-1
80001364:	c1 71       	brne	80001392 <_malloc_trim_r+0x76>
80001366:	30 0b       	mov	r11,0
80001368:	0e 9c       	mov	r12,r7
8000136a:	f0 1f 00 13 	mcall	800013b4 <_malloc_trim_r+0x98>
8000136e:	68 28       	ld.w	r8,r4[0x8]
80001370:	f8 08 01 09 	sub	r9,r12,r8
80001374:	58 f9       	cp.w	r9,15
80001376:	e0 8a 00 0a 	brle	8000138a <_malloc_trim_r+0x6e>
8000137a:	a1 a9       	sbr	r9,0x0
8000137c:	91 19       	st.w	r8[0x4],r9
8000137e:	48 f8       	lddpc	r8,800013b8 <_malloc_trim_r+0x9c>
80001380:	70 09       	ld.w	r9,r8[0x0]
80001382:	48 f8       	lddpc	r8,800013bc <_malloc_trim_r+0xa0>
80001384:	f8 09 01 09 	sub	r9,r12,r9
80001388:	91 09       	st.w	r8[0x0],r9
8000138a:	0e 9c       	mov	r12,r7
8000138c:	f0 1f 00 0d 	mcall	800013c0 <_malloc_trim_r+0xa4>
80001390:	d8 2a       	popm	r4-r7,pc,r12=0
80001392:	68 28       	ld.w	r8,r4[0x8]
80001394:	0a 16       	sub	r6,r5
80001396:	a1 a6       	sbr	r6,0x0
80001398:	91 16       	st.w	r8[0x4],r6
8000139a:	48 98       	lddpc	r8,800013bc <_malloc_trim_r+0xa0>
8000139c:	70 09       	ld.w	r9,r8[0x0]
8000139e:	0a 19       	sub	r9,r5
800013a0:	0e 9c       	mov	r12,r7
800013a2:	91 09       	st.w	r8[0x0],r9
800013a4:	f0 1f 00 07 	mcall	800013c0 <_malloc_trim_r+0xa4>
800013a8:	da 2a       	popm	r4-r7,pc,r12=1
800013aa:	00 00       	add	r0,r0
800013ac:	80 00       	ld.sh	r0,r0[0x0]
800013ae:	12 a2       	st.w	r9++,r2
800013b0:	00 00       	add	r0,r0
800013b2:	01 04       	ld.w	r4,r0++
800013b4:	80 00       	ld.sh	r0,r0[0x0]
800013b6:	12 a8       	st.w	r9++,r8
800013b8:	00 00       	add	r0,r0
800013ba:	05 10       	ld.sh	r0,r2++
800013bc:	00 00       	add	r0,r0
800013be:	05 24       	ld.uh	r4,r2++
800013c0:	80 00       	ld.sh	r0,r0[0x0]
800013c2:	12 a4       	st.w	r9++,r4

800013c4 <_free_r>:
800013c4:	d4 21       	pushm	r4-r7,lr
800013c6:	16 96       	mov	r6,r11
800013c8:	18 97       	mov	r7,r12
800013ca:	58 0b       	cp.w	r11,0
800013cc:	e0 80 00 c8 	breq	8000155c <_free_r+0x198>
800013d0:	f0 1f 00 4c 	mcall	80001500 <_free_r+0x13c>
800013d4:	20 86       	sub	r6,8
800013d6:	4c ca       	lddpc	r10,80001504 <_free_r+0x140>
800013d8:	6c 18       	ld.w	r8,r6[0x4]
800013da:	74 2e       	ld.w	lr,r10[0x8]
800013dc:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800013e0:	a1 c8       	cbr	r8,0x0
800013e2:	ec 08 00 09 	add	r9,r6,r8
800013e6:	72 1b       	ld.w	r11,r9[0x4]
800013e8:	e0 1b ff fc 	andl	r11,0xfffc
800013ec:	1c 39       	cp.w	r9,lr
800013ee:	c1 d1       	brne	80001428 <_free_r+0x64>
800013f0:	f6 08 00 08 	add	r8,r11,r8
800013f4:	58 0c       	cp.w	r12,0
800013f6:	c0 81       	brne	80001406 <_free_r+0x42>
800013f8:	6c 09       	ld.w	r9,r6[0x0]
800013fa:	12 16       	sub	r6,r9
800013fc:	12 08       	add	r8,r9
800013fe:	6c 3b       	ld.w	r11,r6[0xc]
80001400:	6c 29       	ld.w	r9,r6[0x8]
80001402:	97 29       	st.w	r11[0x8],r9
80001404:	93 3b       	st.w	r9[0xc],r11
80001406:	10 99       	mov	r9,r8
80001408:	95 26       	st.w	r10[0x8],r6
8000140a:	a1 a9       	sbr	r9,0x0
8000140c:	8d 19       	st.w	r6[0x4],r9
8000140e:	4b f9       	lddpc	r9,80001508 <_free_r+0x144>
80001410:	72 09       	ld.w	r9,r9[0x0]
80001412:	12 38       	cp.w	r8,r9
80001414:	c0 63       	brcs	80001420 <_free_r+0x5c>
80001416:	4b e8       	lddpc	r8,8000150c <_free_r+0x148>
80001418:	0e 9c       	mov	r12,r7
8000141a:	70 0b       	ld.w	r11,r8[0x0]
8000141c:	f0 1f 00 3d 	mcall	80001510 <_free_r+0x14c>
80001420:	0e 9c       	mov	r12,r7
80001422:	f0 1f 00 3d 	mcall	80001514 <_free_r+0x150>
80001426:	d8 22       	popm	r4-r7,pc
80001428:	93 1b       	st.w	r9[0x4],r11
8000142a:	58 0c       	cp.w	r12,0
8000142c:	c0 30       	breq	80001432 <_free_r+0x6e>
8000142e:	30 0c       	mov	r12,0
80001430:	c1 08       	rjmp	80001450 <_free_r+0x8c>
80001432:	6c 0e       	ld.w	lr,r6[0x0]
80001434:	f4 c5 ff f8 	sub	r5,r10,-8
80001438:	1c 16       	sub	r6,lr
8000143a:	1c 08       	add	r8,lr
8000143c:	6c 2e       	ld.w	lr,r6[0x8]
8000143e:	0a 3e       	cp.w	lr,r5
80001440:	f9 bc 00 01 	moveq	r12,1
80001444:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001448:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000144c:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001450:	f2 0b 00 0e 	add	lr,r9,r11
80001454:	7c 1e       	ld.w	lr,lr[0x4]
80001456:	ed be 00 00 	bld	lr,0x0
8000145a:	c1 30       	breq	80001480 <_free_r+0xbc>
8000145c:	16 08       	add	r8,r11
8000145e:	58 0c       	cp.w	r12,0
80001460:	c0 c1       	brne	80001478 <_free_r+0xb4>
80001462:	4a 9e       	lddpc	lr,80001504 <_free_r+0x140>
80001464:	72 2b       	ld.w	r11,r9[0x8]
80001466:	2f 8e       	sub	lr,-8
80001468:	1c 3b       	cp.w	r11,lr
8000146a:	c0 71       	brne	80001478 <_free_r+0xb4>
8000146c:	97 36       	st.w	r11[0xc],r6
8000146e:	97 26       	st.w	r11[0x8],r6
80001470:	8d 2b       	st.w	r6[0x8],r11
80001472:	8d 3b       	st.w	r6[0xc],r11
80001474:	30 1c       	mov	r12,1
80001476:	c0 58       	rjmp	80001480 <_free_r+0xbc>
80001478:	72 2b       	ld.w	r11,r9[0x8]
8000147a:	72 39       	ld.w	r9,r9[0xc]
8000147c:	93 2b       	st.w	r9[0x8],r11
8000147e:	97 39       	st.w	r11[0xc],r9
80001480:	10 99       	mov	r9,r8
80001482:	ec 08 09 08 	st.w	r6[r8],r8
80001486:	a1 a9       	sbr	r9,0x0
80001488:	8d 19       	st.w	r6[0x4],r9
8000148a:	58 0c       	cp.w	r12,0
8000148c:	c6 51       	brne	80001556 <_free_r+0x192>
8000148e:	e0 48 01 ff 	cp.w	r8,511
80001492:	e0 8b 00 13 	brhi	800014b8 <_free_r+0xf4>
80001496:	a3 98       	lsr	r8,0x3
80001498:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000149c:	72 2b       	ld.w	r11,r9[0x8]
8000149e:	8d 39       	st.w	r6[0xc],r9
800014a0:	8d 2b       	st.w	r6[0x8],r11
800014a2:	97 36       	st.w	r11[0xc],r6
800014a4:	93 26       	st.w	r9[0x8],r6
800014a6:	a3 48       	asr	r8,0x2
800014a8:	74 19       	ld.w	r9,r10[0x4]
800014aa:	30 1b       	mov	r11,1
800014ac:	f6 08 09 48 	lsl	r8,r11,r8
800014b0:	f3 e8 10 08 	or	r8,r9,r8
800014b4:	95 18       	st.w	r10[0x4],r8
800014b6:	c5 08       	rjmp	80001556 <_free_r+0x192>
800014b8:	f0 0b 16 09 	lsr	r11,r8,0x9
800014bc:	58 4b       	cp.w	r11,4
800014be:	e0 8b 00 06 	brhi	800014ca <_free_r+0x106>
800014c2:	f0 0b 16 06 	lsr	r11,r8,0x6
800014c6:	2c 8b       	sub	r11,-56
800014c8:	c2 b8       	rjmp	8000151e <_free_r+0x15a>
800014ca:	59 4b       	cp.w	r11,20
800014cc:	e0 8b 00 04 	brhi	800014d4 <_free_r+0x110>
800014d0:	2a 5b       	sub	r11,-91
800014d2:	c2 68       	rjmp	8000151e <_free_r+0x15a>
800014d4:	e0 4b 00 54 	cp.w	r11,84
800014d8:	e0 8b 00 06 	brhi	800014e4 <_free_r+0x120>
800014dc:	f0 0b 16 0c 	lsr	r11,r8,0xc
800014e0:	29 2b       	sub	r11,-110
800014e2:	c1 e8       	rjmp	8000151e <_free_r+0x15a>
800014e4:	e0 4b 01 54 	cp.w	r11,340
800014e8:	e0 8b 00 06 	brhi	800014f4 <_free_r+0x130>
800014ec:	f0 0b 16 0f 	lsr	r11,r8,0xf
800014f0:	28 9b       	sub	r11,-119
800014f2:	c1 68       	rjmp	8000151e <_free_r+0x15a>
800014f4:	e0 4b 05 54 	cp.w	r11,1364
800014f8:	e0 88 00 10 	brls	80001518 <_free_r+0x154>
800014fc:	37 eb       	mov	r11,126
800014fe:	c1 08       	rjmp	8000151e <_free_r+0x15a>
80001500:	80 00       	ld.sh	r0,r0[0x0]
80001502:	12 a2       	st.w	r9++,r2
80001504:	00 00       	add	r0,r0
80001506:	01 04       	ld.w	r4,r0++
80001508:	00 00       	add	r0,r0
8000150a:	05 0c       	ld.w	r12,r2++
8000150c:	00 00       	add	r0,r0
8000150e:	05 20       	ld.uh	r0,r2++
80001510:	80 00       	ld.sh	r0,r0[0x0]
80001512:	13 1c       	ld.sh	r12,r9++
80001514:	80 00       	ld.sh	r0,r0[0x0]
80001516:	12 a4       	st.w	r9++,r4
80001518:	f0 0b 16 12 	lsr	r11,r8,0x12
8000151c:	28 4b       	sub	r11,-124
8000151e:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80001522:	78 29       	ld.w	r9,r12[0x8]
80001524:	18 39       	cp.w	r9,r12
80001526:	c0 e1       	brne	80001542 <_free_r+0x17e>
80001528:	74 18       	ld.w	r8,r10[0x4]
8000152a:	a3 4b       	asr	r11,0x2
8000152c:	30 1c       	mov	r12,1
8000152e:	f8 0b 09 4b 	lsl	r11,r12,r11
80001532:	f1 eb 10 0b 	or	r11,r8,r11
80001536:	12 98       	mov	r8,r9
80001538:	95 1b       	st.w	r10[0x4],r11
8000153a:	c0 a8       	rjmp	8000154e <_free_r+0x18a>
8000153c:	72 29       	ld.w	r9,r9[0x8]
8000153e:	18 39       	cp.w	r9,r12
80001540:	c0 60       	breq	8000154c <_free_r+0x188>
80001542:	72 1a       	ld.w	r10,r9[0x4]
80001544:	e0 1a ff fc 	andl	r10,0xfffc
80001548:	14 38       	cp.w	r8,r10
8000154a:	cf 93       	brcs	8000153c <_free_r+0x178>
8000154c:	72 38       	ld.w	r8,r9[0xc]
8000154e:	8d 38       	st.w	r6[0xc],r8
80001550:	8d 29       	st.w	r6[0x8],r9
80001552:	93 36       	st.w	r9[0xc],r6
80001554:	91 26       	st.w	r8[0x8],r6
80001556:	0e 9c       	mov	r12,r7
80001558:	f0 1f 00 02 	mcall	80001560 <_free_r+0x19c>
8000155c:	d8 22       	popm	r4-r7,pc
8000155e:	00 00       	add	r0,r0
80001560:	80 00       	ld.sh	r0,r0[0x0]
80001562:	12 a4       	st.w	r9++,r4

Disassembly of section .exception:

80001600 <_evba>:
	...

80001628 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001628:	c7 a8       	rjmp	8000171c <privilegedCalls>
	...

80001700 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001700:	1c 9f       	mov	pc,lr

80001702 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001702:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001706:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
8000170a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
8000170e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001712:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001714:	c0 31       	brne	8000171a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001716:	4b 9c       	lddpc	r12,800017f8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001718:	18 9f       	mov	pc,r12

8000171a <_int0_exit>:
_int0_exit:
	rete
8000171a:	d6 03       	rete

8000171c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
8000171c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
8000171e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001720:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001722:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001724:	9b 3c       	st.w	sp[0xc],r12

80001726 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001726:	4b 6c       	lddpc	r12,800017fc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001728:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
8000172a:	c0 61       	brne	80001736 <priv_interruptenable>
	ld.w r12,sp[USERSR]
8000172c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
8000172e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001730:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001732:	d3 02       	popm	r11-r12
	rete
80001734:	d6 03       	rete

80001736 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001736:	4b 3c       	lddpc	r12,80001800 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001738:	18 3b       	cp.w	r11,r12
	brne privexception
8000173a:	c0 61       	brne	80001746 <privexception>
	ld.w r12,sp[USERSR]
8000173c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
8000173e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001740:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001742:	d3 02       	popm	r11-r12
	rete
80001744:	d6 03       	rete

80001746 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001746:	c0 08       	rjmp	80001746 <privexception>

80001748 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001748:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
8000174a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
8000174e:	4a ec       	lddpc	r12,80001804 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001750:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001752:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001754:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001758:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
8000175c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001760:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001762:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001764:	1c 9f       	mov	pc,lr

80001766 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001766:	d3 03       	ssrf	0x10
	mov pc,lr
80001768:	1c 9f       	mov	pc,lr

8000176a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
8000176a:	d5 03       	csrf	0x10
	mov pc,lr
8000176c:	1c 9f       	mov	pc,lr

8000176e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
8000176e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001772:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001774:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001778:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
8000177c:	1c 9f       	mov	pc,lr

8000177e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000177e:	4a 3c       	lddpc	r12,80001808 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001780:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001782:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001784:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001786:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001788:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
8000178a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
8000178c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
8000178e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001790:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001792:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001794:	33 40       	mov	r0,52
	add r0,r12
80001796:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001798:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
8000179c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
8000179e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
800017a2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
800017a4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
800017a6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
800017a8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
800017aa:	1a 90       	mov	r0,sp
	st.w --sp,r0
800017ac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800017ae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
800017b2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
800017b4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
800017b6:	1c 9f       	mov	pc,lr

800017b8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800017b8:	49 4c       	lddpc	r12,80001808 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
800017ba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
800017bc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800017be:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800017c0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
800017c4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
800017c6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
800017c8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800017ca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
800017cc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800017ce:	33 40       	mov	r0,52
	add r0,r12
800017d0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800017d2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800017d6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
800017d8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
800017da:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
800017dc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
800017de:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
800017e0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
800017e2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
800017e4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
800017e6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
800017e8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800017ea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
800017ec:	d4 01       	pushm	lr
	call timerStart
800017ee:	f0 1f 00 08 	mcall	8000180c <contextRestoreFromISR+0x54>
	popm lr
800017f2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
800017f4:	1c 9f       	mov	pc,lr
800017f6:	00 00       	add	r0,r0
800017f8:	80 00       	ld.sh	r0,r0[0x0]
800017fa:	06 30       	cp.w	r0,r3
800017fc:	80 00       	ld.sh	r0,r0[0x0]
800017fe:	17 66       	ld.uh	r6,--r11
80001800:	80 00       	ld.sh	r0,r0[0x0]
80001802:	17 6a       	ld.uh	r10,--r11
80001804:	80 00       	ld.sh	r0,r0[0x0]
80001806:	16 00       	add	r0,r11
80001808:	00 00       	add	r0,r0
8000180a:	05 9c       	ld.ub	r12,r2[0x1]
8000180c:	80 00       	ld.sh	r0,r0[0x0]
8000180e:	0c aa       	st.w	r6++,r10
	...
