
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001c3c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001e00  80001e00  00002200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80002200  80002200  00002600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002284  80002284  00002684  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80002288  00002808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002794  00002d14  2**0
                  ALLOC
  9 .bss          00000198  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000d950  000006b0  000006b0  00000000  2**0
                  ALLOC
 11 .comment      000000a0  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000005c8  00000000  00000000  00002db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000a14  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c703  00000000  00000000  00003d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000020d9  00000000  00000000  00010497  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000047e7  00000000  00000000  00012570  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000c5c  00000000  00000000  00016d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001d1e  00000000  00000000  000179b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00001940  00000000  00000000  000196d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00534537  00000000  00000000  0001b012  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 00000510  00000000  00000000  0054f549  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	14 14       	sub	r4,r10

Disassembly of section .text:

80000008 <MaxLockedCeiling>:
 * Comment:
 * 	Returns a maximum ceiling of all currently locked semaphores
 *
 **********************************************************/
static uint8_t MaxLockedCeiling(void)
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 2d       	sub	sp,8
	if (LOCKEDSEMAPHORELIST==NULL)
80000010:	49 78       	lddpc	r8,8000006c <MaxLockedCeiling+0x64>
80000012:	70 08       	ld.w	r8,r8[0x0]
80000014:	58 08       	cp.w	r8,0
80000016:	c0 31       	brne	8000001c <MaxLockedCeiling+0x14>
	{
		return 0;
80000018:	30 08       	mov	r8,0
8000001a:	c2 48       	rjmp	80000062 <MaxLockedCeiling+0x5a>
	}
	else
	{
	uint8_t maxCeil=LOCKEDSEMAPHORELIST->ceiling;
8000001c:	49 48       	lddpc	r8,8000006c <MaxLockedCeiling+0x64>
8000001e:	70 08       	ld.w	r8,r8[0x0]
80000020:	11 c8       	ld.ub	r8,r8[0x4]
80000022:	ef 68 ff fb 	st.b	r7[-5],r8
	ROSA_semaphoreHandle_t *it=LOCKEDSEMAPHORELIST;
80000026:	49 28       	lddpc	r8,8000006c <MaxLockedCeiling+0x64>
80000028:	70 08       	ld.w	r8,r8[0x0]
8000002a:	ef 48 ff fc 	st.w	r7[-4],r8
	while (it->nextLockedSemaphore!=NULL)
8000002e:	c1 38       	rjmp	80000054 <MaxLockedCeiling+0x4c>
	{
		if (it->ceiling>maxCeil)
80000030:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000034:	11 c8       	ld.ub	r8,r8[0x4]
80000036:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000003a:	f0 09 18 00 	cp.b	r9,r8
8000003e:	c0 62       	brcc	8000004a <MaxLockedCeiling+0x42>
		{
			maxCeil=it->ceiling;
80000040:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000044:	11 c8       	ld.ub	r8,r8[0x4]
80000046:	ef 68 ff fb 	st.b	r7[-5],r8
		}
		it=it->nextLockedSemaphore;
8000004a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000004e:	70 28       	ld.w	r8,r8[0x8]
80000050:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
	uint8_t maxCeil=LOCKEDSEMAPHORELIST->ceiling;
	ROSA_semaphoreHandle_t *it=LOCKEDSEMAPHORELIST;
	while (it->nextLockedSemaphore!=NULL)
80000054:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000058:	70 28       	ld.w	r8,r8[0x8]
8000005a:	58 08       	cp.w	r8,0
8000005c:	ce a1       	brne	80000030 <MaxLockedCeiling+0x28>
			maxCeil=it->ceiling;
		}
		it=it->nextLockedSemaphore;
	}
	
	return maxCeil;
8000005e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
	}
}
80000062:	10 9c       	mov	r12,r8
80000064:	2f ed       	sub	sp,-8
80000066:	e3 cd 80 80 	ldm	sp++,r7,pc
8000006a:	00 00       	add	r0,r0
8000006c:	00 00       	add	r0,r0
8000006e:	05 d0       	ld.ub	r0,r2[0x5]

80000070 <ROSA_semaphoreCreate>:
 *
 * Comment:
 * 	Create a semaphore
 *
 **********************************************************/
int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t ** mutex, uint8_t ceiling) {
80000070:	eb cd 40 80 	pushm	r7,lr
80000074:	1a 97       	mov	r7,sp
80000076:	20 2d       	sub	sp,8
80000078:	ef 4c ff fc 	st.w	r7[-4],r12
8000007c:	16 98       	mov	r8,r11
8000007e:	ef 68 ff f8 	st.b	r7[-8],r8
	*mutex = (ROSA_semaphoreHandle_t *) calloc(1,sizeof(ROSA_semaphoreHandle_t));
80000082:	30 cb       	mov	r11,12
80000084:	30 1c       	mov	r12,1
80000086:	f0 1f 00 0f 	mcall	800000c0 <ROSA_semaphoreCreate+0x50>
8000008a:	18 98       	mov	r8,r12
8000008c:	10 99       	mov	r9,r8
8000008e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000092:	91 09       	st.w	r8[0x0],r9
	(*mutex)->holder = NULL;
80000094:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000098:	70 08       	ld.w	r8,r8[0x0]
8000009a:	30 09       	mov	r9,0
8000009c:	91 09       	st.w	r8[0x0],r9
	(*mutex)->ceiling = ceiling;
8000009e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000a2:	70 09       	ld.w	r9,r8[0x0]
800000a4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800000a8:	b2 c8       	st.b	r9[0x4],r8
	(*mutex)->nextLockedSemaphore=NULL;	
800000aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000ae:	70 08       	ld.w	r8,r8[0x0]
800000b0:	30 09       	mov	r9,0
800000b2:	91 29       	st.w	r8[0x8],r9
	
	return 0;
800000b4:	30 08       	mov	r8,0
}
800000b6:	10 9c       	mov	r12,r8
800000b8:	2f ed       	sub	sp,-8
800000ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800000be:	00 00       	add	r0,r0
800000c0:	80 00       	ld.sh	r0,r0[0x0]
800000c2:	14 94       	mov	r4,r10

800000c4 <ROSA_semaphoreLock>:
 *
 * Comment:
 * 	Lock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t ** mutex) {
800000c4:	eb cd 40 c0 	pushm	r6-r7,lr
800000c8:	1a 97       	mov	r7,sp
800000ca:	20 2d       	sub	sp,8
800000cc:	ef 4c ff f8 	st.w	r7[-8],r12
	
	if ((*mutex)==NULL)
800000d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000d4:	70 08       	ld.w	r8,r8[0x0]
800000d6:	58 08       	cp.w	r8,0
800000d8:	c0 61       	brne	800000e4 <ROSA_semaphoreLock+0x20>
	{
		return -1; // if the passed pointer to the semaphore handle is non-existent
800000da:	3f f8       	mov	r8,-1
800000dc:	c5 98       	rjmp	8000018e <ROSA_semaphoreLock+0xca>
	}
	
	while ((*mutex)->holder != NULL || EXECTASK->priority<=MaxLockedCeiling()) //if the semaphore is already locked or IPCP condition P(task)>maxLockedCeil
		ROSA_yield();		
800000de:	f0 1f 00 2f 	mcall	80000198 <ROSA_semaphoreLock+0xd4>
800000e2:	c0 28       	rjmp	800000e6 <ROSA_semaphoreLock+0x22>
	if ((*mutex)==NULL)
	{
		return -1; // if the passed pointer to the semaphore handle is non-existent
	}
	
	while ((*mutex)->holder != NULL || EXECTASK->priority<=MaxLockedCeiling()) //if the semaphore is already locked or IPCP condition P(task)>maxLockedCeil
800000e4:	d7 03       	nop
800000e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000ea:	70 08       	ld.w	r8,r8[0x0]
800000ec:	70 08       	ld.w	r8,r8[0x0]
800000ee:	58 08       	cp.w	r8,0
800000f0:	cf 71       	brne	800000de <ROSA_semaphoreLock+0x1a>
800000f2:	4a b8       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd8>
800000f4:	70 08       	ld.w	r8,r8[0x0]
800000f6:	f1 36 00 64 	ld.ub	r6,r8[100]
800000fa:	f0 1f 00 2a 	mcall	800001a0 <ROSA_semaphoreLock+0xdc>
800000fe:	18 98       	mov	r8,r12
80000100:	f0 06 18 00 	cp.b	r6,r8
80000104:	fe 98 ff ed 	brls	800000de <ROSA_semaphoreLock+0x1a>
		ROSA_yield();		
	
	
	(*mutex)->holder = EXECTASK;
80000108:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000010c:	70 08       	ld.w	r8,r8[0x0]
8000010e:	4a 49       	lddpc	r9,8000019c <ROSA_semaphoreLock+0xd8>
80000110:	72 09       	ld.w	r9,r9[0x0]
80000112:	91 09       	st.w	r8[0x0],r9
	if (EXECTASK->priority < (*mutex)->ceiling)
80000114:	4a 28       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd8>
80000116:	70 08       	ld.w	r8,r8[0x0]
80000118:	f1 39 00 64 	ld.ub	r9,r8[100]
8000011c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000120:	70 08       	ld.w	r8,r8[0x0]
80000122:	11 c8       	ld.ub	r8,r8[0x4]
80000124:	f0 09 18 00 	cp.b	r9,r8
80000128:	c1 32       	brcc	8000014e <ROSA_semaphoreLock+0x8a>
	{
		EXECTASK->priority=(*mutex)->ceiling; //IPCP priority inheritance
8000012a:	49 d8       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd8>
8000012c:	70 09       	ld.w	r9,r8[0x0]
8000012e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000132:	70 08       	ld.w	r8,r8[0x0]
80000134:	11 c8       	ld.ub	r8,r8[0x4]
80000136:	f3 68 00 64 	st.b	r9[100],r8
		PA[EXECTASK->priority]=EXECTASK;//move this task to the proper ready queue
8000013a:	49 98       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd8>
8000013c:	70 08       	ld.w	r8,r8[0x0]
8000013e:	f1 38 00 64 	ld.ub	r8,r8[100]
80000142:	10 99       	mov	r9,r8
80000144:	49 68       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd8>
80000146:	70 0a       	ld.w	r10,r8[0x0]
80000148:	49 78       	lddpc	r8,800001a4 <ROSA_semaphoreLock+0xe0>
8000014a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
		
	if (LOCKEDSEMAPHORELIST==NULL)
8000014e:	49 78       	lddpc	r8,800001a8 <ROSA_semaphoreLock+0xe4>
80000150:	70 08       	ld.w	r8,r8[0x0]
80000152:	58 08       	cp.w	r8,0
80000154:	c0 71       	brne	80000162 <ROSA_semaphoreLock+0x9e>
	{
		LOCKEDSEMAPHORELIST=(*mutex);
80000156:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000015a:	70 09       	ld.w	r9,r8[0x0]
8000015c:	49 38       	lddpc	r8,800001a8 <ROSA_semaphoreLock+0xe4>
8000015e:	91 09       	st.w	r8[0x0],r9
80000160:	c1 68       	rjmp	8000018c <ROSA_semaphoreLock+0xc8>
	}
	else
	{
		ROSA_semaphoreHandle_t * it; //finding the last semaphore in the list and changing its nextLockedSemaphore field to point to the just locked semaphore
		it=LOCKEDSEMAPHORELIST;
80000162:	49 28       	lddpc	r8,800001a8 <ROSA_semaphoreLock+0xe4>
80000164:	70 08       	ld.w	r8,r8[0x0]
80000166:	ef 48 ff fc 	st.w	r7[-4],r8
		while(it->nextLockedSemaphore!=NULL)
8000016a:	c0 68       	rjmp	80000176 <ROSA_semaphoreLock+0xb2>
		{
			it=it->nextLockedSemaphore;
8000016c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000170:	70 28       	ld.w	r8,r8[0x8]
80000172:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
		ROSA_semaphoreHandle_t * it; //finding the last semaphore in the list and changing its nextLockedSemaphore field to point to the just locked semaphore
		it=LOCKEDSEMAPHORELIST;
		while(it->nextLockedSemaphore!=NULL)
80000176:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000017a:	70 28       	ld.w	r8,r8[0x8]
8000017c:	58 08       	cp.w	r8,0
8000017e:	cf 71       	brne	8000016c <ROSA_semaphoreLock+0xa8>
		{
			it=it->nextLockedSemaphore;
		}
		it->nextLockedSemaphore=(*mutex);
80000180:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000184:	70 09       	ld.w	r9,r8[0x0]
80000186:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000018a:	91 29       	st.w	r8[0x8],r9
	}
	
	return 0;
8000018c:	30 08       	mov	r8,0
}
8000018e:	10 9c       	mov	r12,r8
80000190:	2f ed       	sub	sp,-8
80000192:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80000196:	00 00       	add	r0,r0
80000198:	80 00       	ld.sh	r0,r0[0x0]
8000019a:	08 ee       	st.h	--r4,lr
8000019c:	00 00       	add	r0,r0
8000019e:	06 24       	rsub	r4,r3
800001a0:	80 00       	ld.sh	r0,r0[0x0]
800001a2:	00 08       	add	r8,r0
800001a4:	00 00       	add	r0,r0
800001a6:	05 f0       	ld.ub	r0,r2[0x7]
800001a8:	00 00       	add	r0,r0
800001aa:	05 d0       	ld.ub	r0,r2[0x5]

800001ac <ROSA_semaphoreUnlock>:
 *
 * Comment:
 * 	Unlock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreUnlock(ROSA_semaphoreHandle_t ** mutex) {
800001ac:	eb cd 40 80 	pushm	r7,lr
800001b0:	1a 97       	mov	r7,sp
800001b2:	20 2d       	sub	sp,8
800001b4:	ef 4c ff f8 	st.w	r7[-8],r12
	(*mutex)->holder = NULL;
800001b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001bc:	70 08       	ld.w	r8,r8[0x0]
800001be:	30 09       	mov	r9,0
800001c0:	91 09       	st.w	r8[0x0],r9
	if ((*mutex)==LOCKEDSEMAPHORELIST)
800001c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001c6:	70 09       	ld.w	r9,r8[0x0]
800001c8:	49 58       	lddpc	r8,8000021c <ROSA_semaphoreUnlock+0x70>
800001ca:	70 08       	ld.w	r8,r8[0x0]
800001cc:	10 39       	cp.w	r9,r8
800001ce:	c0 81       	brne	800001de <ROSA_semaphoreUnlock+0x32>
	{
		LOCKEDSEMAPHORELIST=(*mutex)->nextLockedSemaphore; //if first locked semaphore needs to be unlocked
800001d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001d4:	70 08       	ld.w	r8,r8[0x0]
800001d6:	70 29       	ld.w	r9,r8[0x8]
800001d8:	49 18       	lddpc	r8,8000021c <ROSA_semaphoreUnlock+0x70>
800001da:	91 09       	st.w	r8[0x0],r9
800001dc:	c1 a8       	rjmp	80000210 <ROSA_semaphoreUnlock+0x64>
	}
	else
	{
		ROSA_semaphoreHandle_t * it;
		it=LOCKEDSEMAPHORELIST;
800001de:	49 08       	lddpc	r8,8000021c <ROSA_semaphoreUnlock+0x70>
800001e0:	70 08       	ld.w	r8,r8[0x0]
800001e2:	ef 48 ff fc 	st.w	r7[-4],r8
		while (it->nextLockedSemaphore!=(*mutex)) //find the locked semaphore before the one that needs to be unlocked
800001e6:	c0 68       	rjmp	800001f2 <ROSA_semaphoreUnlock+0x46>
		{
			it=it->nextLockedSemaphore;
800001e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001ec:	70 28       	ld.w	r8,r8[0x8]
800001ee:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
		ROSA_semaphoreHandle_t * it;
		it=LOCKEDSEMAPHORELIST;
		while (it->nextLockedSemaphore!=(*mutex)) //find the locked semaphore before the one that needs to be unlocked
800001f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001f6:	70 29       	ld.w	r9,r8[0x8]
800001f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001fc:	70 08       	ld.w	r8,r8[0x0]
800001fe:	10 39       	cp.w	r9,r8
80000200:	cf 41       	brne	800001e8 <ROSA_semaphoreUnlock+0x3c>
		{
			it=it->nextLockedSemaphore;
		}
		it->nextLockedSemaphore=(*mutex)->nextLockedSemaphore;
80000202:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000206:	70 08       	ld.w	r8,r8[0x0]
80000208:	70 29       	ld.w	r9,r8[0x8]
8000020a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000020e:	91 29       	st.w	r8[0x8],r9
	}
	return 0;
80000210:	30 08       	mov	r8,0
}
80000212:	10 9c       	mov	r12,r8
80000214:	2f ed       	sub	sp,-8
80000216:	e3 cd 80 80 	ldm	sp++,r7,pc
8000021a:	00 00       	add	r0,r0
8000021c:	00 00       	add	r0,r0
8000021e:	05 d0       	ld.ub	r0,r2[0x5]

80000220 <usart_options>:
80000220:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 31     ............tsk1
80000230:	00 00 00 00 74 73 6b 32 00 00 00 00 74 73 6b 33     ....tsk2....tsk3
80000240:	00 00 00 00                                         ....

80000244 <task1>:
/*************************************************************
 * Task1
 * Blink LED0
 ************************************************************/
void task1(void)
{
80000244:	eb cd 40 80 	pushm	r7,lr
80000248:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(&mutex);
8000024a:	48 9c       	lddpc	r12,8000026c <task1+0x28>
8000024c:	f0 1f 00 09 	mcall	80000270 <task1+0x2c>
		ledOn(LED0_GPIO);
80000250:	33 bc       	mov	r12,59
80000252:	f0 1f 00 09 	mcall	80000274 <task1+0x30>
		ROSA_delay(500);
80000256:	e0 6a 01 f4 	mov	r10,500
8000025a:	30 0b       	mov	r11,0
8000025c:	f0 1f 00 07 	mcall	80000278 <task1+0x34>
		ROSA_semaphoreUnlock(&mutex);
80000260:	48 3c       	lddpc	r12,8000026c <task1+0x28>
80000262:	f0 1f 00 07 	mcall	8000027c <task1+0x38>
		ROSA_yield();
80000266:	f0 1f 00 07 	mcall	80000280 <task1+0x3c>
	}
8000026a:	cf 0b       	rjmp	8000024a <task1+0x6>
8000026c:	00 00       	add	r0,r0
8000026e:	05 e0       	ld.ub	r0,r2[0x6]
80000270:	80 00       	ld.sh	r0,r0[0x0]
80000272:	00 c4       	st.b	r0++,r4
80000274:	80 00       	ld.sh	r0,r0[0x0]
80000276:	0f 98       	ld.ub	r8,r7[0x1]
80000278:	80 00       	ld.sh	r0,r0[0x0]
8000027a:	0a c4       	st.b	r5++,r4
8000027c:	80 00       	ld.sh	r0,r0[0x0]
8000027e:	01 ac       	ld.ub	r12,r0[0x2]
80000280:	80 00       	ld.sh	r0,r0[0x0]
80000282:	08 ee       	st.h	--r4,lr

80000284 <task3>:
/*************************************************************
 * Task 3
 * Idle
 ************************************************************/
void task3(void)
{
80000284:	eb cd 40 80 	pushm	r7,lr
80000288:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(&mutex);
8000028a:	48 9c       	lddpc	r12,800002ac <task3+0x28>
8000028c:	f0 1f 00 09 	mcall	800002b0 <task3+0x2c>
		ledOff(LED0_GPIO);
80000290:	33 bc       	mov	r12,59
80000292:	f0 1f 00 09 	mcall	800002b4 <task3+0x30>
		ROSA_delay(500);
80000296:	e0 6a 01 f4 	mov	r10,500
8000029a:	30 0b       	mov	r11,0
8000029c:	f0 1f 00 07 	mcall	800002b8 <task3+0x34>
		ROSA_semaphoreUnlock(&mutex);
800002a0:	48 3c       	lddpc	r12,800002ac <task3+0x28>
800002a2:	f0 1f 00 07 	mcall	800002bc <task3+0x38>
		ROSA_yield();
800002a6:	f0 1f 00 07 	mcall	800002c0 <task3+0x3c>
	}
800002aa:	cf 0b       	rjmp	8000028a <task3+0x6>
800002ac:	00 00       	add	r0,r0
800002ae:	05 e0       	ld.ub	r0,r2[0x6]
800002b0:	80 00       	ld.sh	r0,r0[0x0]
800002b2:	00 c4       	st.b	r0++,r4
800002b4:	80 00       	ld.sh	r0,r0[0x0]
800002b6:	0f b8       	ld.ub	r8,r7[0x3]
800002b8:	80 00       	ld.sh	r0,r0[0x0]
800002ba:	0a c4       	st.b	r5++,r4
800002bc:	80 00       	ld.sh	r0,r0[0x0]
800002be:	01 ac       	ld.ub	r12,r0[0x2]
800002c0:	80 00       	ld.sh	r0,r0[0x0]
800002c2:	08 ee       	st.h	--r4,lr

800002c4 <task2>:
/*************************************************************
 * Task2
 * Blink LED1
 ************************************************************/
void task2(void)
{
800002c4:	eb cd 40 80 	pushm	r7,lr
800002c8:	1a 97       	mov	r7,sp
	while(1) {
		//ROSA_taskDelete(&t2_tcb);
		ROSA_yield();
800002ca:	f0 1f 00 02 	mcall	800002d0 <task2+0xc>
	}
800002ce:	cf eb       	rjmp	800002ca <task2+0x6>
800002d0:	80 00       	ld.sh	r0,r0[0x0]
800002d2:	08 ee       	st.h	--r4,lr

800002d4 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
800002d4:	eb cd 40 80 	pushm	r7,lr
800002d8:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
800002da:	f0 1f 00 11 	mcall	8000031c <main+0x48>
	
	//Create tasks and install them into the ROSA kernel
	ROSA_taskCreate(&t1_tcb, "tsk1", task1, T1_STACK_SIZE, 1);
800002de:	30 18       	mov	r8,1
800002e0:	e0 69 01 00 	mov	r9,256
800002e4:	48 fa       	lddpc	r10,80000320 <main+0x4c>
800002e6:	49 0b       	lddpc	r11,80000324 <main+0x50>
800002e8:	49 0c       	lddpc	r12,80000328 <main+0x54>
800002ea:	f0 1f 00 11 	mcall	8000032c <main+0x58>
	ROSA_taskCreate(&t2_tcb, "tsk2", task2, T2_STACK_SIZE, 0);
800002ee:	30 08       	mov	r8,0
800002f0:	e0 69 01 00 	mov	r9,256
800002f4:	48 fa       	lddpc	r10,80000330 <main+0x5c>
800002f6:	49 0b       	lddpc	r11,80000334 <main+0x60>
800002f8:	49 0c       	lddpc	r12,80000338 <main+0x64>
800002fa:	f0 1f 00 0d 	mcall	8000032c <main+0x58>
	ROSA_taskCreate(&t3_tcb, "tsk3", task3, T3_STACK_SIZE, 1);
800002fe:	30 18       	mov	r8,1
80000300:	32 09       	mov	r9,32
80000302:	48 fa       	lddpc	r10,8000033c <main+0x68>
80000304:	48 fb       	lddpc	r11,80000340 <main+0x6c>
80000306:	49 0c       	lddpc	r12,80000344 <main+0x70>
80000308:	f0 1f 00 09 	mcall	8000032c <main+0x58>
	ROSA_semaphoreCreate(&mutex, 1);
8000030c:	30 1b       	mov	r11,1
8000030e:	48 fc       	lddpc	r12,80000348 <main+0x74>
80000310:	f0 1f 00 0f 	mcall	8000034c <main+0x78>
	ROSA_tcbInstall(&t2_tcb);*/

	//Start the ROSA kernel
	//TCBLIST = PA[2]->nexttcb;
	//ROSA_start();
	ROSA_startScheduler();
80000314:	f0 1f 00 0f 	mcall	80000350 <main+0x7c>
	//ledOn(LED1_GPIO);
	/* Execution will never return here */
	while(1);
80000318:	c0 08       	rjmp	80000318 <main+0x44>
8000031a:	00 00       	add	r0,r0
8000031c:	80 00       	ld.sh	r0,r0[0x0]
8000031e:	05 b0       	ld.ub	r0,r2[0x3]
80000320:	80 00       	ld.sh	r0,r0[0x0]
80000322:	02 44       	or	r4,r1
80000324:	80 00       	ld.sh	r0,r0[0x0]
80000326:	02 2c       	rsub	r12,r1
80000328:	00 00       	add	r0,r0
8000032a:	05 e4       	ld.ub	r4,r2[0x6]
8000032c:	80 00       	ld.sh	r0,r0[0x0]
8000032e:	07 40       	ld.w	r0,--r3
80000330:	80 00       	ld.sh	r0,r0[0x0]
80000332:	02 c4       	st.b	r1++,r4
80000334:	80 00       	ld.sh	r0,r0[0x0]
80000336:	02 34       	cp.w	r4,r1
80000338:	00 00       	add	r0,r0
8000033a:	05 dc       	ld.ub	r12,r2[0x5]
8000033c:	80 00       	ld.sh	r0,r0[0x0]
8000033e:	02 84       	andn	r4,r1
80000340:	80 00       	ld.sh	r0,r0[0x0]
80000342:	02 3c       	cp.w	r12,r1
80000344:	00 00       	add	r0,r0
80000346:	05 d4       	ld.ub	r4,r2[0x5]
80000348:	00 00       	add	r0,r0
8000034a:	05 e0       	ld.ub	r0,r2[0x6]
8000034c:	80 00       	ld.sh	r0,r0[0x0]
8000034e:	00 70       	tst	r0,r0
80000350:	80 00       	ld.sh	r0,r0[0x0]
80000352:	09 64       	ld.uh	r4,--r4

80000354 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
80000354:	eb cd 40 80 	pushm	r7,lr
80000358:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
8000035a:	f0 1f 00 05 	mcall	8000036c <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
8000035e:	f0 1f 00 05 	mcall	80000370 <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it
80000362:	f0 1f 00 05 	mcall	80000374 <ROSA_yieldFromISR+0x20>
}
80000366:	e3 cd 80 80 	ldm	sp++,r7,pc
8000036a:	00 00       	add	r0,r0
8000036c:	80 00       	ld.sh	r0,r0[0x0]
8000036e:	1f 7e       	ld.ub	lr,--pc
80000370:	80 00       	ld.sh	r0,r0[0x0]
80000372:	09 0c       	ld.w	r12,r4++
80000374:	80 00       	ld.sh	r0,r0[0x0]
80000376:	1f b8       	ld.ub	r8,pc[0x3]

80000378 <usart_options>:
80000378:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
80000388:	0a 00 00 00 69 64 6c 65 00 00 00 00                 ....idle....

80000394 <idle>:

/** @fn void idle(void)
	@brief Idle task body.
*/
void idle(void)
{
80000394:	eb cd 40 80 	pushm	r7,lr
80000398:	1a 97       	mov	r7,sp
	while(1)
	{
		usartWriteLine(USART, "idle\n");
8000039a:	48 4b       	lddpc	r11,800003a8 <idle+0x14>
8000039c:	fe 7c 14 00 	mov	r12,-60416
800003a0:	f0 1f 00 03 	mcall	800003ac <idle+0x18>
	}
800003a4:	cf bb       	rjmp	8000039a <idle+0x6>
800003a6:	00 00       	add	r0,r0
800003a8:	80 00       	ld.sh	r0,r0[0x0]
800003aa:	03 84       	ld.ub	r4,r1[0x0]
800003ac:	80 00       	ld.sh	r0,r0[0x0]
800003ae:	13 08       	ld.w	r8,r9++

800003b0 <idleCreate>:

/** @fn void idleCreate(void)
	@brief Creation of the idle task.
*/
void idleCreate(void)
{
800003b0:	eb cd 40 80 	pushm	r7,lr
800003b4:	1a 97       	mov	r7,sp
	ROSA_tcbCreate(&IDLETASK_TCB, "idle", idle, idle_stack, IDLE_STACK_SIZE);
800003b6:	32 08       	mov	r8,32
800003b8:	48 69       	lddpc	r9,800003d0 <idleCreate+0x20>
800003ba:	48 7a       	lddpc	r10,800003d4 <idleCreate+0x24>
800003bc:	48 7b       	lddpc	r11,800003d8 <idleCreate+0x28>
800003be:	48 8c       	lddpc	r12,800003dc <idleCreate+0x2c>
800003c0:	f0 1f 00 08 	mcall	800003e0 <idleCreate+0x30>
	IDLETASK = &IDLETASK_TCB;
800003c4:	48 88       	lddpc	r8,800003e4 <idleCreate+0x34>
800003c6:	48 69       	lddpc	r9,800003dc <idleCreate+0x2c>
800003c8:	91 09       	st.w	r8[0x0],r9
}
800003ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800003ce:	00 00       	add	r0,r0
800003d0:	00 00       	add	r0,r0
800003d2:	05 18       	ld.sh	r8,r2++
800003d4:	80 00       	ld.sh	r0,r0[0x0]
800003d6:	03 94       	ld.ub	r4,r1[0x1]
800003d8:	80 00       	ld.sh	r0,r0[0x0]
800003da:	03 8c       	ld.ub	r12,r1[0x0]
800003dc:	00 00       	add	r0,r0
800003de:	06 28       	rsub	r8,r3
800003e0:	80 00       	ld.sh	r0,r0[0x0]
800003e2:	06 8c       	andn	r12,r3
800003e4:	00 00       	add	r0,r0
800003e6:	05 e8       	ld.ub	r8,r2[0x6]

800003e8 <readyQueueInsert>:
	@brief Inserts the given task into the ready queue by its priority.
	@param th Task structure (tcb structure).
	@return A status code (1 - item has been added to the empty queue, 0 - otherwise).
*/
int readyQueueInsert(ROSA_taskHandle_t ** pth)
{
800003e8:	eb cd 40 80 	pushm	r7,lr
800003ec:	1a 97       	mov	r7,sp
800003ee:	20 3d       	sub	sp,12
800003f0:	ef 4c ff f4 	st.w	r7[-12],r12
	uint8_t priority;
	int retval;
	
	priority = (*pth)->priority;
800003f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800003f8:	70 08       	ld.w	r8,r8[0x0]
800003fa:	f1 38 00 64 	ld.ub	r8,r8[100]
800003fe:	ef 68 ff fb 	st.b	r7[-5],r8
	
	/* Check the given queue for the emptiness */
	if (PA[priority] == NULL)
80000402:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000406:	4a 08       	lddpc	r8,80000484 <readyQueueInsert+0x9c>
80000408:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000040c:	58 08       	cp.w	r8,0
8000040e:	c1 61       	brne	8000043a <readyQueueInsert+0x52>
	{
		PA[priority] = *pth;
80000410:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000414:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000418:	70 0a       	ld.w	r10,r8[0x0]
8000041a:	49 b8       	lddpc	r8,80000484 <readyQueueInsert+0x9c>
8000041c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		PA[priority]->nexttcb = *pth;
80000420:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000424:	49 88       	lddpc	r8,80000484 <readyQueueInsert+0x9c>
80000426:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000042a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000042e:	72 09       	ld.w	r9,r9[0x0]
80000430:	91 09       	st.w	r8[0x0],r9
		
		retval = 1;
80000432:	30 18       	mov	r8,1
80000434:	ef 48 ff fc 	st.w	r7[-4],r8
80000438:	c1 f8       	rjmp	80000476 <readyQueueInsert+0x8e>
	}
	else
	{
		(*pth)->nexttcb = PA[priority]->nexttcb;
8000043a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000043e:	70 08       	ld.w	r8,r8[0x0]
80000440:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80000444:	49 09       	lddpc	r9,80000484 <readyQueueInsert+0x9c>
80000446:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000044a:	72 09       	ld.w	r9,r9[0x0]
8000044c:	91 09       	st.w	r8[0x0],r9
		PA[priority]->nexttcb = *pth;
8000044e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000452:	48 d8       	lddpc	r8,80000484 <readyQueueInsert+0x9c>
80000454:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000458:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000045c:	72 09       	ld.w	r9,r9[0x0]
8000045e:	91 09       	st.w	r8[0x0],r9
		PA[priority] = *pth;
80000460:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000464:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000468:	70 0a       	ld.w	r10,r8[0x0]
8000046a:	48 78       	lddpc	r8,80000484 <readyQueueInsert+0x9c>
8000046c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		retval = 0;
80000470:	30 08       	mov	r8,0
80000472:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return retval;
80000476:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000047a:	10 9c       	mov	r12,r8
8000047c:	2f dd       	sub	sp,-12
8000047e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000482:	00 00       	add	r0,r0
80000484:	00 00       	add	r0,r0
80000486:	05 f0       	ld.ub	r0,r2[0x7]

80000488 <readyQueueExtract>:
	@brief Extracts the given task from the ready queue by its priority.
	@param th Task structure (tcb structure).
	@return A status code (1 - queue is empty after extraction, 0 - otherwise).
*/
int readyQueueExtract(ROSA_taskHandle_t ** pth)
{
80000488:	eb cd 40 80 	pushm	r7,lr
8000048c:	1a 97       	mov	r7,sp
8000048e:	20 4d       	sub	sp,16
80000490:	ef 4c ff f0 	st.w	r7[-16],r12
	ROSA_taskHandle_t * thTmp;
	uint8_t priority;
	int retval;
	
	priority = (*pth)->priority;
80000494:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000498:	70 08       	ld.w	r8,r8[0x0]
8000049a:	f1 38 00 64 	ld.ub	r8,r8[100]
8000049e:	ef 68 ff fb 	st.b	r7[-5],r8
	thTmp = PA[priority];
800004a2:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800004a6:	4a 58       	lddpc	r8,80000538 <readyQueueExtract+0xb0>
800004a8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800004ac:	ef 48 ff f4 	st.w	r7[-12],r8
	
	/* Check whether the deleted task is the last in the queue or not */
	if ((*pth)->nexttcb == *pth) 
800004b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800004b4:	70 08       	ld.w	r8,r8[0x0]
800004b6:	70 09       	ld.w	r9,r8[0x0]
800004b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800004bc:	70 08       	ld.w	r8,r8[0x0]
800004be:	10 39       	cp.w	r9,r8
800004c0:	c1 11       	brne	800004e2 <readyQueueExtract+0x5a>
	{
		/* It's enough to extract the deleted task from the queue */
		PA[priority] = NULL;
800004c2:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800004c6:	49 d8       	lddpc	r8,80000538 <readyQueueExtract+0xb0>
800004c8:	30 0a       	mov	r10,0
800004ca:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		retval = 1;
800004ce:	30 18       	mov	r8,1
800004d0:	ef 48 ff fc 	st.w	r7[-4],r8
800004d4:	c2 b8       	rjmp	8000052a <readyQueueExtract+0xa2>
	else 
	{
		/* Search for delete task */
		while (thTmp->nexttcb != (*pth)) 
		{
			thTmp = thTmp->nexttcb;
800004d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800004da:	70 08       	ld.w	r8,r8[0x0]
800004dc:	ef 48 ff f4 	st.w	r7[-12],r8
800004e0:	c0 28       	rjmp	800004e4 <readyQueueExtract+0x5c>
		retval = 1;
	}
	else 
	{
		/* Search for delete task */
		while (thTmp->nexttcb != (*pth)) 
800004e2:	d7 03       	nop
800004e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800004e8:	70 09       	ld.w	r9,r8[0x0]
800004ea:	ee f8 ff f0 	ld.w	r8,r7[-16]
800004ee:	70 08       	ld.w	r8,r8[0x0]
800004f0:	10 39       	cp.w	r9,r8
800004f2:	cf 21       	brne	800004d6 <readyQueueExtract+0x4e>
		{
			thTmp = thTmp->nexttcb;
		}
		
		/* Check whether the PA[priority] points to the deleted task or not */
		if (PA[priority] == *pth)
800004f4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800004f8:	49 08       	lddpc	r8,80000538 <readyQueueExtract+0xb0>
800004fa:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800004fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000502:	70 08       	ld.w	r8,r8[0x0]
80000504:	10 39       	cp.w	r9,r8
80000506:	c0 81       	brne	80000516 <readyQueueExtract+0x8e>
		{
			/* Move PA[priority] pointer to the previous task in the queue */ 
			PA[priority] = thTmp;
80000508:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000050c:	48 b8       	lddpc	r8,80000538 <readyQueueExtract+0xb0>
8000050e:	ee fa ff f4 	ld.w	r10,r7[-12]
80000512:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		}
		
		thTmp->nexttcb = (*pth)->nexttcb;
80000516:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000051a:	70 08       	ld.w	r8,r8[0x0]
8000051c:	70 09       	ld.w	r9,r8[0x0]
8000051e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000522:	91 09       	st.w	r8[0x0],r9
		
		retval = 0;
80000524:	30 08       	mov	r8,0
80000526:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return retval;
8000052a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000052e:	10 9c       	mov	r12,r8
80000530:	2f cd       	sub	sp,-16
80000532:	e3 cd 80 80 	ldm	sp++,r7,pc
80000536:	00 00       	add	r0,r0
80000538:	00 00       	add	r0,r0
8000053a:	05 f0       	ld.ub	r0,r2[0x7]

8000053c <readyQueueSearch>:
/** @fn int readyQueueSearch(void)
	@brief Search for the first non-empty highest priority queue.
	@return Pointer to the last tcb in the queue (in other words - PA[i]).
*/
tcb * readyQueueSearch(void)
{
8000053c:	eb cd 40 80 	pushm	r7,lr
80000540:	1a 97       	mov	r7,sp
80000542:	20 2d       	sub	sp,8
	int i = MAXNPRIO;
80000544:	30 c8       	mov	r8,12
80000546:	ef 48 ff f8 	st.w	r7[-8],r8
	tcb * rettcb;
	
	/* Search for the first non-empty queue. */
	while ( (PA[--i] == NULL) && (i > 0))
8000054a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000054e:	20 18       	sub	r8,1
80000550:	ef 48 ff f8 	st.w	r7[-8],r8
80000554:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000558:	49 48       	lddpc	r8,800005a8 <readyQueueSearch+0x6c>
8000055a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000055e:	58 08       	cp.w	r8,0
80000560:	c0 61       	brne	8000056c <readyQueueSearch+0x30>
80000562:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000566:	58 08       	cp.w	r8,0
80000568:	fe 99 ff f1 	brgt	8000054a <readyQueueSearch+0xe>
	{
		;
	}
		
	/* Check the PA for emptiness. */
	if ((i == 0) && (PA[i] == NULL))
8000056c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000570:	58 08       	cp.w	r8,0
80000572:	c0 d1       	brne	8000058c <readyQueueSearch+0x50>
80000574:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000578:	48 c8       	lddpc	r8,800005a8 <readyQueueSearch+0x6c>
8000057a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000057e:	58 08       	cp.w	r8,0
80000580:	c0 61       	brne	8000058c <readyQueueSearch+0x50>
	{
		rettcb = IDLETASK;
80000582:	48 b8       	lddpc	r8,800005ac <readyQueueSearch+0x70>
80000584:	70 08       	ld.w	r8,r8[0x0]
80000586:	ef 48 ff fc 	st.w	r7[-4],r8
	{
		;
	}
		
	/* Check the PA for emptiness. */
	if ((i == 0) && (PA[i] == NULL))
8000058a:	c0 88       	rjmp	8000059a <readyQueueSearch+0x5e>
	{
		rettcb = IDLETASK;
	}
	else
	{
		rettcb = PA[i];
8000058c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000590:	48 68       	lddpc	r8,800005a8 <readyQueueSearch+0x6c>
80000592:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000596:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return rettcb;
8000059a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000059e:	10 9c       	mov	r12,r8
800005a0:	2f ed       	sub	sp,-8
800005a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800005a6:	00 00       	add	r0,r0
800005a8:	00 00       	add	r0,r0
800005aa:	05 f0       	ld.ub	r0,r2[0x7]
800005ac:	00 00       	add	r0,r0
800005ae:	05 e8       	ld.ub	r8,r2[0x6]

800005b0 <ROSA_init>:

void ROSA_init(void)
{
800005b0:	eb cd 40 80 	pushm	r7,lr
800005b4:	1a 97       	mov	r7,sp
800005b6:	20 1d       	sub	sp,4
	int i = 0;
800005b8:	30 08       	mov	r8,0
800005ba:	ef 48 ff fc 	st.w	r7[-4],r8
	systemTick = 0;
800005be:	4a 3a       	lddpc	r10,80000648 <ROSA_init+0x98>
800005c0:	30 08       	mov	r8,0
800005c2:	30 09       	mov	r9,0
800005c4:	f4 e9 00 00 	st.d	r10[0],r8
	
	//Do initialization of I/O drivers
	ledInit();									//LEDs
800005c8:	f0 1f 00 21 	mcall	8000064c <ROSA_init+0x9c>
	buttonInit();								//Buttons
800005cc:	f0 1f 00 21 	mcall	80000650 <ROSA_init+0xa0>
	joystickInit();								//Joystick
800005d0:	f0 1f 00 21 	mcall	80000654 <ROSA_init+0xa4>
	potInit();									//Potentiometer
800005d4:	f0 1f 00 21 	mcall	80000658 <ROSA_init+0xa8>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
800005d8:	e0 6a 1b 00 	mov	r10,6912
800005dc:	ea 1a 00 b7 	orh	r10,0xb7
800005e0:	49 fb       	lddpc	r11,8000065c <ROSA_init+0xac>
800005e2:	fe 7c 14 00 	mov	r12,-60416
800005e6:	f0 1f 00 1f 	mcall	80000660 <ROSA_init+0xb0>

	interruptInit();
800005ea:	f0 1f 00 1f 	mcall	80000664 <ROSA_init+0xb4>
	interruptEnable();
800005ee:	f0 1f 00 1f 	mcall	80000668 <ROSA_init+0xb8>
	timerInit(1);
800005f2:	30 1c       	mov	r12,1
800005f4:	f0 1f 00 1e 	mcall	8000066c <ROSA_init+0xbc>
	timerStart();
800005f8:	f0 1f 00 1e 	mcall	80000670 <ROSA_init+0xc0>
	
	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
800005fc:	49 e8       	lddpc	r8,80000674 <ROSA_init+0xc4>
800005fe:	30 09       	mov	r9,0
80000600:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
80000602:	49 e8       	lddpc	r8,80000678 <ROSA_init+0xc8>
80000604:	30 09       	mov	r9,0
80000606:	91 09       	st.w	r8[0x0],r9
	PREEMPTASK = NULL;
80000608:	49 d8       	lddpc	r8,8000067c <ROSA_init+0xcc>
8000060a:	30 09       	mov	r9,0
8000060c:	91 09       	st.w	r8[0x0],r9
	LOCKEDSEMAPHORELIST=NULL;
8000060e:	49 d8       	lddpc	r8,80000680 <ROSA_init+0xd0>
80000610:	30 09       	mov	r9,0
80000612:	91 09       	st.w	r8[0x0],r9
	
	/* Create idle task. */
	idleCreate();
80000614:	f0 1f 00 1c 	mcall	80000684 <ROSA_init+0xd4>
	
	for (i = 0; i < MAXNPRIO; i++) {
80000618:	30 08       	mov	r8,0
8000061a:	ef 48 ff fc 	st.w	r7[-4],r8
8000061e:	c0 c8       	rjmp	80000636 <ROSA_init+0x86>
		PA[i] = NULL;
80000620:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000624:	49 98       	lddpc	r8,80000688 <ROSA_init+0xd8>
80000626:	30 0a       	mov	r10,0
80000628:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	LOCKEDSEMAPHORELIST=NULL;
	
	/* Create idle task. */
	idleCreate();
	
	for (i = 0; i < MAXNPRIO; i++) {
8000062c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000630:	2f f8       	sub	r8,-1
80000632:	ef 48 ff fc 	st.w	r7[-4],r8
80000636:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000063a:	58 b8       	cp.w	r8,11
8000063c:	fe 9a ff f2 	brle	80000620 <ROSA_init+0x70>
		PA[i] = NULL;
	}
	
	//Initialize the timer to 1 ms period.
	
}
80000640:	2f fd       	sub	sp,-4
80000642:	e3 cd 80 80 	ldm	sp++,r7,pc
80000646:	00 00       	add	r0,r0
80000648:	00 00       	add	r0,r0
8000064a:	06 a0       	st.w	r3++,r0
8000064c:	80 00       	ld.sh	r0,r0[0x0]
8000064e:	0f 0c       	ld.w	r12,r7++
80000650:	80 00       	ld.sh	r0,r0[0x0]
80000652:	0d 64       	ld.uh	r4,--r6
80000654:	80 00       	ld.sh	r0,r0[0x0]
80000656:	0d 8c       	ld.ub	r12,r6[0x0]
80000658:	80 00       	ld.sh	r0,r0[0x0]
8000065a:	0f d8       	ld.ub	r8,r7[0x5]
8000065c:	80 00       	ld.sh	r0,r0[0x0]
8000065e:	03 78       	ld.ub	r8,--r1
80000660:	80 00       	ld.sh	r0,r0[0x0]
80000662:	11 8c       	ld.ub	r12,r8[0x0]
80000664:	80 00       	ld.sh	r0,r0[0x0]
80000666:	1f 48       	ld.w	r8,--pc
80000668:	80 00       	ld.sh	r0,r0[0x0]
8000066a:	1f 6a       	ld.uh	r10,--pc
8000066c:	80 00       	ld.sh	r0,r0[0x0]
8000066e:	13 5c       	ld.sh	r12,--r9
80000670:	80 00       	ld.sh	r0,r0[0x0]
80000672:	13 8a       	ld.ub	r10,r9[0x0]
80000674:	00 00       	add	r0,r0
80000676:	05 ec       	ld.ub	r12,r2[0x6]
80000678:	00 00       	add	r0,r0
8000067a:	06 24       	rsub	r4,r3
8000067c:	00 00       	add	r0,r0
8000067e:	06 20       	rsub	r0,r3
80000680:	00 00       	add	r0,r0
80000682:	05 d0       	ld.ub	r0,r2[0x5]
80000684:	80 00       	ld.sh	r0,r0[0x0]
80000686:	03 b0       	ld.ub	r0,r1[0x3]
80000688:	00 00       	add	r0,r0
8000068a:	05 f0       	ld.ub	r0,r2[0x7]

8000068c <ROSA_tcbCreate>:

void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
8000068c:	eb cd 40 80 	pushm	r7,lr
80000690:	1a 97       	mov	r7,sp
80000692:	20 6d       	sub	sp,24
80000694:	ef 4c ff f8 	st.w	r7[-8],r12
80000698:	ef 4b ff f4 	st.w	r7[-12],r11
8000069c:	ef 4a ff f0 	st.w	r7[-16],r10
800006a0:	ef 49 ff ec 	st.w	r7[-20],r9
800006a4:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800006a8:	30 08       	mov	r8,0
800006aa:	ef 48 ff fc 	st.w	r7[-4],r8
800006ae:	c1 48       	rjmp	800006d6 <ROSA_tcbCreate+0x4a>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
800006b0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800006b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006b8:	ee fa ff f4 	ld.w	r10,r7[-12]
800006bc:	f4 08 00 08 	add	r8,r10,r8
800006c0:	11 88       	ld.ub	r8,r8[0x0]
800006c2:	ee fa ff f8 	ld.w	r10,r7[-8]
800006c6:	f4 09 00 09 	add	r9,r10,r9
800006ca:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800006cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006d0:	2f f8       	sub	r8,-1
800006d2:	ef 48 ff fc 	st.w	r7[-4],r8
800006d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006da:	58 38       	cp.w	r8,3
800006dc:	fe 9a ff ea 	brle	800006b0 <ROSA_tcbCreate+0x24>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
800006e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006e4:	30 09       	mov	r9,0
800006e6:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
800006e8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800006ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006f0:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
800006f2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800006f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006fa:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
800006fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000700:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000704:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
80000706:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000070a:	a3 68       	lsl	r8,0x2
8000070c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000710:	10 09       	add	r9,r8
80000712:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000716:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
80000718:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000071c:	70 39       	ld.w	r9,r8[0xc]
8000071e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000722:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
80000724:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000728:	fc 19 00 1c 	movh	r9,0x1c
8000072c:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
8000072e:	ee fc ff f8 	ld.w	r12,r7[-8]
80000732:	f0 1f 00 03 	mcall	8000073c <ROSA_tcbCreate+0xb0>
}
80000736:	2f ad       	sub	sp,-24
80000738:	e3 cd 80 80 	ldm	sp++,r7,pc
8000073c:	80 00       	ld.sh	r0,r0[0x0]
8000073e:	08 62       	and	r2,r4

80000740 <ROSA_taskCreate>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

int16_t ROSA_taskCreate(ROSA_taskHandle_t ** pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
80000740:	eb cd 40 80 	pushm	r7,lr
80000744:	1a 97       	mov	r7,sp
80000746:	20 6d       	sub	sp,24
80000748:	ef 4c ff f8 	st.w	r7[-8],r12
8000074c:	ef 4b ff f4 	st.w	r7[-12],r11
80000750:	ef 4a ff f0 	st.w	r7[-16],r10
80000754:	ef 49 ff ec 	st.w	r7[-20],r9
80000758:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) calloc(stackSize, sizeof(uint32_t)); 
8000075c:	30 4b       	mov	r11,4
8000075e:	ee fc ff ec 	ld.w	r12,r7[-20]
80000762:	f0 1f 00 2b 	mcall	8000080c <ROSA_taskCreate+0xcc>
80000766:	18 98       	mov	r8,r12
80000768:	ef 48 ff fc 	st.w	r7[-4],r8
	
	*pth = (ROSA_taskHandle_t *) malloc(sizeof(ROSA_taskHandle_t));			
8000076c:	37 4c       	mov	r12,116
8000076e:	f0 1f 00 29 	mcall	80000810 <ROSA_taskCreate+0xd0>
80000772:	18 98       	mov	r8,r12
80000774:	10 99       	mov	r9,r8
80000776:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000077a:	91 09       	st.w	r8[0x0],r9
	(*pth)->priority = priority;
8000077c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000780:	70 09       	ld.w	r9,r8[0x0]
80000782:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80000786:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
8000078a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000078e:	70 0a       	ld.w	r10,r8[0x0]
80000790:	30 08       	mov	r8,0
80000792:	30 09       	mov	r9,0
80000794:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
80000798:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000079c:	70 09       	ld.w	r9,r8[0x0]
8000079e:	30 08       	mov	r8,0
800007a0:	f3 68 00 70 	st.b	r9[112],r8
	(*pth)->originalPriority = priority;
800007a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007a8:	70 09       	ld.w	r9,r8[0x0]
800007aa:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800007ae:	f3 68 00 71 	st.b	r9[113],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
800007b2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800007b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800007ba:	72 0c       	ld.w	r12,r9[0x0]
800007bc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800007c0:	ee fa ff f0 	ld.w	r10,r7[-16]
800007c4:	ee fb ff f4 	ld.w	r11,r7[-12]
800007c8:	f0 1f 00 13 	mcall	80000814 <ROSA_taskCreate+0xd4>
	
	readyQueueInsert(pth);
800007cc:	ee fc ff f8 	ld.w	r12,r7[-8]
800007d0:	f0 1f 00 12 	mcall	80000818 <ROSA_taskCreate+0xd8>
	
	if (EXECTASK != NULL) {
800007d4:	49 28       	lddpc	r8,8000081c <ROSA_taskCreate+0xdc>
800007d6:	70 08       	ld.w	r8,r8[0x0]
800007d8:	58 08       	cp.w	r8,0
800007da:	c1 40       	breq	80000802 <ROSA_taskCreate+0xc2>
		if (EXECTASK->priority < priority) {
800007dc:	49 08       	lddpc	r8,8000081c <ROSA_taskCreate+0xdc>
800007de:	70 08       	ld.w	r8,r8[0x0]
800007e0:	f1 38 00 64 	ld.ub	r8,r8[100]
800007e4:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800007e8:	f0 09 18 00 	cp.b	r9,r8
800007ec:	e0 88 00 0b 	brls	80000802 <ROSA_taskCreate+0xc2>
			PREEMPTASK = PA[priority];
800007f0:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800007f4:	48 b8       	lddpc	r8,80000820 <ROSA_taskCreate+0xe0>
800007f6:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800007fa:	48 b8       	lddpc	r8,80000824 <ROSA_taskCreate+0xe4>
800007fc:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
800007fe:	f0 1f 00 0b 	mcall	80000828 <ROSA_taskCreate+0xe8>
		}	
	}
	
	return 0;
80000802:	30 08       	mov	r8,0
}
80000804:	10 9c       	mov	r12,r8
80000806:	2f ad       	sub	sp,-24
80000808:	e3 cd 80 80 	ldm	sp++,r7,pc
8000080c:	80 00       	ld.sh	r0,r0[0x0]
8000080e:	14 94       	mov	r4,r10
80000810:	80 00       	ld.sh	r0,r0[0x0]
80000812:	15 0c       	ld.w	r12,r10++
80000814:	80 00       	ld.sh	r0,r0[0x0]
80000816:	06 8c       	andn	r12,r3
80000818:	80 00       	ld.sh	r0,r0[0x0]
8000081a:	03 e8       	ld.ub	r8,r1[0x6]
8000081c:	00 00       	add	r0,r0
8000081e:	06 24       	rsub	r4,r3
80000820:	00 00       	add	r0,r0
80000822:	05 f0       	ld.ub	r0,r2[0x7]
80000824:	00 00       	add	r0,r0
80000826:	06 20       	rsub	r0,r3
80000828:	80 00       	ld.sh	r0,r0[0x0]
8000082a:	08 ee       	st.h	--r4,lr

8000082c <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
8000082c:	4b 5c       	lddpc	r12,80000900 <_yield+0xa>
	lda.w r11,EXECTASK
8000082e:	4b 6b       	lddpc	r11,80000904 <_yield+0xe>
	ld.w r12,r12[0x0]
80000830:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
80000832:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000834:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000836:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000838:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
8000083c:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
8000083e:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
80000840:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
80000842:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80000846:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000848:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
8000084a:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
8000084c:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
8000084e:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
80000850:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
80000852:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000854:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80000856:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000858:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
8000085a:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
8000085c:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
8000085e:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000860:	1c 9f       	mov	pc,lr

80000862 <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
80000862:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000864:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80000866:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000868:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
8000086c:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80000870:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000874:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000878:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
8000087c:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000880:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000884:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000888:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
8000088c:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
8000088e:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80000890:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
80000892:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000894:	1c 9f       	mov	pc,lr

80000896 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
80000896:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000898:	49 bc       	lddpc	r12,80000904 <_yield+0xe>
	ld.w r12,r12[0x0]
8000089a:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
8000089c:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
8000089e:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
800008a0:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
800008a2:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
800008a4:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
800008a6:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
800008a8:	33 40       	mov	r0,52
	add r0,r12
800008aa:	18 00       	add	r0,r12
	stmts r0,r0-r11
800008ac:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
800008b0:	1a 90       	mov	r0,sp
	st.w --sp,r0
800008b2:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800008b4:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
800008b8:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
800008ba:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
800008bc:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
800008be:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
800008c0:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
800008c2:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
800008c4:	1c 9f       	mov	pc,lr

800008c6 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800008c6:	49 0c       	lddpc	r12,80000904 <_yield+0xe>
	ld.w r12,r12[0x0]
800008c8:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
800008ca:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
800008cc:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
800008ce:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
800008d2:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
800008d4:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800008d6:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
800008d8:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800008da:	33 40       	mov	r0,52
	add r0,r12
800008dc:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800008de:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800008e2:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
800008e4:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800008e6:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
800008e8:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
800008ea:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
800008ec:	d6 13       	rets

800008ee <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
800008ee:	d4 01       	pushm	lr
	lda.w lr,_yield
800008f0:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
800008f4:	d7 33       	scall

800008f6 <_yield>:
_yield:
	call contextSave
800008f6:	cd 0f       	rcall	80000896 <contextSave>
	call scheduler
800008f8:	f0 1f 00 04 	mcall	80000908 <_yield+0x12>
	call contextRestore
800008fc:	ce 5f       	rcall	800008c6 <contextRestore>
800008fe:	00 00       	add	r0,r0
80000900:	00 00       	add	r0,r0
80000902:	05 ec       	ld.ub	r12,r2[0x6]
80000904:	00 00       	add	r0,r0
80000906:	06 24       	rsub	r4,r3
80000908:	80 00       	ld.sh	r0,r0[0x0]
8000090a:	09 0c       	ld.w	r12,r4++

8000090c <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
8000090c:	eb cd 40 80 	pushm	r7,lr
80000910:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK == NULL) {
80000912:	49 28       	lddpc	r8,80000958 <scheduler+0x4c>
80000914:	70 08       	ld.w	r8,r8[0x0]
80000916:	58 08       	cp.w	r8,0
80000918:	c1 61       	brne	80000944 <scheduler+0x38>
		PA[EXECTASK->priority] = EXECTASK;
8000091a:	49 18       	lddpc	r8,8000095c <scheduler+0x50>
8000091c:	70 08       	ld.w	r8,r8[0x0]
8000091e:	f1 38 00 64 	ld.ub	r8,r8[100]
80000922:	10 99       	mov	r9,r8
80000924:	48 e8       	lddpc	r8,8000095c <scheduler+0x50>
80000926:	70 0a       	ld.w	r10,r8[0x0]
80000928:	48 e8       	lddpc	r8,80000960 <scheduler+0x54>
8000092a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		if (EXECTASK->nexttcb != NULL)
8000092e:	48 c8       	lddpc	r8,8000095c <scheduler+0x50>
80000930:	70 08       	ld.w	r8,r8[0x0]
80000932:	70 08       	ld.w	r8,r8[0x0]
80000934:	58 08       	cp.w	r8,0
80000936:	c0 e0       	breq	80000952 <scheduler+0x46>
		{
			EXECTASK = EXECTASK->nexttcb;
80000938:	48 98       	lddpc	r8,8000095c <scheduler+0x50>
8000093a:	70 08       	ld.w	r8,r8[0x0]
8000093c:	70 09       	ld.w	r9,r8[0x0]
8000093e:	48 88       	lddpc	r8,8000095c <scheduler+0x50>
80000940:	91 09       	st.w	r8[0x0],r9
80000942:	c0 88       	rjmp	80000952 <scheduler+0x46>
		}
	}
	else {
		EXECTASK = PREEMPTASK;
80000944:	48 58       	lddpc	r8,80000958 <scheduler+0x4c>
80000946:	70 09       	ld.w	r9,r8[0x0]
80000948:	48 58       	lddpc	r8,8000095c <scheduler+0x50>
8000094a:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
8000094c:	48 38       	lddpc	r8,80000958 <scheduler+0x4c>
8000094e:	30 09       	mov	r9,0
80000950:	91 09       	st.w	r8[0x0],r9
	}
}
80000952:	e3 cd 80 80 	ldm	sp++,r7,pc
80000956:	00 00       	add	r0,r0
80000958:	00 00       	add	r0,r0
8000095a:	06 20       	rsub	r0,r3
8000095c:	00 00       	add	r0,r0
8000095e:	06 24       	rsub	r4,r3
80000960:	00 00       	add	r0,r0
80000962:	05 f0       	ld.ub	r0,r2[0x7]

80000964 <ROSA_startScheduler>:

void ROSA_startScheduler(void)
{
80000964:	eb cd 40 80 	pushm	r7,lr
80000968:	1a 97       	mov	r7,sp
8000096a:	20 1d       	sub	sp,4
	tcb * tmp = readyQueueSearch();	
8000096c:	f0 1f 00 08 	mcall	8000098c <ROSA_startScheduler+0x28>
80000970:	18 98       	mov	r8,r12
80000972:	ef 48 ff fc 	st.w	r7[-4],r8
	
	TCBLIST = tmp->nexttcb;
80000976:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000097a:	70 09       	ld.w	r9,r8[0x0]
8000097c:	48 58       	lddpc	r8,80000990 <ROSA_startScheduler+0x2c>
8000097e:	91 09       	st.w	r8[0x0],r9
	
	ROSA_start();
80000980:	f0 1f 00 05 	mcall	80000994 <ROSA_startScheduler+0x30>
}
80000984:	2f fd       	sub	sp,-4
80000986:	e3 cd 80 80 	ldm	sp++,r7,pc
8000098a:	00 00       	add	r0,r0
8000098c:	80 00       	ld.sh	r0,r0[0x0]
8000098e:	05 3c       	ld.ub	r12,r2++
80000990:	00 00       	add	r0,r0
80000992:	05 ec       	ld.ub	r12,r2[0x6]
80000994:	80 00       	ld.sh	r0,r0[0x0]
80000996:	08 2c       	rsub	r12,r4

80000998 <C.12.9559>:
80000998:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

800009a8 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
800009a8:	eb cd 40 80 	pushm	r7,lr
800009ac:	1a 97       	mov	r7,sp
800009ae:	20 5d       	sub	sp,20
	interruptDisable();
800009b0:	f0 1f 00 35 	mcall	80000a84 <timerISR+0xdc>
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
800009b4:	fe 78 38 00 	mov	r8,-51200
800009b8:	ef 48 ff f4 	st.w	r7[-12],r8
	ROSA_taskHandle_t * tmptsk;
	ROSA_taskHandle_t * tmp;
	bool interruptTask;
	
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
800009bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009c0:	70 88       	ld.w	r8,r8[0x20]
800009c2:	ef 48 ff f0 	st.w	r7[-16],r8
	if (sr & AVR32_TC_CPCS_MASK)
800009c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009ca:	e2 18 00 10 	andl	r8,0x10,COH
800009ce:	c5 50       	breq	80000a78 <timerISR+0xd0>
	{
		systemTick++;
800009d0:	4a e8       	lddpc	r8,80000a88 <timerISR+0xe0>
800009d2:	f0 ea 00 00 	ld.d	r10,r8[0]
800009d6:	30 18       	mov	r8,1
800009d8:	30 09       	mov	r9,0
800009da:	f4 08 00 08 	add	r8,r10,r8
800009de:	f6 09 00 49 	adc	r9,r11,r9
800009e2:	4a aa       	lddpc	r10,80000a88 <timerISR+0xe0>
800009e4:	f4 e9 00 00 	st.d	r10[0],r8
		interruptTask = false;
800009e8:	30 08       	mov	r8,0
800009ea:	ef 68 ff ff 	st.b	r7[-1],r8
		
		while (DELAYQUEUE != NULL && DELAYQUEUE->delay <= systemTick)
800009ee:	c1 68       	rjmp	80000a1a <timerISR+0x72>
		{
			tmptsk = DELAYQUEUE;
800009f0:	4a 78       	lddpc	r8,80000a8c <timerISR+0xe4>
800009f2:	70 08       	ld.w	r8,r8[0x0]
800009f4:	ef 48 ff ec 	st.w	r7[-20],r8
			removeDelayQueue(&DELAYQUEUE);
800009f8:	4a 5c       	lddpc	r12,80000a8c <timerISR+0xe4>
800009fa:	f0 1f 00 26 	mcall	80000a90 <timerISR+0xe8>
			tmptsk->delay = 0;
800009fe:	ee fa ff ec 	ld.w	r10,r7[-20]
80000a02:	30 08       	mov	r8,0
80000a04:	30 09       	mov	r9,0
80000a06:	f4 e9 00 68 	st.d	r10[104],r8
			readyQueueInsert(&tmptsk);
80000a0a:	ee c8 00 14 	sub	r8,r7,20
80000a0e:	10 9c       	mov	r12,r8
80000a10:	f0 1f 00 21 	mcall	80000a94 <timerISR+0xec>
			interruptTask = true;
80000a14:	30 18       	mov	r8,1
80000a16:	ef 68 ff ff 	st.b	r7[-1],r8
	if (sr & AVR32_TC_CPCS_MASK)
	{
		systemTick++;
		interruptTask = false;
		
		while (DELAYQUEUE != NULL && DELAYQUEUE->delay <= systemTick)
80000a1a:	49 d8       	lddpc	r8,80000a8c <timerISR+0xe4>
80000a1c:	70 08       	ld.w	r8,r8[0x0]
80000a1e:	58 08       	cp.w	r8,0
80000a20:	c0 d0       	breq	80000a3a <timerISR+0x92>
80000a22:	49 b8       	lddpc	r8,80000a8c <timerISR+0xe4>
80000a24:	70 08       	ld.w	r8,r8[0x0]
80000a26:	f0 ea 00 68 	ld.d	r10,r8[104]
80000a2a:	49 88       	lddpc	r8,80000a88 <timerISR+0xe0>
80000a2c:	f0 e8 00 00 	ld.d	r8,r8[0]
80000a30:	10 3a       	cp.w	r10,r8
80000a32:	f2 0b 13 00 	cpc	r11,r9
80000a36:	fe 98 ff dd 	brls	800009f0 <timerISR+0x48>
			removeDelayQueue(&DELAYQUEUE);
			tmptsk->delay = 0;
			readyQueueInsert(&tmptsk);
			interruptTask = true;
		}
		if (interruptTask)
80000a3a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000a3e:	30 08       	mov	r8,0
80000a40:	f0 09 18 00 	cp.b	r9,r8
80000a44:	c1 a0       	breq	80000a78 <timerISR+0xd0>
		{
			tmp = readyQueueSearch();
80000a46:	f0 1f 00 15 	mcall	80000a98 <timerISR+0xf0>
80000a4a:	18 98       	mov	r8,r12
80000a4c:	ef 48 ff f8 	st.w	r7[-8],r8
			if (EXECTASK->priority < tmptsk->priority)
80000a50:	49 38       	lddpc	r8,80000a9c <timerISR+0xf4>
80000a52:	70 08       	ld.w	r8,r8[0x0]
80000a54:	f1 39 00 64 	ld.ub	r9,r8[100]
80000a58:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000a5c:	f1 38 00 64 	ld.ub	r8,r8[100]
80000a60:	f0 09 18 00 	cp.b	r9,r8
80000a64:	c0 a2       	brcc	80000a78 <timerISR+0xd0>
			{
				PREEMPTASK = tmp->nexttcb;
80000a66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a6a:	70 09       	ld.w	r9,r8[0x0]
80000a6c:	48 d8       	lddpc	r8,80000aa0 <timerISR+0xf8>
80000a6e:	91 09       	st.w	r8[0x0],r9
				interruptEnable();
80000a70:	f0 1f 00 0d 	mcall	80000aa4 <timerISR+0xfc>
				ROSA_yieldFromISR();
80000a74:	f0 1f 00 0d 	mcall	80000aa8 <timerISR+0x100>
			}
		}
	}
	//timerClearInterrupt(); //Disabled until we know what it actually does
	interruptEnable();
80000a78:	f0 1f 00 0b 	mcall	80000aa4 <timerISR+0xfc>
}
80000a7c:	2f bd       	sub	sp,-20
80000a7e:	e3 cd 40 80 	ldm	sp++,r7,lr
80000a82:	d6 03       	rete
80000a84:	80 00       	ld.sh	r0,r0[0x0]
80000a86:	1f 66       	ld.uh	r6,--pc
80000a88:	00 00       	add	r0,r0
80000a8a:	06 a0       	st.w	r3++,r0
80000a8c:	00 00       	add	r0,r0
80000a8e:	06 9c       	mov	r12,r3
80000a90:	80 00       	ld.sh	r0,r0[0x0]
80000a92:	0c c4       	st.b	r6++,r4
80000a94:	80 00       	ld.sh	r0,r0[0x0]
80000a96:	03 e8       	ld.ub	r8,r1[0x6]
80000a98:	80 00       	ld.sh	r0,r0[0x0]
80000a9a:	05 3c       	ld.ub	r12,r2++
80000a9c:	00 00       	add	r0,r0
80000a9e:	06 24       	rsub	r4,r3
80000aa0:	00 00       	add	r0,r0
80000aa2:	06 20       	rsub	r0,r3
80000aa4:	80 00       	ld.sh	r0,r0[0x0]
80000aa6:	1f 6a       	ld.uh	r10,--pc
80000aa8:	80 00       	ld.sh	r0,r0[0x0]
80000aaa:	03 54       	ld.sh	r4,--r1

80000aac <ROSA_getTickCount>:
/*																		*/
/* Returns the current number of system ticks, relative to start		*/
/* of the system.                                                       */
/************************************************************************/
uint64_t ROSA_getTickCount()
{
80000aac:	eb cd 40 80 	pushm	r7,lr
80000ab0:	1a 97       	mov	r7,sp
	return systemTick;
80000ab2:	48 48       	lddpc	r8,80000ac0 <ROSA_getTickCount+0x14>
80000ab4:	f0 e8 00 00 	ld.d	r8,r8[0]
}
80000ab8:	10 9a       	mov	r10,r8
80000aba:	12 9b       	mov	r11,r9
80000abc:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ac0:	00 00       	add	r0,r0
80000ac2:	06 a0       	st.w	r3++,r0

80000ac4 <ROSA_delay>:
/* ROSA_delay()															*/
/*																		*/
/* Suspends the calling task for the given number of ticks				*/
/************************************************************************/
int16_t ROSA_delay(uint64_t ticks)
{
80000ac4:	eb cd 40 80 	pushm	r7,lr
80000ac8:	1a 97       	mov	r7,sp
80000aca:	20 3d       	sub	sp,12
80000acc:	ee eb ff f4 	st.d	r7[-12],r10
	readyQueueExtract(&EXECTASK);
80000ad0:	49 0c       	lddpc	r12,80000b10 <ROSA_delay+0x4c>
80000ad2:	f0 1f 00 11 	mcall	80000b14 <ROSA_delay+0x50>
	insertDelayQueue(&EXECTASK, ROSA_getTickCount() + ticks);
80000ad6:	f0 1f 00 11 	mcall	80000b18 <ROSA_delay+0x54>
80000ada:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000ade:	f4 08 00 08 	add	r8,r10,r8
80000ae2:	f6 09 00 49 	adc	r9,r11,r9
80000ae6:	10 9a       	mov	r10,r8
80000ae8:	12 9b       	mov	r11,r9
80000aea:	48 ac       	lddpc	r12,80000b10 <ROSA_delay+0x4c>
80000aec:	f0 1f 00 0c 	mcall	80000b1c <ROSA_delay+0x58>
	tcb * tmp = readyQueueSearch();
80000af0:	f0 1f 00 0c 	mcall	80000b20 <ROSA_delay+0x5c>
80000af4:	18 98       	mov	r8,r12
80000af6:	ef 48 ff fc 	st.w	r7[-4],r8
	if (tmp->priority >= 0)
	{
		PREEMPTASK = tmp;
80000afa:	48 b8       	lddpc	r8,80000b24 <ROSA_delay+0x60>
80000afc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000b00:	91 09       	st.w	r8[0x0],r9
	} else {
		return -1;
	}
	ROSA_yield();
80000b02:	f0 1f 00 0a 	mcall	80000b28 <ROSA_delay+0x64>
	return 0;
80000b06:	30 08       	mov	r8,0
}
80000b08:	10 9c       	mov	r12,r8
80000b0a:	2f dd       	sub	sp,-12
80000b0c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b10:	00 00       	add	r0,r0
80000b12:	06 24       	rsub	r4,r3
80000b14:	80 00       	ld.sh	r0,r0[0x0]
80000b16:	04 88       	andn	r8,r2
80000b18:	80 00       	ld.sh	r0,r0[0x0]
80000b1a:	0a ac       	st.w	r5++,r12
80000b1c:	80 00       	ld.sh	r0,r0[0x0]
80000b1e:	0b d4       	ld.ub	r4,r5[0x5]
80000b20:	80 00       	ld.sh	r0,r0[0x0]
80000b22:	05 3c       	ld.ub	r12,r2++
80000b24:	00 00       	add	r0,r0
80000b26:	06 20       	rsub	r0,r3
80000b28:	80 00       	ld.sh	r0,r0[0x0]
80000b2a:	08 ee       	st.h	--r4,lr

80000b2c <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80000b2c:	eb cd 40 80 	pushm	r7,lr
80000b30:	1a 97       	mov	r7,sp
80000b32:	20 7d       	sub	sp,28
80000b34:	ef 4c ff e4 	st.w	r7[-28],r12
	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000b38:	4a 48       	lddpc	r8,80000bc8 <timerPeriodSet+0x9c>
80000b3a:	ee ca 00 18 	sub	r10,r7,24
80000b3e:	10 9b       	mov	r11,r8
80000b40:	f6 e8 00 00 	ld.d	r8,r11[0]
80000b44:	f4 e9 00 00 	st.d	r10[0],r8
80000b48:	f6 e8 00 08 	ld.d	r8,r11[8]
80000b4c:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000b50:	30 48       	mov	r8,4
80000b52:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80000b56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b5a:	20 18       	sub	r8,1
80000b5c:	a3 68       	lsl	r8,0x2
80000b5e:	ee 08 00 08 	add	r8,r7,r8
80000b62:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000b66:	e0 68 1b 00 	mov	r8,6912
80000b6a:	ea 18 00 b7 	orh	r8,0xb7
80000b6e:	f0 09 0c 08 	divs	r8,r8,r9
80000b72:	10 99       	mov	r9,r8
80000b74:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b78:	b1 39       	mul	r9,r8
80000b7a:	e0 68 4d d3 	mov	r8,19923
80000b7e:	ea 18 10 62 	orh	r8,0x1062
80000b82:	f2 08 06 48 	mulu.d	r8,r9,r8
80000b86:	f2 08 16 06 	lsr	r8,r9,0x6
80000b8a:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80000b8e:	ee fc ff fc 	ld.w	r12,r7[-4]
80000b92:	f0 1f 00 0f 	mcall	80000bcc <timerPeriodSet+0xa0>
	timerRCSet(rc);
80000b96:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b9a:	f0 1f 00 0e 	mcall	80000bd0 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80000b9e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ba2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ba6:	f2 08 02 4a 	mul	r10,r9,r8
80000baa:	e0 68 9f 81 	mov	r8,40833
80000bae:	ea 18 16 5e 	orh	r8,0x165e
80000bb2:	f4 08 04 48 	muls.d	r8,r10,r8
80000bb6:	b5 49       	asr	r9,0x14
80000bb8:	f4 08 14 1f 	asr	r8,r10,0x1f
80000bbc:	f2 08 01 08 	sub	r8,r9,r8
}
80000bc0:	10 9c       	mov	r12,r8
80000bc2:	2f 9d       	sub	sp,-28
80000bc4:	e3 cd 80 80 	ldm	sp++,r7,pc
80000bc8:	80 00       	ld.sh	r0,r0[0x0]
80000bca:	09 98       	ld.ub	r8,r4[0x1]
80000bcc:	80 00       	ld.sh	r0,r0[0x0]
80000bce:	13 d0       	ld.ub	r0,r9[0x5]
80000bd0:	80 00       	ld.sh	r0,r0[0x0]
80000bd2:	13 ba       	ld.ub	r10,r9[0x3]

80000bd4 <insertDelayQueue>:
/*																		*/
/* Inserts the given task into the delay queue, before any tasks with	*/
/* a later deadline or lower priority									*/
/************************************************************************/
int insertDelayQueue(ROSA_taskHandle_t ** pth, uint64_t deadline)
{
80000bd4:	eb cd 40 80 	pushm	r7,lr
80000bd8:	1a 97       	mov	r7,sp
80000bda:	20 5d       	sub	sp,20
80000bdc:	ef 4c ff f4 	st.w	r7[-12],r12
80000be0:	ee eb ff ec 	st.d	r7[-20],r10
	(*pth)->delay = deadline;
80000be4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000be8:	70 0a       	ld.w	r10,r8[0x0]
80000bea:	ee e8 ff ec 	ld.d	r8,r7[-20]
80000bee:	f4 e9 00 68 	st.d	r10[104],r8
	
	if (DELAYQUEUE == NULL) {
80000bf2:	4b 48       	lddpc	r8,80000cc0 <insertDelayQueue+0xec>
80000bf4:	70 08       	ld.w	r8,r8[0x0]
80000bf6:	58 08       	cp.w	r8,0
80000bf8:	c0 c1       	brne	80000c10 <insertDelayQueue+0x3c>
		DELAYQUEUE = *pth;
80000bfa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bfe:	70 09       	ld.w	r9,r8[0x0]
80000c00:	4b 08       	lddpc	r8,80000cc0 <insertDelayQueue+0xec>
80000c02:	91 09       	st.w	r8[0x0],r9
		DELAYQUEUE->nexttcb = NULL;
80000c04:	4a f8       	lddpc	r8,80000cc0 <insertDelayQueue+0xec>
80000c06:	70 08       	ld.w	r8,r8[0x0]
80000c08:	30 09       	mov	r9,0
80000c0a:	91 09       	st.w	r8[0x0],r9
		return 0;
80000c0c:	30 08       	mov	r8,0
80000c0e:	c5 48       	rjmp	80000cb6 <insertDelayQueue+0xe2>
	}
	
	ROSA_taskHandle_t * next = DELAYQUEUE;
80000c10:	4a c8       	lddpc	r8,80000cc0 <insertDelayQueue+0xec>
80000c12:	70 08       	ld.w	r8,r8[0x0]
80000c14:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_taskHandle_t * prev;

	// While the next task in the list has an earlier deadline or higher priority and an equal deadline, move down the list
	while (next->delay <= (*pth)->delay || (next->priority >= (*pth)->priority && next->delay == (*pth)->delay))
80000c18:	c1 b8       	rjmp	80000c4e <insertDelayQueue+0x7a>
	{
		prev = next;
80000c1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c1e:	ef 48 ff fc 	st.w	r7[-4],r8
		next = next->nexttcb;
80000c22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c26:	70 08       	ld.w	r8,r8[0x0]
80000c28:	ef 48 ff f8 	st.w	r7[-8],r8
		
		// Reach the end of the list
		if (next == NULL) {
80000c2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c30:	58 08       	cp.w	r8,0
80000c32:	c0 e1       	brne	80000c4e <insertDelayQueue+0x7a>
			prev->nexttcb = *pth;
80000c34:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c38:	70 09       	ld.w	r9,r8[0x0]
80000c3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c3e:	91 09       	st.w	r8[0x0],r9
			(*pth)->nexttcb = NULL;
80000c40:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c44:	70 08       	ld.w	r8,r8[0x0]
80000c46:	30 09       	mov	r9,0
80000c48:	91 09       	st.w	r8[0x0],r9
			return 0;
80000c4a:	30 08       	mov	r8,0
80000c4c:	c3 58       	rjmp	80000cb6 <insertDelayQueue+0xe2>
	
	ROSA_taskHandle_t * next = DELAYQUEUE;
	ROSA_taskHandle_t * prev;

	// While the next task in the list has an earlier deadline or higher priority and an equal deadline, move down the list
	while (next->delay <= (*pth)->delay || (next->priority >= (*pth)->priority && next->delay == (*pth)->delay))
80000c4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c52:	f0 ea 00 68 	ld.d	r10,r8[104]
80000c56:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c5a:	70 08       	ld.w	r8,r8[0x0]
80000c5c:	f0 e8 00 68 	ld.d	r8,r8[104]
80000c60:	10 3a       	cp.w	r10,r8
80000c62:	f2 0b 13 00 	cpc	r11,r9
80000c66:	fe 98 ff da 	brls	80000c1a <insertDelayQueue+0x46>
80000c6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c6e:	f1 39 00 64 	ld.ub	r9,r8[100]
80000c72:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c76:	70 08       	ld.w	r8,r8[0x0]
80000c78:	f1 38 00 64 	ld.ub	r8,r8[100]
80000c7c:	f0 09 18 00 	cp.b	r9,r8
80000c80:	c0 e3       	brcs	80000c9c <insertDelayQueue+0xc8>
80000c82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c86:	f0 ea 00 68 	ld.d	r10,r8[104]
80000c8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c8e:	70 08       	ld.w	r8,r8[0x0]
80000c90:	f0 e8 00 68 	ld.d	r8,r8[104]
80000c94:	10 3a       	cp.w	r10,r8
80000c96:	f2 0b 13 00 	cpc	r11,r9
80000c9a:	cc 00       	breq	80000c1a <insertDelayQueue+0x46>
			(*pth)->nexttcb = NULL;
			return 0;
		}
	}
	
	(*pth)->nexttcb = next;
80000c9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ca0:	70 08       	ld.w	r8,r8[0x0]
80000ca2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ca6:	91 09       	st.w	r8[0x0],r9
	prev->nexttcb = *pth;
80000ca8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000cac:	70 09       	ld.w	r9,r8[0x0]
80000cae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cb2:	91 09       	st.w	r8[0x0],r9
	return 0;
80000cb4:	30 08       	mov	r8,0
}
80000cb6:	10 9c       	mov	r12,r8
80000cb8:	2f bd       	sub	sp,-20
80000cba:	e3 cd 80 80 	ldm	sp++,r7,pc
80000cbe:	00 00       	add	r0,r0
80000cc0:	00 00       	add	r0,r0
80000cc2:	06 9c       	mov	r12,r3

80000cc4 <removeDelayQueue>:
/* removeDelayQueue()													*/
/*																		*/
/* Removes the given task from the delay queue							*/
/************************************************************************/
int removeDelayQueue(ROSA_taskHandle_t ** pth)
{
80000cc4:	eb cd 40 80 	pushm	r7,lr
80000cc8:	1a 97       	mov	r7,sp
80000cca:	20 3d       	sub	sp,12
80000ccc:	ef 4c ff f4 	st.w	r7[-12],r12
	// If there are no tasks in the delay queue, return error code -1
	if (DELAYQUEUE == NULL)
80000cd0:	4a 48       	lddpc	r8,80000d60 <removeDelayQueue+0x9c>
80000cd2:	70 08       	ld.w	r8,r8[0x0]
80000cd4:	58 08       	cp.w	r8,0
80000cd6:	c0 31       	brne	80000cdc <removeDelayQueue+0x18>
	{
		return -1;
80000cd8:	3f f8       	mov	r8,-1
80000cda:	c3 f8       	rjmp	80000d58 <removeDelayQueue+0x94>
	}
	// If there is only one task in the status queue and this is pth, remove it from the queue
	if (DELAYQUEUE->id == (*pth)->id)
80000cdc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ce0:	70 09       	ld.w	r9,r8[0x0]
80000ce2:	4a 08       	lddpc	r8,80000d60 <removeDelayQueue+0x9c>
80000ce4:	70 08       	ld.w	r8,r8[0x0]
80000ce6:	10 39       	cp.w	r9,r8
80000ce8:	c1 21       	brne	80000d0c <removeDelayQueue+0x48>
	{
		if (DELAYQUEUE->nexttcb == NULL)
80000cea:	49 e8       	lddpc	r8,80000d60 <removeDelayQueue+0x9c>
80000cec:	70 08       	ld.w	r8,r8[0x0]
80000cee:	70 08       	ld.w	r8,r8[0x0]
80000cf0:	58 08       	cp.w	r8,0
80000cf2:	c0 51       	brne	80000cfc <removeDelayQueue+0x38>
		{
			DELAYQUEUE = NULL; // Task was the only one in the list
80000cf4:	49 b8       	lddpc	r8,80000d60 <removeDelayQueue+0x9c>
80000cf6:	30 09       	mov	r9,0
80000cf8:	91 09       	st.w	r8[0x0],r9
80000cfa:	c0 78       	rjmp	80000d08 <removeDelayQueue+0x44>
		} else {
			DELAYQUEUE = (*pth)->nexttcb;
80000cfc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d00:	70 08       	ld.w	r8,r8[0x0]
80000d02:	70 09       	ld.w	r9,r8[0x0]
80000d04:	49 78       	lddpc	r8,80000d60 <removeDelayQueue+0x9c>
80000d06:	91 09       	st.w	r8[0x0],r9
		}
		return 0;
80000d08:	30 08       	mov	r8,0
80000d0a:	c2 78       	rjmp	80000d58 <removeDelayQueue+0x94>
	}
	// Else, find the task before pth and point it to the task after pth, removing it
	ROSA_taskHandle_t * next = DELAYQUEUE;
80000d0c:	49 58       	lddpc	r8,80000d60 <removeDelayQueue+0x9c>
80000d0e:	70 08       	ld.w	r8,r8[0x0]
80000d10:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_taskHandle_t * prev;
	while (next->id != (*pth)->id)
80000d14:	c1 08       	rjmp	80000d34 <removeDelayQueue+0x70>
	{
		prev = next;
80000d16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d1a:	ef 48 ff fc 	st.w	r7[-4],r8
		next = next->nexttcb;
80000d1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d22:	70 08       	ld.w	r8,r8[0x0]
80000d24:	ef 48 ff f8 	st.w	r7[-8],r8
		if(next == NULL)
80000d28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d2c:	58 08       	cp.w	r8,0
80000d2e:	c0 31       	brne	80000d34 <removeDelayQueue+0x70>
		{
			return -1; //Task is not in the list, so return error code -1
80000d30:	3f f8       	mov	r8,-1
80000d32:	c1 38       	rjmp	80000d58 <removeDelayQueue+0x94>
		return 0;
	}
	// Else, find the task before pth and point it to the task after pth, removing it
	ROSA_taskHandle_t * next = DELAYQUEUE;
	ROSA_taskHandle_t * prev;
	while (next->id != (*pth)->id)
80000d34:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d38:	70 09       	ld.w	r9,r8[0x0]
80000d3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d3e:	10 39       	cp.w	r9,r8
80000d40:	ce b1       	brne	80000d16 <removeDelayQueue+0x52>
		if(next == NULL)
		{
			return -1; //Task is not in the list, so return error code -1
		}
	}
	prev->nexttcb = next->nexttcb;
80000d42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d46:	70 09       	ld.w	r9,r8[0x0]
80000d48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d4c:	91 09       	st.w	r8[0x0],r9
	next->nexttcb = NULL;
80000d4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d52:	30 09       	mov	r9,0
80000d54:	91 09       	st.w	r8[0x0],r9
	return 0;
80000d56:	30 08       	mov	r8,0
}
80000d58:	10 9c       	mov	r12,r8
80000d5a:	2f dd       	sub	sp,-12
80000d5c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d60:	00 00       	add	r0,r0
80000d62:	06 9c       	mov	r12,r3

80000d64 <buttonInit>:
80000d64:	eb cd 40 80 	pushm	r7,lr
80000d68:	1a 97       	mov	r7,sp
80000d6a:	30 1b       	mov	r11,1
80000d6c:	35 8c       	mov	r12,88
80000d6e:	f0 1f 00 07 	mcall	80000d88 <buttonInit+0x24>
80000d72:	30 1b       	mov	r11,1
80000d74:	35 5c       	mov	r12,85
80000d76:	f0 1f 00 05 	mcall	80000d88 <buttonInit+0x24>
80000d7a:	30 1b       	mov	r11,1
80000d7c:	35 2c       	mov	r12,82
80000d7e:	f0 1f 00 03 	mcall	80000d88 <buttonInit+0x24>
80000d82:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d86:	00 00       	add	r0,r0
80000d88:	80 00       	ld.sh	r0,r0[0x0]
80000d8a:	0d c4       	ld.ub	r4,r6[0x4]

80000d8c <joystickInit>:
80000d8c:	eb cd 40 80 	pushm	r7,lr
80000d90:	1a 97       	mov	r7,sp
80000d92:	30 1b       	mov	r11,1
80000d94:	31 bc       	mov	r12,27
80000d96:	f0 1f 00 0b 	mcall	80000dc0 <joystickInit+0x34>
80000d9a:	30 1b       	mov	r11,1
80000d9c:	31 9c       	mov	r12,25
80000d9e:	f0 1f 00 09 	mcall	80000dc0 <joystickInit+0x34>
80000da2:	30 1b       	mov	r11,1
80000da4:	31 cc       	mov	r12,28
80000da6:	f0 1f 00 07 	mcall	80000dc0 <joystickInit+0x34>
80000daa:	30 1b       	mov	r11,1
80000dac:	31 4c       	mov	r12,20
80000dae:	f0 1f 00 05 	mcall	80000dc0 <joystickInit+0x34>
80000db2:	30 1b       	mov	r11,1
80000db4:	31 ac       	mov	r12,26
80000db6:	f0 1f 00 03 	mcall	80000dc0 <joystickInit+0x34>
80000dba:	e3 cd 80 80 	ldm	sp++,r7,pc
80000dbe:	00 00       	add	r0,r0
80000dc0:	80 00       	ld.sh	r0,r0[0x0]
80000dc2:	0d c4       	ld.ub	r4,r6[0x4]

80000dc4 <gpioInit>:
80000dc4:	eb cd 40 80 	pushm	r7,lr
80000dc8:	1a 97       	mov	r7,sp
80000dca:	20 7d       	sub	sp,28
80000dcc:	ef 4c ff ec 	st.w	r7[-20],r12
80000dd0:	ef 4b ff e8 	st.w	r7[-24],r11
80000dd4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000dd8:	a5 58       	asr	r8,0x5
80000dda:	ef 48 ff f4 	st.w	r7[-12],r8
80000dde:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000de2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000de6:	ef 48 ff fc 	st.w	r7[-4],r8
80000dea:	30 19       	mov	r9,1
80000dec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000df0:	f2 08 09 48 	lsl	r8,r9,r8
80000df4:	ef 48 ff f8 	st.w	r7[-8],r8
80000df8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000dfc:	a9 68       	lsl	r8,0x8
80000dfe:	e0 28 f0 00 	sub	r8,61440
80000e02:	ef 48 ff f0 	st.w	r7[-16],r8
80000e06:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e0a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e0e:	91 19       	st.w	r8[0x4],r9
80000e10:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e14:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e18:	91 69       	st.w	r8[0x18],r9
80000e1a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e1e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e22:	91 a9       	st.w	r8[0x28],r9
80000e24:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000e28:	ef 48 ff e4 	st.w	r7[-28],r8
80000e2c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000e30:	58 08       	cp.w	r8,0
80000e32:	c0 60       	breq	80000e3e <gpioInit+0x7a>
80000e34:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000e38:	58 18       	cp.w	r8,1
80000e3a:	c0 90       	breq	80000e4c <gpioInit+0x88>
80000e3c:	c0 f8       	rjmp	80000e5a <gpioInit+0x96>
80000e3e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e42:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e46:	f1 49 00 44 	st.w	r8[68],r9
80000e4a:	c0 e8       	rjmp	80000e66 <gpioInit+0xa2>
80000e4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e50:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e54:	f1 49 00 48 	st.w	r8[72],r9
80000e58:	c0 78       	rjmp	80000e66 <gpioInit+0xa2>
80000e5a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e5e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e62:	f1 49 00 48 	st.w	r8[72],r9
80000e66:	2f 9d       	sub	sp,-28
80000e68:	e3 cd 80 80 	ldm	sp++,r7,pc

80000e6c <gpioClear>:
80000e6c:	eb cd 40 80 	pushm	r7,lr
80000e70:	1a 97       	mov	r7,sp
80000e72:	20 5d       	sub	sp,20
80000e74:	ef 4c ff ec 	st.w	r7[-20],r12
80000e78:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e7c:	a5 58       	asr	r8,0x5
80000e7e:	ef 48 ff f4 	st.w	r7[-12],r8
80000e82:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e86:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000e8a:	ef 48 ff fc 	st.w	r7[-4],r8
80000e8e:	30 19       	mov	r9,1
80000e90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e94:	f2 08 09 48 	lsl	r8,r9,r8
80000e98:	ef 48 ff f8 	st.w	r7[-8],r8
80000e9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ea0:	a9 68       	lsl	r8,0x8
80000ea2:	e0 28 f0 00 	sub	r8,61440
80000ea6:	ef 48 ff f0 	st.w	r7[-16],r8
80000eaa:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000eae:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000eb2:	f1 49 00 58 	st.w	r8[88],r9
80000eb6:	2f bd       	sub	sp,-20
80000eb8:	e3 cd 80 80 	ldm	sp++,r7,pc

80000ebc <gpioSet>:
80000ebc:	eb cd 40 80 	pushm	r7,lr
80000ec0:	1a 97       	mov	r7,sp
80000ec2:	20 5d       	sub	sp,20
80000ec4:	ef 4c ff ec 	st.w	r7[-20],r12
80000ec8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ecc:	a5 58       	asr	r8,0x5
80000ece:	ef 48 ff f4 	st.w	r7[-12],r8
80000ed2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ed6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000eda:	ef 48 ff fc 	st.w	r7[-4],r8
80000ede:	30 19       	mov	r9,1
80000ee0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ee4:	f2 08 09 48 	lsl	r8,r9,r8
80000ee8:	ef 48 ff f8 	st.w	r7[-8],r8
80000eec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ef0:	a9 68       	lsl	r8,0x8
80000ef2:	e0 28 f0 00 	sub	r8,61440
80000ef6:	ef 48 ff f0 	st.w	r7[-16],r8
80000efa:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000efe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f02:	f1 49 00 54 	st.w	r8[84],r9
80000f06:	2f bd       	sub	sp,-20
80000f08:	e3 cd 80 80 	ldm	sp++,r7,pc

80000f0c <ledInit>:
80000f0c:	eb cd 40 80 	pushm	r7,lr
80000f10:	1a 97       	mov	r7,sp
80000f12:	20 9d       	sub	sp,36
80000f14:	49 e8       	lddpc	r8,80000f8c <ledInit+0x80>
80000f16:	ee cb 00 24 	sub	r11,r7,36
80000f1a:	10 9a       	mov	r10,r8
80000f1c:	f4 e8 00 00 	ld.d	r8,r10[0]
80000f20:	f6 e9 00 00 	st.d	r11[0],r8
80000f24:	f4 e8 00 08 	ld.d	r8,r10[8]
80000f28:	f6 e9 00 08 	st.d	r11[8],r8
80000f2c:	f4 e8 00 10 	ld.d	r8,r10[16]
80000f30:	f6 e9 00 10 	st.d	r11[16],r8
80000f34:	f4 e8 00 18 	ld.d	r8,r10[24]
80000f38:	f6 e9 00 18 	st.d	r11[24],r8
80000f3c:	30 08       	mov	r8,0
80000f3e:	ef 48 ff fc 	st.w	r7[-4],r8
80000f42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f46:	a3 68       	lsl	r8,0x2
80000f48:	ee 08 00 08 	add	r8,r7,r8
80000f4c:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000f50:	10 9c       	mov	r12,r8
80000f52:	f0 1f 00 10 	mcall	80000f90 <ledInit+0x84>
80000f56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f5a:	a3 68       	lsl	r8,0x2
80000f5c:	ee 08 00 08 	add	r8,r7,r8
80000f60:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000f64:	30 0b       	mov	r11,0
80000f66:	10 9c       	mov	r12,r8
80000f68:	f0 1f 00 0b 	mcall	80000f94 <ledInit+0x88>
80000f6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f70:	58 78       	cp.w	r8,7
80000f72:	5f 18       	srne	r8
80000f74:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000f78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f7c:	2f f8       	sub	r8,-1
80000f7e:	ef 48 ff fc 	st.w	r7[-4],r8
80000f82:	58 09       	cp.w	r9,0
80000f84:	cd f1       	brne	80000f42 <ledInit+0x36>
80000f86:	2f 7d       	sub	sp,-36
80000f88:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f8c:	80 00       	ld.sh	r0,r0[0x0]
80000f8e:	22 00       	sub	r0,32
80000f90:	80 00       	ld.sh	r0,r0[0x0]
80000f92:	0f b8       	ld.ub	r8,r7[0x3]
80000f94:	80 00       	ld.sh	r0,r0[0x0]
80000f96:	0d c4       	ld.ub	r4,r6[0x4]

80000f98 <ledOn>:
80000f98:	eb cd 40 80 	pushm	r7,lr
80000f9c:	1a 97       	mov	r7,sp
80000f9e:	20 1d       	sub	sp,4
80000fa0:	ef 4c ff fc 	st.w	r7[-4],r12
80000fa4:	ee fc ff fc 	ld.w	r12,r7[-4]
80000fa8:	f0 1f 00 03 	mcall	80000fb4 <ledOn+0x1c>
80000fac:	2f fd       	sub	sp,-4
80000fae:	e3 cd 80 80 	ldm	sp++,r7,pc
80000fb2:	00 00       	add	r0,r0
80000fb4:	80 00       	ld.sh	r0,r0[0x0]
80000fb6:	0e 6c       	and	r12,r7

80000fb8 <ledOff>:
80000fb8:	eb cd 40 80 	pushm	r7,lr
80000fbc:	1a 97       	mov	r7,sp
80000fbe:	20 1d       	sub	sp,4
80000fc0:	ef 4c ff fc 	st.w	r7[-4],r12
80000fc4:	ee fc ff fc 	ld.w	r12,r7[-4]
80000fc8:	f0 1f 00 03 	mcall	80000fd4 <ledOff+0x1c>
80000fcc:	2f fd       	sub	sp,-4
80000fce:	e3 cd 80 80 	ldm	sp++,r7,pc
80000fd2:	00 00       	add	r0,r0
80000fd4:	80 00       	ld.sh	r0,r0[0x0]
80000fd6:	0e bc       	st.h	r7++,r12

80000fd8 <potInit>:
80000fd8:	d3 01       	pushm	r11-r12
80000fda:	e0 6c 10 00 	mov	r12,4096
80000fde:	ea 1c ff ff 	orh	r12,0xffff
80000fe2:	31 6b       	mov	r11,22
80000fe4:	99 2b       	st.w	r12[0x8],r11
80000fe6:	99 6b       	st.w	r12[0x18],r11
80000fe8:	99 6b       	st.w	r12[0x18],r11
80000fea:	e0 6c 3c 00 	mov	r12,15360
80000fee:	ea 1c ff ff 	orh	r12,0xffff
80000ff2:	30 1b       	mov	r11,1
80000ff4:	99 0b       	st.w	r12[0x0],r11
80000ff6:	e0 6b 0f 1f 	mov	r11,3871
80000ffa:	b1 6b       	lsl	r11,0x10
80000ffc:	99 1b       	st.w	r12[0x4],r11
80000ffe:	30 2b       	mov	r11,2
80001000:	99 4b       	st.w	r12[0x10],r11
80001002:	d3 02       	popm	r11-r12
80001004:	1c 9f       	mov	pc,lr

80001006 <potGetValue>:
80001006:	d1 81       	pushm	r10-r11
80001008:	e0 6c 3c 00 	mov	r12,15360
8000100c:	ea 1c ff ff 	orh	r12,0xffff
80001010:	30 2b       	mov	r11,2
80001012:	99 0b       	st.w	r12[0x0],r11

80001014 <a1>:
80001014:	78 7a       	ld.w	r10,r12[0x1c]
80001016:	16 7a       	tst	r10,r11
80001018:	cf e0       	breq	80001014 <a1>
8000101a:	78 dc       	ld.w	r12,r12[0x34]
8000101c:	d1 82       	popm	r10-r11
8000101e:	1c 9f       	mov	pc,lr

80001020 <usartReset>:
80001020:	eb cd 40 80 	pushm	r7,lr
80001024:	1a 97       	mov	r7,sp
80001026:	20 3d       	sub	sp,12
80001028:	ef 4c ff f8 	st.w	r7[-8],r12
8000102c:	f0 1f 00 16 	mcall	80001084 <usartReset+0x64>
80001030:	18 98       	mov	r8,r12
80001032:	ef 48 ff fc 	st.w	r7[-4],r8
80001036:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000103a:	58 08       	cp.w	r8,0
8000103c:	c0 30       	breq	80001042 <usartReset+0x22>
8000103e:	f0 1f 00 13 	mcall	80001088 <usartReset+0x68>
80001042:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001046:	3f f8       	mov	r8,-1
80001048:	93 38       	st.w	r9[0xc],r8
8000104a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000104e:	70 58       	ld.w	r8,r8[0x14]
80001050:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001054:	58 08       	cp.w	r8,0
80001056:	c0 30       	breq	8000105c <usartReset+0x3c>
80001058:	f0 1f 00 0d 	mcall	8000108c <usartReset+0x6c>
8000105c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001060:	30 08       	mov	r8,0
80001062:	93 18       	st.w	r9[0x4],r8
80001064:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001068:	30 08       	mov	r8,0
8000106a:	93 98       	st.w	r9[0x24],r8
8000106c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001070:	30 08       	mov	r8,0
80001072:	93 a8       	st.w	r9[0x28],r8
80001074:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001078:	ea 68 61 0c 	mov	r8,680204
8000107c:	93 08       	st.w	r9[0x0],r8
8000107e:	2f dd       	sub	sp,-12
80001080:	e3 cd 80 80 	ldm	sp++,r7,pc
80001084:	80 00       	ld.sh	r0,r0[0x0]
80001086:	1f 6e       	ld.uh	lr,--pc
80001088:	80 00       	ld.sh	r0,r0[0x0]
8000108a:	1f 66       	ld.uh	r6,--pc
8000108c:	80 00       	ld.sh	r0,r0[0x0]
8000108e:	1f 6a       	ld.uh	r10,--pc

80001090 <usartSetBaudrate>:
80001090:	eb cd 40 80 	pushm	r7,lr
80001094:	1a 97       	mov	r7,sp
80001096:	20 bd       	sub	sp,44
80001098:	ef 4c ff ec 	st.w	r7[-20],r12
8000109c:	ef 4b ff e8 	st.w	r7[-24],r11
800010a0:	ef 4a ff e4 	st.w	r7[-28],r10
800010a4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800010a8:	f0 09 15 04 	lsl	r9,r8,0x4
800010ac:	ee f8 ff e4 	ld.w	r8,r7[-28]
800010b0:	10 39       	cp.w	r9,r8
800010b2:	e0 8b 00 06 	brhi	800010be <usartSetBaudrate+0x2e>
800010b6:	31 09       	mov	r9,16
800010b8:	ef 49 ff d4 	st.w	r7[-44],r9
800010bc:	c0 48       	rjmp	800010c4 <usartSetBaudrate+0x34>
800010be:	30 88       	mov	r8,8
800010c0:	ef 48 ff d4 	st.w	r7[-44],r8
800010c4:	ee f9 ff d4 	ld.w	r9,r7[-44]
800010c8:	ef 49 ff f0 	st.w	r7[-16],r9
800010cc:	ee f8 ff e4 	ld.w	r8,r7[-28]
800010d0:	f0 0a 15 03 	lsl	r10,r8,0x3
800010d4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800010d8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800010dc:	f2 08 02 48 	mul	r8,r9,r8
800010e0:	a1 98       	lsr	r8,0x1
800010e2:	10 0a       	add	r10,r8
800010e4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800010e8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800010ec:	f2 08 02 48 	mul	r8,r9,r8
800010f0:	f4 08 0d 08 	divu	r8,r10,r8
800010f4:	ef 48 ff f4 	st.w	r7[-12],r8
800010f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010fc:	a3 98       	lsr	r8,0x3
800010fe:	ef 48 ff f8 	st.w	r7[-8],r8
80001102:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001106:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000110a:	ef 48 ff fc 	st.w	r7[-4],r8
8000110e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001112:	58 08       	cp.w	r8,0
80001114:	c0 70       	breq	80001122 <usartSetBaudrate+0x92>
80001116:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000111a:	e0 48 ff ff 	cp.w	r8,65535
8000111e:	e0 88 00 06 	brls	8000112a <usartSetBaudrate+0x9a>
80001122:	30 18       	mov	r8,1
80001124:	ef 48 ff d8 	st.w	r7[-40],r8
80001128:	c2 c8       	rjmp	80001180 <usartSetBaudrate+0xf0>
8000112a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000112e:	70 18       	ld.w	r8,r8[0x4]
80001130:	10 99       	mov	r9,r8
80001132:	e4 19 ff f7 	andh	r9,0xfff7
80001136:	e0 19 fe cf 	andl	r9,0xfecf
8000113a:	ef 49 ff dc 	st.w	r7[-36],r9
8000113e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001142:	59 08       	cp.w	r8,16
80001144:	c0 60       	breq	80001150 <usartSetBaudrate+0xc0>
80001146:	e8 68 00 00 	mov	r8,524288
8000114a:	ef 48 ff e0 	st.w	r7[-32],r8
8000114e:	c0 48       	rjmp	80001156 <usartSetBaudrate+0xc6>
80001150:	30 09       	mov	r9,0
80001152:	ef 49 ff e0 	st.w	r7[-32],r9
80001156:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000115a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000115e:	10 49       	or	r9,r8
80001160:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001164:	91 19       	st.w	r8[0x4],r9
80001166:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000116a:	f0 09 15 10 	lsl	r9,r8,0x10
8000116e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001172:	10 49       	or	r9,r8
80001174:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001178:	91 89       	st.w	r8[0x20],r9
8000117a:	30 09       	mov	r9,0
8000117c:	ef 49 ff d8 	st.w	r7[-40],r9
80001180:	ee f8 ff d8 	ld.w	r8,r7[-40]
80001184:	10 9c       	mov	r12,r8
80001186:	2f 5d       	sub	sp,-44
80001188:	e3 cd 80 80 	ldm	sp++,r7,pc

8000118c <usartInit>:
8000118c:	eb cd 40 80 	pushm	r7,lr
80001190:	1a 97       	mov	r7,sp
80001192:	20 4d       	sub	sp,16
80001194:	ef 4c ff f8 	st.w	r7[-8],r12
80001198:	ef 4b ff f4 	st.w	r7[-12],r11
8000119c:	ef 4a ff f0 	st.w	r7[-16],r10
800011a0:	fe 78 10 00 	mov	r8,-61440
800011a4:	ef 48 ff fc 	st.w	r7[-4],r8
800011a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800011ac:	30 18       	mov	r8,1
800011ae:	93 28       	st.w	r9[0x8],r8
800011b0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800011b4:	30 28       	mov	r8,2
800011b6:	93 28       	st.w	r9[0x8],r8
800011b8:	ee fc ff f8 	ld.w	r12,r7[-8]
800011bc:	f0 1f 00 3b 	mcall	800012a8 <usartInit+0x11c>
800011c0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800011c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800011c8:	70 08       	ld.w	r8,r8[0x0]
800011ca:	12 9a       	mov	r10,r9
800011cc:	10 9b       	mov	r11,r8
800011ce:	ee fc ff f8 	ld.w	r12,r7[-8]
800011d2:	f0 1f 00 37 	mcall	800012ac <usartInit+0x120>
800011d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800011da:	11 c9       	ld.ub	r9,r8[0x4]
800011dc:	30 98       	mov	r8,9
800011de:	f0 09 18 00 	cp.b	r9,r8
800011e2:	c0 a1       	brne	800011f6 <usartInit+0x6a>
800011e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800011e8:	70 18       	ld.w	r8,r8[0x4]
800011ea:	10 99       	mov	r9,r8
800011ec:	b1 b9       	sbr	r9,0x11
800011ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800011f2:	91 19       	st.w	r8[0x4],r9
800011f4:	c0 d8       	rjmp	8000120e <usartInit+0x82>
800011f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800011fa:	70 19       	ld.w	r9,r8[0x4]
800011fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001200:	11 c8       	ld.ub	r8,r8[0x4]
80001202:	20 58       	sub	r8,5
80001204:	a7 68       	lsl	r8,0x6
80001206:	10 49       	or	r9,r8
80001208:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000120c:	91 19       	st.w	r8[0x4],r9
8000120e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001212:	70 1a       	ld.w	r10,r8[0x4]
80001214:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001218:	11 d8       	ld.ub	r8,r8[0x5]
8000121a:	f0 09 15 09 	lsl	r9,r8,0x9
8000121e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001222:	f1 38 00 08 	ld.ub	r8,r8[8]
80001226:	af 68       	lsl	r8,0xe
80001228:	f3 e8 10 08 	or	r8,r9,r8
8000122c:	f5 e8 10 09 	or	r9,r10,r8
80001230:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001234:	91 19       	st.w	r8[0x4],r9
80001236:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000123a:	90 39       	ld.sh	r9,r8[0x6]
8000123c:	30 28       	mov	r8,2
8000123e:	f0 09 19 00 	cp.h	r9,r8
80001242:	e0 88 00 14 	brls	8000126a <usartInit+0xde>
80001246:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000124a:	70 18       	ld.w	r8,r8[0x4]
8000124c:	10 99       	mov	r9,r8
8000124e:	ad b9       	sbr	r9,0xd
80001250:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001254:	91 19       	st.w	r8[0x4],r9
80001256:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000125a:	90 38       	ld.sh	r8,r8[0x6]
8000125c:	5c 78       	castu.h	r8
8000125e:	20 28       	sub	r8,2
80001260:	10 99       	mov	r9,r8
80001262:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001266:	91 a9       	st.w	r8[0x28],r9
80001268:	c0 d8       	rjmp	80001282 <usartInit+0xf6>
8000126a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000126e:	70 19       	ld.w	r9,r8[0x4]
80001270:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001274:	90 38       	ld.sh	r8,r8[0x6]
80001276:	5c 78       	castu.h	r8
80001278:	ad 68       	lsl	r8,0xc
8000127a:	10 49       	or	r9,r8
8000127c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001280:	91 19       	st.w	r8[0x4],r9
80001282:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001286:	70 18       	ld.w	r8,r8[0x4]
80001288:	10 99       	mov	r9,r8
8000128a:	e0 19 ff f0 	andl	r9,0xfff0
8000128e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001292:	91 19       	st.w	r8[0x4],r9
80001294:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001298:	35 08       	mov	r8,80
8000129a:	93 08       	st.w	r9[0x0],r8
8000129c:	30 08       	mov	r8,0
8000129e:	10 9c       	mov	r12,r8
800012a0:	2f cd       	sub	sp,-16
800012a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800012a6:	00 00       	add	r0,r0
800012a8:	80 00       	ld.sh	r0,r0[0x0]
800012aa:	10 20       	rsub	r0,r8
800012ac:	80 00       	ld.sh	r0,r0[0x0]
800012ae:	10 90       	mov	r0,r8

800012b0 <usartWriteChar>:
800012b0:	eb cd 40 80 	pushm	r7,lr
800012b4:	1a 97       	mov	r7,sp
800012b6:	20 3d       	sub	sp,12
800012b8:	ef 4c ff f8 	st.w	r7[-8],r12
800012bc:	16 98       	mov	r8,r11
800012be:	ef 68 ff f4 	st.b	r7[-12],r8
800012c2:	e4 68 00 00 	mov	r8,262144
800012c6:	ef 48 ff fc 	st.w	r7[-4],r8
800012ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012ce:	58 08       	cp.w	r8,0
800012d0:	5f 18       	srne	r8
800012d2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800012d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012da:	20 18       	sub	r8,1
800012dc:	ef 48 ff fc 	st.w	r7[-4],r8
800012e0:	12 98       	mov	r8,r9
800012e2:	ec 18 00 01 	eorl	r8,0x1
800012e6:	5c 58       	castu.b	r8
800012e8:	c0 71       	brne	800012f6 <usartWriteChar+0x46>
800012ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012ee:	70 58       	ld.w	r8,r8[0x14]
800012f0:	e2 18 00 02 	andl	r8,0x2,COH
800012f4:	ce b0       	breq	800012ca <usartWriteChar+0x1a>
800012f6:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800012fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012fe:	91 79       	st.w	r8[0x1c],r9
80001300:	2f dd       	sub	sp,-12
80001302:	e3 cd 80 80 	ldm	sp++,r7,pc
80001306:	d7 03       	nop

80001308 <usartWriteLine>:
80001308:	eb cd 40 80 	pushm	r7,lr
8000130c:	1a 97       	mov	r7,sp
8000130e:	20 2d       	sub	sp,8
80001310:	ef 4c ff fc 	st.w	r7[-4],r12
80001314:	ef 4b ff f8 	st.w	r7[-8],r11
80001318:	c1 88       	rjmp	80001348 <usartWriteLine+0x40>
8000131a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000131e:	11 88       	ld.ub	r8,r8[0x0]
80001320:	58 a8       	cp.w	r8,10
80001322:	c0 61       	brne	8000132e <usartWriteLine+0x26>
80001324:	30 db       	mov	r11,13
80001326:	ee fc ff fc 	ld.w	r12,r7[-4]
8000132a:	f0 1f 00 0c 	mcall	80001358 <usartWriteLine+0x50>
8000132e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001332:	11 88       	ld.ub	r8,r8[0x0]
80001334:	10 9b       	mov	r11,r8
80001336:	ee fc ff fc 	ld.w	r12,r7[-4]
8000133a:	f0 1f 00 08 	mcall	80001358 <usartWriteLine+0x50>
8000133e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001342:	2f f8       	sub	r8,-1
80001344:	ef 48 ff f8 	st.w	r7[-8],r8
80001348:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000134c:	11 88       	ld.ub	r8,r8[0x0]
8000134e:	58 08       	cp.w	r8,0
80001350:	ce 51       	brne	8000131a <usartWriteLine+0x12>
80001352:	2f ed       	sub	sp,-8
80001354:	e3 cd 80 80 	ldm	sp++,r7,pc
80001358:	80 00       	ld.sh	r0,r0[0x0]
8000135a:	12 b0       	st.h	r9++,r0

8000135c <timerInit>:
8000135c:	d5 01       	pushm	r11,lr
8000135e:	d2 01       	pushm	r12
80001360:	f0 1f 00 28 	mcall	80001400 <timerClearInterrupt+0x10>
80001364:	f0 1f 00 28 	mcall	80001404 <timerClearInterrupt+0x14>
80001368:	e0 6c 38 00 	mov	r12,14336
8000136c:	ea 1c ff ff 	orh	r12,0xffff
80001370:	e0 6b c0 00 	mov	r11,49152
80001374:	ea 1b 00 00 	orh	r11,0x0
80001378:	99 1b       	st.w	r12[0x4],r11
8000137a:	30 1b       	mov	r11,1
8000137c:	a5 6b       	lsl	r11,0x4
8000137e:	99 9b       	st.w	r12[0x24],r11
80001380:	d2 02       	popm	r12
80001382:	f0 1f 00 22 	mcall	80001408 <timerClearInterrupt+0x18>
80001386:	d5 02       	popm	r11,lr
80001388:	1c 9f       	mov	pc,lr

8000138a <timerReset>:
8000138a:	d3 01       	pushm	r11-r12
8000138c:	e0 6c 38 00 	mov	r12,14336
80001390:	ea 1c ff ff 	orh	r12,0xffff
80001394:	30 5b       	mov	r11,5
80001396:	99 0b       	st.w	r12[0x0],r11
80001398:	e0 6b 00 08 	mov	r11,8
8000139c:	ea 1b 00 00 	orh	r11,0x0
800013a0:	76 0b       	ld.w	r11,r11[0x0]
800013a2:	99 7b       	st.w	r12[0x1c],r11
800013a4:	d3 02       	popm	r11-r12
800013a6:	1c 9f       	mov	pc,lr

800013a8 <timerStop>:
800013a8:	d3 01       	pushm	r11-r12
800013aa:	e0 6c 38 00 	mov	r12,14336
800013ae:	ea 1c ff ff 	orh	r12,0xffff
800013b2:	30 2b       	mov	r11,2
800013b4:	99 0b       	st.w	r12[0x0],r11
800013b6:	d3 02       	popm	r11-r12
800013b8:	1c 9f       	mov	pc,lr

800013ba <timerRCSet>:
800013ba:	d3 01       	pushm	r11-r12
800013bc:	49 4b       	lddpc	r11,8000140c <timerClearInterrupt+0x1c>
800013be:	97 0c       	st.w	r11[0x0],r12
800013c0:	e0 6c 38 00 	mov	r12,14336
800013c4:	ea 1c ff ff 	orh	r12,0xffff
800013c8:	76 0b       	ld.w	r11,r11[0x0]
800013ca:	99 7b       	st.w	r12[0x1c],r11
800013cc:	d3 02       	popm	r11-r12
800013ce:	1c 9f       	mov	pc,lr

800013d0 <timerPrescaleSet>:
800013d0:	d3 81       	pushm	r10-r12
800013d2:	49 0b       	lddpc	r11,80001410 <timerClearInterrupt+0x20>
800013d4:	97 0c       	st.w	r11[0x0],r12
800013d6:	e0 6c 38 00 	mov	r12,14336
800013da:	ea 1c ff ff 	orh	r12,0xffff
800013de:	78 1a       	ld.w	r10,r12[0x4]
800013e0:	3f 8b       	mov	r11,-8
800013e2:	16 6a       	and	r10,r11
800013e4:	48 bb       	lddpc	r11,80001410 <timerClearInterrupt+0x20>
800013e6:	76 0b       	ld.w	r11,r11[0x0]
800013e8:	14 4b       	or	r11,r10
800013ea:	99 1b       	st.w	r12[0x4],r11
800013ec:	d3 82       	popm	r10-r12
800013ee:	1c 9f       	mov	pc,lr

800013f0 <timerClearInterrupt>:
800013f0:	d2 01       	pushm	r12
800013f2:	e0 6c 38 00 	mov	r12,14336
800013f6:	ea 1c ff ff 	orh	r12,0xffff
800013fa:	78 8c       	ld.w	r12,r12[0x20]
800013fc:	d2 02       	popm	r12
800013fe:	1c 9f       	mov	pc,lr
80001400:	80 00       	ld.sh	r0,r0[0x0]
80001402:	1f 66       	ld.uh	r6,--pc
80001404:	80 00       	ld.sh	r0,r0[0x0]
80001406:	13 f0       	ld.ub	r0,r9[0x7]
80001408:	80 00       	ld.sh	r0,r0[0x0]
8000140a:	0b 2c       	ld.uh	r12,r5++
8000140c:	00 00       	add	r0,r0
8000140e:	00 08       	add	r8,r0
80001410:	00 00       	add	r0,r0
80001412:	00 0c       	add	r12,r0

80001414 <_stext>:
80001414:	49 7d       	lddpc	sp,80001470 <udata_end+0x4>
80001416:	49 80       	lddpc	r0,80001474 <udata_end+0x8>
80001418:	1a d0       	st.w	--sp,r0
8000141a:	e5 cd 20 00 	ldmts	sp,sp
8000141e:	1b 00       	ld.w	r0,sp++
80001420:	49 60       	lddpc	r0,80001478 <udata_end+0xc>
80001422:	e3 b0 00 01 	mtsr	0x4,r0
80001426:	d5 53       	csrf	0x15
80001428:	e0 6c 0c 00 	mov	r12,3072
8000142c:	ea 1c ff ff 	orh	r12,0xffff
80001430:	e0 6b 01 07 	mov	r11,263
80001434:	99 ab       	st.w	r12[0x28],r11
80001436:	30 4b       	mov	r11,4
80001438:	99 0b       	st.w	r12[0x0],r11
8000143a:	e0 6a 00 80 	mov	r10,128

8000143e <xw8>:
8000143e:	79 5b       	ld.w	r11,r12[0x54]
80001440:	14 7b       	tst	r11,r10
80001442:	cf e0       	breq	8000143e <xw8>
80001444:	30 5b       	mov	r11,5
80001446:	99 0b       	st.w	r12[0x0],r11

80001448 <idata_>:
80001448:	48 d0       	lddpc	r0,8000147c <udata_end+0x10>
8000144a:	48 e1       	lddpc	r1,80001480 <udata_end+0x14>
8000144c:	02 30       	cp.w	r0,r1
8000144e:	c0 62       	brcc	8000145a <idata_end>
80001450:	48 d2       	lddpc	r2,80001484 <udata_end+0x18>

80001452 <idata_loop>:
80001452:	05 04       	ld.w	r4,r2++
80001454:	00 a4       	st.w	r0++,r4
80001456:	02 30       	cp.w	r0,r1
80001458:	cf d3       	brcs	80001452 <idata_loop>

8000145a <idata_end>:
8000145a:	48 c0       	lddpc	r0,80001488 <udata_end+0x1c>
8000145c:	48 c1       	lddpc	r1,8000148c <udata_end+0x20>
8000145e:	02 30       	cp.w	r0,r1
80001460:	c0 62       	brcc	8000146c <udata_end>
80001462:	30 02       	mov	r2,0
80001464:	30 03       	mov	r3,0

80001466 <udata_loop>:
80001466:	00 a2       	st.w	r0++,r2
80001468:	02 30       	cp.w	r0,r1
8000146a:	cf e3       	brcs	80001466 <udata_loop>

8000146c <udata_end>:
8000146c:	48 9f       	lddpc	pc,80001490 <udata_end+0x24>
8000146e:	00 00       	add	r0,r0
80001470:	00 01       	add	r1,r0
80001472:	00 00       	add	r0,r0
80001474:	00 00       	add	r0,r0
80001476:	f0 00       	*unknown*
80001478:	80 00       	ld.sh	r0,r0[0x0]
8000147a:	1e 00       	add	r0,pc
8000147c:	00 00       	add	r0,r0
8000147e:	00 08       	add	r8,r0
80001480:	00 00       	add	r0,r0
80001482:	05 18       	ld.sh	r8,r2++
80001484:	80 00       	ld.sh	r0,r0[0x0]
80001486:	22 88       	sub	r8,40
80001488:	00 00       	add	r0,r0
8000148a:	05 18       	ld.sh	r8,r2++
8000148c:	00 00       	add	r0,r0
8000148e:	06 b0       	st.h	r3++,r0
80001490:	80 00       	ld.sh	r0,r0[0x0]
80001492:	02 d4       	st.w	--r1,r4

80001494 <calloc>:
80001494:	d4 01       	pushm	lr
80001496:	48 48       	lddpc	r8,800014a4 <calloc+0x10>
80001498:	16 9a       	mov	r10,r11
8000149a:	18 9b       	mov	r11,r12
8000149c:	70 0c       	ld.w	r12,r8[0x0]
8000149e:	f0 1f 00 03 	mcall	800014a8 <calloc+0x14>
800014a2:	d8 02       	popm	pc
800014a4:	00 00       	add	r0,r0
800014a6:	01 00       	ld.w	r0,r0++
800014a8:	80 00       	ld.sh	r0,r0[0x0]
800014aa:	14 ac       	st.w	r10++,r12

800014ac <_calloc_r>:
800014ac:	d4 21       	pushm	r4-r7,lr
800014ae:	f4 0b 02 4b 	mul	r11,r10,r11
800014b2:	f0 1f 00 15 	mcall	80001504 <_calloc_r+0x58>
800014b6:	18 97       	mov	r7,r12
800014b8:	c2 30       	breq	800014fe <_calloc_r+0x52>
800014ba:	f8 fa ff fc 	ld.w	r10,r12[-4]
800014be:	e0 1a ff fc 	andl	r10,0xfffc
800014c2:	20 4a       	sub	r10,4
800014c4:	e0 4a 00 24 	cp.w	r10,36
800014c8:	e0 8b 00 18 	brhi	800014f8 <_calloc_r+0x4c>
800014cc:	18 98       	mov	r8,r12
800014ce:	59 3a       	cp.w	r10,19
800014d0:	e0 88 00 0f 	brls	800014ee <_calloc_r+0x42>
800014d4:	30 09       	mov	r9,0
800014d6:	10 a9       	st.w	r8++,r9
800014d8:	10 a9       	st.w	r8++,r9
800014da:	59 ba       	cp.w	r10,27
800014dc:	e0 88 00 09 	brls	800014ee <_calloc_r+0x42>
800014e0:	10 a9       	st.w	r8++,r9
800014e2:	10 a9       	st.w	r8++,r9
800014e4:	e0 4a 00 24 	cp.w	r10,36
800014e8:	c0 31       	brne	800014ee <_calloc_r+0x42>
800014ea:	10 a9       	st.w	r8++,r9
800014ec:	10 a9       	st.w	r8++,r9
800014ee:	30 09       	mov	r9,0
800014f0:	10 a9       	st.w	r8++,r9
800014f2:	91 19       	st.w	r8[0x4],r9
800014f4:	91 09       	st.w	r8[0x0],r9
800014f6:	c0 48       	rjmp	800014fe <_calloc_r+0x52>
800014f8:	30 0b       	mov	r11,0
800014fa:	f0 1f 00 04 	mcall	80001508 <_calloc_r+0x5c>
800014fe:	0e 9c       	mov	r12,r7
80001500:	d8 22       	popm	r4-r7,pc
80001502:	00 00       	add	r0,r0
80001504:	80 00       	ld.sh	r0,r0[0x0]
80001506:	15 24       	ld.uh	r4,r10++
80001508:	80 00       	ld.sh	r0,r0[0x0]
8000150a:	19 74       	ld.ub	r4,--r12

8000150c <malloc>:
8000150c:	d4 01       	pushm	lr
8000150e:	48 48       	lddpc	r8,8000151c <malloc+0x10>
80001510:	18 9b       	mov	r11,r12
80001512:	70 0c       	ld.w	r12,r8[0x0]
80001514:	f0 1f 00 03 	mcall	80001520 <malloc+0x14>
80001518:	d8 02       	popm	pc
8000151a:	00 00       	add	r0,r0
8000151c:	00 00       	add	r0,r0
8000151e:	01 00       	ld.w	r0,r0++
80001520:	80 00       	ld.sh	r0,r0[0x0]
80001522:	15 24       	ld.uh	r4,r10++

80001524 <_malloc_r>:
80001524:	d4 31       	pushm	r0-r7,lr
80001526:	f6 c8 ff f5 	sub	r8,r11,-11
8000152a:	18 95       	mov	r5,r12
8000152c:	10 97       	mov	r7,r8
8000152e:	e0 17 ff f8 	andl	r7,0xfff8
80001532:	59 68       	cp.w	r8,22
80001534:	f9 b7 08 10 	movls	r7,16
80001538:	16 37       	cp.w	r7,r11
8000153a:	5f 38       	srlo	r8
8000153c:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001540:	c0 50       	breq	8000154a <_malloc_r+0x26>
80001542:	30 c8       	mov	r8,12
80001544:	99 38       	st.w	r12[0xc],r8
80001546:	e0 8f 01 f3 	bral	8000192c <_malloc_r+0x408>
8000154a:	f0 1f 00 50 	mcall	80001688 <_malloc_r+0x164>
8000154e:	e0 47 01 f7 	cp.w	r7,503
80001552:	e0 8b 00 1c 	brhi	8000158a <_malloc_r+0x66>
80001556:	ee 03 16 03 	lsr	r3,r7,0x3
8000155a:	4c d8       	lddpc	r8,8000168c <_malloc_r+0x168>
8000155c:	f0 03 00 38 	add	r8,r8,r3<<0x3
80001560:	70 36       	ld.w	r6,r8[0xc]
80001562:	10 36       	cp.w	r6,r8
80001564:	c0 61       	brne	80001570 <_malloc_r+0x4c>
80001566:	ec c8 ff f8 	sub	r8,r6,-8
8000156a:	70 36       	ld.w	r6,r8[0xc]
8000156c:	10 36       	cp.w	r6,r8
8000156e:	c0 c0       	breq	80001586 <_malloc_r+0x62>
80001570:	6c 18       	ld.w	r8,r6[0x4]
80001572:	e0 18 ff fc 	andl	r8,0xfffc
80001576:	6c 3a       	ld.w	r10,r6[0xc]
80001578:	ec 08 00 09 	add	r9,r6,r8
8000157c:	0a 9c       	mov	r12,r5
8000157e:	6c 28       	ld.w	r8,r6[0x8]
80001580:	95 28       	st.w	r10[0x8],r8
80001582:	91 3a       	st.w	r8[0xc],r10
80001584:	c4 68       	rjmp	80001610 <_malloc_r+0xec>
80001586:	2f e3       	sub	r3,-2
80001588:	c4 c8       	rjmp	80001620 <_malloc_r+0xfc>
8000158a:	ee 03 16 09 	lsr	r3,r7,0x9
8000158e:	c0 41       	brne	80001596 <_malloc_r+0x72>
80001590:	ee 03 16 03 	lsr	r3,r7,0x3
80001594:	c2 68       	rjmp	800015e0 <_malloc_r+0xbc>
80001596:	58 43       	cp.w	r3,4
80001598:	e0 8b 00 06 	brhi	800015a4 <_malloc_r+0x80>
8000159c:	ee 03 16 06 	lsr	r3,r7,0x6
800015a0:	2c 83       	sub	r3,-56
800015a2:	c1 f8       	rjmp	800015e0 <_malloc_r+0xbc>
800015a4:	59 43       	cp.w	r3,20
800015a6:	e0 8b 00 04 	brhi	800015ae <_malloc_r+0x8a>
800015aa:	2a 53       	sub	r3,-91
800015ac:	c1 a8       	rjmp	800015e0 <_malloc_r+0xbc>
800015ae:	e0 43 00 54 	cp.w	r3,84
800015b2:	e0 8b 00 06 	brhi	800015be <_malloc_r+0x9a>
800015b6:	ee 03 16 0c 	lsr	r3,r7,0xc
800015ba:	29 23       	sub	r3,-110
800015bc:	c1 28       	rjmp	800015e0 <_malloc_r+0xbc>
800015be:	e0 43 01 54 	cp.w	r3,340
800015c2:	e0 8b 00 06 	brhi	800015ce <_malloc_r+0xaa>
800015c6:	ee 03 16 0f 	lsr	r3,r7,0xf
800015ca:	28 93       	sub	r3,-119
800015cc:	c0 a8       	rjmp	800015e0 <_malloc_r+0xbc>
800015ce:	e0 43 05 54 	cp.w	r3,1364
800015d2:	e0 88 00 04 	brls	800015da <_malloc_r+0xb6>
800015d6:	37 e3       	mov	r3,126
800015d8:	c0 48       	rjmp	800015e0 <_malloc_r+0xbc>
800015da:	ee 03 16 12 	lsr	r3,r7,0x12
800015de:	28 43       	sub	r3,-124
800015e0:	4a ba       	lddpc	r10,8000168c <_malloc_r+0x168>
800015e2:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800015e6:	74 36       	ld.w	r6,r10[0xc]
800015e8:	c1 98       	rjmp	8000161a <_malloc_r+0xf6>
800015ea:	6c 19       	ld.w	r9,r6[0x4]
800015ec:	e0 19 ff fc 	andl	r9,0xfffc
800015f0:	f2 07 01 0b 	sub	r11,r9,r7
800015f4:	58 fb       	cp.w	r11,15
800015f6:	e0 8a 00 04 	brle	800015fe <_malloc_r+0xda>
800015fa:	20 13       	sub	r3,1
800015fc:	c1 18       	rjmp	8000161e <_malloc_r+0xfa>
800015fe:	6c 38       	ld.w	r8,r6[0xc]
80001600:	58 0b       	cp.w	r11,0
80001602:	c0 b5       	brlt	80001618 <_malloc_r+0xf4>
80001604:	6c 2a       	ld.w	r10,r6[0x8]
80001606:	ec 09 00 09 	add	r9,r6,r9
8000160a:	0a 9c       	mov	r12,r5
8000160c:	91 2a       	st.w	r8[0x8],r10
8000160e:	95 38       	st.w	r10[0xc],r8
80001610:	72 18       	ld.w	r8,r9[0x4]
80001612:	a1 a8       	sbr	r8,0x0
80001614:	93 18       	st.w	r9[0x4],r8
80001616:	cb c8       	rjmp	8000178e <_malloc_r+0x26a>
80001618:	10 96       	mov	r6,r8
8000161a:	14 36       	cp.w	r6,r10
8000161c:	ce 71       	brne	800015ea <_malloc_r+0xc6>
8000161e:	2f f3       	sub	r3,-1
80001620:	49 ba       	lddpc	r10,8000168c <_malloc_r+0x168>
80001622:	f4 cc ff f8 	sub	r12,r10,-8
80001626:	78 26       	ld.w	r6,r12[0x8]
80001628:	18 36       	cp.w	r6,r12
8000162a:	c6 e0       	breq	80001706 <_malloc_r+0x1e2>
8000162c:	6c 19       	ld.w	r9,r6[0x4]
8000162e:	e0 19 ff fc 	andl	r9,0xfffc
80001632:	f2 07 01 08 	sub	r8,r9,r7
80001636:	58 f8       	cp.w	r8,15
80001638:	e0 89 00 90 	brgt	80001758 <_malloc_r+0x234>
8000163c:	99 3c       	st.w	r12[0xc],r12
8000163e:	99 2c       	st.w	r12[0x8],r12
80001640:	58 08       	cp.w	r8,0
80001642:	c0 55       	brlt	8000164c <_malloc_r+0x128>
80001644:	ec 09 00 09 	add	r9,r6,r9
80001648:	0a 9c       	mov	r12,r5
8000164a:	ce 3b       	rjmp	80001610 <_malloc_r+0xec>
8000164c:	e0 49 01 ff 	cp.w	r9,511
80001650:	e0 8b 00 13 	brhi	80001676 <_malloc_r+0x152>
80001654:	a3 99       	lsr	r9,0x3
80001656:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000165a:	70 2b       	ld.w	r11,r8[0x8]
8000165c:	8d 38       	st.w	r6[0xc],r8
8000165e:	8d 2b       	st.w	r6[0x8],r11
80001660:	97 36       	st.w	r11[0xc],r6
80001662:	91 26       	st.w	r8[0x8],r6
80001664:	a3 49       	asr	r9,0x2
80001666:	74 18       	ld.w	r8,r10[0x4]
80001668:	30 1b       	mov	r11,1
8000166a:	f6 09 09 49 	lsl	r9,r11,r9
8000166e:	f1 e9 10 09 	or	r9,r8,r9
80001672:	95 19       	st.w	r10[0x4],r9
80001674:	c4 98       	rjmp	80001706 <_malloc_r+0x1e2>
80001676:	f2 0a 16 09 	lsr	r10,r9,0x9
8000167a:	58 4a       	cp.w	r10,4
8000167c:	e0 8b 00 0a 	brhi	80001690 <_malloc_r+0x16c>
80001680:	f2 0a 16 06 	lsr	r10,r9,0x6
80001684:	2c 8a       	sub	r10,-56
80001686:	c2 38       	rjmp	800016cc <_malloc_r+0x1a8>
80001688:	80 00       	ld.sh	r0,r0[0x0]
8000168a:	19 82       	ld.ub	r2,r12[0x0]
8000168c:	00 00       	add	r0,r0
8000168e:	01 04       	ld.w	r4,r0++
80001690:	59 4a       	cp.w	r10,20
80001692:	e0 8b 00 04 	brhi	8000169a <_malloc_r+0x176>
80001696:	2a 5a       	sub	r10,-91
80001698:	c1 a8       	rjmp	800016cc <_malloc_r+0x1a8>
8000169a:	e0 4a 00 54 	cp.w	r10,84
8000169e:	e0 8b 00 06 	brhi	800016aa <_malloc_r+0x186>
800016a2:	f2 0a 16 0c 	lsr	r10,r9,0xc
800016a6:	29 2a       	sub	r10,-110
800016a8:	c1 28       	rjmp	800016cc <_malloc_r+0x1a8>
800016aa:	e0 4a 01 54 	cp.w	r10,340
800016ae:	e0 8b 00 06 	brhi	800016ba <_malloc_r+0x196>
800016b2:	f2 0a 16 0f 	lsr	r10,r9,0xf
800016b6:	28 9a       	sub	r10,-119
800016b8:	c0 a8       	rjmp	800016cc <_malloc_r+0x1a8>
800016ba:	e0 4a 05 54 	cp.w	r10,1364
800016be:	e0 88 00 04 	brls	800016c6 <_malloc_r+0x1a2>
800016c2:	37 ea       	mov	r10,126
800016c4:	c0 48       	rjmp	800016cc <_malloc_r+0x1a8>
800016c6:	f2 0a 16 12 	lsr	r10,r9,0x12
800016ca:	28 4a       	sub	r10,-124
800016cc:	4c 8b       	lddpc	r11,800017ec <_malloc_r+0x2c8>
800016ce:	f6 0a 00 34 	add	r4,r11,r10<<0x3
800016d2:	68 28       	ld.w	r8,r4[0x8]
800016d4:	08 38       	cp.w	r8,r4
800016d6:	c0 e1       	brne	800016f2 <_malloc_r+0x1ce>
800016d8:	76 19       	ld.w	r9,r11[0x4]
800016da:	a3 4a       	asr	r10,0x2
800016dc:	30 1e       	mov	lr,1
800016de:	fc 0a 09 4a 	lsl	r10,lr,r10
800016e2:	f3 ea 10 0a 	or	r10,r9,r10
800016e6:	10 99       	mov	r9,r8
800016e8:	97 1a       	st.w	r11[0x4],r10
800016ea:	c0 a8       	rjmp	800016fe <_malloc_r+0x1da>
800016ec:	70 28       	ld.w	r8,r8[0x8]
800016ee:	08 38       	cp.w	r8,r4
800016f0:	c0 60       	breq	800016fc <_malloc_r+0x1d8>
800016f2:	70 1a       	ld.w	r10,r8[0x4]
800016f4:	e0 1a ff fc 	andl	r10,0xfffc
800016f8:	14 39       	cp.w	r9,r10
800016fa:	cf 93       	brcs	800016ec <_malloc_r+0x1c8>
800016fc:	70 39       	ld.w	r9,r8[0xc]
800016fe:	8d 39       	st.w	r6[0xc],r9
80001700:	8d 28       	st.w	r6[0x8],r8
80001702:	91 36       	st.w	r8[0xc],r6
80001704:	93 26       	st.w	r9[0x8],r6
80001706:	e6 08 14 02 	asr	r8,r3,0x2
8000170a:	30 1b       	mov	r11,1
8000170c:	4b 84       	lddpc	r4,800017ec <_malloc_r+0x2c8>
8000170e:	f6 08 09 4b 	lsl	r11,r11,r8
80001712:	68 18       	ld.w	r8,r4[0x4]
80001714:	10 3b       	cp.w	r11,r8
80001716:	e0 8b 00 6f 	brhi	800017f4 <_malloc_r+0x2d0>
8000171a:	f7 e8 00 09 	and	r9,r11,r8
8000171e:	c0 b1       	brne	80001734 <_malloc_r+0x210>
80001720:	e0 13 ff fc 	andl	r3,0xfffc
80001724:	a1 7b       	lsl	r11,0x1
80001726:	2f c3       	sub	r3,-4
80001728:	c0 38       	rjmp	8000172e <_malloc_r+0x20a>
8000172a:	2f c3       	sub	r3,-4
8000172c:	a1 7b       	lsl	r11,0x1
8000172e:	f7 e8 00 09 	and	r9,r11,r8
80001732:	cf c0       	breq	8000172a <_malloc_r+0x206>
80001734:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001738:	06 92       	mov	r2,r3
8000173a:	1c 91       	mov	r1,lr
8000173c:	62 36       	ld.w	r6,r1[0xc]
8000173e:	c2 e8       	rjmp	8000179a <_malloc_r+0x276>
80001740:	6c 1a       	ld.w	r10,r6[0x4]
80001742:	e0 1a ff fc 	andl	r10,0xfffc
80001746:	f4 07 01 08 	sub	r8,r10,r7
8000174a:	58 f8       	cp.w	r8,15
8000174c:	e0 8a 00 15 	brle	80001776 <_malloc_r+0x252>
80001750:	6c 3a       	ld.w	r10,r6[0xc]
80001752:	6c 29       	ld.w	r9,r6[0x8]
80001754:	95 29       	st.w	r10[0x8],r9
80001756:	93 3a       	st.w	r9[0xc],r10
80001758:	0e 99       	mov	r9,r7
8000175a:	ec 07 00 07 	add	r7,r6,r7
8000175e:	a1 a9       	sbr	r9,0x0
80001760:	99 37       	st.w	r12[0xc],r7
80001762:	99 27       	st.w	r12[0x8],r7
80001764:	8d 19       	st.w	r6[0x4],r9
80001766:	ee 08 09 08 	st.w	r7[r8],r8
8000176a:	8f 2c       	st.w	r7[0x8],r12
8000176c:	8f 3c       	st.w	r7[0xc],r12
8000176e:	a1 a8       	sbr	r8,0x0
80001770:	0a 9c       	mov	r12,r5
80001772:	8f 18       	st.w	r7[0x4],r8
80001774:	c0 d8       	rjmp	8000178e <_malloc_r+0x26a>
80001776:	6c 39       	ld.w	r9,r6[0xc]
80001778:	58 08       	cp.w	r8,0
8000177a:	c0 f5       	brlt	80001798 <_malloc_r+0x274>
8000177c:	ec 0a 00 0a 	add	r10,r6,r10
80001780:	74 18       	ld.w	r8,r10[0x4]
80001782:	a1 a8       	sbr	r8,0x0
80001784:	0a 9c       	mov	r12,r5
80001786:	95 18       	st.w	r10[0x4],r8
80001788:	6c 28       	ld.w	r8,r6[0x8]
8000178a:	93 28       	st.w	r9[0x8],r8
8000178c:	91 39       	st.w	r8[0xc],r9
8000178e:	f0 1f 00 19 	mcall	800017f0 <_malloc_r+0x2cc>
80001792:	ec cc ff f8 	sub	r12,r6,-8
80001796:	d8 32       	popm	r0-r7,pc
80001798:	12 96       	mov	r6,r9
8000179a:	02 36       	cp.w	r6,r1
8000179c:	cd 21       	brne	80001740 <_malloc_r+0x21c>
8000179e:	2f f2       	sub	r2,-1
800017a0:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800017a4:	c0 30       	breq	800017aa <_malloc_r+0x286>
800017a6:	2f 81       	sub	r1,-8
800017a8:	cc ab       	rjmp	8000173c <_malloc_r+0x218>
800017aa:	1c 98       	mov	r8,lr
800017ac:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800017b0:	c0 81       	brne	800017c0 <_malloc_r+0x29c>
800017b2:	68 19       	ld.w	r9,r4[0x4]
800017b4:	f6 08 11 ff 	rsub	r8,r11,-1
800017b8:	f3 e8 00 08 	and	r8,r9,r8
800017bc:	89 18       	st.w	r4[0x4],r8
800017be:	c0 78       	rjmp	800017cc <_malloc_r+0x2a8>
800017c0:	f0 c9 00 08 	sub	r9,r8,8
800017c4:	20 13       	sub	r3,1
800017c6:	70 08       	ld.w	r8,r8[0x0]
800017c8:	12 38       	cp.w	r8,r9
800017ca:	cf 10       	breq	800017ac <_malloc_r+0x288>
800017cc:	a1 7b       	lsl	r11,0x1
800017ce:	68 18       	ld.w	r8,r4[0x4]
800017d0:	10 3b       	cp.w	r11,r8
800017d2:	e0 8b 00 11 	brhi	800017f4 <_malloc_r+0x2d0>
800017d6:	58 0b       	cp.w	r11,0
800017d8:	c0 e0       	breq	800017f4 <_malloc_r+0x2d0>
800017da:	04 93       	mov	r3,r2
800017dc:	c0 38       	rjmp	800017e2 <_malloc_r+0x2be>
800017de:	2f c3       	sub	r3,-4
800017e0:	a1 7b       	lsl	r11,0x1
800017e2:	f7 e8 00 09 	and	r9,r11,r8
800017e6:	ca 71       	brne	80001734 <_malloc_r+0x210>
800017e8:	cf bb       	rjmp	800017de <_malloc_r+0x2ba>
800017ea:	00 00       	add	r0,r0
800017ec:	00 00       	add	r0,r0
800017ee:	01 04       	ld.w	r4,r0++
800017f0:	80 00       	ld.sh	r0,r0[0x0]
800017f2:	19 84       	ld.ub	r4,r12[0x0]
800017f4:	68 23       	ld.w	r3,r4[0x8]
800017f6:	66 12       	ld.w	r2,r3[0x4]
800017f8:	e0 12 ff fc 	andl	r2,0xfffc
800017fc:	0e 32       	cp.w	r2,r7
800017fe:	5f 39       	srlo	r9
80001800:	e4 07 01 08 	sub	r8,r2,r7
80001804:	58 f8       	cp.w	r8,15
80001806:	5f aa       	srle	r10
80001808:	f5 e9 10 09 	or	r9,r10,r9
8000180c:	e0 80 00 a2 	breq	80001950 <_malloc_r+0x42c>
80001810:	4c 88       	lddpc	r8,80001930 <_malloc_r+0x40c>
80001812:	70 01       	ld.w	r1,r8[0x0]
80001814:	4c 88       	lddpc	r8,80001934 <_malloc_r+0x410>
80001816:	2f 01       	sub	r1,-16
80001818:	70 08       	ld.w	r8,r8[0x0]
8000181a:	0e 01       	add	r1,r7
8000181c:	5b f8       	cp.w	r8,-1
8000181e:	c0 40       	breq	80001826 <_malloc_r+0x302>
80001820:	28 11       	sub	r1,-127
80001822:	e0 11 ff 80 	andl	r1,0xff80
80001826:	02 9b       	mov	r11,r1
80001828:	0a 9c       	mov	r12,r5
8000182a:	f0 1f 00 44 	mcall	80001938 <_malloc_r+0x414>
8000182e:	18 96       	mov	r6,r12
80001830:	5b fc       	cp.w	r12,-1
80001832:	c6 e0       	breq	8000190e <_malloc_r+0x3ea>
80001834:	e6 02 00 08 	add	r8,r3,r2
80001838:	10 3c       	cp.w	r12,r8
8000183a:	c0 32       	brcc	80001840 <_malloc_r+0x31c>
8000183c:	08 33       	cp.w	r3,r4
8000183e:	c6 81       	brne	8000190e <_malloc_r+0x3ea>
80001840:	4b fa       	lddpc	r10,8000193c <_malloc_r+0x418>
80001842:	74 09       	ld.w	r9,r10[0x0]
80001844:	e2 09 00 09 	add	r9,r1,r9
80001848:	95 09       	st.w	r10[0x0],r9
8000184a:	10 36       	cp.w	r6,r8
8000184c:	c0 a1       	brne	80001860 <_malloc_r+0x33c>
8000184e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80001852:	c0 71       	brne	80001860 <_malloc_r+0x33c>
80001854:	e2 02 00 02 	add	r2,r1,r2
80001858:	68 28       	ld.w	r8,r4[0x8]
8000185a:	a1 a2       	sbr	r2,0x0
8000185c:	91 12       	st.w	r8[0x4],r2
8000185e:	c4 c8       	rjmp	800018f6 <_malloc_r+0x3d2>
80001860:	4b 5a       	lddpc	r10,80001934 <_malloc_r+0x410>
80001862:	74 0b       	ld.w	r11,r10[0x0]
80001864:	5b fb       	cp.w	r11,-1
80001866:	c0 31       	brne	8000186c <_malloc_r+0x348>
80001868:	95 06       	st.w	r10[0x0],r6
8000186a:	c0 68       	rjmp	80001876 <_malloc_r+0x352>
8000186c:	ec 09 00 09 	add	r9,r6,r9
80001870:	4b 3a       	lddpc	r10,8000193c <_malloc_r+0x418>
80001872:	10 19       	sub	r9,r8
80001874:	95 09       	st.w	r10[0x0],r9
80001876:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000187a:	f0 09 11 08 	rsub	r9,r8,8
8000187e:	58 08       	cp.w	r8,0
80001880:	f2 08 17 10 	movne	r8,r9
80001884:	ed d8 e1 06 	addne	r6,r6,r8
80001888:	28 08       	sub	r8,-128
8000188a:	ec 01 00 01 	add	r1,r6,r1
8000188e:	0a 9c       	mov	r12,r5
80001890:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80001894:	f0 01 01 01 	sub	r1,r8,r1
80001898:	02 9b       	mov	r11,r1
8000189a:	f0 1f 00 28 	mcall	80001938 <_malloc_r+0x414>
8000189e:	4a 88       	lddpc	r8,8000193c <_malloc_r+0x418>
800018a0:	5b fc       	cp.w	r12,-1
800018a2:	ec 0c 17 00 	moveq	r12,r6
800018a6:	f9 b1 00 00 	moveq	r1,0
800018aa:	70 09       	ld.w	r9,r8[0x0]
800018ac:	0c 1c       	sub	r12,r6
800018ae:	89 26       	st.w	r4[0x8],r6
800018b0:	02 0c       	add	r12,r1
800018b2:	12 01       	add	r1,r9
800018b4:	a1 ac       	sbr	r12,0x0
800018b6:	91 01       	st.w	r8[0x0],r1
800018b8:	8d 1c       	st.w	r6[0x4],r12
800018ba:	08 33       	cp.w	r3,r4
800018bc:	c1 d0       	breq	800018f6 <_malloc_r+0x3d2>
800018be:	58 f2       	cp.w	r2,15
800018c0:	e0 8b 00 05 	brhi	800018ca <_malloc_r+0x3a6>
800018c4:	30 18       	mov	r8,1
800018c6:	8d 18       	st.w	r6[0x4],r8
800018c8:	c2 38       	rjmp	8000190e <_malloc_r+0x3ea>
800018ca:	30 59       	mov	r9,5
800018cc:	20 c2       	sub	r2,12
800018ce:	e0 12 ff f8 	andl	r2,0xfff8
800018d2:	e6 02 00 08 	add	r8,r3,r2
800018d6:	91 29       	st.w	r8[0x8],r9
800018d8:	91 19       	st.w	r8[0x4],r9
800018da:	66 18       	ld.w	r8,r3[0x4]
800018dc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800018e0:	e5 e8 10 08 	or	r8,r2,r8
800018e4:	87 18       	st.w	r3[0x4],r8
800018e6:	58 f2       	cp.w	r2,15
800018e8:	e0 88 00 07 	brls	800018f6 <_malloc_r+0x3d2>
800018ec:	e6 cb ff f8 	sub	r11,r3,-8
800018f0:	0a 9c       	mov	r12,r5
800018f2:	f0 1f 00 14 	mcall	80001940 <_malloc_r+0x41c>
800018f6:	49 49       	lddpc	r9,80001944 <_malloc_r+0x420>
800018f8:	72 0a       	ld.w	r10,r9[0x0]
800018fa:	49 18       	lddpc	r8,8000193c <_malloc_r+0x418>
800018fc:	70 08       	ld.w	r8,r8[0x0]
800018fe:	14 38       	cp.w	r8,r10
80001900:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001904:	49 19       	lddpc	r9,80001948 <_malloc_r+0x424>
80001906:	72 0a       	ld.w	r10,r9[0x0]
80001908:	14 38       	cp.w	r8,r10
8000190a:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000190e:	68 28       	ld.w	r8,r4[0x8]
80001910:	70 18       	ld.w	r8,r8[0x4]
80001912:	e0 18 ff fc 	andl	r8,0xfffc
80001916:	0e 38       	cp.w	r8,r7
80001918:	5f 39       	srlo	r9
8000191a:	0e 18       	sub	r8,r7
8000191c:	58 f8       	cp.w	r8,15
8000191e:	5f aa       	srle	r10
80001920:	f5 e9 10 09 	or	r9,r10,r9
80001924:	c1 60       	breq	80001950 <_malloc_r+0x42c>
80001926:	0a 9c       	mov	r12,r5
80001928:	f0 1f 00 09 	mcall	8000194c <_malloc_r+0x428>
8000192c:	d8 3a       	popm	r0-r7,pc,r12=0
8000192e:	00 00       	add	r0,r0
80001930:	00 00       	add	r0,r0
80001932:	05 a0       	ld.ub	r0,r2[0x2]
80001934:	00 00       	add	r0,r0
80001936:	05 10       	ld.sh	r0,r2++
80001938:	80 00       	ld.sh	r0,r0[0x0]
8000193a:	19 88       	ld.ub	r8,r12[0x0]
8000193c:	00 00       	add	r0,r0
8000193e:	05 a4       	ld.ub	r4,r2[0x2]
80001940:	80 00       	ld.sh	r0,r0[0x0]
80001942:	1a a4       	st.w	sp++,r4
80001944:	00 00       	add	r0,r0
80001946:	05 9c       	ld.ub	r12,r2[0x1]
80001948:	00 00       	add	r0,r0
8000194a:	05 98       	ld.ub	r8,r2[0x1]
8000194c:	80 00       	ld.sh	r0,r0[0x0]
8000194e:	19 84       	ld.ub	r4,r12[0x0]
80001950:	68 26       	ld.w	r6,r4[0x8]
80001952:	a1 a8       	sbr	r8,0x0
80001954:	0e 99       	mov	r9,r7
80001956:	a1 a9       	sbr	r9,0x0
80001958:	8d 19       	st.w	r6[0x4],r9
8000195a:	ec 07 00 07 	add	r7,r6,r7
8000195e:	0a 9c       	mov	r12,r5
80001960:	89 27       	st.w	r4[0x8],r7
80001962:	8f 18       	st.w	r7[0x4],r8
80001964:	f0 1f 00 03 	mcall	80001970 <_malloc_r+0x44c>
80001968:	ec cc ff f8 	sub	r12,r6,-8
8000196c:	d8 32       	popm	r0-r7,pc
8000196e:	00 00       	add	r0,r0
80001970:	80 00       	ld.sh	r0,r0[0x0]
80001972:	19 84       	ld.ub	r4,r12[0x0]

80001974 <memset>:
80001974:	18 98       	mov	r8,r12
80001976:	c0 38       	rjmp	8000197c <memset+0x8>
80001978:	10 cb       	st.b	r8++,r11
8000197a:	20 1a       	sub	r10,1
8000197c:	58 0a       	cp.w	r10,0
8000197e:	cf d1       	brne	80001978 <memset+0x4>
80001980:	5e fc       	retal	r12

80001982 <__malloc_lock>:
80001982:	5e fc       	retal	r12

80001984 <__malloc_unlock>:
80001984:	5e fc       	retal	r12
80001986:	d7 03       	nop

80001988 <_sbrk_r>:
80001988:	d4 21       	pushm	r4-r7,lr
8000198a:	30 08       	mov	r8,0
8000198c:	18 97       	mov	r7,r12
8000198e:	48 76       	lddpc	r6,800019a8 <_sbrk_r+0x20>
80001990:	16 9c       	mov	r12,r11
80001992:	8d 08       	st.w	r6[0x0],r8
80001994:	f0 1f 00 06 	mcall	800019ac <_sbrk_r+0x24>
80001998:	5b fc       	cp.w	r12,-1
8000199a:	c0 51       	brne	800019a4 <_sbrk_r+0x1c>
8000199c:	6c 08       	ld.w	r8,r6[0x0]
8000199e:	58 08       	cp.w	r8,0
800019a0:	ef f8 1a 03 	st.wne	r7[0xc],r8
800019a4:	d8 22       	popm	r4-r7,pc
800019a6:	00 00       	add	r0,r0
800019a8:	00 00       	add	r0,r0
800019aa:	06 a8       	st.w	r3++,r8
800019ac:	80 00       	ld.sh	r0,r0[0x0]
800019ae:	19 b0       	ld.ub	r0,r12[0x3]

800019b0 <_sbrk>:
800019b0:	d4 01       	pushm	lr
800019b2:	48 c8       	lddpc	r8,800019e0 <_sbrk+0x30>
800019b4:	70 09       	ld.w	r9,r8[0x0]
800019b6:	58 09       	cp.w	r9,0
800019b8:	c0 31       	brne	800019be <_sbrk+0xe>
800019ba:	48 b9       	lddpc	r9,800019e4 <_sbrk+0x34>
800019bc:	91 09       	st.w	r8[0x0],r9
800019be:	48 99       	lddpc	r9,800019e0 <_sbrk+0x30>
800019c0:	48 aa       	lddpc	r10,800019e8 <_sbrk+0x38>
800019c2:	72 08       	ld.w	r8,r9[0x0]
800019c4:	f0 0c 00 0c 	add	r12,r8,r12
800019c8:	14 3c       	cp.w	r12,r10
800019ca:	e0 8b 00 04 	brhi	800019d2 <_sbrk+0x22>
800019ce:	93 0c       	st.w	r9[0x0],r12
800019d0:	c0 68       	rjmp	800019dc <_sbrk+0x2c>
800019d2:	f0 1f 00 07 	mcall	800019ec <_sbrk+0x3c>
800019d6:	30 c8       	mov	r8,12
800019d8:	99 08       	st.w	r12[0x0],r8
800019da:	3f f8       	mov	r8,-1
800019dc:	10 9c       	mov	r12,r8
800019de:	d8 02       	popm	pc
800019e0:	00 00       	add	r0,r0
800019e2:	05 cc       	ld.ub	r12,r2[0x4]
800019e4:	00 00       	add	r0,r0
800019e6:	06 b0       	st.h	r3++,r0
800019e8:	00 00       	add	r0,r0
800019ea:	e0 00       	*unknown*
800019ec:	80 00       	ld.sh	r0,r0[0x0]
800019ee:	19 f0       	ld.ub	r0,r12[0x7]

800019f0 <__errno>:
800019f0:	48 28       	lddpc	r8,800019f8 <__errno+0x8>
800019f2:	70 0c       	ld.w	r12,r8[0x0]
800019f4:	2f 4c       	sub	r12,-12
800019f6:	5e fc       	retal	r12
800019f8:	00 00       	add	r0,r0
800019fa:	01 00       	ld.w	r0,r0++

800019fc <_malloc_trim_r>:
800019fc:	d4 21       	pushm	r4-r7,lr
800019fe:	16 95       	mov	r5,r11
80001a00:	18 97       	mov	r7,r12
80001a02:	f0 1f 00 23 	mcall	80001a8c <_malloc_trim_r+0x90>
80001a06:	4a 34       	lddpc	r4,80001a90 <_malloc_trim_r+0x94>
80001a08:	68 28       	ld.w	r8,r4[0x8]
80001a0a:	70 16       	ld.w	r6,r8[0x4]
80001a0c:	e0 16 ff fc 	andl	r6,0xfffc
80001a10:	ec c8 ff 91 	sub	r8,r6,-111
80001a14:	f0 05 01 05 	sub	r5,r8,r5
80001a18:	e0 15 ff 80 	andl	r5,0xff80
80001a1c:	ea c5 00 80 	sub	r5,r5,128
80001a20:	e0 45 00 7f 	cp.w	r5,127
80001a24:	e0 8a 00 23 	brle	80001a6a <_malloc_trim_r+0x6e>
80001a28:	30 0b       	mov	r11,0
80001a2a:	0e 9c       	mov	r12,r7
80001a2c:	f0 1f 00 1a 	mcall	80001a94 <_malloc_trim_r+0x98>
80001a30:	68 28       	ld.w	r8,r4[0x8]
80001a32:	0c 08       	add	r8,r6
80001a34:	10 3c       	cp.w	r12,r8
80001a36:	c1 a1       	brne	80001a6a <_malloc_trim_r+0x6e>
80001a38:	ea 0b 11 00 	rsub	r11,r5,0
80001a3c:	0e 9c       	mov	r12,r7
80001a3e:	f0 1f 00 16 	mcall	80001a94 <_malloc_trim_r+0x98>
80001a42:	5b fc       	cp.w	r12,-1
80001a44:	c1 71       	brne	80001a72 <_malloc_trim_r+0x76>
80001a46:	30 0b       	mov	r11,0
80001a48:	0e 9c       	mov	r12,r7
80001a4a:	f0 1f 00 13 	mcall	80001a94 <_malloc_trim_r+0x98>
80001a4e:	68 28       	ld.w	r8,r4[0x8]
80001a50:	f8 08 01 09 	sub	r9,r12,r8
80001a54:	58 f9       	cp.w	r9,15
80001a56:	e0 8a 00 0a 	brle	80001a6a <_malloc_trim_r+0x6e>
80001a5a:	a1 a9       	sbr	r9,0x0
80001a5c:	91 19       	st.w	r8[0x4],r9
80001a5e:	48 f8       	lddpc	r8,80001a98 <_malloc_trim_r+0x9c>
80001a60:	70 09       	ld.w	r9,r8[0x0]
80001a62:	48 f8       	lddpc	r8,80001a9c <_malloc_trim_r+0xa0>
80001a64:	f8 09 01 09 	sub	r9,r12,r9
80001a68:	91 09       	st.w	r8[0x0],r9
80001a6a:	0e 9c       	mov	r12,r7
80001a6c:	f0 1f 00 0d 	mcall	80001aa0 <_malloc_trim_r+0xa4>
80001a70:	d8 2a       	popm	r4-r7,pc,r12=0
80001a72:	68 28       	ld.w	r8,r4[0x8]
80001a74:	0a 16       	sub	r6,r5
80001a76:	a1 a6       	sbr	r6,0x0
80001a78:	91 16       	st.w	r8[0x4],r6
80001a7a:	48 98       	lddpc	r8,80001a9c <_malloc_trim_r+0xa0>
80001a7c:	70 09       	ld.w	r9,r8[0x0]
80001a7e:	0a 19       	sub	r9,r5
80001a80:	0e 9c       	mov	r12,r7
80001a82:	91 09       	st.w	r8[0x0],r9
80001a84:	f0 1f 00 07 	mcall	80001aa0 <_malloc_trim_r+0xa4>
80001a88:	da 2a       	popm	r4-r7,pc,r12=1
80001a8a:	00 00       	add	r0,r0
80001a8c:	80 00       	ld.sh	r0,r0[0x0]
80001a8e:	19 82       	ld.ub	r2,r12[0x0]
80001a90:	00 00       	add	r0,r0
80001a92:	01 04       	ld.w	r4,r0++
80001a94:	80 00       	ld.sh	r0,r0[0x0]
80001a96:	19 88       	ld.ub	r8,r12[0x0]
80001a98:	00 00       	add	r0,r0
80001a9a:	05 10       	ld.sh	r0,r2++
80001a9c:	00 00       	add	r0,r0
80001a9e:	05 a4       	ld.ub	r4,r2[0x2]
80001aa0:	80 00       	ld.sh	r0,r0[0x0]
80001aa2:	19 84       	ld.ub	r4,r12[0x0]

80001aa4 <_free_r>:
80001aa4:	d4 21       	pushm	r4-r7,lr
80001aa6:	16 96       	mov	r6,r11
80001aa8:	18 97       	mov	r7,r12
80001aaa:	58 0b       	cp.w	r11,0
80001aac:	e0 80 00 c8 	breq	80001c3c <_free_r+0x198>
80001ab0:	f0 1f 00 4c 	mcall	80001be0 <_free_r+0x13c>
80001ab4:	20 86       	sub	r6,8
80001ab6:	4c ca       	lddpc	r10,80001be4 <_free_r+0x140>
80001ab8:	6c 18       	ld.w	r8,r6[0x4]
80001aba:	74 2e       	ld.w	lr,r10[0x8]
80001abc:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001ac0:	a1 c8       	cbr	r8,0x0
80001ac2:	ec 08 00 09 	add	r9,r6,r8
80001ac6:	72 1b       	ld.w	r11,r9[0x4]
80001ac8:	e0 1b ff fc 	andl	r11,0xfffc
80001acc:	1c 39       	cp.w	r9,lr
80001ace:	c1 d1       	brne	80001b08 <_free_r+0x64>
80001ad0:	f6 08 00 08 	add	r8,r11,r8
80001ad4:	58 0c       	cp.w	r12,0
80001ad6:	c0 81       	brne	80001ae6 <_free_r+0x42>
80001ad8:	6c 09       	ld.w	r9,r6[0x0]
80001ada:	12 16       	sub	r6,r9
80001adc:	12 08       	add	r8,r9
80001ade:	6c 3b       	ld.w	r11,r6[0xc]
80001ae0:	6c 29       	ld.w	r9,r6[0x8]
80001ae2:	97 29       	st.w	r11[0x8],r9
80001ae4:	93 3b       	st.w	r9[0xc],r11
80001ae6:	10 99       	mov	r9,r8
80001ae8:	95 26       	st.w	r10[0x8],r6
80001aea:	a1 a9       	sbr	r9,0x0
80001aec:	8d 19       	st.w	r6[0x4],r9
80001aee:	4b f9       	lddpc	r9,80001be8 <_free_r+0x144>
80001af0:	72 09       	ld.w	r9,r9[0x0]
80001af2:	12 38       	cp.w	r8,r9
80001af4:	c0 63       	brcs	80001b00 <_free_r+0x5c>
80001af6:	4b e8       	lddpc	r8,80001bec <_free_r+0x148>
80001af8:	0e 9c       	mov	r12,r7
80001afa:	70 0b       	ld.w	r11,r8[0x0]
80001afc:	f0 1f 00 3d 	mcall	80001bf0 <_free_r+0x14c>
80001b00:	0e 9c       	mov	r12,r7
80001b02:	f0 1f 00 3d 	mcall	80001bf4 <_free_r+0x150>
80001b06:	d8 22       	popm	r4-r7,pc
80001b08:	93 1b       	st.w	r9[0x4],r11
80001b0a:	58 0c       	cp.w	r12,0
80001b0c:	c0 30       	breq	80001b12 <_free_r+0x6e>
80001b0e:	30 0c       	mov	r12,0
80001b10:	c1 08       	rjmp	80001b30 <_free_r+0x8c>
80001b12:	6c 0e       	ld.w	lr,r6[0x0]
80001b14:	f4 c5 ff f8 	sub	r5,r10,-8
80001b18:	1c 16       	sub	r6,lr
80001b1a:	1c 08       	add	r8,lr
80001b1c:	6c 2e       	ld.w	lr,r6[0x8]
80001b1e:	0a 3e       	cp.w	lr,r5
80001b20:	f9 bc 00 01 	moveq	r12,1
80001b24:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001b28:	eb fe 1a 02 	st.wne	r5[0x8],lr
80001b2c:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001b30:	f2 0b 00 0e 	add	lr,r9,r11
80001b34:	7c 1e       	ld.w	lr,lr[0x4]
80001b36:	ed be 00 00 	bld	lr,0x0
80001b3a:	c1 30       	breq	80001b60 <_free_r+0xbc>
80001b3c:	16 08       	add	r8,r11
80001b3e:	58 0c       	cp.w	r12,0
80001b40:	c0 c1       	brne	80001b58 <_free_r+0xb4>
80001b42:	4a 9e       	lddpc	lr,80001be4 <_free_r+0x140>
80001b44:	72 2b       	ld.w	r11,r9[0x8]
80001b46:	2f 8e       	sub	lr,-8
80001b48:	1c 3b       	cp.w	r11,lr
80001b4a:	c0 71       	brne	80001b58 <_free_r+0xb4>
80001b4c:	97 36       	st.w	r11[0xc],r6
80001b4e:	97 26       	st.w	r11[0x8],r6
80001b50:	8d 2b       	st.w	r6[0x8],r11
80001b52:	8d 3b       	st.w	r6[0xc],r11
80001b54:	30 1c       	mov	r12,1
80001b56:	c0 58       	rjmp	80001b60 <_free_r+0xbc>
80001b58:	72 2b       	ld.w	r11,r9[0x8]
80001b5a:	72 39       	ld.w	r9,r9[0xc]
80001b5c:	93 2b       	st.w	r9[0x8],r11
80001b5e:	97 39       	st.w	r11[0xc],r9
80001b60:	10 99       	mov	r9,r8
80001b62:	ec 08 09 08 	st.w	r6[r8],r8
80001b66:	a1 a9       	sbr	r9,0x0
80001b68:	8d 19       	st.w	r6[0x4],r9
80001b6a:	58 0c       	cp.w	r12,0
80001b6c:	c6 51       	brne	80001c36 <_free_r+0x192>
80001b6e:	e0 48 01 ff 	cp.w	r8,511
80001b72:	e0 8b 00 13 	brhi	80001b98 <_free_r+0xf4>
80001b76:	a3 98       	lsr	r8,0x3
80001b78:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001b7c:	72 2b       	ld.w	r11,r9[0x8]
80001b7e:	8d 39       	st.w	r6[0xc],r9
80001b80:	8d 2b       	st.w	r6[0x8],r11
80001b82:	97 36       	st.w	r11[0xc],r6
80001b84:	93 26       	st.w	r9[0x8],r6
80001b86:	a3 48       	asr	r8,0x2
80001b88:	74 19       	ld.w	r9,r10[0x4]
80001b8a:	30 1b       	mov	r11,1
80001b8c:	f6 08 09 48 	lsl	r8,r11,r8
80001b90:	f3 e8 10 08 	or	r8,r9,r8
80001b94:	95 18       	st.w	r10[0x4],r8
80001b96:	c5 08       	rjmp	80001c36 <_free_r+0x192>
80001b98:	f0 0b 16 09 	lsr	r11,r8,0x9
80001b9c:	58 4b       	cp.w	r11,4
80001b9e:	e0 8b 00 06 	brhi	80001baa <_free_r+0x106>
80001ba2:	f0 0b 16 06 	lsr	r11,r8,0x6
80001ba6:	2c 8b       	sub	r11,-56
80001ba8:	c2 b8       	rjmp	80001bfe <_free_r+0x15a>
80001baa:	59 4b       	cp.w	r11,20
80001bac:	e0 8b 00 04 	brhi	80001bb4 <_free_r+0x110>
80001bb0:	2a 5b       	sub	r11,-91
80001bb2:	c2 68       	rjmp	80001bfe <_free_r+0x15a>
80001bb4:	e0 4b 00 54 	cp.w	r11,84
80001bb8:	e0 8b 00 06 	brhi	80001bc4 <_free_r+0x120>
80001bbc:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001bc0:	29 2b       	sub	r11,-110
80001bc2:	c1 e8       	rjmp	80001bfe <_free_r+0x15a>
80001bc4:	e0 4b 01 54 	cp.w	r11,340
80001bc8:	e0 8b 00 06 	brhi	80001bd4 <_free_r+0x130>
80001bcc:	f0 0b 16 0f 	lsr	r11,r8,0xf
80001bd0:	28 9b       	sub	r11,-119
80001bd2:	c1 68       	rjmp	80001bfe <_free_r+0x15a>
80001bd4:	e0 4b 05 54 	cp.w	r11,1364
80001bd8:	e0 88 00 10 	brls	80001bf8 <_free_r+0x154>
80001bdc:	37 eb       	mov	r11,126
80001bde:	c1 08       	rjmp	80001bfe <_free_r+0x15a>
80001be0:	80 00       	ld.sh	r0,r0[0x0]
80001be2:	19 82       	ld.ub	r2,r12[0x0]
80001be4:	00 00       	add	r0,r0
80001be6:	01 04       	ld.w	r4,r0++
80001be8:	00 00       	add	r0,r0
80001bea:	05 0c       	ld.w	r12,r2++
80001bec:	00 00       	add	r0,r0
80001bee:	05 a0       	ld.ub	r0,r2[0x2]
80001bf0:	80 00       	ld.sh	r0,r0[0x0]
80001bf2:	19 fc       	ld.ub	r12,r12[0x7]
80001bf4:	80 00       	ld.sh	r0,r0[0x0]
80001bf6:	19 84       	ld.ub	r4,r12[0x0]
80001bf8:	f0 0b 16 12 	lsr	r11,r8,0x12
80001bfc:	28 4b       	sub	r11,-124
80001bfe:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80001c02:	78 29       	ld.w	r9,r12[0x8]
80001c04:	18 39       	cp.w	r9,r12
80001c06:	c0 e1       	brne	80001c22 <_free_r+0x17e>
80001c08:	74 18       	ld.w	r8,r10[0x4]
80001c0a:	a3 4b       	asr	r11,0x2
80001c0c:	30 1c       	mov	r12,1
80001c0e:	f8 0b 09 4b 	lsl	r11,r12,r11
80001c12:	f1 eb 10 0b 	or	r11,r8,r11
80001c16:	12 98       	mov	r8,r9
80001c18:	95 1b       	st.w	r10[0x4],r11
80001c1a:	c0 a8       	rjmp	80001c2e <_free_r+0x18a>
80001c1c:	72 29       	ld.w	r9,r9[0x8]
80001c1e:	18 39       	cp.w	r9,r12
80001c20:	c0 60       	breq	80001c2c <_free_r+0x188>
80001c22:	72 1a       	ld.w	r10,r9[0x4]
80001c24:	e0 1a ff fc 	andl	r10,0xfffc
80001c28:	14 38       	cp.w	r8,r10
80001c2a:	cf 93       	brcs	80001c1c <_free_r+0x178>
80001c2c:	72 38       	ld.w	r8,r9[0xc]
80001c2e:	8d 38       	st.w	r6[0xc],r8
80001c30:	8d 29       	st.w	r6[0x8],r9
80001c32:	93 36       	st.w	r9[0xc],r6
80001c34:	91 26       	st.w	r8[0x8],r6
80001c36:	0e 9c       	mov	r12,r7
80001c38:	f0 1f 00 02 	mcall	80001c40 <_free_r+0x19c>
80001c3c:	d8 22       	popm	r4-r7,pc
80001c3e:	00 00       	add	r0,r0
80001c40:	80 00       	ld.sh	r0,r0[0x0]
80001c42:	19 84       	ld.ub	r4,r12[0x0]

Disassembly of section .exception:

80001e00 <_evba>:
	...

80001e28 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001e28:	c7 a8       	rjmp	80001f1c <privilegedCalls>
	...

80001f00 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001f00:	1c 9f       	mov	pc,lr

80001f02 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001f02:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001f06:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
80001f0a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
80001f0e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001f12:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001f14:	c0 31       	brne	80001f1a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001f16:	4b 9c       	lddpc	r12,80001ff8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001f18:	18 9f       	mov	pc,r12

80001f1a <_int0_exit>:
_int0_exit:
	rete
80001f1a:	d6 03       	rete

80001f1c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
80001f1c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
80001f1e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001f20:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001f22:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001f24:	9b 3c       	st.w	sp[0xc],r12

80001f26 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001f26:	4b 6c       	lddpc	r12,80001ffc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001f28:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
80001f2a:	c0 61       	brne	80001f36 <priv_interruptenable>
	ld.w r12,sp[USERSR]
80001f2c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
80001f2e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001f30:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001f32:	d3 02       	popm	r11-r12
	rete
80001f34:	d6 03       	rete

80001f36 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001f36:	4b 3c       	lddpc	r12,80002000 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001f38:	18 3b       	cp.w	r11,r12
	brne privexception
80001f3a:	c0 61       	brne	80001f46 <privexception>
	ld.w r12,sp[USERSR]
80001f3c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
80001f3e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001f40:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001f42:	d3 02       	popm	r11-r12
	rete
80001f44:	d6 03       	rete

80001f46 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001f46:	c0 08       	rjmp	80001f46 <privexception>

80001f48 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001f48:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
80001f4a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
80001f4e:	4a ec       	lddpc	r12,80002004 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001f50:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001f52:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001f54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001f58:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
80001f5c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001f60:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001f62:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001f64:	1c 9f       	mov	pc,lr

80001f66 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001f66:	d3 03       	ssrf	0x10
	mov pc,lr
80001f68:	1c 9f       	mov	pc,lr

80001f6a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
80001f6a:	d5 03       	csrf	0x10
	mov pc,lr
80001f6c:	1c 9f       	mov	pc,lr

80001f6e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
80001f6e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001f72:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001f74:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001f78:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
80001f7c:	1c 9f       	mov	pc,lr

80001f7e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001f7e:	4a 3c       	lddpc	r12,80002008 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001f80:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001f82:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001f84:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001f86:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001f88:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
80001f8a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
80001f8c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
80001f8e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001f90:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001f92:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001f94:	33 40       	mov	r0,52
	add r0,r12
80001f96:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001f98:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
80001f9c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
80001f9e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
80001fa2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
80001fa4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
80001fa6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
80001fa8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
80001faa:	1a 90       	mov	r0,sp
	st.w --sp,r0
80001fac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80001fae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
80001fb2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
80001fb4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
80001fb6:	1c 9f       	mov	pc,lr

80001fb8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001fb8:	49 4c       	lddpc	r12,80002008 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001fba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
80001fbc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80001fbe:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80001fc0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
80001fc4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
80001fc6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
80001fc8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80001fca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
80001fcc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80001fce:	33 40       	mov	r0,52
	add r0,r12
80001fd0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80001fd2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80001fd6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
80001fd8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
80001fda:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
80001fdc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
80001fde:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
80001fe0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
80001fe2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
80001fe4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
80001fe6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
80001fe8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80001fea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
80001fec:	d4 01       	pushm	lr
	call timerStart
80001fee:	f0 1f 00 08 	mcall	8000200c <contextRestoreFromISR+0x54>
	popm lr
80001ff2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
80001ff4:	1c 9f       	mov	pc,lr
80001ff6:	00 00       	add	r0,r0
80001ff8:	80 00       	ld.sh	r0,r0[0x0]
80001ffa:	09 a8       	ld.ub	r8,r4[0x2]
80001ffc:	80 00       	ld.sh	r0,r0[0x0]
80001ffe:	1f 66       	ld.uh	r6,--pc
80002000:	80 00       	ld.sh	r0,r0[0x0]
80002002:	1f 6a       	ld.uh	r10,--pc
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	1e 00       	add	r0,pc
80002008:	00 00       	add	r0,r0
8000200a:	06 24       	rsub	r4,r3
8000200c:	80 00       	ld.sh	r0,r0[0x0]
8000200e:	13 8a       	ld.ub	r10,r9[0x0]
	...
