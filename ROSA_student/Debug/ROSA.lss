
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000207c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80002200  80002200  00002600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80002600  80002600  00002a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002684  80002684  00002a84  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80002688  00002c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002b94  00003114  2**0
                  ALLOC
  9 .bss          000001c8  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000d920  000006e0  000006e0  00000000  2**0
                  ALLOC
 11 .comment      000000a0  00000000  00000000  00003114  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000620  00000000  00000000  000031b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000b2f  00000000  00000000  000037d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c91c  00000000  00000000  00004307  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000020c8  00000000  00000000  00010c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000048e8  00000000  00000000  00012ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000d90  00000000  00000000  000175d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001e01  00000000  00000000  00018364  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00001b19  00000000  00000000  0001a165  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 005345e3  00000000  00000000  0001bc7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 00000568  00000000  00000000  00550261  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	18 54       	eor	r4,r12

Disassembly of section .text:

80000008 <MaxLockedCeiling>:
 * Comment:
 * 	Returns a maximum ceiling of all currently locked semaphores
 *
 **********************************************************/
static uint8_t MaxLockedCeiling(void)
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 2d       	sub	sp,8
	if (LOCKEDSEMAPHORELIST==NULL)
80000010:	49 78       	lddpc	r8,8000006c <MaxLockedCeiling+0x64>
80000012:	70 08       	ld.w	r8,r8[0x0]
80000014:	58 08       	cp.w	r8,0
80000016:	c0 31       	brne	8000001c <MaxLockedCeiling+0x14>
	{
		return 0;
80000018:	30 08       	mov	r8,0
8000001a:	c2 48       	rjmp	80000062 <MaxLockedCeiling+0x5a>
	}
	else
	{
	uint8_t maxCeil=LOCKEDSEMAPHORELIST->ceiling;
8000001c:	49 48       	lddpc	r8,8000006c <MaxLockedCeiling+0x64>
8000001e:	70 08       	ld.w	r8,r8[0x0]
80000020:	11 c8       	ld.ub	r8,r8[0x4]
80000022:	ef 68 ff fb 	st.b	r7[-5],r8
	ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
80000026:	49 28       	lddpc	r8,8000006c <MaxLockedCeiling+0x64>
80000028:	70 08       	ld.w	r8,r8[0x0]
8000002a:	ef 48 ff fc 	st.w	r7[-4],r8
	while (it->nextLockedSemaphore!=NULL)
8000002e:	c1 38       	rjmp	80000054 <MaxLockedCeiling+0x4c>
	{
		if (it->ceiling>maxCeil)
80000030:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000034:	11 c8       	ld.ub	r8,r8[0x4]
80000036:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000003a:	f0 09 18 00 	cp.b	r9,r8
8000003e:	c0 62       	brcc	8000004a <MaxLockedCeiling+0x42>
		{
			maxCeil=it->ceiling;
80000040:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000044:	11 c8       	ld.ub	r8,r8[0x4]
80000046:	ef 68 ff fb 	st.b	r7[-5],r8
		}
		it=it->nextLockedSemaphore;
8000004a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000004e:	70 28       	ld.w	r8,r8[0x8]
80000050:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
	uint8_t maxCeil=LOCKEDSEMAPHORELIST->ceiling;
	ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
	while (it->nextLockedSemaphore!=NULL)
80000054:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000058:	70 28       	ld.w	r8,r8[0x8]
8000005a:	58 08       	cp.w	r8,0
8000005c:	ce a1       	brne	80000030 <MaxLockedCeiling+0x28>
			maxCeil=it->ceiling;
		}
		it=it->nextLockedSemaphore;
	}
	
	return maxCeil;
8000005e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
	}
}
80000062:	10 9c       	mov	r12,r8
80000064:	2f ed       	sub	sp,-8
80000066:	e3 cd 80 80 	ldm	sp++,r7,pc
8000006a:	00 00       	add	r0,r0
8000006c:	00 00       	add	r0,r0
8000006e:	05 d0       	ld.ub	r0,r2[0x5]

80000070 <ROSA_semaphoreCreate>:
 *
 * Comment:
 * 	Create a semaphore
 *
 **********************************************************/
int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t * mutex, uint8_t ceiling) {
80000070:	eb cd 40 80 	pushm	r7,lr
80000074:	1a 97       	mov	r7,sp
80000076:	20 2d       	sub	sp,8
80000078:	ef 4c ff fc 	st.w	r7[-4],r12
8000007c:	16 98       	mov	r8,r11
8000007e:	ef 68 ff f8 	st.b	r7[-8],r8
	*mutex = (ROSA_semaphoreHandle_t) calloc(1, sizeof(ROSA_semaphoreHandle_t));
80000082:	30 4b       	mov	r11,4
80000084:	30 1c       	mov	r12,1
80000086:	f0 1f 00 0f 	mcall	800000c0 <ROSA_semaphoreCreate+0x50>
8000008a:	18 98       	mov	r8,r12
8000008c:	10 99       	mov	r9,r8
8000008e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000092:	91 09       	st.w	r8[0x0],r9
	(*mutex)->holder = NULL;
80000094:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000098:	70 08       	ld.w	r8,r8[0x0]
8000009a:	30 09       	mov	r9,0
8000009c:	91 09       	st.w	r8[0x0],r9
	(*mutex)->ceiling = ceiling;
8000009e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000a2:	70 09       	ld.w	r9,r8[0x0]
800000a4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800000a8:	b2 c8       	st.b	r9[0x4],r8
	(*mutex)->nextLockedSemaphore=NULL;	
800000aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000ae:	70 08       	ld.w	r8,r8[0x0]
800000b0:	30 09       	mov	r9,0
800000b2:	91 29       	st.w	r8[0x8],r9
	
	return 0;
800000b4:	30 08       	mov	r8,0
}
800000b6:	10 9c       	mov	r12,r8
800000b8:	2f ed       	sub	sp,-8
800000ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800000be:	00 00       	add	r0,r0
800000c0:	80 00       	ld.sh	r0,r0[0x0]
800000c2:	18 d4       	st.w	--r12,r4

800000c4 <ROSA_semaphoreLock>:
 *
 * Comment:
 * 	Lock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t  mutex) {
800000c4:	eb cd 40 c0 	pushm	r6-r7,lr
800000c8:	1a 97       	mov	r7,sp
800000ca:	20 2d       	sub	sp,8
800000cc:	ef 4c ff f8 	st.w	r7[-8],r12
	
	if (mutex==NULL)
800000d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000d4:	58 08       	cp.w	r8,0
800000d6:	c0 61       	brne	800000e2 <ROSA_semaphoreLock+0x1e>
	{
		return -1; // if the passed pointer to the semaphore handle is non-existent
800000d8:	3f f8       	mov	r8,-1
800000da:	c4 f8       	rjmp	80000178 <ROSA_semaphoreLock+0xb4>
	}
	
	while (mutex->holder != NULL || EXECTASK->priority<=MaxLockedCeiling()) //if the semaphore is already locked or IPCP condition P(task)>maxLockedCeil
		ROSA_yield();		
800000dc:	f0 1f 00 29 	mcall	80000180 <ROSA_semaphoreLock+0xbc>
800000e0:	c0 28       	rjmp	800000e4 <ROSA_semaphoreLock+0x20>
	if (mutex==NULL)
	{
		return -1; // if the passed pointer to the semaphore handle is non-existent
	}
	
	while (mutex->holder != NULL || EXECTASK->priority<=MaxLockedCeiling()) //if the semaphore is already locked or IPCP condition P(task)>maxLockedCeil
800000e2:	d7 03       	nop
800000e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000e8:	70 08       	ld.w	r8,r8[0x0]
800000ea:	58 08       	cp.w	r8,0
800000ec:	cf 81       	brne	800000dc <ROSA_semaphoreLock+0x18>
800000ee:	4a 68       	lddpc	r8,80000184 <ROSA_semaphoreLock+0xc0>
800000f0:	70 08       	ld.w	r8,r8[0x0]
800000f2:	f1 36 00 64 	ld.ub	r6,r8[100]
800000f6:	f0 1f 00 25 	mcall	80000188 <ROSA_semaphoreLock+0xc4>
800000fa:	18 98       	mov	r8,r12
800000fc:	f0 06 18 00 	cp.b	r6,r8
80000100:	fe 98 ff ee 	brls	800000dc <ROSA_semaphoreLock+0x18>
		ROSA_yield();		
	
	mutex->holder = EXECTASK;
80000104:	4a 08       	lddpc	r8,80000184 <ROSA_semaphoreLock+0xc0>
80000106:	70 09       	ld.w	r9,r8[0x0]
80000108:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000010c:	91 09       	st.w	r8[0x0],r9
	if (EXECTASK->priority < mutex->ceiling)
8000010e:	49 e8       	lddpc	r8,80000184 <ROSA_semaphoreLock+0xc0>
80000110:	70 08       	ld.w	r8,r8[0x0]
80000112:	f1 39 00 64 	ld.ub	r9,r8[100]
80000116:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000011a:	11 c8       	ld.ub	r8,r8[0x4]
8000011c:	f0 09 18 00 	cp.b	r9,r8
80000120:	c0 e2       	brcc	8000013c <ROSA_semaphoreLock+0x78>
	{
		readyQueueExtract(&EXECTASK);
80000122:	49 9c       	lddpc	r12,80000184 <ROSA_semaphoreLock+0xc0>
80000124:	f0 1f 00 1a 	mcall	8000018c <ROSA_semaphoreLock+0xc8>
		EXECTASK->priority=mutex->ceiling; //IPCP priority inheritance		
80000128:	49 78       	lddpc	r8,80000184 <ROSA_semaphoreLock+0xc0>
8000012a:	70 09       	ld.w	r9,r8[0x0]
8000012c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000130:	11 c8       	ld.ub	r8,r8[0x4]
80000132:	f3 68 00 64 	st.b	r9[100],r8
		readyQueueInsert(&EXECTASK);
80000136:	49 4c       	lddpc	r12,80000184 <ROSA_semaphoreLock+0xc0>
80000138:	f0 1f 00 16 	mcall	80000190 <ROSA_semaphoreLock+0xcc>
	}
		
	if (LOCKEDSEMAPHORELIST==NULL)
8000013c:	49 68       	lddpc	r8,80000194 <ROSA_semaphoreLock+0xd0>
8000013e:	70 08       	ld.w	r8,r8[0x0]
80000140:	58 08       	cp.w	r8,0
80000142:	c0 61       	brne	8000014e <ROSA_semaphoreLock+0x8a>
	{
		LOCKEDSEMAPHORELIST=mutex;
80000144:	49 48       	lddpc	r8,80000194 <ROSA_semaphoreLock+0xd0>
80000146:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000014a:	91 09       	st.w	r8[0x0],r9
8000014c:	c1 58       	rjmp	80000176 <ROSA_semaphoreLock+0xb2>
	}
	else
	{
		ROSA_semaphoreHandle_t it; //finding the last semaphore in the list and changing its nextLockedSemaphore field to point to the just locked semaphore
		it=LOCKEDSEMAPHORELIST;
8000014e:	49 28       	lddpc	r8,80000194 <ROSA_semaphoreLock+0xd0>
80000150:	70 08       	ld.w	r8,r8[0x0]
80000152:	ef 48 ff fc 	st.w	r7[-4],r8
		while(it->nextLockedSemaphore!=NULL)
80000156:	c0 68       	rjmp	80000162 <ROSA_semaphoreLock+0x9e>
		{
			it=it->nextLockedSemaphore;
80000158:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000015c:	70 28       	ld.w	r8,r8[0x8]
8000015e:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
		ROSA_semaphoreHandle_t it; //finding the last semaphore in the list and changing its nextLockedSemaphore field to point to the just locked semaphore
		it=LOCKEDSEMAPHORELIST;
		while(it->nextLockedSemaphore!=NULL)
80000162:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000166:	70 28       	ld.w	r8,r8[0x8]
80000168:	58 08       	cp.w	r8,0
8000016a:	cf 71       	brne	80000158 <ROSA_semaphoreLock+0x94>
		{
			it=it->nextLockedSemaphore;
		}
		it->nextLockedSemaphore=mutex;
8000016c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000170:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000174:	91 29       	st.w	r8[0x8],r9
	}
	
	return 0;
80000176:	30 08       	mov	r8,0
}
80000178:	10 9c       	mov	r12,r8
8000017a:	2f ed       	sub	sp,-8
8000017c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80000180:	80 00       	ld.sh	r0,r0[0x0]
80000182:	0d 2e       	ld.uh	lr,r6++
80000184:	00 00       	add	r0,r0
80000186:	06 58       	eor	r8,r3
80000188:	80 00       	ld.sh	r0,r0[0x0]
8000018a:	00 08       	add	r8,r0
8000018c:	80 00       	ld.sh	r0,r0[0x0]
8000018e:	08 c8       	st.b	r4++,r8
80000190:	80 00       	ld.sh	r0,r0[0x0]
80000192:	08 28       	rsub	r8,r4
80000194:	00 00       	add	r0,r0
80000196:	05 d0       	ld.ub	r0,r2[0x5]

80000198 <ROSA_semaphoreUnlock>:
 *
 * Comment:
 * 	Unlock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreUnlock(ROSA_semaphoreHandle_t  mutex) {
80000198:	eb cd 40 80 	pushm	r7,lr
8000019c:	1a 97       	mov	r7,sp
8000019e:	20 2d       	sub	sp,8
800001a0:	ef 4c ff f8 	st.w	r7[-8],r12
	mutex->holder = NULL;
800001a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001a8:	30 09       	mov	r9,0
800001aa:	91 09       	st.w	r8[0x0],r9
	if (mutex==LOCKEDSEMAPHORELIST)
800001ac:	49 b8       	lddpc	r8,80000218 <ROSA_semaphoreUnlock+0x80>
800001ae:	70 08       	ld.w	r8,r8[0x0]
800001b0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800001b4:	10 39       	cp.w	r9,r8
800001b6:	c0 71       	brne	800001c4 <ROSA_semaphoreUnlock+0x2c>
	{
		LOCKEDSEMAPHORELIST=mutex->nextLockedSemaphore; //if first locked semaphore needs to be unlocked
800001b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001bc:	70 29       	ld.w	r9,r8[0x8]
800001be:	49 78       	lddpc	r8,80000218 <ROSA_semaphoreUnlock+0x80>
800001c0:	91 09       	st.w	r8[0x0],r9
800001c2:	c1 88       	rjmp	800001f2 <ROSA_semaphoreUnlock+0x5a>
	}
	else
	{
		ROSA_semaphoreHandle_t it;
		it=LOCKEDSEMAPHORELIST;
800001c4:	49 58       	lddpc	r8,80000218 <ROSA_semaphoreUnlock+0x80>
800001c6:	70 08       	ld.w	r8,r8[0x0]
800001c8:	ef 48 ff fc 	st.w	r7[-4],r8
		while (it->nextLockedSemaphore!=mutex) //find the locked semaphore before the one that needs to be unlocked
800001cc:	c0 68       	rjmp	800001d8 <ROSA_semaphoreUnlock+0x40>
		{
			it=it->nextLockedSemaphore;
800001ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001d2:	70 28       	ld.w	r8,r8[0x8]
800001d4:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
		ROSA_semaphoreHandle_t it;
		it=LOCKEDSEMAPHORELIST;
		while (it->nextLockedSemaphore!=mutex) //find the locked semaphore before the one that needs to be unlocked
800001d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001dc:	70 29       	ld.w	r9,r8[0x8]
800001de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001e2:	10 39       	cp.w	r9,r8
800001e4:	cf 51       	brne	800001ce <ROSA_semaphoreUnlock+0x36>
		{
			it=it->nextLockedSemaphore;
		}
		it->nextLockedSemaphore=mutex->nextLockedSemaphore;
800001e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001ea:	70 29       	ld.w	r9,r8[0x8]
800001ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001f0:	91 29       	st.w	r8[0x8],r9
	}
	readyQueueExtract(&EXECTASK);
800001f2:	48 bc       	lddpc	r12,8000021c <ROSA_semaphoreUnlock+0x84>
800001f4:	f0 1f 00 0b 	mcall	80000220 <ROSA_semaphoreUnlock+0x88>
	EXECTASK->priority=EXECTASK->originalPriority; //IPCP priority inheritance
800001f8:	48 98       	lddpc	r8,8000021c <ROSA_semaphoreUnlock+0x84>
800001fa:	70 09       	ld.w	r9,r8[0x0]
800001fc:	48 88       	lddpc	r8,8000021c <ROSA_semaphoreUnlock+0x84>
800001fe:	70 08       	ld.w	r8,r8[0x0]
80000200:	f1 38 00 71 	ld.ub	r8,r8[113]
80000204:	f3 68 00 64 	st.b	r9[100],r8
	readyQueueInsert(&EXECTASK);
80000208:	48 5c       	lddpc	r12,8000021c <ROSA_semaphoreUnlock+0x84>
8000020a:	f0 1f 00 07 	mcall	80000224 <ROSA_semaphoreUnlock+0x8c>
	
	return 0;
8000020e:	30 08       	mov	r8,0
}
80000210:	10 9c       	mov	r12,r8
80000212:	2f ed       	sub	sp,-8
80000214:	e3 cd 80 80 	ldm	sp++,r7,pc
80000218:	00 00       	add	r0,r0
8000021a:	05 d0       	ld.ub	r0,r2[0x5]
8000021c:	00 00       	add	r0,r0
8000021e:	06 58       	eor	r8,r3
80000220:	80 00       	ld.sh	r0,r0[0x0]
80000222:	08 c8       	st.b	r4++,r8
80000224:	80 00       	ld.sh	r0,r0[0x0]
80000226:	08 28       	rsub	r8,r4

80000228 <usart_options>:
80000228:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 31     ............tsk1
80000238:	00 00 00 00 74 73 6b 32 00 00 00 00 74 73 6b 33     ....tsk2....tsk3
80000248:	00 00 00 00 74 73 6b 34 00 00 00 00 74 73 6b 35     ....tsk4....tsk5
80000258:	00 00 00 00 74 73 6b 36 00 00 00 00 74 73 6b 37     ....tsk6....tsk7
80000268:	00 00 00 00 74 73 6b 38 00 00 00 00 74 73 6b 39     ....tsk8....tsk9
80000278:	00 00 00 00 74 73 6b 31 30 00 00 00 74 73 6b 31     ....tsk10...tsk1
80000288:	31 00 00 00 74 73 6b 31 32 00 00 00                 1...tsk12...

80000294 <task1>:
/*************************************************************
 * Task 1
 * Turn LED 1 ON
 ************************************************************/
void task1(void)
{
80000294:	eb cd 40 80 	pushm	r7,lr
80000298:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex1);
8000029a:	48 b8       	lddpc	r8,800002c4 <task1+0x30>
8000029c:	70 08       	ld.w	r8,r8[0x0]
8000029e:	10 9c       	mov	r12,r8
800002a0:	f0 1f 00 0a 	mcall	800002c8 <task1+0x34>
		ledOn(LED0_GPIO);
800002a4:	33 bc       	mov	r12,59
800002a6:	f0 1f 00 0a 	mcall	800002cc <task1+0x38>
		ROSA_delay(511);
800002aa:	e0 6a 01 ff 	mov	r10,511
800002ae:	30 0b       	mov	r11,0
800002b0:	f0 1f 00 08 	mcall	800002d0 <task1+0x3c>
		ROSA_semaphoreUnlock(mutex1);
800002b4:	48 48       	lddpc	r8,800002c4 <task1+0x30>
800002b6:	70 08       	ld.w	r8,r8[0x0]
800002b8:	10 9c       	mov	r12,r8
800002ba:	f0 1f 00 07 	mcall	800002d4 <task1+0x40>
		ROSA_yield();
800002be:	f0 1f 00 07 	mcall	800002d8 <task1+0x44>
	}
800002c2:	ce cb       	rjmp	8000029a <task1+0x6>
800002c4:	00 00       	add	r0,r0
800002c6:	06 18       	sub	r8,r3
800002c8:	80 00       	ld.sh	r0,r0[0x0]
800002ca:	00 c4       	st.b	r0++,r4
800002cc:	80 00       	ld.sh	r0,r0[0x0]
800002ce:	13 d8       	ld.ub	r8,r9[0x5]
800002d0:	80 00       	ld.sh	r0,r0[0x0]
800002d2:	10 94       	mov	r4,r8
800002d4:	80 00       	ld.sh	r0,r0[0x0]
800002d6:	01 98       	ld.ub	r8,r0[0x1]
800002d8:	80 00       	ld.sh	r0,r0[0x0]
800002da:	0d 2e       	ld.uh	lr,r6++

800002dc <task2>:
/*************************************************************
 * Task 2
 * Turn LED 0 OFF
 ************************************************************/
void task2(void)
{
800002dc:	eb cd 40 80 	pushm	r7,lr
800002e0:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex1);
800002e2:	48 b8       	lddpc	r8,8000030c <task2+0x30>
800002e4:	70 08       	ld.w	r8,r8[0x0]
800002e6:	10 9c       	mov	r12,r8
800002e8:	f0 1f 00 0a 	mcall	80000310 <task2+0x34>
		ledOff(LED0_GPIO);
800002ec:	33 bc       	mov	r12,59
800002ee:	f0 1f 00 0a 	mcall	80000314 <task2+0x38>
		ROSA_delay(510);
800002f2:	e0 6a 01 fe 	mov	r10,510
800002f6:	30 0b       	mov	r11,0
800002f8:	f0 1f 00 08 	mcall	80000318 <task2+0x3c>
		ROSA_semaphoreUnlock(mutex1);
800002fc:	48 48       	lddpc	r8,8000030c <task2+0x30>
800002fe:	70 08       	ld.w	r8,r8[0x0]
80000300:	10 9c       	mov	r12,r8
80000302:	f0 1f 00 07 	mcall	8000031c <task2+0x40>
		ROSA_yield();
80000306:	f0 1f 00 07 	mcall	80000320 <task2+0x44>
	}
8000030a:	ce cb       	rjmp	800002e2 <task2+0x6>
8000030c:	00 00       	add	r0,r0
8000030e:	06 18       	sub	r8,r3
80000310:	80 00       	ld.sh	r0,r0[0x0]
80000312:	00 c4       	st.b	r0++,r4
80000314:	80 00       	ld.sh	r0,r0[0x0]
80000316:	13 f8       	ld.ub	r8,r9[0x7]
80000318:	80 00       	ld.sh	r0,r0[0x0]
8000031a:	10 94       	mov	r4,r8
8000031c:	80 00       	ld.sh	r0,r0[0x0]
8000031e:	01 98       	ld.ub	r8,r0[0x1]
80000320:	80 00       	ld.sh	r0,r0[0x0]
80000322:	0d 2e       	ld.uh	lr,r6++

80000324 <task3>:
/*************************************************************
 * Task 3
 * Turn LED 1 ON
 ************************************************************/
void task3(void)
{
80000324:	eb cd 40 80 	pushm	r7,lr
80000328:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex2);
8000032a:	48 b8       	lddpc	r8,80000354 <task3+0x30>
8000032c:	70 08       	ld.w	r8,r8[0x0]
8000032e:	10 9c       	mov	r12,r8
80000330:	f0 1f 00 0a 	mcall	80000358 <task3+0x34>
		ledOn(LED1_GPIO);
80000334:	33 cc       	mov	r12,60
80000336:	f0 1f 00 0a 	mcall	8000035c <task3+0x38>
		ROSA_delay(509);
8000033a:	e0 6a 01 fd 	mov	r10,509
8000033e:	30 0b       	mov	r11,0
80000340:	f0 1f 00 08 	mcall	80000360 <task3+0x3c>
		ROSA_semaphoreUnlock(mutex2);
80000344:	48 48       	lddpc	r8,80000354 <task3+0x30>
80000346:	70 08       	ld.w	r8,r8[0x0]
80000348:	10 9c       	mov	r12,r8
8000034a:	f0 1f 00 07 	mcall	80000364 <task3+0x40>
		ROSA_yield();
8000034e:	f0 1f 00 07 	mcall	80000368 <task3+0x44>
	}
80000352:	ce cb       	rjmp	8000032a <task3+0x6>
80000354:	00 00       	add	r0,r0
80000356:	05 dc       	ld.ub	r12,r2[0x5]
80000358:	80 00       	ld.sh	r0,r0[0x0]
8000035a:	00 c4       	st.b	r0++,r4
8000035c:	80 00       	ld.sh	r0,r0[0x0]
8000035e:	13 d8       	ld.ub	r8,r9[0x5]
80000360:	80 00       	ld.sh	r0,r0[0x0]
80000362:	10 94       	mov	r4,r8
80000364:	80 00       	ld.sh	r0,r0[0x0]
80000366:	01 98       	ld.ub	r8,r0[0x1]
80000368:	80 00       	ld.sh	r0,r0[0x0]
8000036a:	0d 2e       	ld.uh	lr,r6++

8000036c <task4>:
/*************************************************************
 * Task 4
 * Turn LED 1 OFF
 ************************************************************/
void task4(void)
{
8000036c:	eb cd 40 80 	pushm	r7,lr
80000370:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex2);
80000372:	48 b8       	lddpc	r8,8000039c <task4+0x30>
80000374:	70 08       	ld.w	r8,r8[0x0]
80000376:	10 9c       	mov	r12,r8
80000378:	f0 1f 00 0a 	mcall	800003a0 <task4+0x34>
		ledOff(LED1_GPIO);
8000037c:	33 cc       	mov	r12,60
8000037e:	f0 1f 00 0a 	mcall	800003a4 <task4+0x38>
		ROSA_delay(508);
80000382:	e0 6a 01 fc 	mov	r10,508
80000386:	30 0b       	mov	r11,0
80000388:	f0 1f 00 08 	mcall	800003a8 <task4+0x3c>
		ROSA_semaphoreUnlock(mutex2);
8000038c:	48 48       	lddpc	r8,8000039c <task4+0x30>
8000038e:	70 08       	ld.w	r8,r8[0x0]
80000390:	10 9c       	mov	r12,r8
80000392:	f0 1f 00 07 	mcall	800003ac <task4+0x40>
		ROSA_yield();
80000396:	f0 1f 00 07 	mcall	800003b0 <task4+0x44>
	}
8000039a:	ce cb       	rjmp	80000372 <task4+0x6>
8000039c:	00 00       	add	r0,r0
8000039e:	05 dc       	ld.ub	r12,r2[0x5]
800003a0:	80 00       	ld.sh	r0,r0[0x0]
800003a2:	00 c4       	st.b	r0++,r4
800003a4:	80 00       	ld.sh	r0,r0[0x0]
800003a6:	13 f8       	ld.ub	r8,r9[0x7]
800003a8:	80 00       	ld.sh	r0,r0[0x0]
800003aa:	10 94       	mov	r4,r8
800003ac:	80 00       	ld.sh	r0,r0[0x0]
800003ae:	01 98       	ld.ub	r8,r0[0x1]
800003b0:	80 00       	ld.sh	r0,r0[0x0]
800003b2:	0d 2e       	ld.uh	lr,r6++

800003b4 <task5>:
/*************************************************************
 * Task 5
 * Turn LED 2 ON
 ************************************************************/
void task5(void)
{
800003b4:	eb cd 40 80 	pushm	r7,lr
800003b8:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex3);
800003ba:	48 b8       	lddpc	r8,800003e4 <task5+0x30>
800003bc:	70 08       	ld.w	r8,r8[0x0]
800003be:	10 9c       	mov	r12,r8
800003c0:	f0 1f 00 0a 	mcall	800003e8 <task5+0x34>
		ledOn(LED2_GPIO);
800003c4:	33 dc       	mov	r12,61
800003c6:	f0 1f 00 0a 	mcall	800003ec <task5+0x38>
		ROSA_delay(507);
800003ca:	e0 6a 01 fb 	mov	r10,507
800003ce:	30 0b       	mov	r11,0
800003d0:	f0 1f 00 08 	mcall	800003f0 <task5+0x3c>
		ROSA_semaphoreUnlock(mutex3);
800003d4:	48 48       	lddpc	r8,800003e4 <task5+0x30>
800003d6:	70 08       	ld.w	r8,r8[0x0]
800003d8:	10 9c       	mov	r12,r8
800003da:	f0 1f 00 07 	mcall	800003f4 <task5+0x40>
		ROSA_yield();
800003de:	f0 1f 00 07 	mcall	800003f8 <task5+0x44>
	}
800003e2:	ce cb       	rjmp	800003ba <task5+0x6>
800003e4:	00 00       	add	r0,r0
800003e6:	06 0c       	add	r12,r3
800003e8:	80 00       	ld.sh	r0,r0[0x0]
800003ea:	00 c4       	st.b	r0++,r4
800003ec:	80 00       	ld.sh	r0,r0[0x0]
800003ee:	13 d8       	ld.ub	r8,r9[0x5]
800003f0:	80 00       	ld.sh	r0,r0[0x0]
800003f2:	10 94       	mov	r4,r8
800003f4:	80 00       	ld.sh	r0,r0[0x0]
800003f6:	01 98       	ld.ub	r8,r0[0x1]
800003f8:	80 00       	ld.sh	r0,r0[0x0]
800003fa:	0d 2e       	ld.uh	lr,r6++

800003fc <task6>:
/*************************************************************
 * Task 6
 * Turn LED 2 OFF
 ************************************************************/
void task6(void)
{
800003fc:	eb cd 40 80 	pushm	r7,lr
80000400:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex3);
80000402:	48 b8       	lddpc	r8,8000042c <task6+0x30>
80000404:	70 08       	ld.w	r8,r8[0x0]
80000406:	10 9c       	mov	r12,r8
80000408:	f0 1f 00 0a 	mcall	80000430 <task6+0x34>
		ledOff(LED2_GPIO);
8000040c:	33 dc       	mov	r12,61
8000040e:	f0 1f 00 0a 	mcall	80000434 <task6+0x38>
		ROSA_delay(506);
80000412:	e0 6a 01 fa 	mov	r10,506
80000416:	30 0b       	mov	r11,0
80000418:	f0 1f 00 08 	mcall	80000438 <task6+0x3c>
		ROSA_semaphoreUnlock(mutex3);
8000041c:	48 48       	lddpc	r8,8000042c <task6+0x30>
8000041e:	70 08       	ld.w	r8,r8[0x0]
80000420:	10 9c       	mov	r12,r8
80000422:	f0 1f 00 07 	mcall	8000043c <task6+0x40>
		ROSA_yield();
80000426:	f0 1f 00 07 	mcall	80000440 <task6+0x44>
	}
8000042a:	ce cb       	rjmp	80000402 <task6+0x6>
8000042c:	00 00       	add	r0,r0
8000042e:	06 0c       	add	r12,r3
80000430:	80 00       	ld.sh	r0,r0[0x0]
80000432:	00 c4       	st.b	r0++,r4
80000434:	80 00       	ld.sh	r0,r0[0x0]
80000436:	13 f8       	ld.ub	r8,r9[0x7]
80000438:	80 00       	ld.sh	r0,r0[0x0]
8000043a:	10 94       	mov	r4,r8
8000043c:	80 00       	ld.sh	r0,r0[0x0]
8000043e:	01 98       	ld.ub	r8,r0[0x1]
80000440:	80 00       	ld.sh	r0,r0[0x0]
80000442:	0d 2e       	ld.uh	lr,r6++

80000444 <task7>:
/*************************************************************
 * Task 7
 * Turn LED 3 ON
 ************************************************************/
void task7(void)
{
80000444:	eb cd 40 80 	pushm	r7,lr
80000448:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex4);
8000044a:	48 b8       	lddpc	r8,80000474 <task7+0x30>
8000044c:	70 08       	ld.w	r8,r8[0x0]
8000044e:	10 9c       	mov	r12,r8
80000450:	f0 1f 00 0a 	mcall	80000478 <task7+0x34>
		ledOn(LED3_GPIO);
80000454:	33 ec       	mov	r12,62
80000456:	f0 1f 00 0a 	mcall	8000047c <task7+0x38>
		ROSA_delay(505);
8000045a:	e0 6a 01 f9 	mov	r10,505
8000045e:	30 0b       	mov	r11,0
80000460:	f0 1f 00 08 	mcall	80000480 <task7+0x3c>
		ROSA_semaphoreUnlock(mutex4);
80000464:	48 48       	lddpc	r8,80000474 <task7+0x30>
80000466:	70 08       	ld.w	r8,r8[0x0]
80000468:	10 9c       	mov	r12,r8
8000046a:	f0 1f 00 07 	mcall	80000484 <task7+0x40>
		ROSA_yield();
8000046e:	f0 1f 00 07 	mcall	80000488 <task7+0x44>
	}
80000472:	ce cb       	rjmp	8000044a <task7+0x6>
80000474:	00 00       	add	r0,r0
80000476:	06 14       	sub	r4,r3
80000478:	80 00       	ld.sh	r0,r0[0x0]
8000047a:	00 c4       	st.b	r0++,r4
8000047c:	80 00       	ld.sh	r0,r0[0x0]
8000047e:	13 d8       	ld.ub	r8,r9[0x5]
80000480:	80 00       	ld.sh	r0,r0[0x0]
80000482:	10 94       	mov	r4,r8
80000484:	80 00       	ld.sh	r0,r0[0x0]
80000486:	01 98       	ld.ub	r8,r0[0x1]
80000488:	80 00       	ld.sh	r0,r0[0x0]
8000048a:	0d 2e       	ld.uh	lr,r6++

8000048c <task8>:
/*************************************************************
 * Task 8
 * Turn LED 3 OFF
 ************************************************************/
void task8(void)
{
8000048c:	eb cd 40 80 	pushm	r7,lr
80000490:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex4);
80000492:	48 b8       	lddpc	r8,800004bc <task8+0x30>
80000494:	70 08       	ld.w	r8,r8[0x0]
80000496:	10 9c       	mov	r12,r8
80000498:	f0 1f 00 0a 	mcall	800004c0 <task8+0x34>
		ledOff(LED3_GPIO);
8000049c:	33 ec       	mov	r12,62
8000049e:	f0 1f 00 0a 	mcall	800004c4 <task8+0x38>
		ROSA_delay(504);
800004a2:	e0 6a 01 f8 	mov	r10,504
800004a6:	30 0b       	mov	r11,0
800004a8:	f0 1f 00 08 	mcall	800004c8 <task8+0x3c>
		ROSA_semaphoreUnlock(mutex4);
800004ac:	48 48       	lddpc	r8,800004bc <task8+0x30>
800004ae:	70 08       	ld.w	r8,r8[0x0]
800004b0:	10 9c       	mov	r12,r8
800004b2:	f0 1f 00 07 	mcall	800004cc <task8+0x40>
		ROSA_yield();
800004b6:	f0 1f 00 07 	mcall	800004d0 <task8+0x44>
	}
800004ba:	ce cb       	rjmp	80000492 <task8+0x6>
800004bc:	00 00       	add	r0,r0
800004be:	06 14       	sub	r4,r3
800004c0:	80 00       	ld.sh	r0,r0[0x0]
800004c2:	00 c4       	st.b	r0++,r4
800004c4:	80 00       	ld.sh	r0,r0[0x0]
800004c6:	13 f8       	ld.ub	r8,r9[0x7]
800004c8:	80 00       	ld.sh	r0,r0[0x0]
800004ca:	10 94       	mov	r4,r8
800004cc:	80 00       	ld.sh	r0,r0[0x0]
800004ce:	01 98       	ld.ub	r8,r0[0x1]
800004d0:	80 00       	ld.sh	r0,r0[0x0]
800004d2:	0d 2e       	ld.uh	lr,r6++

800004d4 <task9>:
/*************************************************************
 * Task 9
 * Turn LED 4 ON
 ************************************************************/
void task9(void)
{
800004d4:	eb cd 40 80 	pushm	r7,lr
800004d8:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex5);
800004da:	48 b8       	lddpc	r8,80000504 <task9+0x30>
800004dc:	70 08       	ld.w	r8,r8[0x0]
800004de:	10 9c       	mov	r12,r8
800004e0:	f0 1f 00 0a 	mcall	80000508 <task9+0x34>
		ledOn(LED4_GPIO);
800004e4:	33 3c       	mov	r12,51
800004e6:	f0 1f 00 0a 	mcall	8000050c <task9+0x38>
		ROSA_delay(503);
800004ea:	e0 6a 01 f7 	mov	r10,503
800004ee:	30 0b       	mov	r11,0
800004f0:	f0 1f 00 08 	mcall	80000510 <task9+0x3c>
		ROSA_semaphoreUnlock(mutex5);
800004f4:	48 48       	lddpc	r8,80000504 <task9+0x30>
800004f6:	70 08       	ld.w	r8,r8[0x0]
800004f8:	10 9c       	mov	r12,r8
800004fa:	f0 1f 00 07 	mcall	80000514 <task9+0x40>
		ROSA_yield();
800004fe:	f0 1f 00 07 	mcall	80000518 <task9+0x44>
	}
80000502:	ce cb       	rjmp	800004da <task9+0x6>
80000504:	00 00       	add	r0,r0
80000506:	05 ec       	ld.ub	r12,r2[0x6]
80000508:	80 00       	ld.sh	r0,r0[0x0]
8000050a:	00 c4       	st.b	r0++,r4
8000050c:	80 00       	ld.sh	r0,r0[0x0]
8000050e:	13 d8       	ld.ub	r8,r9[0x5]
80000510:	80 00       	ld.sh	r0,r0[0x0]
80000512:	10 94       	mov	r4,r8
80000514:	80 00       	ld.sh	r0,r0[0x0]
80000516:	01 98       	ld.ub	r8,r0[0x1]
80000518:	80 00       	ld.sh	r0,r0[0x0]
8000051a:	0d 2e       	ld.uh	lr,r6++

8000051c <task10>:
/*************************************************************
 * Task 10
 * Turn LED 4 OFF
 ************************************************************/
void task10(void)
{
8000051c:	eb cd 40 80 	pushm	r7,lr
80000520:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex5);
80000522:	48 b8       	lddpc	r8,8000054c <task10+0x30>
80000524:	70 08       	ld.w	r8,r8[0x0]
80000526:	10 9c       	mov	r12,r8
80000528:	f0 1f 00 0a 	mcall	80000550 <task10+0x34>
		ledOff(LED4_GPIO);
8000052c:	33 3c       	mov	r12,51
8000052e:	f0 1f 00 0a 	mcall	80000554 <task10+0x38>
		ROSA_delay(502);
80000532:	e0 6a 01 f6 	mov	r10,502
80000536:	30 0b       	mov	r11,0
80000538:	f0 1f 00 08 	mcall	80000558 <task10+0x3c>
		ROSA_semaphoreUnlock(mutex5);
8000053c:	48 48       	lddpc	r8,8000054c <task10+0x30>
8000053e:	70 08       	ld.w	r8,r8[0x0]
80000540:	10 9c       	mov	r12,r8
80000542:	f0 1f 00 07 	mcall	8000055c <task10+0x40>
		ROSA_yield();
80000546:	f0 1f 00 07 	mcall	80000560 <task10+0x44>
	}
8000054a:	ce cb       	rjmp	80000522 <task10+0x6>
8000054c:	00 00       	add	r0,r0
8000054e:	05 ec       	ld.ub	r12,r2[0x6]
80000550:	80 00       	ld.sh	r0,r0[0x0]
80000552:	00 c4       	st.b	r0++,r4
80000554:	80 00       	ld.sh	r0,r0[0x0]
80000556:	13 f8       	ld.ub	r8,r9[0x7]
80000558:	80 00       	ld.sh	r0,r0[0x0]
8000055a:	10 94       	mov	r4,r8
8000055c:	80 00       	ld.sh	r0,r0[0x0]
8000055e:	01 98       	ld.ub	r8,r0[0x1]
80000560:	80 00       	ld.sh	r0,r0[0x0]
80000562:	0d 2e       	ld.uh	lr,r6++

80000564 <task11>:
/*************************************************************
 * Task 11
 * Turn LED 5 ON
 ************************************************************/
void task11(void)
{
80000564:	eb cd 40 80 	pushm	r7,lr
80000568:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex6);
8000056a:	48 b8       	lddpc	r8,80000594 <task11+0x30>
8000056c:	70 08       	ld.w	r8,r8[0x0]
8000056e:	10 9c       	mov	r12,r8
80000570:	f0 1f 00 0a 	mcall	80000598 <task11+0x34>
		ledOn(LED5_GPIO);
80000574:	33 4c       	mov	r12,52
80000576:	f0 1f 00 0a 	mcall	8000059c <task11+0x38>
		ROSA_delay(501);
8000057a:	e0 6a 01 f5 	mov	r10,501
8000057e:	30 0b       	mov	r11,0
80000580:	f0 1f 00 08 	mcall	800005a0 <task11+0x3c>
		ROSA_semaphoreUnlock(mutex6);
80000584:	48 48       	lddpc	r8,80000594 <task11+0x30>
80000586:	70 08       	ld.w	r8,r8[0x0]
80000588:	10 9c       	mov	r12,r8
8000058a:	f0 1f 00 07 	mcall	800005a4 <task11+0x40>
		ROSA_yield();
8000058e:	f0 1f 00 07 	mcall	800005a8 <task11+0x44>
	}
80000592:	ce cb       	rjmp	8000056a <task11+0x6>
80000594:	00 00       	add	r0,r0
80000596:	05 d4       	ld.ub	r4,r2[0x5]
80000598:	80 00       	ld.sh	r0,r0[0x0]
8000059a:	00 c4       	st.b	r0++,r4
8000059c:	80 00       	ld.sh	r0,r0[0x0]
8000059e:	13 d8       	ld.ub	r8,r9[0x5]
800005a0:	80 00       	ld.sh	r0,r0[0x0]
800005a2:	10 94       	mov	r4,r8
800005a4:	80 00       	ld.sh	r0,r0[0x0]
800005a6:	01 98       	ld.ub	r8,r0[0x1]
800005a8:	80 00       	ld.sh	r0,r0[0x0]
800005aa:	0d 2e       	ld.uh	lr,r6++

800005ac <task12>:
/*************************************************************
 * Task 12
 * Turn LED 5 OFF
 ************************************************************/
void task12(void)
{
800005ac:	eb cd 40 80 	pushm	r7,lr
800005b0:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(mutex6);
800005b2:	48 b8       	lddpc	r8,800005dc <task12+0x30>
800005b4:	70 08       	ld.w	r8,r8[0x0]
800005b6:	10 9c       	mov	r12,r8
800005b8:	f0 1f 00 0a 	mcall	800005e0 <task12+0x34>
		ledOff(LED5_GPIO);
800005bc:	33 4c       	mov	r12,52
800005be:	f0 1f 00 0a 	mcall	800005e4 <task12+0x38>
		ROSA_delay(500);
800005c2:	e0 6a 01 f4 	mov	r10,500
800005c6:	30 0b       	mov	r11,0
800005c8:	f0 1f 00 08 	mcall	800005e8 <task12+0x3c>
		ROSA_semaphoreUnlock(mutex6);
800005cc:	48 48       	lddpc	r8,800005dc <task12+0x30>
800005ce:	70 08       	ld.w	r8,r8[0x0]
800005d0:	10 9c       	mov	r12,r8
800005d2:	f0 1f 00 07 	mcall	800005ec <task12+0x40>
		ROSA_yield();
800005d6:	f0 1f 00 07 	mcall	800005f0 <task12+0x44>
	}
800005da:	ce cb       	rjmp	800005b2 <task12+0x6>
800005dc:	00 00       	add	r0,r0
800005de:	05 d4       	ld.ub	r4,r2[0x5]
800005e0:	80 00       	ld.sh	r0,r0[0x0]
800005e2:	00 c4       	st.b	r0++,r4
800005e4:	80 00       	ld.sh	r0,r0[0x0]
800005e6:	13 f8       	ld.ub	r8,r9[0x7]
800005e8:	80 00       	ld.sh	r0,r0[0x0]
800005ea:	10 94       	mov	r4,r8
800005ec:	80 00       	ld.sh	r0,r0[0x0]
800005ee:	01 98       	ld.ub	r8,r0[0x1]
800005f0:	80 00       	ld.sh	r0,r0[0x0]
800005f2:	0d 2e       	ld.uh	lr,r6++

800005f4 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
800005f4:	eb cd 40 80 	pushm	r7,lr
800005f8:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
800005fa:	f0 1f 00 39 	mcall	800006dc <main+0xe8>
	
	//Create tasks and install them into the ROSA kernel
	ROSA_taskCreate(&t1_tcb, "tsk1", task1, T1_STACK_SIZE, 1);
800005fe:	30 18       	mov	r8,1
80000600:	32 09       	mov	r9,32
80000602:	4b 8a       	lddpc	r10,800006e0 <main+0xec>
80000604:	4b 8b       	lddpc	r11,800006e4 <main+0xf0>
80000606:	4b 9c       	lddpc	r12,800006e8 <main+0xf4>
80000608:	f0 1f 00 39 	mcall	800006ec <main+0xf8>
	ROSA_taskCreate(&t2_tcb, "tsk2", task2, T2_STACK_SIZE, 2);
8000060c:	30 28       	mov	r8,2
8000060e:	32 09       	mov	r9,32
80000610:	4b 8a       	lddpc	r10,800006f0 <main+0xfc>
80000612:	4b 9b       	lddpc	r11,800006f4 <main+0x100>
80000614:	4b 9c       	lddpc	r12,800006f8 <main+0x104>
80000616:	f0 1f 00 36 	mcall	800006ec <main+0xf8>
	ROSA_taskCreate(&t3_tcb, "tsk3", task3, T3_STACK_SIZE, 3);
8000061a:	30 38       	mov	r8,3
8000061c:	32 09       	mov	r9,32
8000061e:	4b 8a       	lddpc	r10,800006fc <main+0x108>
80000620:	4b 8b       	lddpc	r11,80000700 <main+0x10c>
80000622:	4b 9c       	lddpc	r12,80000704 <main+0x110>
80000624:	f0 1f 00 32 	mcall	800006ec <main+0xf8>
	ROSA_taskCreate(&t4_tcb, "tsk4", task4, T4_STACK_SIZE, 4);
80000628:	30 48       	mov	r8,4
8000062a:	32 09       	mov	r9,32
8000062c:	4b 7a       	lddpc	r10,80000708 <main+0x114>
8000062e:	4b 8b       	lddpc	r11,8000070c <main+0x118>
80000630:	4b 8c       	lddpc	r12,80000710 <main+0x11c>
80000632:	f0 1f 00 2f 	mcall	800006ec <main+0xf8>
	ROSA_taskCreate(&t5_tcb, "tsk5", task5, T5_STACK_SIZE, 5);
80000636:	30 58       	mov	r8,5
80000638:	32 09       	mov	r9,32
8000063a:	4b 7a       	lddpc	r10,80000714 <main+0x120>
8000063c:	4b 7b       	lddpc	r11,80000718 <main+0x124>
8000063e:	4b 8c       	lddpc	r12,8000071c <main+0x128>
80000640:	f0 1f 00 2b 	mcall	800006ec <main+0xf8>
	ROSA_taskCreate(&t6_tcb, "tsk6", task6, T6_STACK_SIZE, 6);
80000644:	30 68       	mov	r8,6
80000646:	32 09       	mov	r9,32
80000648:	4b 6a       	lddpc	r10,80000720 <main+0x12c>
8000064a:	4b 7b       	lddpc	r11,80000724 <main+0x130>
8000064c:	4b 7c       	lddpc	r12,80000728 <main+0x134>
8000064e:	f0 1f 00 28 	mcall	800006ec <main+0xf8>
	ROSA_taskCreate(&t7_tcb, "tsk7", task7, T7_STACK_SIZE, 7);
80000652:	30 78       	mov	r8,7
80000654:	32 09       	mov	r9,32
80000656:	4b 6a       	lddpc	r10,8000072c <main+0x138>
80000658:	4b 6b       	lddpc	r11,80000730 <main+0x13c>
8000065a:	4b 7c       	lddpc	r12,80000734 <main+0x140>
8000065c:	f0 1f 00 24 	mcall	800006ec <main+0xf8>
	ROSA_taskCreate(&t8_tcb, "tsk8", task8, T8_STACK_SIZE, 8);
80000660:	30 88       	mov	r8,8
80000662:	32 09       	mov	r9,32
80000664:	4b 5a       	lddpc	r10,80000738 <main+0x144>
80000666:	4b 6b       	lddpc	r11,8000073c <main+0x148>
80000668:	4b 6c       	lddpc	r12,80000740 <main+0x14c>
8000066a:	f0 1f 00 21 	mcall	800006ec <main+0xf8>
	ROSA_taskCreate(&t9_tcb, "tsk9", task9, T9_STACK_SIZE, 9);
8000066e:	30 98       	mov	r8,9
80000670:	32 09       	mov	r9,32
80000672:	4b 5a       	lddpc	r10,80000744 <main+0x150>
80000674:	4b 5b       	lddpc	r11,80000748 <main+0x154>
80000676:	4b 6c       	lddpc	r12,8000074c <main+0x158>
80000678:	f0 1f 00 1d 	mcall	800006ec <main+0xf8>
	ROSA_taskCreate(&t10_tcb, "tsk10", task10, T10_STACK_SIZE, 10);
8000067c:	30 a8       	mov	r8,10
8000067e:	32 09       	mov	r9,32
80000680:	4b 4a       	lddpc	r10,80000750 <main+0x15c>
80000682:	4b 5b       	lddpc	r11,80000754 <main+0x160>
80000684:	4b 5c       	lddpc	r12,80000758 <main+0x164>
80000686:	f0 1f 00 1a 	mcall	800006ec <main+0xf8>
	ROSA_taskCreate(&t11_tcb, "tsk11", task11, T11_STACK_SIZE, 11);
8000068a:	30 b8       	mov	r8,11
8000068c:	32 09       	mov	r9,32
8000068e:	4b 4a       	lddpc	r10,8000075c <main+0x168>
80000690:	4b 4b       	lddpc	r11,80000760 <main+0x16c>
80000692:	4b 5c       	lddpc	r12,80000764 <main+0x170>
80000694:	f0 1f 00 16 	mcall	800006ec <main+0xf8>
	ROSA_taskCreate(&t12_tcb, "tsk12", task12, T12_STACK_SIZE, 12);
80000698:	30 c8       	mov	r8,12
8000069a:	32 09       	mov	r9,32
8000069c:	4b 3a       	lddpc	r10,80000768 <main+0x174>
8000069e:	4b 4b       	lddpc	r11,8000076c <main+0x178>
800006a0:	4b 4c       	lddpc	r12,80000770 <main+0x17c>
800006a2:	f0 1f 00 13 	mcall	800006ec <main+0xf8>
	
	ROSA_semaphoreCreate(&mutex1, 1);
800006a6:	30 1b       	mov	r11,1
800006a8:	4b 3c       	lddpc	r12,80000774 <main+0x180>
800006aa:	f0 1f 00 34 	mcall	80000778 <main+0x184>
	ROSA_semaphoreCreate(&mutex2, 1);
800006ae:	30 1b       	mov	r11,1
800006b0:	4b 3c       	lddpc	r12,8000077c <main+0x188>
800006b2:	f0 1f 00 32 	mcall	80000778 <main+0x184>
	ROSA_semaphoreCreate(&mutex3, 1);
800006b6:	30 1b       	mov	r11,1
800006b8:	4b 2c       	lddpc	r12,80000780 <main+0x18c>
800006ba:	f0 1f 00 30 	mcall	80000778 <main+0x184>
	ROSA_semaphoreCreate(&mutex4, 1);
800006be:	30 1b       	mov	r11,1
800006c0:	4b 1c       	lddpc	r12,80000784 <main+0x190>
800006c2:	f0 1f 00 2e 	mcall	80000778 <main+0x184>
	ROSA_semaphoreCreate(&mutex5, 1);
800006c6:	30 1b       	mov	r11,1
800006c8:	4b 0c       	lddpc	r12,80000788 <main+0x194>
800006ca:	f0 1f 00 2c 	mcall	80000778 <main+0x184>
	ROSA_semaphoreCreate(&mutex6, 1);
800006ce:	30 1b       	mov	r11,1
800006d0:	4a fc       	lddpc	r12,8000078c <main+0x198>
800006d2:	f0 1f 00 2a 	mcall	80000778 <main+0x184>

	ROSA_startScheduler();
800006d6:	f0 1f 00 2f 	mcall	80000790 <main+0x19c>

	/* Execution will never return here */
	while(1);
800006da:	c0 08       	rjmp	800006da <main+0xe6>
800006dc:	80 00       	ld.sh	r0,r0[0x0]
800006de:	09 f0       	ld.ub	r0,r4[0x7]
800006e0:	80 00       	ld.sh	r0,r0[0x0]
800006e2:	02 94       	mov	r4,r1
800006e4:	80 00       	ld.sh	r0,r0[0x0]
800006e6:	02 34       	cp.w	r4,r1
800006e8:	00 00       	add	r0,r0
800006ea:	05 f8       	ld.ub	r8,r2[0x7]
800006ec:	80 00       	ld.sh	r0,r0[0x0]
800006ee:	0b 80       	ld.ub	r0,r5[0x0]
800006f0:	80 00       	ld.sh	r0,r0[0x0]
800006f2:	02 dc       	st.w	--r1,r12
800006f4:	80 00       	ld.sh	r0,r0[0x0]
800006f6:	02 3c       	cp.w	r12,r1
800006f8:	00 00       	add	r0,r0
800006fa:	05 f4       	ld.ub	r4,r2[0x7]
800006fc:	80 00       	ld.sh	r0,r0[0x0]
800006fe:	03 24       	ld.uh	r4,r1++
80000700:	80 00       	ld.sh	r0,r0[0x0]
80000702:	02 44       	or	r4,r1
80000704:	00 00       	add	r0,r0
80000706:	05 d8       	ld.ub	r8,r2[0x5]
80000708:	80 00       	ld.sh	r0,r0[0x0]
8000070a:	03 6c       	ld.uh	r12,--r1
8000070c:	80 00       	ld.sh	r0,r0[0x0]
8000070e:	02 4c       	or	r12,r1
80000710:	00 00       	add	r0,r0
80000712:	05 e8       	ld.ub	r8,r2[0x6]
80000714:	80 00       	ld.sh	r0,r0[0x0]
80000716:	03 b4       	ld.ub	r4,r1[0x3]
80000718:	80 00       	ld.sh	r0,r0[0x0]
8000071a:	02 54       	eor	r4,r1
8000071c:	00 00       	add	r0,r0
8000071e:	05 e4       	ld.ub	r4,r2[0x6]
80000720:	80 00       	ld.sh	r0,r0[0x0]
80000722:	03 fc       	ld.ub	r12,r1[0x7]
80000724:	80 00       	ld.sh	r0,r0[0x0]
80000726:	02 5c       	eor	r12,r1
80000728:	00 00       	add	r0,r0
8000072a:	06 04       	add	r4,r3
8000072c:	80 00       	ld.sh	r0,r0[0x0]
8000072e:	04 44       	or	r4,r2
80000730:	80 00       	ld.sh	r0,r0[0x0]
80000732:	02 64       	and	r4,r1
80000734:	00 00       	add	r0,r0
80000736:	05 fc       	ld.ub	r12,r2[0x7]
80000738:	80 00       	ld.sh	r0,r0[0x0]
8000073a:	04 8c       	andn	r12,r2
8000073c:	80 00       	ld.sh	r0,r0[0x0]
8000073e:	02 6c       	and	r12,r1
80000740:	00 00       	add	r0,r0
80000742:	06 10       	sub	r0,r3
80000744:	80 00       	ld.sh	r0,r0[0x0]
80000746:	04 d4       	st.w	--r2,r4
80000748:	80 00       	ld.sh	r0,r0[0x0]
8000074a:	02 74       	tst	r4,r1
8000074c:	00 00       	add	r0,r0
8000074e:	06 00       	add	r0,r3
80000750:	80 00       	ld.sh	r0,r0[0x0]
80000752:	05 1c       	ld.sh	r12,r2++
80000754:	80 00       	ld.sh	r0,r0[0x0]
80000756:	02 7c       	tst	r12,r1
80000758:	00 00       	add	r0,r0
8000075a:	05 f0       	ld.ub	r0,r2[0x7]
8000075c:	80 00       	ld.sh	r0,r0[0x0]
8000075e:	05 64       	ld.uh	r4,--r2
80000760:	80 00       	ld.sh	r0,r0[0x0]
80000762:	02 84       	andn	r4,r1
80000764:	00 00       	add	r0,r0
80000766:	06 08       	add	r8,r3
80000768:	80 00       	ld.sh	r0,r0[0x0]
8000076a:	05 ac       	ld.ub	r12,r2[0x2]
8000076c:	80 00       	ld.sh	r0,r0[0x0]
8000076e:	02 8c       	andn	r12,r1
80000770:	00 00       	add	r0,r0
80000772:	05 e0       	ld.ub	r0,r2[0x6]
80000774:	00 00       	add	r0,r0
80000776:	06 18       	sub	r8,r3
80000778:	80 00       	ld.sh	r0,r0[0x0]
8000077a:	00 70       	tst	r0,r0
8000077c:	00 00       	add	r0,r0
8000077e:	05 dc       	ld.ub	r12,r2[0x5]
80000780:	00 00       	add	r0,r0
80000782:	06 0c       	add	r12,r3
80000784:	00 00       	add	r0,r0
80000786:	06 14       	sub	r4,r3
80000788:	00 00       	add	r0,r0
8000078a:	05 ec       	ld.ub	r12,r2[0x6]
8000078c:	00 00       	add	r0,r0
8000078e:	05 d4       	ld.ub	r4,r2[0x5]
80000790:	80 00       	ld.sh	r0,r0[0x0]
80000792:	0d a4       	ld.ub	r4,r6[0x2]

80000794 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
80000794:	eb cd 40 80 	pushm	r7,lr
80000798:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
8000079a:	f0 1f 00 05 	mcall	800007ac <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
8000079e:	f0 1f 00 05 	mcall	800007b0 <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it
800007a2:	f0 1f 00 05 	mcall	800007b4 <ROSA_yieldFromISR+0x20>
}
800007a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800007aa:	00 00       	add	r0,r0
800007ac:	80 00       	ld.sh	r0,r0[0x0]
800007ae:	23 7e       	sub	lr,55
800007b0:	80 00       	ld.sh	r0,r0[0x0]
800007b2:	0d 4c       	ld.w	r12,--r6
800007b4:	80 00       	ld.sh	r0,r0[0x0]
800007b6:	23 b8       	sub	r8,59

800007b8 <usart_options>:
800007b8:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
800007c8:	0a 00 00 00 69 64 6c 65 00 00 00 00                 ....idle....

800007d4 <idle>:

/** @fn void idle(void)
	@brief Idle task body.
*/
void idle(void)
{
800007d4:	eb cd 40 80 	pushm	r7,lr
800007d8:	1a 97       	mov	r7,sp
	while(1)
	{
		usartWriteLine(USART, "idle\n");
800007da:	48 4b       	lddpc	r11,800007e8 <idle+0x14>
800007dc:	fe 7c 14 00 	mov	r12,-60416
800007e0:	f0 1f 00 03 	mcall	800007ec <idle+0x18>
	}
800007e4:	cf bb       	rjmp	800007da <idle+0x6>
800007e6:	00 00       	add	r0,r0
800007e8:	80 00       	ld.sh	r0,r0[0x0]
800007ea:	07 c4       	ld.ub	r4,r3[0x4]
800007ec:	80 00       	ld.sh	r0,r0[0x0]
800007ee:	17 48       	ld.w	r8,--r11

800007f0 <idleCreate>:

/** @fn void idleCreate(void)
	@brief Creation of the idle task.
*/
void idleCreate(void)
{
800007f0:	eb cd 40 80 	pushm	r7,lr
800007f4:	1a 97       	mov	r7,sp
	ROSA_tcbCreate(&IDLETASK_TCB, "idle", idle, idle_stack, IDLE_STACK_SIZE);
800007f6:	32 08       	mov	r8,32
800007f8:	48 69       	lddpc	r9,80000810 <idleCreate+0x20>
800007fa:	48 7a       	lddpc	r10,80000814 <idleCreate+0x24>
800007fc:	48 7b       	lddpc	r11,80000818 <idleCreate+0x28>
800007fe:	48 8c       	lddpc	r12,8000081c <idleCreate+0x2c>
80000800:	f0 1f 00 08 	mcall	80000820 <idleCreate+0x30>
	IDLETASK = &IDLETASK_TCB;
80000804:	48 88       	lddpc	r8,80000824 <idleCreate+0x34>
80000806:	48 69       	lddpc	r9,8000081c <idleCreate+0x2c>
80000808:	91 09       	st.w	r8[0x0],r9
}
8000080a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000080e:	00 00       	add	r0,r0
80000810:	00 00       	add	r0,r0
80000812:	05 18       	ld.sh	r8,r2++
80000814:	80 00       	ld.sh	r0,r0[0x0]
80000816:	07 d4       	ld.ub	r4,r3[0x5]
80000818:	80 00       	ld.sh	r0,r0[0x0]
8000081a:	07 cc       	ld.ub	r12,r3[0x4]
8000081c:	00 00       	add	r0,r0
8000081e:	06 5c       	eor	r12,r3
80000820:	80 00       	ld.sh	r0,r0[0x0]
80000822:	0a cc       	st.b	r5++,r12
80000824:	00 00       	add	r0,r0
80000826:	06 1c       	sub	r12,r3

80000828 <readyQueueInsert>:
	@brief Inserts the given task into the ready queue by its priority.
	@param th Task structure (tcb structure).
	@return A status code (1 - item has been added to the empty queue, 0 - otherwise).
*/
int readyQueueInsert(ROSA_taskHandle_t ** pth)
{
80000828:	eb cd 40 80 	pushm	r7,lr
8000082c:	1a 97       	mov	r7,sp
8000082e:	20 3d       	sub	sp,12
80000830:	ef 4c ff f4 	st.w	r7[-12],r12
	uint8_t priority;
	int retval;
	
	priority = (*pth)->priority;
80000834:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000838:	70 08       	ld.w	r8,r8[0x0]
8000083a:	f1 38 00 64 	ld.ub	r8,r8[100]
8000083e:	ef 68 ff fb 	st.b	r7[-5],r8
	
	/* Check the given queue for the emptiness */
	if (PA[priority] == NULL)
80000842:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000846:	4a 08       	lddpc	r8,800008c4 <readyQueueInsert+0x9c>
80000848:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000084c:	58 08       	cp.w	r8,0
8000084e:	c1 61       	brne	8000087a <readyQueueInsert+0x52>
	{
		PA[priority] = *pth;
80000850:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000854:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000858:	70 0a       	ld.w	r10,r8[0x0]
8000085a:	49 b8       	lddpc	r8,800008c4 <readyQueueInsert+0x9c>
8000085c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		PA[priority]->nexttcb = *pth;
80000860:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000864:	49 88       	lddpc	r8,800008c4 <readyQueueInsert+0x9c>
80000866:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000086a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000086e:	72 09       	ld.w	r9,r9[0x0]
80000870:	91 09       	st.w	r8[0x0],r9
		
		retval = 1;
80000872:	30 18       	mov	r8,1
80000874:	ef 48 ff fc 	st.w	r7[-4],r8
80000878:	c1 f8       	rjmp	800008b6 <readyQueueInsert+0x8e>
	}
	else
	{
		(*pth)->nexttcb = PA[priority]->nexttcb;
8000087a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000087e:	70 08       	ld.w	r8,r8[0x0]
80000880:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80000884:	49 09       	lddpc	r9,800008c4 <readyQueueInsert+0x9c>
80000886:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000088a:	72 09       	ld.w	r9,r9[0x0]
8000088c:	91 09       	st.w	r8[0x0],r9
		PA[priority]->nexttcb = *pth;
8000088e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000892:	48 d8       	lddpc	r8,800008c4 <readyQueueInsert+0x9c>
80000894:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000898:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000089c:	72 09       	ld.w	r9,r9[0x0]
8000089e:	91 09       	st.w	r8[0x0],r9
		PA[priority] = *pth;
800008a0:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800008a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008a8:	70 0a       	ld.w	r10,r8[0x0]
800008aa:	48 78       	lddpc	r8,800008c4 <readyQueueInsert+0x9c>
800008ac:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		retval = 0;
800008b0:	30 08       	mov	r8,0
800008b2:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return retval;
800008b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800008ba:	10 9c       	mov	r12,r8
800008bc:	2f dd       	sub	sp,-12
800008be:	e3 cd 80 80 	ldm	sp++,r7,pc
800008c2:	00 00       	add	r0,r0
800008c4:	00 00       	add	r0,r0
800008c6:	06 24       	rsub	r4,r3

800008c8 <readyQueueExtract>:
	@brief Extracts the given task from the ready queue by its priority.
	@param th Task structure (tcb structure).
	@return A status code (1 - queue is empty after extraction, 0 - otherwise).
*/
int readyQueueExtract(ROSA_taskHandle_t ** pth)
{
800008c8:	eb cd 40 80 	pushm	r7,lr
800008cc:	1a 97       	mov	r7,sp
800008ce:	20 4d       	sub	sp,16
800008d0:	ef 4c ff f0 	st.w	r7[-16],r12
	ROSA_taskHandle_t * thTmp;
	uint8_t priority;
	int retval;
	
	priority = (*pth)->priority;
800008d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800008d8:	70 08       	ld.w	r8,r8[0x0]
800008da:	f1 38 00 64 	ld.ub	r8,r8[100]
800008de:	ef 68 ff fb 	st.b	r7[-5],r8
	thTmp = PA[priority];
800008e2:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800008e6:	4a 58       	lddpc	r8,80000978 <readyQueueExtract+0xb0>
800008e8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800008ec:	ef 48 ff f4 	st.w	r7[-12],r8
	
	/* Check whether the deleted task is the last in the queue or not */
	if ((*pth)->nexttcb == *pth) 
800008f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800008f4:	70 08       	ld.w	r8,r8[0x0]
800008f6:	70 09       	ld.w	r9,r8[0x0]
800008f8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800008fc:	70 08       	ld.w	r8,r8[0x0]
800008fe:	10 39       	cp.w	r9,r8
80000900:	c1 11       	brne	80000922 <readyQueueExtract+0x5a>
	{
		/* It's enough to extract the deleted task from the queue */
		PA[priority] = NULL;
80000902:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000906:	49 d8       	lddpc	r8,80000978 <readyQueueExtract+0xb0>
80000908:	30 0a       	mov	r10,0
8000090a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		retval = 1;
8000090e:	30 18       	mov	r8,1
80000910:	ef 48 ff fc 	st.w	r7[-4],r8
80000914:	c2 b8       	rjmp	8000096a <readyQueueExtract+0xa2>
	else 
	{
		/* Search for delete task */
		while (thTmp->nexttcb != (*pth)) 
		{
			thTmp = thTmp->nexttcb;
80000916:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000091a:	70 08       	ld.w	r8,r8[0x0]
8000091c:	ef 48 ff f4 	st.w	r7[-12],r8
80000920:	c0 28       	rjmp	80000924 <readyQueueExtract+0x5c>
		retval = 1;
	}
	else 
	{
		/* Search for delete task */
		while (thTmp->nexttcb != (*pth)) 
80000922:	d7 03       	nop
80000924:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000928:	70 09       	ld.w	r9,r8[0x0]
8000092a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000092e:	70 08       	ld.w	r8,r8[0x0]
80000930:	10 39       	cp.w	r9,r8
80000932:	cf 21       	brne	80000916 <readyQueueExtract+0x4e>
		{
			thTmp = thTmp->nexttcb;
		}
		
		/* Check whether the PA[priority] points to the deleted task or not */
		if (PA[priority] == *pth)
80000934:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80000938:	49 08       	lddpc	r8,80000978 <readyQueueExtract+0xb0>
8000093a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000093e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000942:	70 08       	ld.w	r8,r8[0x0]
80000944:	10 39       	cp.w	r9,r8
80000946:	c0 81       	brne	80000956 <readyQueueExtract+0x8e>
		{
			/* Move PA[priority] pointer to the previous task in the queue */ 
			PA[priority] = thTmp;
80000948:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000094c:	48 b8       	lddpc	r8,80000978 <readyQueueExtract+0xb0>
8000094e:	ee fa ff f4 	ld.w	r10,r7[-12]
80000952:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		}
		
		thTmp->nexttcb = (*pth)->nexttcb;
80000956:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000095a:	70 08       	ld.w	r8,r8[0x0]
8000095c:	70 09       	ld.w	r9,r8[0x0]
8000095e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000962:	91 09       	st.w	r8[0x0],r9
		
		retval = 0;
80000964:	30 08       	mov	r8,0
80000966:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return retval;
8000096a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000096e:	10 9c       	mov	r12,r8
80000970:	2f cd       	sub	sp,-16
80000972:	e3 cd 80 80 	ldm	sp++,r7,pc
80000976:	00 00       	add	r0,r0
80000978:	00 00       	add	r0,r0
8000097a:	06 24       	rsub	r4,r3

8000097c <readyQueueSearch>:
/** @fn int readyQueueSearch(void)
	@brief Search for the first non-empty highest priority queue.
	@return Pointer to the last tcb in the queue (in other words - PA[i]).
*/
tcb * readyQueueSearch(void)
{
8000097c:	eb cd 40 80 	pushm	r7,lr
80000980:	1a 97       	mov	r7,sp
80000982:	20 2d       	sub	sp,8
	int i = MAXNPRIO;
80000984:	30 c8       	mov	r8,12
80000986:	ef 48 ff f8 	st.w	r7[-8],r8
	tcb * rettcb;
	
	/* Search for the first non-empty queue. */
	while ( (PA[--i] == NULL) && (i > 0))
8000098a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000098e:	20 18       	sub	r8,1
80000990:	ef 48 ff f8 	st.w	r7[-8],r8
80000994:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000998:	49 48       	lddpc	r8,800009e8 <readyQueueSearch+0x6c>
8000099a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000099e:	58 08       	cp.w	r8,0
800009a0:	c0 61       	brne	800009ac <readyQueueSearch+0x30>
800009a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009a6:	58 08       	cp.w	r8,0
800009a8:	fe 99 ff f1 	brgt	8000098a <readyQueueSearch+0xe>
	{
		;
	}
		
	/* Check the PA for emptiness. */
	if ((i == 0) && (PA[i] == NULL))
800009ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009b0:	58 08       	cp.w	r8,0
800009b2:	c0 d1       	brne	800009cc <readyQueueSearch+0x50>
800009b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009b8:	48 c8       	lddpc	r8,800009e8 <readyQueueSearch+0x6c>
800009ba:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800009be:	58 08       	cp.w	r8,0
800009c0:	c0 61       	brne	800009cc <readyQueueSearch+0x50>
	{
		rettcb = IDLETASK;
800009c2:	48 b8       	lddpc	r8,800009ec <readyQueueSearch+0x70>
800009c4:	70 08       	ld.w	r8,r8[0x0]
800009c6:	ef 48 ff fc 	st.w	r7[-4],r8
	{
		;
	}
		
	/* Check the PA for emptiness. */
	if ((i == 0) && (PA[i] == NULL))
800009ca:	c0 88       	rjmp	800009da <readyQueueSearch+0x5e>
	{
		rettcb = IDLETASK;
	}
	else
	{
		rettcb = PA[i];
800009cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009d0:	48 68       	lddpc	r8,800009e8 <readyQueueSearch+0x6c>
800009d2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800009d6:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	
	return rettcb;
800009da:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800009de:	10 9c       	mov	r12,r8
800009e0:	2f ed       	sub	sp,-8
800009e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800009e6:	00 00       	add	r0,r0
800009e8:	00 00       	add	r0,r0
800009ea:	06 24       	rsub	r4,r3
800009ec:	00 00       	add	r0,r0
800009ee:	06 1c       	sub	r12,r3

800009f0 <ROSA_init>:

void ROSA_init(void)
{
800009f0:	eb cd 40 80 	pushm	r7,lr
800009f4:	1a 97       	mov	r7,sp
800009f6:	20 1d       	sub	sp,4
	int i = 0;
800009f8:	30 08       	mov	r8,0
800009fa:	ef 48 ff fc 	st.w	r7[-4],r8
	systemTick = 0;
800009fe:	4a 3a       	lddpc	r10,80000a88 <ROSA_init+0x98>
80000a00:	30 08       	mov	r8,0
80000a02:	30 09       	mov	r9,0
80000a04:	f4 e9 00 00 	st.d	r10[0],r8
	
	//Do initialization of I/O drivers
	ledInit();									//LEDs
80000a08:	f0 1f 00 21 	mcall	80000a8c <ROSA_init+0x9c>
	buttonInit();								//Buttons
80000a0c:	f0 1f 00 21 	mcall	80000a90 <ROSA_init+0xa0>
	joystickInit();								//Joystick
80000a10:	f0 1f 00 21 	mcall	80000a94 <ROSA_init+0xa4>
	potInit();									//Potentiometer
80000a14:	f0 1f 00 21 	mcall	80000a98 <ROSA_init+0xa8>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
80000a18:	e0 6a 1b 00 	mov	r10,6912
80000a1c:	ea 1a 00 b7 	orh	r10,0xb7
80000a20:	49 fb       	lddpc	r11,80000a9c <ROSA_init+0xac>
80000a22:	fe 7c 14 00 	mov	r12,-60416
80000a26:	f0 1f 00 1f 	mcall	80000aa0 <ROSA_init+0xb0>

	interruptInit();
80000a2a:	f0 1f 00 1f 	mcall	80000aa4 <ROSA_init+0xb4>
	interruptEnable();
80000a2e:	f0 1f 00 1f 	mcall	80000aa8 <ROSA_init+0xb8>
	timerInit(1);
80000a32:	30 1c       	mov	r12,1
80000a34:	f0 1f 00 1e 	mcall	80000aac <ROSA_init+0xbc>
	timerStart();
80000a38:	f0 1f 00 1e 	mcall	80000ab0 <ROSA_init+0xc0>
	
	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
80000a3c:	49 e8       	lddpc	r8,80000ab4 <ROSA_init+0xc4>
80000a3e:	30 09       	mov	r9,0
80000a40:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
80000a42:	49 e8       	lddpc	r8,80000ab8 <ROSA_init+0xc8>
80000a44:	30 09       	mov	r9,0
80000a46:	91 09       	st.w	r8[0x0],r9
	PREEMPTASK = NULL;
80000a48:	49 d8       	lddpc	r8,80000abc <ROSA_init+0xcc>
80000a4a:	30 09       	mov	r9,0
80000a4c:	91 09       	st.w	r8[0x0],r9
	LOCKEDSEMAPHORELIST=NULL;
80000a4e:	49 d8       	lddpc	r8,80000ac0 <ROSA_init+0xd0>
80000a50:	30 09       	mov	r9,0
80000a52:	91 09       	st.w	r8[0x0],r9
	
	/* Create idle task. */
	idleCreate();
80000a54:	f0 1f 00 1c 	mcall	80000ac4 <ROSA_init+0xd4>
	
	for (i = 0; i < MAXNPRIO; i++) {
80000a58:	30 08       	mov	r8,0
80000a5a:	ef 48 ff fc 	st.w	r7[-4],r8
80000a5e:	c0 c8       	rjmp	80000a76 <ROSA_init+0x86>
		PA[i] = NULL;
80000a60:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000a64:	49 98       	lddpc	r8,80000ac8 <ROSA_init+0xd8>
80000a66:	30 0a       	mov	r10,0
80000a68:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	LOCKEDSEMAPHORELIST=NULL;
	
	/* Create idle task. */
	idleCreate();
	
	for (i = 0; i < MAXNPRIO; i++) {
80000a6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a70:	2f f8       	sub	r8,-1
80000a72:	ef 48 ff fc 	st.w	r7[-4],r8
80000a76:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a7a:	58 b8       	cp.w	r8,11
80000a7c:	fe 9a ff f2 	brle	80000a60 <ROSA_init+0x70>
		PA[i] = NULL;
	}
	
	//Initialize the timer to 1 ms period.
	
}
80000a80:	2f fd       	sub	sp,-4
80000a82:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a86:	00 00       	add	r0,r0
80000a88:	00 00       	add	r0,r0
80000a8a:	06 d4       	st.w	--r3,r4
80000a8c:	80 00       	ld.sh	r0,r0[0x0]
80000a8e:	13 4c       	ld.w	r12,--r9
80000a90:	80 00       	ld.sh	r0,r0[0x0]
80000a92:	11 a4       	ld.ub	r4,r8[0x2]
80000a94:	80 00       	ld.sh	r0,r0[0x0]
80000a96:	11 cc       	ld.ub	r12,r8[0x4]
80000a98:	80 00       	ld.sh	r0,r0[0x0]
80000a9a:	14 18       	sub	r8,r10
80000a9c:	80 00       	ld.sh	r0,r0[0x0]
80000a9e:	07 b8       	ld.ub	r8,r3[0x3]
80000aa0:	80 00       	ld.sh	r0,r0[0x0]
80000aa2:	15 cc       	ld.ub	r12,r10[0x4]
80000aa4:	80 00       	ld.sh	r0,r0[0x0]
80000aa6:	23 48       	sub	r8,52
80000aa8:	80 00       	ld.sh	r0,r0[0x0]
80000aaa:	23 6a       	sub	r10,54
80000aac:	80 00       	ld.sh	r0,r0[0x0]
80000aae:	17 9c       	ld.ub	r12,r11[0x1]
80000ab0:	80 00       	ld.sh	r0,r0[0x0]
80000ab2:	17 ca       	ld.ub	r10,r11[0x4]
80000ab4:	00 00       	add	r0,r0
80000ab6:	06 20       	rsub	r0,r3
80000ab8:	00 00       	add	r0,r0
80000aba:	06 58       	eor	r8,r3
80000abc:	00 00       	add	r0,r0
80000abe:	06 54       	eor	r4,r3
80000ac0:	00 00       	add	r0,r0
80000ac2:	05 d0       	ld.ub	r0,r2[0x5]
80000ac4:	80 00       	ld.sh	r0,r0[0x0]
80000ac6:	07 f0       	ld.ub	r0,r3[0x7]
80000ac8:	00 00       	add	r0,r0
80000aca:	06 24       	rsub	r4,r3

80000acc <ROSA_tcbCreate>:

void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
80000acc:	eb cd 40 80 	pushm	r7,lr
80000ad0:	1a 97       	mov	r7,sp
80000ad2:	20 6d       	sub	sp,24
80000ad4:	ef 4c ff f8 	st.w	r7[-8],r12
80000ad8:	ef 4b ff f4 	st.w	r7[-12],r11
80000adc:	ef 4a ff f0 	st.w	r7[-16],r10
80000ae0:	ef 49 ff ec 	st.w	r7[-20],r9
80000ae4:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000ae8:	30 08       	mov	r8,0
80000aea:	ef 48 ff fc 	st.w	r7[-4],r8
80000aee:	c1 48       	rjmp	80000b16 <ROSA_tcbCreate+0x4a>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
80000af0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000af4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000af8:	ee fa ff f4 	ld.w	r10,r7[-12]
80000afc:	f4 08 00 08 	add	r8,r10,r8
80000b00:	11 88       	ld.ub	r8,r8[0x0]
80000b02:	ee fa ff f8 	ld.w	r10,r7[-8]
80000b06:	f4 09 00 09 	add	r9,r10,r9
80000b0a:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000b0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b10:	2f f8       	sub	r8,-1
80000b12:	ef 48 ff fc 	st.w	r7[-4],r8
80000b16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b1a:	58 38       	cp.w	r8,3
80000b1c:	fe 9a ff ea 	brle	80000af0 <ROSA_tcbCreate+0x24>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
80000b20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b24:	30 09       	mov	r9,0
80000b26:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
80000b28:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000b2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b30:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
80000b32:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000b36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b3a:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
80000b3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b40:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000b44:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
80000b46:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000b4a:	a3 68       	lsl	r8,0x2
80000b4c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000b50:	10 09       	add	r9,r8
80000b52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b56:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
80000b58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b5c:	70 39       	ld.w	r9,r8[0xc]
80000b5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b62:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
80000b64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b68:	fc 19 00 1c 	movh	r9,0x1c
80000b6c:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
80000b6e:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b72:	f0 1f 00 03 	mcall	80000b7c <ROSA_tcbCreate+0xb0>
}
80000b76:	2f ad       	sub	sp,-24
80000b78:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b7c:	80 00       	ld.sh	r0,r0[0x0]
80000b7e:	0c a2       	st.w	r6++,r2

80000b80 <ROSA_taskCreate>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

int16_t ROSA_taskCreate(ROSA_taskHandle_t ** pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
80000b80:	eb cd 40 80 	pushm	r7,lr
80000b84:	1a 97       	mov	r7,sp
80000b86:	20 6d       	sub	sp,24
80000b88:	ef 4c ff f8 	st.w	r7[-8],r12
80000b8c:	ef 4b ff f4 	st.w	r7[-12],r11
80000b90:	ef 4a ff f0 	st.w	r7[-16],r10
80000b94:	ef 49 ff ec 	st.w	r7[-20],r9
80000b98:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) calloc(stackSize, sizeof(uint32_t)); 
80000b9c:	30 4b       	mov	r11,4
80000b9e:	ee fc ff ec 	ld.w	r12,r7[-20]
80000ba2:	f0 1f 00 2b 	mcall	80000c4c <ROSA_taskCreate+0xcc>
80000ba6:	18 98       	mov	r8,r12
80000ba8:	ef 48 ff fc 	st.w	r7[-4],r8
	
	*pth = (ROSA_taskHandle_t *) malloc(sizeof(ROSA_taskHandle_t));			
80000bac:	37 4c       	mov	r12,116
80000bae:	f0 1f 00 29 	mcall	80000c50 <ROSA_taskCreate+0xd0>
80000bb2:	18 98       	mov	r8,r12
80000bb4:	10 99       	mov	r9,r8
80000bb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bba:	91 09       	st.w	r8[0x0],r9
	(*pth)->priority = priority;
80000bbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bc0:	70 09       	ld.w	r9,r8[0x0]
80000bc2:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80000bc6:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
80000bca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bce:	70 0a       	ld.w	r10,r8[0x0]
80000bd0:	30 08       	mov	r8,0
80000bd2:	30 09       	mov	r9,0
80000bd4:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
80000bd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bdc:	70 09       	ld.w	r9,r8[0x0]
80000bde:	30 08       	mov	r8,0
80000be0:	f3 68 00 70 	st.b	r9[112],r8
	(*pth)->originalPriority = priority;
80000be4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000be8:	70 09       	ld.w	r9,r8[0x0]
80000bea:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80000bee:	f3 68 00 71 	st.b	r9[113],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
80000bf2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000bf6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bfa:	72 0c       	ld.w	r12,r9[0x0]
80000bfc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000c00:	ee fa ff f0 	ld.w	r10,r7[-16]
80000c04:	ee fb ff f4 	ld.w	r11,r7[-12]
80000c08:	f0 1f 00 13 	mcall	80000c54 <ROSA_taskCreate+0xd4>
	
	readyQueueInsert(pth);
80000c0c:	ee fc ff f8 	ld.w	r12,r7[-8]
80000c10:	f0 1f 00 12 	mcall	80000c58 <ROSA_taskCreate+0xd8>
	
	if (EXECTASK != NULL) {
80000c14:	49 28       	lddpc	r8,80000c5c <ROSA_taskCreate+0xdc>
80000c16:	70 08       	ld.w	r8,r8[0x0]
80000c18:	58 08       	cp.w	r8,0
80000c1a:	c1 40       	breq	80000c42 <ROSA_taskCreate+0xc2>
		if (EXECTASK->priority < priority) {
80000c1c:	49 08       	lddpc	r8,80000c5c <ROSA_taskCreate+0xdc>
80000c1e:	70 08       	ld.w	r8,r8[0x0]
80000c20:	f1 38 00 64 	ld.ub	r8,r8[100]
80000c24:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000c28:	f0 09 18 00 	cp.b	r9,r8
80000c2c:	e0 88 00 0b 	brls	80000c42 <ROSA_taskCreate+0xc2>
			PREEMPTASK = PA[priority];
80000c30:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000c34:	48 b8       	lddpc	r8,80000c60 <ROSA_taskCreate+0xe0>
80000c36:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000c3a:	48 b8       	lddpc	r8,80000c64 <ROSA_taskCreate+0xe4>
80000c3c:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
80000c3e:	f0 1f 00 0b 	mcall	80000c68 <ROSA_taskCreate+0xe8>
		}	
	}
	
	return 0;
80000c42:	30 08       	mov	r8,0
}
80000c44:	10 9c       	mov	r12,r8
80000c46:	2f ad       	sub	sp,-24
80000c48:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c4c:	80 00       	ld.sh	r0,r0[0x0]
80000c4e:	18 d4       	st.w	--r12,r4
80000c50:	80 00       	ld.sh	r0,r0[0x0]
80000c52:	19 4c       	ld.w	r12,--r12
80000c54:	80 00       	ld.sh	r0,r0[0x0]
80000c56:	0a cc       	st.b	r5++,r12
80000c58:	80 00       	ld.sh	r0,r0[0x0]
80000c5a:	08 28       	rsub	r8,r4
80000c5c:	00 00       	add	r0,r0
80000c5e:	06 58       	eor	r8,r3
80000c60:	00 00       	add	r0,r0
80000c62:	06 24       	rsub	r4,r3
80000c64:	00 00       	add	r0,r0
80000c66:	06 54       	eor	r4,r3
80000c68:	80 00       	ld.sh	r0,r0[0x0]
80000c6a:	0d 2e       	ld.uh	lr,r6++

80000c6c <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80000c6c:	4b 5c       	lddpc	r12,80000d40 <_yield+0xa>
	lda.w r11,EXECTASK
80000c6e:	4b 6b       	lddpc	r11,80000d44 <_yield+0xe>
	ld.w r12,r12[0x0]
80000c70:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
80000c72:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000c74:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000c76:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000c78:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000c7c:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
80000c7e:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
80000c80:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
80000c82:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80000c86:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000c88:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80000c8a:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000c8c:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
80000c8e:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
80000c90:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
80000c92:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000c94:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80000c96:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000c98:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000c9a:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000c9c:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000c9e:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000ca0:	1c 9f       	mov	pc,lr

80000ca2 <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
80000ca2:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000ca4:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80000ca6:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000ca8:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000cac:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80000cb0:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000cb4:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000cb8:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000cbc:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000cc0:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000cc4:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000cc8:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000ccc:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
80000cce:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80000cd0:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
80000cd2:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000cd4:	1c 9f       	mov	pc,lr

80000cd6 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
80000cd6:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000cd8:	49 bc       	lddpc	r12,80000d44 <_yield+0xe>
	ld.w r12,r12[0x0]
80000cda:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000cdc:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
80000cde:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
80000ce0:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
80000ce2:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
80000ce4:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
80000ce6:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
80000ce8:	33 40       	mov	r0,52
	add r0,r12
80000cea:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000cec:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80000cf0:	1a 90       	mov	r0,sp
	st.w --sp,r0
80000cf2:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80000cf4:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
80000cf8:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
80000cfa:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80000cfc:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
80000cfe:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
80000d00:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
80000d02:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80000d04:	1c 9f       	mov	pc,lr

80000d06 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000d06:	49 0c       	lddpc	r12,80000d44 <_yield+0xe>
	ld.w r12,r12[0x0]
80000d08:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
80000d0a:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000d0c:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
80000d0e:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
80000d12:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80000d14:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80000d16:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
80000d18:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80000d1a:	33 40       	mov	r0,52
	add r0,r12
80000d1c:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80000d1e:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80000d22:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000d24:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80000d26:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80000d28:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000d2a:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80000d2c:	d6 13       	rets

80000d2e <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
80000d2e:	d4 01       	pushm	lr
	lda.w lr,_yield
80000d30:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000d34:	d7 33       	scall

80000d36 <_yield>:
_yield:
	call contextSave
80000d36:	cd 0f       	rcall	80000cd6 <contextSave>
	call scheduler
80000d38:	f0 1f 00 04 	mcall	80000d48 <_yield+0x12>
	call contextRestore
80000d3c:	ce 5f       	rcall	80000d06 <contextRestore>
80000d3e:	00 00       	add	r0,r0
80000d40:	00 00       	add	r0,r0
80000d42:	06 20       	rsub	r0,r3
80000d44:	00 00       	add	r0,r0
80000d46:	06 58       	eor	r8,r3
80000d48:	80 00       	ld.sh	r0,r0[0x0]
80000d4a:	0d 4c       	ld.w	r12,--r6

80000d4c <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000d4c:	eb cd 40 80 	pushm	r7,lr
80000d50:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK == NULL) {
80000d52:	49 28       	lddpc	r8,80000d98 <scheduler+0x4c>
80000d54:	70 08       	ld.w	r8,r8[0x0]
80000d56:	58 08       	cp.w	r8,0
80000d58:	c1 61       	brne	80000d84 <scheduler+0x38>
		PA[EXECTASK->priority] = EXECTASK;
80000d5a:	49 18       	lddpc	r8,80000d9c <scheduler+0x50>
80000d5c:	70 08       	ld.w	r8,r8[0x0]
80000d5e:	f1 38 00 64 	ld.ub	r8,r8[100]
80000d62:	10 99       	mov	r9,r8
80000d64:	48 e8       	lddpc	r8,80000d9c <scheduler+0x50>
80000d66:	70 0a       	ld.w	r10,r8[0x0]
80000d68:	48 e8       	lddpc	r8,80000da0 <scheduler+0x54>
80000d6a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		if (EXECTASK->nexttcb != NULL)
80000d6e:	48 c8       	lddpc	r8,80000d9c <scheduler+0x50>
80000d70:	70 08       	ld.w	r8,r8[0x0]
80000d72:	70 08       	ld.w	r8,r8[0x0]
80000d74:	58 08       	cp.w	r8,0
80000d76:	c0 e0       	breq	80000d92 <scheduler+0x46>
		{
			EXECTASK = EXECTASK->nexttcb;
80000d78:	48 98       	lddpc	r8,80000d9c <scheduler+0x50>
80000d7a:	70 08       	ld.w	r8,r8[0x0]
80000d7c:	70 09       	ld.w	r9,r8[0x0]
80000d7e:	48 88       	lddpc	r8,80000d9c <scheduler+0x50>
80000d80:	91 09       	st.w	r8[0x0],r9
80000d82:	c0 88       	rjmp	80000d92 <scheduler+0x46>
		}
	}
	else {
		EXECTASK = PREEMPTASK;
80000d84:	48 58       	lddpc	r8,80000d98 <scheduler+0x4c>
80000d86:	70 09       	ld.w	r9,r8[0x0]
80000d88:	48 58       	lddpc	r8,80000d9c <scheduler+0x50>
80000d8a:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
80000d8c:	48 38       	lddpc	r8,80000d98 <scheduler+0x4c>
80000d8e:	30 09       	mov	r9,0
80000d90:	91 09       	st.w	r8[0x0],r9
	}
}
80000d92:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d96:	00 00       	add	r0,r0
80000d98:	00 00       	add	r0,r0
80000d9a:	06 54       	eor	r4,r3
80000d9c:	00 00       	add	r0,r0
80000d9e:	06 58       	eor	r8,r3
80000da0:	00 00       	add	r0,r0
80000da2:	06 24       	rsub	r4,r3

80000da4 <ROSA_startScheduler>:

void ROSA_startScheduler(void)
{
80000da4:	eb cd 40 80 	pushm	r7,lr
80000da8:	1a 97       	mov	r7,sp
80000daa:	20 1d       	sub	sp,4
	tcb * tmp = readyQueueSearch();	
80000dac:	f0 1f 00 08 	mcall	80000dcc <ROSA_startScheduler+0x28>
80000db0:	18 98       	mov	r8,r12
80000db2:	ef 48 ff fc 	st.w	r7[-4],r8
	
	TCBLIST = tmp->nexttcb;
80000db6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dba:	70 09       	ld.w	r9,r8[0x0]
80000dbc:	48 58       	lddpc	r8,80000dd0 <ROSA_startScheduler+0x2c>
80000dbe:	91 09       	st.w	r8[0x0],r9
	
	ROSA_start();
80000dc0:	f0 1f 00 05 	mcall	80000dd4 <ROSA_startScheduler+0x30>
}
80000dc4:	2f fd       	sub	sp,-4
80000dc6:	e3 cd 80 80 	ldm	sp++,r7,pc
80000dca:	00 00       	add	r0,r0
80000dcc:	80 00       	ld.sh	r0,r0[0x0]
80000dce:	09 7c       	ld.ub	r12,--r4
80000dd0:	00 00       	add	r0,r0
80000dd2:	06 20       	rsub	r0,r3
80000dd4:	80 00       	ld.sh	r0,r0[0x0]
80000dd6:	0c 6c       	and	r12,r6

80000dd8 <C.19.9634>:
80000dd8:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000de8 <insertDelayQueue>:
/* param pth: pointer to the task to be inserted in the delay queue		*/
/* param deadline: integer with the number of ticks at which the task	*/
/* needs to be woken up													*/
/************************************************************************/
int insertDelayQueue(ROSA_taskHandle_t ** pth, uint64_t deadline)
{
80000de8:	eb cd 40 80 	pushm	r7,lr
80000dec:	1a 97       	mov	r7,sp
80000dee:	20 5d       	sub	sp,20
80000df0:	ef 4c ff f4 	st.w	r7[-12],r12
80000df4:	ee eb ff ec 	st.d	r7[-20],r10
	(*pth)->delay = deadline;
80000df8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000dfc:	70 0a       	ld.w	r10,r8[0x0]
80000dfe:	ee e8 ff ec 	ld.d	r8,r7[-20]
80000e02:	f4 e9 00 68 	st.d	r10[104],r8
	
	if (DELAYQUEUE == NULL) {
80000e06:	4b 48       	lddpc	r8,80000ed4 <insertDelayQueue+0xec>
80000e08:	70 08       	ld.w	r8,r8[0x0]
80000e0a:	58 08       	cp.w	r8,0
80000e0c:	c0 c1       	brne	80000e24 <insertDelayQueue+0x3c>
		DELAYQUEUE = *pth;
80000e0e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e12:	70 09       	ld.w	r9,r8[0x0]
80000e14:	4b 08       	lddpc	r8,80000ed4 <insertDelayQueue+0xec>
80000e16:	91 09       	st.w	r8[0x0],r9
		DELAYQUEUE->nexttcb = NULL;
80000e18:	4a f8       	lddpc	r8,80000ed4 <insertDelayQueue+0xec>
80000e1a:	70 08       	ld.w	r8,r8[0x0]
80000e1c:	30 09       	mov	r9,0
80000e1e:	91 09       	st.w	r8[0x0],r9
		return 0;
80000e20:	30 08       	mov	r8,0
80000e22:	c5 48       	rjmp	80000eca <insertDelayQueue+0xe2>
	}
	
	ROSA_taskHandle_t * next = DELAYQUEUE;
80000e24:	4a c8       	lddpc	r8,80000ed4 <insertDelayQueue+0xec>
80000e26:	70 08       	ld.w	r8,r8[0x0]
80000e28:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_taskHandle_t * prev;

	// While the next task in the list has an earlier deadline or higher priority and an equal deadline, move down the list
	while (next->delay <= (*pth)->delay || (next->priority >= (*pth)->priority && next->delay == (*pth)->delay))
80000e2c:	c1 b8       	rjmp	80000e62 <insertDelayQueue+0x7a>
	{
		prev = next;
80000e2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e32:	ef 48 ff fc 	st.w	r7[-4],r8
		next = next->nexttcb;
80000e36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e3a:	70 08       	ld.w	r8,r8[0x0]
80000e3c:	ef 48 ff f8 	st.w	r7[-8],r8
		
		// Reach the end of the list
		if (next == NULL) {
80000e40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e44:	58 08       	cp.w	r8,0
80000e46:	c0 e1       	brne	80000e62 <insertDelayQueue+0x7a>
			prev->nexttcb = *pth;
80000e48:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e4c:	70 09       	ld.w	r9,r8[0x0]
80000e4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e52:	91 09       	st.w	r8[0x0],r9
			(*pth)->nexttcb = NULL;
80000e54:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e58:	70 08       	ld.w	r8,r8[0x0]
80000e5a:	30 09       	mov	r9,0
80000e5c:	91 09       	st.w	r8[0x0],r9
			return 0;
80000e5e:	30 08       	mov	r8,0
80000e60:	c3 58       	rjmp	80000eca <insertDelayQueue+0xe2>
	
	ROSA_taskHandle_t * next = DELAYQUEUE;
	ROSA_taskHandle_t * prev;

	// While the next task in the list has an earlier deadline or higher priority and an equal deadline, move down the list
	while (next->delay <= (*pth)->delay || (next->priority >= (*pth)->priority && next->delay == (*pth)->delay))
80000e62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e66:	f0 ea 00 68 	ld.d	r10,r8[104]
80000e6a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e6e:	70 08       	ld.w	r8,r8[0x0]
80000e70:	f0 e8 00 68 	ld.d	r8,r8[104]
80000e74:	10 3a       	cp.w	r10,r8
80000e76:	f2 0b 13 00 	cpc	r11,r9
80000e7a:	fe 98 ff da 	brls	80000e2e <insertDelayQueue+0x46>
80000e7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e82:	f1 39 00 64 	ld.ub	r9,r8[100]
80000e86:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e8a:	70 08       	ld.w	r8,r8[0x0]
80000e8c:	f1 38 00 64 	ld.ub	r8,r8[100]
80000e90:	f0 09 18 00 	cp.b	r9,r8
80000e94:	c0 e3       	brcs	80000eb0 <insertDelayQueue+0xc8>
80000e96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e9a:	f0 ea 00 68 	ld.d	r10,r8[104]
80000e9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ea2:	70 08       	ld.w	r8,r8[0x0]
80000ea4:	f0 e8 00 68 	ld.d	r8,r8[104]
80000ea8:	10 3a       	cp.w	r10,r8
80000eaa:	f2 0b 13 00 	cpc	r11,r9
80000eae:	cc 00       	breq	80000e2e <insertDelayQueue+0x46>
			(*pth)->nexttcb = NULL;
			return 0;
		}
	}
	
	(*pth)->nexttcb = next;
80000eb0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000eb4:	70 08       	ld.w	r8,r8[0x0]
80000eb6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000eba:	91 09       	st.w	r8[0x0],r9
	prev->nexttcb = *pth;
80000ebc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ec0:	70 09       	ld.w	r9,r8[0x0]
80000ec2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ec6:	91 09       	st.w	r8[0x0],r9
	return 0;
80000ec8:	30 08       	mov	r8,0
}
80000eca:	10 9c       	mov	r12,r8
80000ecc:	2f bd       	sub	sp,-20
80000ece:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ed2:	00 00       	add	r0,r0
80000ed4:	00 00       	add	r0,r0
80000ed6:	06 d0       	st.w	--r3,r0

80000ed8 <removeDelayQueue>:
/*																		*/
/* Removes the given task from the delay queue							*/
/* Param pth: pointer to the task to be removed from the delay queue	*/
/************************************************************************/
int removeDelayQueue(ROSA_taskHandle_t ** pth)
{
80000ed8:	eb cd 40 80 	pushm	r7,lr
80000edc:	1a 97       	mov	r7,sp
80000ede:	20 3d       	sub	sp,12
80000ee0:	ef 4c ff f4 	st.w	r7[-12],r12
	// If there are no tasks in the delay queue, return error code -1
	if (DELAYQUEUE == NULL)
80000ee4:	4a 48       	lddpc	r8,80000f74 <removeDelayQueue+0x9c>
80000ee6:	70 08       	ld.w	r8,r8[0x0]
80000ee8:	58 08       	cp.w	r8,0
80000eea:	c0 31       	brne	80000ef0 <removeDelayQueue+0x18>
	{
		return -1;
80000eec:	3f f8       	mov	r8,-1
80000eee:	c3 f8       	rjmp	80000f6c <removeDelayQueue+0x94>
	}
	// If there is only one task in the status queue and this is pth, remove it from the queue
	if (DELAYQUEUE->id == (*pth)->id)
80000ef0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ef4:	70 09       	ld.w	r9,r8[0x0]
80000ef6:	4a 08       	lddpc	r8,80000f74 <removeDelayQueue+0x9c>
80000ef8:	70 08       	ld.w	r8,r8[0x0]
80000efa:	10 39       	cp.w	r9,r8
80000efc:	c1 21       	brne	80000f20 <removeDelayQueue+0x48>
	{
		if (DELAYQUEUE->nexttcb == NULL)
80000efe:	49 e8       	lddpc	r8,80000f74 <removeDelayQueue+0x9c>
80000f00:	70 08       	ld.w	r8,r8[0x0]
80000f02:	70 08       	ld.w	r8,r8[0x0]
80000f04:	58 08       	cp.w	r8,0
80000f06:	c0 51       	brne	80000f10 <removeDelayQueue+0x38>
		{
			DELAYQUEUE = NULL; // Task was the only one in the list
80000f08:	49 b8       	lddpc	r8,80000f74 <removeDelayQueue+0x9c>
80000f0a:	30 09       	mov	r9,0
80000f0c:	91 09       	st.w	r8[0x0],r9
80000f0e:	c0 78       	rjmp	80000f1c <removeDelayQueue+0x44>
			} else {
			DELAYQUEUE = (*pth)->nexttcb;
80000f10:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f14:	70 08       	ld.w	r8,r8[0x0]
80000f16:	70 09       	ld.w	r9,r8[0x0]
80000f18:	49 78       	lddpc	r8,80000f74 <removeDelayQueue+0x9c>
80000f1a:	91 09       	st.w	r8[0x0],r9
		}
		return 0;
80000f1c:	30 08       	mov	r8,0
80000f1e:	c2 78       	rjmp	80000f6c <removeDelayQueue+0x94>
	}
	// Else, find the task before pth and point it to the task after pth, removing it
	ROSA_taskHandle_t * next = DELAYQUEUE;
80000f20:	49 58       	lddpc	r8,80000f74 <removeDelayQueue+0x9c>
80000f22:	70 08       	ld.w	r8,r8[0x0]
80000f24:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_taskHandle_t * prev;
	while (next->id != (*pth)->id)
80000f28:	c1 08       	rjmp	80000f48 <removeDelayQueue+0x70>
	{
		prev = next;
80000f2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f2e:	ef 48 ff fc 	st.w	r7[-4],r8
		next = next->nexttcb;
80000f32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f36:	70 08       	ld.w	r8,r8[0x0]
80000f38:	ef 48 ff f8 	st.w	r7[-8],r8
		if(next == NULL)
80000f3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f40:	58 08       	cp.w	r8,0
80000f42:	c0 31       	brne	80000f48 <removeDelayQueue+0x70>
		{
			return -1; //Task is not in the list, so return error code -1
80000f44:	3f f8       	mov	r8,-1
80000f46:	c1 38       	rjmp	80000f6c <removeDelayQueue+0x94>
		return 0;
	}
	// Else, find the task before pth and point it to the task after pth, removing it
	ROSA_taskHandle_t * next = DELAYQUEUE;
	ROSA_taskHandle_t * prev;
	while (next->id != (*pth)->id)
80000f48:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f4c:	70 09       	ld.w	r9,r8[0x0]
80000f4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f52:	10 39       	cp.w	r9,r8
80000f54:	ce b1       	brne	80000f2a <removeDelayQueue+0x52>
		if(next == NULL)
		{
			return -1; //Task is not in the list, so return error code -1
		}
	}
	prev->nexttcb = next->nexttcb;
80000f56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f5a:	70 09       	ld.w	r9,r8[0x0]
80000f5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f60:	91 09       	st.w	r8[0x0],r9
	next->nexttcb = NULL;
80000f62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f66:	30 09       	mov	r9,0
80000f68:	91 09       	st.w	r8[0x0],r9
	return 0;
80000f6a:	30 08       	mov	r8,0
}
80000f6c:	10 9c       	mov	r12,r8
80000f6e:	2f dd       	sub	sp,-12
80000f70:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f74:	00 00       	add	r0,r0
80000f76:	06 d0       	st.w	--r3,r0

80000f78 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000f78:	eb cd 40 80 	pushm	r7,lr
80000f7c:	1a 97       	mov	r7,sp
80000f7e:	20 5d       	sub	sp,20
	interruptDisable();
80000f80:	f0 1f 00 35 	mcall	80001054 <timerISR+0xdc>
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000f84:	fe 78 38 00 	mov	r8,-51200
80000f88:	ef 48 ff f4 	st.w	r7[-12],r8
	ROSA_taskHandle_t * tmptsk;
	ROSA_taskHandle_t * tmp;
	bool interruptTask;
	
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000f8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f90:	70 88       	ld.w	r8,r8[0x20]
80000f92:	ef 48 ff f0 	st.w	r7[-16],r8
	if (sr & AVR32_TC_CPCS_MASK)
80000f96:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f9a:	e2 18 00 10 	andl	r8,0x10,COH
80000f9e:	c5 50       	breq	80001048 <timerISR+0xd0>
	{
		systemTick++;
80000fa0:	4a e8       	lddpc	r8,80001058 <timerISR+0xe0>
80000fa2:	f0 ea 00 00 	ld.d	r10,r8[0]
80000fa6:	30 18       	mov	r8,1
80000fa8:	30 09       	mov	r9,0
80000faa:	f4 08 00 08 	add	r8,r10,r8
80000fae:	f6 09 00 49 	adc	r9,r11,r9
80000fb2:	4a aa       	lddpc	r10,80001058 <timerISR+0xe0>
80000fb4:	f4 e9 00 00 	st.d	r10[0],r8
		interruptTask = false;
80000fb8:	30 08       	mov	r8,0
80000fba:	ef 68 ff ff 	st.b	r7[-1],r8
		
		while (DELAYQUEUE != NULL && DELAYQUEUE->delay <= systemTick)
80000fbe:	c1 68       	rjmp	80000fea <timerISR+0x72>
		{
			tmptsk = DELAYQUEUE;
80000fc0:	4a 78       	lddpc	r8,8000105c <timerISR+0xe4>
80000fc2:	70 08       	ld.w	r8,r8[0x0]
80000fc4:	ef 48 ff ec 	st.w	r7[-20],r8
			removeDelayQueue(&DELAYQUEUE);
80000fc8:	4a 5c       	lddpc	r12,8000105c <timerISR+0xe4>
80000fca:	f0 1f 00 26 	mcall	80001060 <timerISR+0xe8>
			tmptsk->delay = 0;
80000fce:	ee fa ff ec 	ld.w	r10,r7[-20]
80000fd2:	30 08       	mov	r8,0
80000fd4:	30 09       	mov	r9,0
80000fd6:	f4 e9 00 68 	st.d	r10[104],r8
			readyQueueInsert(&tmptsk);
80000fda:	ee c8 00 14 	sub	r8,r7,20
80000fde:	10 9c       	mov	r12,r8
80000fe0:	f0 1f 00 21 	mcall	80001064 <timerISR+0xec>
			interruptTask = true;
80000fe4:	30 18       	mov	r8,1
80000fe6:	ef 68 ff ff 	st.b	r7[-1],r8
	if (sr & AVR32_TC_CPCS_MASK)
	{
		systemTick++;
		interruptTask = false;
		
		while (DELAYQUEUE != NULL && DELAYQUEUE->delay <= systemTick)
80000fea:	49 d8       	lddpc	r8,8000105c <timerISR+0xe4>
80000fec:	70 08       	ld.w	r8,r8[0x0]
80000fee:	58 08       	cp.w	r8,0
80000ff0:	c0 d0       	breq	8000100a <timerISR+0x92>
80000ff2:	49 b8       	lddpc	r8,8000105c <timerISR+0xe4>
80000ff4:	70 08       	ld.w	r8,r8[0x0]
80000ff6:	f0 ea 00 68 	ld.d	r10,r8[104]
80000ffa:	49 88       	lddpc	r8,80001058 <timerISR+0xe0>
80000ffc:	f0 e8 00 00 	ld.d	r8,r8[0]
80001000:	10 3a       	cp.w	r10,r8
80001002:	f2 0b 13 00 	cpc	r11,r9
80001006:	fe 98 ff dd 	brls	80000fc0 <timerISR+0x48>
			removeDelayQueue(&DELAYQUEUE);
			tmptsk->delay = 0;
			readyQueueInsert(&tmptsk);
			interruptTask = true;
		}
		if (interruptTask)
8000100a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000100e:	30 08       	mov	r8,0
80001010:	f0 09 18 00 	cp.b	r9,r8
80001014:	c1 a0       	breq	80001048 <timerISR+0xd0>
		{
			tmp = readyQueueSearch();
80001016:	f0 1f 00 15 	mcall	80001068 <timerISR+0xf0>
8000101a:	18 98       	mov	r8,r12
8000101c:	ef 48 ff f8 	st.w	r7[-8],r8
			if (EXECTASK->priority < tmptsk->priority)
80001020:	49 38       	lddpc	r8,8000106c <timerISR+0xf4>
80001022:	70 08       	ld.w	r8,r8[0x0]
80001024:	f1 39 00 64 	ld.ub	r9,r8[100]
80001028:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000102c:	f1 38 00 64 	ld.ub	r8,r8[100]
80001030:	f0 09 18 00 	cp.b	r9,r8
80001034:	c0 a2       	brcc	80001048 <timerISR+0xd0>
			{
				PREEMPTASK = tmp->nexttcb;
80001036:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000103a:	70 09       	ld.w	r9,r8[0x0]
8000103c:	48 d8       	lddpc	r8,80001070 <timerISR+0xf8>
8000103e:	91 09       	st.w	r8[0x0],r9
				interruptEnable();
80001040:	f0 1f 00 0d 	mcall	80001074 <timerISR+0xfc>
				ROSA_yieldFromISR();
80001044:	f0 1f 00 0d 	mcall	80001078 <timerISR+0x100>
			}
		}
	}
	//timerClearInterrupt(); //Disabled until we know what it actually does
	interruptEnable();
80001048:	f0 1f 00 0b 	mcall	80001074 <timerISR+0xfc>
}
8000104c:	2f bd       	sub	sp,-20
8000104e:	e3 cd 40 80 	ldm	sp++,r7,lr
80001052:	d6 03       	rete
80001054:	80 00       	ld.sh	r0,r0[0x0]
80001056:	23 66       	sub	r6,54
80001058:	00 00       	add	r0,r0
8000105a:	06 d4       	st.w	--r3,r4
8000105c:	00 00       	add	r0,r0
8000105e:	06 d0       	st.w	--r3,r0
80001060:	80 00       	ld.sh	r0,r0[0x0]
80001062:	0e d8       	st.w	--r7,r8
80001064:	80 00       	ld.sh	r0,r0[0x0]
80001066:	08 28       	rsub	r8,r4
80001068:	80 00       	ld.sh	r0,r0[0x0]
8000106a:	09 7c       	ld.ub	r12,--r4
8000106c:	00 00       	add	r0,r0
8000106e:	06 58       	eor	r8,r3
80001070:	00 00       	add	r0,r0
80001072:	06 54       	eor	r4,r3
80001074:	80 00       	ld.sh	r0,r0[0x0]
80001076:	23 6a       	sub	r10,54
80001078:	80 00       	ld.sh	r0,r0[0x0]
8000107a:	07 94       	ld.ub	r4,r3[0x1]

8000107c <ROSA_getTickCount>:
/*																		*/
/* Returns the current number of system ticks, relative to start		*/
/* of the system.                                                       */
/************************************************************************/
uint64_t ROSA_getTickCount()
{
8000107c:	eb cd 40 80 	pushm	r7,lr
80001080:	1a 97       	mov	r7,sp
	return systemTick;
80001082:	48 48       	lddpc	r8,80001090 <ROSA_getTickCount+0x14>
80001084:	f0 e8 00 00 	ld.d	r8,r8[0]
}
80001088:	10 9a       	mov	r10,r8
8000108a:	12 9b       	mov	r11,r9
8000108c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001090:	00 00       	add	r0,r0
80001092:	06 d4       	st.w	--r3,r4

80001094 <ROSA_delay>:
/* ROSA_delay()															*/
/*																		*/
/* Suspends the calling task for the given number of ticks				*/
/************************************************************************/
int16_t ROSA_delay(uint64_t ticks)
{
80001094:	eb cd 40 80 	pushm	r7,lr
80001098:	1a 97       	mov	r7,sp
8000109a:	20 3d       	sub	sp,12
8000109c:	ee eb ff f4 	st.d	r7[-12],r10
	readyQueueExtract(&EXECTASK);
800010a0:	49 0c       	lddpc	r12,800010e0 <ROSA_delay+0x4c>
800010a2:	f0 1f 00 11 	mcall	800010e4 <ROSA_delay+0x50>
	insertDelayQueue(&EXECTASK, ROSA_getTickCount() + ticks);
800010a6:	f0 1f 00 11 	mcall	800010e8 <ROSA_delay+0x54>
800010aa:	ee e8 ff f4 	ld.d	r8,r7[-12]
800010ae:	f4 08 00 08 	add	r8,r10,r8
800010b2:	f6 09 00 49 	adc	r9,r11,r9
800010b6:	10 9a       	mov	r10,r8
800010b8:	12 9b       	mov	r11,r9
800010ba:	48 ac       	lddpc	r12,800010e0 <ROSA_delay+0x4c>
800010bc:	f0 1f 00 0c 	mcall	800010ec <ROSA_delay+0x58>
	tcb * tmp = readyQueueSearch();
800010c0:	f0 1f 00 0c 	mcall	800010f0 <ROSA_delay+0x5c>
800010c4:	18 98       	mov	r8,r12
800010c6:	ef 48 ff fc 	st.w	r7[-4],r8
	if (tmp->priority >= 0)
	{
		PREEMPTASK = tmp;
800010ca:	48 b8       	lddpc	r8,800010f4 <ROSA_delay+0x60>
800010cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800010d0:	91 09       	st.w	r8[0x0],r9
	} else {
		return -1;
	}
	ROSA_yield();
800010d2:	f0 1f 00 0a 	mcall	800010f8 <ROSA_delay+0x64>
	return 0;
800010d6:	30 08       	mov	r8,0
}
800010d8:	10 9c       	mov	r12,r8
800010da:	2f dd       	sub	sp,-12
800010dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800010e0:	00 00       	add	r0,r0
800010e2:	06 58       	eor	r8,r3
800010e4:	80 00       	ld.sh	r0,r0[0x0]
800010e6:	08 c8       	st.b	r4++,r8
800010e8:	80 00       	ld.sh	r0,r0[0x0]
800010ea:	10 7c       	tst	r12,r8
800010ec:	80 00       	ld.sh	r0,r0[0x0]
800010ee:	0d e8       	ld.ub	r8,r6[0x6]
800010f0:	80 00       	ld.sh	r0,r0[0x0]
800010f2:	09 7c       	ld.ub	r12,--r4
800010f4:	00 00       	add	r0,r0
800010f6:	06 54       	eor	r4,r3
800010f8:	80 00       	ld.sh	r0,r0[0x0]
800010fa:	0d 2e       	ld.uh	lr,r6++

800010fc <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
800010fc:	eb cd 40 80 	pushm	r7,lr
80001100:	1a 97       	mov	r7,sp
80001102:	20 7d       	sub	sp,28
80001104:	ef 4c ff e4 	st.w	r7[-28],r12
	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80001108:	4a 48       	lddpc	r8,80001198 <timerPeriodSet+0x9c>
8000110a:	ee ca 00 18 	sub	r10,r7,24
8000110e:	10 9b       	mov	r11,r8
80001110:	f6 e8 00 00 	ld.d	r8,r11[0]
80001114:	f4 e9 00 00 	st.d	r10[0],r8
80001118:	f6 e8 00 08 	ld.d	r8,r11[8]
8000111c:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80001120:	30 48       	mov	r8,4
80001122:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80001126:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000112a:	20 18       	sub	r8,1
8000112c:	a3 68       	lsl	r8,0x2
8000112e:	ee 08 00 08 	add	r8,r7,r8
80001132:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80001136:	e0 68 1b 00 	mov	r8,6912
8000113a:	ea 18 00 b7 	orh	r8,0xb7
8000113e:	f0 09 0c 08 	divs	r8,r8,r9
80001142:	10 99       	mov	r9,r8
80001144:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001148:	b1 39       	mul	r9,r8
8000114a:	e0 68 4d d3 	mov	r8,19923
8000114e:	ea 18 10 62 	orh	r8,0x1062
80001152:	f2 08 06 48 	mulu.d	r8,r9,r8
80001156:	f2 08 16 06 	lsr	r8,r9,0x6
8000115a:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
8000115e:	ee fc ff fc 	ld.w	r12,r7[-4]
80001162:	f0 1f 00 0f 	mcall	8000119c <timerPeriodSet+0xa0>
	timerRCSet(rc);
80001166:	ee fc ff f8 	ld.w	r12,r7[-8]
8000116a:	f0 1f 00 0e 	mcall	800011a0 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
8000116e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001172:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001176:	f2 08 02 4a 	mul	r10,r9,r8
8000117a:	e0 68 9f 81 	mov	r8,40833
8000117e:	ea 18 16 5e 	orh	r8,0x165e
80001182:	f4 08 04 48 	muls.d	r8,r10,r8
80001186:	b5 49       	asr	r9,0x14
80001188:	f4 08 14 1f 	asr	r8,r10,0x1f
8000118c:	f2 08 01 08 	sub	r8,r9,r8
}
80001190:	10 9c       	mov	r12,r8
80001192:	2f 9d       	sub	sp,-28
80001194:	e3 cd 80 80 	ldm	sp++,r7,pc
80001198:	80 00       	ld.sh	r0,r0[0x0]
8000119a:	0d d8       	ld.ub	r8,r6[0x5]
8000119c:	80 00       	ld.sh	r0,r0[0x0]
8000119e:	18 10       	sub	r0,r12
800011a0:	80 00       	ld.sh	r0,r0[0x0]
800011a2:	17 fa       	ld.ub	r10,r11[0x7]

800011a4 <buttonInit>:
800011a4:	eb cd 40 80 	pushm	r7,lr
800011a8:	1a 97       	mov	r7,sp
800011aa:	30 1b       	mov	r11,1
800011ac:	35 8c       	mov	r12,88
800011ae:	f0 1f 00 07 	mcall	800011c8 <buttonInit+0x24>
800011b2:	30 1b       	mov	r11,1
800011b4:	35 5c       	mov	r12,85
800011b6:	f0 1f 00 05 	mcall	800011c8 <buttonInit+0x24>
800011ba:	30 1b       	mov	r11,1
800011bc:	35 2c       	mov	r12,82
800011be:	f0 1f 00 03 	mcall	800011c8 <buttonInit+0x24>
800011c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800011c6:	00 00       	add	r0,r0
800011c8:	80 00       	ld.sh	r0,r0[0x0]
800011ca:	12 04       	add	r4,r9

800011cc <joystickInit>:
800011cc:	eb cd 40 80 	pushm	r7,lr
800011d0:	1a 97       	mov	r7,sp
800011d2:	30 1b       	mov	r11,1
800011d4:	31 bc       	mov	r12,27
800011d6:	f0 1f 00 0b 	mcall	80001200 <joystickInit+0x34>
800011da:	30 1b       	mov	r11,1
800011dc:	31 9c       	mov	r12,25
800011de:	f0 1f 00 09 	mcall	80001200 <joystickInit+0x34>
800011e2:	30 1b       	mov	r11,1
800011e4:	31 cc       	mov	r12,28
800011e6:	f0 1f 00 07 	mcall	80001200 <joystickInit+0x34>
800011ea:	30 1b       	mov	r11,1
800011ec:	31 4c       	mov	r12,20
800011ee:	f0 1f 00 05 	mcall	80001200 <joystickInit+0x34>
800011f2:	30 1b       	mov	r11,1
800011f4:	31 ac       	mov	r12,26
800011f6:	f0 1f 00 03 	mcall	80001200 <joystickInit+0x34>
800011fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800011fe:	00 00       	add	r0,r0
80001200:	80 00       	ld.sh	r0,r0[0x0]
80001202:	12 04       	add	r4,r9

80001204 <gpioInit>:
80001204:	eb cd 40 80 	pushm	r7,lr
80001208:	1a 97       	mov	r7,sp
8000120a:	20 7d       	sub	sp,28
8000120c:	ef 4c ff ec 	st.w	r7[-20],r12
80001210:	ef 4b ff e8 	st.w	r7[-24],r11
80001214:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001218:	a5 58       	asr	r8,0x5
8000121a:	ef 48 ff f4 	st.w	r7[-12],r8
8000121e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001222:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001226:	ef 48 ff fc 	st.w	r7[-4],r8
8000122a:	30 19       	mov	r9,1
8000122c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001230:	f2 08 09 48 	lsl	r8,r9,r8
80001234:	ef 48 ff f8 	st.w	r7[-8],r8
80001238:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000123c:	a9 68       	lsl	r8,0x8
8000123e:	e0 28 f0 00 	sub	r8,61440
80001242:	ef 48 ff f0 	st.w	r7[-16],r8
80001246:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000124a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000124e:	91 19       	st.w	r8[0x4],r9
80001250:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001254:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001258:	91 69       	st.w	r8[0x18],r9
8000125a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000125e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001262:	91 a9       	st.w	r8[0x28],r9
80001264:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001268:	ef 48 ff e4 	st.w	r7[-28],r8
8000126c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001270:	58 08       	cp.w	r8,0
80001272:	c0 60       	breq	8000127e <gpioInit+0x7a>
80001274:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001278:	58 18       	cp.w	r8,1
8000127a:	c0 90       	breq	8000128c <gpioInit+0x88>
8000127c:	c0 f8       	rjmp	8000129a <gpioInit+0x96>
8000127e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001282:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001286:	f1 49 00 44 	st.w	r8[68],r9
8000128a:	c0 e8       	rjmp	800012a6 <gpioInit+0xa2>
8000128c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001290:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001294:	f1 49 00 48 	st.w	r8[72],r9
80001298:	c0 78       	rjmp	800012a6 <gpioInit+0xa2>
8000129a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000129e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800012a2:	f1 49 00 48 	st.w	r8[72],r9
800012a6:	2f 9d       	sub	sp,-28
800012a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800012ac <gpioClear>:
800012ac:	eb cd 40 80 	pushm	r7,lr
800012b0:	1a 97       	mov	r7,sp
800012b2:	20 5d       	sub	sp,20
800012b4:	ef 4c ff ec 	st.w	r7[-20],r12
800012b8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800012bc:	a5 58       	asr	r8,0x5
800012be:	ef 48 ff f4 	st.w	r7[-12],r8
800012c2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800012c6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800012ca:	ef 48 ff fc 	st.w	r7[-4],r8
800012ce:	30 19       	mov	r9,1
800012d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012d4:	f2 08 09 48 	lsl	r8,r9,r8
800012d8:	ef 48 ff f8 	st.w	r7[-8],r8
800012dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800012e0:	a9 68       	lsl	r8,0x8
800012e2:	e0 28 f0 00 	sub	r8,61440
800012e6:	ef 48 ff f0 	st.w	r7[-16],r8
800012ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
800012ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800012f2:	f1 49 00 58 	st.w	r8[88],r9
800012f6:	2f bd       	sub	sp,-20
800012f8:	e3 cd 80 80 	ldm	sp++,r7,pc

800012fc <gpioSet>:
800012fc:	eb cd 40 80 	pushm	r7,lr
80001300:	1a 97       	mov	r7,sp
80001302:	20 5d       	sub	sp,20
80001304:	ef 4c ff ec 	st.w	r7[-20],r12
80001308:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000130c:	a5 58       	asr	r8,0x5
8000130e:	ef 48 ff f4 	st.w	r7[-12],r8
80001312:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001316:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000131a:	ef 48 ff fc 	st.w	r7[-4],r8
8000131e:	30 19       	mov	r9,1
80001320:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001324:	f2 08 09 48 	lsl	r8,r9,r8
80001328:	ef 48 ff f8 	st.w	r7[-8],r8
8000132c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001330:	a9 68       	lsl	r8,0x8
80001332:	e0 28 f0 00 	sub	r8,61440
80001336:	ef 48 ff f0 	st.w	r7[-16],r8
8000133a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000133e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001342:	f1 49 00 54 	st.w	r8[84],r9
80001346:	2f bd       	sub	sp,-20
80001348:	e3 cd 80 80 	ldm	sp++,r7,pc

8000134c <ledInit>:
8000134c:	eb cd 40 80 	pushm	r7,lr
80001350:	1a 97       	mov	r7,sp
80001352:	20 9d       	sub	sp,36
80001354:	49 e8       	lddpc	r8,800013cc <ledInit+0x80>
80001356:	ee cb 00 24 	sub	r11,r7,36
8000135a:	10 9a       	mov	r10,r8
8000135c:	f4 e8 00 00 	ld.d	r8,r10[0]
80001360:	f6 e9 00 00 	st.d	r11[0],r8
80001364:	f4 e8 00 08 	ld.d	r8,r10[8]
80001368:	f6 e9 00 08 	st.d	r11[8],r8
8000136c:	f4 e8 00 10 	ld.d	r8,r10[16]
80001370:	f6 e9 00 10 	st.d	r11[16],r8
80001374:	f4 e8 00 18 	ld.d	r8,r10[24]
80001378:	f6 e9 00 18 	st.d	r11[24],r8
8000137c:	30 08       	mov	r8,0
8000137e:	ef 48 ff fc 	st.w	r7[-4],r8
80001382:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001386:	a3 68       	lsl	r8,0x2
80001388:	ee 08 00 08 	add	r8,r7,r8
8000138c:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80001390:	10 9c       	mov	r12,r8
80001392:	f0 1f 00 10 	mcall	800013d0 <ledInit+0x84>
80001396:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000139a:	a3 68       	lsl	r8,0x2
8000139c:	ee 08 00 08 	add	r8,r7,r8
800013a0:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800013a4:	30 0b       	mov	r11,0
800013a6:	10 9c       	mov	r12,r8
800013a8:	f0 1f 00 0b 	mcall	800013d4 <ledInit+0x88>
800013ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013b0:	58 78       	cp.w	r8,7
800013b2:	5f 18       	srne	r8
800013b4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800013b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013bc:	2f f8       	sub	r8,-1
800013be:	ef 48 ff fc 	st.w	r7[-4],r8
800013c2:	58 09       	cp.w	r9,0
800013c4:	cd f1       	brne	80001382 <ledInit+0x36>
800013c6:	2f 7d       	sub	sp,-36
800013c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800013cc:	80 00       	ld.sh	r0,r0[0x0]
800013ce:	26 00       	sub	r0,96
800013d0:	80 00       	ld.sh	r0,r0[0x0]
800013d2:	13 f8       	ld.ub	r8,r9[0x7]
800013d4:	80 00       	ld.sh	r0,r0[0x0]
800013d6:	12 04       	add	r4,r9

800013d8 <ledOn>:
800013d8:	eb cd 40 80 	pushm	r7,lr
800013dc:	1a 97       	mov	r7,sp
800013de:	20 1d       	sub	sp,4
800013e0:	ef 4c ff fc 	st.w	r7[-4],r12
800013e4:	ee fc ff fc 	ld.w	r12,r7[-4]
800013e8:	f0 1f 00 03 	mcall	800013f4 <ledOn+0x1c>
800013ec:	2f fd       	sub	sp,-4
800013ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800013f2:	00 00       	add	r0,r0
800013f4:	80 00       	ld.sh	r0,r0[0x0]
800013f6:	12 ac       	st.w	r9++,r12

800013f8 <ledOff>:
800013f8:	eb cd 40 80 	pushm	r7,lr
800013fc:	1a 97       	mov	r7,sp
800013fe:	20 1d       	sub	sp,4
80001400:	ef 4c ff fc 	st.w	r7[-4],r12
80001404:	ee fc ff fc 	ld.w	r12,r7[-4]
80001408:	f0 1f 00 03 	mcall	80001414 <ledOff+0x1c>
8000140c:	2f fd       	sub	sp,-4
8000140e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001412:	00 00       	add	r0,r0
80001414:	80 00       	ld.sh	r0,r0[0x0]
80001416:	12 fc       	st.b	--r9,r12

80001418 <potInit>:
80001418:	d3 01       	pushm	r11-r12
8000141a:	e0 6c 10 00 	mov	r12,4096
8000141e:	ea 1c ff ff 	orh	r12,0xffff
80001422:	31 6b       	mov	r11,22
80001424:	99 2b       	st.w	r12[0x8],r11
80001426:	99 6b       	st.w	r12[0x18],r11
80001428:	99 6b       	st.w	r12[0x18],r11
8000142a:	e0 6c 3c 00 	mov	r12,15360
8000142e:	ea 1c ff ff 	orh	r12,0xffff
80001432:	30 1b       	mov	r11,1
80001434:	99 0b       	st.w	r12[0x0],r11
80001436:	e0 6b 0f 1f 	mov	r11,3871
8000143a:	b1 6b       	lsl	r11,0x10
8000143c:	99 1b       	st.w	r12[0x4],r11
8000143e:	30 2b       	mov	r11,2
80001440:	99 4b       	st.w	r12[0x10],r11
80001442:	d3 02       	popm	r11-r12
80001444:	1c 9f       	mov	pc,lr

80001446 <potGetValue>:
80001446:	d1 81       	pushm	r10-r11
80001448:	e0 6c 3c 00 	mov	r12,15360
8000144c:	ea 1c ff ff 	orh	r12,0xffff
80001450:	30 2b       	mov	r11,2
80001452:	99 0b       	st.w	r12[0x0],r11

80001454 <a1>:
80001454:	78 7a       	ld.w	r10,r12[0x1c]
80001456:	16 7a       	tst	r10,r11
80001458:	cf e0       	breq	80001454 <a1>
8000145a:	78 dc       	ld.w	r12,r12[0x34]
8000145c:	d1 82       	popm	r10-r11
8000145e:	1c 9f       	mov	pc,lr

80001460 <usartReset>:
80001460:	eb cd 40 80 	pushm	r7,lr
80001464:	1a 97       	mov	r7,sp
80001466:	20 3d       	sub	sp,12
80001468:	ef 4c ff f8 	st.w	r7[-8],r12
8000146c:	f0 1f 00 16 	mcall	800014c4 <usartReset+0x64>
80001470:	18 98       	mov	r8,r12
80001472:	ef 48 ff fc 	st.w	r7[-4],r8
80001476:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000147a:	58 08       	cp.w	r8,0
8000147c:	c0 30       	breq	80001482 <usartReset+0x22>
8000147e:	f0 1f 00 13 	mcall	800014c8 <usartReset+0x68>
80001482:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001486:	3f f8       	mov	r8,-1
80001488:	93 38       	st.w	r9[0xc],r8
8000148a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000148e:	70 58       	ld.w	r8,r8[0x14]
80001490:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001494:	58 08       	cp.w	r8,0
80001496:	c0 30       	breq	8000149c <usartReset+0x3c>
80001498:	f0 1f 00 0d 	mcall	800014cc <usartReset+0x6c>
8000149c:	ee f9 ff f8 	ld.w	r9,r7[-8]
800014a0:	30 08       	mov	r8,0
800014a2:	93 18       	st.w	r9[0x4],r8
800014a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800014a8:	30 08       	mov	r8,0
800014aa:	93 98       	st.w	r9[0x24],r8
800014ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
800014b0:	30 08       	mov	r8,0
800014b2:	93 a8       	st.w	r9[0x28],r8
800014b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800014b8:	ea 68 61 0c 	mov	r8,680204
800014bc:	93 08       	st.w	r9[0x0],r8
800014be:	2f dd       	sub	sp,-12
800014c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800014c4:	80 00       	ld.sh	r0,r0[0x0]
800014c6:	23 6e       	sub	lr,54
800014c8:	80 00       	ld.sh	r0,r0[0x0]
800014ca:	23 66       	sub	r6,54
800014cc:	80 00       	ld.sh	r0,r0[0x0]
800014ce:	23 6a       	sub	r10,54

800014d0 <usartSetBaudrate>:
800014d0:	eb cd 40 80 	pushm	r7,lr
800014d4:	1a 97       	mov	r7,sp
800014d6:	20 bd       	sub	sp,44
800014d8:	ef 4c ff ec 	st.w	r7[-20],r12
800014dc:	ef 4b ff e8 	st.w	r7[-24],r11
800014e0:	ef 4a ff e4 	st.w	r7[-28],r10
800014e4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800014e8:	f0 09 15 04 	lsl	r9,r8,0x4
800014ec:	ee f8 ff e4 	ld.w	r8,r7[-28]
800014f0:	10 39       	cp.w	r9,r8
800014f2:	e0 8b 00 06 	brhi	800014fe <usartSetBaudrate+0x2e>
800014f6:	31 09       	mov	r9,16
800014f8:	ef 49 ff d4 	st.w	r7[-44],r9
800014fc:	c0 48       	rjmp	80001504 <usartSetBaudrate+0x34>
800014fe:	30 88       	mov	r8,8
80001500:	ef 48 ff d4 	st.w	r7[-44],r8
80001504:	ee f9 ff d4 	ld.w	r9,r7[-44]
80001508:	ef 49 ff f0 	st.w	r7[-16],r9
8000150c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001510:	f0 0a 15 03 	lsl	r10,r8,0x3
80001514:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001518:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000151c:	f2 08 02 48 	mul	r8,r9,r8
80001520:	a1 98       	lsr	r8,0x1
80001522:	10 0a       	add	r10,r8
80001524:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001528:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000152c:	f2 08 02 48 	mul	r8,r9,r8
80001530:	f4 08 0d 08 	divu	r8,r10,r8
80001534:	ef 48 ff f4 	st.w	r7[-12],r8
80001538:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000153c:	a3 98       	lsr	r8,0x3
8000153e:	ef 48 ff f8 	st.w	r7[-8],r8
80001542:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001546:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000154a:	ef 48 ff fc 	st.w	r7[-4],r8
8000154e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001552:	58 08       	cp.w	r8,0
80001554:	c0 70       	breq	80001562 <usartSetBaudrate+0x92>
80001556:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000155a:	e0 48 ff ff 	cp.w	r8,65535
8000155e:	e0 88 00 06 	brls	8000156a <usartSetBaudrate+0x9a>
80001562:	30 18       	mov	r8,1
80001564:	ef 48 ff d8 	st.w	r7[-40],r8
80001568:	c2 c8       	rjmp	800015c0 <usartSetBaudrate+0xf0>
8000156a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000156e:	70 18       	ld.w	r8,r8[0x4]
80001570:	10 99       	mov	r9,r8
80001572:	e4 19 ff f7 	andh	r9,0xfff7
80001576:	e0 19 fe cf 	andl	r9,0xfecf
8000157a:	ef 49 ff dc 	st.w	r7[-36],r9
8000157e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001582:	59 08       	cp.w	r8,16
80001584:	c0 60       	breq	80001590 <usartSetBaudrate+0xc0>
80001586:	e8 68 00 00 	mov	r8,524288
8000158a:	ef 48 ff e0 	st.w	r7[-32],r8
8000158e:	c0 48       	rjmp	80001596 <usartSetBaudrate+0xc6>
80001590:	30 09       	mov	r9,0
80001592:	ef 49 ff e0 	st.w	r7[-32],r9
80001596:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000159a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000159e:	10 49       	or	r9,r8
800015a0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800015a4:	91 19       	st.w	r8[0x4],r9
800015a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800015aa:	f0 09 15 10 	lsl	r9,r8,0x10
800015ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015b2:	10 49       	or	r9,r8
800015b4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800015b8:	91 89       	st.w	r8[0x20],r9
800015ba:	30 09       	mov	r9,0
800015bc:	ef 49 ff d8 	st.w	r7[-40],r9
800015c0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800015c4:	10 9c       	mov	r12,r8
800015c6:	2f 5d       	sub	sp,-44
800015c8:	e3 cd 80 80 	ldm	sp++,r7,pc

800015cc <usartInit>:
800015cc:	eb cd 40 80 	pushm	r7,lr
800015d0:	1a 97       	mov	r7,sp
800015d2:	20 4d       	sub	sp,16
800015d4:	ef 4c ff f8 	st.w	r7[-8],r12
800015d8:	ef 4b ff f4 	st.w	r7[-12],r11
800015dc:	ef 4a ff f0 	st.w	r7[-16],r10
800015e0:	fe 78 10 00 	mov	r8,-61440
800015e4:	ef 48 ff fc 	st.w	r7[-4],r8
800015e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800015ec:	30 18       	mov	r8,1
800015ee:	93 28       	st.w	r9[0x8],r8
800015f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800015f4:	30 28       	mov	r8,2
800015f6:	93 28       	st.w	r9[0x8],r8
800015f8:	ee fc ff f8 	ld.w	r12,r7[-8]
800015fc:	f0 1f 00 3b 	mcall	800016e8 <usartInit+0x11c>
80001600:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001604:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001608:	70 08       	ld.w	r8,r8[0x0]
8000160a:	12 9a       	mov	r10,r9
8000160c:	10 9b       	mov	r11,r8
8000160e:	ee fc ff f8 	ld.w	r12,r7[-8]
80001612:	f0 1f 00 37 	mcall	800016ec <usartInit+0x120>
80001616:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000161a:	11 c9       	ld.ub	r9,r8[0x4]
8000161c:	30 98       	mov	r8,9
8000161e:	f0 09 18 00 	cp.b	r9,r8
80001622:	c0 a1       	brne	80001636 <usartInit+0x6a>
80001624:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001628:	70 18       	ld.w	r8,r8[0x4]
8000162a:	10 99       	mov	r9,r8
8000162c:	b1 b9       	sbr	r9,0x11
8000162e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001632:	91 19       	st.w	r8[0x4],r9
80001634:	c0 d8       	rjmp	8000164e <usartInit+0x82>
80001636:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000163a:	70 19       	ld.w	r9,r8[0x4]
8000163c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001640:	11 c8       	ld.ub	r8,r8[0x4]
80001642:	20 58       	sub	r8,5
80001644:	a7 68       	lsl	r8,0x6
80001646:	10 49       	or	r9,r8
80001648:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000164c:	91 19       	st.w	r8[0x4],r9
8000164e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001652:	70 1a       	ld.w	r10,r8[0x4]
80001654:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001658:	11 d8       	ld.ub	r8,r8[0x5]
8000165a:	f0 09 15 09 	lsl	r9,r8,0x9
8000165e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001662:	f1 38 00 08 	ld.ub	r8,r8[8]
80001666:	af 68       	lsl	r8,0xe
80001668:	f3 e8 10 08 	or	r8,r9,r8
8000166c:	f5 e8 10 09 	or	r9,r10,r8
80001670:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001674:	91 19       	st.w	r8[0x4],r9
80001676:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000167a:	90 39       	ld.sh	r9,r8[0x6]
8000167c:	30 28       	mov	r8,2
8000167e:	f0 09 19 00 	cp.h	r9,r8
80001682:	e0 88 00 14 	brls	800016aa <usartInit+0xde>
80001686:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000168a:	70 18       	ld.w	r8,r8[0x4]
8000168c:	10 99       	mov	r9,r8
8000168e:	ad b9       	sbr	r9,0xd
80001690:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001694:	91 19       	st.w	r8[0x4],r9
80001696:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000169a:	90 38       	ld.sh	r8,r8[0x6]
8000169c:	5c 78       	castu.h	r8
8000169e:	20 28       	sub	r8,2
800016a0:	10 99       	mov	r9,r8
800016a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016a6:	91 a9       	st.w	r8[0x28],r9
800016a8:	c0 d8       	rjmp	800016c2 <usartInit+0xf6>
800016aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016ae:	70 19       	ld.w	r9,r8[0x4]
800016b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800016b4:	90 38       	ld.sh	r8,r8[0x6]
800016b6:	5c 78       	castu.h	r8
800016b8:	ad 68       	lsl	r8,0xc
800016ba:	10 49       	or	r9,r8
800016bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016c0:	91 19       	st.w	r8[0x4],r9
800016c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016c6:	70 18       	ld.w	r8,r8[0x4]
800016c8:	10 99       	mov	r9,r8
800016ca:	e0 19 ff f0 	andl	r9,0xfff0
800016ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016d2:	91 19       	st.w	r8[0x4],r9
800016d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800016d8:	35 08       	mov	r8,80
800016da:	93 08       	st.w	r9[0x0],r8
800016dc:	30 08       	mov	r8,0
800016de:	10 9c       	mov	r12,r8
800016e0:	2f cd       	sub	sp,-16
800016e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800016e6:	00 00       	add	r0,r0
800016e8:	80 00       	ld.sh	r0,r0[0x0]
800016ea:	14 60       	and	r0,r10
800016ec:	80 00       	ld.sh	r0,r0[0x0]
800016ee:	14 d0       	st.w	--r10,r0

800016f0 <usartWriteChar>:
800016f0:	eb cd 40 80 	pushm	r7,lr
800016f4:	1a 97       	mov	r7,sp
800016f6:	20 3d       	sub	sp,12
800016f8:	ef 4c ff f8 	st.w	r7[-8],r12
800016fc:	16 98       	mov	r8,r11
800016fe:	ef 68 ff f4 	st.b	r7[-12],r8
80001702:	e4 68 00 00 	mov	r8,262144
80001706:	ef 48 ff fc 	st.w	r7[-4],r8
8000170a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000170e:	58 08       	cp.w	r8,0
80001710:	5f 18       	srne	r8
80001712:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80001716:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000171a:	20 18       	sub	r8,1
8000171c:	ef 48 ff fc 	st.w	r7[-4],r8
80001720:	12 98       	mov	r8,r9
80001722:	ec 18 00 01 	eorl	r8,0x1
80001726:	5c 58       	castu.b	r8
80001728:	c0 71       	brne	80001736 <usartWriteChar+0x46>
8000172a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000172e:	70 58       	ld.w	r8,r8[0x14]
80001730:	e2 18 00 02 	andl	r8,0x2,COH
80001734:	ce b0       	breq	8000170a <usartWriteChar+0x1a>
80001736:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000173a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000173e:	91 79       	st.w	r8[0x1c],r9
80001740:	2f dd       	sub	sp,-12
80001742:	e3 cd 80 80 	ldm	sp++,r7,pc
80001746:	d7 03       	nop

80001748 <usartWriteLine>:
80001748:	eb cd 40 80 	pushm	r7,lr
8000174c:	1a 97       	mov	r7,sp
8000174e:	20 2d       	sub	sp,8
80001750:	ef 4c ff fc 	st.w	r7[-4],r12
80001754:	ef 4b ff f8 	st.w	r7[-8],r11
80001758:	c1 88       	rjmp	80001788 <usartWriteLine+0x40>
8000175a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000175e:	11 88       	ld.ub	r8,r8[0x0]
80001760:	58 a8       	cp.w	r8,10
80001762:	c0 61       	brne	8000176e <usartWriteLine+0x26>
80001764:	30 db       	mov	r11,13
80001766:	ee fc ff fc 	ld.w	r12,r7[-4]
8000176a:	f0 1f 00 0c 	mcall	80001798 <usartWriteLine+0x50>
8000176e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001772:	11 88       	ld.ub	r8,r8[0x0]
80001774:	10 9b       	mov	r11,r8
80001776:	ee fc ff fc 	ld.w	r12,r7[-4]
8000177a:	f0 1f 00 08 	mcall	80001798 <usartWriteLine+0x50>
8000177e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001782:	2f f8       	sub	r8,-1
80001784:	ef 48 ff f8 	st.w	r7[-8],r8
80001788:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000178c:	11 88       	ld.ub	r8,r8[0x0]
8000178e:	58 08       	cp.w	r8,0
80001790:	ce 51       	brne	8000175a <usartWriteLine+0x12>
80001792:	2f ed       	sub	sp,-8
80001794:	e3 cd 80 80 	ldm	sp++,r7,pc
80001798:	80 00       	ld.sh	r0,r0[0x0]
8000179a:	16 f0       	st.b	--r11,r0

8000179c <timerInit>:
8000179c:	d5 01       	pushm	r11,lr
8000179e:	d2 01       	pushm	r12
800017a0:	f0 1f 00 28 	mcall	80001840 <timerClearInterrupt+0x10>
800017a4:	f0 1f 00 28 	mcall	80001844 <timerClearInterrupt+0x14>
800017a8:	e0 6c 38 00 	mov	r12,14336
800017ac:	ea 1c ff ff 	orh	r12,0xffff
800017b0:	e0 6b c0 00 	mov	r11,49152
800017b4:	ea 1b 00 00 	orh	r11,0x0
800017b8:	99 1b       	st.w	r12[0x4],r11
800017ba:	30 1b       	mov	r11,1
800017bc:	a5 6b       	lsl	r11,0x4
800017be:	99 9b       	st.w	r12[0x24],r11
800017c0:	d2 02       	popm	r12
800017c2:	f0 1f 00 22 	mcall	80001848 <timerClearInterrupt+0x18>
800017c6:	d5 02       	popm	r11,lr
800017c8:	1c 9f       	mov	pc,lr

800017ca <timerReset>:
800017ca:	d3 01       	pushm	r11-r12
800017cc:	e0 6c 38 00 	mov	r12,14336
800017d0:	ea 1c ff ff 	orh	r12,0xffff
800017d4:	30 5b       	mov	r11,5
800017d6:	99 0b       	st.w	r12[0x0],r11
800017d8:	e0 6b 00 08 	mov	r11,8
800017dc:	ea 1b 00 00 	orh	r11,0x0
800017e0:	76 0b       	ld.w	r11,r11[0x0]
800017e2:	99 7b       	st.w	r12[0x1c],r11
800017e4:	d3 02       	popm	r11-r12
800017e6:	1c 9f       	mov	pc,lr

800017e8 <timerStop>:
800017e8:	d3 01       	pushm	r11-r12
800017ea:	e0 6c 38 00 	mov	r12,14336
800017ee:	ea 1c ff ff 	orh	r12,0xffff
800017f2:	30 2b       	mov	r11,2
800017f4:	99 0b       	st.w	r12[0x0],r11
800017f6:	d3 02       	popm	r11-r12
800017f8:	1c 9f       	mov	pc,lr

800017fa <timerRCSet>:
800017fa:	d3 01       	pushm	r11-r12
800017fc:	49 4b       	lddpc	r11,8000184c <timerClearInterrupt+0x1c>
800017fe:	97 0c       	st.w	r11[0x0],r12
80001800:	e0 6c 38 00 	mov	r12,14336
80001804:	ea 1c ff ff 	orh	r12,0xffff
80001808:	76 0b       	ld.w	r11,r11[0x0]
8000180a:	99 7b       	st.w	r12[0x1c],r11
8000180c:	d3 02       	popm	r11-r12
8000180e:	1c 9f       	mov	pc,lr

80001810 <timerPrescaleSet>:
80001810:	d3 81       	pushm	r10-r12
80001812:	49 0b       	lddpc	r11,80001850 <timerClearInterrupt+0x20>
80001814:	97 0c       	st.w	r11[0x0],r12
80001816:	e0 6c 38 00 	mov	r12,14336
8000181a:	ea 1c ff ff 	orh	r12,0xffff
8000181e:	78 1a       	ld.w	r10,r12[0x4]
80001820:	3f 8b       	mov	r11,-8
80001822:	16 6a       	and	r10,r11
80001824:	48 bb       	lddpc	r11,80001850 <timerClearInterrupt+0x20>
80001826:	76 0b       	ld.w	r11,r11[0x0]
80001828:	14 4b       	or	r11,r10
8000182a:	99 1b       	st.w	r12[0x4],r11
8000182c:	d3 82       	popm	r10-r12
8000182e:	1c 9f       	mov	pc,lr

80001830 <timerClearInterrupt>:
80001830:	d2 01       	pushm	r12
80001832:	e0 6c 38 00 	mov	r12,14336
80001836:	ea 1c ff ff 	orh	r12,0xffff
8000183a:	78 8c       	ld.w	r12,r12[0x20]
8000183c:	d2 02       	popm	r12
8000183e:	1c 9f       	mov	pc,lr
80001840:	80 00       	ld.sh	r0,r0[0x0]
80001842:	23 66       	sub	r6,54
80001844:	80 00       	ld.sh	r0,r0[0x0]
80001846:	18 30       	cp.w	r0,r12
80001848:	80 00       	ld.sh	r0,r0[0x0]
8000184a:	10 fc       	st.b	--r8,r12
8000184c:	00 00       	add	r0,r0
8000184e:	00 08       	add	r8,r0
80001850:	00 00       	add	r0,r0
80001852:	00 0c       	add	r12,r0

80001854 <_stext>:
80001854:	49 7d       	lddpc	sp,800018b0 <udata_end+0x4>
80001856:	49 80       	lddpc	r0,800018b4 <udata_end+0x8>
80001858:	1a d0       	st.w	--sp,r0
8000185a:	e5 cd 20 00 	ldmts	sp,sp
8000185e:	1b 00       	ld.w	r0,sp++
80001860:	49 60       	lddpc	r0,800018b8 <udata_end+0xc>
80001862:	e3 b0 00 01 	mtsr	0x4,r0
80001866:	d5 53       	csrf	0x15
80001868:	e0 6c 0c 00 	mov	r12,3072
8000186c:	ea 1c ff ff 	orh	r12,0xffff
80001870:	e0 6b 01 07 	mov	r11,263
80001874:	99 ab       	st.w	r12[0x28],r11
80001876:	30 4b       	mov	r11,4
80001878:	99 0b       	st.w	r12[0x0],r11
8000187a:	e0 6a 00 80 	mov	r10,128

8000187e <xw8>:
8000187e:	79 5b       	ld.w	r11,r12[0x54]
80001880:	14 7b       	tst	r11,r10
80001882:	cf e0       	breq	8000187e <xw8>
80001884:	30 5b       	mov	r11,5
80001886:	99 0b       	st.w	r12[0x0],r11

80001888 <idata_>:
80001888:	48 d0       	lddpc	r0,800018bc <udata_end+0x10>
8000188a:	48 e1       	lddpc	r1,800018c0 <udata_end+0x14>
8000188c:	02 30       	cp.w	r0,r1
8000188e:	c0 62       	brcc	8000189a <idata_end>
80001890:	48 d2       	lddpc	r2,800018c4 <udata_end+0x18>

80001892 <idata_loop>:
80001892:	05 04       	ld.w	r4,r2++
80001894:	00 a4       	st.w	r0++,r4
80001896:	02 30       	cp.w	r0,r1
80001898:	cf d3       	brcs	80001892 <idata_loop>

8000189a <idata_end>:
8000189a:	48 c0       	lddpc	r0,800018c8 <udata_end+0x1c>
8000189c:	48 c1       	lddpc	r1,800018cc <udata_end+0x20>
8000189e:	02 30       	cp.w	r0,r1
800018a0:	c0 62       	brcc	800018ac <udata_end>
800018a2:	30 02       	mov	r2,0
800018a4:	30 03       	mov	r3,0

800018a6 <udata_loop>:
800018a6:	00 a2       	st.w	r0++,r2
800018a8:	02 30       	cp.w	r0,r1
800018aa:	cf e3       	brcs	800018a6 <udata_loop>

800018ac <udata_end>:
800018ac:	48 9f       	lddpc	pc,800018d0 <udata_end+0x24>
800018ae:	00 00       	add	r0,r0
800018b0:	00 01       	add	r1,r0
800018b2:	00 00       	add	r0,r0
800018b4:	00 00       	add	r0,r0
800018b6:	f0 00       	*unknown*
800018b8:	80 00       	ld.sh	r0,r0[0x0]
800018ba:	22 00       	sub	r0,32
800018bc:	00 00       	add	r0,r0
800018be:	00 08       	add	r8,r0
800018c0:	00 00       	add	r0,r0
800018c2:	05 18       	ld.sh	r8,r2++
800018c4:	80 00       	ld.sh	r0,r0[0x0]
800018c6:	26 88       	sub	r8,104
800018c8:	00 00       	add	r0,r0
800018ca:	05 18       	ld.sh	r8,r2++
800018cc:	00 00       	add	r0,r0
800018ce:	06 e0       	st.h	--r3,r0
800018d0:	80 00       	ld.sh	r0,r0[0x0]
800018d2:	05 f4       	ld.ub	r4,r2[0x7]

800018d4 <calloc>:
800018d4:	d4 01       	pushm	lr
800018d6:	48 48       	lddpc	r8,800018e4 <calloc+0x10>
800018d8:	16 9a       	mov	r10,r11
800018da:	18 9b       	mov	r11,r12
800018dc:	70 0c       	ld.w	r12,r8[0x0]
800018de:	f0 1f 00 03 	mcall	800018e8 <calloc+0x14>
800018e2:	d8 02       	popm	pc
800018e4:	00 00       	add	r0,r0
800018e6:	01 00       	ld.w	r0,r0++
800018e8:	80 00       	ld.sh	r0,r0[0x0]
800018ea:	18 ec       	st.h	--r12,r12

800018ec <_calloc_r>:
800018ec:	d4 21       	pushm	r4-r7,lr
800018ee:	f4 0b 02 4b 	mul	r11,r10,r11
800018f2:	f0 1f 00 15 	mcall	80001944 <_calloc_r+0x58>
800018f6:	18 97       	mov	r7,r12
800018f8:	c2 30       	breq	8000193e <_calloc_r+0x52>
800018fa:	f8 fa ff fc 	ld.w	r10,r12[-4]
800018fe:	e0 1a ff fc 	andl	r10,0xfffc
80001902:	20 4a       	sub	r10,4
80001904:	e0 4a 00 24 	cp.w	r10,36
80001908:	e0 8b 00 18 	brhi	80001938 <_calloc_r+0x4c>
8000190c:	18 98       	mov	r8,r12
8000190e:	59 3a       	cp.w	r10,19
80001910:	e0 88 00 0f 	brls	8000192e <_calloc_r+0x42>
80001914:	30 09       	mov	r9,0
80001916:	10 a9       	st.w	r8++,r9
80001918:	10 a9       	st.w	r8++,r9
8000191a:	59 ba       	cp.w	r10,27
8000191c:	e0 88 00 09 	brls	8000192e <_calloc_r+0x42>
80001920:	10 a9       	st.w	r8++,r9
80001922:	10 a9       	st.w	r8++,r9
80001924:	e0 4a 00 24 	cp.w	r10,36
80001928:	c0 31       	brne	8000192e <_calloc_r+0x42>
8000192a:	10 a9       	st.w	r8++,r9
8000192c:	10 a9       	st.w	r8++,r9
8000192e:	30 09       	mov	r9,0
80001930:	10 a9       	st.w	r8++,r9
80001932:	91 19       	st.w	r8[0x4],r9
80001934:	91 09       	st.w	r8[0x0],r9
80001936:	c0 48       	rjmp	8000193e <_calloc_r+0x52>
80001938:	30 0b       	mov	r11,0
8000193a:	f0 1f 00 04 	mcall	80001948 <_calloc_r+0x5c>
8000193e:	0e 9c       	mov	r12,r7
80001940:	d8 22       	popm	r4-r7,pc
80001942:	00 00       	add	r0,r0
80001944:	80 00       	ld.sh	r0,r0[0x0]
80001946:	19 64       	ld.uh	r4,--r12
80001948:	80 00       	ld.sh	r0,r0[0x0]
8000194a:	1d b4       	ld.ub	r4,lr[0x3]

8000194c <malloc>:
8000194c:	d4 01       	pushm	lr
8000194e:	48 48       	lddpc	r8,8000195c <malloc+0x10>
80001950:	18 9b       	mov	r11,r12
80001952:	70 0c       	ld.w	r12,r8[0x0]
80001954:	f0 1f 00 03 	mcall	80001960 <malloc+0x14>
80001958:	d8 02       	popm	pc
8000195a:	00 00       	add	r0,r0
8000195c:	00 00       	add	r0,r0
8000195e:	01 00       	ld.w	r0,r0++
80001960:	80 00       	ld.sh	r0,r0[0x0]
80001962:	19 64       	ld.uh	r4,--r12

80001964 <_malloc_r>:
80001964:	d4 31       	pushm	r0-r7,lr
80001966:	f6 c8 ff f5 	sub	r8,r11,-11
8000196a:	18 95       	mov	r5,r12
8000196c:	10 97       	mov	r7,r8
8000196e:	e0 17 ff f8 	andl	r7,0xfff8
80001972:	59 68       	cp.w	r8,22
80001974:	f9 b7 08 10 	movls	r7,16
80001978:	16 37       	cp.w	r7,r11
8000197a:	5f 38       	srlo	r8
8000197c:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001980:	c0 50       	breq	8000198a <_malloc_r+0x26>
80001982:	30 c8       	mov	r8,12
80001984:	99 38       	st.w	r12[0xc],r8
80001986:	e0 8f 01 f3 	bral	80001d6c <_malloc_r+0x408>
8000198a:	f0 1f 00 50 	mcall	80001ac8 <_malloc_r+0x164>
8000198e:	e0 47 01 f7 	cp.w	r7,503
80001992:	e0 8b 00 1c 	brhi	800019ca <_malloc_r+0x66>
80001996:	ee 03 16 03 	lsr	r3,r7,0x3
8000199a:	4c d8       	lddpc	r8,80001acc <_malloc_r+0x168>
8000199c:	f0 03 00 38 	add	r8,r8,r3<<0x3
800019a0:	70 36       	ld.w	r6,r8[0xc]
800019a2:	10 36       	cp.w	r6,r8
800019a4:	c0 61       	brne	800019b0 <_malloc_r+0x4c>
800019a6:	ec c8 ff f8 	sub	r8,r6,-8
800019aa:	70 36       	ld.w	r6,r8[0xc]
800019ac:	10 36       	cp.w	r6,r8
800019ae:	c0 c0       	breq	800019c6 <_malloc_r+0x62>
800019b0:	6c 18       	ld.w	r8,r6[0x4]
800019b2:	e0 18 ff fc 	andl	r8,0xfffc
800019b6:	6c 3a       	ld.w	r10,r6[0xc]
800019b8:	ec 08 00 09 	add	r9,r6,r8
800019bc:	0a 9c       	mov	r12,r5
800019be:	6c 28       	ld.w	r8,r6[0x8]
800019c0:	95 28       	st.w	r10[0x8],r8
800019c2:	91 3a       	st.w	r8[0xc],r10
800019c4:	c4 68       	rjmp	80001a50 <_malloc_r+0xec>
800019c6:	2f e3       	sub	r3,-2
800019c8:	c4 c8       	rjmp	80001a60 <_malloc_r+0xfc>
800019ca:	ee 03 16 09 	lsr	r3,r7,0x9
800019ce:	c0 41       	brne	800019d6 <_malloc_r+0x72>
800019d0:	ee 03 16 03 	lsr	r3,r7,0x3
800019d4:	c2 68       	rjmp	80001a20 <_malloc_r+0xbc>
800019d6:	58 43       	cp.w	r3,4
800019d8:	e0 8b 00 06 	brhi	800019e4 <_malloc_r+0x80>
800019dc:	ee 03 16 06 	lsr	r3,r7,0x6
800019e0:	2c 83       	sub	r3,-56
800019e2:	c1 f8       	rjmp	80001a20 <_malloc_r+0xbc>
800019e4:	59 43       	cp.w	r3,20
800019e6:	e0 8b 00 04 	brhi	800019ee <_malloc_r+0x8a>
800019ea:	2a 53       	sub	r3,-91
800019ec:	c1 a8       	rjmp	80001a20 <_malloc_r+0xbc>
800019ee:	e0 43 00 54 	cp.w	r3,84
800019f2:	e0 8b 00 06 	brhi	800019fe <_malloc_r+0x9a>
800019f6:	ee 03 16 0c 	lsr	r3,r7,0xc
800019fa:	29 23       	sub	r3,-110
800019fc:	c1 28       	rjmp	80001a20 <_malloc_r+0xbc>
800019fe:	e0 43 01 54 	cp.w	r3,340
80001a02:	e0 8b 00 06 	brhi	80001a0e <_malloc_r+0xaa>
80001a06:	ee 03 16 0f 	lsr	r3,r7,0xf
80001a0a:	28 93       	sub	r3,-119
80001a0c:	c0 a8       	rjmp	80001a20 <_malloc_r+0xbc>
80001a0e:	e0 43 05 54 	cp.w	r3,1364
80001a12:	e0 88 00 04 	brls	80001a1a <_malloc_r+0xb6>
80001a16:	37 e3       	mov	r3,126
80001a18:	c0 48       	rjmp	80001a20 <_malloc_r+0xbc>
80001a1a:	ee 03 16 12 	lsr	r3,r7,0x12
80001a1e:	28 43       	sub	r3,-124
80001a20:	4a ba       	lddpc	r10,80001acc <_malloc_r+0x168>
80001a22:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80001a26:	74 36       	ld.w	r6,r10[0xc]
80001a28:	c1 98       	rjmp	80001a5a <_malloc_r+0xf6>
80001a2a:	6c 19       	ld.w	r9,r6[0x4]
80001a2c:	e0 19 ff fc 	andl	r9,0xfffc
80001a30:	f2 07 01 0b 	sub	r11,r9,r7
80001a34:	58 fb       	cp.w	r11,15
80001a36:	e0 8a 00 04 	brle	80001a3e <_malloc_r+0xda>
80001a3a:	20 13       	sub	r3,1
80001a3c:	c1 18       	rjmp	80001a5e <_malloc_r+0xfa>
80001a3e:	6c 38       	ld.w	r8,r6[0xc]
80001a40:	58 0b       	cp.w	r11,0
80001a42:	c0 b5       	brlt	80001a58 <_malloc_r+0xf4>
80001a44:	6c 2a       	ld.w	r10,r6[0x8]
80001a46:	ec 09 00 09 	add	r9,r6,r9
80001a4a:	0a 9c       	mov	r12,r5
80001a4c:	91 2a       	st.w	r8[0x8],r10
80001a4e:	95 38       	st.w	r10[0xc],r8
80001a50:	72 18       	ld.w	r8,r9[0x4]
80001a52:	a1 a8       	sbr	r8,0x0
80001a54:	93 18       	st.w	r9[0x4],r8
80001a56:	cb c8       	rjmp	80001bce <_malloc_r+0x26a>
80001a58:	10 96       	mov	r6,r8
80001a5a:	14 36       	cp.w	r6,r10
80001a5c:	ce 71       	brne	80001a2a <_malloc_r+0xc6>
80001a5e:	2f f3       	sub	r3,-1
80001a60:	49 ba       	lddpc	r10,80001acc <_malloc_r+0x168>
80001a62:	f4 cc ff f8 	sub	r12,r10,-8
80001a66:	78 26       	ld.w	r6,r12[0x8]
80001a68:	18 36       	cp.w	r6,r12
80001a6a:	c6 e0       	breq	80001b46 <_malloc_r+0x1e2>
80001a6c:	6c 19       	ld.w	r9,r6[0x4]
80001a6e:	e0 19 ff fc 	andl	r9,0xfffc
80001a72:	f2 07 01 08 	sub	r8,r9,r7
80001a76:	58 f8       	cp.w	r8,15
80001a78:	e0 89 00 90 	brgt	80001b98 <_malloc_r+0x234>
80001a7c:	99 3c       	st.w	r12[0xc],r12
80001a7e:	99 2c       	st.w	r12[0x8],r12
80001a80:	58 08       	cp.w	r8,0
80001a82:	c0 55       	brlt	80001a8c <_malloc_r+0x128>
80001a84:	ec 09 00 09 	add	r9,r6,r9
80001a88:	0a 9c       	mov	r12,r5
80001a8a:	ce 3b       	rjmp	80001a50 <_malloc_r+0xec>
80001a8c:	e0 49 01 ff 	cp.w	r9,511
80001a90:	e0 8b 00 13 	brhi	80001ab6 <_malloc_r+0x152>
80001a94:	a3 99       	lsr	r9,0x3
80001a96:	f4 09 00 38 	add	r8,r10,r9<<0x3
80001a9a:	70 2b       	ld.w	r11,r8[0x8]
80001a9c:	8d 38       	st.w	r6[0xc],r8
80001a9e:	8d 2b       	st.w	r6[0x8],r11
80001aa0:	97 36       	st.w	r11[0xc],r6
80001aa2:	91 26       	st.w	r8[0x8],r6
80001aa4:	a3 49       	asr	r9,0x2
80001aa6:	74 18       	ld.w	r8,r10[0x4]
80001aa8:	30 1b       	mov	r11,1
80001aaa:	f6 09 09 49 	lsl	r9,r11,r9
80001aae:	f1 e9 10 09 	or	r9,r8,r9
80001ab2:	95 19       	st.w	r10[0x4],r9
80001ab4:	c4 98       	rjmp	80001b46 <_malloc_r+0x1e2>
80001ab6:	f2 0a 16 09 	lsr	r10,r9,0x9
80001aba:	58 4a       	cp.w	r10,4
80001abc:	e0 8b 00 0a 	brhi	80001ad0 <_malloc_r+0x16c>
80001ac0:	f2 0a 16 06 	lsr	r10,r9,0x6
80001ac4:	2c 8a       	sub	r10,-56
80001ac6:	c2 38       	rjmp	80001b0c <_malloc_r+0x1a8>
80001ac8:	80 00       	ld.sh	r0,r0[0x0]
80001aca:	1d c2       	ld.ub	r2,lr[0x4]
80001acc:	00 00       	add	r0,r0
80001ace:	01 04       	ld.w	r4,r0++
80001ad0:	59 4a       	cp.w	r10,20
80001ad2:	e0 8b 00 04 	brhi	80001ada <_malloc_r+0x176>
80001ad6:	2a 5a       	sub	r10,-91
80001ad8:	c1 a8       	rjmp	80001b0c <_malloc_r+0x1a8>
80001ada:	e0 4a 00 54 	cp.w	r10,84
80001ade:	e0 8b 00 06 	brhi	80001aea <_malloc_r+0x186>
80001ae2:	f2 0a 16 0c 	lsr	r10,r9,0xc
80001ae6:	29 2a       	sub	r10,-110
80001ae8:	c1 28       	rjmp	80001b0c <_malloc_r+0x1a8>
80001aea:	e0 4a 01 54 	cp.w	r10,340
80001aee:	e0 8b 00 06 	brhi	80001afa <_malloc_r+0x196>
80001af2:	f2 0a 16 0f 	lsr	r10,r9,0xf
80001af6:	28 9a       	sub	r10,-119
80001af8:	c0 a8       	rjmp	80001b0c <_malloc_r+0x1a8>
80001afa:	e0 4a 05 54 	cp.w	r10,1364
80001afe:	e0 88 00 04 	brls	80001b06 <_malloc_r+0x1a2>
80001b02:	37 ea       	mov	r10,126
80001b04:	c0 48       	rjmp	80001b0c <_malloc_r+0x1a8>
80001b06:	f2 0a 16 12 	lsr	r10,r9,0x12
80001b0a:	28 4a       	sub	r10,-124
80001b0c:	4c 8b       	lddpc	r11,80001c2c <_malloc_r+0x2c8>
80001b0e:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80001b12:	68 28       	ld.w	r8,r4[0x8]
80001b14:	08 38       	cp.w	r8,r4
80001b16:	c0 e1       	brne	80001b32 <_malloc_r+0x1ce>
80001b18:	76 19       	ld.w	r9,r11[0x4]
80001b1a:	a3 4a       	asr	r10,0x2
80001b1c:	30 1e       	mov	lr,1
80001b1e:	fc 0a 09 4a 	lsl	r10,lr,r10
80001b22:	f3 ea 10 0a 	or	r10,r9,r10
80001b26:	10 99       	mov	r9,r8
80001b28:	97 1a       	st.w	r11[0x4],r10
80001b2a:	c0 a8       	rjmp	80001b3e <_malloc_r+0x1da>
80001b2c:	70 28       	ld.w	r8,r8[0x8]
80001b2e:	08 38       	cp.w	r8,r4
80001b30:	c0 60       	breq	80001b3c <_malloc_r+0x1d8>
80001b32:	70 1a       	ld.w	r10,r8[0x4]
80001b34:	e0 1a ff fc 	andl	r10,0xfffc
80001b38:	14 39       	cp.w	r9,r10
80001b3a:	cf 93       	brcs	80001b2c <_malloc_r+0x1c8>
80001b3c:	70 39       	ld.w	r9,r8[0xc]
80001b3e:	8d 39       	st.w	r6[0xc],r9
80001b40:	8d 28       	st.w	r6[0x8],r8
80001b42:	91 36       	st.w	r8[0xc],r6
80001b44:	93 26       	st.w	r9[0x8],r6
80001b46:	e6 08 14 02 	asr	r8,r3,0x2
80001b4a:	30 1b       	mov	r11,1
80001b4c:	4b 84       	lddpc	r4,80001c2c <_malloc_r+0x2c8>
80001b4e:	f6 08 09 4b 	lsl	r11,r11,r8
80001b52:	68 18       	ld.w	r8,r4[0x4]
80001b54:	10 3b       	cp.w	r11,r8
80001b56:	e0 8b 00 6f 	brhi	80001c34 <_malloc_r+0x2d0>
80001b5a:	f7 e8 00 09 	and	r9,r11,r8
80001b5e:	c0 b1       	brne	80001b74 <_malloc_r+0x210>
80001b60:	e0 13 ff fc 	andl	r3,0xfffc
80001b64:	a1 7b       	lsl	r11,0x1
80001b66:	2f c3       	sub	r3,-4
80001b68:	c0 38       	rjmp	80001b6e <_malloc_r+0x20a>
80001b6a:	2f c3       	sub	r3,-4
80001b6c:	a1 7b       	lsl	r11,0x1
80001b6e:	f7 e8 00 09 	and	r9,r11,r8
80001b72:	cf c0       	breq	80001b6a <_malloc_r+0x206>
80001b74:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001b78:	06 92       	mov	r2,r3
80001b7a:	1c 91       	mov	r1,lr
80001b7c:	62 36       	ld.w	r6,r1[0xc]
80001b7e:	c2 e8       	rjmp	80001bda <_malloc_r+0x276>
80001b80:	6c 1a       	ld.w	r10,r6[0x4]
80001b82:	e0 1a ff fc 	andl	r10,0xfffc
80001b86:	f4 07 01 08 	sub	r8,r10,r7
80001b8a:	58 f8       	cp.w	r8,15
80001b8c:	e0 8a 00 15 	brle	80001bb6 <_malloc_r+0x252>
80001b90:	6c 3a       	ld.w	r10,r6[0xc]
80001b92:	6c 29       	ld.w	r9,r6[0x8]
80001b94:	95 29       	st.w	r10[0x8],r9
80001b96:	93 3a       	st.w	r9[0xc],r10
80001b98:	0e 99       	mov	r9,r7
80001b9a:	ec 07 00 07 	add	r7,r6,r7
80001b9e:	a1 a9       	sbr	r9,0x0
80001ba0:	99 37       	st.w	r12[0xc],r7
80001ba2:	99 27       	st.w	r12[0x8],r7
80001ba4:	8d 19       	st.w	r6[0x4],r9
80001ba6:	ee 08 09 08 	st.w	r7[r8],r8
80001baa:	8f 2c       	st.w	r7[0x8],r12
80001bac:	8f 3c       	st.w	r7[0xc],r12
80001bae:	a1 a8       	sbr	r8,0x0
80001bb0:	0a 9c       	mov	r12,r5
80001bb2:	8f 18       	st.w	r7[0x4],r8
80001bb4:	c0 d8       	rjmp	80001bce <_malloc_r+0x26a>
80001bb6:	6c 39       	ld.w	r9,r6[0xc]
80001bb8:	58 08       	cp.w	r8,0
80001bba:	c0 f5       	brlt	80001bd8 <_malloc_r+0x274>
80001bbc:	ec 0a 00 0a 	add	r10,r6,r10
80001bc0:	74 18       	ld.w	r8,r10[0x4]
80001bc2:	a1 a8       	sbr	r8,0x0
80001bc4:	0a 9c       	mov	r12,r5
80001bc6:	95 18       	st.w	r10[0x4],r8
80001bc8:	6c 28       	ld.w	r8,r6[0x8]
80001bca:	93 28       	st.w	r9[0x8],r8
80001bcc:	91 39       	st.w	r8[0xc],r9
80001bce:	f0 1f 00 19 	mcall	80001c30 <_malloc_r+0x2cc>
80001bd2:	ec cc ff f8 	sub	r12,r6,-8
80001bd6:	d8 32       	popm	r0-r7,pc
80001bd8:	12 96       	mov	r6,r9
80001bda:	02 36       	cp.w	r6,r1
80001bdc:	cd 21       	brne	80001b80 <_malloc_r+0x21c>
80001bde:	2f f2       	sub	r2,-1
80001be0:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001be4:	c0 30       	breq	80001bea <_malloc_r+0x286>
80001be6:	2f 81       	sub	r1,-8
80001be8:	cc ab       	rjmp	80001b7c <_malloc_r+0x218>
80001bea:	1c 98       	mov	r8,lr
80001bec:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001bf0:	c0 81       	brne	80001c00 <_malloc_r+0x29c>
80001bf2:	68 19       	ld.w	r9,r4[0x4]
80001bf4:	f6 08 11 ff 	rsub	r8,r11,-1
80001bf8:	f3 e8 00 08 	and	r8,r9,r8
80001bfc:	89 18       	st.w	r4[0x4],r8
80001bfe:	c0 78       	rjmp	80001c0c <_malloc_r+0x2a8>
80001c00:	f0 c9 00 08 	sub	r9,r8,8
80001c04:	20 13       	sub	r3,1
80001c06:	70 08       	ld.w	r8,r8[0x0]
80001c08:	12 38       	cp.w	r8,r9
80001c0a:	cf 10       	breq	80001bec <_malloc_r+0x288>
80001c0c:	a1 7b       	lsl	r11,0x1
80001c0e:	68 18       	ld.w	r8,r4[0x4]
80001c10:	10 3b       	cp.w	r11,r8
80001c12:	e0 8b 00 11 	brhi	80001c34 <_malloc_r+0x2d0>
80001c16:	58 0b       	cp.w	r11,0
80001c18:	c0 e0       	breq	80001c34 <_malloc_r+0x2d0>
80001c1a:	04 93       	mov	r3,r2
80001c1c:	c0 38       	rjmp	80001c22 <_malloc_r+0x2be>
80001c1e:	2f c3       	sub	r3,-4
80001c20:	a1 7b       	lsl	r11,0x1
80001c22:	f7 e8 00 09 	and	r9,r11,r8
80001c26:	ca 71       	brne	80001b74 <_malloc_r+0x210>
80001c28:	cf bb       	rjmp	80001c1e <_malloc_r+0x2ba>
80001c2a:	00 00       	add	r0,r0
80001c2c:	00 00       	add	r0,r0
80001c2e:	01 04       	ld.w	r4,r0++
80001c30:	80 00       	ld.sh	r0,r0[0x0]
80001c32:	1d c4       	ld.ub	r4,lr[0x4]
80001c34:	68 23       	ld.w	r3,r4[0x8]
80001c36:	66 12       	ld.w	r2,r3[0x4]
80001c38:	e0 12 ff fc 	andl	r2,0xfffc
80001c3c:	0e 32       	cp.w	r2,r7
80001c3e:	5f 39       	srlo	r9
80001c40:	e4 07 01 08 	sub	r8,r2,r7
80001c44:	58 f8       	cp.w	r8,15
80001c46:	5f aa       	srle	r10
80001c48:	f5 e9 10 09 	or	r9,r10,r9
80001c4c:	e0 80 00 a2 	breq	80001d90 <_malloc_r+0x42c>
80001c50:	4c 88       	lddpc	r8,80001d70 <_malloc_r+0x40c>
80001c52:	70 01       	ld.w	r1,r8[0x0]
80001c54:	4c 88       	lddpc	r8,80001d74 <_malloc_r+0x410>
80001c56:	2f 01       	sub	r1,-16
80001c58:	70 08       	ld.w	r8,r8[0x0]
80001c5a:	0e 01       	add	r1,r7
80001c5c:	5b f8       	cp.w	r8,-1
80001c5e:	c0 40       	breq	80001c66 <_malloc_r+0x302>
80001c60:	28 11       	sub	r1,-127
80001c62:	e0 11 ff 80 	andl	r1,0xff80
80001c66:	02 9b       	mov	r11,r1
80001c68:	0a 9c       	mov	r12,r5
80001c6a:	f0 1f 00 44 	mcall	80001d78 <_malloc_r+0x414>
80001c6e:	18 96       	mov	r6,r12
80001c70:	5b fc       	cp.w	r12,-1
80001c72:	c6 e0       	breq	80001d4e <_malloc_r+0x3ea>
80001c74:	e6 02 00 08 	add	r8,r3,r2
80001c78:	10 3c       	cp.w	r12,r8
80001c7a:	c0 32       	brcc	80001c80 <_malloc_r+0x31c>
80001c7c:	08 33       	cp.w	r3,r4
80001c7e:	c6 81       	brne	80001d4e <_malloc_r+0x3ea>
80001c80:	4b fa       	lddpc	r10,80001d7c <_malloc_r+0x418>
80001c82:	74 09       	ld.w	r9,r10[0x0]
80001c84:	e2 09 00 09 	add	r9,r1,r9
80001c88:	95 09       	st.w	r10[0x0],r9
80001c8a:	10 36       	cp.w	r6,r8
80001c8c:	c0 a1       	brne	80001ca0 <_malloc_r+0x33c>
80001c8e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80001c92:	c0 71       	brne	80001ca0 <_malloc_r+0x33c>
80001c94:	e2 02 00 02 	add	r2,r1,r2
80001c98:	68 28       	ld.w	r8,r4[0x8]
80001c9a:	a1 a2       	sbr	r2,0x0
80001c9c:	91 12       	st.w	r8[0x4],r2
80001c9e:	c4 c8       	rjmp	80001d36 <_malloc_r+0x3d2>
80001ca0:	4b 5a       	lddpc	r10,80001d74 <_malloc_r+0x410>
80001ca2:	74 0b       	ld.w	r11,r10[0x0]
80001ca4:	5b fb       	cp.w	r11,-1
80001ca6:	c0 31       	brne	80001cac <_malloc_r+0x348>
80001ca8:	95 06       	st.w	r10[0x0],r6
80001caa:	c0 68       	rjmp	80001cb6 <_malloc_r+0x352>
80001cac:	ec 09 00 09 	add	r9,r6,r9
80001cb0:	4b 3a       	lddpc	r10,80001d7c <_malloc_r+0x418>
80001cb2:	10 19       	sub	r9,r8
80001cb4:	95 09       	st.w	r10[0x0],r9
80001cb6:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80001cba:	f0 09 11 08 	rsub	r9,r8,8
80001cbe:	58 08       	cp.w	r8,0
80001cc0:	f2 08 17 10 	movne	r8,r9
80001cc4:	ed d8 e1 06 	addne	r6,r6,r8
80001cc8:	28 08       	sub	r8,-128
80001cca:	ec 01 00 01 	add	r1,r6,r1
80001cce:	0a 9c       	mov	r12,r5
80001cd0:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80001cd4:	f0 01 01 01 	sub	r1,r8,r1
80001cd8:	02 9b       	mov	r11,r1
80001cda:	f0 1f 00 28 	mcall	80001d78 <_malloc_r+0x414>
80001cde:	4a 88       	lddpc	r8,80001d7c <_malloc_r+0x418>
80001ce0:	5b fc       	cp.w	r12,-1
80001ce2:	ec 0c 17 00 	moveq	r12,r6
80001ce6:	f9 b1 00 00 	moveq	r1,0
80001cea:	70 09       	ld.w	r9,r8[0x0]
80001cec:	0c 1c       	sub	r12,r6
80001cee:	89 26       	st.w	r4[0x8],r6
80001cf0:	02 0c       	add	r12,r1
80001cf2:	12 01       	add	r1,r9
80001cf4:	a1 ac       	sbr	r12,0x0
80001cf6:	91 01       	st.w	r8[0x0],r1
80001cf8:	8d 1c       	st.w	r6[0x4],r12
80001cfa:	08 33       	cp.w	r3,r4
80001cfc:	c1 d0       	breq	80001d36 <_malloc_r+0x3d2>
80001cfe:	58 f2       	cp.w	r2,15
80001d00:	e0 8b 00 05 	brhi	80001d0a <_malloc_r+0x3a6>
80001d04:	30 18       	mov	r8,1
80001d06:	8d 18       	st.w	r6[0x4],r8
80001d08:	c2 38       	rjmp	80001d4e <_malloc_r+0x3ea>
80001d0a:	30 59       	mov	r9,5
80001d0c:	20 c2       	sub	r2,12
80001d0e:	e0 12 ff f8 	andl	r2,0xfff8
80001d12:	e6 02 00 08 	add	r8,r3,r2
80001d16:	91 29       	st.w	r8[0x8],r9
80001d18:	91 19       	st.w	r8[0x4],r9
80001d1a:	66 18       	ld.w	r8,r3[0x4]
80001d1c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001d20:	e5 e8 10 08 	or	r8,r2,r8
80001d24:	87 18       	st.w	r3[0x4],r8
80001d26:	58 f2       	cp.w	r2,15
80001d28:	e0 88 00 07 	brls	80001d36 <_malloc_r+0x3d2>
80001d2c:	e6 cb ff f8 	sub	r11,r3,-8
80001d30:	0a 9c       	mov	r12,r5
80001d32:	f0 1f 00 14 	mcall	80001d80 <_malloc_r+0x41c>
80001d36:	49 49       	lddpc	r9,80001d84 <_malloc_r+0x420>
80001d38:	72 0a       	ld.w	r10,r9[0x0]
80001d3a:	49 18       	lddpc	r8,80001d7c <_malloc_r+0x418>
80001d3c:	70 08       	ld.w	r8,r8[0x0]
80001d3e:	14 38       	cp.w	r8,r10
80001d40:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001d44:	49 19       	lddpc	r9,80001d88 <_malloc_r+0x424>
80001d46:	72 0a       	ld.w	r10,r9[0x0]
80001d48:	14 38       	cp.w	r8,r10
80001d4a:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001d4e:	68 28       	ld.w	r8,r4[0x8]
80001d50:	70 18       	ld.w	r8,r8[0x4]
80001d52:	e0 18 ff fc 	andl	r8,0xfffc
80001d56:	0e 38       	cp.w	r8,r7
80001d58:	5f 39       	srlo	r9
80001d5a:	0e 18       	sub	r8,r7
80001d5c:	58 f8       	cp.w	r8,15
80001d5e:	5f aa       	srle	r10
80001d60:	f5 e9 10 09 	or	r9,r10,r9
80001d64:	c1 60       	breq	80001d90 <_malloc_r+0x42c>
80001d66:	0a 9c       	mov	r12,r5
80001d68:	f0 1f 00 09 	mcall	80001d8c <_malloc_r+0x428>
80001d6c:	d8 3a       	popm	r0-r7,pc,r12=0
80001d6e:	00 00       	add	r0,r0
80001d70:	00 00       	add	r0,r0
80001d72:	05 a0       	ld.ub	r0,r2[0x2]
80001d74:	00 00       	add	r0,r0
80001d76:	05 10       	ld.sh	r0,r2++
80001d78:	80 00       	ld.sh	r0,r0[0x0]
80001d7a:	1d c8       	ld.ub	r8,lr[0x4]
80001d7c:	00 00       	add	r0,r0
80001d7e:	05 a4       	ld.ub	r4,r2[0x2]
80001d80:	80 00       	ld.sh	r0,r0[0x0]
80001d82:	1e e4       	st.h	--pc,r4
80001d84:	00 00       	add	r0,r0
80001d86:	05 9c       	ld.ub	r12,r2[0x1]
80001d88:	00 00       	add	r0,r0
80001d8a:	05 98       	ld.ub	r8,r2[0x1]
80001d8c:	80 00       	ld.sh	r0,r0[0x0]
80001d8e:	1d c4       	ld.ub	r4,lr[0x4]
80001d90:	68 26       	ld.w	r6,r4[0x8]
80001d92:	a1 a8       	sbr	r8,0x0
80001d94:	0e 99       	mov	r9,r7
80001d96:	a1 a9       	sbr	r9,0x0
80001d98:	8d 19       	st.w	r6[0x4],r9
80001d9a:	ec 07 00 07 	add	r7,r6,r7
80001d9e:	0a 9c       	mov	r12,r5
80001da0:	89 27       	st.w	r4[0x8],r7
80001da2:	8f 18       	st.w	r7[0x4],r8
80001da4:	f0 1f 00 03 	mcall	80001db0 <_malloc_r+0x44c>
80001da8:	ec cc ff f8 	sub	r12,r6,-8
80001dac:	d8 32       	popm	r0-r7,pc
80001dae:	00 00       	add	r0,r0
80001db0:	80 00       	ld.sh	r0,r0[0x0]
80001db2:	1d c4       	ld.ub	r4,lr[0x4]

80001db4 <memset>:
80001db4:	18 98       	mov	r8,r12
80001db6:	c0 38       	rjmp	80001dbc <memset+0x8>
80001db8:	10 cb       	st.b	r8++,r11
80001dba:	20 1a       	sub	r10,1
80001dbc:	58 0a       	cp.w	r10,0
80001dbe:	cf d1       	brne	80001db8 <memset+0x4>
80001dc0:	5e fc       	retal	r12

80001dc2 <__malloc_lock>:
80001dc2:	5e fc       	retal	r12

80001dc4 <__malloc_unlock>:
80001dc4:	5e fc       	retal	r12
80001dc6:	d7 03       	nop

80001dc8 <_sbrk_r>:
80001dc8:	d4 21       	pushm	r4-r7,lr
80001dca:	30 08       	mov	r8,0
80001dcc:	18 97       	mov	r7,r12
80001dce:	48 76       	lddpc	r6,80001de8 <_sbrk_r+0x20>
80001dd0:	16 9c       	mov	r12,r11
80001dd2:	8d 08       	st.w	r6[0x0],r8
80001dd4:	f0 1f 00 06 	mcall	80001dec <_sbrk_r+0x24>
80001dd8:	5b fc       	cp.w	r12,-1
80001dda:	c0 51       	brne	80001de4 <_sbrk_r+0x1c>
80001ddc:	6c 08       	ld.w	r8,r6[0x0]
80001dde:	58 08       	cp.w	r8,0
80001de0:	ef f8 1a 03 	st.wne	r7[0xc],r8
80001de4:	d8 22       	popm	r4-r7,pc
80001de6:	00 00       	add	r0,r0
80001de8:	00 00       	add	r0,r0
80001dea:	06 dc       	st.w	--r3,r12
80001dec:	80 00       	ld.sh	r0,r0[0x0]
80001dee:	1d f0       	ld.ub	r0,lr[0x7]

80001df0 <_sbrk>:
80001df0:	d4 01       	pushm	lr
80001df2:	48 c8       	lddpc	r8,80001e20 <_sbrk+0x30>
80001df4:	70 09       	ld.w	r9,r8[0x0]
80001df6:	58 09       	cp.w	r9,0
80001df8:	c0 31       	brne	80001dfe <_sbrk+0xe>
80001dfa:	48 b9       	lddpc	r9,80001e24 <_sbrk+0x34>
80001dfc:	91 09       	st.w	r8[0x0],r9
80001dfe:	48 99       	lddpc	r9,80001e20 <_sbrk+0x30>
80001e00:	48 aa       	lddpc	r10,80001e28 <_sbrk+0x38>
80001e02:	72 08       	ld.w	r8,r9[0x0]
80001e04:	f0 0c 00 0c 	add	r12,r8,r12
80001e08:	14 3c       	cp.w	r12,r10
80001e0a:	e0 8b 00 04 	brhi	80001e12 <_sbrk+0x22>
80001e0e:	93 0c       	st.w	r9[0x0],r12
80001e10:	c0 68       	rjmp	80001e1c <_sbrk+0x2c>
80001e12:	f0 1f 00 07 	mcall	80001e2c <_sbrk+0x3c>
80001e16:	30 c8       	mov	r8,12
80001e18:	99 08       	st.w	r12[0x0],r8
80001e1a:	3f f8       	mov	r8,-1
80001e1c:	10 9c       	mov	r12,r8
80001e1e:	d8 02       	popm	pc
80001e20:	00 00       	add	r0,r0
80001e22:	05 cc       	ld.ub	r12,r2[0x4]
80001e24:	00 00       	add	r0,r0
80001e26:	06 e0       	st.h	--r3,r0
80001e28:	00 00       	add	r0,r0
80001e2a:	e0 00       	*unknown*
80001e2c:	80 00       	ld.sh	r0,r0[0x0]
80001e2e:	1e 30       	cp.w	r0,pc

80001e30 <__errno>:
80001e30:	48 28       	lddpc	r8,80001e38 <__errno+0x8>
80001e32:	70 0c       	ld.w	r12,r8[0x0]
80001e34:	2f 4c       	sub	r12,-12
80001e36:	5e fc       	retal	r12
80001e38:	00 00       	add	r0,r0
80001e3a:	01 00       	ld.w	r0,r0++

80001e3c <_malloc_trim_r>:
80001e3c:	d4 21       	pushm	r4-r7,lr
80001e3e:	16 95       	mov	r5,r11
80001e40:	18 97       	mov	r7,r12
80001e42:	f0 1f 00 23 	mcall	80001ecc <_malloc_trim_r+0x90>
80001e46:	4a 34       	lddpc	r4,80001ed0 <_malloc_trim_r+0x94>
80001e48:	68 28       	ld.w	r8,r4[0x8]
80001e4a:	70 16       	ld.w	r6,r8[0x4]
80001e4c:	e0 16 ff fc 	andl	r6,0xfffc
80001e50:	ec c8 ff 91 	sub	r8,r6,-111
80001e54:	f0 05 01 05 	sub	r5,r8,r5
80001e58:	e0 15 ff 80 	andl	r5,0xff80
80001e5c:	ea c5 00 80 	sub	r5,r5,128
80001e60:	e0 45 00 7f 	cp.w	r5,127
80001e64:	e0 8a 00 23 	brle	80001eaa <_malloc_trim_r+0x6e>
80001e68:	30 0b       	mov	r11,0
80001e6a:	0e 9c       	mov	r12,r7
80001e6c:	f0 1f 00 1a 	mcall	80001ed4 <_malloc_trim_r+0x98>
80001e70:	68 28       	ld.w	r8,r4[0x8]
80001e72:	0c 08       	add	r8,r6
80001e74:	10 3c       	cp.w	r12,r8
80001e76:	c1 a1       	brne	80001eaa <_malloc_trim_r+0x6e>
80001e78:	ea 0b 11 00 	rsub	r11,r5,0
80001e7c:	0e 9c       	mov	r12,r7
80001e7e:	f0 1f 00 16 	mcall	80001ed4 <_malloc_trim_r+0x98>
80001e82:	5b fc       	cp.w	r12,-1
80001e84:	c1 71       	brne	80001eb2 <_malloc_trim_r+0x76>
80001e86:	30 0b       	mov	r11,0
80001e88:	0e 9c       	mov	r12,r7
80001e8a:	f0 1f 00 13 	mcall	80001ed4 <_malloc_trim_r+0x98>
80001e8e:	68 28       	ld.w	r8,r4[0x8]
80001e90:	f8 08 01 09 	sub	r9,r12,r8
80001e94:	58 f9       	cp.w	r9,15
80001e96:	e0 8a 00 0a 	brle	80001eaa <_malloc_trim_r+0x6e>
80001e9a:	a1 a9       	sbr	r9,0x0
80001e9c:	91 19       	st.w	r8[0x4],r9
80001e9e:	48 f8       	lddpc	r8,80001ed8 <_malloc_trim_r+0x9c>
80001ea0:	70 09       	ld.w	r9,r8[0x0]
80001ea2:	48 f8       	lddpc	r8,80001edc <_malloc_trim_r+0xa0>
80001ea4:	f8 09 01 09 	sub	r9,r12,r9
80001ea8:	91 09       	st.w	r8[0x0],r9
80001eaa:	0e 9c       	mov	r12,r7
80001eac:	f0 1f 00 0d 	mcall	80001ee0 <_malloc_trim_r+0xa4>
80001eb0:	d8 2a       	popm	r4-r7,pc,r12=0
80001eb2:	68 28       	ld.w	r8,r4[0x8]
80001eb4:	0a 16       	sub	r6,r5
80001eb6:	a1 a6       	sbr	r6,0x0
80001eb8:	91 16       	st.w	r8[0x4],r6
80001eba:	48 98       	lddpc	r8,80001edc <_malloc_trim_r+0xa0>
80001ebc:	70 09       	ld.w	r9,r8[0x0]
80001ebe:	0a 19       	sub	r9,r5
80001ec0:	0e 9c       	mov	r12,r7
80001ec2:	91 09       	st.w	r8[0x0],r9
80001ec4:	f0 1f 00 07 	mcall	80001ee0 <_malloc_trim_r+0xa4>
80001ec8:	da 2a       	popm	r4-r7,pc,r12=1
80001eca:	00 00       	add	r0,r0
80001ecc:	80 00       	ld.sh	r0,r0[0x0]
80001ece:	1d c2       	ld.ub	r2,lr[0x4]
80001ed0:	00 00       	add	r0,r0
80001ed2:	01 04       	ld.w	r4,r0++
80001ed4:	80 00       	ld.sh	r0,r0[0x0]
80001ed6:	1d c8       	ld.ub	r8,lr[0x4]
80001ed8:	00 00       	add	r0,r0
80001eda:	05 10       	ld.sh	r0,r2++
80001edc:	00 00       	add	r0,r0
80001ede:	05 a4       	ld.ub	r4,r2[0x2]
80001ee0:	80 00       	ld.sh	r0,r0[0x0]
80001ee2:	1d c4       	ld.ub	r4,lr[0x4]

80001ee4 <_free_r>:
80001ee4:	d4 21       	pushm	r4-r7,lr
80001ee6:	16 96       	mov	r6,r11
80001ee8:	18 97       	mov	r7,r12
80001eea:	58 0b       	cp.w	r11,0
80001eec:	e0 80 00 c8 	breq	8000207c <_free_r+0x198>
80001ef0:	f0 1f 00 4c 	mcall	80002020 <_free_r+0x13c>
80001ef4:	20 86       	sub	r6,8
80001ef6:	4c ca       	lddpc	r10,80002024 <_free_r+0x140>
80001ef8:	6c 18       	ld.w	r8,r6[0x4]
80001efa:	74 2e       	ld.w	lr,r10[0x8]
80001efc:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001f00:	a1 c8       	cbr	r8,0x0
80001f02:	ec 08 00 09 	add	r9,r6,r8
80001f06:	72 1b       	ld.w	r11,r9[0x4]
80001f08:	e0 1b ff fc 	andl	r11,0xfffc
80001f0c:	1c 39       	cp.w	r9,lr
80001f0e:	c1 d1       	brne	80001f48 <_free_r+0x64>
80001f10:	f6 08 00 08 	add	r8,r11,r8
80001f14:	58 0c       	cp.w	r12,0
80001f16:	c0 81       	brne	80001f26 <_free_r+0x42>
80001f18:	6c 09       	ld.w	r9,r6[0x0]
80001f1a:	12 16       	sub	r6,r9
80001f1c:	12 08       	add	r8,r9
80001f1e:	6c 3b       	ld.w	r11,r6[0xc]
80001f20:	6c 29       	ld.w	r9,r6[0x8]
80001f22:	97 29       	st.w	r11[0x8],r9
80001f24:	93 3b       	st.w	r9[0xc],r11
80001f26:	10 99       	mov	r9,r8
80001f28:	95 26       	st.w	r10[0x8],r6
80001f2a:	a1 a9       	sbr	r9,0x0
80001f2c:	8d 19       	st.w	r6[0x4],r9
80001f2e:	4b f9       	lddpc	r9,80002028 <_free_r+0x144>
80001f30:	72 09       	ld.w	r9,r9[0x0]
80001f32:	12 38       	cp.w	r8,r9
80001f34:	c0 63       	brcs	80001f40 <_free_r+0x5c>
80001f36:	4b e8       	lddpc	r8,8000202c <_free_r+0x148>
80001f38:	0e 9c       	mov	r12,r7
80001f3a:	70 0b       	ld.w	r11,r8[0x0]
80001f3c:	f0 1f 00 3d 	mcall	80002030 <_free_r+0x14c>
80001f40:	0e 9c       	mov	r12,r7
80001f42:	f0 1f 00 3d 	mcall	80002034 <_free_r+0x150>
80001f46:	d8 22       	popm	r4-r7,pc
80001f48:	93 1b       	st.w	r9[0x4],r11
80001f4a:	58 0c       	cp.w	r12,0
80001f4c:	c0 30       	breq	80001f52 <_free_r+0x6e>
80001f4e:	30 0c       	mov	r12,0
80001f50:	c1 08       	rjmp	80001f70 <_free_r+0x8c>
80001f52:	6c 0e       	ld.w	lr,r6[0x0]
80001f54:	f4 c5 ff f8 	sub	r5,r10,-8
80001f58:	1c 16       	sub	r6,lr
80001f5a:	1c 08       	add	r8,lr
80001f5c:	6c 2e       	ld.w	lr,r6[0x8]
80001f5e:	0a 3e       	cp.w	lr,r5
80001f60:	f9 bc 00 01 	moveq	r12,1
80001f64:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001f68:	eb fe 1a 02 	st.wne	r5[0x8],lr
80001f6c:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001f70:	f2 0b 00 0e 	add	lr,r9,r11
80001f74:	7c 1e       	ld.w	lr,lr[0x4]
80001f76:	ed be 00 00 	bld	lr,0x0
80001f7a:	c1 30       	breq	80001fa0 <_free_r+0xbc>
80001f7c:	16 08       	add	r8,r11
80001f7e:	58 0c       	cp.w	r12,0
80001f80:	c0 c1       	brne	80001f98 <_free_r+0xb4>
80001f82:	4a 9e       	lddpc	lr,80002024 <_free_r+0x140>
80001f84:	72 2b       	ld.w	r11,r9[0x8]
80001f86:	2f 8e       	sub	lr,-8
80001f88:	1c 3b       	cp.w	r11,lr
80001f8a:	c0 71       	brne	80001f98 <_free_r+0xb4>
80001f8c:	97 36       	st.w	r11[0xc],r6
80001f8e:	97 26       	st.w	r11[0x8],r6
80001f90:	8d 2b       	st.w	r6[0x8],r11
80001f92:	8d 3b       	st.w	r6[0xc],r11
80001f94:	30 1c       	mov	r12,1
80001f96:	c0 58       	rjmp	80001fa0 <_free_r+0xbc>
80001f98:	72 2b       	ld.w	r11,r9[0x8]
80001f9a:	72 39       	ld.w	r9,r9[0xc]
80001f9c:	93 2b       	st.w	r9[0x8],r11
80001f9e:	97 39       	st.w	r11[0xc],r9
80001fa0:	10 99       	mov	r9,r8
80001fa2:	ec 08 09 08 	st.w	r6[r8],r8
80001fa6:	a1 a9       	sbr	r9,0x0
80001fa8:	8d 19       	st.w	r6[0x4],r9
80001faa:	58 0c       	cp.w	r12,0
80001fac:	c6 51       	brne	80002076 <_free_r+0x192>
80001fae:	e0 48 01 ff 	cp.w	r8,511
80001fb2:	e0 8b 00 13 	brhi	80001fd8 <_free_r+0xf4>
80001fb6:	a3 98       	lsr	r8,0x3
80001fb8:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001fbc:	72 2b       	ld.w	r11,r9[0x8]
80001fbe:	8d 39       	st.w	r6[0xc],r9
80001fc0:	8d 2b       	st.w	r6[0x8],r11
80001fc2:	97 36       	st.w	r11[0xc],r6
80001fc4:	93 26       	st.w	r9[0x8],r6
80001fc6:	a3 48       	asr	r8,0x2
80001fc8:	74 19       	ld.w	r9,r10[0x4]
80001fca:	30 1b       	mov	r11,1
80001fcc:	f6 08 09 48 	lsl	r8,r11,r8
80001fd0:	f3 e8 10 08 	or	r8,r9,r8
80001fd4:	95 18       	st.w	r10[0x4],r8
80001fd6:	c5 08       	rjmp	80002076 <_free_r+0x192>
80001fd8:	f0 0b 16 09 	lsr	r11,r8,0x9
80001fdc:	58 4b       	cp.w	r11,4
80001fde:	e0 8b 00 06 	brhi	80001fea <_free_r+0x106>
80001fe2:	f0 0b 16 06 	lsr	r11,r8,0x6
80001fe6:	2c 8b       	sub	r11,-56
80001fe8:	c2 b8       	rjmp	8000203e <_free_r+0x15a>
80001fea:	59 4b       	cp.w	r11,20
80001fec:	e0 8b 00 04 	brhi	80001ff4 <_free_r+0x110>
80001ff0:	2a 5b       	sub	r11,-91
80001ff2:	c2 68       	rjmp	8000203e <_free_r+0x15a>
80001ff4:	e0 4b 00 54 	cp.w	r11,84
80001ff8:	e0 8b 00 06 	brhi	80002004 <_free_r+0x120>
80001ffc:	f0 0b 16 0c 	lsr	r11,r8,0xc
80002000:	29 2b       	sub	r11,-110
80002002:	c1 e8       	rjmp	8000203e <_free_r+0x15a>
80002004:	e0 4b 01 54 	cp.w	r11,340
80002008:	e0 8b 00 06 	brhi	80002014 <_free_r+0x130>
8000200c:	f0 0b 16 0f 	lsr	r11,r8,0xf
80002010:	28 9b       	sub	r11,-119
80002012:	c1 68       	rjmp	8000203e <_free_r+0x15a>
80002014:	e0 4b 05 54 	cp.w	r11,1364
80002018:	e0 88 00 10 	brls	80002038 <_free_r+0x154>
8000201c:	37 eb       	mov	r11,126
8000201e:	c1 08       	rjmp	8000203e <_free_r+0x15a>
80002020:	80 00       	ld.sh	r0,r0[0x0]
80002022:	1d c2       	ld.ub	r2,lr[0x4]
80002024:	00 00       	add	r0,r0
80002026:	01 04       	ld.w	r4,r0++
80002028:	00 00       	add	r0,r0
8000202a:	05 0c       	ld.w	r12,r2++
8000202c:	00 00       	add	r0,r0
8000202e:	05 a0       	ld.ub	r0,r2[0x2]
80002030:	80 00       	ld.sh	r0,r0[0x0]
80002032:	1e 3c       	cp.w	r12,pc
80002034:	80 00       	ld.sh	r0,r0[0x0]
80002036:	1d c4       	ld.ub	r4,lr[0x4]
80002038:	f0 0b 16 12 	lsr	r11,r8,0x12
8000203c:	28 4b       	sub	r11,-124
8000203e:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80002042:	78 29       	ld.w	r9,r12[0x8]
80002044:	18 39       	cp.w	r9,r12
80002046:	c0 e1       	brne	80002062 <_free_r+0x17e>
80002048:	74 18       	ld.w	r8,r10[0x4]
8000204a:	a3 4b       	asr	r11,0x2
8000204c:	30 1c       	mov	r12,1
8000204e:	f8 0b 09 4b 	lsl	r11,r12,r11
80002052:	f1 eb 10 0b 	or	r11,r8,r11
80002056:	12 98       	mov	r8,r9
80002058:	95 1b       	st.w	r10[0x4],r11
8000205a:	c0 a8       	rjmp	8000206e <_free_r+0x18a>
8000205c:	72 29       	ld.w	r9,r9[0x8]
8000205e:	18 39       	cp.w	r9,r12
80002060:	c0 60       	breq	8000206c <_free_r+0x188>
80002062:	72 1a       	ld.w	r10,r9[0x4]
80002064:	e0 1a ff fc 	andl	r10,0xfffc
80002068:	14 38       	cp.w	r8,r10
8000206a:	cf 93       	brcs	8000205c <_free_r+0x178>
8000206c:	72 38       	ld.w	r8,r9[0xc]
8000206e:	8d 38       	st.w	r6[0xc],r8
80002070:	8d 29       	st.w	r6[0x8],r9
80002072:	93 36       	st.w	r9[0xc],r6
80002074:	91 26       	st.w	r8[0x8],r6
80002076:	0e 9c       	mov	r12,r7
80002078:	f0 1f 00 02 	mcall	80002080 <_free_r+0x19c>
8000207c:	d8 22       	popm	r4-r7,pc
8000207e:	00 00       	add	r0,r0
80002080:	80 00       	ld.sh	r0,r0[0x0]
80002082:	1d c4       	ld.ub	r4,lr[0x4]

Disassembly of section .exception:

80002200 <_evba>:
	...

80002228 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80002228:	c7 a8       	rjmp	8000231c <privilegedCalls>
	...

80002300 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80002300:	1c 9f       	mov	pc,lr

80002302 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80002302:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80002306:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
8000230a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
8000230e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80002312:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80002314:	c0 31       	brne	8000231a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80002316:	4b 9c       	lddpc	r12,800023f8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80002318:	18 9f       	mov	pc,r12

8000231a <_int0_exit>:
_int0_exit:
	rete
8000231a:	d6 03       	rete

8000231c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
8000231c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
8000231e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80002320:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80002322:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80002324:	9b 3c       	st.w	sp[0xc],r12

80002326 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80002326:	4b 6c       	lddpc	r12,800023fc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80002328:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
8000232a:	c0 61       	brne	80002336 <priv_interruptenable>
	ld.w r12,sp[USERSR]
8000232c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
8000232e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80002330:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002332:	d3 02       	popm	r11-r12
	rete
80002334:	d6 03       	rete

80002336 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80002336:	4b 3c       	lddpc	r12,80002400 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80002338:	18 3b       	cp.w	r11,r12
	brne privexception
8000233a:	c0 61       	brne	80002346 <privexception>
	ld.w r12,sp[USERSR]
8000233c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
8000233e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80002340:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002342:	d3 02       	popm	r11-r12
	rete
80002344:	d6 03       	rete

80002346 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80002346:	c0 08       	rjmp	80002346 <privexception>

80002348 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80002348:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
8000234a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
8000234e:	4a ec       	lddpc	r12,80002404 <contextRestoreFromISR+0x4c>
	sub r11,r12
80002350:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80002352:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80002354:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80002358:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
8000235c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80002360:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80002362:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80002364:	1c 9f       	mov	pc,lr

80002366 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80002366:	d3 03       	ssrf	0x10
	mov pc,lr
80002368:	1c 9f       	mov	pc,lr

8000236a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
8000236a:	d5 03       	csrf	0x10
	mov pc,lr
8000236c:	1c 9f       	mov	pc,lr

8000236e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
8000236e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80002372:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80002374:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80002378:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
8000237c:	1c 9f       	mov	pc,lr

8000237e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000237e:	4a 3c       	lddpc	r12,80002408 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80002380:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80002382:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80002384:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80002386:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80002388:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
8000238a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
8000238c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
8000238e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80002390:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80002392:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80002394:	33 40       	mov	r0,52
	add r0,r12
80002396:	18 00       	add	r0,r12
	stmts r0,r0-r11
80002398:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
8000239c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
8000239e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
800023a2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
800023a4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
800023a6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
800023a8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
800023aa:	1a 90       	mov	r0,sp
	st.w --sp,r0
800023ac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800023ae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
800023b2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
800023b4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
800023b6:	1c 9f       	mov	pc,lr

800023b8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800023b8:	49 4c       	lddpc	r12,80002408 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
800023ba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
800023bc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800023be:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800023c0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
800023c4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
800023c6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
800023c8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800023ca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
800023cc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800023ce:	33 40       	mov	r0,52
	add r0,r12
800023d0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800023d2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800023d6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
800023d8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
800023da:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
800023dc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
800023de:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
800023e0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
800023e2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
800023e4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
800023e6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
800023e8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800023ea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
800023ec:	d4 01       	pushm	lr
	call timerStart
800023ee:	f0 1f 00 08 	mcall	8000240c <contextRestoreFromISR+0x54>
	popm lr
800023f2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
800023f4:	1c 9f       	mov	pc,lr
800023f6:	00 00       	add	r0,r0
800023f8:	80 00       	ld.sh	r0,r0[0x0]
800023fa:	0f 78       	ld.ub	r8,--r7
800023fc:	80 00       	ld.sh	r0,r0[0x0]
800023fe:	23 66       	sub	r6,54
80002400:	80 00       	ld.sh	r0,r0[0x0]
80002402:	23 6a       	sub	r10,54
80002404:	80 00       	ld.sh	r0,r0[0x0]
80002406:	22 00       	sub	r0,32
80002408:	00 00       	add	r0,r0
8000240a:	06 58       	eor	r8,r3
8000240c:	80 00       	ld.sh	r0,r0[0x0]
8000240e:	17 ca       	ld.ub	r10,r11[0x4]
	...
