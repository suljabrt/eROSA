
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001eb8  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80002000  80002000  00002400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000018c  80002400  80002400  00002800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  8000258c  8000258c  0000298c  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80002590  00002c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002a9c  00003114  2**0
                  ALLOC
  9 .bss          00000280  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000d868  00000798  00000798  00000000  2**0
                  ALLOC
 11 .comment      000000a0  00000000  00000000  00003114  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000508  00000000  00000000  000031b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 000008d1  00000000  00000000  000036c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000ad0d  00000000  00000000  00003f91  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00001bde  00000000  00000000  0000ec9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003b61  00000000  00000000  0001087c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000ad0  00000000  00000000  000143e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001a8e  00000000  00000000  00014eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000016bb  00000000  00000000  0001693e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00454eb1  00000000  00000000  00017ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 00000470  00000000  00000000  0046ceaa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	17 00       	ld.w	r0,r11++

Disassembly of section .text:

80000008 <usart_options>:
80000008:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 31     ............tsk1
80000018:	00 00 00 00 74 73 6b 32 00 00 00 00                 ....tsk2....

80000024 <task2>:
/*************************************************************
 * Task2
 * Blink LED1
 ************************************************************/
void task2(void)
{
80000024:	eb cd 40 80 	pushm	r7,lr
80000028:	1a 97       	mov	r7,sp
	while(1) {
		//usartWriteLine(USART, "task 2 entry\r\n");
		ledOn(LED1_GPIO);
8000002a:	33 cc       	mov	r12,60
8000002c:	f0 1f 00 09 	mcall	80000050 <task2+0x2c>
		//usartWriteLine(USART, "task 2 delayed\r\n");
		ROSA_delay(500);
80000030:	e0 6a 01 f4 	mov	r10,500
80000034:	30 0b       	mov	r11,0
80000036:	f0 1f 00 08 	mcall	80000054 <task2+0x30>
		//usartWriteLine(USART, "task 2 woken up!\r\n");
		ledOff(LED1_GPIO);
8000003a:	33 cc       	mov	r12,60
8000003c:	f0 1f 00 07 	mcall	80000058 <task2+0x34>
		ROSA_delay(500);
80000040:	e0 6a 01 f4 	mov	r10,500
80000044:	30 0b       	mov	r11,0
80000046:	f0 1f 00 04 	mcall	80000054 <task2+0x30>
		ROSA_yield();
8000004a:	f0 1f 00 05 	mcall	8000005c <task2+0x38>
	}
8000004e:	ce eb       	rjmp	8000002a <task2+0x6>
80000050:	80 00       	ld.sh	r0,r0[0x0]
80000052:	0e 40       	or	r0,r7
80000054:	80 00       	ld.sh	r0,r0[0x0]
80000056:	07 c8       	ld.ub	r8,r3[0x4]
80000058:	80 00       	ld.sh	r0,r0[0x0]
8000005a:	0e 60       	and	r0,r7
8000005c:	80 00       	ld.sh	r0,r0[0x0]
8000005e:	09 d6       	ld.ub	r6,r4[0x5]

80000060 <task1>:
/*************************************************************
 * Task1
 * Blink LED0
 ************************************************************/
void task1(void)
{	
80000060:	eb cd 40 80 	pushm	r7,lr
80000064:	1a 97       	mov	r7,sp
	while(1) {
		ledOn(LED0_GPIO);
80000066:	33 bc       	mov	r12,59
80000068:	f0 1f 00 0b 	mcall	80000094 <task1+0x34>
		ROSA_delay(500);
8000006c:	e0 6a 01 f4 	mov	r10,500
80000070:	30 0b       	mov	r11,0
80000072:	f0 1f 00 0a 	mcall	80000098 <task1+0x38>
		ledOff(LED0_GPIO);
80000076:	33 bc       	mov	r12,59
80000078:	f0 1f 00 09 	mcall	8000009c <task1+0x3c>
		ROSA_delay(250);
8000007c:	e0 6a 00 fa 	mov	r10,250
80000080:	30 0b       	mov	r11,0
80000082:	f0 1f 00 06 	mcall	80000098 <task1+0x38>
		ROSA_taskDelete(&t2_tcb);
80000086:	48 7c       	lddpc	r12,800000a0 <task1+0x40>
80000088:	f0 1f 00 07 	mcall	800000a4 <task1+0x44>
		ROSA_yield();
8000008c:	f0 1f 00 07 	mcall	800000a8 <task1+0x48>
	}
80000090:	ce bb       	rjmp	80000066 <task1+0x6>
80000092:	00 00       	add	r0,r0
80000094:	80 00       	ld.sh	r0,r0[0x0]
80000096:	0e 40       	or	r0,r7
80000098:	80 00       	ld.sh	r0,r0[0x0]
8000009a:	07 c8       	ld.ub	r8,r3[0x4]
8000009c:	80 00       	ld.sh	r0,r0[0x0]
8000009e:	0e 60       	and	r0,r7
800000a0:	00 00       	add	r0,r0
800000a2:	06 50       	eor	r0,r3
800000a4:	80 00       	ld.sh	r0,r0[0x0]
800000a6:	06 94       	mov	r4,r3
800000a8:	80 00       	ld.sh	r0,r0[0x0]
800000aa:	09 d6       	ld.ub	r6,r4[0x5]

800000ac <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
800000ac:	eb cd 40 80 	pushm	r7,lr
800000b0:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
800000b2:	f0 1f 00 0b 	mcall	800000dc <main+0x30>
	
	//Create tasks and install them into the ROSA kernel
	ROSA_taskCreate(&t1_tcb, "tsk1", task1, T1_STACK_SIZE, 3);
800000b6:	30 38       	mov	r8,3
800000b8:	e0 69 01 00 	mov	r9,256
800000bc:	48 9a       	lddpc	r10,800000e0 <main+0x34>
800000be:	48 ab       	lddpc	r11,800000e4 <main+0x38>
800000c0:	48 ac       	lddpc	r12,800000e8 <main+0x3c>
800000c2:	f0 1f 00 0b 	mcall	800000ec <main+0x40>
	ROSA_taskCreate(&t2_tcb, "tsk2", task2, T2_STACK_SIZE, 2);
800000c6:	30 28       	mov	r8,2
800000c8:	e0 69 01 00 	mov	r9,256
800000cc:	48 9a       	lddpc	r10,800000f0 <main+0x44>
800000ce:	48 ab       	lddpc	r11,800000f4 <main+0x48>
800000d0:	48 ac       	lddpc	r12,800000f8 <main+0x4c>
800000d2:	f0 1f 00 07 	mcall	800000ec <main+0x40>

	ROSA_startScheduler();
800000d6:	f0 1f 00 0a 	mcall	800000fc <main+0x50>

	/* Execution will never return here */
	while(1);
800000da:	c0 08       	rjmp	800000da <main+0x2e>
800000dc:	80 00       	ld.sh	r0,r0[0x0]
800000de:	03 c8       	ld.ub	r8,r1[0x4]
800000e0:	80 00       	ld.sh	r0,r0[0x0]
800000e2:	00 60       	and	r0,r0
800000e4:	80 00       	ld.sh	r0,r0[0x0]
800000e6:	00 14       	sub	r4,r0
800000e8:	00 00       	add	r0,r0
800000ea:	06 54       	eor	r4,r3
800000ec:	80 00       	ld.sh	r0,r0[0x0]
800000ee:	05 68       	ld.uh	r8,--r2
800000f0:	80 00       	ld.sh	r0,r0[0x0]
800000f2:	00 24       	rsub	r4,r0
800000f4:	80 00       	ld.sh	r0,r0[0x0]
800000f6:	00 1c       	sub	r12,r0
800000f8:	00 00       	add	r0,r0
800000fa:	06 50       	eor	r0,r3
800000fc:	80 00       	ld.sh	r0,r0[0x0]
800000fe:	0a 40       	or	r0,r5

80000100 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
80000100:	eb cd 40 80 	pushm	r7,lr
80000104:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
80000106:	f0 1f 00 05 	mcall	80000118 <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
8000010a:	f0 1f 00 05 	mcall	8000011c <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it
8000010e:	f0 1f 00 05 	mcall	80000120 <ROSA_yieldFromISR+0x20>
}
80000112:	e3 cd 80 80 	ldm	sp++,r7,pc
80000116:	00 00       	add	r0,r0
80000118:	80 00       	ld.sh	r0,r0[0x0]
8000011a:	21 7e       	sub	lr,23
8000011c:	80 00       	ld.sh	r0,r0[0x0]
8000011e:	09 f4       	ld.ub	r4,r4[0x7]
80000120:	80 00       	ld.sh	r0,r0[0x0]
80000122:	21 b8       	sub	r8,27

80000124 <usart_options>:
80000124:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
80000134:	00 00 00 00 64 6c 61 79 00 00 00 00 55 53 41 52     ....dlay....USAR
80000144:	54 20 69 6e 69 74 69 61 6c 69 7a 65 64 0d 0a 00     T initialized...

80000154 <idle>:

/** @fn void idle(void)
	@brief Idle task body.
*/
void idle(void)
{
80000154:	eb cd 40 80 	pushm	r7,lr
80000158:	1a 97       	mov	r7,sp
	while(1)
	{
		ledToggle(LED7_GPIO);
8000015a:	33 6c       	mov	r12,54
8000015c:	f0 1f 00 02 	mcall	80000164 <idle+0x10>
		//usartWriteLine(USART, "idle\n");
	}
80000160:	cf db       	rjmp	8000015a <idle+0x6>
80000162:	00 00       	add	r0,r0
80000164:	80 00       	ld.sh	r0,r0[0x0]
80000166:	0e 80       	andn	r0,r7

80000168 <ROSA_tcbInstall>:
 * Comment:
 * 	Install the TCB into the TCBLIST.
 *
 **********************************************************/
void ROSA_tcbInstall(tcb * tcbTask)
{
80000168:	eb cd 40 80 	pushm	r7,lr
8000016c:	1a 97       	mov	r7,sp
8000016e:	20 1d       	sub	sp,4
80000170:	ef 4c ff fc 	st.w	r7[-4],r12
	/* Is this the first tcb installed? */
	if(TCBLIST == NULL)
80000174:	49 38       	lddpc	r8,800001c0 <ROSA_tcbInstall+0x58>
80000176:	70 08       	ld.w	r8,r8[0x0]
80000178:	58 08       	cp.w	r8,0
8000017a:	c1 01       	brne	8000019a <ROSA_tcbInstall+0x32>
	{
		TCBLIST = tcbTask;
8000017c:	49 18       	lddpc	r8,800001c0 <ROSA_tcbInstall+0x58>
8000017e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000182:	91 09       	st.w	r8[0x0],r9
		TCBLIST->nexttcb = tcbTask;			//Install the first tcb
80000184:	48 f8       	lddpc	r8,800001c0 <ROSA_tcbInstall+0x58>
80000186:	70 08       	ld.w	r8,r8[0x0]
80000188:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000018c:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
8000018e:	48 d8       	lddpc	r8,800001c0 <ROSA_tcbInstall+0x58>
80000190:	70 09       	ld.w	r9,r8[0x0]
80000192:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000196:	91 09       	st.w	r8[0x0],r9
80000198:	c1 08       	rjmp	800001b8 <ROSA_tcbInstall+0x50>
	}
	else
	{
		tcbTask->nexttcb = TCBLIST->nexttcb;
8000019a:	48 a8       	lddpc	r8,800001c0 <ROSA_tcbInstall+0x58>
8000019c:	70 08       	ld.w	r8,r8[0x0]
8000019e:	70 09       	ld.w	r9,r8[0x0]
800001a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001a4:	91 09       	st.w	r8[0x0],r9
		TCBLIST->nexttcb = tcbTask;
800001a6:	48 78       	lddpc	r8,800001c0 <ROSA_tcbInstall+0x58>
800001a8:	70 08       	ld.w	r8,r8[0x0]
800001aa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800001ae:	91 09       	st.w	r8[0x0],r9
		TCBLIST = tcbTask;
800001b0:	48 48       	lddpc	r8,800001c0 <ROSA_tcbInstall+0x58>
800001b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800001b6:	91 09       	st.w	r8[0x0],r9
	}
}
800001b8:	2f fd       	sub	sp,-4
800001ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800001be:	00 00       	add	r0,r0
800001c0:	00 00       	add	r0,r0
800001c2:	06 5c       	eor	r12,r3

800001c4 <ROSA_tcbUninstall>:

void ROSA_tcbUninstall(tcb * tcbTask)
{
800001c4:	eb cd 40 80 	pushm	r7,lr
800001c8:	1a 97       	mov	r7,sp
800001ca:	20 1d       	sub	sp,4
800001cc:	ef 4c ff fc 	st.w	r7[-4],r12
	while (TCBLIST->nexttcb != tcbTask)
800001d0:	c0 68       	rjmp	800001dc <ROSA_tcbUninstall+0x18>
	{
		TCBLIST = TCBLIST->nexttcb;
800001d2:	49 88       	lddpc	r8,80000230 <ROSA_tcbUninstall+0x6c>
800001d4:	70 08       	ld.w	r8,r8[0x0]
800001d6:	70 09       	ld.w	r9,r8[0x0]
800001d8:	49 68       	lddpc	r8,80000230 <ROSA_tcbUninstall+0x6c>
800001da:	91 09       	st.w	r8[0x0],r9
	}
}

void ROSA_tcbUninstall(tcb * tcbTask)
{
	while (TCBLIST->nexttcb != tcbTask)
800001dc:	49 58       	lddpc	r8,80000230 <ROSA_tcbUninstall+0x6c>
800001de:	70 08       	ld.w	r8,r8[0x0]
800001e0:	70 09       	ld.w	r9,r8[0x0]
800001e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001e6:	10 39       	cp.w	r9,r8
800001e8:	cf 51       	brne	800001d2 <ROSA_tcbUninstall+0xe>
	{
		TCBLIST = TCBLIST->nexttcb;
	}
	
	TCBLIST->nexttcb = tcbTask->nexttcb;
800001ea:	49 28       	lddpc	r8,80000230 <ROSA_tcbUninstall+0x6c>
800001ec:	70 08       	ld.w	r8,r8[0x0]
800001ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
800001f2:	72 09       	ld.w	r9,r9[0x0]
800001f4:	91 09       	st.w	r8[0x0],r9
	tcbTask->nexttcb = NULL;
800001f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001fa:	30 09       	mov	r9,0
800001fc:	91 09       	st.w	r8[0x0],r9
	
	if (tcbTask->delay)	
800001fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000202:	f0 e8 00 68 	ld.d	r8,r8[104]
80000206:	58 08       	cp.w	r8,0
80000208:	5c 29       	cpc	r9
8000020a:	c0 70       	breq	80000218 <ROSA_tcbUninstall+0x54>
	{
		TCBLIST = TCBLIST->nexttcb;
8000020c:	48 98       	lddpc	r8,80000230 <ROSA_tcbUninstall+0x6c>
8000020e:	70 08       	ld.w	r8,r8[0x0]
80000210:	70 09       	ld.w	r9,r8[0x0]
80000212:	48 88       	lddpc	r8,80000230 <ROSA_tcbUninstall+0x6c>
80000214:	91 09       	st.w	r8[0x0],r9
80000216:	c0 a8       	rjmp	8000022a <ROSA_tcbUninstall+0x66>
	}
	else if (TCBLIST == tcbTask)
80000218:	48 68       	lddpc	r8,80000230 <ROSA_tcbUninstall+0x6c>
8000021a:	70 09       	ld.w	r9,r8[0x0]
8000021c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000220:	10 39       	cp.w	r9,r8
80000222:	c0 41       	brne	8000022a <ROSA_tcbUninstall+0x66>
	{
		TCBLIST = NULL;	
80000224:	48 38       	lddpc	r8,80000230 <ROSA_tcbUninstall+0x6c>
80000226:	30 09       	mov	r9,0
80000228:	91 09       	st.w	r8[0x0],r9
	}
}
8000022a:	2f fd       	sub	sp,-4
8000022c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000230:	00 00       	add	r0,r0
80000232:	06 5c       	eor	r12,r3

80000234 <readyQueueSearch>:
/** @fn int readyQueueSearch(void)
	@brief Search for the first non-empty highest priority queue.
	@return Pointer to the last tcb in the queue (in other words - PA[i]).
*/
tcb * readyQueueSearch(void)
{
80000234:	eb cd 40 80 	pushm	r7,lr
80000238:	1a 97       	mov	r7,sp
8000023a:	20 1d       	sub	sp,4
	int i = MAXNPRIO;
8000023c:	30 c8       	mov	r8,12
8000023e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Search for the first non-empty queue. */
	while ( (PA[--i] == NULL) && (i > 0));
80000242:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000246:	20 18       	sub	r8,1
80000248:	ef 48 ff fc 	st.w	r7[-4],r8
8000024c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000250:	49 18       	lddpc	r8,80000294 <readyQueueSearch+0x60>
80000252:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000256:	58 08       	cp.w	r8,0
80000258:	c0 61       	brne	80000264 <readyQueueSearch+0x30>
8000025a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000025e:	58 08       	cp.w	r8,0
80000260:	fe 99 ff f1 	brgt	80000242 <readyQueueSearch+0xe>
	
	return ((i == 0) && (PA[i] == NULL)) ? IDLETASK : PA[i];
80000264:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000268:	58 08       	cp.w	r8,0
8000026a:	c0 81       	brne	8000027a <readyQueueSearch+0x46>
8000026c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000270:	48 98       	lddpc	r8,80000294 <readyQueueSearch+0x60>
80000272:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000276:	58 08       	cp.w	r8,0
80000278:	c0 70       	breq	80000286 <readyQueueSearch+0x52>
8000027a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000027e:	48 68       	lddpc	r8,80000294 <readyQueueSearch+0x60>
80000280:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000284:	c0 38       	rjmp	8000028a <readyQueueSearch+0x56>
80000286:	48 58       	lddpc	r8,80000298 <readyQueueSearch+0x64>
80000288:	70 08       	ld.w	r8,r8[0x0]
}
8000028a:	10 9c       	mov	r12,r8
8000028c:	2f fd       	sub	sp,-4
8000028e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000292:	00 00       	add	r0,r0
80000294:	00 00       	add	r0,r0
80000296:	06 60       	and	r0,r3
80000298:	00 00       	add	r0,r0
8000029a:	06 58       	eor	r8,r3

8000029c <dlay>:

void dlay()
{
8000029c:	eb cd 40 80 	pushm	r7,lr
800002a0:	1a 97       	mov	r7,sp
800002a2:	20 1d       	sub	sp,4
	tcb * tmp;
	
	while (1)
	{	
		interruptDisable();
800002a4:	f0 1f 00 26 	mcall	8000033c <dlay+0xa0>
			
		while ((DQ) && (DQ->delay <= systemTick))
800002a8:	c3 08       	rjmp	80000308 <dlay+0x6c>
		{	
			tmp = DQ;
800002aa:	4a 68       	lddpc	r8,80000340 <dlay+0xa4>
800002ac:	70 08       	ld.w	r8,r8[0x0]
800002ae:	ef 48 ff fc 	st.w	r7[-4],r8

			ROSA_TM_ACTION(DQ, DQ, Uninstall);
800002b2:	4a 48       	lddpc	r8,80000340 <dlay+0xa4>
800002b4:	70 09       	ld.w	r9,r8[0x0]
800002b6:	4a 48       	lddpc	r8,80000344 <dlay+0xa8>
800002b8:	91 09       	st.w	r8[0x0],r9
800002ba:	4a 28       	lddpc	r8,80000340 <dlay+0xa4>
800002bc:	70 08       	ld.w	r8,r8[0x0]
800002be:	10 9c       	mov	r12,r8
800002c0:	f0 1f 00 22 	mcall	80000348 <dlay+0xac>
800002c4:	4a 08       	lddpc	r8,80000344 <dlay+0xa8>
800002c6:	70 09       	ld.w	r9,r8[0x0]
800002c8:	49 e8       	lddpc	r8,80000340 <dlay+0xa4>
800002ca:	91 09       	st.w	r8[0x0],r9
		
			tmp->delay = 0;
800002cc:	ee fa ff fc 	ld.w	r10,r7[-4]
800002d0:	30 08       	mov	r8,0
800002d2:	30 09       	mov	r9,0
800002d4:	f4 e9 00 68 	st.d	r10[104],r8
			ROSA_TM_ACTION(PA[tmp->priority], tmp, Install);
800002d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002dc:	f1 38 00 64 	ld.ub	r8,r8[100]
800002e0:	10 99       	mov	r9,r8
800002e2:	49 b8       	lddpc	r8,8000034c <dlay+0xb0>
800002e4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800002e8:	49 78       	lddpc	r8,80000344 <dlay+0xa8>
800002ea:	91 09       	st.w	r8[0x0],r9
800002ec:	ee fc ff fc 	ld.w	r12,r7[-4]
800002f0:	f0 1f 00 18 	mcall	80000350 <dlay+0xb4>
800002f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002f8:	f1 38 00 64 	ld.ub	r8,r8[100]
800002fc:	10 99       	mov	r9,r8
800002fe:	49 28       	lddpc	r8,80000344 <dlay+0xa8>
80000300:	70 0a       	ld.w	r10,r8[0x0]
80000302:	49 38       	lddpc	r8,8000034c <dlay+0xb0>
80000304:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	
	while (1)
	{	
		interruptDisable();
			
		while ((DQ) && (DQ->delay <= systemTick))
80000308:	48 e8       	lddpc	r8,80000340 <dlay+0xa4>
8000030a:	70 08       	ld.w	r8,r8[0x0]
8000030c:	58 08       	cp.w	r8,0
8000030e:	c0 d0       	breq	80000328 <dlay+0x8c>
80000310:	48 c8       	lddpc	r8,80000340 <dlay+0xa4>
80000312:	70 08       	ld.w	r8,r8[0x0]
80000314:	f0 ea 00 68 	ld.d	r10,r8[104]
80000318:	48 f8       	lddpc	r8,80000354 <dlay+0xb8>
8000031a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000031e:	10 3a       	cp.w	r10,r8
80000320:	f2 0b 13 00 	cpc	r11,r9
80000324:	fe 98 ff c3 	brls	800002aa <dlay+0xe>
		
			tmp->delay = 0;
			ROSA_TM_ACTION(PA[tmp->priority], tmp, Install);
		}

		PREEMPTASK = readyQueueSearch();
80000328:	f0 1f 00 0c 	mcall	80000358 <dlay+0xbc>
8000032c:	18 99       	mov	r9,r12
8000032e:	48 c8       	lddpc	r8,8000035c <dlay+0xc0>
80000330:	91 09       	st.w	r8[0x0],r9
		
		interruptEnable();
80000332:	f0 1f 00 0c 	mcall	80000360 <dlay+0xc4>
		
		ROSA_yield();
80000336:	f0 1f 00 0c 	mcall	80000364 <dlay+0xc8>
	}
8000033a:	cb 5b       	rjmp	800002a4 <dlay+0x8>
8000033c:	80 00       	ld.sh	r0,r0[0x0]
8000033e:	21 66       	sub	r6,22
80000340:	00 00       	add	r0,r0
80000342:	07 10       	ld.sh	r0,r3++
80000344:	00 00       	add	r0,r0
80000346:	06 5c       	eor	r12,r3
80000348:	80 00       	ld.sh	r0,r0[0x0]
8000034a:	01 c4       	ld.ub	r4,r0[0x4]
8000034c:	00 00       	add	r0,r0
8000034e:	06 60       	and	r0,r3
80000350:	80 00       	ld.sh	r0,r0[0x0]
80000352:	01 68       	ld.uh	r8,--r0
80000354:	00 00       	add	r0,r0
80000356:	07 88       	ld.ub	r8,r3[0x0]
80000358:	80 00       	ld.sh	r0,r0[0x0]
8000035a:	02 34       	cp.w	r4,r1
8000035c:	00 00       	add	r0,r0
8000035e:	06 94       	mov	r4,r3
80000360:	80 00       	ld.sh	r0,r0[0x0]
80000362:	21 6a       	sub	r10,22
80000364:	80 00       	ld.sh	r0,r0[0x0]
80000366:	09 d6       	ld.ub	r6,r4[0x5]

80000368 <sysTasksCreate>:

/** @fn void idleCreate(void)
	@brief Creation of the idle task.
*/
void sysTasksCreate(void)
{
80000368:	eb cd 40 80 	pushm	r7,lr
8000036c:	1a 97       	mov	r7,sp
	ROSA_tcbCreate(&IDLETASK_TCB, "idle", idle, idle_stack, SYS_TASK_STACK_SIZE);
8000036e:	32 08       	mov	r8,32
80000370:	48 b9       	lddpc	r9,8000039c <sysTasksCreate+0x34>
80000372:	48 ca       	lddpc	r10,800003a0 <sysTasksCreate+0x38>
80000374:	48 cb       	lddpc	r11,800003a4 <sysTasksCreate+0x3c>
80000376:	48 dc       	lddpc	r12,800003a8 <sysTasksCreate+0x40>
80000378:	f0 1f 00 0d 	mcall	800003ac <sysTasksCreate+0x44>
	IDLETASK = &IDLETASK_TCB;
8000037c:	48 d8       	lddpc	r8,800003b0 <sysTasksCreate+0x48>
8000037e:	48 b9       	lddpc	r9,800003a8 <sysTasksCreate+0x40>
80000380:	91 09       	st.w	r8[0x0],r9
	
	ROSA_tcbCreate(&DELHANDL_TCB, "dlay", dlay, dlay_stack, SYS_TASK_STACK_SIZE);
80000382:	32 08       	mov	r8,32
80000384:	48 c9       	lddpc	r9,800003b4 <sysTasksCreate+0x4c>
80000386:	48 da       	lddpc	r10,800003b8 <sysTasksCreate+0x50>
80000388:	48 db       	lddpc	r11,800003bc <sysTasksCreate+0x54>
8000038a:	48 ec       	lddpc	r12,800003c0 <sysTasksCreate+0x58>
8000038c:	f0 1f 00 08 	mcall	800003ac <sysTasksCreate+0x44>
	DELHANDL = &DELHANDL_TCB;
80000390:	48 d8       	lddpc	r8,800003c4 <sysTasksCreate+0x5c>
80000392:	48 c9       	lddpc	r9,800003c0 <sysTasksCreate+0x58>
80000394:	91 09       	st.w	r8[0x0],r9
}
80000396:	e3 cd 80 80 	ldm	sp++,r7,pc
8000039a:	00 00       	add	r0,r0
8000039c:	00 00       	add	r0,r0
8000039e:	05 18       	ld.sh	r8,r2++
800003a0:	80 00       	ld.sh	r0,r0[0x0]
800003a2:	01 54       	ld.sh	r4,--r0
800003a4:	80 00       	ld.sh	r0,r0[0x0]
800003a6:	01 30       	ld.ub	r0,r0++
800003a8:	00 00       	add	r0,r0
800003aa:	07 14       	ld.sh	r4,r3++
800003ac:	80 00       	ld.sh	r0,r0[0x0]
800003ae:	04 b4       	st.h	r2++,r4
800003b0:	00 00       	add	r0,r0
800003b2:	06 58       	eor	r8,r3
800003b4:	00 00       	add	r0,r0
800003b6:	05 98       	ld.ub	r8,r2[0x1]
800003b8:	80 00       	ld.sh	r0,r0[0x0]
800003ba:	02 9c       	mov	r12,r1
800003bc:	80 00       	ld.sh	r0,r0[0x0]
800003be:	01 38       	ld.ub	r8,r0++
800003c0:	00 00       	add	r0,r0
800003c2:	06 98       	mov	r8,r3
800003c4:	00 00       	add	r0,r0
800003c6:	06 90       	mov	r0,r3

800003c8 <ROSA_init>:

void ROSA_init(void)
{
800003c8:	eb cd 40 80 	pushm	r7,lr
800003cc:	1a 97       	mov	r7,sp
800003ce:	20 1d       	sub	sp,4
	int i = 0;
800003d0:	30 08       	mov	r8,0
800003d2:	ef 48 ff fc 	st.w	r7[-4],r8
	systemTick = 0;
800003d6:	4a 5a       	lddpc	r10,80000468 <ROSA_init+0xa0>
800003d8:	30 08       	mov	r8,0
800003da:	30 09       	mov	r9,0
800003dc:	f4 e9 00 00 	st.d	r10[0],r8
	
	//Do initialization of I/O drivers
	ledInit();									//LEDs
800003e0:	f0 1f 00 23 	mcall	8000046c <ROSA_init+0xa4>
	buttonInit();								//Buttons
800003e4:	f0 1f 00 23 	mcall	80000470 <ROSA_init+0xa8>
	joystickInit();								//Joystick
800003e8:	f0 1f 00 23 	mcall	80000474 <ROSA_init+0xac>
	potInit();									//Potentiometer
800003ec:	f0 1f 00 23 	mcall	80000478 <ROSA_init+0xb0>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
800003f0:	e0 6a 1b 00 	mov	r10,6912
800003f4:	ea 1a 00 b7 	orh	r10,0xb7
800003f8:	4a 1b       	lddpc	r11,8000047c <ROSA_init+0xb4>
800003fa:	fe 7c 14 00 	mov	r12,-60416
800003fe:	f0 1f 00 21 	mcall	80000480 <ROSA_init+0xb8>
	usartWriteLine(USART, "USART initialized\r\n");
80000402:	4a 1b       	lddpc	r11,80000484 <ROSA_init+0xbc>
80000404:	fe 7c 14 00 	mov	r12,-60416
80000408:	f0 1f 00 20 	mcall	80000488 <ROSA_init+0xc0>

	interruptInit();
8000040c:	f0 1f 00 20 	mcall	8000048c <ROSA_init+0xc4>
	interruptEnable();
80000410:	f0 1f 00 20 	mcall	80000490 <ROSA_init+0xc8>
	timerInit(1);
80000414:	30 1c       	mov	r12,1
80000416:	f0 1f 00 20 	mcall	80000494 <ROSA_init+0xcc>
	timerStart();
8000041a:	f0 1f 00 20 	mcall	80000498 <ROSA_init+0xd0>
	
	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
8000041e:	4a 08       	lddpc	r8,8000049c <ROSA_init+0xd4>
80000420:	30 09       	mov	r9,0
80000422:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
80000424:	49 f8       	lddpc	r8,800004a0 <ROSA_init+0xd8>
80000426:	30 09       	mov	r9,0
80000428:	91 09       	st.w	r8[0x0],r9
	PREEMPTASK = NULL;
8000042a:	49 f8       	lddpc	r8,800004a4 <ROSA_init+0xdc>
8000042c:	30 09       	mov	r9,0
8000042e:	91 09       	st.w	r8[0x0],r9
	DQ = NULL;
80000430:	49 e8       	lddpc	r8,800004a8 <ROSA_init+0xe0>
80000432:	30 09       	mov	r9,0
80000434:	91 09       	st.w	r8[0x0],r9
	
	/* Create system's tasks (idle, delay). */
	sysTasksCreate();
80000436:	f0 1f 00 1e 	mcall	800004ac <ROSA_init+0xe4>
	
	for (i = 0; i < MAXNPRIO; PA[i++] = NULL);
8000043a:	30 08       	mov	r8,0
8000043c:	ef 48 ff fc 	st.w	r7[-4],r8
80000440:	c0 c8       	rjmp	80000458 <ROSA_init+0x90>
80000442:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000446:	49 b8       	lddpc	r8,800004b0 <ROSA_init+0xe8>
80000448:	30 0a       	mov	r10,0
8000044a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000044e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000452:	2f f8       	sub	r8,-1
80000454:	ef 48 ff fc 	st.w	r7[-4],r8
80000458:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000045c:	58 b8       	cp.w	r8,11
8000045e:	fe 9a ff f2 	brle	80000442 <ROSA_init+0x7a>
}
80000462:	2f fd       	sub	sp,-4
80000464:	e3 cd 80 80 	ldm	sp++,r7,pc
80000468:	00 00       	add	r0,r0
8000046a:	07 88       	ld.ub	r8,r3[0x0]
8000046c:	80 00       	ld.sh	r0,r0[0x0]
8000046e:	0d b4       	ld.ub	r4,r6[0x3]
80000470:	80 00       	ld.sh	r0,r0[0x0]
80000472:	0b bc       	ld.ub	r12,r5[0x3]
80000474:	80 00       	ld.sh	r0,r0[0x0]
80000476:	0b e4       	ld.ub	r4,r5[0x6]
80000478:	80 00       	ld.sh	r0,r0[0x0]
8000047a:	0e a0       	st.w	r7++,r0
8000047c:	80 00       	ld.sh	r0,r0[0x0]
8000047e:	01 24       	ld.uh	r4,r0++
80000480:	80 00       	ld.sh	r0,r0[0x0]
80000482:	10 54       	eor	r4,r8
80000484:	80 00       	ld.sh	r0,r0[0x0]
80000486:	01 40       	ld.w	r0,--r0
80000488:	80 00       	ld.sh	r0,r0[0x0]
8000048a:	11 d0       	ld.ub	r0,r8[0x5]
8000048c:	80 00       	ld.sh	r0,r0[0x0]
8000048e:	21 48       	sub	r8,20
80000490:	80 00       	ld.sh	r0,r0[0x0]
80000492:	21 6a       	sub	r10,22
80000494:	80 00       	ld.sh	r0,r0[0x0]
80000496:	16 48       	or	r8,r11
80000498:	80 00       	ld.sh	r0,r0[0x0]
8000049a:	16 76       	tst	r6,r11
8000049c:	00 00       	add	r0,r0
8000049e:	06 5c       	eor	r12,r3
800004a0:	00 00       	add	r0,r0
800004a2:	07 0c       	ld.w	r12,r3++
800004a4:	00 00       	add	r0,r0
800004a6:	06 94       	mov	r4,r3
800004a8:	00 00       	add	r0,r0
800004aa:	07 10       	ld.sh	r0,r3++
800004ac:	80 00       	ld.sh	r0,r0[0x0]
800004ae:	03 68       	ld.uh	r8,--r1
800004b0:	00 00       	add	r0,r0
800004b2:	06 60       	and	r0,r3

800004b4 <ROSA_tcbCreate>:

void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
800004b4:	eb cd 40 80 	pushm	r7,lr
800004b8:	1a 97       	mov	r7,sp
800004ba:	20 6d       	sub	sp,24
800004bc:	ef 4c ff f8 	st.w	r7[-8],r12
800004c0:	ef 4b ff f4 	st.w	r7[-12],r11
800004c4:	ef 4a ff f0 	st.w	r7[-16],r10
800004c8:	ef 49 ff ec 	st.w	r7[-20],r9
800004cc:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++)
800004d0:	30 08       	mov	r8,0
800004d2:	ef 48 ff fc 	st.w	r7[-4],r8
800004d6:	c1 48       	rjmp	800004fe <ROSA_tcbCreate+0x4a>
	{
		tcbTask->id[i] = tcbName[i];
800004d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800004dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004e0:	ee fa ff f4 	ld.w	r10,r7[-12]
800004e4:	f4 08 00 08 	add	r8,r10,r8
800004e8:	11 88       	ld.ub	r8,r8[0x0]
800004ea:	ee fa ff f8 	ld.w	r10,r7[-8]
800004ee:	f4 09 00 09 	add	r9,r10,r9
800004f2:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++)
800004f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004f8:	2f f8       	sub	r8,-1
800004fa:	ef 48 ff fc 	st.w	r7[-4],r8
800004fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000502:	58 38       	cp.w	r8,3
80000504:	fe 9a ff ea 	brle	800004d8 <ROSA_tcbCreate+0x24>
	{
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
80000508:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000050c:	30 09       	mov	r9,0
8000050e:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
80000510:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000514:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000518:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
8000051a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000051e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000522:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
80000524:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000528:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000052c:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
8000052e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000532:	a3 68       	lsl	r8,0x2
80000534:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000538:	10 09       	add	r9,r8
8000053a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000053e:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
80000540:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000544:	70 39       	ld.w	r9,r8[0xc]
80000546:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000054a:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
8000054c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000550:	fc 19 00 1c 	movh	r9,0x1c
80000554:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
80000556:	ee fc ff f8 	ld.w	r12,r7[-8]
8000055a:	f0 1f 00 03 	mcall	80000564 <ROSA_tcbCreate+0xb0>
}
8000055e:	2f ad       	sub	sp,-24
80000560:	e3 cd 80 80 	ldm	sp++,r7,pc
80000564:	80 00       	ld.sh	r0,r0[0x0]
80000566:	09 4a       	ld.w	r10,--r4

80000568 <ROSA_taskCreate>:

int16_t ROSA_taskCreate(ROSA_taskHandle_t ** pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t prio)
{
80000568:	eb cd 40 80 	pushm	r7,lr
8000056c:	1a 97       	mov	r7,sp
8000056e:	20 6d       	sub	sp,24
80000570:	ef 4c ff f8 	st.w	r7[-8],r12
80000574:	ef 4b ff f4 	st.w	r7[-12],r11
80000578:	ef 4a ff f0 	st.w	r7[-16],r10
8000057c:	ef 49 ff ec 	st.w	r7[-20],r9
80000580:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) malloc(stackSize * sizeof(uint32_t)); 
80000584:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000588:	a3 68       	lsl	r8,0x2
8000058a:	10 9c       	mov	r12,r8
8000058c:	f0 1f 00 3a 	mcall	80000674 <ROSA_taskCreate+0x10c>
80000590:	18 98       	mov	r8,r12
80000592:	ef 48 ff fc 	st.w	r7[-4],r8
	MEM_CHECK(tcbStack);
80000596:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000059a:	58 08       	cp.w	r8,0
8000059c:	c0 31       	brne	800005a2 <ROSA_taskCreate+0x3a>
8000059e:	3f f8       	mov	r8,-1
800005a0:	c6 58       	rjmp	8000066a <ROSA_taskCreate+0x102>
	
	*pth = (ROSA_taskHandle_t *) malloc(sizeof(ROSA_taskHandle_t));
800005a2:	37 4c       	mov	r12,116
800005a4:	f0 1f 00 34 	mcall	80000674 <ROSA_taskCreate+0x10c>
800005a8:	18 98       	mov	r8,r12
800005aa:	10 99       	mov	r9,r8
800005ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005b0:	91 09       	st.w	r8[0x0],r9
	MEM_CHECK(*pth);
800005b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005b6:	70 08       	ld.w	r8,r8[0x0]
800005b8:	58 08       	cp.w	r8,0
800005ba:	c0 31       	brne	800005c0 <ROSA_taskCreate+0x58>
800005bc:	3f f8       	mov	r8,-1
800005be:	c5 68       	rjmp	8000066a <ROSA_taskCreate+0x102>
	
	(*pth)->priority = prio;
800005c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005c4:	70 09       	ld.w	r9,r8[0x0]
800005c6:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800005ca:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
800005ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005d2:	70 0a       	ld.w	r10,r8[0x0]
800005d4:	30 08       	mov	r8,0
800005d6:	30 09       	mov	r9,0
800005d8:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
800005dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005e0:	70 09       	ld.w	r9,r8[0x0]
800005e2:	30 08       	mov	r8,0
800005e4:	f3 68 00 70 	st.b	r9[112],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
800005e8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800005ec:	ee f9 ff f8 	ld.w	r9,r7[-8]
800005f0:	72 0c       	ld.w	r12,r9[0x0]
800005f2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800005f6:	ee fa ff f0 	ld.w	r10,r7[-16]
800005fa:	ee fb ff f4 	ld.w	r11,r7[-12]
800005fe:	f0 1f 00 1f 	mcall	80000678 <ROSA_taskCreate+0x110>
	ROSA_TM_ACTION(PA[(*pth)->priority], *pth, Install);
80000602:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000606:	70 08       	ld.w	r8,r8[0x0]
80000608:	f1 38 00 64 	ld.ub	r8,r8[100]
8000060c:	10 99       	mov	r9,r8
8000060e:	49 c8       	lddpc	r8,8000067c <ROSA_taskCreate+0x114>
80000610:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000614:	49 b8       	lddpc	r8,80000680 <ROSA_taskCreate+0x118>
80000616:	91 09       	st.w	r8[0x0],r9
80000618:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000061c:	70 08       	ld.w	r8,r8[0x0]
8000061e:	10 9c       	mov	r12,r8
80000620:	f0 1f 00 19 	mcall	80000684 <ROSA_taskCreate+0x11c>
80000624:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000628:	70 08       	ld.w	r8,r8[0x0]
8000062a:	f1 38 00 64 	ld.ub	r8,r8[100]
8000062e:	10 99       	mov	r9,r8
80000630:	49 48       	lddpc	r8,80000680 <ROSA_taskCreate+0x118>
80000632:	70 0a       	ld.w	r10,r8[0x0]
80000634:	49 28       	lddpc	r8,8000067c <ROSA_taskCreate+0x114>
80000636:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
	if ((EXECTASK) && (EXECTASK->priority < prio))
8000063a:	49 48       	lddpc	r8,80000688 <ROSA_taskCreate+0x120>
8000063c:	70 08       	ld.w	r8,r8[0x0]
8000063e:	58 08       	cp.w	r8,0
80000640:	c1 40       	breq	80000668 <ROSA_taskCreate+0x100>
80000642:	49 28       	lddpc	r8,80000688 <ROSA_taskCreate+0x120>
80000644:	70 08       	ld.w	r8,r8[0x0]
80000646:	f1 38 00 64 	ld.ub	r8,r8[100]
8000064a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000064e:	f0 09 18 00 	cp.b	r9,r8
80000652:	e0 88 00 0b 	brls	80000668 <ROSA_taskCreate+0x100>
	{
		PREEMPTASK = PA[prio];
80000656:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000065a:	48 98       	lddpc	r8,8000067c <ROSA_taskCreate+0x114>
8000065c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000660:	48 b8       	lddpc	r8,8000068c <ROSA_taskCreate+0x124>
80000662:	91 09       	st.w	r8[0x0],r9
		ROSA_yield();
80000664:	f0 1f 00 0b 	mcall	80000690 <ROSA_taskCreate+0x128>
	}	
	
	return 0;
80000668:	30 08       	mov	r8,0
}
8000066a:	10 9c       	mov	r12,r8
8000066c:	2f ad       	sub	sp,-24
8000066e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000672:	00 00       	add	r0,r0
80000674:	80 00       	ld.sh	r0,r0[0x0]
80000676:	17 98       	ld.ub	r8,r11[0x1]
80000678:	80 00       	ld.sh	r0,r0[0x0]
8000067a:	04 b4       	st.h	r2++,r4
8000067c:	00 00       	add	r0,r0
8000067e:	06 60       	and	r0,r3
80000680:	00 00       	add	r0,r0
80000682:	06 5c       	eor	r12,r3
80000684:	80 00       	ld.sh	r0,r0[0x0]
80000686:	01 68       	ld.uh	r8,--r0
80000688:	00 00       	add	r0,r0
8000068a:	07 0c       	ld.w	r12,r3++
8000068c:	00 00       	add	r0,r0
8000068e:	06 94       	mov	r4,r3
80000690:	80 00       	ld.sh	r0,r0[0x0]
80000692:	09 d6       	ld.ub	r6,r4[0x5]

80000694 <ROSA_taskDelete>:

int16_t ROSA_taskDelete(ROSA_taskHandle_t ** pth)
{
80000694:	eb cd 40 80 	pushm	r7,lr
80000698:	1a 97       	mov	r7,sp
8000069a:	20 1d       	sub	sp,4
8000069c:	ef 4c ff fc 	st.w	r7[-4],r12
	MEM_CHECK(*pth);
800006a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006a4:	70 08       	ld.w	r8,r8[0x0]
800006a6:	58 08       	cp.w	r8,0
800006a8:	c0 31       	brne	800006ae <ROSA_taskDelete+0x1a>
800006aa:	3f f8       	mov	r8,-1
800006ac:	c7 88       	rjmp	8000079c <ROSA_taskDelete+0x108>
			
	/* Extract task from its queue */
	if ((*pth)->delay)
800006ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006b2:	70 08       	ld.w	r8,r8[0x0]
800006b4:	f0 e8 00 68 	ld.d	r8,r8[104]
800006b8:	58 08       	cp.w	r8,0
800006ba:	5c 29       	cpc	r9
800006bc:	c1 00       	breq	800006dc <ROSA_taskDelete+0x48>
	{
		ROSA_TM_ACTION(DQ, *pth, Uninstall);
800006be:	4b a8       	lddpc	r8,800007a4 <ROSA_taskDelete+0x110>
800006c0:	70 09       	ld.w	r9,r8[0x0]
800006c2:	4b a8       	lddpc	r8,800007a8 <ROSA_taskDelete+0x114>
800006c4:	91 09       	st.w	r8[0x0],r9
800006c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006ca:	70 08       	ld.w	r8,r8[0x0]
800006cc:	10 9c       	mov	r12,r8
800006ce:	f0 1f 00 38 	mcall	800007ac <ROSA_taskDelete+0x118>
800006d2:	4b 68       	lddpc	r8,800007a8 <ROSA_taskDelete+0x114>
800006d4:	70 09       	ld.w	r9,r8[0x0]
800006d6:	4b 48       	lddpc	r8,800007a4 <ROSA_taskDelete+0x110>
800006d8:	91 09       	st.w	r8[0x0],r9
800006da:	c1 d8       	rjmp	80000714 <ROSA_taskDelete+0x80>
	}
	else
	{
		ROSA_TM_ACTION(PA[(*pth)->priority], *pth, Uninstall);
800006dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006e0:	70 08       	ld.w	r8,r8[0x0]
800006e2:	f1 38 00 64 	ld.ub	r8,r8[100]
800006e6:	10 99       	mov	r9,r8
800006e8:	4b 28       	lddpc	r8,800007b0 <ROSA_taskDelete+0x11c>
800006ea:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800006ee:	4a f8       	lddpc	r8,800007a8 <ROSA_taskDelete+0x114>
800006f0:	91 09       	st.w	r8[0x0],r9
800006f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006f6:	70 08       	ld.w	r8,r8[0x0]
800006f8:	10 9c       	mov	r12,r8
800006fa:	f0 1f 00 2d 	mcall	800007ac <ROSA_taskDelete+0x118>
800006fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000702:	70 08       	ld.w	r8,r8[0x0]
80000704:	f1 38 00 64 	ld.ub	r8,r8[100]
80000708:	10 99       	mov	r9,r8
8000070a:	4a 88       	lddpc	r8,800007a8 <ROSA_taskDelete+0x114>
8000070c:	70 0a       	ld.w	r10,r8[0x0]
8000070e:	4a 98       	lddpc	r8,800007b0 <ROSA_taskDelete+0x11c>
80000710:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
	
	/* Check for itself deletion */
	if (EXECTASK == (*pth)) 
80000714:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000718:	70 09       	ld.w	r9,r8[0x0]
8000071a:	4a 78       	lddpc	r8,800007b4 <ROSA_taskDelete+0x120>
8000071c:	70 08       	ld.w	r8,r8[0x0]
8000071e:	10 39       	cp.w	r9,r8
80000720:	c1 e1       	brne	8000075c <ROSA_taskDelete+0xc8>
	{
		/* Check the current queue for emptiness */
		if (PA[(*pth)->priority])
80000722:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000726:	70 08       	ld.w	r8,r8[0x0]
80000728:	f1 38 00 64 	ld.ub	r8,r8[100]
8000072c:	10 99       	mov	r9,r8
8000072e:	4a 18       	lddpc	r8,800007b0 <ROSA_taskDelete+0x11c>
80000730:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000734:	58 08       	cp.w	r8,0
80000736:	c0 e0       	breq	80000752 <ROSA_taskDelete+0xbe>
		{
			PREEMPTASK = PA[(*pth)->priority]->nexttcb;
80000738:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000073c:	70 08       	ld.w	r8,r8[0x0]
8000073e:	f1 38 00 64 	ld.ub	r8,r8[100]
80000742:	10 99       	mov	r9,r8
80000744:	49 b8       	lddpc	r8,800007b0 <ROSA_taskDelete+0x11c>
80000746:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000074a:	70 09       	ld.w	r9,r8[0x0]
8000074c:	49 b8       	lddpc	r8,800007b8 <ROSA_taskDelete+0x124>
8000074e:	91 09       	st.w	r8[0x0],r9
80000750:	c0 68       	rjmp	8000075c <ROSA_taskDelete+0xc8>
		}
		else
		{
			PREEMPTASK = readyQueueSearch();
80000752:	f0 1f 00 1b 	mcall	800007bc <ROSA_taskDelete+0x128>
80000756:	18 99       	mov	r9,r12
80000758:	49 88       	lddpc	r8,800007b8 <ROSA_taskDelete+0x124>
8000075a:	91 09       	st.w	r8[0x0],r9
		}
	}
		
	/* Task's stack memory deallocation */
	free( (*pth)->dataarea - (*pth)->datasize );
8000075c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000760:	70 08       	ld.w	r8,r8[0x0]
80000762:	70 39       	ld.w	r9,r8[0xc]
80000764:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000768:	70 08       	ld.w	r8,r8[0x0]
8000076a:	70 48       	ld.w	r8,r8[0x10]
8000076c:	a3 68       	lsl	r8,0x2
8000076e:	5c 38       	neg	r8
80000770:	f2 08 00 08 	add	r8,r9,r8
80000774:	10 9c       	mov	r12,r8
80000776:	f0 1f 00 13 	mcall	800007c0 <ROSA_taskDelete+0x12c>
	/* Task's memory deallocation */
	free(*pth);	
8000077a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000077e:	70 08       	ld.w	r8,r8[0x0]
80000780:	10 9c       	mov	r12,r8
80000782:	f0 1f 00 10 	mcall	800007c0 <ROSA_taskDelete+0x12c>
	/* *pth must be NULL */
	*pth = NULL;
80000786:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000078a:	30 09       	mov	r9,0
8000078c:	91 09       	st.w	r8[0x0],r9

	if (PREEMPTASK != NULL)
8000078e:	48 b8       	lddpc	r8,800007b8 <ROSA_taskDelete+0x124>
80000790:	70 08       	ld.w	r8,r8[0x0]
80000792:	58 08       	cp.w	r8,0
80000794:	c0 30       	breq	8000079a <ROSA_taskDelete+0x106>
	{
		ROSA_yield();
80000796:	f0 1f 00 0c 	mcall	800007c4 <ROSA_taskDelete+0x130>
	}
		
	return 1;
8000079a:	30 18       	mov	r8,1
}
8000079c:	10 9c       	mov	r12,r8
8000079e:	2f fd       	sub	sp,-4
800007a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800007a4:	00 00       	add	r0,r0
800007a6:	07 10       	ld.sh	r0,r3++
800007a8:	00 00       	add	r0,r0
800007aa:	06 5c       	eor	r12,r3
800007ac:	80 00       	ld.sh	r0,r0[0x0]
800007ae:	01 c4       	ld.ub	r4,r0[0x4]
800007b0:	00 00       	add	r0,r0
800007b2:	06 60       	and	r0,r3
800007b4:	00 00       	add	r0,r0
800007b6:	07 0c       	ld.w	r12,r3++
800007b8:	00 00       	add	r0,r0
800007ba:	06 94       	mov	r4,r3
800007bc:	80 00       	ld.sh	r0,r0[0x0]
800007be:	02 34       	cp.w	r4,r1
800007c0:	80 00       	ld.sh	r0,r0[0x0]
800007c2:	17 80       	ld.ub	r0,r11[0x0]
800007c4:	80 00       	ld.sh	r0,r0[0x0]
800007c6:	09 d6       	ld.ub	r6,r4[0x5]

800007c8 <ROSA_delay>:
/* ROSA_delay()															*/
/*																		*/
/* Suspends the calling task for the given number of ticks				*/
/************************************************************************/
int16_t ROSA_delay(uint64_t ticks)
{
800007c8:	eb cd 40 80 	pushm	r7,lr
800007cc:	1a 97       	mov	r7,sp
800007ce:	20 5d       	sub	sp,20
800007d0:	ee eb ff ec 	st.d	r7[-20],r10
	uint64_t dv;
	uint8_t pr;
	
	interruptDisable();
800007d4:	f0 1f 00 43 	mcall	800008e0 <ROSA_delay+0x118>
	
	dv = ROSA_getTickCount() + ticks;
800007d8:	f0 1f 00 43 	mcall	800008e4 <ROSA_delay+0x11c>
800007dc:	ee e8 ff ec 	ld.d	r8,r7[-20]
800007e0:	f4 08 00 08 	add	r8,r10,r8
800007e4:	f6 09 00 49 	adc	r9,r11,r9
800007e8:	ee e9 ff f4 	st.d	r7[-12],r8
	pr = EXECTASK->priority;
800007ec:	4b f8       	lddpc	r8,800008e8 <ROSA_delay+0x120>
800007ee:	70 08       	ld.w	r8,r8[0x0]
800007f0:	f1 38 00 64 	ld.ub	r8,r8[100]
800007f4:	ef 68 ff ff 	st.b	r7[-1],r8
	
	EXECTASK->delay = dv;
800007f8:	4b c8       	lddpc	r8,800008e8 <ROSA_delay+0x120>
800007fa:	70 0a       	ld.w	r10,r8[0x0]
800007fc:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000800:	f4 e9 00 68 	st.d	r10[104],r8

	/* Extract task from its queue */
	ROSA_TM_ACTION(PA[pr], EXECTASK, Uninstall);
80000804:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000808:	4b 98       	lddpc	r8,800008ec <ROSA_delay+0x124>
8000080a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000080e:	4b 98       	lddpc	r8,800008f0 <ROSA_delay+0x128>
80000810:	91 09       	st.w	r8[0x0],r9
80000812:	4b 68       	lddpc	r8,800008e8 <ROSA_delay+0x120>
80000814:	70 08       	ld.w	r8,r8[0x0]
80000816:	10 9c       	mov	r12,r8
80000818:	f0 1f 00 37 	mcall	800008f4 <ROSA_delay+0x12c>
8000081c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000820:	4b 48       	lddpc	r8,800008f0 <ROSA_delay+0x128>
80000822:	70 0a       	ld.w	r10,r8[0x0]
80000824:	4b 28       	lddpc	r8,800008ec <ROSA_delay+0x124>
80000826:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	
	/* Check the current queue for emptiness */	
	if (PA[pr])
8000082a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000082e:	4b 08       	lddpc	r8,800008ec <ROSA_delay+0x124>
80000830:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000834:	58 08       	cp.w	r8,0
80000836:	c0 a0       	breq	8000084a <ROSA_delay+0x82>
	{
		PREEMPTASK = PA[pr]->nexttcb;
80000838:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000083c:	4a c8       	lddpc	r8,800008ec <ROSA_delay+0x124>
8000083e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000842:	70 09       	ld.w	r9,r8[0x0]
80000844:	4a d8       	lddpc	r8,800008f8 <ROSA_delay+0x130>
80000846:	91 09       	st.w	r8[0x0],r9
80000848:	c0 68       	rjmp	80000854 <ROSA_delay+0x8c>
	}
	else
	{
		PREEMPTASK = readyQueueSearch();	
8000084a:	f0 1f 00 2d 	mcall	800008fc <ROSA_delay+0x134>
8000084e:	18 99       	mov	r9,r12
80000850:	4a a8       	lddpc	r8,800008f8 <ROSA_delay+0x130>
80000852:	91 09       	st.w	r8[0x0],r9
	}
	
	TCBLIST = DQ;
80000854:	4a b8       	lddpc	r8,80000900 <ROSA_delay+0x138>
80000856:	70 09       	ld.w	r9,r8[0x0]
80000858:	4a 68       	lddpc	r8,800008f0 <ROSA_delay+0x128>
8000085a:	91 09       	st.w	r8[0x0],r9
	
	/* Search for the right place to insert the task to the delay queue */	
	while ((DQ) && (TCBLIST->delay <= dv) && (dv <= TCBLIST->nexttcb->delay))
8000085c:	c0 68       	rjmp	80000868 <ROSA_delay+0xa0>
	{
		TCBLIST = TCBLIST->nexttcb;
8000085e:	4a 58       	lddpc	r8,800008f0 <ROSA_delay+0x128>
80000860:	70 08       	ld.w	r8,r8[0x0]
80000862:	70 09       	ld.w	r9,r8[0x0]
80000864:	4a 38       	lddpc	r8,800008f0 <ROSA_delay+0x128>
80000866:	91 09       	st.w	r8[0x0],r9
	}
	
	TCBLIST = DQ;
	
	/* Search for the right place to insert the task to the delay queue */	
	while ((DQ) && (TCBLIST->delay <= dv) && (dv <= TCBLIST->nexttcb->delay))
80000868:	4a 68       	lddpc	r8,80000900 <ROSA_delay+0x138>
8000086a:	70 08       	ld.w	r8,r8[0x0]
8000086c:	58 08       	cp.w	r8,0
8000086e:	c1 70       	breq	8000089c <ROSA_delay+0xd4>
80000870:	4a 08       	lddpc	r8,800008f0 <ROSA_delay+0x128>
80000872:	70 08       	ld.w	r8,r8[0x0]
80000874:	f0 ea 00 68 	ld.d	r10,r8[104]
80000878:	ee e8 ff f4 	ld.d	r8,r7[-12]
8000087c:	10 3a       	cp.w	r10,r8
8000087e:	f2 0b 13 00 	cpc	r11,r9
80000882:	e0 8b 00 0d 	brhi	8000089c <ROSA_delay+0xd4>
80000886:	49 b8       	lddpc	r8,800008f0 <ROSA_delay+0x128>
80000888:	70 08       	ld.w	r8,r8[0x0]
8000088a:	70 08       	ld.w	r8,r8[0x0]
8000088c:	f0 ea 00 68 	ld.d	r10,r8[104]
80000890:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000894:	10 3a       	cp.w	r10,r8
80000896:	f2 0b 13 00 	cpc	r11,r9
8000089a:	ce 22       	brcc	8000085e <ROSA_delay+0x96>
	{
		TCBLIST = TCBLIST->nexttcb;
	}

	ROSA_tcbInstall(EXECTASK);
8000089c:	49 38       	lddpc	r8,800008e8 <ROSA_delay+0x120>
8000089e:	70 08       	ld.w	r8,r8[0x0]
800008a0:	10 9c       	mov	r12,r8
800008a2:	f0 1f 00 19 	mcall	80000904 <ROSA_delay+0x13c>
	DQ = TCBLIST;
800008a6:	49 38       	lddpc	r8,800008f0 <ROSA_delay+0x128>
800008a8:	70 09       	ld.w	r9,r8[0x0]
800008aa:	49 68       	lddpc	r8,80000900 <ROSA_delay+0x138>
800008ac:	91 09       	st.w	r8[0x0],r9
	
	usartWriteTcb(USART, DQ);
800008ae:	49 58       	lddpc	r8,80000900 <ROSA_delay+0x138>
800008b0:	70 08       	ld.w	r8,r8[0x0]
800008b2:	10 9b       	mov	r11,r8
800008b4:	fe 7c 14 00 	mov	r12,-60416
800008b8:	f0 1f 00 14 	mcall	80000908 <ROSA_delay+0x140>
	usartWriteTcb(USART, DQ->nexttcb);
800008bc:	49 18       	lddpc	r8,80000900 <ROSA_delay+0x138>
800008be:	70 08       	ld.w	r8,r8[0x0]
800008c0:	70 08       	ld.w	r8,r8[0x0]
800008c2:	10 9b       	mov	r11,r8
800008c4:	fe 7c 14 00 	mov	r12,-60416
800008c8:	f0 1f 00 10 	mcall	80000908 <ROSA_delay+0x140>
	
	interruptEnable();
800008cc:	f0 1f 00 10 	mcall	8000090c <ROSA_delay+0x144>
	
	ROSA_yield();
800008d0:	f0 1f 00 10 	mcall	80000910 <ROSA_delay+0x148>
	
	return 0;
800008d4:	30 08       	mov	r8,0
}
800008d6:	10 9c       	mov	r12,r8
800008d8:	2f bd       	sub	sp,-20
800008da:	e3 cd 80 80 	ldm	sp++,r7,pc
800008de:	00 00       	add	r0,r0
800008e0:	80 00       	ld.sh	r0,r0[0x0]
800008e2:	21 66       	sub	r6,22
800008e4:	80 00       	ld.sh	r0,r0[0x0]
800008e6:	0a fc       	st.b	--r5,r12
800008e8:	00 00       	add	r0,r0
800008ea:	07 0c       	ld.w	r12,r3++
800008ec:	00 00       	add	r0,r0
800008ee:	06 60       	and	r0,r3
800008f0:	00 00       	add	r0,r0
800008f2:	06 5c       	eor	r12,r3
800008f4:	80 00       	ld.sh	r0,r0[0x0]
800008f6:	01 c4       	ld.ub	r4,r0[0x4]
800008f8:	00 00       	add	r0,r0
800008fa:	06 94       	mov	r4,r3
800008fc:	80 00       	ld.sh	r0,r0[0x0]
800008fe:	02 34       	cp.w	r4,r1
80000900:	00 00       	add	r0,r0
80000902:	07 10       	ld.sh	r0,r3++
80000904:	80 00       	ld.sh	r0,r0[0x0]
80000906:	01 68       	ld.uh	r8,--r0
80000908:	80 00       	ld.sh	r0,r0[0x0]
8000090a:	12 d4       	st.w	--r9,r4
8000090c:	80 00       	ld.sh	r0,r0[0x0]
8000090e:	21 6a       	sub	r10,22
80000910:	80 00       	ld.sh	r0,r0[0x0]
80000912:	09 d6       	ld.ub	r6,r4[0x5]

80000914 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80000914:	4b 5c       	lddpc	r12,800009e8 <_yield+0xa>
	lda.w r11,EXECTASK
80000916:	4b 6b       	lddpc	r11,800009ec <_yield+0xe>
	ld.w r12,r12[0x0]
80000918:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
8000091a:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
8000091c:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
8000091e:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000920:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000924:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
80000926:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
80000928:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
8000092a:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
8000092e:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000930:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80000932:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000934:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
80000936:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
80000938:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
8000093a:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
8000093c:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
8000093e:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000940:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000942:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000944:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000946:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000948:	1c 9f       	mov	pc,lr

8000094a <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
8000094a:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
8000094c:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
8000094e:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000950:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000954:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80000958:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
8000095c:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000960:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000964:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000968:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
8000096c:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000970:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000974:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
80000976:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80000978:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
8000097a:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
8000097c:	1c 9f       	mov	pc,lr

8000097e <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
8000097e:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000980:	49 bc       	lddpc	r12,800009ec <_yield+0xe>
	ld.w r12,r12[0x0]
80000982:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000984:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
80000986:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
80000988:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
8000098a:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
8000098c:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
8000098e:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
80000990:	33 40       	mov	r0,52
	add r0,r12
80000992:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000994:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80000998:	1a 90       	mov	r0,sp
	st.w --sp,r0
8000099a:	1a d0       	st.w	--sp,r0
	stmts sp,sp
8000099c:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
800009a0:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
800009a2:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
800009a4:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
800009a6:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
800009a8:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
800009aa:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
800009ac:	1c 9f       	mov	pc,lr

800009ae <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800009ae:	49 0c       	lddpc	r12,800009ec <_yield+0xe>
	ld.w r12,r12[0x0]
800009b0:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
800009b2:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
800009b4:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
800009b6:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
800009ba:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
800009bc:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800009be:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
800009c0:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800009c2:	33 40       	mov	r0,52
	add r0,r12
800009c4:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800009c6:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800009ca:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
800009cc:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800009ce:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
800009d0:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
800009d2:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
800009d4:	d6 13       	rets

800009d6 <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
800009d6:	d4 01       	pushm	lr
	lda.w lr,_yield
800009d8:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
800009dc:	d7 33       	scall

800009de <_yield>:
_yield:
	call contextSave
800009de:	cd 0f       	rcall	8000097e <contextSave>
	call scheduler
800009e0:	f0 1f 00 04 	mcall	800009f0 <_yield+0x12>
	call contextRestore
800009e4:	ce 5f       	rcall	800009ae <contextRestore>
800009e6:	00 00       	add	r0,r0
800009e8:	00 00       	add	r0,r0
800009ea:	06 5c       	eor	r12,r3
800009ec:	00 00       	add	r0,r0
800009ee:	07 0c       	ld.w	r12,r3++
800009f0:	80 00       	ld.sh	r0,r0[0x0]
800009f2:	09 f4       	ld.ub	r4,r4[0x7]

800009f4 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
800009f4:	eb cd 40 80 	pushm	r7,lr
800009f8:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK) {
800009fa:	48 f8       	lddpc	r8,80000a34 <scheduler+0x40>
800009fc:	70 08       	ld.w	r8,r8[0x0]
800009fe:	58 08       	cp.w	r8,0
80000a00:	c0 90       	breq	80000a12 <scheduler+0x1e>
		EXECTASK = PREEMPTASK;
80000a02:	48 d8       	lddpc	r8,80000a34 <scheduler+0x40>
80000a04:	70 09       	ld.w	r9,r8[0x0]
80000a06:	48 d8       	lddpc	r8,80000a38 <scheduler+0x44>
80000a08:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
80000a0a:	48 b8       	lddpc	r8,80000a34 <scheduler+0x40>
80000a0c:	30 09       	mov	r9,0
80000a0e:	91 09       	st.w	r8[0x0],r9
80000a10:	c1 08       	rjmp	80000a30 <scheduler+0x3c>
	}
	else {
		PA[EXECTASK->priority] = EXECTASK;
80000a12:	48 a8       	lddpc	r8,80000a38 <scheduler+0x44>
80000a14:	70 08       	ld.w	r8,r8[0x0]
80000a16:	f1 38 00 64 	ld.ub	r8,r8[100]
80000a1a:	10 99       	mov	r9,r8
80000a1c:	48 78       	lddpc	r8,80000a38 <scheduler+0x44>
80000a1e:	70 0a       	ld.w	r10,r8[0x0]
80000a20:	48 78       	lddpc	r8,80000a3c <scheduler+0x48>
80000a22:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		EXECTASK = EXECTASK->nexttcb;
80000a26:	48 58       	lddpc	r8,80000a38 <scheduler+0x44>
80000a28:	70 08       	ld.w	r8,r8[0x0]
80000a2a:	70 09       	ld.w	r9,r8[0x0]
80000a2c:	48 38       	lddpc	r8,80000a38 <scheduler+0x44>
80000a2e:	91 09       	st.w	r8[0x0],r9
	}
}
80000a30:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a34:	00 00       	add	r0,r0
80000a36:	06 94       	mov	r4,r3
80000a38:	00 00       	add	r0,r0
80000a3a:	07 0c       	ld.w	r12,r3++
80000a3c:	00 00       	add	r0,r0
80000a3e:	06 60       	and	r0,r3

80000a40 <ROSA_startScheduler>:

extern tcb * readyQueueSearch(void);

void ROSA_startScheduler(void)
{	
80000a40:	eb cd 40 80 	pushm	r7,lr
80000a44:	1a 97       	mov	r7,sp
	TCBLIST = ((tcb *) readyQueueSearch())->nexttcb;
80000a46:	f0 1f 00 06 	mcall	80000a5c <ROSA_startScheduler+0x1c>
80000a4a:	18 98       	mov	r8,r12
80000a4c:	70 09       	ld.w	r9,r8[0x0]
80000a4e:	48 58       	lddpc	r8,80000a60 <ROSA_startScheduler+0x20>
80000a50:	91 09       	st.w	r8[0x0],r9
	ROSA_start();
80000a52:	f0 1f 00 05 	mcall	80000a64 <ROSA_startScheduler+0x24>
}
80000a56:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a5a:	00 00       	add	r0,r0
80000a5c:	80 00       	ld.sh	r0,r0[0x0]
80000a5e:	02 34       	cp.w	r4,r1
80000a60:	00 00       	add	r0,r0
80000a62:	06 5c       	eor	r12,r3
80000a64:	80 00       	ld.sh	r0,r0[0x0]
80000a66:	09 14       	ld.sh	r4,r4++

80000a68 <C.6.9522>:
80000a68:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000a78 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000a78:	eb cd 40 80 	pushm	r7,lr
80000a7c:	1a 97       	mov	r7,sp
80000a7e:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000a80:	fe 78 38 00 	mov	r8,-51200
80000a84:	ef 48 ff fc 	st.w	r7[-4],r8
	
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000a88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a8c:	70 88       	ld.w	r8,r8[0x20]
80000a8e:	ef 48 ff f8 	st.w	r7[-8],r8
	if (sr & AVR32_TC_CPCS_MASK)
80000a92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a96:	e2 18 00 10 	andl	r8,0x10,COH
80000a9a:	c2 30       	breq	80000ae0 <timerISR+0x68>
	{
		systemTick++;
80000a9c:	49 38       	lddpc	r8,80000ae8 <timerISR+0x70>
80000a9e:	f0 ea 00 00 	ld.d	r10,r8[0]
80000aa2:	30 18       	mov	r8,1
80000aa4:	30 09       	mov	r9,0
80000aa6:	f4 08 00 08 	add	r8,r10,r8
80000aaa:	f6 09 00 49 	adc	r9,r11,r9
80000aae:	48 fa       	lddpc	r10,80000ae8 <timerISR+0x70>
80000ab0:	f4 e9 00 00 	st.d	r10[0],r8
		
		if ( (DQ) && (DQ->delay <= systemTick) ) 
80000ab4:	48 e8       	lddpc	r8,80000aec <timerISR+0x74>
80000ab6:	70 08       	ld.w	r8,r8[0x0]
80000ab8:	58 08       	cp.w	r8,0
80000aba:	c1 30       	breq	80000ae0 <timerISR+0x68>
80000abc:	48 c8       	lddpc	r8,80000aec <timerISR+0x74>
80000abe:	70 08       	ld.w	r8,r8[0x0]
80000ac0:	f0 ea 00 68 	ld.d	r10,r8[104]
80000ac4:	48 98       	lddpc	r8,80000ae8 <timerISR+0x70>
80000ac6:	f0 e8 00 00 	ld.d	r8,r8[0]
80000aca:	10 3a       	cp.w	r10,r8
80000acc:	f2 0b 13 00 	cpc	r11,r9
80000ad0:	e0 8b 00 08 	brhi	80000ae0 <timerISR+0x68>
		{
			PREEMPTASK = DELHANDL;
80000ad4:	48 78       	lddpc	r8,80000af0 <timerISR+0x78>
80000ad6:	70 09       	ld.w	r9,r8[0x0]
80000ad8:	48 78       	lddpc	r8,80000af4 <timerISR+0x7c>
80000ada:	91 09       	st.w	r8[0x0],r9
			ROSA_yieldFromISR();
80000adc:	f0 1f 00 07 	mcall	80000af8 <timerISR+0x80>
		}
	}
}
80000ae0:	2f ed       	sub	sp,-8
80000ae2:	e3 cd 40 80 	ldm	sp++,r7,lr
80000ae6:	d6 03       	rete
80000ae8:	00 00       	add	r0,r0
80000aea:	07 88       	ld.ub	r8,r3[0x0]
80000aec:	00 00       	add	r0,r0
80000aee:	07 10       	ld.sh	r0,r3++
80000af0:	00 00       	add	r0,r0
80000af2:	06 90       	mov	r0,r3
80000af4:	00 00       	add	r0,r0
80000af6:	06 94       	mov	r4,r3
80000af8:	80 00       	ld.sh	r0,r0[0x0]
80000afa:	01 00       	ld.w	r0,r0++

80000afc <ROSA_getTickCount>:
/*																		*/
/* Returns the current number of system ticks, relative to start		*/
/* of the system.                                                       */
/************************************************************************/
uint64_t ROSA_getTickCount()
{
80000afc:	eb cd 40 80 	pushm	r7,lr
80000b00:	1a 97       	mov	r7,sp
	return systemTick;
80000b02:	48 48       	lddpc	r8,80000b10 <ROSA_getTickCount+0x14>
80000b04:	f0 e8 00 00 	ld.d	r8,r8[0]
}
80000b08:	10 9a       	mov	r10,r8
80000b0a:	12 9b       	mov	r11,r9
80000b0c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b10:	00 00       	add	r0,r0
80000b12:	07 88       	ld.ub	r8,r3[0x0]

80000b14 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80000b14:	eb cd 40 80 	pushm	r7,lr
80000b18:	1a 97       	mov	r7,sp
80000b1a:	20 7d       	sub	sp,28
80000b1c:	ef 4c ff e4 	st.w	r7[-28],r12
	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000b20:	4a 48       	lddpc	r8,80000bb0 <timerPeriodSet+0x9c>
80000b22:	ee ca 00 18 	sub	r10,r7,24
80000b26:	10 9b       	mov	r11,r8
80000b28:	f6 e8 00 00 	ld.d	r8,r11[0]
80000b2c:	f4 e9 00 00 	st.d	r10[0],r8
80000b30:	f6 e8 00 08 	ld.d	r8,r11[8]
80000b34:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000b38:	30 48       	mov	r8,4
80000b3a:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80000b3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b42:	20 18       	sub	r8,1
80000b44:	a3 68       	lsl	r8,0x2
80000b46:	ee 08 00 08 	add	r8,r7,r8
80000b4a:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000b4e:	e0 68 1b 00 	mov	r8,6912
80000b52:	ea 18 00 b7 	orh	r8,0xb7
80000b56:	f0 09 0c 08 	divs	r8,r8,r9
80000b5a:	10 99       	mov	r9,r8
80000b5c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b60:	b1 39       	mul	r9,r8
80000b62:	e0 68 4d d3 	mov	r8,19923
80000b66:	ea 18 10 62 	orh	r8,0x1062
80000b6a:	f2 08 06 48 	mulu.d	r8,r9,r8
80000b6e:	f2 08 16 06 	lsr	r8,r9,0x6
80000b72:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80000b76:	ee fc ff fc 	ld.w	r12,r7[-4]
80000b7a:	f0 1f 00 0f 	mcall	80000bb4 <timerPeriodSet+0xa0>
	timerRCSet(rc);
80000b7e:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b82:	f0 1f 00 0e 	mcall	80000bb8 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80000b86:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b8e:	f2 08 02 4a 	mul	r10,r9,r8
80000b92:	e0 68 9f 81 	mov	r8,40833
80000b96:	ea 18 16 5e 	orh	r8,0x165e
80000b9a:	f4 08 04 48 	muls.d	r8,r10,r8
80000b9e:	b5 49       	asr	r9,0x14
80000ba0:	f4 08 14 1f 	asr	r8,r10,0x1f
80000ba4:	f2 08 01 08 	sub	r8,r9,r8
}
80000ba8:	10 9c       	mov	r12,r8
80000baa:	2f 9d       	sub	sp,-28
80000bac:	e3 cd 80 80 	ldm	sp++,r7,pc
80000bb0:	80 00       	ld.sh	r0,r0[0x0]
80000bb2:	0a 68       	and	r8,r5
80000bb4:	80 00       	ld.sh	r0,r0[0x0]
80000bb6:	16 bc       	st.h	r11++,r12
80000bb8:	80 00       	ld.sh	r0,r0[0x0]
80000bba:	16 a6       	st.w	r11++,r6

80000bbc <buttonInit>:
80000bbc:	eb cd 40 80 	pushm	r7,lr
80000bc0:	1a 97       	mov	r7,sp
80000bc2:	30 1b       	mov	r11,1
80000bc4:	35 8c       	mov	r12,88
80000bc6:	f0 1f 00 07 	mcall	80000be0 <buttonInit+0x24>
80000bca:	30 1b       	mov	r11,1
80000bcc:	35 5c       	mov	r12,85
80000bce:	f0 1f 00 05 	mcall	80000be0 <buttonInit+0x24>
80000bd2:	30 1b       	mov	r11,1
80000bd4:	35 2c       	mov	r12,82
80000bd6:	f0 1f 00 03 	mcall	80000be0 <buttonInit+0x24>
80000bda:	e3 cd 80 80 	ldm	sp++,r7,pc
80000bde:	00 00       	add	r0,r0
80000be0:	80 00       	ld.sh	r0,r0[0x0]
80000be2:	0c 1c       	sub	r12,r6

80000be4 <joystickInit>:
80000be4:	eb cd 40 80 	pushm	r7,lr
80000be8:	1a 97       	mov	r7,sp
80000bea:	30 1b       	mov	r11,1
80000bec:	31 bc       	mov	r12,27
80000bee:	f0 1f 00 0b 	mcall	80000c18 <joystickInit+0x34>
80000bf2:	30 1b       	mov	r11,1
80000bf4:	31 9c       	mov	r12,25
80000bf6:	f0 1f 00 09 	mcall	80000c18 <joystickInit+0x34>
80000bfa:	30 1b       	mov	r11,1
80000bfc:	31 cc       	mov	r12,28
80000bfe:	f0 1f 00 07 	mcall	80000c18 <joystickInit+0x34>
80000c02:	30 1b       	mov	r11,1
80000c04:	31 4c       	mov	r12,20
80000c06:	f0 1f 00 05 	mcall	80000c18 <joystickInit+0x34>
80000c0a:	30 1b       	mov	r11,1
80000c0c:	31 ac       	mov	r12,26
80000c0e:	f0 1f 00 03 	mcall	80000c18 <joystickInit+0x34>
80000c12:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c16:	00 00       	add	r0,r0
80000c18:	80 00       	ld.sh	r0,r0[0x0]
80000c1a:	0c 1c       	sub	r12,r6

80000c1c <gpioInit>:
80000c1c:	eb cd 40 80 	pushm	r7,lr
80000c20:	1a 97       	mov	r7,sp
80000c22:	20 7d       	sub	sp,28
80000c24:	ef 4c ff ec 	st.w	r7[-20],r12
80000c28:	ef 4b ff e8 	st.w	r7[-24],r11
80000c2c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c30:	a5 58       	asr	r8,0x5
80000c32:	ef 48 ff f4 	st.w	r7[-12],r8
80000c36:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c3a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000c3e:	ef 48 ff fc 	st.w	r7[-4],r8
80000c42:	30 19       	mov	r9,1
80000c44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c48:	f2 08 09 48 	lsl	r8,r9,r8
80000c4c:	ef 48 ff f8 	st.w	r7[-8],r8
80000c50:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c54:	a9 68       	lsl	r8,0x8
80000c56:	e0 28 f0 00 	sub	r8,61440
80000c5a:	ef 48 ff f0 	st.w	r7[-16],r8
80000c5e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c62:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c66:	91 19       	st.w	r8[0x4],r9
80000c68:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c6c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c70:	91 69       	st.w	r8[0x18],r9
80000c72:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c76:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c7a:	91 a9       	st.w	r8[0x28],r9
80000c7c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000c80:	ef 48 ff e4 	st.w	r7[-28],r8
80000c84:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c88:	58 08       	cp.w	r8,0
80000c8a:	c0 60       	breq	80000c96 <gpioInit+0x7a>
80000c8c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c90:	58 18       	cp.w	r8,1
80000c92:	c0 90       	breq	80000ca4 <gpioInit+0x88>
80000c94:	c0 f8       	rjmp	80000cb2 <gpioInit+0x96>
80000c96:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c9a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c9e:	f1 49 00 44 	st.w	r8[68],r9
80000ca2:	c0 e8       	rjmp	80000cbe <gpioInit+0xa2>
80000ca4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ca8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cac:	f1 49 00 48 	st.w	r8[72],r9
80000cb0:	c0 78       	rjmp	80000cbe <gpioInit+0xa2>
80000cb2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000cb6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cba:	f1 49 00 48 	st.w	r8[72],r9
80000cbe:	2f 9d       	sub	sp,-28
80000cc0:	e3 cd 80 80 	ldm	sp++,r7,pc

80000cc4 <gpioClear>:
80000cc4:	eb cd 40 80 	pushm	r7,lr
80000cc8:	1a 97       	mov	r7,sp
80000cca:	20 5d       	sub	sp,20
80000ccc:	ef 4c ff ec 	st.w	r7[-20],r12
80000cd0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000cd4:	a5 58       	asr	r8,0x5
80000cd6:	ef 48 ff f4 	st.w	r7[-12],r8
80000cda:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000cde:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000ce2:	ef 48 ff fc 	st.w	r7[-4],r8
80000ce6:	30 19       	mov	r9,1
80000ce8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cec:	f2 08 09 48 	lsl	r8,r9,r8
80000cf0:	ef 48 ff f8 	st.w	r7[-8],r8
80000cf4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000cf8:	a9 68       	lsl	r8,0x8
80000cfa:	e0 28 f0 00 	sub	r8,61440
80000cfe:	ef 48 ff f0 	st.w	r7[-16],r8
80000d02:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d06:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000d0a:	f1 49 00 58 	st.w	r8[88],r9
80000d0e:	2f bd       	sub	sp,-20
80000d10:	e3 cd 80 80 	ldm	sp++,r7,pc

80000d14 <gpioSet>:
80000d14:	eb cd 40 80 	pushm	r7,lr
80000d18:	1a 97       	mov	r7,sp
80000d1a:	20 5d       	sub	sp,20
80000d1c:	ef 4c ff ec 	st.w	r7[-20],r12
80000d20:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d24:	a5 58       	asr	r8,0x5
80000d26:	ef 48 ff f4 	st.w	r7[-12],r8
80000d2a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d2e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000d32:	ef 48 ff fc 	st.w	r7[-4],r8
80000d36:	30 19       	mov	r9,1
80000d38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d3c:	f2 08 09 48 	lsl	r8,r9,r8
80000d40:	ef 48 ff f8 	st.w	r7[-8],r8
80000d44:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d48:	a9 68       	lsl	r8,0x8
80000d4a:	e0 28 f0 00 	sub	r8,61440
80000d4e:	ef 48 ff f0 	st.w	r7[-16],r8
80000d52:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d56:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000d5a:	f1 49 00 54 	st.w	r8[84],r9
80000d5e:	2f bd       	sub	sp,-20
80000d60:	e3 cd 80 80 	ldm	sp++,r7,pc

80000d64 <gpioToggle>:
80000d64:	eb cd 40 80 	pushm	r7,lr
80000d68:	1a 97       	mov	r7,sp
80000d6a:	20 5d       	sub	sp,20
80000d6c:	ef 4c ff ec 	st.w	r7[-20],r12
80000d70:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d74:	a5 58       	asr	r8,0x5
80000d76:	ef 48 ff f4 	st.w	r7[-12],r8
80000d7a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d7e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000d82:	ef 48 ff fc 	st.w	r7[-4],r8
80000d86:	30 19       	mov	r9,1
80000d88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d8c:	f2 08 09 48 	lsl	r8,r9,r8
80000d90:	ef 48 ff f8 	st.w	r7[-8],r8
80000d94:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d98:	a9 68       	lsl	r8,0x8
80000d9a:	e0 28 f0 00 	sub	r8,61440
80000d9e:	ef 48 ff f0 	st.w	r7[-16],r8
80000da2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000da6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000daa:	f1 49 00 5c 	st.w	r8[92],r9
80000dae:	2f bd       	sub	sp,-20
80000db0:	e3 cd 80 80 	ldm	sp++,r7,pc

80000db4 <ledInit>:
80000db4:	eb cd 40 80 	pushm	r7,lr
80000db8:	1a 97       	mov	r7,sp
80000dba:	20 9d       	sub	sp,36
80000dbc:	49 e8       	lddpc	r8,80000e34 <ledInit+0x80>
80000dbe:	ee cb 00 24 	sub	r11,r7,36
80000dc2:	10 9a       	mov	r10,r8
80000dc4:	f4 e8 00 00 	ld.d	r8,r10[0]
80000dc8:	f6 e9 00 00 	st.d	r11[0],r8
80000dcc:	f4 e8 00 08 	ld.d	r8,r10[8]
80000dd0:	f6 e9 00 08 	st.d	r11[8],r8
80000dd4:	f4 e8 00 10 	ld.d	r8,r10[16]
80000dd8:	f6 e9 00 10 	st.d	r11[16],r8
80000ddc:	f4 e8 00 18 	ld.d	r8,r10[24]
80000de0:	f6 e9 00 18 	st.d	r11[24],r8
80000de4:	30 08       	mov	r8,0
80000de6:	ef 48 ff fc 	st.w	r7[-4],r8
80000dea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dee:	a3 68       	lsl	r8,0x2
80000df0:	ee 08 00 08 	add	r8,r7,r8
80000df4:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000df8:	10 9c       	mov	r12,r8
80000dfa:	f0 1f 00 10 	mcall	80000e38 <ledInit+0x84>
80000dfe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e02:	a3 68       	lsl	r8,0x2
80000e04:	ee 08 00 08 	add	r8,r7,r8
80000e08:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000e0c:	30 0b       	mov	r11,0
80000e0e:	10 9c       	mov	r12,r8
80000e10:	f0 1f 00 0b 	mcall	80000e3c <ledInit+0x88>
80000e14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e18:	58 78       	cp.w	r8,7
80000e1a:	5f 18       	srne	r8
80000e1c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000e20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e24:	2f f8       	sub	r8,-1
80000e26:	ef 48 ff fc 	st.w	r7[-4],r8
80000e2a:	58 09       	cp.w	r9,0
80000e2c:	cd f1       	brne	80000dea <ledInit+0x36>
80000e2e:	2f 7d       	sub	sp,-36
80000e30:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e34:	80 00       	ld.sh	r0,r0[0x0]
80000e36:	24 00       	sub	r0,64
80000e38:	80 00       	ld.sh	r0,r0[0x0]
80000e3a:	0e 60       	and	r0,r7
80000e3c:	80 00       	ld.sh	r0,r0[0x0]
80000e3e:	0c 1c       	sub	r12,r6

80000e40 <ledOn>:
80000e40:	eb cd 40 80 	pushm	r7,lr
80000e44:	1a 97       	mov	r7,sp
80000e46:	20 1d       	sub	sp,4
80000e48:	ef 4c ff fc 	st.w	r7[-4],r12
80000e4c:	ee fc ff fc 	ld.w	r12,r7[-4]
80000e50:	f0 1f 00 03 	mcall	80000e5c <ledOn+0x1c>
80000e54:	2f fd       	sub	sp,-4
80000e56:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e5a:	00 00       	add	r0,r0
80000e5c:	80 00       	ld.sh	r0,r0[0x0]
80000e5e:	0c c4       	st.b	r6++,r4

80000e60 <ledOff>:
80000e60:	eb cd 40 80 	pushm	r7,lr
80000e64:	1a 97       	mov	r7,sp
80000e66:	20 1d       	sub	sp,4
80000e68:	ef 4c ff fc 	st.w	r7[-4],r12
80000e6c:	ee fc ff fc 	ld.w	r12,r7[-4]
80000e70:	f0 1f 00 03 	mcall	80000e7c <ledOff+0x1c>
80000e74:	2f fd       	sub	sp,-4
80000e76:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e7a:	00 00       	add	r0,r0
80000e7c:	80 00       	ld.sh	r0,r0[0x0]
80000e7e:	0d 14       	ld.sh	r4,r6++

80000e80 <ledToggle>:
80000e80:	eb cd 40 80 	pushm	r7,lr
80000e84:	1a 97       	mov	r7,sp
80000e86:	20 1d       	sub	sp,4
80000e88:	ef 4c ff fc 	st.w	r7[-4],r12
80000e8c:	ee fc ff fc 	ld.w	r12,r7[-4]
80000e90:	f0 1f 00 03 	mcall	80000e9c <ledToggle+0x1c>
80000e94:	2f fd       	sub	sp,-4
80000e96:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e9a:	00 00       	add	r0,r0
80000e9c:	80 00       	ld.sh	r0,r0[0x0]
80000e9e:	0d 64       	ld.uh	r4,--r6

80000ea0 <potInit>:
80000ea0:	d3 01       	pushm	r11-r12
80000ea2:	e0 6c 10 00 	mov	r12,4096
80000ea6:	ea 1c ff ff 	orh	r12,0xffff
80000eaa:	31 6b       	mov	r11,22
80000eac:	99 2b       	st.w	r12[0x8],r11
80000eae:	99 6b       	st.w	r12[0x18],r11
80000eb0:	99 6b       	st.w	r12[0x18],r11
80000eb2:	e0 6c 3c 00 	mov	r12,15360
80000eb6:	ea 1c ff ff 	orh	r12,0xffff
80000eba:	30 1b       	mov	r11,1
80000ebc:	99 0b       	st.w	r12[0x0],r11
80000ebe:	e0 6b 0f 1f 	mov	r11,3871
80000ec2:	b1 6b       	lsl	r11,0x10
80000ec4:	99 1b       	st.w	r12[0x4],r11
80000ec6:	30 2b       	mov	r11,2
80000ec8:	99 4b       	st.w	r12[0x10],r11
80000eca:	d3 02       	popm	r11-r12
80000ecc:	1c 9f       	mov	pc,lr

80000ece <potGetValue>:
80000ece:	d1 81       	pushm	r10-r11
80000ed0:	e0 6c 3c 00 	mov	r12,15360
80000ed4:	ea 1c ff ff 	orh	r12,0xffff
80000ed8:	30 2b       	mov	r11,2
80000eda:	99 0b       	st.w	r12[0x0],r11

80000edc <a1>:
80000edc:	78 7a       	ld.w	r10,r12[0x1c]
80000ede:	16 7a       	tst	r10,r11
80000ee0:	cf e0       	breq	80000edc <a1>
80000ee2:	78 dc       	ld.w	r12,r12[0x34]
80000ee4:	d1 82       	popm	r10-r11
80000ee6:	1c 9f       	mov	pc,lr

80000ee8 <usartReset>:
80000ee8:	eb cd 40 80 	pushm	r7,lr
80000eec:	1a 97       	mov	r7,sp
80000eee:	20 3d       	sub	sp,12
80000ef0:	ef 4c ff f8 	st.w	r7[-8],r12
80000ef4:	f0 1f 00 16 	mcall	80000f4c <usartReset+0x64>
80000ef8:	18 98       	mov	r8,r12
80000efa:	ef 48 ff fc 	st.w	r7[-4],r8
80000efe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f02:	58 08       	cp.w	r8,0
80000f04:	c0 30       	breq	80000f0a <usartReset+0x22>
80000f06:	f0 1f 00 13 	mcall	80000f50 <usartReset+0x68>
80000f0a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f0e:	3f f8       	mov	r8,-1
80000f10:	93 38       	st.w	r9[0xc],r8
80000f12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f16:	70 58       	ld.w	r8,r8[0x14]
80000f18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f1c:	58 08       	cp.w	r8,0
80000f1e:	c0 30       	breq	80000f24 <usartReset+0x3c>
80000f20:	f0 1f 00 0d 	mcall	80000f54 <usartReset+0x6c>
80000f24:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f28:	30 08       	mov	r8,0
80000f2a:	93 18       	st.w	r9[0x4],r8
80000f2c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f30:	30 08       	mov	r8,0
80000f32:	93 98       	st.w	r9[0x24],r8
80000f34:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f38:	30 08       	mov	r8,0
80000f3a:	93 a8       	st.w	r9[0x28],r8
80000f3c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f40:	ea 68 61 0c 	mov	r8,680204
80000f44:	93 08       	st.w	r9[0x0],r8
80000f46:	2f dd       	sub	sp,-12
80000f48:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f4c:	80 00       	ld.sh	r0,r0[0x0]
80000f4e:	21 6e       	sub	lr,22
80000f50:	80 00       	ld.sh	r0,r0[0x0]
80000f52:	21 66       	sub	r6,22
80000f54:	80 00       	ld.sh	r0,r0[0x0]
80000f56:	21 6a       	sub	r10,22

80000f58 <usartSetBaudrate>:
80000f58:	eb cd 40 80 	pushm	r7,lr
80000f5c:	1a 97       	mov	r7,sp
80000f5e:	20 bd       	sub	sp,44
80000f60:	ef 4c ff ec 	st.w	r7[-20],r12
80000f64:	ef 4b ff e8 	st.w	r7[-24],r11
80000f68:	ef 4a ff e4 	st.w	r7[-28],r10
80000f6c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000f70:	f0 09 15 04 	lsl	r9,r8,0x4
80000f74:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000f78:	10 39       	cp.w	r9,r8
80000f7a:	e0 8b 00 06 	brhi	80000f86 <usartSetBaudrate+0x2e>
80000f7e:	31 09       	mov	r9,16
80000f80:	ef 49 ff d4 	st.w	r7[-44],r9
80000f84:	c0 48       	rjmp	80000f8c <usartSetBaudrate+0x34>
80000f86:	30 88       	mov	r8,8
80000f88:	ef 48 ff d4 	st.w	r7[-44],r8
80000f8c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80000f90:	ef 49 ff f0 	st.w	r7[-16],r9
80000f94:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000f98:	f0 0a 15 03 	lsl	r10,r8,0x3
80000f9c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000fa0:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000fa4:	f2 08 02 48 	mul	r8,r9,r8
80000fa8:	a1 98       	lsr	r8,0x1
80000faa:	10 0a       	add	r10,r8
80000fac:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000fb0:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000fb4:	f2 08 02 48 	mul	r8,r9,r8
80000fb8:	f4 08 0d 08 	divu	r8,r10,r8
80000fbc:	ef 48 ff f4 	st.w	r7[-12],r8
80000fc0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000fc4:	a3 98       	lsr	r8,0x3
80000fc6:	ef 48 ff f8 	st.w	r7[-8],r8
80000fca:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000fce:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000fd2:	ef 48 ff fc 	st.w	r7[-4],r8
80000fd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fda:	58 08       	cp.w	r8,0
80000fdc:	c0 70       	breq	80000fea <usartSetBaudrate+0x92>
80000fde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fe2:	e0 48 ff ff 	cp.w	r8,65535
80000fe6:	e0 88 00 06 	brls	80000ff2 <usartSetBaudrate+0x9a>
80000fea:	30 18       	mov	r8,1
80000fec:	ef 48 ff d8 	st.w	r7[-40],r8
80000ff0:	c2 c8       	rjmp	80001048 <usartSetBaudrate+0xf0>
80000ff2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ff6:	70 18       	ld.w	r8,r8[0x4]
80000ff8:	10 99       	mov	r9,r8
80000ffa:	e4 19 ff f7 	andh	r9,0xfff7
80000ffe:	e0 19 fe cf 	andl	r9,0xfecf
80001002:	ef 49 ff dc 	st.w	r7[-36],r9
80001006:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000100a:	59 08       	cp.w	r8,16
8000100c:	c0 60       	breq	80001018 <usartSetBaudrate+0xc0>
8000100e:	e8 68 00 00 	mov	r8,524288
80001012:	ef 48 ff e0 	st.w	r7[-32],r8
80001016:	c0 48       	rjmp	8000101e <usartSetBaudrate+0xc6>
80001018:	30 09       	mov	r9,0
8000101a:	ef 49 ff e0 	st.w	r7[-32],r9
8000101e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80001022:	ee f8 ff e0 	ld.w	r8,r7[-32]
80001026:	10 49       	or	r9,r8
80001028:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000102c:	91 19       	st.w	r8[0x4],r9
8000102e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001032:	f0 09 15 10 	lsl	r9,r8,0x10
80001036:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000103a:	10 49       	or	r9,r8
8000103c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001040:	91 89       	st.w	r8[0x20],r9
80001042:	30 09       	mov	r9,0
80001044:	ef 49 ff d8 	st.w	r7[-40],r9
80001048:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000104c:	10 9c       	mov	r12,r8
8000104e:	2f 5d       	sub	sp,-44
80001050:	e3 cd 80 80 	ldm	sp++,r7,pc

80001054 <usartInit>:
80001054:	eb cd 40 80 	pushm	r7,lr
80001058:	1a 97       	mov	r7,sp
8000105a:	20 4d       	sub	sp,16
8000105c:	ef 4c ff f8 	st.w	r7[-8],r12
80001060:	ef 4b ff f4 	st.w	r7[-12],r11
80001064:	ef 4a ff f0 	st.w	r7[-16],r10
80001068:	fe 78 10 00 	mov	r8,-61440
8000106c:	ef 48 ff fc 	st.w	r7[-4],r8
80001070:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001074:	30 18       	mov	r8,1
80001076:	93 28       	st.w	r9[0x8],r8
80001078:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000107c:	30 28       	mov	r8,2
8000107e:	93 28       	st.w	r9[0x8],r8
80001080:	ee fc ff f8 	ld.w	r12,r7[-8]
80001084:	f0 1f 00 3b 	mcall	80001170 <usartInit+0x11c>
80001088:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000108c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001090:	70 08       	ld.w	r8,r8[0x0]
80001092:	12 9a       	mov	r10,r9
80001094:	10 9b       	mov	r11,r8
80001096:	ee fc ff f8 	ld.w	r12,r7[-8]
8000109a:	f0 1f 00 37 	mcall	80001174 <usartInit+0x120>
8000109e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010a2:	11 c9       	ld.ub	r9,r8[0x4]
800010a4:	30 98       	mov	r8,9
800010a6:	f0 09 18 00 	cp.b	r9,r8
800010aa:	c0 a1       	brne	800010be <usartInit+0x6a>
800010ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010b0:	70 18       	ld.w	r8,r8[0x4]
800010b2:	10 99       	mov	r9,r8
800010b4:	b1 b9       	sbr	r9,0x11
800010b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010ba:	91 19       	st.w	r8[0x4],r9
800010bc:	c0 d8       	rjmp	800010d6 <usartInit+0x82>
800010be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010c2:	70 19       	ld.w	r9,r8[0x4]
800010c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010c8:	11 c8       	ld.ub	r8,r8[0x4]
800010ca:	20 58       	sub	r8,5
800010cc:	a7 68       	lsl	r8,0x6
800010ce:	10 49       	or	r9,r8
800010d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010d4:	91 19       	st.w	r8[0x4],r9
800010d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010da:	70 1a       	ld.w	r10,r8[0x4]
800010dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010e0:	11 d8       	ld.ub	r8,r8[0x5]
800010e2:	f0 09 15 09 	lsl	r9,r8,0x9
800010e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010ea:	f1 38 00 08 	ld.ub	r8,r8[8]
800010ee:	af 68       	lsl	r8,0xe
800010f0:	f3 e8 10 08 	or	r8,r9,r8
800010f4:	f5 e8 10 09 	or	r9,r10,r8
800010f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010fc:	91 19       	st.w	r8[0x4],r9
800010fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001102:	90 39       	ld.sh	r9,r8[0x6]
80001104:	30 28       	mov	r8,2
80001106:	f0 09 19 00 	cp.h	r9,r8
8000110a:	e0 88 00 14 	brls	80001132 <usartInit+0xde>
8000110e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001112:	70 18       	ld.w	r8,r8[0x4]
80001114:	10 99       	mov	r9,r8
80001116:	ad b9       	sbr	r9,0xd
80001118:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000111c:	91 19       	st.w	r8[0x4],r9
8000111e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001122:	90 38       	ld.sh	r8,r8[0x6]
80001124:	5c 78       	castu.h	r8
80001126:	20 28       	sub	r8,2
80001128:	10 99       	mov	r9,r8
8000112a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000112e:	91 a9       	st.w	r8[0x28],r9
80001130:	c0 d8       	rjmp	8000114a <usartInit+0xf6>
80001132:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001136:	70 19       	ld.w	r9,r8[0x4]
80001138:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000113c:	90 38       	ld.sh	r8,r8[0x6]
8000113e:	5c 78       	castu.h	r8
80001140:	ad 68       	lsl	r8,0xc
80001142:	10 49       	or	r9,r8
80001144:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001148:	91 19       	st.w	r8[0x4],r9
8000114a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000114e:	70 18       	ld.w	r8,r8[0x4]
80001150:	10 99       	mov	r9,r8
80001152:	e0 19 ff f0 	andl	r9,0xfff0
80001156:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000115a:	91 19       	st.w	r8[0x4],r9
8000115c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001160:	35 08       	mov	r8,80
80001162:	93 08       	st.w	r9[0x0],r8
80001164:	30 08       	mov	r8,0
80001166:	10 9c       	mov	r12,r8
80001168:	2f cd       	sub	sp,-16
8000116a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000116e:	00 00       	add	r0,r0
80001170:	80 00       	ld.sh	r0,r0[0x0]
80001172:	0e e8       	st.h	--r7,r8
80001174:	80 00       	ld.sh	r0,r0[0x0]
80001176:	0f 58       	ld.sh	r8,--r7

80001178 <usartWriteChar>:
80001178:	eb cd 40 80 	pushm	r7,lr
8000117c:	1a 97       	mov	r7,sp
8000117e:	20 3d       	sub	sp,12
80001180:	ef 4c ff f8 	st.w	r7[-8],r12
80001184:	16 98       	mov	r8,r11
80001186:	ef 68 ff f4 	st.b	r7[-12],r8
8000118a:	e4 68 00 00 	mov	r8,262144
8000118e:	ef 48 ff fc 	st.w	r7[-4],r8
80001192:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001196:	58 08       	cp.w	r8,0
80001198:	5f 18       	srne	r8
8000119a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000119e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800011a2:	20 18       	sub	r8,1
800011a4:	ef 48 ff fc 	st.w	r7[-4],r8
800011a8:	12 98       	mov	r8,r9
800011aa:	ec 18 00 01 	eorl	r8,0x1
800011ae:	5c 58       	castu.b	r8
800011b0:	c0 71       	brne	800011be <usartWriteChar+0x46>
800011b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800011b6:	70 58       	ld.w	r8,r8[0x14]
800011b8:	e2 18 00 02 	andl	r8,0x2,COH
800011bc:	ce b0       	breq	80001192 <usartWriteChar+0x1a>
800011be:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800011c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800011c6:	91 79       	st.w	r8[0x1c],r9
800011c8:	2f dd       	sub	sp,-12
800011ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800011ce:	d7 03       	nop

800011d0 <usartWriteLine>:
800011d0:	eb cd 40 80 	pushm	r7,lr
800011d4:	1a 97       	mov	r7,sp
800011d6:	20 2d       	sub	sp,8
800011d8:	ef 4c ff fc 	st.w	r7[-4],r12
800011dc:	ef 4b ff f8 	st.w	r7[-8],r11
800011e0:	c1 88       	rjmp	80001210 <usartWriteLine+0x40>
800011e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800011e6:	11 88       	ld.ub	r8,r8[0x0]
800011e8:	58 a8       	cp.w	r8,10
800011ea:	c0 61       	brne	800011f6 <usartWriteLine+0x26>
800011ec:	30 db       	mov	r11,13
800011ee:	ee fc ff fc 	ld.w	r12,r7[-4]
800011f2:	f0 1f 00 0c 	mcall	80001220 <usartWriteLine+0x50>
800011f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800011fa:	11 88       	ld.ub	r8,r8[0x0]
800011fc:	10 9b       	mov	r11,r8
800011fe:	ee fc ff fc 	ld.w	r12,r7[-4]
80001202:	f0 1f 00 08 	mcall	80001220 <usartWriteLine+0x50>
80001206:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000120a:	2f f8       	sub	r8,-1
8000120c:	ef 48 ff f8 	st.w	r7[-8],r8
80001210:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001214:	11 88       	ld.ub	r8,r8[0x0]
80001216:	58 08       	cp.w	r8,0
80001218:	ce 51       	brne	800011e2 <usartWriteLine+0x12>
8000121a:	2f ed       	sub	sp,-8
8000121c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001220:	80 00       	ld.sh	r0,r0[0x0]
80001222:	11 78       	ld.ub	r8,--r8

80001224 <usartWriteValue>:
80001224:	eb cd 40 80 	pushm	r7,lr
80001228:	1a 97       	mov	r7,sp
8000122a:	20 7d       	sub	sp,28
8000122c:	ef 4c ff ec 	st.w	r7[-20],r12
80001230:	ef 4b ff e8 	st.w	r7[-24],r11
80001234:	30 f8       	mov	r8,15
80001236:	ef 48 ff f8 	st.w	r7[-8],r8
8000123a:	31 c8       	mov	r8,28
8000123c:	ef 48 ff f4 	st.w	r7[-12],r8
80001240:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001244:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001248:	f0 09 09 48 	lsl	r8,r8,r9
8000124c:	ef 48 ff f0 	st.w	r7[-16],r8
80001250:	49 eb       	lddpc	r11,800012c8 <usartWriteValue+0xa4>
80001252:	ee fc ff ec 	ld.w	r12,r7[-20]
80001256:	f0 1f 00 1e 	mcall	800012cc <usartWriteValue+0xa8>
8000125a:	c3 08       	rjmp	800012ba <usartWriteValue+0x96>
8000125c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80001260:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001264:	10 69       	and	r9,r8
80001266:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000126a:	f2 08 0a 48 	lsr	r8,r9,r8
8000126e:	ef 48 ff fc 	st.w	r7[-4],r8
80001272:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001276:	58 98       	cp.w	r8,9
80001278:	e0 8b 00 0a 	brhi	8000128c <usartWriteValue+0x68>
8000127c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001280:	5c 58       	castu.b	r8
80001282:	2d 08       	sub	r8,-48
80001284:	5c 58       	castu.b	r8
80001286:	ef 48 ff e4 	st.w	r7[-28],r8
8000128a:	c0 88       	rjmp	8000129a <usartWriteValue+0x76>
8000128c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001290:	5c 58       	castu.b	r8
80001292:	2a 98       	sub	r8,-87
80001294:	5c 58       	castu.b	r8
80001296:	ef 48 ff e4 	st.w	r7[-28],r8
8000129a:	ee fb ff e4 	ld.w	r11,r7[-28]
8000129e:	ee fc ff ec 	ld.w	r12,r7[-20]
800012a2:	f0 1f 00 0c 	mcall	800012d0 <usartWriteValue+0xac>
800012a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800012aa:	a5 88       	lsr	r8,0x4
800012ac:	ef 48 ff f0 	st.w	r7[-16],r8
800012b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800012b4:	20 48       	sub	r8,4
800012b6:	ef 48 ff f4 	st.w	r7[-12],r8
800012ba:	ee f8 ff f0 	ld.w	r8,r7[-16]
800012be:	58 08       	cp.w	r8,0
800012c0:	cc e1       	brne	8000125c <usartWriteValue+0x38>
800012c2:	2f 9d       	sub	sp,-28
800012c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800012c8:	80 00       	ld.sh	r0,r0[0x0]
800012ca:	24 20       	sub	r0,66
800012cc:	80 00       	ld.sh	r0,r0[0x0]
800012ce:	11 d0       	ld.ub	r0,r8[0x5]
800012d0:	80 00       	ld.sh	r0,r0[0x0]
800012d2:	11 78       	ld.ub	r8,--r8

800012d4 <usartWriteTcb>:
800012d4:	eb cd 40 80 	pushm	r7,lr
800012d8:	1a 97       	mov	r7,sp
800012da:	20 4d       	sub	sp,16
800012dc:	ef 4c ff f4 	st.w	r7[-12],r12
800012e0:	ef 4b ff f0 	st.w	r7[-16],r11
800012e4:	30 18       	mov	r8,1
800012e6:	ef 48 ff fc 	st.w	r7[-4],r8
800012ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012ee:	58 08       	cp.w	r8,0
800012f0:	e0 80 01 71 	breq	800015d2 <usartWriteTcb+0x2fe>
800012f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012f8:	58 08       	cp.w	r8,0
800012fa:	e0 8a 00 27 	brle	80001348 <usartWriteTcb+0x74>
800012fe:	fe fb 02 da 	ld.w	r11,pc[730]
80001302:	ee fc ff f4 	ld.w	r12,r7[-12]
80001306:	f0 1f 00 b6 	mcall	800015dc <usartWriteTcb+0x308>
8000130a:	30 08       	mov	r8,0
8000130c:	ef 48 ff f8 	st.w	r7[-8],r8
80001310:	c1 18       	rjmp	80001332 <usartWriteTcb+0x5e>
80001312:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001316:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000131a:	12 08       	add	r8,r9
8000131c:	11 c8       	ld.ub	r8,r8[0x4]
8000131e:	10 9b       	mov	r11,r8
80001320:	ee fc ff f4 	ld.w	r12,r7[-12]
80001324:	f0 1f 00 af 	mcall	800015e0 <usartWriteTcb+0x30c>
80001328:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000132c:	2f f8       	sub	r8,-1
8000132e:	ef 48 ff f8 	st.w	r7[-8],r8
80001332:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001336:	58 38       	cp.w	r8,3
80001338:	fe 9a ff ed 	brle	80001312 <usartWriteTcb+0x3e>
8000133c:	fe fb 02 a8 	ld.w	r11,pc[680]
80001340:	ee fc ff f4 	ld.w	r12,r7[-12]
80001344:	f0 1f 00 a6 	mcall	800015dc <usartWriteTcb+0x308>
80001348:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000134c:	58 18       	cp.w	r8,1
8000134e:	e0 8a 00 75 	brle	80001438 <usartWriteTcb+0x164>
80001352:	fe fb 02 96 	ld.w	r11,pc[662]
80001356:	ee fc ff f4 	ld.w	r12,r7[-12]
8000135a:	f0 1f 00 a1 	mcall	800015dc <usartWriteTcb+0x308>
8000135e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001362:	10 9b       	mov	r11,r8
80001364:	ee fc ff f4 	ld.w	r12,r7[-12]
80001368:	f0 1f 00 a1 	mcall	800015ec <usartWriteTcb+0x318>
8000136c:	fe fb 02 84 	ld.w	r11,pc[644]
80001370:	ee fc ff f4 	ld.w	r12,r7[-12]
80001374:	f0 1f 00 9a 	mcall	800015dc <usartWriteTcb+0x308>
80001378:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000137c:	70 08       	ld.w	r8,r8[0x0]
8000137e:	10 9b       	mov	r11,r8
80001380:	ee fc ff f4 	ld.w	r12,r7[-12]
80001384:	f0 1f 00 9a 	mcall	800015ec <usartWriteTcb+0x318>
80001388:	fe fb 02 6c 	ld.w	r11,pc[620]
8000138c:	ee fc ff f4 	ld.w	r12,r7[-12]
80001390:	f0 1f 00 93 	mcall	800015dc <usartWriteTcb+0x308>
80001394:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001398:	70 28       	ld.w	r8,r8[0x8]
8000139a:	10 9b       	mov	r11,r8
8000139c:	ee fc ff f4 	ld.w	r12,r7[-12]
800013a0:	f0 1f 00 93 	mcall	800015ec <usartWriteTcb+0x318>
800013a4:	fe fb 02 54 	ld.w	r11,pc[596]
800013a8:	ee fc ff f4 	ld.w	r12,r7[-12]
800013ac:	f0 1f 00 8c 	mcall	800015dc <usartWriteTcb+0x308>
800013b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800013b4:	70 38       	ld.w	r8,r8[0xc]
800013b6:	10 9b       	mov	r11,r8
800013b8:	ee fc ff f4 	ld.w	r12,r7[-12]
800013bc:	f0 1f 00 8c 	mcall	800015ec <usartWriteTcb+0x318>
800013c0:	fe fb 02 3c 	ld.w	r11,pc[572]
800013c4:	ee fc ff f4 	ld.w	r12,r7[-12]
800013c8:	f0 1f 00 85 	mcall	800015dc <usartWriteTcb+0x308>
800013cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800013d0:	70 48       	ld.w	r8,r8[0x10]
800013d2:	10 9b       	mov	r11,r8
800013d4:	ee fc ff f4 	ld.w	r12,r7[-12]
800013d8:	f0 1f 00 85 	mcall	800015ec <usartWriteTcb+0x318>
800013dc:	fe fb 02 24 	ld.w	r11,pc[548]
800013e0:	ee fc ff f4 	ld.w	r12,r7[-12]
800013e4:	f0 1f 00 7e 	mcall	800015dc <usartWriteTcb+0x308>
800013e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800013ec:	70 58       	ld.w	r8,r8[0x14]
800013ee:	10 9b       	mov	r11,r8
800013f0:	ee fc ff f4 	ld.w	r12,r7[-12]
800013f4:	f0 1f 00 7e 	mcall	800015ec <usartWriteTcb+0x318>
800013f8:	fe fb 02 0c 	ld.w	r11,pc[524]
800013fc:	ee fc ff f4 	ld.w	r12,r7[-12]
80001400:	f0 1f 00 77 	mcall	800015dc <usartWriteTcb+0x308>
80001404:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001408:	70 88       	ld.w	r8,r8[0x20]
8000140a:	10 9b       	mov	r11,r8
8000140c:	ee fc ff f4 	ld.w	r12,r7[-12]
80001410:	f0 1f 00 77 	mcall	800015ec <usartWriteTcb+0x318>
80001414:	4f db       	lddpc	r11,80001608 <usartWriteTcb+0x334>
80001416:	ee fc ff f4 	ld.w	r12,r7[-12]
8000141a:	f0 1f 00 71 	mcall	800015dc <usartWriteTcb+0x308>
8000141e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001422:	70 98       	ld.w	r8,r8[0x24]
80001424:	10 9b       	mov	r11,r8
80001426:	ee fc ff f4 	ld.w	r12,r7[-12]
8000142a:	f0 1f 00 71 	mcall	800015ec <usartWriteTcb+0x318>
8000142e:	4e eb       	lddpc	r11,800015e4 <usartWriteTcb+0x310>
80001430:	ee fc ff f4 	ld.w	r12,r7[-12]
80001434:	f0 1f 00 6a 	mcall	800015dc <usartWriteTcb+0x308>
80001438:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000143c:	58 28       	cp.w	r8,2
8000143e:	e0 8a 00 ca 	brle	800015d2 <usartWriteTcb+0x2fe>
80001442:	4f 3b       	lddpc	r11,8000160c <usartWriteTcb+0x338>
80001444:	ee fc ff f4 	ld.w	r12,r7[-12]
80001448:	f0 1f 00 65 	mcall	800015dc <usartWriteTcb+0x308>
8000144c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001450:	71 88       	ld.w	r8,r8[0x60]
80001452:	10 9b       	mov	r11,r8
80001454:	ee fc ff f4 	ld.w	r12,r7[-12]
80001458:	f0 1f 00 65 	mcall	800015ec <usartWriteTcb+0x318>
8000145c:	4e db       	lddpc	r11,80001610 <usartWriteTcb+0x33c>
8000145e:	ee fc ff f4 	ld.w	r12,r7[-12]
80001462:	f0 1f 00 5f 	mcall	800015dc <usartWriteTcb+0x308>
80001466:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000146a:	71 78       	ld.w	r8,r8[0x5c]
8000146c:	10 9b       	mov	r11,r8
8000146e:	ee fc ff f4 	ld.w	r12,r7[-12]
80001472:	f0 1f 00 5f 	mcall	800015ec <usartWriteTcb+0x318>
80001476:	4e 8b       	lddpc	r11,80001614 <usartWriteTcb+0x340>
80001478:	ee fc ff f4 	ld.w	r12,r7[-12]
8000147c:	f0 1f 00 58 	mcall	800015dc <usartWriteTcb+0x308>
80001480:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001484:	71 68       	ld.w	r8,r8[0x58]
80001486:	10 9b       	mov	r11,r8
80001488:	ee fc ff f4 	ld.w	r12,r7[-12]
8000148c:	f0 1f 00 58 	mcall	800015ec <usartWriteTcb+0x318>
80001490:	4e 2b       	lddpc	r11,80001618 <usartWriteTcb+0x344>
80001492:	ee fc ff f4 	ld.w	r12,r7[-12]
80001496:	f0 1f 00 52 	mcall	800015dc <usartWriteTcb+0x308>
8000149a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000149e:	71 58       	ld.w	r8,r8[0x54]
800014a0:	10 9b       	mov	r11,r8
800014a2:	ee fc ff f4 	ld.w	r12,r7[-12]
800014a6:	f0 1f 00 52 	mcall	800015ec <usartWriteTcb+0x318>
800014aa:	4d db       	lddpc	r11,8000161c <usartWriteTcb+0x348>
800014ac:	ee fc ff f4 	ld.w	r12,r7[-12]
800014b0:	f0 1f 00 4b 	mcall	800015dc <usartWriteTcb+0x308>
800014b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800014b8:	71 48       	ld.w	r8,r8[0x50]
800014ba:	10 9b       	mov	r11,r8
800014bc:	ee fc ff f4 	ld.w	r12,r7[-12]
800014c0:	f0 1f 00 4b 	mcall	800015ec <usartWriteTcb+0x318>
800014c4:	4d 7b       	lddpc	r11,80001620 <usartWriteTcb+0x34c>
800014c6:	ee fc ff f4 	ld.w	r12,r7[-12]
800014ca:	f0 1f 00 45 	mcall	800015dc <usartWriteTcb+0x308>
800014ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800014d2:	71 38       	ld.w	r8,r8[0x4c]
800014d4:	10 9b       	mov	r11,r8
800014d6:	ee fc ff f4 	ld.w	r12,r7[-12]
800014da:	f0 1f 00 45 	mcall	800015ec <usartWriteTcb+0x318>
800014de:	4d 2b       	lddpc	r11,80001624 <usartWriteTcb+0x350>
800014e0:	ee fc ff f4 	ld.w	r12,r7[-12]
800014e4:	f0 1f 00 3e 	mcall	800015dc <usartWriteTcb+0x308>
800014e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800014ec:	71 28       	ld.w	r8,r8[0x48]
800014ee:	10 9b       	mov	r11,r8
800014f0:	ee fc ff f4 	ld.w	r12,r7[-12]
800014f4:	f0 1f 00 3e 	mcall	800015ec <usartWriteTcb+0x318>
800014f8:	4c cb       	lddpc	r11,80001628 <usartWriteTcb+0x354>
800014fa:	ee fc ff f4 	ld.w	r12,r7[-12]
800014fe:	f0 1f 00 38 	mcall	800015dc <usartWriteTcb+0x308>
80001502:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001506:	71 18       	ld.w	r8,r8[0x44]
80001508:	10 9b       	mov	r11,r8
8000150a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000150e:	f0 1f 00 38 	mcall	800015ec <usartWriteTcb+0x318>
80001512:	4c 7b       	lddpc	r11,8000162c <usartWriteTcb+0x358>
80001514:	ee fc ff f4 	ld.w	r12,r7[-12]
80001518:	f0 1f 00 31 	mcall	800015dc <usartWriteTcb+0x308>
8000151c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001520:	71 08       	ld.w	r8,r8[0x40]
80001522:	10 9b       	mov	r11,r8
80001524:	ee fc ff f4 	ld.w	r12,r7[-12]
80001528:	f0 1f 00 31 	mcall	800015ec <usartWriteTcb+0x318>
8000152c:	4c 1b       	lddpc	r11,80001630 <usartWriteTcb+0x35c>
8000152e:	ee fc ff f4 	ld.w	r12,r7[-12]
80001532:	f0 1f 00 2b 	mcall	800015dc <usartWriteTcb+0x308>
80001536:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000153a:	70 f8       	ld.w	r8,r8[0x3c]
8000153c:	10 9b       	mov	r11,r8
8000153e:	ee fc ff f4 	ld.w	r12,r7[-12]
80001542:	f0 1f 00 2b 	mcall	800015ec <usartWriteTcb+0x318>
80001546:	4b cb       	lddpc	r11,80001634 <usartWriteTcb+0x360>
80001548:	ee fc ff f4 	ld.w	r12,r7[-12]
8000154c:	f0 1f 00 24 	mcall	800015dc <usartWriteTcb+0x308>
80001550:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001554:	70 e8       	ld.w	r8,r8[0x38]
80001556:	10 9b       	mov	r11,r8
80001558:	ee fc ff f4 	ld.w	r12,r7[-12]
8000155c:	f0 1f 00 24 	mcall	800015ec <usartWriteTcb+0x318>
80001560:	4b 6b       	lddpc	r11,80001638 <usartWriteTcb+0x364>
80001562:	ee fc ff f4 	ld.w	r12,r7[-12]
80001566:	f0 1f 00 1e 	mcall	800015dc <usartWriteTcb+0x308>
8000156a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000156e:	70 d8       	ld.w	r8,r8[0x34]
80001570:	10 9b       	mov	r11,r8
80001572:	ee fc ff f4 	ld.w	r12,r7[-12]
80001576:	f0 1f 00 1e 	mcall	800015ec <usartWriteTcb+0x318>
8000157a:	4b 1b       	lddpc	r11,8000163c <usartWriteTcb+0x368>
8000157c:	ee fc ff f4 	ld.w	r12,r7[-12]
80001580:	f0 1f 00 17 	mcall	800015dc <usartWriteTcb+0x308>
80001584:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001588:	70 c8       	ld.w	r8,r8[0x30]
8000158a:	10 9b       	mov	r11,r8
8000158c:	ee fc ff f4 	ld.w	r12,r7[-12]
80001590:	f0 1f 00 17 	mcall	800015ec <usartWriteTcb+0x318>
80001594:	4a bb       	lddpc	r11,80001640 <usartWriteTcb+0x36c>
80001596:	ee fc ff f4 	ld.w	r12,r7[-12]
8000159a:	f0 1f 00 11 	mcall	800015dc <usartWriteTcb+0x308>
8000159e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800015a2:	70 b8       	ld.w	r8,r8[0x2c]
800015a4:	10 9b       	mov	r11,r8
800015a6:	ee fc ff f4 	ld.w	r12,r7[-12]
800015aa:	f0 1f 00 11 	mcall	800015ec <usartWriteTcb+0x318>
800015ae:	4a 6b       	lddpc	r11,80001644 <usartWriteTcb+0x370>
800015b0:	ee fc ff f4 	ld.w	r12,r7[-12]
800015b4:	f0 1f 00 0a 	mcall	800015dc <usartWriteTcb+0x308>
800015b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800015bc:	70 a8       	ld.w	r8,r8[0x28]
800015be:	10 9b       	mov	r11,r8
800015c0:	ee fc ff f4 	ld.w	r12,r7[-12]
800015c4:	f0 1f 00 0a 	mcall	800015ec <usartWriteTcb+0x318>
800015c8:	48 7b       	lddpc	r11,800015e4 <usartWriteTcb+0x310>
800015ca:	ee fc ff f4 	ld.w	r12,r7[-12]
800015ce:	f0 1f 00 04 	mcall	800015dc <usartWriteTcb+0x308>
800015d2:	2f cd       	sub	sp,-16
800015d4:	e3 cd 80 80 	ldm	sp++,r7,pc
800015d8:	80 00       	ld.sh	r0,r0[0x0]
800015da:	24 24       	sub	r4,66
800015dc:	80 00       	ld.sh	r0,r0[0x0]
800015de:	11 d0       	ld.ub	r0,r8[0x5]
800015e0:	80 00       	ld.sh	r0,r0[0x0]
800015e2:	11 78       	ld.ub	r8,--r8
800015e4:	80 00       	ld.sh	r0,r0[0x0]
800015e6:	24 30       	sub	r0,67
800015e8:	80 00       	ld.sh	r0,r0[0x0]
800015ea:	24 34       	sub	r4,67
800015ec:	80 00       	ld.sh	r0,r0[0x0]
800015ee:	12 24       	rsub	r4,r9
800015f0:	80 00       	ld.sh	r0,r0[0x0]
800015f2:	24 40       	sub	r0,68
800015f4:	80 00       	ld.sh	r0,r0[0x0]
800015f6:	24 50       	sub	r0,69
800015f8:	80 00       	ld.sh	r0,r0[0x0]
800015fa:	24 60       	sub	r0,70
800015fc:	80 00       	ld.sh	r0,r0[0x0]
800015fe:	24 70       	sub	r0,71
80001600:	80 00       	ld.sh	r0,r0[0x0]
80001602:	24 80       	sub	r0,72
80001604:	80 00       	ld.sh	r0,r0[0x0]
80001606:	24 90       	sub	r0,73
80001608:	80 00       	ld.sh	r0,r0[0x0]
8000160a:	24 a0       	sub	r0,74
8000160c:	80 00       	ld.sh	r0,r0[0x0]
8000160e:	24 b0       	sub	r0,75
80001610:	80 00       	ld.sh	r0,r0[0x0]
80001612:	24 b8       	sub	r8,75
80001614:	80 00       	ld.sh	r0,r0[0x0]
80001616:	24 c0       	sub	r0,76
80001618:	80 00       	ld.sh	r0,r0[0x0]
8000161a:	24 c8       	sub	r8,76
8000161c:	80 00       	ld.sh	r0,r0[0x0]
8000161e:	24 d0       	sub	r0,77
80001620:	80 00       	ld.sh	r0,r0[0x0]
80001622:	24 d8       	sub	r8,77
80001624:	80 00       	ld.sh	r0,r0[0x0]
80001626:	24 e0       	sub	r0,78
80001628:	80 00       	ld.sh	r0,r0[0x0]
8000162a:	24 e8       	sub	r8,78
8000162c:	80 00       	ld.sh	r0,r0[0x0]
8000162e:	24 f0       	sub	r0,79
80001630:	80 00       	ld.sh	r0,r0[0x0]
80001632:	24 f8       	sub	r8,79
80001634:	80 00       	ld.sh	r0,r0[0x0]
80001636:	25 00       	sub	r0,80
80001638:	80 00       	ld.sh	r0,r0[0x0]
8000163a:	25 08       	sub	r8,80
8000163c:	80 00       	ld.sh	r0,r0[0x0]
8000163e:	25 10       	sub	r0,81
80001640:	80 00       	ld.sh	r0,r0[0x0]
80001642:	25 18       	sub	r8,81
80001644:	80 00       	ld.sh	r0,r0[0x0]
80001646:	25 20       	sub	r0,82

80001648 <timerInit>:
80001648:	d5 01       	pushm	r11,lr
8000164a:	d2 01       	pushm	r12
8000164c:	f0 1f 00 28 	mcall	800016ec <timerClearInterrupt+0x10>
80001650:	f0 1f 00 28 	mcall	800016f0 <timerClearInterrupt+0x14>
80001654:	e0 6c 38 00 	mov	r12,14336
80001658:	ea 1c ff ff 	orh	r12,0xffff
8000165c:	e0 6b c0 00 	mov	r11,49152
80001660:	ea 1b 00 00 	orh	r11,0x0
80001664:	99 1b       	st.w	r12[0x4],r11
80001666:	30 1b       	mov	r11,1
80001668:	a5 6b       	lsl	r11,0x4
8000166a:	99 9b       	st.w	r12[0x24],r11
8000166c:	d2 02       	popm	r12
8000166e:	f0 1f 00 22 	mcall	800016f4 <timerClearInterrupt+0x18>
80001672:	d5 02       	popm	r11,lr
80001674:	1c 9f       	mov	pc,lr

80001676 <timerReset>:
80001676:	d3 01       	pushm	r11-r12
80001678:	e0 6c 38 00 	mov	r12,14336
8000167c:	ea 1c ff ff 	orh	r12,0xffff
80001680:	30 5b       	mov	r11,5
80001682:	99 0b       	st.w	r12[0x0],r11
80001684:	e0 6b 00 08 	mov	r11,8
80001688:	ea 1b 00 00 	orh	r11,0x0
8000168c:	76 0b       	ld.w	r11,r11[0x0]
8000168e:	99 7b       	st.w	r12[0x1c],r11
80001690:	d3 02       	popm	r11-r12
80001692:	1c 9f       	mov	pc,lr

80001694 <timerStop>:
80001694:	d3 01       	pushm	r11-r12
80001696:	e0 6c 38 00 	mov	r12,14336
8000169a:	ea 1c ff ff 	orh	r12,0xffff
8000169e:	30 2b       	mov	r11,2
800016a0:	99 0b       	st.w	r12[0x0],r11
800016a2:	d3 02       	popm	r11-r12
800016a4:	1c 9f       	mov	pc,lr

800016a6 <timerRCSet>:
800016a6:	d3 01       	pushm	r11-r12
800016a8:	49 4b       	lddpc	r11,800016f8 <timerClearInterrupt+0x1c>
800016aa:	97 0c       	st.w	r11[0x0],r12
800016ac:	e0 6c 38 00 	mov	r12,14336
800016b0:	ea 1c ff ff 	orh	r12,0xffff
800016b4:	76 0b       	ld.w	r11,r11[0x0]
800016b6:	99 7b       	st.w	r12[0x1c],r11
800016b8:	d3 02       	popm	r11-r12
800016ba:	1c 9f       	mov	pc,lr

800016bc <timerPrescaleSet>:
800016bc:	d3 81       	pushm	r10-r12
800016be:	49 0b       	lddpc	r11,800016fc <timerClearInterrupt+0x20>
800016c0:	97 0c       	st.w	r11[0x0],r12
800016c2:	e0 6c 38 00 	mov	r12,14336
800016c6:	ea 1c ff ff 	orh	r12,0xffff
800016ca:	78 1a       	ld.w	r10,r12[0x4]
800016cc:	3f 8b       	mov	r11,-8
800016ce:	16 6a       	and	r10,r11
800016d0:	48 bb       	lddpc	r11,800016fc <timerClearInterrupt+0x20>
800016d2:	76 0b       	ld.w	r11,r11[0x0]
800016d4:	14 4b       	or	r11,r10
800016d6:	99 1b       	st.w	r12[0x4],r11
800016d8:	d3 82       	popm	r10-r12
800016da:	1c 9f       	mov	pc,lr

800016dc <timerClearInterrupt>:
800016dc:	d2 01       	pushm	r12
800016de:	e0 6c 38 00 	mov	r12,14336
800016e2:	ea 1c ff ff 	orh	r12,0xffff
800016e6:	78 8c       	ld.w	r12,r12[0x20]
800016e8:	d2 02       	popm	r12
800016ea:	1c 9f       	mov	pc,lr
800016ec:	80 00       	ld.sh	r0,r0[0x0]
800016ee:	21 66       	sub	r6,22
800016f0:	80 00       	ld.sh	r0,r0[0x0]
800016f2:	16 dc       	st.w	--r11,r12
800016f4:	80 00       	ld.sh	r0,r0[0x0]
800016f6:	0b 14       	ld.sh	r4,r5++
800016f8:	00 00       	add	r0,r0
800016fa:	00 08       	add	r8,r0
800016fc:	00 00       	add	r0,r0
800016fe:	00 0c       	add	r12,r0

80001700 <_stext>:
80001700:	49 7d       	lddpc	sp,8000175c <udata_end+0x4>
80001702:	49 80       	lddpc	r0,80001760 <udata_end+0x8>
80001704:	1a d0       	st.w	--sp,r0
80001706:	e5 cd 20 00 	ldmts	sp,sp
8000170a:	1b 00       	ld.w	r0,sp++
8000170c:	49 60       	lddpc	r0,80001764 <udata_end+0xc>
8000170e:	e3 b0 00 01 	mtsr	0x4,r0
80001712:	d5 53       	csrf	0x15
80001714:	e0 6c 0c 00 	mov	r12,3072
80001718:	ea 1c ff ff 	orh	r12,0xffff
8000171c:	e0 6b 01 07 	mov	r11,263
80001720:	99 ab       	st.w	r12[0x28],r11
80001722:	30 4b       	mov	r11,4
80001724:	99 0b       	st.w	r12[0x0],r11
80001726:	e0 6a 00 80 	mov	r10,128

8000172a <xw8>:
8000172a:	79 5b       	ld.w	r11,r12[0x54]
8000172c:	14 7b       	tst	r11,r10
8000172e:	cf e0       	breq	8000172a <xw8>
80001730:	30 5b       	mov	r11,5
80001732:	99 0b       	st.w	r12[0x0],r11

80001734 <idata_>:
80001734:	48 d0       	lddpc	r0,80001768 <udata_end+0x10>
80001736:	48 e1       	lddpc	r1,8000176c <udata_end+0x14>
80001738:	02 30       	cp.w	r0,r1
8000173a:	c0 62       	brcc	80001746 <idata_end>
8000173c:	48 d2       	lddpc	r2,80001770 <udata_end+0x18>

8000173e <idata_loop>:
8000173e:	05 04       	ld.w	r4,r2++
80001740:	00 a4       	st.w	r0++,r4
80001742:	02 30       	cp.w	r0,r1
80001744:	cf d3       	brcs	8000173e <idata_loop>

80001746 <idata_end>:
80001746:	48 c0       	lddpc	r0,80001774 <udata_end+0x1c>
80001748:	48 c1       	lddpc	r1,80001778 <udata_end+0x20>
8000174a:	02 30       	cp.w	r0,r1
8000174c:	c0 62       	brcc	80001758 <udata_end>
8000174e:	30 02       	mov	r2,0
80001750:	30 03       	mov	r3,0

80001752 <udata_loop>:
80001752:	00 a2       	st.w	r0++,r2
80001754:	02 30       	cp.w	r0,r1
80001756:	cf e3       	brcs	80001752 <udata_loop>

80001758 <udata_end>:
80001758:	48 9f       	lddpc	pc,8000177c <udata_end+0x24>
8000175a:	00 00       	add	r0,r0
8000175c:	00 01       	add	r1,r0
8000175e:	00 00       	add	r0,r0
80001760:	00 00       	add	r0,r0
80001762:	f0 00       	*unknown*
80001764:	80 00       	ld.sh	r0,r0[0x0]
80001766:	20 00       	sub	r0,0
80001768:	00 00       	add	r0,r0
8000176a:	00 08       	add	r8,r0
8000176c:	00 00       	add	r0,r0
8000176e:	05 18       	ld.sh	r8,r2++
80001770:	80 00       	ld.sh	r0,r0[0x0]
80001772:	25 90       	sub	r0,89
80001774:	00 00       	add	r0,r0
80001776:	05 18       	ld.sh	r8,r2++
80001778:	00 00       	add	r0,r0
8000177a:	07 98       	ld.ub	r8,r3[0x1]
8000177c:	80 00       	ld.sh	r0,r0[0x0]
8000177e:	00 ac       	st.w	r0++,r12

80001780 <free>:
80001780:	d4 01       	pushm	lr
80001782:	48 48       	lddpc	r8,80001790 <free+0x10>
80001784:	18 9b       	mov	r11,r12
80001786:	70 0c       	ld.w	r12,r8[0x0]
80001788:	f0 1f 00 03 	mcall	80001794 <free+0x14>
8000178c:	d8 02       	popm	pc
8000178e:	00 00       	add	r0,r0
80001790:	00 00       	add	r0,r0
80001792:	05 10       	ld.sh	r0,r2++
80001794:	80 00       	ld.sh	r0,r0[0x0]
80001796:	1d 20       	ld.uh	r0,lr++

80001798 <malloc>:
80001798:	d4 01       	pushm	lr
8000179a:	48 48       	lddpc	r8,800017a8 <malloc+0x10>
8000179c:	18 9b       	mov	r11,r12
8000179e:	70 0c       	ld.w	r12,r8[0x0]
800017a0:	f0 1f 00 03 	mcall	800017ac <malloc+0x14>
800017a4:	d8 02       	popm	pc
800017a6:	00 00       	add	r0,r0
800017a8:	00 00       	add	r0,r0
800017aa:	05 10       	ld.sh	r0,r2++
800017ac:	80 00       	ld.sh	r0,r0[0x0]
800017ae:	17 b0       	ld.ub	r0,r11[0x3]

800017b0 <_malloc_r>:
800017b0:	d4 31       	pushm	r0-r7,lr
800017b2:	f6 c8 ff f5 	sub	r8,r11,-11
800017b6:	18 95       	mov	r5,r12
800017b8:	10 97       	mov	r7,r8
800017ba:	e0 17 ff f8 	andl	r7,0xfff8
800017be:	59 68       	cp.w	r8,22
800017c0:	f9 b7 08 10 	movls	r7,16
800017c4:	16 37       	cp.w	r7,r11
800017c6:	5f 38       	srlo	r8
800017c8:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800017cc:	c0 50       	breq	800017d6 <_malloc_r+0x26>
800017ce:	30 c8       	mov	r8,12
800017d0:	99 38       	st.w	r12[0xc],r8
800017d2:	e0 8f 01 f3 	bral	80001bb8 <_malloc_r+0x408>
800017d6:	f0 1f 00 50 	mcall	80001914 <_malloc_r+0x164>
800017da:	e0 47 01 f7 	cp.w	r7,503
800017de:	e0 8b 00 1c 	brhi	80001816 <_malloc_r+0x66>
800017e2:	ee 03 16 03 	lsr	r3,r7,0x3
800017e6:	4c d8       	lddpc	r8,80001918 <_malloc_r+0x168>
800017e8:	f0 03 00 38 	add	r8,r8,r3<<0x3
800017ec:	70 36       	ld.w	r6,r8[0xc]
800017ee:	10 36       	cp.w	r6,r8
800017f0:	c0 61       	brne	800017fc <_malloc_r+0x4c>
800017f2:	ec c8 ff f8 	sub	r8,r6,-8
800017f6:	70 36       	ld.w	r6,r8[0xc]
800017f8:	10 36       	cp.w	r6,r8
800017fa:	c0 c0       	breq	80001812 <_malloc_r+0x62>
800017fc:	6c 18       	ld.w	r8,r6[0x4]
800017fe:	e0 18 ff fc 	andl	r8,0xfffc
80001802:	6c 3a       	ld.w	r10,r6[0xc]
80001804:	ec 08 00 09 	add	r9,r6,r8
80001808:	0a 9c       	mov	r12,r5
8000180a:	6c 28       	ld.w	r8,r6[0x8]
8000180c:	95 28       	st.w	r10[0x8],r8
8000180e:	91 3a       	st.w	r8[0xc],r10
80001810:	c4 68       	rjmp	8000189c <_malloc_r+0xec>
80001812:	2f e3       	sub	r3,-2
80001814:	c4 c8       	rjmp	800018ac <_malloc_r+0xfc>
80001816:	ee 03 16 09 	lsr	r3,r7,0x9
8000181a:	c0 41       	brne	80001822 <_malloc_r+0x72>
8000181c:	ee 03 16 03 	lsr	r3,r7,0x3
80001820:	c2 68       	rjmp	8000186c <_malloc_r+0xbc>
80001822:	58 43       	cp.w	r3,4
80001824:	e0 8b 00 06 	brhi	80001830 <_malloc_r+0x80>
80001828:	ee 03 16 06 	lsr	r3,r7,0x6
8000182c:	2c 83       	sub	r3,-56
8000182e:	c1 f8       	rjmp	8000186c <_malloc_r+0xbc>
80001830:	59 43       	cp.w	r3,20
80001832:	e0 8b 00 04 	brhi	8000183a <_malloc_r+0x8a>
80001836:	2a 53       	sub	r3,-91
80001838:	c1 a8       	rjmp	8000186c <_malloc_r+0xbc>
8000183a:	e0 43 00 54 	cp.w	r3,84
8000183e:	e0 8b 00 06 	brhi	8000184a <_malloc_r+0x9a>
80001842:	ee 03 16 0c 	lsr	r3,r7,0xc
80001846:	29 23       	sub	r3,-110
80001848:	c1 28       	rjmp	8000186c <_malloc_r+0xbc>
8000184a:	e0 43 01 54 	cp.w	r3,340
8000184e:	e0 8b 00 06 	brhi	8000185a <_malloc_r+0xaa>
80001852:	ee 03 16 0f 	lsr	r3,r7,0xf
80001856:	28 93       	sub	r3,-119
80001858:	c0 a8       	rjmp	8000186c <_malloc_r+0xbc>
8000185a:	e0 43 05 54 	cp.w	r3,1364
8000185e:	e0 88 00 04 	brls	80001866 <_malloc_r+0xb6>
80001862:	37 e3       	mov	r3,126
80001864:	c0 48       	rjmp	8000186c <_malloc_r+0xbc>
80001866:	ee 03 16 12 	lsr	r3,r7,0x12
8000186a:	28 43       	sub	r3,-124
8000186c:	4a ba       	lddpc	r10,80001918 <_malloc_r+0x168>
8000186e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80001872:	74 36       	ld.w	r6,r10[0xc]
80001874:	c1 98       	rjmp	800018a6 <_malloc_r+0xf6>
80001876:	6c 19       	ld.w	r9,r6[0x4]
80001878:	e0 19 ff fc 	andl	r9,0xfffc
8000187c:	f2 07 01 0b 	sub	r11,r9,r7
80001880:	58 fb       	cp.w	r11,15
80001882:	e0 8a 00 04 	brle	8000188a <_malloc_r+0xda>
80001886:	20 13       	sub	r3,1
80001888:	c1 18       	rjmp	800018aa <_malloc_r+0xfa>
8000188a:	6c 38       	ld.w	r8,r6[0xc]
8000188c:	58 0b       	cp.w	r11,0
8000188e:	c0 b5       	brlt	800018a4 <_malloc_r+0xf4>
80001890:	6c 2a       	ld.w	r10,r6[0x8]
80001892:	ec 09 00 09 	add	r9,r6,r9
80001896:	0a 9c       	mov	r12,r5
80001898:	91 2a       	st.w	r8[0x8],r10
8000189a:	95 38       	st.w	r10[0xc],r8
8000189c:	72 18       	ld.w	r8,r9[0x4]
8000189e:	a1 a8       	sbr	r8,0x0
800018a0:	93 18       	st.w	r9[0x4],r8
800018a2:	cb c8       	rjmp	80001a1a <_malloc_r+0x26a>
800018a4:	10 96       	mov	r6,r8
800018a6:	14 36       	cp.w	r6,r10
800018a8:	ce 71       	brne	80001876 <_malloc_r+0xc6>
800018aa:	2f f3       	sub	r3,-1
800018ac:	49 ba       	lddpc	r10,80001918 <_malloc_r+0x168>
800018ae:	f4 cc ff f8 	sub	r12,r10,-8
800018b2:	78 26       	ld.w	r6,r12[0x8]
800018b4:	18 36       	cp.w	r6,r12
800018b6:	c6 e0       	breq	80001992 <_malloc_r+0x1e2>
800018b8:	6c 19       	ld.w	r9,r6[0x4]
800018ba:	e0 19 ff fc 	andl	r9,0xfffc
800018be:	f2 07 01 08 	sub	r8,r9,r7
800018c2:	58 f8       	cp.w	r8,15
800018c4:	e0 89 00 90 	brgt	800019e4 <_malloc_r+0x234>
800018c8:	99 3c       	st.w	r12[0xc],r12
800018ca:	99 2c       	st.w	r12[0x8],r12
800018cc:	58 08       	cp.w	r8,0
800018ce:	c0 55       	brlt	800018d8 <_malloc_r+0x128>
800018d0:	ec 09 00 09 	add	r9,r6,r9
800018d4:	0a 9c       	mov	r12,r5
800018d6:	ce 3b       	rjmp	8000189c <_malloc_r+0xec>
800018d8:	e0 49 01 ff 	cp.w	r9,511
800018dc:	e0 8b 00 13 	brhi	80001902 <_malloc_r+0x152>
800018e0:	a3 99       	lsr	r9,0x3
800018e2:	f4 09 00 38 	add	r8,r10,r9<<0x3
800018e6:	70 2b       	ld.w	r11,r8[0x8]
800018e8:	8d 38       	st.w	r6[0xc],r8
800018ea:	8d 2b       	st.w	r6[0x8],r11
800018ec:	97 36       	st.w	r11[0xc],r6
800018ee:	91 26       	st.w	r8[0x8],r6
800018f0:	a3 49       	asr	r9,0x2
800018f2:	74 18       	ld.w	r8,r10[0x4]
800018f4:	30 1b       	mov	r11,1
800018f6:	f6 09 09 49 	lsl	r9,r11,r9
800018fa:	f1 e9 10 09 	or	r9,r8,r9
800018fe:	95 19       	st.w	r10[0x4],r9
80001900:	c4 98       	rjmp	80001992 <_malloc_r+0x1e2>
80001902:	f2 0a 16 09 	lsr	r10,r9,0x9
80001906:	58 4a       	cp.w	r10,4
80001908:	e0 8b 00 0a 	brhi	8000191c <_malloc_r+0x16c>
8000190c:	f2 0a 16 06 	lsr	r10,r9,0x6
80001910:	2c 8a       	sub	r10,-56
80001912:	c2 38       	rjmp	80001958 <_malloc_r+0x1a8>
80001914:	80 00       	ld.sh	r0,r0[0x0]
80001916:	1c 00       	add	r0,lr
80001918:	00 00       	add	r0,r0
8000191a:	00 10       	sub	r0,r0
8000191c:	59 4a       	cp.w	r10,20
8000191e:	e0 8b 00 04 	brhi	80001926 <_malloc_r+0x176>
80001922:	2a 5a       	sub	r10,-91
80001924:	c1 a8       	rjmp	80001958 <_malloc_r+0x1a8>
80001926:	e0 4a 00 54 	cp.w	r10,84
8000192a:	e0 8b 00 06 	brhi	80001936 <_malloc_r+0x186>
8000192e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80001932:	29 2a       	sub	r10,-110
80001934:	c1 28       	rjmp	80001958 <_malloc_r+0x1a8>
80001936:	e0 4a 01 54 	cp.w	r10,340
8000193a:	e0 8b 00 06 	brhi	80001946 <_malloc_r+0x196>
8000193e:	f2 0a 16 0f 	lsr	r10,r9,0xf
80001942:	28 9a       	sub	r10,-119
80001944:	c0 a8       	rjmp	80001958 <_malloc_r+0x1a8>
80001946:	e0 4a 05 54 	cp.w	r10,1364
8000194a:	e0 88 00 04 	brls	80001952 <_malloc_r+0x1a2>
8000194e:	37 ea       	mov	r10,126
80001950:	c0 48       	rjmp	80001958 <_malloc_r+0x1a8>
80001952:	f2 0a 16 12 	lsr	r10,r9,0x12
80001956:	28 4a       	sub	r10,-124
80001958:	4c 8b       	lddpc	r11,80001a78 <_malloc_r+0x2c8>
8000195a:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000195e:	68 28       	ld.w	r8,r4[0x8]
80001960:	08 38       	cp.w	r8,r4
80001962:	c0 e1       	brne	8000197e <_malloc_r+0x1ce>
80001964:	76 19       	ld.w	r9,r11[0x4]
80001966:	a3 4a       	asr	r10,0x2
80001968:	30 1e       	mov	lr,1
8000196a:	fc 0a 09 4a 	lsl	r10,lr,r10
8000196e:	f3 ea 10 0a 	or	r10,r9,r10
80001972:	10 99       	mov	r9,r8
80001974:	97 1a       	st.w	r11[0x4],r10
80001976:	c0 a8       	rjmp	8000198a <_malloc_r+0x1da>
80001978:	70 28       	ld.w	r8,r8[0x8]
8000197a:	08 38       	cp.w	r8,r4
8000197c:	c0 60       	breq	80001988 <_malloc_r+0x1d8>
8000197e:	70 1a       	ld.w	r10,r8[0x4]
80001980:	e0 1a ff fc 	andl	r10,0xfffc
80001984:	14 39       	cp.w	r9,r10
80001986:	cf 93       	brcs	80001978 <_malloc_r+0x1c8>
80001988:	70 39       	ld.w	r9,r8[0xc]
8000198a:	8d 39       	st.w	r6[0xc],r9
8000198c:	8d 28       	st.w	r6[0x8],r8
8000198e:	91 36       	st.w	r8[0xc],r6
80001990:	93 26       	st.w	r9[0x8],r6
80001992:	e6 08 14 02 	asr	r8,r3,0x2
80001996:	30 1b       	mov	r11,1
80001998:	4b 84       	lddpc	r4,80001a78 <_malloc_r+0x2c8>
8000199a:	f6 08 09 4b 	lsl	r11,r11,r8
8000199e:	68 18       	ld.w	r8,r4[0x4]
800019a0:	10 3b       	cp.w	r11,r8
800019a2:	e0 8b 00 6f 	brhi	80001a80 <_malloc_r+0x2d0>
800019a6:	f7 e8 00 09 	and	r9,r11,r8
800019aa:	c0 b1       	brne	800019c0 <_malloc_r+0x210>
800019ac:	e0 13 ff fc 	andl	r3,0xfffc
800019b0:	a1 7b       	lsl	r11,0x1
800019b2:	2f c3       	sub	r3,-4
800019b4:	c0 38       	rjmp	800019ba <_malloc_r+0x20a>
800019b6:	2f c3       	sub	r3,-4
800019b8:	a1 7b       	lsl	r11,0x1
800019ba:	f7 e8 00 09 	and	r9,r11,r8
800019be:	cf c0       	breq	800019b6 <_malloc_r+0x206>
800019c0:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800019c4:	06 92       	mov	r2,r3
800019c6:	1c 91       	mov	r1,lr
800019c8:	62 36       	ld.w	r6,r1[0xc]
800019ca:	c2 e8       	rjmp	80001a26 <_malloc_r+0x276>
800019cc:	6c 1a       	ld.w	r10,r6[0x4]
800019ce:	e0 1a ff fc 	andl	r10,0xfffc
800019d2:	f4 07 01 08 	sub	r8,r10,r7
800019d6:	58 f8       	cp.w	r8,15
800019d8:	e0 8a 00 15 	brle	80001a02 <_malloc_r+0x252>
800019dc:	6c 3a       	ld.w	r10,r6[0xc]
800019de:	6c 29       	ld.w	r9,r6[0x8]
800019e0:	95 29       	st.w	r10[0x8],r9
800019e2:	93 3a       	st.w	r9[0xc],r10
800019e4:	0e 99       	mov	r9,r7
800019e6:	ec 07 00 07 	add	r7,r6,r7
800019ea:	a1 a9       	sbr	r9,0x0
800019ec:	99 37       	st.w	r12[0xc],r7
800019ee:	99 27       	st.w	r12[0x8],r7
800019f0:	8d 19       	st.w	r6[0x4],r9
800019f2:	ee 08 09 08 	st.w	r7[r8],r8
800019f6:	8f 2c       	st.w	r7[0x8],r12
800019f8:	8f 3c       	st.w	r7[0xc],r12
800019fa:	a1 a8       	sbr	r8,0x0
800019fc:	0a 9c       	mov	r12,r5
800019fe:	8f 18       	st.w	r7[0x4],r8
80001a00:	c0 d8       	rjmp	80001a1a <_malloc_r+0x26a>
80001a02:	6c 39       	ld.w	r9,r6[0xc]
80001a04:	58 08       	cp.w	r8,0
80001a06:	c0 f5       	brlt	80001a24 <_malloc_r+0x274>
80001a08:	ec 0a 00 0a 	add	r10,r6,r10
80001a0c:	74 18       	ld.w	r8,r10[0x4]
80001a0e:	a1 a8       	sbr	r8,0x0
80001a10:	0a 9c       	mov	r12,r5
80001a12:	95 18       	st.w	r10[0x4],r8
80001a14:	6c 28       	ld.w	r8,r6[0x8]
80001a16:	93 28       	st.w	r9[0x8],r8
80001a18:	91 39       	st.w	r8[0xc],r9
80001a1a:	f0 1f 00 19 	mcall	80001a7c <_malloc_r+0x2cc>
80001a1e:	ec cc ff f8 	sub	r12,r6,-8
80001a22:	d8 32       	popm	r0-r7,pc
80001a24:	12 96       	mov	r6,r9
80001a26:	02 36       	cp.w	r6,r1
80001a28:	cd 21       	brne	800019cc <_malloc_r+0x21c>
80001a2a:	2f f2       	sub	r2,-1
80001a2c:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001a30:	c0 30       	breq	80001a36 <_malloc_r+0x286>
80001a32:	2f 81       	sub	r1,-8
80001a34:	cc ab       	rjmp	800019c8 <_malloc_r+0x218>
80001a36:	1c 98       	mov	r8,lr
80001a38:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001a3c:	c0 81       	brne	80001a4c <_malloc_r+0x29c>
80001a3e:	68 19       	ld.w	r9,r4[0x4]
80001a40:	f6 08 11 ff 	rsub	r8,r11,-1
80001a44:	f3 e8 00 08 	and	r8,r9,r8
80001a48:	89 18       	st.w	r4[0x4],r8
80001a4a:	c0 78       	rjmp	80001a58 <_malloc_r+0x2a8>
80001a4c:	f0 c9 00 08 	sub	r9,r8,8
80001a50:	20 13       	sub	r3,1
80001a52:	70 08       	ld.w	r8,r8[0x0]
80001a54:	12 38       	cp.w	r8,r9
80001a56:	cf 10       	breq	80001a38 <_malloc_r+0x288>
80001a58:	a1 7b       	lsl	r11,0x1
80001a5a:	68 18       	ld.w	r8,r4[0x4]
80001a5c:	10 3b       	cp.w	r11,r8
80001a5e:	e0 8b 00 11 	brhi	80001a80 <_malloc_r+0x2d0>
80001a62:	58 0b       	cp.w	r11,0
80001a64:	c0 e0       	breq	80001a80 <_malloc_r+0x2d0>
80001a66:	04 93       	mov	r3,r2
80001a68:	c0 38       	rjmp	80001a6e <_malloc_r+0x2be>
80001a6a:	2f c3       	sub	r3,-4
80001a6c:	a1 7b       	lsl	r11,0x1
80001a6e:	f7 e8 00 09 	and	r9,r11,r8
80001a72:	ca 71       	brne	800019c0 <_malloc_r+0x210>
80001a74:	cf bb       	rjmp	80001a6a <_malloc_r+0x2ba>
80001a76:	00 00       	add	r0,r0
80001a78:	00 00       	add	r0,r0
80001a7a:	00 10       	sub	r0,r0
80001a7c:	80 00       	ld.sh	r0,r0[0x0]
80001a7e:	1c 02       	add	r2,lr
80001a80:	68 23       	ld.w	r3,r4[0x8]
80001a82:	66 12       	ld.w	r2,r3[0x4]
80001a84:	e0 12 ff fc 	andl	r2,0xfffc
80001a88:	0e 32       	cp.w	r2,r7
80001a8a:	5f 39       	srlo	r9
80001a8c:	e4 07 01 08 	sub	r8,r2,r7
80001a90:	58 f8       	cp.w	r8,15
80001a92:	5f aa       	srle	r10
80001a94:	f5 e9 10 09 	or	r9,r10,r9
80001a98:	e0 80 00 a2 	breq	80001bdc <_malloc_r+0x42c>
80001a9c:	4c 88       	lddpc	r8,80001bbc <_malloc_r+0x40c>
80001a9e:	70 01       	ld.w	r1,r8[0x0]
80001aa0:	4c 88       	lddpc	r8,80001bc0 <_malloc_r+0x410>
80001aa2:	2f 01       	sub	r1,-16
80001aa4:	70 08       	ld.w	r8,r8[0x0]
80001aa6:	0e 01       	add	r1,r7
80001aa8:	5b f8       	cp.w	r8,-1
80001aaa:	c0 40       	breq	80001ab2 <_malloc_r+0x302>
80001aac:	28 11       	sub	r1,-127
80001aae:	e0 11 ff 80 	andl	r1,0xff80
80001ab2:	02 9b       	mov	r11,r1
80001ab4:	0a 9c       	mov	r12,r5
80001ab6:	f0 1f 00 44 	mcall	80001bc4 <_malloc_r+0x414>
80001aba:	18 96       	mov	r6,r12
80001abc:	5b fc       	cp.w	r12,-1
80001abe:	c6 e0       	breq	80001b9a <_malloc_r+0x3ea>
80001ac0:	e6 02 00 08 	add	r8,r3,r2
80001ac4:	10 3c       	cp.w	r12,r8
80001ac6:	c0 32       	brcc	80001acc <_malloc_r+0x31c>
80001ac8:	08 33       	cp.w	r3,r4
80001aca:	c6 81       	brne	80001b9a <_malloc_r+0x3ea>
80001acc:	4b fa       	lddpc	r10,80001bc8 <_malloc_r+0x418>
80001ace:	74 09       	ld.w	r9,r10[0x0]
80001ad0:	e2 09 00 09 	add	r9,r1,r9
80001ad4:	95 09       	st.w	r10[0x0],r9
80001ad6:	10 36       	cp.w	r6,r8
80001ad8:	c0 a1       	brne	80001aec <_malloc_r+0x33c>
80001ada:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80001ade:	c0 71       	brne	80001aec <_malloc_r+0x33c>
80001ae0:	e2 02 00 02 	add	r2,r1,r2
80001ae4:	68 28       	ld.w	r8,r4[0x8]
80001ae6:	a1 a2       	sbr	r2,0x0
80001ae8:	91 12       	st.w	r8[0x4],r2
80001aea:	c4 c8       	rjmp	80001b82 <_malloc_r+0x3d2>
80001aec:	4b 5a       	lddpc	r10,80001bc0 <_malloc_r+0x410>
80001aee:	74 0b       	ld.w	r11,r10[0x0]
80001af0:	5b fb       	cp.w	r11,-1
80001af2:	c0 31       	brne	80001af8 <_malloc_r+0x348>
80001af4:	95 06       	st.w	r10[0x0],r6
80001af6:	c0 68       	rjmp	80001b02 <_malloc_r+0x352>
80001af8:	ec 09 00 09 	add	r9,r6,r9
80001afc:	4b 3a       	lddpc	r10,80001bc8 <_malloc_r+0x418>
80001afe:	10 19       	sub	r9,r8
80001b00:	95 09       	st.w	r10[0x0],r9
80001b02:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80001b06:	f0 09 11 08 	rsub	r9,r8,8
80001b0a:	58 08       	cp.w	r8,0
80001b0c:	f2 08 17 10 	movne	r8,r9
80001b10:	ed d8 e1 06 	addne	r6,r6,r8
80001b14:	28 08       	sub	r8,-128
80001b16:	ec 01 00 01 	add	r1,r6,r1
80001b1a:	0a 9c       	mov	r12,r5
80001b1c:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80001b20:	f0 01 01 01 	sub	r1,r8,r1
80001b24:	02 9b       	mov	r11,r1
80001b26:	f0 1f 00 28 	mcall	80001bc4 <_malloc_r+0x414>
80001b2a:	4a 88       	lddpc	r8,80001bc8 <_malloc_r+0x418>
80001b2c:	5b fc       	cp.w	r12,-1
80001b2e:	ec 0c 17 00 	moveq	r12,r6
80001b32:	f9 b1 00 00 	moveq	r1,0
80001b36:	70 09       	ld.w	r9,r8[0x0]
80001b38:	0c 1c       	sub	r12,r6
80001b3a:	89 26       	st.w	r4[0x8],r6
80001b3c:	02 0c       	add	r12,r1
80001b3e:	12 01       	add	r1,r9
80001b40:	a1 ac       	sbr	r12,0x0
80001b42:	91 01       	st.w	r8[0x0],r1
80001b44:	8d 1c       	st.w	r6[0x4],r12
80001b46:	08 33       	cp.w	r3,r4
80001b48:	c1 d0       	breq	80001b82 <_malloc_r+0x3d2>
80001b4a:	58 f2       	cp.w	r2,15
80001b4c:	e0 8b 00 05 	brhi	80001b56 <_malloc_r+0x3a6>
80001b50:	30 18       	mov	r8,1
80001b52:	8d 18       	st.w	r6[0x4],r8
80001b54:	c2 38       	rjmp	80001b9a <_malloc_r+0x3ea>
80001b56:	30 59       	mov	r9,5
80001b58:	20 c2       	sub	r2,12
80001b5a:	e0 12 ff f8 	andl	r2,0xfff8
80001b5e:	e6 02 00 08 	add	r8,r3,r2
80001b62:	91 29       	st.w	r8[0x8],r9
80001b64:	91 19       	st.w	r8[0x4],r9
80001b66:	66 18       	ld.w	r8,r3[0x4]
80001b68:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001b6c:	e5 e8 10 08 	or	r8,r2,r8
80001b70:	87 18       	st.w	r3[0x4],r8
80001b72:	58 f2       	cp.w	r2,15
80001b74:	e0 88 00 07 	brls	80001b82 <_malloc_r+0x3d2>
80001b78:	e6 cb ff f8 	sub	r11,r3,-8
80001b7c:	0a 9c       	mov	r12,r5
80001b7e:	f0 1f 00 14 	mcall	80001bcc <_malloc_r+0x41c>
80001b82:	49 49       	lddpc	r9,80001bd0 <_malloc_r+0x420>
80001b84:	72 0a       	ld.w	r10,r9[0x0]
80001b86:	49 18       	lddpc	r8,80001bc8 <_malloc_r+0x418>
80001b88:	70 08       	ld.w	r8,r8[0x0]
80001b8a:	14 38       	cp.w	r8,r10
80001b8c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001b90:	49 19       	lddpc	r9,80001bd4 <_malloc_r+0x424>
80001b92:	72 0a       	ld.w	r10,r9[0x0]
80001b94:	14 38       	cp.w	r8,r10
80001b96:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001b9a:	68 28       	ld.w	r8,r4[0x8]
80001b9c:	70 18       	ld.w	r8,r8[0x4]
80001b9e:	e0 18 ff fc 	andl	r8,0xfffc
80001ba2:	0e 38       	cp.w	r8,r7
80001ba4:	5f 39       	srlo	r9
80001ba6:	0e 18       	sub	r8,r7
80001ba8:	58 f8       	cp.w	r8,15
80001baa:	5f aa       	srle	r10
80001bac:	f5 e9 10 09 	or	r9,r10,r9
80001bb0:	c1 60       	breq	80001bdc <_malloc_r+0x42c>
80001bb2:	0a 9c       	mov	r12,r5
80001bb4:	f0 1f 00 09 	mcall	80001bd8 <_malloc_r+0x428>
80001bb8:	d8 3a       	popm	r0-r7,pc,r12=0
80001bba:	00 00       	add	r0,r0
80001bbc:	00 00       	add	r0,r0
80001bbe:	06 20       	rsub	r0,r3
80001bc0:	00 00       	add	r0,r0
80001bc2:	04 1c       	sub	r12,r2
80001bc4:	80 00       	ld.sh	r0,r0[0x0]
80001bc6:	1c 04       	add	r4,lr
80001bc8:	00 00       	add	r0,r0
80001bca:	06 24       	rsub	r4,r3
80001bcc:	80 00       	ld.sh	r0,r0[0x0]
80001bce:	1d 20       	ld.uh	r0,lr++
80001bd0:	00 00       	add	r0,r0
80001bd2:	06 1c       	sub	r12,r3
80001bd4:	00 00       	add	r0,r0
80001bd6:	06 18       	sub	r8,r3
80001bd8:	80 00       	ld.sh	r0,r0[0x0]
80001bda:	1c 02       	add	r2,lr
80001bdc:	68 26       	ld.w	r6,r4[0x8]
80001bde:	a1 a8       	sbr	r8,0x0
80001be0:	0e 99       	mov	r9,r7
80001be2:	a1 a9       	sbr	r9,0x0
80001be4:	8d 19       	st.w	r6[0x4],r9
80001be6:	ec 07 00 07 	add	r7,r6,r7
80001bea:	0a 9c       	mov	r12,r5
80001bec:	89 27       	st.w	r4[0x8],r7
80001bee:	8f 18       	st.w	r7[0x4],r8
80001bf0:	f0 1f 00 03 	mcall	80001bfc <_malloc_r+0x44c>
80001bf4:	ec cc ff f8 	sub	r12,r6,-8
80001bf8:	d8 32       	popm	r0-r7,pc
80001bfa:	00 00       	add	r0,r0
80001bfc:	80 00       	ld.sh	r0,r0[0x0]
80001bfe:	1c 02       	add	r2,lr

80001c00 <__malloc_lock>:
80001c00:	5e fc       	retal	r12

80001c02 <__malloc_unlock>:
80001c02:	5e fc       	retal	r12

80001c04 <_sbrk_r>:
80001c04:	d4 21       	pushm	r4-r7,lr
80001c06:	30 08       	mov	r8,0
80001c08:	18 97       	mov	r7,r12
80001c0a:	48 76       	lddpc	r6,80001c24 <_sbrk_r+0x20>
80001c0c:	16 9c       	mov	r12,r11
80001c0e:	8d 08       	st.w	r6[0x0],r8
80001c10:	f0 1f 00 06 	mcall	80001c28 <_sbrk_r+0x24>
80001c14:	5b fc       	cp.w	r12,-1
80001c16:	c0 51       	brne	80001c20 <_sbrk_r+0x1c>
80001c18:	6c 08       	ld.w	r8,r6[0x0]
80001c1a:	58 08       	cp.w	r8,0
80001c1c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80001c20:	d8 22       	popm	r4-r7,pc
80001c22:	00 00       	add	r0,r0
80001c24:	00 00       	add	r0,r0
80001c26:	07 90       	ld.ub	r0,r3[0x1]
80001c28:	80 00       	ld.sh	r0,r0[0x0]
80001c2a:	1c 2c       	rsub	r12,lr

80001c2c <_sbrk>:
80001c2c:	d4 01       	pushm	lr
80001c2e:	48 c8       	lddpc	r8,80001c5c <_sbrk+0x30>
80001c30:	70 09       	ld.w	r9,r8[0x0]
80001c32:	58 09       	cp.w	r9,0
80001c34:	c0 31       	brne	80001c3a <_sbrk+0xe>
80001c36:	48 b9       	lddpc	r9,80001c60 <_sbrk+0x34>
80001c38:	91 09       	st.w	r8[0x0],r9
80001c3a:	48 99       	lddpc	r9,80001c5c <_sbrk+0x30>
80001c3c:	48 aa       	lddpc	r10,80001c64 <_sbrk+0x38>
80001c3e:	72 08       	ld.w	r8,r9[0x0]
80001c40:	f0 0c 00 0c 	add	r12,r8,r12
80001c44:	14 3c       	cp.w	r12,r10
80001c46:	e0 8b 00 04 	brhi	80001c4e <_sbrk+0x22>
80001c4a:	93 0c       	st.w	r9[0x0],r12
80001c4c:	c0 68       	rjmp	80001c58 <_sbrk+0x2c>
80001c4e:	f0 1f 00 07 	mcall	80001c68 <_sbrk+0x3c>
80001c52:	30 c8       	mov	r8,12
80001c54:	99 08       	st.w	r12[0x0],r8
80001c56:	3f f8       	mov	r8,-1
80001c58:	10 9c       	mov	r12,r8
80001c5a:	d8 02       	popm	pc
80001c5c:	00 00       	add	r0,r0
80001c5e:	06 4c       	or	r12,r3
80001c60:	00 00       	add	r0,r0
80001c62:	07 98       	ld.ub	r8,r3[0x1]
80001c64:	00 00       	add	r0,r0
80001c66:	e0 00       	*unknown*
80001c68:	80 00       	ld.sh	r0,r0[0x0]
80001c6a:	1c 6c       	and	r12,lr

80001c6c <__errno>:
80001c6c:	48 28       	lddpc	r8,80001c74 <__errno+0x8>
80001c6e:	70 0c       	ld.w	r12,r8[0x0]
80001c70:	2f 4c       	sub	r12,-12
80001c72:	5e fc       	retal	r12
80001c74:	00 00       	add	r0,r0
80001c76:	05 10       	ld.sh	r0,r2++

80001c78 <_malloc_trim_r>:
80001c78:	d4 21       	pushm	r4-r7,lr
80001c7a:	16 95       	mov	r5,r11
80001c7c:	18 97       	mov	r7,r12
80001c7e:	f0 1f 00 23 	mcall	80001d08 <_malloc_trim_r+0x90>
80001c82:	4a 34       	lddpc	r4,80001d0c <_malloc_trim_r+0x94>
80001c84:	68 28       	ld.w	r8,r4[0x8]
80001c86:	70 16       	ld.w	r6,r8[0x4]
80001c88:	e0 16 ff fc 	andl	r6,0xfffc
80001c8c:	ec c8 ff 91 	sub	r8,r6,-111
80001c90:	f0 05 01 05 	sub	r5,r8,r5
80001c94:	e0 15 ff 80 	andl	r5,0xff80
80001c98:	ea c5 00 80 	sub	r5,r5,128
80001c9c:	e0 45 00 7f 	cp.w	r5,127
80001ca0:	e0 8a 00 23 	brle	80001ce6 <_malloc_trim_r+0x6e>
80001ca4:	30 0b       	mov	r11,0
80001ca6:	0e 9c       	mov	r12,r7
80001ca8:	f0 1f 00 1a 	mcall	80001d10 <_malloc_trim_r+0x98>
80001cac:	68 28       	ld.w	r8,r4[0x8]
80001cae:	0c 08       	add	r8,r6
80001cb0:	10 3c       	cp.w	r12,r8
80001cb2:	c1 a1       	brne	80001ce6 <_malloc_trim_r+0x6e>
80001cb4:	ea 0b 11 00 	rsub	r11,r5,0
80001cb8:	0e 9c       	mov	r12,r7
80001cba:	f0 1f 00 16 	mcall	80001d10 <_malloc_trim_r+0x98>
80001cbe:	5b fc       	cp.w	r12,-1
80001cc0:	c1 71       	brne	80001cee <_malloc_trim_r+0x76>
80001cc2:	30 0b       	mov	r11,0
80001cc4:	0e 9c       	mov	r12,r7
80001cc6:	f0 1f 00 13 	mcall	80001d10 <_malloc_trim_r+0x98>
80001cca:	68 28       	ld.w	r8,r4[0x8]
80001ccc:	f8 08 01 09 	sub	r9,r12,r8
80001cd0:	58 f9       	cp.w	r9,15
80001cd2:	e0 8a 00 0a 	brle	80001ce6 <_malloc_trim_r+0x6e>
80001cd6:	a1 a9       	sbr	r9,0x0
80001cd8:	91 19       	st.w	r8[0x4],r9
80001cda:	48 f8       	lddpc	r8,80001d14 <_malloc_trim_r+0x9c>
80001cdc:	70 09       	ld.w	r9,r8[0x0]
80001cde:	48 f8       	lddpc	r8,80001d18 <_malloc_trim_r+0xa0>
80001ce0:	f8 09 01 09 	sub	r9,r12,r9
80001ce4:	91 09       	st.w	r8[0x0],r9
80001ce6:	0e 9c       	mov	r12,r7
80001ce8:	f0 1f 00 0d 	mcall	80001d1c <_malloc_trim_r+0xa4>
80001cec:	d8 2a       	popm	r4-r7,pc,r12=0
80001cee:	68 28       	ld.w	r8,r4[0x8]
80001cf0:	0a 16       	sub	r6,r5
80001cf2:	a1 a6       	sbr	r6,0x0
80001cf4:	91 16       	st.w	r8[0x4],r6
80001cf6:	48 98       	lddpc	r8,80001d18 <_malloc_trim_r+0xa0>
80001cf8:	70 09       	ld.w	r9,r8[0x0]
80001cfa:	0a 19       	sub	r9,r5
80001cfc:	0e 9c       	mov	r12,r7
80001cfe:	91 09       	st.w	r8[0x0],r9
80001d00:	f0 1f 00 07 	mcall	80001d1c <_malloc_trim_r+0xa4>
80001d04:	da 2a       	popm	r4-r7,pc,r12=1
80001d06:	00 00       	add	r0,r0
80001d08:	80 00       	ld.sh	r0,r0[0x0]
80001d0a:	1c 00       	add	r0,lr
80001d0c:	00 00       	add	r0,r0
80001d0e:	00 10       	sub	r0,r0
80001d10:	80 00       	ld.sh	r0,r0[0x0]
80001d12:	1c 04       	add	r4,lr
80001d14:	00 00       	add	r0,r0
80001d16:	04 1c       	sub	r12,r2
80001d18:	00 00       	add	r0,r0
80001d1a:	06 24       	rsub	r4,r3
80001d1c:	80 00       	ld.sh	r0,r0[0x0]
80001d1e:	1c 02       	add	r2,lr

80001d20 <_free_r>:
80001d20:	d4 21       	pushm	r4-r7,lr
80001d22:	16 96       	mov	r6,r11
80001d24:	18 97       	mov	r7,r12
80001d26:	58 0b       	cp.w	r11,0
80001d28:	e0 80 00 c8 	breq	80001eb8 <_free_r+0x198>
80001d2c:	f0 1f 00 4c 	mcall	80001e5c <_free_r+0x13c>
80001d30:	20 86       	sub	r6,8
80001d32:	4c ca       	lddpc	r10,80001e60 <_free_r+0x140>
80001d34:	6c 18       	ld.w	r8,r6[0x4]
80001d36:	74 2e       	ld.w	lr,r10[0x8]
80001d38:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001d3c:	a1 c8       	cbr	r8,0x0
80001d3e:	ec 08 00 09 	add	r9,r6,r8
80001d42:	72 1b       	ld.w	r11,r9[0x4]
80001d44:	e0 1b ff fc 	andl	r11,0xfffc
80001d48:	1c 39       	cp.w	r9,lr
80001d4a:	c1 d1       	brne	80001d84 <_free_r+0x64>
80001d4c:	f6 08 00 08 	add	r8,r11,r8
80001d50:	58 0c       	cp.w	r12,0
80001d52:	c0 81       	brne	80001d62 <_free_r+0x42>
80001d54:	6c 09       	ld.w	r9,r6[0x0]
80001d56:	12 16       	sub	r6,r9
80001d58:	12 08       	add	r8,r9
80001d5a:	6c 3b       	ld.w	r11,r6[0xc]
80001d5c:	6c 29       	ld.w	r9,r6[0x8]
80001d5e:	97 29       	st.w	r11[0x8],r9
80001d60:	93 3b       	st.w	r9[0xc],r11
80001d62:	10 99       	mov	r9,r8
80001d64:	95 26       	st.w	r10[0x8],r6
80001d66:	a1 a9       	sbr	r9,0x0
80001d68:	8d 19       	st.w	r6[0x4],r9
80001d6a:	4b f9       	lddpc	r9,80001e64 <_free_r+0x144>
80001d6c:	72 09       	ld.w	r9,r9[0x0]
80001d6e:	12 38       	cp.w	r8,r9
80001d70:	c0 63       	brcs	80001d7c <_free_r+0x5c>
80001d72:	4b e8       	lddpc	r8,80001e68 <_free_r+0x148>
80001d74:	0e 9c       	mov	r12,r7
80001d76:	70 0b       	ld.w	r11,r8[0x0]
80001d78:	f0 1f 00 3d 	mcall	80001e6c <_free_r+0x14c>
80001d7c:	0e 9c       	mov	r12,r7
80001d7e:	f0 1f 00 3d 	mcall	80001e70 <_free_r+0x150>
80001d82:	d8 22       	popm	r4-r7,pc
80001d84:	93 1b       	st.w	r9[0x4],r11
80001d86:	58 0c       	cp.w	r12,0
80001d88:	c0 30       	breq	80001d8e <_free_r+0x6e>
80001d8a:	30 0c       	mov	r12,0
80001d8c:	c1 08       	rjmp	80001dac <_free_r+0x8c>
80001d8e:	6c 0e       	ld.w	lr,r6[0x0]
80001d90:	f4 c5 ff f8 	sub	r5,r10,-8
80001d94:	1c 16       	sub	r6,lr
80001d96:	1c 08       	add	r8,lr
80001d98:	6c 2e       	ld.w	lr,r6[0x8]
80001d9a:	0a 3e       	cp.w	lr,r5
80001d9c:	f9 bc 00 01 	moveq	r12,1
80001da0:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001da4:	eb fe 1a 02 	st.wne	r5[0x8],lr
80001da8:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001dac:	f2 0b 00 0e 	add	lr,r9,r11
80001db0:	7c 1e       	ld.w	lr,lr[0x4]
80001db2:	ed be 00 00 	bld	lr,0x0
80001db6:	c1 30       	breq	80001ddc <_free_r+0xbc>
80001db8:	16 08       	add	r8,r11
80001dba:	58 0c       	cp.w	r12,0
80001dbc:	c0 c1       	brne	80001dd4 <_free_r+0xb4>
80001dbe:	4a 9e       	lddpc	lr,80001e60 <_free_r+0x140>
80001dc0:	72 2b       	ld.w	r11,r9[0x8]
80001dc2:	2f 8e       	sub	lr,-8
80001dc4:	1c 3b       	cp.w	r11,lr
80001dc6:	c0 71       	brne	80001dd4 <_free_r+0xb4>
80001dc8:	97 36       	st.w	r11[0xc],r6
80001dca:	97 26       	st.w	r11[0x8],r6
80001dcc:	8d 2b       	st.w	r6[0x8],r11
80001dce:	8d 3b       	st.w	r6[0xc],r11
80001dd0:	30 1c       	mov	r12,1
80001dd2:	c0 58       	rjmp	80001ddc <_free_r+0xbc>
80001dd4:	72 2b       	ld.w	r11,r9[0x8]
80001dd6:	72 39       	ld.w	r9,r9[0xc]
80001dd8:	93 2b       	st.w	r9[0x8],r11
80001dda:	97 39       	st.w	r11[0xc],r9
80001ddc:	10 99       	mov	r9,r8
80001dde:	ec 08 09 08 	st.w	r6[r8],r8
80001de2:	a1 a9       	sbr	r9,0x0
80001de4:	8d 19       	st.w	r6[0x4],r9
80001de6:	58 0c       	cp.w	r12,0
80001de8:	c6 51       	brne	80001eb2 <_free_r+0x192>
80001dea:	e0 48 01 ff 	cp.w	r8,511
80001dee:	e0 8b 00 13 	brhi	80001e14 <_free_r+0xf4>
80001df2:	a3 98       	lsr	r8,0x3
80001df4:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001df8:	72 2b       	ld.w	r11,r9[0x8]
80001dfa:	8d 39       	st.w	r6[0xc],r9
80001dfc:	8d 2b       	st.w	r6[0x8],r11
80001dfe:	97 36       	st.w	r11[0xc],r6
80001e00:	93 26       	st.w	r9[0x8],r6
80001e02:	a3 48       	asr	r8,0x2
80001e04:	74 19       	ld.w	r9,r10[0x4]
80001e06:	30 1b       	mov	r11,1
80001e08:	f6 08 09 48 	lsl	r8,r11,r8
80001e0c:	f3 e8 10 08 	or	r8,r9,r8
80001e10:	95 18       	st.w	r10[0x4],r8
80001e12:	c5 08       	rjmp	80001eb2 <_free_r+0x192>
80001e14:	f0 0b 16 09 	lsr	r11,r8,0x9
80001e18:	58 4b       	cp.w	r11,4
80001e1a:	e0 8b 00 06 	brhi	80001e26 <_free_r+0x106>
80001e1e:	f0 0b 16 06 	lsr	r11,r8,0x6
80001e22:	2c 8b       	sub	r11,-56
80001e24:	c2 b8       	rjmp	80001e7a <_free_r+0x15a>
80001e26:	59 4b       	cp.w	r11,20
80001e28:	e0 8b 00 04 	brhi	80001e30 <_free_r+0x110>
80001e2c:	2a 5b       	sub	r11,-91
80001e2e:	c2 68       	rjmp	80001e7a <_free_r+0x15a>
80001e30:	e0 4b 00 54 	cp.w	r11,84
80001e34:	e0 8b 00 06 	brhi	80001e40 <_free_r+0x120>
80001e38:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001e3c:	29 2b       	sub	r11,-110
80001e3e:	c1 e8       	rjmp	80001e7a <_free_r+0x15a>
80001e40:	e0 4b 01 54 	cp.w	r11,340
80001e44:	e0 8b 00 06 	brhi	80001e50 <_free_r+0x130>
80001e48:	f0 0b 16 0f 	lsr	r11,r8,0xf
80001e4c:	28 9b       	sub	r11,-119
80001e4e:	c1 68       	rjmp	80001e7a <_free_r+0x15a>
80001e50:	e0 4b 05 54 	cp.w	r11,1364
80001e54:	e0 88 00 10 	brls	80001e74 <_free_r+0x154>
80001e58:	37 eb       	mov	r11,126
80001e5a:	c1 08       	rjmp	80001e7a <_free_r+0x15a>
80001e5c:	80 00       	ld.sh	r0,r0[0x0]
80001e5e:	1c 00       	add	r0,lr
80001e60:	00 00       	add	r0,r0
80001e62:	00 10       	sub	r0,r0
80001e64:	00 00       	add	r0,r0
80001e66:	04 18       	sub	r8,r2
80001e68:	00 00       	add	r0,r0
80001e6a:	06 20       	rsub	r0,r3
80001e6c:	80 00       	ld.sh	r0,r0[0x0]
80001e6e:	1c 78       	tst	r8,lr
80001e70:	80 00       	ld.sh	r0,r0[0x0]
80001e72:	1c 02       	add	r2,lr
80001e74:	f0 0b 16 12 	lsr	r11,r8,0x12
80001e78:	28 4b       	sub	r11,-124
80001e7a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80001e7e:	78 29       	ld.w	r9,r12[0x8]
80001e80:	18 39       	cp.w	r9,r12
80001e82:	c0 e1       	brne	80001e9e <_free_r+0x17e>
80001e84:	74 18       	ld.w	r8,r10[0x4]
80001e86:	a3 4b       	asr	r11,0x2
80001e88:	30 1c       	mov	r12,1
80001e8a:	f8 0b 09 4b 	lsl	r11,r12,r11
80001e8e:	f1 eb 10 0b 	or	r11,r8,r11
80001e92:	12 98       	mov	r8,r9
80001e94:	95 1b       	st.w	r10[0x4],r11
80001e96:	c0 a8       	rjmp	80001eaa <_free_r+0x18a>
80001e98:	72 29       	ld.w	r9,r9[0x8]
80001e9a:	18 39       	cp.w	r9,r12
80001e9c:	c0 60       	breq	80001ea8 <_free_r+0x188>
80001e9e:	72 1a       	ld.w	r10,r9[0x4]
80001ea0:	e0 1a ff fc 	andl	r10,0xfffc
80001ea4:	14 38       	cp.w	r8,r10
80001ea6:	cf 93       	brcs	80001e98 <_free_r+0x178>
80001ea8:	72 38       	ld.w	r8,r9[0xc]
80001eaa:	8d 38       	st.w	r6[0xc],r8
80001eac:	8d 29       	st.w	r6[0x8],r9
80001eae:	93 36       	st.w	r9[0xc],r6
80001eb0:	91 26       	st.w	r8[0x8],r6
80001eb2:	0e 9c       	mov	r12,r7
80001eb4:	f0 1f 00 02 	mcall	80001ebc <_free_r+0x19c>
80001eb8:	d8 22       	popm	r4-r7,pc
80001eba:	00 00       	add	r0,r0
80001ebc:	80 00       	ld.sh	r0,r0[0x0]
80001ebe:	1c 02       	add	r2,lr

Disassembly of section .exception:

80002000 <_evba>:
	...

80002028 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80002028:	c7 a8       	rjmp	8000211c <privilegedCalls>
	...

80002100 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80002100:	1c 9f       	mov	pc,lr

80002102 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80002102:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80002106:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
8000210a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
8000210e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80002112:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80002114:	c0 31       	brne	8000211a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80002116:	4b 9c       	lddpc	r12,800021f8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80002118:	18 9f       	mov	pc,r12

8000211a <_int0_exit>:
_int0_exit:
	rete
8000211a:	d6 03       	rete

8000211c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
8000211c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
8000211e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80002120:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80002122:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80002124:	9b 3c       	st.w	sp[0xc],r12

80002126 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80002126:	4b 6c       	lddpc	r12,800021fc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80002128:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
8000212a:	c0 61       	brne	80002136 <priv_interruptenable>
	ld.w r12,sp[USERSR]
8000212c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
8000212e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80002130:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002132:	d3 02       	popm	r11-r12
	rete
80002134:	d6 03       	rete

80002136 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80002136:	4b 3c       	lddpc	r12,80002200 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80002138:	18 3b       	cp.w	r11,r12
	brne privexception
8000213a:	c0 61       	brne	80002146 <privexception>
	ld.w r12,sp[USERSR]
8000213c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
8000213e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80002140:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002142:	d3 02       	popm	r11-r12
	rete
80002144:	d6 03       	rete

80002146 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80002146:	c0 08       	rjmp	80002146 <privexception>

80002148 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80002148:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
8000214a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
8000214e:	4a ec       	lddpc	r12,80002204 <contextRestoreFromISR+0x4c>
	sub r11,r12
80002150:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80002152:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80002154:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80002158:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
8000215c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80002160:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80002162:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80002164:	1c 9f       	mov	pc,lr

80002166 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80002166:	d3 03       	ssrf	0x10
	mov pc,lr
80002168:	1c 9f       	mov	pc,lr

8000216a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
8000216a:	d5 03       	csrf	0x10
	mov pc,lr
8000216c:	1c 9f       	mov	pc,lr

8000216e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
8000216e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80002172:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80002174:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80002178:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
8000217c:	1c 9f       	mov	pc,lr

8000217e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000217e:	4a 3c       	lddpc	r12,80002208 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80002180:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80002182:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80002184:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80002186:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80002188:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
8000218a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
8000218c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
8000218e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80002190:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80002192:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80002194:	33 40       	mov	r0,52
	add r0,r12
80002196:	18 00       	add	r0,r12
	stmts r0,r0-r11
80002198:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
8000219c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
8000219e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
800021a2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
800021a4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
800021a6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
800021a8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
800021aa:	1a 90       	mov	r0,sp
	st.w --sp,r0
800021ac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800021ae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
800021b2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
800021b4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
800021b6:	1c 9f       	mov	pc,lr

800021b8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800021b8:	49 4c       	lddpc	r12,80002208 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
800021ba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
800021bc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800021be:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800021c0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
800021c4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
800021c6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
800021c8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800021ca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
800021cc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800021ce:	33 40       	mov	r0,52
	add r0,r12
800021d0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800021d2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800021d6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
800021d8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
800021da:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
800021dc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
800021de:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
800021e0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
800021e2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
800021e4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
800021e6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
800021e8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800021ea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
800021ec:	d4 01       	pushm	lr
	call timerStart
800021ee:	f0 1f 00 08 	mcall	8000220c <contextRestoreFromISR+0x54>
	popm lr
800021f2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
800021f4:	1c 9f       	mov	pc,lr
800021f6:	00 00       	add	r0,r0
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	0a 78       	tst	r8,r5
800021fc:	80 00       	ld.sh	r0,r0[0x0]
800021fe:	21 66       	sub	r6,22
80002200:	80 00       	ld.sh	r0,r0[0x0]
80002202:	21 6a       	sub	r10,22
80002204:	80 00       	ld.sh	r0,r0[0x0]
80002206:	20 00       	sub	r0,0
80002208:	00 00       	add	r0,r0
8000220a:	07 0c       	ld.w	r12,r3++
8000220c:	80 00       	ld.sh	r0,r0[0x0]
8000220e:	16 76       	tst	r6,r11
	...
