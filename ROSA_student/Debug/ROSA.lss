
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000240c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80002600  80002600  00002a00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000018c  80002a00  80002a00  00002e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002b8c  80002b8c  00002f8c  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80002b90  00003008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  8000309c  00003514  2**0
                  ALLOC
  9 .bss          00000298  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000d850  000007b0  000007b0  00000000  2**0
                  ALLOC
 11 .comment      000000bc  00000000  00000000  00003514  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000005e8  00000000  00000000  000035d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000a5c  00000000  00000000  00003bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c724  00000000  00000000  00004614  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00002141  00000000  00000000  00010d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004852  00000000  00000000  00012e79  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000c88  00000000  00000000  000176cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001d65  00000000  00000000  00018354  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000196b  00000000  00000000  0001a0b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00534577  00000000  00000000  0001ba24  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 00000528  00000000  00000000  0054ff9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	1b e4       	ld.ub	r4,sp[0x6]

Disassembly of section .text:

80000008 <MaxLockedCeiling>:
 *
 **********************************************************/


static MaxSemHandle_t MaxLockedCeiling(void)
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 3d       	sub	sp,12
	MaxSemHandle_t MaxT;
	MaxT.Ceil=0;
80000010:	30 08       	mov	r8,0
80000012:	ef 68 ff f4 	st.b	r7[-12],r8
	MaxT.Mutex=NULL;
80000016:	30 08       	mov	r8,0
80000018:	ef 48 ff f8 	st.w	r7[-8],r8
	if (LOCKEDSEMAPHORELIST==NULL)
8000001c:	4a 08       	lddpc	r8,8000009c <MaxLockedCeiling+0x94>
8000001e:	70 08       	ld.w	r8,r8[0x0]
80000020:	58 08       	cp.w	r8,0
80000022:	c0 41       	brne	8000002a <MaxLockedCeiling+0x22>
	{
		
		return MaxT;
80000024:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000028:	c3 58       	rjmp	80000092 <MaxLockedCeiling+0x8a>
	}
	else
	{
	MaxT.Ceil=LOCKEDSEMAPHORELIST->ceiling;
8000002a:	49 d8       	lddpc	r8,8000009c <MaxLockedCeiling+0x94>
8000002c:	70 08       	ld.w	r8,r8[0x0]
8000002e:	11 c8       	ld.ub	r8,r8[0x4]
80000030:	ef 68 ff f4 	st.b	r7[-12],r8
	//uint8_t maxCeil=LOCKEDSEMAPHORELIST->ceiling;
	ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
80000034:	49 a8       	lddpc	r8,8000009c <MaxLockedCeiling+0x94>
80000036:	70 08       	ld.w	r8,r8[0x0]
80000038:	ef 48 ff fc 	st.w	r7[-4],r8
	MaxT.Mutex=it;
8000003c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000040:	ef 48 ff f8 	st.w	r7[-8],r8
	if (it->nextLockedSemaphore==NULL)
80000044:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000048:	70 28       	ld.w	r8,r8[0x8]
8000004a:	58 08       	cp.w	r8,0
8000004c:	c1 b1       	brne	80000082 <MaxLockedCeiling+0x7a>
	{
		return MaxT;
8000004e:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000052:	c2 08       	rjmp	80000092 <MaxLockedCeiling+0x8a>
	}
	while (it->nextLockedSemaphore!=NULL)
	{
		if (it->ceiling>=MaxT.Ceil)
80000054:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000058:	11 c9       	ld.ub	r9,r8[0x4]
8000005a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000005e:	f0 09 18 00 	cp.b	r9,r8
80000062:	c0 a3       	brcs	80000076 <MaxLockedCeiling+0x6e>
		{
			MaxT.Ceil=it->ceiling;
80000064:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000068:	11 c8       	ld.ub	r8,r8[0x4]
8000006a:	ef 68 ff f4 	st.b	r7[-12],r8
			MaxT.Mutex=it;
8000006e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000072:	ef 48 ff f8 	st.w	r7[-8],r8
		}
		it=it->nextLockedSemaphore;
80000076:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000007a:	70 28       	ld.w	r8,r8[0x8]
8000007c:	ef 48 ff fc 	st.w	r7[-4],r8
80000080:	c0 28       	rjmp	80000084 <MaxLockedCeiling+0x7c>
	MaxT.Mutex=it;
	if (it->nextLockedSemaphore==NULL)
	{
		return MaxT;
	}
	while (it->nextLockedSemaphore!=NULL)
80000082:	d7 03       	nop
80000084:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000088:	70 28       	ld.w	r8,r8[0x8]
8000008a:	58 08       	cp.w	r8,0
8000008c:	ce 41       	brne	80000054 <MaxLockedCeiling+0x4c>
			MaxT.Mutex=it;
		}
		it=it->nextLockedSemaphore;
	}

	return MaxT;
8000008e:	ee e8 ff f4 	ld.d	r8,r7[-12]
	}
}
80000092:	10 9a       	mov	r10,r8
80000094:	12 9b       	mov	r11,r9
80000096:	2f dd       	sub	sp,-12
80000098:	e3 cd 80 80 	ldm	sp++,r7,pc
8000009c:	00 00       	add	r0,r0
8000009e:	06 60       	and	r0,r3

800000a0 <updatePriority>:

static void updatePriority(ROSA_taskHandle_t * task)
{
800000a0:	eb cd 40 80 	pushm	r7,lr
800000a4:	1a 97       	mov	r7,sp
800000a6:	20 4d       	sub	sp,16
800000a8:	ef 4c ff f0 	st.w	r7[-16],r12
	int maximum=0,counter=0;
800000ac:	30 08       	mov	r8,0
800000ae:	ef 48 ff f4 	st.w	r7[-12],r8
800000b2:	30 08       	mov	r8,0
800000b4:	ef 48 ff f8 	st.w	r7[-8],r8
	ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
800000b8:	4b 18       	lddpc	r8,8000017c <updatePriority+0xdc>
800000ba:	70 08       	ld.w	r8,r8[0x0]
800000bc:	ef 48 ff fc 	st.w	r7[-4],r8
	if (it->nextLockedSemaphore==NULL && it->holder==task && it->ceiling > maximum && it!=NULL)
800000c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000c4:	70 28       	ld.w	r8,r8[0x8]
800000c6:	58 08       	cp.w	r8,0
800000c8:	c3 f1       	brne	80000146 <updatePriority+0xa6>
800000ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000ce:	70 09       	ld.w	r9,r8[0x0]
800000d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800000d4:	10 39       	cp.w	r9,r8
800000d6:	c3 81       	brne	80000146 <updatePriority+0xa6>
800000d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000dc:	11 c8       	ld.ub	r8,r8[0x4]
800000de:	10 99       	mov	r9,r8
800000e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800000e4:	10 39       	cp.w	r9,r8
800000e6:	e0 8a 00 30 	brle	80000146 <updatePriority+0xa6>
800000ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000ee:	58 08       	cp.w	r8,0
800000f0:	c2 b0       	breq	80000146 <updatePriority+0xa6>
	{
		maximum=it->ceiling;
800000f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000f6:	11 c8       	ld.ub	r8,r8[0x4]
800000f8:	ef 48 ff f4 	st.w	r7[-12],r8
		counter++; //are there any semaphores locked by this task?
800000fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000100:	2f f8       	sub	r8,-1
80000102:	ef 48 ff f8 	st.w	r7[-8],r8

static void updatePriority(ROSA_taskHandle_t * task)
{
	int maximum=0,counter=0;
	ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
	if (it->nextLockedSemaphore==NULL && it->holder==task && it->ceiling > maximum && it!=NULL)
80000106:	c2 48       	rjmp	8000014e <updatePriority+0xae>
	}
	else
	{
		while ( it!=NULL)
	{
		if (it->holder==task && it->ceiling > maximum)
80000108:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000010c:	70 09       	ld.w	r9,r8[0x0]
8000010e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000112:	10 39       	cp.w	r9,r8
80000114:	c1 41       	brne	8000013c <updatePriority+0x9c>
80000116:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000011a:	11 c8       	ld.ub	r8,r8[0x4]
8000011c:	10 99       	mov	r9,r8
8000011e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000122:	10 39       	cp.w	r9,r8
80000124:	e0 8a 00 0c 	brle	8000013c <updatePriority+0x9c>
		{
			maximum=it->ceiling;
80000128:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000012c:	11 c8       	ld.ub	r8,r8[0x4]
8000012e:	ef 48 ff f4 	st.w	r7[-12],r8
			counter++; //are there any semaphores locked by this task?
80000132:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000136:	2f f8       	sub	r8,-1
80000138:	ef 48 ff f8 	st.w	r7[-8],r8
		}
		it=it->nextLockedSemaphore;
8000013c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000140:	70 28       	ld.w	r8,r8[0x8]
80000142:	ef 48 ff fc 	st.w	r7[-4],r8
		maximum=it->ceiling;
		counter++; //are there any semaphores locked by this task?
	}
	else
	{
		while ( it!=NULL)
80000146:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000014a:	58 08       	cp.w	r8,0
8000014c:	cd e1       	brne	80000108 <updatePriority+0x68>
		}
		it=it->nextLockedSemaphore;
	}
	}
	
	if (counter!=0)
8000014e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000152:	58 08       	cp.w	r8,0
80000154:	c0 90       	breq	80000166 <updatePriority+0xc6>
	{
		task->priority=maximum;
80000156:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000015a:	5c 58       	castu.b	r8
8000015c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000160:	f3 68 00 64 	st.b	r9[100],r8
80000164:	c0 98       	rjmp	80000176 <updatePriority+0xd6>
	}
	else 
		{
			EXECTASK->priority=EXECTASK->originalPriority; //IPCP priority inheritance
80000166:	48 78       	lddpc	r8,80000180 <updatePriority+0xe0>
80000168:	70 09       	ld.w	r9,r8[0x0]
8000016a:	48 68       	lddpc	r8,80000180 <updatePriority+0xe0>
8000016c:	70 08       	ld.w	r8,r8[0x0]
8000016e:	f1 38 00 71 	ld.ub	r8,r8[113]
80000172:	f3 68 00 64 	st.b	r9[100],r8
		}
	
}
80000176:	2f cd       	sub	sp,-16
80000178:	e3 cd 80 80 	ldm	sp++,r7,pc
8000017c:	00 00       	add	r0,r0
8000017e:	06 60       	and	r0,r3
80000180:	00 00       	add	r0,r0
80000182:	07 24       	ld.uh	r4,r3++

80000184 <ROSA_semaphoreCreate>:
 *
 * Comment:
 * 	Create a semaphore
 *
 **********************************************************/
int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t * mutex, uint8_t ceiling) {
80000184:	eb cd 40 80 	pushm	r7,lr
80000188:	1a 97       	mov	r7,sp
8000018a:	20 2d       	sub	sp,8
8000018c:	ef 4c ff fc 	st.w	r7[-4],r12
80000190:	16 98       	mov	r8,r11
80000192:	ef 68 ff f8 	st.b	r7[-8],r8
	*mutex = (ROSA_semaphoreHandle_t) calloc(1, sizeof(ROSA_semaphoreHandle_t));
80000196:	30 4b       	mov	r11,4
80000198:	30 1c       	mov	r12,1
8000019a:	f0 1f 00 0f 	mcall	800001d4 <ROSA_semaphoreCreate+0x50>
8000019e:	18 98       	mov	r8,r12
800001a0:	10 99       	mov	r9,r8
800001a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001a6:	91 09       	st.w	r8[0x0],r9
	(*mutex)->holder = NULL;
800001a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001ac:	70 08       	ld.w	r8,r8[0x0]
800001ae:	30 09       	mov	r9,0
800001b0:	91 09       	st.w	r8[0x0],r9
	(*mutex)->ceiling = ceiling;
800001b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001b6:	70 09       	ld.w	r9,r8[0x0]
800001b8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800001bc:	b2 c8       	st.b	r9[0x4],r8
	(*mutex)->nextLockedSemaphore=NULL;	
800001be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001c2:	70 08       	ld.w	r8,r8[0x0]
800001c4:	30 09       	mov	r9,0
800001c6:	91 29       	st.w	r8[0x8],r9
	
	return 0;
800001c8:	30 08       	mov	r8,0
}
800001ca:	10 9c       	mov	r12,r8
800001cc:	2f ed       	sub	sp,-8
800001ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800001d2:	00 00       	add	r0,r0
800001d4:	80 00       	ld.sh	r0,r0[0x0]
800001d6:	1c 64       	and	r4,lr

800001d8 <ROSA_semaphoreLock>:
 *
 * Comment:
 * 	Lock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t  mutex) {
800001d8:	eb cd 40 c0 	pushm	r6-r7,lr
800001dc:	1a 97       	mov	r7,sp
800001de:	20 2d       	sub	sp,8
800001e0:	ef 4c ff f8 	st.w	r7[-8],r12
	
	if (mutex==NULL)
800001e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001e8:	58 08       	cp.w	r8,0
800001ea:	c0 61       	brne	800001f6 <ROSA_semaphoreLock+0x1e>
	{
		return -1; // if the passed pointer to the semaphore handle is non-existent
800001ec:	3f f8       	mov	r8,-1
800001ee:	c9 88       	rjmp	8000031e <ROSA_semaphoreLock+0x146>
	}
	
	
	while (mutex->holder != NULL || ((EXECTASK->priority==MaxLockedCeiling().Ceil && MaxLockedCeiling().Mutex->holder!=EXECTASK) || EXECTASK->priority<MaxLockedCeiling().Ceil)) //if the semaphore is already locked or IPCP condition P(task)>maxLockedCeil
		ROSA_yield();		
800001f0:	f0 1f 00 4e 	mcall	80000328 <ROSA_semaphoreLock+0x150>
800001f4:	c0 28       	rjmp	800001f8 <ROSA_semaphoreLock+0x20>
	{
		return -1; // if the passed pointer to the semaphore handle is non-existent
	}
	
	
	while (mutex->holder != NULL || ((EXECTASK->priority==MaxLockedCeiling().Ceil && MaxLockedCeiling().Mutex->holder!=EXECTASK) || EXECTASK->priority<MaxLockedCeiling().Ceil)) //if the semaphore is already locked or IPCP condition P(task)>maxLockedCeil
800001f6:	d7 03       	nop
800001f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001fc:	70 08       	ld.w	r8,r8[0x0]
800001fe:	58 08       	cp.w	r8,0
80000200:	cf 81       	brne	800001f0 <ROSA_semaphoreLock+0x18>
80000202:	4c b8       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
80000204:	70 08       	ld.w	r8,r8[0x0]
80000206:	f1 36 00 64 	ld.ub	r6,r8[100]
8000020a:	f0 1f 00 4a 	mcall	80000330 <ROSA_semaphoreLock+0x158>
8000020e:	14 98       	mov	r8,r10
80000210:	16 99       	mov	r9,r11
80000212:	f1 d9 c3 08 	bfextu	r8,r9,0x18,0x8
80000216:	5c 58       	castu.b	r8
80000218:	f0 06 18 00 	cp.b	r6,r8
8000021c:	c0 a1       	brne	80000230 <ROSA_semaphoreLock+0x58>
8000021e:	f0 1f 00 45 	mcall	80000330 <ROSA_semaphoreLock+0x158>
80000222:	14 98       	mov	r8,r10
80000224:	16 99       	mov	r9,r11
80000226:	70 09       	ld.w	r9,r8[0x0]
80000228:	4c 18       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
8000022a:	70 08       	ld.w	r8,r8[0x0]
8000022c:	10 39       	cp.w	r9,r8
8000022e:	ce 11       	brne	800001f0 <ROSA_semaphoreLock+0x18>
80000230:	4b f8       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
80000232:	70 08       	ld.w	r8,r8[0x0]
80000234:	f1 36 00 64 	ld.ub	r6,r8[100]
80000238:	f0 1f 00 3e 	mcall	80000330 <ROSA_semaphoreLock+0x158>
8000023c:	14 98       	mov	r8,r10
8000023e:	16 99       	mov	r9,r11
80000240:	f1 d9 c3 08 	bfextu	r8,r9,0x18,0x8
80000244:	5c 58       	castu.b	r8
80000246:	f0 06 18 00 	cp.b	r6,r8
8000024a:	cd 33       	brcs	800001f0 <ROSA_semaphoreLock+0x18>
		ROSA_yield();		
	
	mutex->holder = EXECTASK;
8000024c:	4b 88       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
8000024e:	70 09       	ld.w	r9,r8[0x0]
80000250:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000254:	91 09       	st.w	r8[0x0],r9
		
	if (LOCKEDSEMAPHORELIST==NULL)
80000256:	4b 88       	lddpc	r8,80000334 <ROSA_semaphoreLock+0x15c>
80000258:	70 08       	ld.w	r8,r8[0x0]
8000025a:	58 08       	cp.w	r8,0
8000025c:	c0 61       	brne	80000268 <ROSA_semaphoreLock+0x90>
	{
		LOCKEDSEMAPHORELIST=mutex;
8000025e:	4b 68       	lddpc	r8,80000334 <ROSA_semaphoreLock+0x15c>
80000260:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000264:	91 09       	st.w	r8[0x0],r9
80000266:	c1 b8       	rjmp	8000029c <ROSA_semaphoreLock+0xc4>
	}
	else
	{
		ROSA_semaphoreHandle_t it; //finding the last semaphore in the list and changing its nextLockedSemaphore field to point to the just locked semaphore
		it=LOCKEDSEMAPHORELIST;
80000268:	4b 38       	lddpc	r8,80000334 <ROSA_semaphoreLock+0x15c>
8000026a:	70 08       	ld.w	r8,r8[0x0]
8000026c:	ef 48 ff fc 	st.w	r7[-4],r8
		while(it->nextLockedSemaphore!=NULL)
80000270:	c0 68       	rjmp	8000027c <ROSA_semaphoreLock+0xa4>
		{
			it=it->nextLockedSemaphore;
80000272:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000276:	70 28       	ld.w	r8,r8[0x8]
80000278:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
		ROSA_semaphoreHandle_t it; //finding the last semaphore in the list and changing its nextLockedSemaphore field to point to the just locked semaphore
		it=LOCKEDSEMAPHORELIST;
		while(it->nextLockedSemaphore!=NULL)
8000027c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000280:	70 28       	ld.w	r8,r8[0x8]
80000282:	58 08       	cp.w	r8,0
80000284:	cf 71       	brne	80000272 <ROSA_semaphoreLock+0x9a>
		{
			it=it->nextLockedSemaphore;
		}
		if (it!=mutex)
80000286:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000028a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000028e:	10 39       	cp.w	r9,r8
80000290:	c0 60       	breq	8000029c <ROSA_semaphoreLock+0xc4>
		{
			it->nextLockedSemaphore=mutex;
80000292:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000296:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000029a:	91 29       	st.w	r8[0x8],r9
		}
		
	}
	if (EXECTASK->priority < mutex->ceiling)
8000029c:	4a 48       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
8000029e:	70 08       	ld.w	r8,r8[0x0]
800002a0:	f1 39 00 64 	ld.ub	r9,r8[100]
800002a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002a8:	11 c8       	ld.ub	r8,r8[0x4]
800002aa:	f0 09 18 00 	cp.b	r9,r8
800002ae:	c3 72       	brcc	8000031c <ROSA_semaphoreLock+0x144>
	{
		if (EXECTASK!=EXECTASK->nexttcb)
800002b0:	49 f8       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
800002b2:	70 08       	ld.w	r8,r8[0x0]
800002b4:	70 09       	ld.w	r9,r8[0x0]
800002b6:	49 e8       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
800002b8:	70 08       	ld.w	r8,r8[0x0]
800002ba:	10 39       	cp.w	r9,r8
800002bc:	c0 d0       	breq	800002d6 <ROSA_semaphoreLock+0xfe>
		{
			PA[EXECTASK->priority]=EXECTASK->nexttcb; //deattaching the EXECTASK from its current priority queue
800002be:	49 c8       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
800002c0:	70 08       	ld.w	r8,r8[0x0]
800002c2:	f1 38 00 64 	ld.ub	r8,r8[100]
800002c6:	10 99       	mov	r9,r8
800002c8:	49 98       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
800002ca:	70 08       	ld.w	r8,r8[0x0]
800002cc:	70 0a       	ld.w	r10,r8[0x0]
800002ce:	49 b8       	lddpc	r8,80000338 <ROSA_semaphoreLock+0x160>
800002d0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800002d4:	c0 a8       	rjmp	800002e8 <ROSA_semaphoreLock+0x110>
		}
		else
		{
			PA[EXECTASK->priority]=NULL; // if the task that is being removed from the queue is alone in the queue
800002d6:	49 68       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
800002d8:	70 08       	ld.w	r8,r8[0x0]
800002da:	f1 38 00 64 	ld.ub	r8,r8[100]
800002de:	10 99       	mov	r9,r8
800002e0:	49 68       	lddpc	r8,80000338 <ROSA_semaphoreLock+0x160>
800002e2:	30 0a       	mov	r10,0
800002e4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		}
		
		updatePriority(EXECTASK); //IPCP priority inheritance
800002e8:	49 18       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
800002ea:	70 08       	ld.w	r8,r8[0x0]
800002ec:	10 9c       	mov	r12,r8
800002ee:	f0 1f 00 14 	mcall	8000033c <ROSA_semaphoreLock+0x164>
		PA[EXECTASK->priority]=EXECTASK;
800002f2:	48 f8       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
800002f4:	70 08       	ld.w	r8,r8[0x0]
800002f6:	f1 38 00 64 	ld.ub	r8,r8[100]
800002fa:	10 99       	mov	r9,r8
800002fc:	48 c8       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
800002fe:	70 0a       	ld.w	r10,r8[0x0]
80000300:	48 e8       	lddpc	r8,80000338 <ROSA_semaphoreLock+0x160>
80000302:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		EXECTASK->nexttcb=PA[EXECTASK->priority];
80000306:	48 a8       	lddpc	r8,8000032c <ROSA_semaphoreLock+0x154>
80000308:	70 08       	ld.w	r8,r8[0x0]
8000030a:	48 99       	lddpc	r9,8000032c <ROSA_semaphoreLock+0x154>
8000030c:	72 09       	ld.w	r9,r9[0x0]
8000030e:	f3 39 00 64 	ld.ub	r9,r9[100]
80000312:	12 9a       	mov	r10,r9
80000314:	48 99       	lddpc	r9,80000338 <ROSA_semaphoreLock+0x160>
80000316:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000031a:	91 09       	st.w	r8[0x0],r9
		
		//readyQueueInsert(EXECTASK);
	}
	
	return 0;
8000031c:	30 08       	mov	r8,0
}
8000031e:	10 9c       	mov	r12,r8
80000320:	2f ed       	sub	sp,-8
80000322:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80000326:	00 00       	add	r0,r0
80000328:	80 00       	ld.sh	r0,r0[0x0]
8000032a:	0e 9e       	mov	lr,r7
8000032c:	00 00       	add	r0,r0
8000032e:	07 24       	ld.uh	r4,r3++
80000330:	80 00       	ld.sh	r0,r0[0x0]
80000332:	00 08       	add	r8,r0
80000334:	00 00       	add	r0,r0
80000336:	06 60       	and	r0,r3
80000338:	00 00       	add	r0,r0
8000033a:	06 78       	tst	r8,r3
8000033c:	80 00       	ld.sh	r0,r0[0x0]
8000033e:	00 a0       	st.w	r0++,r0

80000340 <ROSA_semaphoreUnlock>:
 *
 * Comment:
 * 	Unlock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreUnlock(ROSA_semaphoreHandle_t  mutex) {
80000340:	eb cd 40 80 	pushm	r7,lr
80000344:	1a 97       	mov	r7,sp
80000346:	20 4d       	sub	sp,16
80000348:	ef 4c ff f0 	st.w	r7[-16],r12
	mutex->holder = NULL;
8000034c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000350:	30 09       	mov	r9,0
80000352:	91 09       	st.w	r8[0x0],r9
	if (mutex==LOCKEDSEMAPHORELIST)
80000354:	4d 88       	lddpc	r8,800004b4 <ROSA_semaphoreUnlock+0x174>
80000356:	70 08       	ld.w	r8,r8[0x0]
80000358:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000035c:	10 39       	cp.w	r9,r8
8000035e:	c0 71       	brne	8000036c <ROSA_semaphoreUnlock+0x2c>
	{
		LOCKEDSEMAPHORELIST=mutex->nextLockedSemaphore; //if first locked semaphore needs to be unlocked
80000360:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000364:	70 29       	ld.w	r9,r8[0x8]
80000366:	4d 48       	lddpc	r8,800004b4 <ROSA_semaphoreUnlock+0x174>
80000368:	91 09       	st.w	r8[0x0],r9
8000036a:	c1 88       	rjmp	8000039a <ROSA_semaphoreUnlock+0x5a>
	}
	else
	{
		ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
8000036c:	4d 28       	lddpc	r8,800004b4 <ROSA_semaphoreUnlock+0x174>
8000036e:	70 08       	ld.w	r8,r8[0x0]
80000370:	ef 48 ff f4 	st.w	r7[-12],r8
		//it=LOCKEDSEMAPHORELIST;
		while (it->nextLockedSemaphore!=mutex) //find the locked semaphore before the one that needs to be unlocked
80000374:	c0 68       	rjmp	80000380 <ROSA_semaphoreUnlock+0x40>
		{
			it=it->nextLockedSemaphore;
80000376:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000037a:	70 28       	ld.w	r8,r8[0x8]
8000037c:	ef 48 ff f4 	st.w	r7[-12],r8
	}
	else
	{
		ROSA_semaphoreHandle_t it=LOCKEDSEMAPHORELIST;
		//it=LOCKEDSEMAPHORELIST;
		while (it->nextLockedSemaphore!=mutex) //find the locked semaphore before the one that needs to be unlocked
80000380:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000384:	70 29       	ld.w	r9,r8[0x8]
80000386:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000038a:	10 39       	cp.w	r9,r8
8000038c:	cf 51       	brne	80000376 <ROSA_semaphoreUnlock+0x36>
		{
			it=it->nextLockedSemaphore;
		}
		it->nextLockedSemaphore=mutex->nextLockedSemaphore;
8000038e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000392:	70 29       	ld.w	r9,r8[0x8]
80000394:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000398:	91 29       	st.w	r8[0x8],r9
	}
	//readyQueueExtract(EXECTASK);
	if(EXECTASK->priority!=EXECTASK->originalPriority)
8000039a:	4c 88       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
8000039c:	70 08       	ld.w	r8,r8[0x0]
8000039e:	f1 39 00 64 	ld.ub	r9,r8[100]
800003a2:	4c 68       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
800003a4:	70 08       	ld.w	r8,r8[0x0]
800003a6:	f1 38 00 71 	ld.ub	r8,r8[113]
800003aa:	f0 09 18 00 	cp.b	r9,r8
800003ae:	c7 d0       	breq	800004a8 <ROSA_semaphoreUnlock+0x168>
	{
		if (EXECTASK!=EXECTASK->nexttcb)
800003b0:	4c 28       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
800003b2:	70 08       	ld.w	r8,r8[0x0]
800003b4:	70 09       	ld.w	r9,r8[0x0]
800003b6:	4c 18       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
800003b8:	70 08       	ld.w	r8,r8[0x0]
800003ba:	10 39       	cp.w	r9,r8
800003bc:	c0 e0       	breq	800003d8 <ROSA_semaphoreUnlock+0x98>
		{
			PA[EXECTASK->priority]->nexttcb=EXECTASK->nexttcb; //deattaching the EXECTASK from its current priority queue
800003be:	4b f8       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
800003c0:	70 08       	ld.w	r8,r8[0x0]
800003c2:	f1 38 00 64 	ld.ub	r8,r8[100]
800003c6:	10 99       	mov	r9,r8
800003c8:	4b d8       	lddpc	r8,800004bc <ROSA_semaphoreUnlock+0x17c>
800003ca:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800003ce:	4b b9       	lddpc	r9,800004b8 <ROSA_semaphoreUnlock+0x178>
800003d0:	72 09       	ld.w	r9,r9[0x0]
800003d2:	72 09       	ld.w	r9,r9[0x0]
800003d4:	91 09       	st.w	r8[0x0],r9
800003d6:	c0 a8       	rjmp	800003ea <ROSA_semaphoreUnlock+0xaa>
		}
		else
		{
			PA[EXECTASK->priority]=NULL; // if the task that is being removed from the queue is alone in the queue
800003d8:	4b 88       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
800003da:	70 08       	ld.w	r8,r8[0x0]
800003dc:	f1 38 00 64 	ld.ub	r8,r8[100]
800003e0:	10 99       	mov	r9,r8
800003e2:	4b 78       	lddpc	r8,800004bc <ROSA_semaphoreUnlock+0x17c>
800003e4:	30 0a       	mov	r10,0
800003e6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		}
		int old_prio=EXECTASK->priority;
800003ea:	4b 48       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
800003ec:	70 08       	ld.w	r8,r8[0x0]
800003ee:	f1 38 00 64 	ld.ub	r8,r8[100]
800003f2:	ef 48 ff f8 	st.w	r7[-8],r8
		updatePriority(EXECTASK);
800003f6:	4b 18       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
800003f8:	70 08       	ld.w	r8,r8[0x0]
800003fa:	10 9c       	mov	r12,r8
800003fc:	f0 1f 00 31 	mcall	800004c0 <ROSA_semaphoreUnlock+0x180>
		if (old_prio>EXECTASK->priority && PA[EXECTASK->priority]!=NULL)
80000400:	4a e8       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
80000402:	70 08       	ld.w	r8,r8[0x0]
80000404:	f1 38 00 64 	ld.ub	r8,r8[100]
80000408:	10 99       	mov	r9,r8
8000040a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000040e:	10 39       	cp.w	r9,r8
80000410:	c2 d4       	brge	8000046a <ROSA_semaphoreUnlock+0x12a>
80000412:	4a a8       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
80000414:	70 08       	ld.w	r8,r8[0x0]
80000416:	f1 38 00 64 	ld.ub	r8,r8[100]
8000041a:	10 99       	mov	r9,r8
8000041c:	4a 88       	lddpc	r8,800004bc <ROSA_semaphoreUnlock+0x17c>
8000041e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000422:	58 08       	cp.w	r8,0
80000424:	c2 30       	breq	8000046a <ROSA_semaphoreUnlock+0x12a>
		{
			ROSA_taskHandle_t *temp = PA[EXECTASK->priority]; //inserting a task into proper lower prio queue
80000426:	4a 58       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
80000428:	70 08       	ld.w	r8,r8[0x0]
8000042a:	f1 38 00 64 	ld.ub	r8,r8[100]
8000042e:	10 99       	mov	r9,r8
80000430:	4a 38       	lddpc	r8,800004bc <ROSA_semaphoreUnlock+0x17c>
80000432:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000436:	ef 48 ff fc 	st.w	r7[-4],r8
			PA[EXECTASK->priority]=EXECTASK;
8000043a:	4a 08       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
8000043c:	70 08       	ld.w	r8,r8[0x0]
8000043e:	f1 38 00 64 	ld.ub	r8,r8[100]
80000442:	10 99       	mov	r9,r8
80000444:	49 d8       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
80000446:	70 0a       	ld.w	r10,r8[0x0]
80000448:	49 d8       	lddpc	r8,800004bc <ROSA_semaphoreUnlock+0x17c>
8000044a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			EXECTASK->nexttcb=temp->nexttcb;
8000044e:	49 b8       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
80000450:	70 08       	ld.w	r8,r8[0x0]
80000452:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000456:	72 09       	ld.w	r9,r9[0x0]
80000458:	91 09       	st.w	r8[0x0],r9
			PREEMPTASK = readyQueueSearch();
8000045a:	f0 1f 00 1b 	mcall	800004c4 <ROSA_semaphoreUnlock+0x184>
8000045e:	18 99       	mov	r9,r12
80000460:	49 a8       	lddpc	r8,800004c8 <ROSA_semaphoreUnlock+0x188>
80000462:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
80000464:	f0 1f 00 1a 	mcall	800004cc <ROSA_semaphoreUnlock+0x18c>
		{
			PA[EXECTASK->priority]=NULL; // if the task that is being removed from the queue is alone in the queue
		}
		int old_prio=EXECTASK->priority;
		updatePriority(EXECTASK);
		if (old_prio>EXECTASK->priority && PA[EXECTASK->priority]!=NULL)
80000468:	c2 08       	rjmp	800004a8 <ROSA_semaphoreUnlock+0x168>
			PA[EXECTASK->priority]=EXECTASK;
			EXECTASK->nexttcb=temp->nexttcb;
			PREEMPTASK = readyQueueSearch();
			ROSA_yield();
		}
		else if(old_prio>EXECTASK->priority)
8000046a:	49 48       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
8000046c:	70 08       	ld.w	r8,r8[0x0]
8000046e:	f1 38 00 64 	ld.ub	r8,r8[100]
80000472:	10 99       	mov	r9,r8
80000474:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000478:	10 39       	cp.w	r9,r8
8000047a:	c1 74       	brge	800004a8 <ROSA_semaphoreUnlock+0x168>
		{
			PA[EXECTASK->priority]=EXECTASK;
8000047c:	48 f8       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
8000047e:	70 08       	ld.w	r8,r8[0x0]
80000480:	f1 38 00 64 	ld.ub	r8,r8[100]
80000484:	10 99       	mov	r9,r8
80000486:	48 d8       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
80000488:	70 0a       	ld.w	r10,r8[0x0]
8000048a:	48 d8       	lddpc	r8,800004bc <ROSA_semaphoreUnlock+0x17c>
8000048c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			EXECTASK->nexttcb=EXECTASK;
80000490:	48 a8       	lddpc	r8,800004b8 <ROSA_semaphoreUnlock+0x178>
80000492:	70 08       	ld.w	r8,r8[0x0]
80000494:	48 99       	lddpc	r9,800004b8 <ROSA_semaphoreUnlock+0x178>
80000496:	72 09       	ld.w	r9,r9[0x0]
80000498:	91 09       	st.w	r8[0x0],r9
			PREEMPTASK = readyQueueSearch();
8000049a:	f0 1f 00 0b 	mcall	800004c4 <ROSA_semaphoreUnlock+0x184>
8000049e:	18 99       	mov	r9,r12
800004a0:	48 a8       	lddpc	r8,800004c8 <ROSA_semaphoreUnlock+0x188>
800004a2:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
800004a4:	f0 1f 00 0a 	mcall	800004cc <ROSA_semaphoreUnlock+0x18c>
	}
	
	
	//readyQueueInsert(EXECTASK);
	
	return 0;
800004a8:	30 08       	mov	r8,0
}
800004aa:	10 9c       	mov	r12,r8
800004ac:	2f cd       	sub	sp,-16
800004ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800004b2:	00 00       	add	r0,r0
800004b4:	00 00       	add	r0,r0
800004b6:	06 60       	and	r0,r3
800004b8:	00 00       	add	r0,r0
800004ba:	07 24       	ld.uh	r4,r3++
800004bc:	00 00       	add	r0,r0
800004be:	06 78       	tst	r8,r3
800004c0:	80 00       	ld.sh	r0,r0[0x0]
800004c2:	00 a0       	st.w	r0++,r0
800004c4:	80 00       	ld.sh	r0,r0[0x0]
800004c6:	08 18       	sub	r8,r4
800004c8:	00 00       	add	r0,r0
800004ca:	06 ac       	st.w	r3++,r12
800004cc:	80 00       	ld.sh	r0,r0[0x0]
800004ce:	0e 9e       	mov	lr,r7

800004d0 <usart_options>:
800004d0:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 31     ............tsk1
800004e0:	00 00 00 00 6c 65 64 33 00 00 00 00 6c 65 64 35     ....led3....led5
800004f0:	00 00 00 00 6c 65 64 37 00 00 00 00                 ....led7....

800004fc <task1>:
ROSA_semaphoreHandle_t S2;
ROSA_semaphoreHandle_t S3;


void task1(void)
{
800004fc:	eb cd 40 80 	pushm	r7,lr
80000500:	1a 97       	mov	r7,sp
80000502:	c0 28       	rjmp	80000506 <task1+0xa>
		if(0 == ROSA_semaphoreUnlock(S3))
		{
			ledOff(LED0_GPIO);
			delay_ms(1000);
		}
	}
80000504:	d7 03       	nop

void task1(void)
{
	while(1)
	{
		if(0 == ROSA_semaphoreLock(S3))
80000506:	4a e8       	lddpc	r8,800005bc <task1+0xc0>
80000508:	70 08       	ld.w	r8,r8[0x0]
8000050a:	10 9c       	mov	r12,r8
8000050c:	f0 1f 00 2d 	mcall	800005c0 <task1+0xc4>
80000510:	18 98       	mov	r8,r12
80000512:	58 08       	cp.w	r8,0
80000514:	c0 81       	brne	80000524 <task1+0x28>
		{
			ledOn(LED0_GPIO);
80000516:	33 bc       	mov	r12,59
80000518:	f0 1f 00 2b 	mcall	800005c4 <task1+0xc8>
			delay_ms(1000);
8000051c:	e0 6c 03 e8 	mov	r12,1000
80000520:	f0 1f 00 2a 	mcall	800005c8 <task1+0xcc>
		}
		
		if(0 == ROSA_semaphoreLock(S2))
80000524:	4a a8       	lddpc	r8,800005cc <task1+0xd0>
80000526:	70 08       	ld.w	r8,r8[0x0]
80000528:	10 9c       	mov	r12,r8
8000052a:	f0 1f 00 26 	mcall	800005c0 <task1+0xc4>
8000052e:	18 98       	mov	r8,r12
80000530:	58 08       	cp.w	r8,0
80000532:	c0 81       	brne	80000542 <task1+0x46>
		{
			ledOn(LED1_GPIO);
80000534:	33 cc       	mov	r12,60
80000536:	f0 1f 00 24 	mcall	800005c4 <task1+0xc8>
			delay_ms(1000);
8000053a:	e0 6c 03 e8 	mov	r12,1000
8000053e:	f0 1f 00 23 	mcall	800005c8 <task1+0xcc>
		}
		
		if(0 == ROSA_semaphoreLock(S1))
80000542:	4a 48       	lddpc	r8,800005d0 <task1+0xd4>
80000544:	70 08       	ld.w	r8,r8[0x0]
80000546:	10 9c       	mov	r12,r8
80000548:	f0 1f 00 1e 	mcall	800005c0 <task1+0xc4>
8000054c:	18 98       	mov	r8,r12
8000054e:	58 08       	cp.w	r8,0
80000550:	c0 81       	brne	80000560 <task1+0x64>
		{
			ledOn(LED2_GPIO);
80000552:	33 dc       	mov	r12,61
80000554:	f0 1f 00 1c 	mcall	800005c4 <task1+0xc8>
			delay_ms(1000);
80000558:	e0 6c 03 e8 	mov	r12,1000
8000055c:	f0 1f 00 1b 	mcall	800005c8 <task1+0xcc>
		}
		
		if(0 == ROSA_semaphoreUnlock(S1))
80000560:	49 c8       	lddpc	r8,800005d0 <task1+0xd4>
80000562:	70 08       	ld.w	r8,r8[0x0]
80000564:	10 9c       	mov	r12,r8
80000566:	f0 1f 00 1c 	mcall	800005d4 <task1+0xd8>
8000056a:	18 98       	mov	r8,r12
8000056c:	58 08       	cp.w	r8,0
8000056e:	c0 81       	brne	8000057e <task1+0x82>
		{
			ledOff(LED2_GPIO);
80000570:	33 dc       	mov	r12,61
80000572:	f0 1f 00 1a 	mcall	800005d8 <task1+0xdc>
			delay_ms(1000);
80000576:	e0 6c 03 e8 	mov	r12,1000
8000057a:	f0 1f 00 14 	mcall	800005c8 <task1+0xcc>
		}
		
		if(0 == ROSA_semaphoreUnlock(S2))
8000057e:	49 48       	lddpc	r8,800005cc <task1+0xd0>
80000580:	70 08       	ld.w	r8,r8[0x0]
80000582:	10 9c       	mov	r12,r8
80000584:	f0 1f 00 14 	mcall	800005d4 <task1+0xd8>
80000588:	18 98       	mov	r8,r12
8000058a:	58 08       	cp.w	r8,0
8000058c:	c0 81       	brne	8000059c <task1+0xa0>
		{
			ledOff(LED1_GPIO);
8000058e:	33 cc       	mov	r12,60
80000590:	f0 1f 00 12 	mcall	800005d8 <task1+0xdc>
			delay_ms(1000);
80000594:	e0 6c 03 e8 	mov	r12,1000
80000598:	f0 1f 00 0c 	mcall	800005c8 <task1+0xcc>
		}
		
		if(0 == ROSA_semaphoreUnlock(S3))
8000059c:	48 88       	lddpc	r8,800005bc <task1+0xc0>
8000059e:	70 08       	ld.w	r8,r8[0x0]
800005a0:	10 9c       	mov	r12,r8
800005a2:	f0 1f 00 0d 	mcall	800005d4 <task1+0xd8>
800005a6:	18 98       	mov	r8,r12
800005a8:	58 08       	cp.w	r8,0
800005aa:	ca d1       	brne	80000504 <task1+0x8>
		{
			ledOff(LED0_GPIO);
800005ac:	33 bc       	mov	r12,59
800005ae:	f0 1f 00 0b 	mcall	800005d8 <task1+0xdc>
			delay_ms(1000);
800005b2:	e0 6c 03 e8 	mov	r12,1000
800005b6:	f0 1f 00 05 	mcall	800005c8 <task1+0xcc>
		}
	}
800005ba:	ca 6b       	rjmp	80000506 <task1+0xa>
800005bc:	00 00       	add	r0,r0
800005be:	06 64       	and	r4,r3
800005c0:	80 00       	ld.sh	r0,r0[0x0]
800005c2:	01 d8       	ld.ub	r8,r0[0x5]
800005c4:	80 00       	ld.sh	r0,r0[0x0]
800005c6:	13 24       	ld.uh	r4,r9++
800005c8:	80 00       	ld.sh	r0,r0[0x0]
800005ca:	10 cc       	st.b	r8++,r12
800005cc:	00 00       	add	r0,r0
800005ce:	06 6c       	and	r12,r3
800005d0:	00 00       	add	r0,r0
800005d2:	06 68       	and	r8,r3
800005d4:	80 00       	ld.sh	r0,r0[0x0]
800005d6:	03 40       	ld.w	r0,--r1
800005d8:	80 00       	ld.sh	r0,r0[0x0]
800005da:	13 44       	ld.w	r4,--r9

800005dc <led3_task>:
}


void led3_task(void)
{
800005dc:	eb cd 40 80 	pushm	r7,lr
800005e0:	1a 97       	mov	r7,sp
	while(1)
	{
		ledToggle(LED3_GPIO);
800005e2:	33 ec       	mov	r12,62
800005e4:	f0 1f 00 04 	mcall	800005f4 <led3_task+0x18>
		ROSA_delay(100);
800005e8:	36 4a       	mov	r10,100
800005ea:	30 0b       	mov	r11,0
800005ec:	f0 1f 00 03 	mcall	800005f8 <led3_task+0x1c>
	}
800005f0:	cf 9b       	rjmp	800005e2 <led3_task+0x6>
800005f2:	00 00       	add	r0,r0
800005f4:	80 00       	ld.sh	r0,r0[0x0]
800005f6:	13 64       	ld.uh	r4,--r9
800005f8:	80 00       	ld.sh	r0,r0[0x0]
800005fa:	0c 90       	mov	r0,r6

800005fc <led5_task>:
}

void led5_task(void)
{
800005fc:	eb cd 40 80 	pushm	r7,lr
80000600:	1a 97       	mov	r7,sp
	while(1)
	{
		ledToggle(LED5_GPIO);
80000602:	33 4c       	mov	r12,52
80000604:	f0 1f 00 04 	mcall	80000614 <led5_task+0x18>
		ROSA_delay(100);
80000608:	36 4a       	mov	r10,100
8000060a:	30 0b       	mov	r11,0
8000060c:	f0 1f 00 03 	mcall	80000618 <led5_task+0x1c>
	}
80000610:	cf 9b       	rjmp	80000602 <led5_task+0x6>
80000612:	00 00       	add	r0,r0
80000614:	80 00       	ld.sh	r0,r0[0x0]
80000616:	13 64       	ld.uh	r4,--r9
80000618:	80 00       	ld.sh	r0,r0[0x0]
8000061a:	0c 90       	mov	r0,r6

8000061c <led7_task>:
}

void led7_task(void)
{
8000061c:	eb cd 40 80 	pushm	r7,lr
80000620:	1a 97       	mov	r7,sp
	while(1)
	{
		ledToggle(LED7_GPIO);
80000622:	33 6c       	mov	r12,54
80000624:	f0 1f 00 04 	mcall	80000634 <led7_task+0x18>
		ROSA_delay(100);
80000628:	36 4a       	mov	r10,100
8000062a:	30 0b       	mov	r11,0
8000062c:	f0 1f 00 03 	mcall	80000638 <led7_task+0x1c>
	}
80000630:	cf 9b       	rjmp	80000622 <led7_task+0x6>
80000632:	00 00       	add	r0,r0
80000634:	80 00       	ld.sh	r0,r0[0x0]
80000636:	13 64       	ld.uh	r4,--r9
80000638:	80 00       	ld.sh	r0,r0[0x0]
8000063a:	0c 90       	mov	r0,r6

8000063c <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
8000063c:	eb cd 40 80 	pushm	r7,lr
80000640:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
80000642:	f0 1f 00 18 	mcall	800006a0 <main+0x64>
	
	ROSA_semaphoreCreate(&S1,7);
80000646:	30 7b       	mov	r11,7
80000648:	49 7c       	lddpc	r12,800006a4 <main+0x68>
8000064a:	f0 1f 00 18 	mcall	800006a8 <main+0x6c>
	ROSA_semaphoreCreate(&S2,5);
8000064e:	30 5b       	mov	r11,5
80000650:	49 7c       	lddpc	r12,800006ac <main+0x70>
80000652:	f0 1f 00 16 	mcall	800006a8 <main+0x6c>
	ROSA_semaphoreCreate(&S3,3);
80000656:	30 3b       	mov	r11,3
80000658:	49 6c       	lddpc	r12,800006b0 <main+0x74>
8000065a:	f0 1f 00 14 	mcall	800006a8 <main+0x6c>
	
	ROSA_taskCreate(& task1_handle, "tsk1", task1, 0x40, 1);
8000065e:	30 18       	mov	r8,1
80000660:	34 09       	mov	r9,64
80000662:	49 5a       	lddpc	r10,800006b4 <main+0x78>
80000664:	49 5b       	lddpc	r11,800006b8 <main+0x7c>
80000666:	49 6c       	lddpc	r12,800006bc <main+0x80>
80000668:	f0 1f 00 16 	mcall	800006c0 <main+0x84>
	ROSA_taskCreate(& led3_task_handle, "led3", led3_task, 0x40, 6);
8000066c:	30 68       	mov	r8,6
8000066e:	34 09       	mov	r9,64
80000670:	49 5a       	lddpc	r10,800006c4 <main+0x88>
80000672:	49 6b       	lddpc	r11,800006c8 <main+0x8c>
80000674:	49 6c       	lddpc	r12,800006cc <main+0x90>
80000676:	f0 1f 00 13 	mcall	800006c0 <main+0x84>
	ROSA_taskCreate(& led5_task_handle, "led5", led5_task, 0x40, 4);
8000067a:	30 48       	mov	r8,4
8000067c:	34 09       	mov	r9,64
8000067e:	49 5a       	lddpc	r10,800006d0 <main+0x94>
80000680:	49 5b       	lddpc	r11,800006d4 <main+0x98>
80000682:	49 6c       	lddpc	r12,800006d8 <main+0x9c>
80000684:	f0 1f 00 0f 	mcall	800006c0 <main+0x84>
	ROSA_taskCreate(& led7_task_handle, "led7", led7_task, 0x40, 2);
80000688:	30 28       	mov	r8,2
8000068a:	34 09       	mov	r9,64
8000068c:	49 4a       	lddpc	r10,800006dc <main+0xa0>
8000068e:	49 5b       	lddpc	r11,800006e0 <main+0xa4>
80000690:	49 5c       	lddpc	r12,800006e4 <main+0xa8>
80000692:	f0 1f 00 0c 	mcall	800006c0 <main+0x84>
	
	//Start the timer
	timerStart();
80000696:	f0 1f 00 15 	mcall	800006e8 <main+0xac>
	
	ROSA_start();
8000069a:	f0 1f 00 15 	mcall	800006ec <main+0xb0>
	/* Execution will never return here */
	while(1);
8000069e:	c0 08       	rjmp	8000069e <main+0x62>
800006a0:	80 00       	ld.sh	r0,r0[0x0]
800006a2:	09 ac       	ld.ub	r12,r4[0x2]
800006a4:	00 00       	add	r0,r0
800006a6:	06 68       	and	r8,r3
800006a8:	80 00       	ld.sh	r0,r0[0x0]
800006aa:	01 84       	ld.ub	r4,r0[0x0]
800006ac:	00 00       	add	r0,r0
800006ae:	06 6c       	and	r12,r3
800006b0:	00 00       	add	r0,r0
800006b2:	06 64       	and	r4,r3
800006b4:	80 00       	ld.sh	r0,r0[0x0]
800006b6:	04 fc       	st.b	--r2,r12
800006b8:	80 00       	ld.sh	r0,r0[0x0]
800006ba:	04 dc       	st.w	--r2,r12
800006bc:	00 00       	add	r0,r0
800006be:	05 18       	ld.sh	r8,r2++
800006c0:	80 00       	ld.sh	r0,r0[0x0]
800006c2:	0b 58       	ld.sh	r8,--r5
800006c4:	80 00       	ld.sh	r0,r0[0x0]
800006c6:	05 dc       	ld.ub	r12,r2[0x5]
800006c8:	80 00       	ld.sh	r0,r0[0x0]
800006ca:	04 e4       	st.h	--r2,r4
800006cc:	00 00       	add	r0,r0
800006ce:	05 1c       	ld.sh	r12,r2++
800006d0:	80 00       	ld.sh	r0,r0[0x0]
800006d2:	05 fc       	ld.ub	r12,r2[0x7]
800006d4:	80 00       	ld.sh	r0,r0[0x0]
800006d6:	04 ec       	st.h	--r2,r12
800006d8:	00 00       	add	r0,r0
800006da:	05 20       	ld.uh	r0,r2++
800006dc:	80 00       	ld.sh	r0,r0[0x0]
800006de:	06 1c       	sub	r12,r3
800006e0:	80 00       	ld.sh	r0,r0[0x0]
800006e2:	04 f4       	st.b	--r2,r4
800006e4:	00 00       	add	r0,r0
800006e6:	05 24       	ld.uh	r4,r2++
800006e8:	80 00       	ld.sh	r0,r0[0x0]
800006ea:	1b 5a       	ld.sh	r10,--sp
800006ec:	80 00       	ld.sh	r0,r0[0x0]
800006ee:	0d dc       	ld.ub	r12,r6[0x5]

800006f0 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
800006f0:	eb cd 40 80 	pushm	r7,lr
800006f4:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
800006f6:	f0 1f 00 05 	mcall	80000708 <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
800006fa:	f0 1f 00 05 	mcall	8000070c <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it
800006fe:	f0 1f 00 05 	mcall	80000710 <ROSA_yieldFromISR+0x20>
}
80000702:	e3 cd 80 80 	ldm	sp++,r7,pc
80000706:	00 00       	add	r0,r0
80000708:	80 00       	ld.sh	r0,r0[0x0]
8000070a:	27 7e       	sub	lr,119
8000070c:	80 00       	ld.sh	r0,r0[0x0]
8000070e:	0e bc       	st.h	r7++,r12
80000710:	80 00       	ld.sh	r0,r0[0x0]
80000712:	27 b8       	sub	r8,123

80000714 <usart_options>:
80000714:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
80000724:	00 00 00 00 64 6c 61 79 00 00 00 00 55 53 41 52     ....dlay....USAR
80000734:	54 20 69 6e 69 74 69 61 6c 69 7a 65 64 0d 0a 00     T initialized...

80000744 <idle>:

/** @fn void idle(void)
	@brief Idle task body.
*/
void idle(void)
{
80000744:	eb cd 40 80 	pushm	r7,lr
80000748:	1a 97       	mov	r7,sp
	while(1);
8000074a:	c0 08       	rjmp	8000074a <idle+0x6>

8000074c <ROSA_tcbInstall>:
 * Comment:
 * 	Install the TCB into the TCBLIST.
 *
 **********************************************************/
void ROSA_tcbInstall(tcb * tcbTask)
{
8000074c:	eb cd 40 80 	pushm	r7,lr
80000750:	1a 97       	mov	r7,sp
80000752:	20 1d       	sub	sp,4
80000754:	ef 4c ff fc 	st.w	r7[-4],r12
	/* Is this the first tcb installed? */
	if(TCBLIST == NULL)
80000758:	49 38       	lddpc	r8,800007a4 <ROSA_tcbInstall+0x58>
8000075a:	70 08       	ld.w	r8,r8[0x0]
8000075c:	58 08       	cp.w	r8,0
8000075e:	c1 01       	brne	8000077e <ROSA_tcbInstall+0x32>
	{
		TCBLIST = tcbTask;
80000760:	49 18       	lddpc	r8,800007a4 <ROSA_tcbInstall+0x58>
80000762:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000766:	91 09       	st.w	r8[0x0],r9
		TCBLIST->nexttcb = tcbTask;			//Install the first tcb
80000768:	48 f8       	lddpc	r8,800007a4 <ROSA_tcbInstall+0x58>
8000076a:	70 08       	ld.w	r8,r8[0x0]
8000076c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000770:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
80000772:	48 d8       	lddpc	r8,800007a4 <ROSA_tcbInstall+0x58>
80000774:	70 09       	ld.w	r9,r8[0x0]
80000776:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000077a:	91 09       	st.w	r8[0x0],r9
8000077c:	c1 08       	rjmp	8000079c <ROSA_tcbInstall+0x50>
	}
	else
	{
		tcbTask->nexttcb = TCBLIST->nexttcb;
8000077e:	48 a8       	lddpc	r8,800007a4 <ROSA_tcbInstall+0x58>
80000780:	70 08       	ld.w	r8,r8[0x0]
80000782:	70 09       	ld.w	r9,r8[0x0]
80000784:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000788:	91 09       	st.w	r8[0x0],r9
		TCBLIST->nexttcb = tcbTask;
8000078a:	48 78       	lddpc	r8,800007a4 <ROSA_tcbInstall+0x58>
8000078c:	70 08       	ld.w	r8,r8[0x0]
8000078e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000792:	91 09       	st.w	r8[0x0],r9
		TCBLIST = tcbTask;
80000794:	48 48       	lddpc	r8,800007a4 <ROSA_tcbInstall+0x58>
80000796:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000079a:	91 09       	st.w	r8[0x0],r9
	}
}
8000079c:	2f fd       	sub	sp,-4
8000079e:	e3 cd 80 80 	ldm	sp++,r7,pc
800007a2:	00 00       	add	r0,r0
800007a4:	00 00       	add	r0,r0
800007a6:	06 74       	tst	r4,r3

800007a8 <ROSA_tcbUninstall>:

void ROSA_tcbUninstall(tcb * tcbTask)
{
800007a8:	eb cd 40 80 	pushm	r7,lr
800007ac:	1a 97       	mov	r7,sp
800007ae:	20 1d       	sub	sp,4
800007b0:	ef 4c ff fc 	st.w	r7[-4],r12
	while (TCBLIST->nexttcb != tcbTask)
800007b4:	c0 68       	rjmp	800007c0 <ROSA_tcbUninstall+0x18>
	{
		TCBLIST = TCBLIST->nexttcb;
800007b6:	49 88       	lddpc	r8,80000814 <ROSA_tcbUninstall+0x6c>
800007b8:	70 08       	ld.w	r8,r8[0x0]
800007ba:	70 09       	ld.w	r9,r8[0x0]
800007bc:	49 68       	lddpc	r8,80000814 <ROSA_tcbUninstall+0x6c>
800007be:	91 09       	st.w	r8[0x0],r9
	}
}

void ROSA_tcbUninstall(tcb * tcbTask)
{
	while (TCBLIST->nexttcb != tcbTask)
800007c0:	49 58       	lddpc	r8,80000814 <ROSA_tcbUninstall+0x6c>
800007c2:	70 08       	ld.w	r8,r8[0x0]
800007c4:	70 09       	ld.w	r9,r8[0x0]
800007c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007ca:	10 39       	cp.w	r9,r8
800007cc:	cf 51       	brne	800007b6 <ROSA_tcbUninstall+0xe>
	{
		TCBLIST = TCBLIST->nexttcb;
	}
	
	TCBLIST->nexttcb = tcbTask->nexttcb;
800007ce:	49 28       	lddpc	r8,80000814 <ROSA_tcbUninstall+0x6c>
800007d0:	70 08       	ld.w	r8,r8[0x0]
800007d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800007d6:	72 09       	ld.w	r9,r9[0x0]
800007d8:	91 09       	st.w	r8[0x0],r9
	tcbTask->nexttcb = NULL;
800007da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007de:	30 09       	mov	r9,0
800007e0:	91 09       	st.w	r8[0x0],r9
	
	if (tcbTask->delay)	
800007e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007e6:	f0 e8 00 68 	ld.d	r8,r8[104]
800007ea:	58 08       	cp.w	r8,0
800007ec:	5c 29       	cpc	r9
800007ee:	c0 70       	breq	800007fc <ROSA_tcbUninstall+0x54>
	{
		TCBLIST = TCBLIST->nexttcb;
800007f0:	48 98       	lddpc	r8,80000814 <ROSA_tcbUninstall+0x6c>
800007f2:	70 08       	ld.w	r8,r8[0x0]
800007f4:	70 09       	ld.w	r9,r8[0x0]
800007f6:	48 88       	lddpc	r8,80000814 <ROSA_tcbUninstall+0x6c>
800007f8:	91 09       	st.w	r8[0x0],r9
800007fa:	c0 a8       	rjmp	8000080e <ROSA_tcbUninstall+0x66>
	}
	else if (TCBLIST == tcbTask)
800007fc:	48 68       	lddpc	r8,80000814 <ROSA_tcbUninstall+0x6c>
800007fe:	70 09       	ld.w	r9,r8[0x0]
80000800:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000804:	10 39       	cp.w	r9,r8
80000806:	c0 41       	brne	8000080e <ROSA_tcbUninstall+0x66>
	{
		TCBLIST = NULL;	
80000808:	48 38       	lddpc	r8,80000814 <ROSA_tcbUninstall+0x6c>
8000080a:	30 09       	mov	r9,0
8000080c:	91 09       	st.w	r8[0x0],r9
	}
}
8000080e:	2f fd       	sub	sp,-4
80000810:	e3 cd 80 80 	ldm	sp++,r7,pc
80000814:	00 00       	add	r0,r0
80000816:	06 74       	tst	r4,r3

80000818 <readyQueueSearch>:
/** @fn int readyQueueSearch(void)
	@brief Search for the first non-empty highest priority queue.
	@return Pointer to the last tcb in the queue (in other words - PA[i]).
*/
tcb * readyQueueSearch(void)
{
80000818:	eb cd 40 80 	pushm	r7,lr
8000081c:	1a 97       	mov	r7,sp
8000081e:	20 1d       	sub	sp,4
	int i = MAXNPRIO;
80000820:	30 c8       	mov	r8,12
80000822:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Search for the first non-empty queue. */
	while ( (PA[--i] == NULL) && (i > 0));
80000826:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000082a:	20 18       	sub	r8,1
8000082c:	ef 48 ff fc 	st.w	r7[-4],r8
80000830:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000834:	49 18       	lddpc	r8,80000878 <readyQueueSearch+0x60>
80000836:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000083a:	58 08       	cp.w	r8,0
8000083c:	c0 61       	brne	80000848 <readyQueueSearch+0x30>
8000083e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000842:	58 08       	cp.w	r8,0
80000844:	fe 99 ff f1 	brgt	80000826 <readyQueueSearch+0xe>
	
	return ((i == 0) && (PA[i] == NULL)) ? IDLETASK : PA[i];
80000848:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000084c:	58 08       	cp.w	r8,0
8000084e:	c0 81       	brne	8000085e <readyQueueSearch+0x46>
80000850:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000854:	48 98       	lddpc	r8,80000878 <readyQueueSearch+0x60>
80000856:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000085a:	58 08       	cp.w	r8,0
8000085c:	c0 70       	breq	8000086a <readyQueueSearch+0x52>
8000085e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000862:	48 68       	lddpc	r8,80000878 <readyQueueSearch+0x60>
80000864:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000868:	c0 38       	rjmp	8000086e <readyQueueSearch+0x56>
8000086a:	48 58       	lddpc	r8,8000087c <readyQueueSearch+0x64>
8000086c:	70 08       	ld.w	r8,r8[0x0]
}
8000086e:	10 9c       	mov	r12,r8
80000870:	2f fd       	sub	sp,-4
80000872:	e3 cd 80 80 	ldm	sp++,r7,pc
80000876:	00 00       	add	r0,r0
80000878:	00 00       	add	r0,r0
8000087a:	06 78       	tst	r8,r3
8000087c:	00 00       	add	r0,r0
8000087e:	06 70       	tst	r0,r3

80000880 <dlay>:

void dlay()
{
80000880:	eb cd 40 80 	pushm	r7,lr
80000884:	1a 97       	mov	r7,sp
80000886:	20 1d       	sub	sp,4
	tcb * tmp;
	
	while (1)
	{	
		interruptDisable();
80000888:	f0 1f 00 26 	mcall	80000920 <dlay+0xa0>
			
		while ((DQ) && (DQ->delay <= systemTick))
8000088c:	c3 08       	rjmp	800008ec <dlay+0x6c>
		{	
			tmp = DQ;
8000088e:	4a 68       	lddpc	r8,80000924 <dlay+0xa4>
80000890:	70 08       	ld.w	r8,r8[0x0]
80000892:	ef 48 ff fc 	st.w	r7[-4],r8

			ROSA_TM_ACTION(DQ, DQ, Uninstall);
80000896:	4a 48       	lddpc	r8,80000924 <dlay+0xa4>
80000898:	70 09       	ld.w	r9,r8[0x0]
8000089a:	4a 48       	lddpc	r8,80000928 <dlay+0xa8>
8000089c:	91 09       	st.w	r8[0x0],r9
8000089e:	4a 28       	lddpc	r8,80000924 <dlay+0xa4>
800008a0:	70 08       	ld.w	r8,r8[0x0]
800008a2:	10 9c       	mov	r12,r8
800008a4:	f0 1f 00 22 	mcall	8000092c <dlay+0xac>
800008a8:	4a 08       	lddpc	r8,80000928 <dlay+0xa8>
800008aa:	70 09       	ld.w	r9,r8[0x0]
800008ac:	49 e8       	lddpc	r8,80000924 <dlay+0xa4>
800008ae:	91 09       	st.w	r8[0x0],r9
		
			tmp->delay = 0;
800008b0:	ee fa ff fc 	ld.w	r10,r7[-4]
800008b4:	30 08       	mov	r8,0
800008b6:	30 09       	mov	r9,0
800008b8:	f4 e9 00 68 	st.d	r10[104],r8
			ROSA_TM_ACTION(PA[tmp->priority], tmp, Install);
800008bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008c0:	f1 38 00 64 	ld.ub	r8,r8[100]
800008c4:	10 99       	mov	r9,r8
800008c6:	49 b8       	lddpc	r8,80000930 <dlay+0xb0>
800008c8:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800008cc:	49 78       	lddpc	r8,80000928 <dlay+0xa8>
800008ce:	91 09       	st.w	r8[0x0],r9
800008d0:	ee fc ff fc 	ld.w	r12,r7[-4]
800008d4:	f0 1f 00 18 	mcall	80000934 <dlay+0xb4>
800008d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008dc:	f1 38 00 64 	ld.ub	r8,r8[100]
800008e0:	10 99       	mov	r9,r8
800008e2:	49 28       	lddpc	r8,80000928 <dlay+0xa8>
800008e4:	70 0a       	ld.w	r10,r8[0x0]
800008e6:	49 38       	lddpc	r8,80000930 <dlay+0xb0>
800008e8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	
	while (1)
	{	
		interruptDisable();
			
		while ((DQ) && (DQ->delay <= systemTick))
800008ec:	48 e8       	lddpc	r8,80000924 <dlay+0xa4>
800008ee:	70 08       	ld.w	r8,r8[0x0]
800008f0:	58 08       	cp.w	r8,0
800008f2:	c0 d0       	breq	8000090c <dlay+0x8c>
800008f4:	48 c8       	lddpc	r8,80000924 <dlay+0xa4>
800008f6:	70 08       	ld.w	r8,r8[0x0]
800008f8:	f0 ea 00 68 	ld.d	r10,r8[104]
800008fc:	48 f8       	lddpc	r8,80000938 <dlay+0xb8>
800008fe:	f0 e8 00 00 	ld.d	r8,r8[0]
80000902:	10 3a       	cp.w	r10,r8
80000904:	f2 0b 13 00 	cpc	r11,r9
80000908:	fe 98 ff c3 	brls	8000088e <dlay+0xe>
		
			tmp->delay = 0;
			ROSA_TM_ACTION(PA[tmp->priority], tmp, Install);
		}

		PREEMPTASK = readyQueueSearch();
8000090c:	f0 1f 00 0c 	mcall	8000093c <dlay+0xbc>
80000910:	18 99       	mov	r9,r12
80000912:	48 c8       	lddpc	r8,80000940 <dlay+0xc0>
80000914:	91 09       	st.w	r8[0x0],r9
		
		interruptEnable();
80000916:	f0 1f 00 0c 	mcall	80000944 <dlay+0xc4>
		
		ROSA_yield();
8000091a:	f0 1f 00 0c 	mcall	80000948 <dlay+0xc8>
	}
8000091e:	cb 5b       	rjmp	80000888 <dlay+0x8>
80000920:	80 00       	ld.sh	r0,r0[0x0]
80000922:	27 66       	sub	r6,118
80000924:	00 00       	add	r0,r0
80000926:	07 28       	ld.uh	r8,r3++
80000928:	00 00       	add	r0,r0
8000092a:	06 74       	tst	r4,r3
8000092c:	80 00       	ld.sh	r0,r0[0x0]
8000092e:	07 a8       	ld.ub	r8,r3[0x2]
80000930:	00 00       	add	r0,r0
80000932:	06 78       	tst	r8,r3
80000934:	80 00       	ld.sh	r0,r0[0x0]
80000936:	07 4c       	ld.w	r12,--r3
80000938:	00 00       	add	r0,r0
8000093a:	07 a0       	ld.ub	r0,r3[0x2]
8000093c:	80 00       	ld.sh	r0,r0[0x0]
8000093e:	08 18       	sub	r8,r4
80000940:	00 00       	add	r0,r0
80000942:	06 ac       	st.w	r3++,r12
80000944:	80 00       	ld.sh	r0,r0[0x0]
80000946:	27 6a       	sub	r10,118
80000948:	80 00       	ld.sh	r0,r0[0x0]
8000094a:	0e 9e       	mov	lr,r7

8000094c <sysTasksCreate>:

/** @fn void idleCreate(void)
	@brief Creation of the idle task.
*/
void sysTasksCreate(void)
{
8000094c:	eb cd 40 80 	pushm	r7,lr
80000950:	1a 97       	mov	r7,sp
	ROSA_tcbCreate(&IDLETASK_TCB, "idle", idle, idle_stack, SYS_TASK_STACK_SIZE);
80000952:	32 08       	mov	r8,32
80000954:	48 b9       	lddpc	r9,80000980 <sysTasksCreate+0x34>
80000956:	48 ca       	lddpc	r10,80000984 <sysTasksCreate+0x38>
80000958:	48 cb       	lddpc	r11,80000988 <sysTasksCreate+0x3c>
8000095a:	48 dc       	lddpc	r12,8000098c <sysTasksCreate+0x40>
8000095c:	f0 1f 00 0d 	mcall	80000990 <sysTasksCreate+0x44>
	IDLETASK = &IDLETASK_TCB;
80000960:	48 d8       	lddpc	r8,80000994 <sysTasksCreate+0x48>
80000962:	48 b9       	lddpc	r9,8000098c <sysTasksCreate+0x40>
80000964:	91 09       	st.w	r8[0x0],r9
	
	ROSA_tcbCreate(&DELHANDL_TCB, "dlay", dlay, dlay_stack, SYS_TASK_STACK_SIZE);
80000966:	32 08       	mov	r8,32
80000968:	48 c9       	lddpc	r9,80000998 <sysTasksCreate+0x4c>
8000096a:	48 da       	lddpc	r10,8000099c <sysTasksCreate+0x50>
8000096c:	48 db       	lddpc	r11,800009a0 <sysTasksCreate+0x54>
8000096e:	48 ec       	lddpc	r12,800009a4 <sysTasksCreate+0x58>
80000970:	f0 1f 00 08 	mcall	80000990 <sysTasksCreate+0x44>
	DELHANDL = &DELHANDL_TCB;
80000974:	48 d8       	lddpc	r8,800009a8 <sysTasksCreate+0x5c>
80000976:	48 c9       	lddpc	r9,800009a4 <sysTasksCreate+0x58>
80000978:	91 09       	st.w	r8[0x0],r9
}
8000097a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000097e:	00 00       	add	r0,r0
80000980:	00 00       	add	r0,r0
80000982:	05 28       	ld.uh	r8,r2++
80000984:	80 00       	ld.sh	r0,r0[0x0]
80000986:	07 44       	ld.w	r4,--r3
80000988:	80 00       	ld.sh	r0,r0[0x0]
8000098a:	07 20       	ld.uh	r0,r3++
8000098c:	00 00       	add	r0,r0
8000098e:	07 2c       	ld.uh	r12,r3++
80000990:	80 00       	ld.sh	r0,r0[0x0]
80000992:	0a a4       	st.w	r5++,r4
80000994:	00 00       	add	r0,r0
80000996:	06 70       	tst	r0,r3
80000998:	00 00       	add	r0,r0
8000099a:	05 a8       	ld.ub	r8,r2[0x2]
8000099c:	80 00       	ld.sh	r0,r0[0x0]
8000099e:	08 80       	andn	r0,r4
800009a0:	80 00       	ld.sh	r0,r0[0x0]
800009a2:	07 28       	ld.uh	r8,r3++
800009a4:	00 00       	add	r0,r0
800009a6:	06 b0       	st.h	r3++,r0
800009a8:	00 00       	add	r0,r0
800009aa:	06 a8       	st.w	r3++,r8

800009ac <ROSA_init>:

void ROSA_init(void)
{
800009ac:	eb cd 40 80 	pushm	r7,lr
800009b0:	1a 97       	mov	r7,sp
800009b2:	20 1d       	sub	sp,4
	int i = 0;
800009b4:	30 08       	mov	r8,0
800009b6:	ef 48 ff fc 	st.w	r7[-4],r8
	systemTick = 0;
800009ba:	4a 7a       	lddpc	r10,80000a54 <ROSA_init+0xa8>
800009bc:	30 08       	mov	r8,0
800009be:	30 09       	mov	r9,0
800009c0:	f4 e9 00 00 	st.d	r10[0],r8
	
	//Do initialization of I/O drivers
	ledInit();									//LEDs
800009c4:	f0 1f 00 25 	mcall	80000a58 <ROSA_init+0xac>
	buttonInit();								//Buttons
800009c8:	f0 1f 00 25 	mcall	80000a5c <ROSA_init+0xb0>
	joystickInit();								//Joystick
800009cc:	f0 1f 00 25 	mcall	80000a60 <ROSA_init+0xb4>
	potInit();									//Potentiometer
800009d0:	f0 1f 00 25 	mcall	80000a64 <ROSA_init+0xb8>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
800009d4:	e0 6a 1b 00 	mov	r10,6912
800009d8:	ea 1a 00 b7 	orh	r10,0xb7
800009dc:	4a 3b       	lddpc	r11,80000a68 <ROSA_init+0xbc>
800009de:	fe 7c 14 00 	mov	r12,-60416
800009e2:	f0 1f 00 23 	mcall	80000a6c <ROSA_init+0xc0>
	usartWriteLine(USART, "USART initialized\r\n");
800009e6:	4a 3b       	lddpc	r11,80000a70 <ROSA_init+0xc4>
800009e8:	fe 7c 14 00 	mov	r12,-60416
800009ec:	f0 1f 00 22 	mcall	80000a74 <ROSA_init+0xc8>

	interruptInit();
800009f0:	f0 1f 00 22 	mcall	80000a78 <ROSA_init+0xcc>
	interruptEnable();
800009f4:	f0 1f 00 22 	mcall	80000a7c <ROSA_init+0xd0>
	timerInit(1);
800009f8:	30 1c       	mov	r12,1
800009fa:	f0 1f 00 22 	mcall	80000a80 <ROSA_init+0xd4>
	timerStart();
800009fe:	f0 1f 00 22 	mcall	80000a84 <ROSA_init+0xd8>
	
	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
80000a02:	4a 28       	lddpc	r8,80000a88 <ROSA_init+0xdc>
80000a04:	30 09       	mov	r9,0
80000a06:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
80000a08:	4a 18       	lddpc	r8,80000a8c <ROSA_init+0xe0>
80000a0a:	30 09       	mov	r9,0
80000a0c:	91 09       	st.w	r8[0x0],r9
	PREEMPTASK = NULL;
80000a0e:	4a 18       	lddpc	r8,80000a90 <ROSA_init+0xe4>
80000a10:	30 09       	mov	r9,0
80000a12:	91 09       	st.w	r8[0x0],r9
	DQ = NULL;
80000a14:	4a 08       	lddpc	r8,80000a94 <ROSA_init+0xe8>
80000a16:	30 09       	mov	r9,0
80000a18:	91 09       	st.w	r8[0x0],r9
	LOCKEDSEMAPHORELIST=NULL;
80000a1a:	4a 08       	lddpc	r8,80000a98 <ROSA_init+0xec>
80000a1c:	30 09       	mov	r9,0
80000a1e:	91 09       	st.w	r8[0x0],r9
	
	/* Create system's tasks (idle, delay). */
	sysTasksCreate();
80000a20:	f0 1f 00 1f 	mcall	80000a9c <ROSA_init+0xf0>
	
	for (i = 0; i < MAXNPRIO; PA[i++] = NULL);
80000a24:	30 08       	mov	r8,0
80000a26:	ef 48 ff fc 	st.w	r7[-4],r8
80000a2a:	c0 c8       	rjmp	80000a42 <ROSA_init+0x96>
80000a2c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000a30:	49 c8       	lddpc	r8,80000aa0 <ROSA_init+0xf4>
80000a32:	30 0a       	mov	r10,0
80000a34:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80000a38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a3c:	2f f8       	sub	r8,-1
80000a3e:	ef 48 ff fc 	st.w	r7[-4],r8
80000a42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a46:	58 b8       	cp.w	r8,11
80000a48:	fe 9a ff f2 	brle	80000a2c <ROSA_init+0x80>
	
}
80000a4c:	2f fd       	sub	sp,-4
80000a4e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a52:	00 00       	add	r0,r0
80000a54:	00 00       	add	r0,r0
80000a56:	07 a0       	ld.ub	r0,r3[0x2]
80000a58:	80 00       	ld.sh	r0,r0[0x0]
80000a5a:	12 98       	mov	r8,r9
80000a5c:	80 00       	ld.sh	r0,r0[0x0]
80000a5e:	10 6c       	and	r12,r8
80000a60:	80 00       	ld.sh	r0,r0[0x0]
80000a62:	10 94       	mov	r4,r8
80000a64:	80 00       	ld.sh	r0,r0[0x0]
80000a66:	13 84       	ld.ub	r4,r9[0x0]
80000a68:	80 00       	ld.sh	r0,r0[0x0]
80000a6a:	07 14       	ld.sh	r4,r3++
80000a6c:	80 00       	ld.sh	r0,r0[0x0]
80000a6e:	15 38       	ld.ub	r8,r10++
80000a70:	80 00       	ld.sh	r0,r0[0x0]
80000a72:	07 30       	ld.ub	r0,r3++
80000a74:	80 00       	ld.sh	r0,r0[0x0]
80000a76:	16 b4       	st.h	r11++,r4
80000a78:	80 00       	ld.sh	r0,r0[0x0]
80000a7a:	27 48       	sub	r8,116
80000a7c:	80 00       	ld.sh	r0,r0[0x0]
80000a7e:	27 6a       	sub	r10,118
80000a80:	80 00       	ld.sh	r0,r0[0x0]
80000a82:	1b 2c       	ld.uh	r12,sp++
80000a84:	80 00       	ld.sh	r0,r0[0x0]
80000a86:	1b 5a       	ld.sh	r10,--sp
80000a88:	00 00       	add	r0,r0
80000a8a:	06 74       	tst	r4,r3
80000a8c:	00 00       	add	r0,r0
80000a8e:	07 24       	ld.uh	r4,r3++
80000a90:	00 00       	add	r0,r0
80000a92:	06 ac       	st.w	r3++,r12
80000a94:	00 00       	add	r0,r0
80000a96:	07 28       	ld.uh	r8,r3++
80000a98:	00 00       	add	r0,r0
80000a9a:	06 60       	and	r0,r3
80000a9c:	80 00       	ld.sh	r0,r0[0x0]
80000a9e:	09 4c       	ld.w	r12,--r4
80000aa0:	00 00       	add	r0,r0
80000aa2:	06 78       	tst	r8,r3

80000aa4 <ROSA_tcbCreate>:

void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
80000aa4:	eb cd 40 80 	pushm	r7,lr
80000aa8:	1a 97       	mov	r7,sp
80000aaa:	20 6d       	sub	sp,24
80000aac:	ef 4c ff f8 	st.w	r7[-8],r12
80000ab0:	ef 4b ff f4 	st.w	r7[-12],r11
80000ab4:	ef 4a ff f0 	st.w	r7[-16],r10
80000ab8:	ef 49 ff ec 	st.w	r7[-20],r9
80000abc:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++)
80000ac0:	30 08       	mov	r8,0
80000ac2:	ef 48 ff fc 	st.w	r7[-4],r8
80000ac6:	c1 48       	rjmp	80000aee <ROSA_tcbCreate+0x4a>
	{
		tcbTask->id[i] = tcbName[i];
80000ac8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000acc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ad0:	ee fa ff f4 	ld.w	r10,r7[-12]
80000ad4:	f4 08 00 08 	add	r8,r10,r8
80000ad8:	11 88       	ld.ub	r8,r8[0x0]
80000ada:	ee fa ff f8 	ld.w	r10,r7[-8]
80000ade:	f4 09 00 09 	add	r9,r10,r9
80000ae2:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++)
80000ae4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ae8:	2f f8       	sub	r8,-1
80000aea:	ef 48 ff fc 	st.w	r7[-4],r8
80000aee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000af2:	58 38       	cp.w	r8,3
80000af4:	fe 9a ff ea 	brle	80000ac8 <ROSA_tcbCreate+0x24>
	{
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
80000af8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000afc:	30 09       	mov	r9,0
80000afe:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
80000b00:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000b04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b08:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
80000b0a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000b0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b12:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
80000b14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b18:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000b1c:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
80000b1e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000b22:	a3 68       	lsl	r8,0x2
80000b24:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000b28:	10 09       	add	r9,r8
80000b2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b2e:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
80000b30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b34:	70 39       	ld.w	r9,r8[0xc]
80000b36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b3a:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
80000b3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b40:	fc 19 00 1c 	movh	r9,0x1c
80000b44:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
80000b46:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b4a:	f0 1f 00 03 	mcall	80000b54 <ROSA_tcbCreate+0xb0>
}
80000b4e:	2f ad       	sub	sp,-24
80000b50:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b54:	80 00       	ld.sh	r0,r0[0x0]
80000b56:	0e 12       	sub	r2,r7

80000b58 <ROSA_taskCreate>:

int16_t ROSA_taskCreate(ROSA_taskHandle_t ** pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t prio)
{
80000b58:	eb cd 40 80 	pushm	r7,lr
80000b5c:	1a 97       	mov	r7,sp
80000b5e:	20 6d       	sub	sp,24
80000b60:	ef 4c ff f8 	st.w	r7[-8],r12
80000b64:	ef 4b ff f4 	st.w	r7[-12],r11
80000b68:	ef 4a ff f0 	st.w	r7[-16],r10
80000b6c:	ef 49 ff ec 	st.w	r7[-20],r9
80000b70:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) malloc(stackSize * sizeof(uint32_t)); 
80000b74:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000b78:	a3 68       	lsl	r8,0x2
80000b7a:	10 9c       	mov	r12,r8
80000b7c:	f0 1f 00 3d 	mcall	80000c70 <ROSA_taskCreate+0x118>
80000b80:	18 98       	mov	r8,r12
80000b82:	ef 48 ff fc 	st.w	r7[-4],r8
	MEM_CHECK(tcbStack);
80000b86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b8a:	58 08       	cp.w	r8,0
80000b8c:	c0 31       	brne	80000b92 <ROSA_taskCreate+0x3a>
80000b8e:	3f f8       	mov	r8,-1
80000b90:	c6 c8       	rjmp	80000c68 <ROSA_taskCreate+0x110>
	
	*pth = (ROSA_taskHandle_t *) malloc(sizeof(ROSA_taskHandle_t));
80000b92:	37 4c       	mov	r12,116
80000b94:	f0 1f 00 37 	mcall	80000c70 <ROSA_taskCreate+0x118>
80000b98:	18 98       	mov	r8,r12
80000b9a:	10 99       	mov	r9,r8
80000b9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ba0:	91 09       	st.w	r8[0x0],r9
	MEM_CHECK(*pth);
80000ba2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ba6:	70 08       	ld.w	r8,r8[0x0]
80000ba8:	58 08       	cp.w	r8,0
80000baa:	c0 31       	brne	80000bb0 <ROSA_taskCreate+0x58>
80000bac:	3f f8       	mov	r8,-1
80000bae:	c5 d8       	rjmp	80000c68 <ROSA_taskCreate+0x110>
	
	(*pth)->priority = prio;
80000bb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bb4:	70 09       	ld.w	r9,r8[0x0]
80000bb6:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80000bba:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
80000bbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bc2:	70 0a       	ld.w	r10,r8[0x0]
80000bc4:	30 08       	mov	r8,0
80000bc6:	30 09       	mov	r9,0
80000bc8:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
80000bcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bd0:	70 09       	ld.w	r9,r8[0x0]
80000bd2:	30 08       	mov	r8,0
80000bd4:	f3 68 00 70 	st.b	r9[112],r8
	(*pth)->originalPriority = prio;
80000bd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bdc:	70 09       	ld.w	r9,r8[0x0]
80000bde:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80000be2:	f3 68 00 71 	st.b	r9[113],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
80000be6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000bea:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bee:	72 0c       	ld.w	r12,r9[0x0]
80000bf0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000bf4:	ee fa ff f0 	ld.w	r10,r7[-16]
80000bf8:	ee fb ff f4 	ld.w	r11,r7[-12]
80000bfc:	f0 1f 00 1e 	mcall	80000c74 <ROSA_taskCreate+0x11c>
	ROSA_TM_ACTION(PA[(*pth)->priority], *pth, Install);
80000c00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c04:	70 08       	ld.w	r8,r8[0x0]
80000c06:	f1 38 00 64 	ld.ub	r8,r8[100]
80000c0a:	10 99       	mov	r9,r8
80000c0c:	49 b8       	lddpc	r8,80000c78 <ROSA_taskCreate+0x120>
80000c0e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000c12:	49 b8       	lddpc	r8,80000c7c <ROSA_taskCreate+0x124>
80000c14:	91 09       	st.w	r8[0x0],r9
80000c16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c1a:	70 08       	ld.w	r8,r8[0x0]
80000c1c:	10 9c       	mov	r12,r8
80000c1e:	f0 1f 00 19 	mcall	80000c80 <ROSA_taskCreate+0x128>
80000c22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c26:	70 08       	ld.w	r8,r8[0x0]
80000c28:	f1 38 00 64 	ld.ub	r8,r8[100]
80000c2c:	10 99       	mov	r9,r8
80000c2e:	49 48       	lddpc	r8,80000c7c <ROSA_taskCreate+0x124>
80000c30:	70 0a       	ld.w	r10,r8[0x0]
80000c32:	49 28       	lddpc	r8,80000c78 <ROSA_taskCreate+0x120>
80000c34:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
	if ((EXECTASK) && (EXECTASK->priority < prio))
80000c38:	49 38       	lddpc	r8,80000c84 <ROSA_taskCreate+0x12c>
80000c3a:	70 08       	ld.w	r8,r8[0x0]
80000c3c:	58 08       	cp.w	r8,0
80000c3e:	c1 40       	breq	80000c66 <ROSA_taskCreate+0x10e>
80000c40:	49 18       	lddpc	r8,80000c84 <ROSA_taskCreate+0x12c>
80000c42:	70 08       	ld.w	r8,r8[0x0]
80000c44:	f1 38 00 64 	ld.ub	r8,r8[100]
80000c48:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000c4c:	f0 09 18 00 	cp.b	r9,r8
80000c50:	e0 88 00 0b 	brls	80000c66 <ROSA_taskCreate+0x10e>
	{
		PREEMPTASK = PA[prio];
80000c54:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000c58:	48 88       	lddpc	r8,80000c78 <ROSA_taskCreate+0x120>
80000c5a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000c5e:	48 b8       	lddpc	r8,80000c88 <ROSA_taskCreate+0x130>
80000c60:	91 09       	st.w	r8[0x0],r9
		ROSA_yield();
80000c62:	f0 1f 00 0b 	mcall	80000c8c <ROSA_taskCreate+0x134>
	}	
	
	return 0;
80000c66:	30 08       	mov	r8,0
}
80000c68:	10 9c       	mov	r12,r8
80000c6a:	2f ad       	sub	sp,-24
80000c6c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c70:	80 00       	ld.sh	r0,r0[0x0]
80000c72:	1c dc       	st.w	--lr,r12
80000c74:	80 00       	ld.sh	r0,r0[0x0]
80000c76:	0a a4       	st.w	r5++,r4
80000c78:	00 00       	add	r0,r0
80000c7a:	06 78       	tst	r8,r3
80000c7c:	00 00       	add	r0,r0
80000c7e:	06 74       	tst	r4,r3
80000c80:	80 00       	ld.sh	r0,r0[0x0]
80000c82:	07 4c       	ld.w	r12,--r3
80000c84:	00 00       	add	r0,r0
80000c86:	07 24       	ld.uh	r4,r3++
80000c88:	00 00       	add	r0,r0
80000c8a:	06 ac       	st.w	r3++,r12
80000c8c:	80 00       	ld.sh	r0,r0[0x0]
80000c8e:	0e 9e       	mov	lr,r7

80000c90 <ROSA_delay>:
/* ROSA_delay()															*/
/*																		*/
/* Suspends the calling task for the given number of ticks				*/
/************************************************************************/
int16_t ROSA_delay(uint64_t ticks)
{
80000c90:	eb cd 40 80 	pushm	r7,lr
80000c94:	1a 97       	mov	r7,sp
80000c96:	20 5d       	sub	sp,20
80000c98:	ee eb ff ec 	st.d	r7[-20],r10
	uint64_t dv;
	uint8_t pr;
	
	interruptDisable();
80000c9c:	f0 1f 00 43 	mcall	80000da8 <ROSA_delay+0x118>
	
	dv = ROSA_getTickCount() + ticks;
80000ca0:	f0 1f 00 43 	mcall	80000dac <ROSA_delay+0x11c>
80000ca4:	ee e8 ff ec 	ld.d	r8,r7[-20]
80000ca8:	f4 08 00 08 	add	r8,r10,r8
80000cac:	f6 09 00 49 	adc	r9,r11,r9
80000cb0:	ee e9 ff f4 	st.d	r7[-12],r8
	pr = EXECTASK->priority;
80000cb4:	4b f8       	lddpc	r8,80000db0 <ROSA_delay+0x120>
80000cb6:	70 08       	ld.w	r8,r8[0x0]
80000cb8:	f1 38 00 64 	ld.ub	r8,r8[100]
80000cbc:	ef 68 ff ff 	st.b	r7[-1],r8
	
	EXECTASK->delay = dv;
80000cc0:	4b c8       	lddpc	r8,80000db0 <ROSA_delay+0x120>
80000cc2:	70 0a       	ld.w	r10,r8[0x0]
80000cc4:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000cc8:	f4 e9 00 68 	st.d	r10[104],r8

	/* Extract task from its queue */
	ROSA_TM_ACTION(PA[pr], EXECTASK, Uninstall);
80000ccc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000cd0:	4b 98       	lddpc	r8,80000db4 <ROSA_delay+0x124>
80000cd2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000cd6:	4b 98       	lddpc	r8,80000db8 <ROSA_delay+0x128>
80000cd8:	91 09       	st.w	r8[0x0],r9
80000cda:	4b 68       	lddpc	r8,80000db0 <ROSA_delay+0x120>
80000cdc:	70 08       	ld.w	r8,r8[0x0]
80000cde:	10 9c       	mov	r12,r8
80000ce0:	f0 1f 00 37 	mcall	80000dbc <ROSA_delay+0x12c>
80000ce4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000ce8:	4b 48       	lddpc	r8,80000db8 <ROSA_delay+0x128>
80000cea:	70 0a       	ld.w	r10,r8[0x0]
80000cec:	4b 28       	lddpc	r8,80000db4 <ROSA_delay+0x124>
80000cee:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	
	/* Check the current queue for emptiness */	
	if (PA[pr])
80000cf2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000cf6:	4b 08       	lddpc	r8,80000db4 <ROSA_delay+0x124>
80000cf8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000cfc:	58 08       	cp.w	r8,0
80000cfe:	c0 a0       	breq	80000d12 <ROSA_delay+0x82>
	{
		PREEMPTASK = PA[pr]->nexttcb;
80000d00:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000d04:	4a c8       	lddpc	r8,80000db4 <ROSA_delay+0x124>
80000d06:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000d0a:	70 09       	ld.w	r9,r8[0x0]
80000d0c:	4a d8       	lddpc	r8,80000dc0 <ROSA_delay+0x130>
80000d0e:	91 09       	st.w	r8[0x0],r9
80000d10:	c0 68       	rjmp	80000d1c <ROSA_delay+0x8c>
	}
	else
	{
		PREEMPTASK = readyQueueSearch();	
80000d12:	f0 1f 00 2d 	mcall	80000dc4 <ROSA_delay+0x134>
80000d16:	18 99       	mov	r9,r12
80000d18:	4a a8       	lddpc	r8,80000dc0 <ROSA_delay+0x130>
80000d1a:	91 09       	st.w	r8[0x0],r9
	}
	
	TCBLIST = DQ;
80000d1c:	4a b8       	lddpc	r8,80000dc8 <ROSA_delay+0x138>
80000d1e:	70 09       	ld.w	r9,r8[0x0]
80000d20:	4a 68       	lddpc	r8,80000db8 <ROSA_delay+0x128>
80000d22:	91 09       	st.w	r8[0x0],r9
	
	/* Search for the right place to insert the task to the delay queue */	
	while ((DQ) && (TCBLIST->delay <= dv) && (dv <= TCBLIST->nexttcb->delay))
80000d24:	c0 68       	rjmp	80000d30 <ROSA_delay+0xa0>
	{
		TCBLIST = TCBLIST->nexttcb;
80000d26:	4a 58       	lddpc	r8,80000db8 <ROSA_delay+0x128>
80000d28:	70 08       	ld.w	r8,r8[0x0]
80000d2a:	70 09       	ld.w	r9,r8[0x0]
80000d2c:	4a 38       	lddpc	r8,80000db8 <ROSA_delay+0x128>
80000d2e:	91 09       	st.w	r8[0x0],r9
	}
	
	TCBLIST = DQ;
	
	/* Search for the right place to insert the task to the delay queue */	
	while ((DQ) && (TCBLIST->delay <= dv) && (dv <= TCBLIST->nexttcb->delay))
80000d30:	4a 68       	lddpc	r8,80000dc8 <ROSA_delay+0x138>
80000d32:	70 08       	ld.w	r8,r8[0x0]
80000d34:	58 08       	cp.w	r8,0
80000d36:	c1 70       	breq	80000d64 <ROSA_delay+0xd4>
80000d38:	4a 08       	lddpc	r8,80000db8 <ROSA_delay+0x128>
80000d3a:	70 08       	ld.w	r8,r8[0x0]
80000d3c:	f0 ea 00 68 	ld.d	r10,r8[104]
80000d40:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000d44:	10 3a       	cp.w	r10,r8
80000d46:	f2 0b 13 00 	cpc	r11,r9
80000d4a:	e0 8b 00 0d 	brhi	80000d64 <ROSA_delay+0xd4>
80000d4e:	49 b8       	lddpc	r8,80000db8 <ROSA_delay+0x128>
80000d50:	70 08       	ld.w	r8,r8[0x0]
80000d52:	70 08       	ld.w	r8,r8[0x0]
80000d54:	f0 ea 00 68 	ld.d	r10,r8[104]
80000d58:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000d5c:	10 3a       	cp.w	r10,r8
80000d5e:	f2 0b 13 00 	cpc	r11,r9
80000d62:	ce 22       	brcc	80000d26 <ROSA_delay+0x96>
	{
		TCBLIST = TCBLIST->nexttcb;
	}

	ROSA_tcbInstall(EXECTASK);
80000d64:	49 38       	lddpc	r8,80000db0 <ROSA_delay+0x120>
80000d66:	70 08       	ld.w	r8,r8[0x0]
80000d68:	10 9c       	mov	r12,r8
80000d6a:	f0 1f 00 19 	mcall	80000dcc <ROSA_delay+0x13c>
	DQ = TCBLIST;
80000d6e:	49 38       	lddpc	r8,80000db8 <ROSA_delay+0x128>
80000d70:	70 09       	ld.w	r9,r8[0x0]
80000d72:	49 68       	lddpc	r8,80000dc8 <ROSA_delay+0x138>
80000d74:	91 09       	st.w	r8[0x0],r9
	
	usartWriteTcb(USART, DQ);
80000d76:	49 58       	lddpc	r8,80000dc8 <ROSA_delay+0x138>
80000d78:	70 08       	ld.w	r8,r8[0x0]
80000d7a:	10 9b       	mov	r11,r8
80000d7c:	fe 7c 14 00 	mov	r12,-60416
80000d80:	f0 1f 00 14 	mcall	80000dd0 <ROSA_delay+0x140>
	usartWriteTcb(USART, DQ->nexttcb);
80000d84:	49 18       	lddpc	r8,80000dc8 <ROSA_delay+0x138>
80000d86:	70 08       	ld.w	r8,r8[0x0]
80000d88:	70 08       	ld.w	r8,r8[0x0]
80000d8a:	10 9b       	mov	r11,r8
80000d8c:	fe 7c 14 00 	mov	r12,-60416
80000d90:	f0 1f 00 10 	mcall	80000dd0 <ROSA_delay+0x140>
	
	interruptEnable();
80000d94:	f0 1f 00 10 	mcall	80000dd4 <ROSA_delay+0x144>
	
	ROSA_yield();
80000d98:	f0 1f 00 10 	mcall	80000dd8 <ROSA_delay+0x148>
	
	return 0;
80000d9c:	30 08       	mov	r8,0
}
80000d9e:	10 9c       	mov	r12,r8
80000da0:	2f bd       	sub	sp,-20
80000da2:	e3 cd 80 80 	ldm	sp++,r7,pc
80000da6:	00 00       	add	r0,r0
80000da8:	80 00       	ld.sh	r0,r0[0x0]
80000daa:	27 66       	sub	r6,118
80000dac:	80 00       	ld.sh	r0,r0[0x0]
80000dae:	0f ac       	ld.ub	r12,r7[0x2]
80000db0:	00 00       	add	r0,r0
80000db2:	07 24       	ld.uh	r4,r3++
80000db4:	00 00       	add	r0,r0
80000db6:	06 78       	tst	r8,r3
80000db8:	00 00       	add	r0,r0
80000dba:	06 74       	tst	r4,r3
80000dbc:	80 00       	ld.sh	r0,r0[0x0]
80000dbe:	07 a8       	ld.ub	r8,r3[0x2]
80000dc0:	00 00       	add	r0,r0
80000dc2:	06 ac       	st.w	r3++,r12
80000dc4:	80 00       	ld.sh	r0,r0[0x0]
80000dc6:	08 18       	sub	r8,r4
80000dc8:	00 00       	add	r0,r0
80000dca:	07 28       	ld.uh	r8,r3++
80000dcc:	80 00       	ld.sh	r0,r0[0x0]
80000dce:	07 4c       	ld.w	r12,--r3
80000dd0:	80 00       	ld.sh	r0,r0[0x0]
80000dd2:	17 b8       	ld.ub	r8,r11[0x3]
80000dd4:	80 00       	ld.sh	r0,r0[0x0]
80000dd6:	27 6a       	sub	r10,118
80000dd8:	80 00       	ld.sh	r0,r0[0x0]
80000dda:	0e 9e       	mov	lr,r7

80000ddc <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80000ddc:	4b 5c       	lddpc	r12,80000eb0 <_yield+0xa>
	lda.w r11,EXECTASK
80000dde:	4b 6b       	lddpc	r11,80000eb4 <_yield+0xe>
	ld.w r12,r12[0x0]
80000de0:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
80000de2:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000de4:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000de6:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000de8:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000dec:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
80000dee:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
80000df0:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
80000df2:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80000df6:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000df8:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80000dfa:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000dfc:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
80000dfe:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
80000e00:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
80000e02:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000e04:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80000e06:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000e08:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000e0a:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000e0c:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000e0e:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000e10:	1c 9f       	mov	pc,lr

80000e12 <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
80000e12:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000e14:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80000e16:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000e18:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000e1c:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80000e20:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000e24:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000e28:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000e2c:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000e30:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000e34:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000e38:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000e3c:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
80000e3e:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80000e40:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
80000e42:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000e44:	1c 9f       	mov	pc,lr

80000e46 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
80000e46:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000e48:	49 bc       	lddpc	r12,80000eb4 <_yield+0xe>
	ld.w r12,r12[0x0]
80000e4a:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000e4c:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
80000e4e:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
80000e50:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
80000e52:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
80000e54:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
80000e56:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
80000e58:	33 40       	mov	r0,52
	add r0,r12
80000e5a:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000e5c:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80000e60:	1a 90       	mov	r0,sp
	st.w --sp,r0
80000e62:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80000e64:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
80000e68:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
80000e6a:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80000e6c:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
80000e6e:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
80000e70:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
80000e72:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80000e74:	1c 9f       	mov	pc,lr

80000e76 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000e76:	49 0c       	lddpc	r12,80000eb4 <_yield+0xe>
	ld.w r12,r12[0x0]
80000e78:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
80000e7a:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000e7c:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
80000e7e:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
80000e82:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80000e84:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80000e86:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
80000e88:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80000e8a:	33 40       	mov	r0,52
	add r0,r12
80000e8c:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80000e8e:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80000e92:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000e94:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80000e96:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80000e98:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000e9a:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80000e9c:	d6 13       	rets

80000e9e <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
80000e9e:	d4 01       	pushm	lr
	lda.w lr,_yield
80000ea0:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000ea4:	d7 33       	scall

80000ea6 <_yield>:
_yield:
	call contextSave
80000ea6:	cd 0f       	rcall	80000e46 <contextSave>
	call scheduler
80000ea8:	f0 1f 00 04 	mcall	80000eb8 <_yield+0x12>
	call contextRestore
80000eac:	ce 5f       	rcall	80000e76 <contextRestore>
80000eae:	00 00       	add	r0,r0
80000eb0:	00 00       	add	r0,r0
80000eb2:	06 74       	tst	r4,r3
80000eb4:	00 00       	add	r0,r0
80000eb6:	07 24       	ld.uh	r4,r3++
80000eb8:	80 00       	ld.sh	r0,r0[0x0]
80000eba:	0e bc       	st.h	r7++,r12

80000ebc <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000ebc:	eb cd 40 80 	pushm	r7,lr
80000ec0:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK) {
80000ec2:	48 f8       	lddpc	r8,80000efc <scheduler+0x40>
80000ec4:	70 08       	ld.w	r8,r8[0x0]
80000ec6:	58 08       	cp.w	r8,0
80000ec8:	c0 90       	breq	80000eda <scheduler+0x1e>
		EXECTASK = PREEMPTASK;
80000eca:	48 d8       	lddpc	r8,80000efc <scheduler+0x40>
80000ecc:	70 09       	ld.w	r9,r8[0x0]
80000ece:	48 d8       	lddpc	r8,80000f00 <scheduler+0x44>
80000ed0:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
80000ed2:	48 b8       	lddpc	r8,80000efc <scheduler+0x40>
80000ed4:	30 09       	mov	r9,0
80000ed6:	91 09       	st.w	r8[0x0],r9
80000ed8:	c1 08       	rjmp	80000ef8 <scheduler+0x3c>
	}
	else {
		PA[EXECTASK->priority] = EXECTASK;
80000eda:	48 a8       	lddpc	r8,80000f00 <scheduler+0x44>
80000edc:	70 08       	ld.w	r8,r8[0x0]
80000ede:	f1 38 00 64 	ld.ub	r8,r8[100]
80000ee2:	10 99       	mov	r9,r8
80000ee4:	48 78       	lddpc	r8,80000f00 <scheduler+0x44>
80000ee6:	70 0a       	ld.w	r10,r8[0x0]
80000ee8:	48 78       	lddpc	r8,80000f04 <scheduler+0x48>
80000eea:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		EXECTASK = EXECTASK->nexttcb;
80000eee:	48 58       	lddpc	r8,80000f00 <scheduler+0x44>
80000ef0:	70 08       	ld.w	r8,r8[0x0]
80000ef2:	70 09       	ld.w	r9,r8[0x0]
80000ef4:	48 38       	lddpc	r8,80000f00 <scheduler+0x44>
80000ef6:	91 09       	st.w	r8[0x0],r9
	}
}
80000ef8:	e3 cd 80 80 	ldm	sp++,r7,pc
80000efc:	00 00       	add	r0,r0
80000efe:	06 ac       	st.w	r3++,r12
80000f00:	00 00       	add	r0,r0
80000f02:	07 24       	ld.uh	r4,r3++
80000f04:	00 00       	add	r0,r0
80000f06:	06 78       	tst	r8,r3

80000f08 <C.6.9523>:
80000f08:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000f18 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000f18:	eb cd 40 80 	pushm	r7,lr
80000f1c:	1a 97       	mov	r7,sp
80000f1e:	20 2d       	sub	sp,8
	interruptDisable();
80000f20:	f0 1f 00 1c 	mcall	80000f90 <timerISR+0x78>
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000f24:	fe 78 38 00 	mov	r8,-51200
80000f28:	ef 48 ff fc 	st.w	r7[-4],r8
	
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000f2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f30:	70 88       	ld.w	r8,r8[0x20]
80000f32:	ef 48 ff f8 	st.w	r7[-8],r8
	if (sr & AVR32_TC_CPCS_MASK)
80000f36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f3a:	e2 18 00 10 	andl	r8,0x10,COH
80000f3e:	c2 30       	breq	80000f84 <timerISR+0x6c>
	{
		systemTick++;
80000f40:	49 58       	lddpc	r8,80000f94 <timerISR+0x7c>
80000f42:	f0 ea 00 00 	ld.d	r10,r8[0]
80000f46:	30 18       	mov	r8,1
80000f48:	30 09       	mov	r9,0
80000f4a:	f4 08 00 08 	add	r8,r10,r8
80000f4e:	f6 09 00 49 	adc	r9,r11,r9
80000f52:	49 1a       	lddpc	r10,80000f94 <timerISR+0x7c>
80000f54:	f4 e9 00 00 	st.d	r10[0],r8
		
		if ( (DQ) && (DQ->delay <= systemTick) ) 
80000f58:	49 08       	lddpc	r8,80000f98 <timerISR+0x80>
80000f5a:	70 08       	ld.w	r8,r8[0x0]
80000f5c:	58 08       	cp.w	r8,0
80000f5e:	c1 30       	breq	80000f84 <timerISR+0x6c>
80000f60:	48 e8       	lddpc	r8,80000f98 <timerISR+0x80>
80000f62:	70 08       	ld.w	r8,r8[0x0]
80000f64:	f0 ea 00 68 	ld.d	r10,r8[104]
80000f68:	48 b8       	lddpc	r8,80000f94 <timerISR+0x7c>
80000f6a:	f0 e8 00 00 	ld.d	r8,r8[0]
80000f6e:	10 3a       	cp.w	r10,r8
80000f70:	f2 0b 13 00 	cpc	r11,r9
80000f74:	e0 8b 00 08 	brhi	80000f84 <timerISR+0x6c>
		{
			PREEMPTASK = DELHANDL;
80000f78:	48 98       	lddpc	r8,80000f9c <timerISR+0x84>
80000f7a:	70 09       	ld.w	r9,r8[0x0]
80000f7c:	48 98       	lddpc	r8,80000fa0 <timerISR+0x88>
80000f7e:	91 09       	st.w	r8[0x0],r9
			
			ROSA_yieldFromISR();
80000f80:	f0 1f 00 09 	mcall	80000fa4 <timerISR+0x8c>
		}
	}
	interruptEnable();
80000f84:	f0 1f 00 09 	mcall	80000fa8 <timerISR+0x90>
}
80000f88:	2f ed       	sub	sp,-8
80000f8a:	e3 cd 40 80 	ldm	sp++,r7,lr
80000f8e:	d6 03       	rete
80000f90:	80 00       	ld.sh	r0,r0[0x0]
80000f92:	27 66       	sub	r6,118
80000f94:	00 00       	add	r0,r0
80000f96:	07 a0       	ld.ub	r0,r3[0x2]
80000f98:	00 00       	add	r0,r0
80000f9a:	07 28       	ld.uh	r8,r3++
80000f9c:	00 00       	add	r0,r0
80000f9e:	06 a8       	st.w	r3++,r8
80000fa0:	00 00       	add	r0,r0
80000fa2:	06 ac       	st.w	r3++,r12
80000fa4:	80 00       	ld.sh	r0,r0[0x0]
80000fa6:	06 f0       	st.b	--r3,r0
80000fa8:	80 00       	ld.sh	r0,r0[0x0]
80000faa:	27 6a       	sub	r10,118

80000fac <ROSA_getTickCount>:
/*																		*/
/* Returns the current number of system ticks, relative to start		*/
/* of the system.                                                       */
/************************************************************************/
uint64_t ROSA_getTickCount()
{
80000fac:	eb cd 40 80 	pushm	r7,lr
80000fb0:	1a 97       	mov	r7,sp
	return systemTick;
80000fb2:	48 48       	lddpc	r8,80000fc0 <ROSA_getTickCount+0x14>
80000fb4:	f0 e8 00 00 	ld.d	r8,r8[0]
}
80000fb8:	10 9a       	mov	r10,r8
80000fba:	12 9b       	mov	r11,r9
80000fbc:	e3 cd 80 80 	ldm	sp++,r7,pc
80000fc0:	00 00       	add	r0,r0
80000fc2:	07 a0       	ld.ub	r0,r3[0x2]

80000fc4 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80000fc4:	eb cd 40 80 	pushm	r7,lr
80000fc8:	1a 97       	mov	r7,sp
80000fca:	20 7d       	sub	sp,28
80000fcc:	ef 4c ff e4 	st.w	r7[-28],r12
	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000fd0:	4a 48       	lddpc	r8,80001060 <timerPeriodSet+0x9c>
80000fd2:	ee ca 00 18 	sub	r10,r7,24
80000fd6:	10 9b       	mov	r11,r8
80000fd8:	f6 e8 00 00 	ld.d	r8,r11[0]
80000fdc:	f4 e9 00 00 	st.d	r10[0],r8
80000fe0:	f6 e8 00 08 	ld.d	r8,r11[8]
80000fe4:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000fe8:	30 48       	mov	r8,4
80000fea:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80000fee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ff2:	20 18       	sub	r8,1
80000ff4:	a3 68       	lsl	r8,0x2
80000ff6:	ee 08 00 08 	add	r8,r7,r8
80000ffa:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000ffe:	e0 68 1b 00 	mov	r8,6912
80001002:	ea 18 00 b7 	orh	r8,0xb7
80001006:	f0 09 0c 08 	divs	r8,r8,r9
8000100a:	10 99       	mov	r9,r8
8000100c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001010:	b1 39       	mul	r9,r8
80001012:	e0 68 4d d3 	mov	r8,19923
80001016:	ea 18 10 62 	orh	r8,0x1062
8000101a:	f2 08 06 48 	mulu.d	r8,r9,r8
8000101e:	f2 08 16 06 	lsr	r8,r9,0x6
80001022:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80001026:	ee fc ff fc 	ld.w	r12,r7[-4]
8000102a:	f0 1f 00 0f 	mcall	80001064 <timerPeriodSet+0xa0>
	timerRCSet(rc);
8000102e:	ee fc ff f8 	ld.w	r12,r7[-8]
80001032:	f0 1f 00 0e 	mcall	80001068 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80001036:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000103a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000103e:	f2 08 02 4a 	mul	r10,r9,r8
80001042:	e0 68 9f 81 	mov	r8,40833
80001046:	ea 18 16 5e 	orh	r8,0x165e
8000104a:	f4 08 04 48 	muls.d	r8,r10,r8
8000104e:	b5 49       	asr	r9,0x14
80001050:	f4 08 14 1f 	asr	r8,r10,0x1f
80001054:	f2 08 01 08 	sub	r8,r9,r8
}
80001058:	10 9c       	mov	r12,r8
8000105a:	2f 9d       	sub	sp,-28
8000105c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001060:	80 00       	ld.sh	r0,r0[0x0]
80001062:	0f 08       	ld.w	r8,r7++
80001064:	80 00       	ld.sh	r0,r0[0x0]
80001066:	1b a0       	ld.ub	r0,sp[0x2]
80001068:	80 00       	ld.sh	r0,r0[0x0]
8000106a:	1b 8a       	ld.ub	r10,sp[0x0]

8000106c <buttonInit>:
8000106c:	eb cd 40 80 	pushm	r7,lr
80001070:	1a 97       	mov	r7,sp
80001072:	30 1b       	mov	r11,1
80001074:	35 8c       	mov	r12,88
80001076:	f0 1f 00 07 	mcall	80001090 <buttonInit+0x24>
8000107a:	30 1b       	mov	r11,1
8000107c:	35 5c       	mov	r12,85
8000107e:	f0 1f 00 05 	mcall	80001090 <buttonInit+0x24>
80001082:	30 1b       	mov	r11,1
80001084:	35 2c       	mov	r12,82
80001086:	f0 1f 00 03 	mcall	80001090 <buttonInit+0x24>
8000108a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000108e:	00 00       	add	r0,r0
80001090:	80 00       	ld.sh	r0,r0[0x0]
80001092:	11 00       	ld.w	r0,r8++

80001094 <joystickInit>:
80001094:	eb cd 40 80 	pushm	r7,lr
80001098:	1a 97       	mov	r7,sp
8000109a:	30 1b       	mov	r11,1
8000109c:	31 bc       	mov	r12,27
8000109e:	f0 1f 00 0b 	mcall	800010c8 <joystickInit+0x34>
800010a2:	30 1b       	mov	r11,1
800010a4:	31 9c       	mov	r12,25
800010a6:	f0 1f 00 09 	mcall	800010c8 <joystickInit+0x34>
800010aa:	30 1b       	mov	r11,1
800010ac:	31 cc       	mov	r12,28
800010ae:	f0 1f 00 07 	mcall	800010c8 <joystickInit+0x34>
800010b2:	30 1b       	mov	r11,1
800010b4:	31 4c       	mov	r12,20
800010b6:	f0 1f 00 05 	mcall	800010c8 <joystickInit+0x34>
800010ba:	30 1b       	mov	r11,1
800010bc:	31 ac       	mov	r12,26
800010be:	f0 1f 00 03 	mcall	800010c8 <joystickInit+0x34>
800010c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800010c6:	00 00       	add	r0,r0
800010c8:	80 00       	ld.sh	r0,r0[0x0]
800010ca:	11 00       	ld.w	r0,r8++

800010cc <delay_ms>:
800010cc:	eb cd 40 80 	pushm	r7,lr
800010d0:	1a 97       	mov	r7,sp
800010d2:	20 2d       	sub	sp,8
800010d4:	ef 4c ff f8 	st.w	r7[-8],r12
800010d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010dc:	e0 69 04 42 	mov	r9,1090
800010e0:	b3 38       	mul	r8,r9
800010e2:	ef 48 ff fc 	st.w	r7[-4],r8
800010e6:	c0 68       	rjmp	800010f2 <delay_ms+0x26>
800010e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010ec:	20 18       	sub	r8,1
800010ee:	ef 48 ff fc 	st.w	r7[-4],r8
800010f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800010f6:	58 08       	cp.w	r8,0
800010f8:	cf 81       	brne	800010e8 <delay_ms+0x1c>
800010fa:	2f ed       	sub	sp,-8
800010fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80001100 <gpioInit>:
80001100:	eb cd 40 80 	pushm	r7,lr
80001104:	1a 97       	mov	r7,sp
80001106:	20 7d       	sub	sp,28
80001108:	ef 4c ff ec 	st.w	r7[-20],r12
8000110c:	ef 4b ff e8 	st.w	r7[-24],r11
80001110:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001114:	a5 58       	asr	r8,0x5
80001116:	ef 48 ff f4 	st.w	r7[-12],r8
8000111a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000111e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001122:	ef 48 ff fc 	st.w	r7[-4],r8
80001126:	30 19       	mov	r9,1
80001128:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000112c:	f2 08 09 48 	lsl	r8,r9,r8
80001130:	ef 48 ff f8 	st.w	r7[-8],r8
80001134:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001138:	a9 68       	lsl	r8,0x8
8000113a:	e0 28 f0 00 	sub	r8,61440
8000113e:	ef 48 ff f0 	st.w	r7[-16],r8
80001142:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001146:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000114a:	91 19       	st.w	r8[0x4],r9
8000114c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001150:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001154:	91 69       	st.w	r8[0x18],r9
80001156:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000115a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000115e:	91 a9       	st.w	r8[0x28],r9
80001160:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001164:	ef 48 ff e4 	st.w	r7[-28],r8
80001168:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000116c:	58 08       	cp.w	r8,0
8000116e:	c0 60       	breq	8000117a <gpioInit+0x7a>
80001170:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001174:	58 18       	cp.w	r8,1
80001176:	c0 90       	breq	80001188 <gpioInit+0x88>
80001178:	c0 f8       	rjmp	80001196 <gpioInit+0x96>
8000117a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000117e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001182:	f1 49 00 44 	st.w	r8[68],r9
80001186:	c0 e8       	rjmp	800011a2 <gpioInit+0xa2>
80001188:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000118c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001190:	f1 49 00 48 	st.w	r8[72],r9
80001194:	c0 78       	rjmp	800011a2 <gpioInit+0xa2>
80001196:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000119a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000119e:	f1 49 00 48 	st.w	r8[72],r9
800011a2:	2f 9d       	sub	sp,-28
800011a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800011a8 <gpioClear>:
800011a8:	eb cd 40 80 	pushm	r7,lr
800011ac:	1a 97       	mov	r7,sp
800011ae:	20 5d       	sub	sp,20
800011b0:	ef 4c ff ec 	st.w	r7[-20],r12
800011b4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800011b8:	a5 58       	asr	r8,0x5
800011ba:	ef 48 ff f4 	st.w	r7[-12],r8
800011be:	ee f8 ff ec 	ld.w	r8,r7[-20]
800011c2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800011c6:	ef 48 ff fc 	st.w	r7[-4],r8
800011ca:	30 19       	mov	r9,1
800011cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800011d0:	f2 08 09 48 	lsl	r8,r9,r8
800011d4:	ef 48 ff f8 	st.w	r7[-8],r8
800011d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800011dc:	a9 68       	lsl	r8,0x8
800011de:	e0 28 f0 00 	sub	r8,61440
800011e2:	ef 48 ff f0 	st.w	r7[-16],r8
800011e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800011ea:	ee f8 ff f0 	ld.w	r8,r7[-16]
800011ee:	f1 49 00 58 	st.w	r8[88],r9
800011f2:	2f bd       	sub	sp,-20
800011f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800011f8 <gpioSet>:
800011f8:	eb cd 40 80 	pushm	r7,lr
800011fc:	1a 97       	mov	r7,sp
800011fe:	20 5d       	sub	sp,20
80001200:	ef 4c ff ec 	st.w	r7[-20],r12
80001204:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001208:	a5 58       	asr	r8,0x5
8000120a:	ef 48 ff f4 	st.w	r7[-12],r8
8000120e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001212:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001216:	ef 48 ff fc 	st.w	r7[-4],r8
8000121a:	30 19       	mov	r9,1
8000121c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001220:	f2 08 09 48 	lsl	r8,r9,r8
80001224:	ef 48 ff f8 	st.w	r7[-8],r8
80001228:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000122c:	a9 68       	lsl	r8,0x8
8000122e:	e0 28 f0 00 	sub	r8,61440
80001232:	ef 48 ff f0 	st.w	r7[-16],r8
80001236:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000123a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000123e:	f1 49 00 54 	st.w	r8[84],r9
80001242:	2f bd       	sub	sp,-20
80001244:	e3 cd 80 80 	ldm	sp++,r7,pc

80001248 <gpioToggle>:
80001248:	eb cd 40 80 	pushm	r7,lr
8000124c:	1a 97       	mov	r7,sp
8000124e:	20 5d       	sub	sp,20
80001250:	ef 4c ff ec 	st.w	r7[-20],r12
80001254:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001258:	a5 58       	asr	r8,0x5
8000125a:	ef 48 ff f4 	st.w	r7[-12],r8
8000125e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001262:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80001266:	ef 48 ff fc 	st.w	r7[-4],r8
8000126a:	30 19       	mov	r9,1
8000126c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001270:	f2 08 09 48 	lsl	r8,r9,r8
80001274:	ef 48 ff f8 	st.w	r7[-8],r8
80001278:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000127c:	a9 68       	lsl	r8,0x8
8000127e:	e0 28 f0 00 	sub	r8,61440
80001282:	ef 48 ff f0 	st.w	r7[-16],r8
80001286:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000128a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000128e:	f1 49 00 5c 	st.w	r8[92],r9
80001292:	2f bd       	sub	sp,-20
80001294:	e3 cd 80 80 	ldm	sp++,r7,pc

80001298 <ledInit>:
80001298:	eb cd 40 80 	pushm	r7,lr
8000129c:	1a 97       	mov	r7,sp
8000129e:	20 9d       	sub	sp,36
800012a0:	49 e8       	lddpc	r8,80001318 <ledInit+0x80>
800012a2:	ee cb 00 24 	sub	r11,r7,36
800012a6:	10 9a       	mov	r10,r8
800012a8:	f4 e8 00 00 	ld.d	r8,r10[0]
800012ac:	f6 e9 00 00 	st.d	r11[0],r8
800012b0:	f4 e8 00 08 	ld.d	r8,r10[8]
800012b4:	f6 e9 00 08 	st.d	r11[8],r8
800012b8:	f4 e8 00 10 	ld.d	r8,r10[16]
800012bc:	f6 e9 00 10 	st.d	r11[16],r8
800012c0:	f4 e8 00 18 	ld.d	r8,r10[24]
800012c4:	f6 e9 00 18 	st.d	r11[24],r8
800012c8:	30 08       	mov	r8,0
800012ca:	ef 48 ff fc 	st.w	r7[-4],r8
800012ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012d2:	a3 68       	lsl	r8,0x2
800012d4:	ee 08 00 08 	add	r8,r7,r8
800012d8:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800012dc:	10 9c       	mov	r12,r8
800012de:	f0 1f 00 10 	mcall	8000131c <ledInit+0x84>
800012e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012e6:	a3 68       	lsl	r8,0x2
800012e8:	ee 08 00 08 	add	r8,r7,r8
800012ec:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800012f0:	30 0b       	mov	r11,0
800012f2:	10 9c       	mov	r12,r8
800012f4:	f0 1f 00 0b 	mcall	80001320 <ledInit+0x88>
800012f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800012fc:	58 78       	cp.w	r8,7
800012fe:	5f 18       	srne	r8
80001300:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80001304:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001308:	2f f8       	sub	r8,-1
8000130a:	ef 48 ff fc 	st.w	r7[-4],r8
8000130e:	58 09       	cp.w	r9,0
80001310:	cd f1       	brne	800012ce <ledInit+0x36>
80001312:	2f 7d       	sub	sp,-36
80001314:	e3 cd 80 80 	ldm	sp++,r7,pc
80001318:	80 00       	ld.sh	r0,r0[0x0]
8000131a:	2a 00       	sub	r0,-96
8000131c:	80 00       	ld.sh	r0,r0[0x0]
8000131e:	13 44       	ld.w	r4,--r9
80001320:	80 00       	ld.sh	r0,r0[0x0]
80001322:	11 00       	ld.w	r0,r8++

80001324 <ledOn>:
80001324:	eb cd 40 80 	pushm	r7,lr
80001328:	1a 97       	mov	r7,sp
8000132a:	20 1d       	sub	sp,4
8000132c:	ef 4c ff fc 	st.w	r7[-4],r12
80001330:	ee fc ff fc 	ld.w	r12,r7[-4]
80001334:	f0 1f 00 03 	mcall	80001340 <ledOn+0x1c>
80001338:	2f fd       	sub	sp,-4
8000133a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000133e:	00 00       	add	r0,r0
80001340:	80 00       	ld.sh	r0,r0[0x0]
80001342:	11 a8       	ld.ub	r8,r8[0x2]

80001344 <ledOff>:
80001344:	eb cd 40 80 	pushm	r7,lr
80001348:	1a 97       	mov	r7,sp
8000134a:	20 1d       	sub	sp,4
8000134c:	ef 4c ff fc 	st.w	r7[-4],r12
80001350:	ee fc ff fc 	ld.w	r12,r7[-4]
80001354:	f0 1f 00 03 	mcall	80001360 <ledOff+0x1c>
80001358:	2f fd       	sub	sp,-4
8000135a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000135e:	00 00       	add	r0,r0
80001360:	80 00       	ld.sh	r0,r0[0x0]
80001362:	11 f8       	ld.ub	r8,r8[0x7]

80001364 <ledToggle>:
80001364:	eb cd 40 80 	pushm	r7,lr
80001368:	1a 97       	mov	r7,sp
8000136a:	20 1d       	sub	sp,4
8000136c:	ef 4c ff fc 	st.w	r7[-4],r12
80001370:	ee fc ff fc 	ld.w	r12,r7[-4]
80001374:	f0 1f 00 03 	mcall	80001380 <ledToggle+0x1c>
80001378:	2f fd       	sub	sp,-4
8000137a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000137e:	00 00       	add	r0,r0
80001380:	80 00       	ld.sh	r0,r0[0x0]
80001382:	12 48       	or	r8,r9

80001384 <potInit>:
80001384:	d3 01       	pushm	r11-r12
80001386:	e0 6c 10 00 	mov	r12,4096
8000138a:	ea 1c ff ff 	orh	r12,0xffff
8000138e:	31 6b       	mov	r11,22
80001390:	99 2b       	st.w	r12[0x8],r11
80001392:	99 6b       	st.w	r12[0x18],r11
80001394:	99 6b       	st.w	r12[0x18],r11
80001396:	e0 6c 3c 00 	mov	r12,15360
8000139a:	ea 1c ff ff 	orh	r12,0xffff
8000139e:	30 1b       	mov	r11,1
800013a0:	99 0b       	st.w	r12[0x0],r11
800013a2:	e0 6b 0f 1f 	mov	r11,3871
800013a6:	b1 6b       	lsl	r11,0x10
800013a8:	99 1b       	st.w	r12[0x4],r11
800013aa:	30 2b       	mov	r11,2
800013ac:	99 4b       	st.w	r12[0x10],r11
800013ae:	d3 02       	popm	r11-r12
800013b0:	1c 9f       	mov	pc,lr

800013b2 <potGetValue>:
800013b2:	d1 81       	pushm	r10-r11
800013b4:	e0 6c 3c 00 	mov	r12,15360
800013b8:	ea 1c ff ff 	orh	r12,0xffff
800013bc:	30 2b       	mov	r11,2
800013be:	99 0b       	st.w	r12[0x0],r11

800013c0 <a1>:
800013c0:	78 7a       	ld.w	r10,r12[0x1c]
800013c2:	16 7a       	tst	r10,r11
800013c4:	cf e0       	breq	800013c0 <a1>
800013c6:	78 dc       	ld.w	r12,r12[0x34]
800013c8:	d1 82       	popm	r10-r11
800013ca:	1c 9f       	mov	pc,lr

800013cc <usartReset>:
800013cc:	eb cd 40 80 	pushm	r7,lr
800013d0:	1a 97       	mov	r7,sp
800013d2:	20 3d       	sub	sp,12
800013d4:	ef 4c ff f8 	st.w	r7[-8],r12
800013d8:	f0 1f 00 16 	mcall	80001430 <usartReset+0x64>
800013dc:	18 98       	mov	r8,r12
800013de:	ef 48 ff fc 	st.w	r7[-4],r8
800013e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800013e6:	58 08       	cp.w	r8,0
800013e8:	c0 30       	breq	800013ee <usartReset+0x22>
800013ea:	f0 1f 00 13 	mcall	80001434 <usartReset+0x68>
800013ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
800013f2:	3f f8       	mov	r8,-1
800013f4:	93 38       	st.w	r9[0xc],r8
800013f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800013fa:	70 58       	ld.w	r8,r8[0x14]
800013fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001400:	58 08       	cp.w	r8,0
80001402:	c0 30       	breq	80001408 <usartReset+0x3c>
80001404:	f0 1f 00 0d 	mcall	80001438 <usartReset+0x6c>
80001408:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000140c:	30 08       	mov	r8,0
8000140e:	93 18       	st.w	r9[0x4],r8
80001410:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001414:	30 08       	mov	r8,0
80001416:	93 98       	st.w	r9[0x24],r8
80001418:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000141c:	30 08       	mov	r8,0
8000141e:	93 a8       	st.w	r9[0x28],r8
80001420:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001424:	ea 68 61 0c 	mov	r8,680204
80001428:	93 08       	st.w	r9[0x0],r8
8000142a:	2f dd       	sub	sp,-12
8000142c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001430:	80 00       	ld.sh	r0,r0[0x0]
80001432:	27 6e       	sub	lr,118
80001434:	80 00       	ld.sh	r0,r0[0x0]
80001436:	27 66       	sub	r6,118
80001438:	80 00       	ld.sh	r0,r0[0x0]
8000143a:	27 6a       	sub	r10,118

8000143c <usartSetBaudrate>:
8000143c:	eb cd 40 80 	pushm	r7,lr
80001440:	1a 97       	mov	r7,sp
80001442:	20 bd       	sub	sp,44
80001444:	ef 4c ff ec 	st.w	r7[-20],r12
80001448:	ef 4b ff e8 	st.w	r7[-24],r11
8000144c:	ef 4a ff e4 	st.w	r7[-28],r10
80001450:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001454:	f0 09 15 04 	lsl	r9,r8,0x4
80001458:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000145c:	10 39       	cp.w	r9,r8
8000145e:	e0 8b 00 06 	brhi	8000146a <usartSetBaudrate+0x2e>
80001462:	31 09       	mov	r9,16
80001464:	ef 49 ff d4 	st.w	r7[-44],r9
80001468:	c0 48       	rjmp	80001470 <usartSetBaudrate+0x34>
8000146a:	30 88       	mov	r8,8
8000146c:	ef 48 ff d4 	st.w	r7[-44],r8
80001470:	ee f9 ff d4 	ld.w	r9,r7[-44]
80001474:	ef 49 ff f0 	st.w	r7[-16],r9
80001478:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000147c:	f0 0a 15 03 	lsl	r10,r8,0x3
80001480:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001484:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001488:	f2 08 02 48 	mul	r8,r9,r8
8000148c:	a1 98       	lsr	r8,0x1
8000148e:	10 0a       	add	r10,r8
80001490:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001494:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001498:	f2 08 02 48 	mul	r8,r9,r8
8000149c:	f4 08 0d 08 	divu	r8,r10,r8
800014a0:	ef 48 ff f4 	st.w	r7[-12],r8
800014a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800014a8:	a3 98       	lsr	r8,0x3
800014aa:	ef 48 ff f8 	st.w	r7[-8],r8
800014ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
800014b2:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800014b6:	ef 48 ff fc 	st.w	r7[-4],r8
800014ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014be:	58 08       	cp.w	r8,0
800014c0:	c0 70       	breq	800014ce <usartSetBaudrate+0x92>
800014c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800014c6:	e0 48 ff ff 	cp.w	r8,65535
800014ca:	e0 88 00 06 	brls	800014d6 <usartSetBaudrate+0x9a>
800014ce:	30 18       	mov	r8,1
800014d0:	ef 48 ff d8 	st.w	r7[-40],r8
800014d4:	c2 c8       	rjmp	8000152c <usartSetBaudrate+0xf0>
800014d6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800014da:	70 18       	ld.w	r8,r8[0x4]
800014dc:	10 99       	mov	r9,r8
800014de:	e4 19 ff f7 	andh	r9,0xfff7
800014e2:	e0 19 fe cf 	andl	r9,0xfecf
800014e6:	ef 49 ff dc 	st.w	r7[-36],r9
800014ea:	ee f8 ff f0 	ld.w	r8,r7[-16]
800014ee:	59 08       	cp.w	r8,16
800014f0:	c0 60       	breq	800014fc <usartSetBaudrate+0xc0>
800014f2:	e8 68 00 00 	mov	r8,524288
800014f6:	ef 48 ff e0 	st.w	r7[-32],r8
800014fa:	c0 48       	rjmp	80001502 <usartSetBaudrate+0xc6>
800014fc:	30 09       	mov	r9,0
800014fe:	ef 49 ff e0 	st.w	r7[-32],r9
80001502:	ee f9 ff dc 	ld.w	r9,r7[-36]
80001506:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000150a:	10 49       	or	r9,r8
8000150c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001510:	91 19       	st.w	r8[0x4],r9
80001512:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001516:	f0 09 15 10 	lsl	r9,r8,0x10
8000151a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000151e:	10 49       	or	r9,r8
80001520:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001524:	91 89       	st.w	r8[0x20],r9
80001526:	30 09       	mov	r9,0
80001528:	ef 49 ff d8 	st.w	r7[-40],r9
8000152c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80001530:	10 9c       	mov	r12,r8
80001532:	2f 5d       	sub	sp,-44
80001534:	e3 cd 80 80 	ldm	sp++,r7,pc

80001538 <usartInit>:
80001538:	eb cd 40 80 	pushm	r7,lr
8000153c:	1a 97       	mov	r7,sp
8000153e:	20 4d       	sub	sp,16
80001540:	ef 4c ff f8 	st.w	r7[-8],r12
80001544:	ef 4b ff f4 	st.w	r7[-12],r11
80001548:	ef 4a ff f0 	st.w	r7[-16],r10
8000154c:	fe 78 10 00 	mov	r8,-61440
80001550:	ef 48 ff fc 	st.w	r7[-4],r8
80001554:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001558:	30 18       	mov	r8,1
8000155a:	93 28       	st.w	r9[0x8],r8
8000155c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001560:	30 28       	mov	r8,2
80001562:	93 28       	st.w	r9[0x8],r8
80001564:	ee fc ff f8 	ld.w	r12,r7[-8]
80001568:	f0 1f 00 3b 	mcall	80001654 <usartInit+0x11c>
8000156c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001570:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001574:	70 08       	ld.w	r8,r8[0x0]
80001576:	12 9a       	mov	r10,r9
80001578:	10 9b       	mov	r11,r8
8000157a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000157e:	f0 1f 00 37 	mcall	80001658 <usartInit+0x120>
80001582:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001586:	11 c9       	ld.ub	r9,r8[0x4]
80001588:	30 98       	mov	r8,9
8000158a:	f0 09 18 00 	cp.b	r9,r8
8000158e:	c0 a1       	brne	800015a2 <usartInit+0x6a>
80001590:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001594:	70 18       	ld.w	r8,r8[0x4]
80001596:	10 99       	mov	r9,r8
80001598:	b1 b9       	sbr	r9,0x11
8000159a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000159e:	91 19       	st.w	r8[0x4],r9
800015a0:	c0 d8       	rjmp	800015ba <usartInit+0x82>
800015a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015a6:	70 19       	ld.w	r9,r8[0x4]
800015a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800015ac:	11 c8       	ld.ub	r8,r8[0x4]
800015ae:	20 58       	sub	r8,5
800015b0:	a7 68       	lsl	r8,0x6
800015b2:	10 49       	or	r9,r8
800015b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015b8:	91 19       	st.w	r8[0x4],r9
800015ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015be:	70 1a       	ld.w	r10,r8[0x4]
800015c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800015c4:	11 d8       	ld.ub	r8,r8[0x5]
800015c6:	f0 09 15 09 	lsl	r9,r8,0x9
800015ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800015ce:	f1 38 00 08 	ld.ub	r8,r8[8]
800015d2:	af 68       	lsl	r8,0xe
800015d4:	f3 e8 10 08 	or	r8,r9,r8
800015d8:	f5 e8 10 09 	or	r9,r10,r8
800015dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015e0:	91 19       	st.w	r8[0x4],r9
800015e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800015e6:	90 39       	ld.sh	r9,r8[0x6]
800015e8:	30 28       	mov	r8,2
800015ea:	f0 09 19 00 	cp.h	r9,r8
800015ee:	e0 88 00 14 	brls	80001616 <usartInit+0xde>
800015f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800015f6:	70 18       	ld.w	r8,r8[0x4]
800015f8:	10 99       	mov	r9,r8
800015fa:	ad b9       	sbr	r9,0xd
800015fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001600:	91 19       	st.w	r8[0x4],r9
80001602:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001606:	90 38       	ld.sh	r8,r8[0x6]
80001608:	5c 78       	castu.h	r8
8000160a:	20 28       	sub	r8,2
8000160c:	10 99       	mov	r9,r8
8000160e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001612:	91 a9       	st.w	r8[0x28],r9
80001614:	c0 d8       	rjmp	8000162e <usartInit+0xf6>
80001616:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000161a:	70 19       	ld.w	r9,r8[0x4]
8000161c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001620:	90 38       	ld.sh	r8,r8[0x6]
80001622:	5c 78       	castu.h	r8
80001624:	ad 68       	lsl	r8,0xc
80001626:	10 49       	or	r9,r8
80001628:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000162c:	91 19       	st.w	r8[0x4],r9
8000162e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001632:	70 18       	ld.w	r8,r8[0x4]
80001634:	10 99       	mov	r9,r8
80001636:	e0 19 ff f0 	andl	r9,0xfff0
8000163a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000163e:	91 19       	st.w	r8[0x4],r9
80001640:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001644:	35 08       	mov	r8,80
80001646:	93 08       	st.w	r9[0x0],r8
80001648:	30 08       	mov	r8,0
8000164a:	10 9c       	mov	r12,r8
8000164c:	2f cd       	sub	sp,-16
8000164e:	e3 cd 80 80 	ldm	sp++,r7,pc
80001652:	00 00       	add	r0,r0
80001654:	80 00       	ld.sh	r0,r0[0x0]
80001656:	13 cc       	ld.ub	r12,r9[0x4]
80001658:	80 00       	ld.sh	r0,r0[0x0]
8000165a:	14 3c       	cp.w	r12,r10

8000165c <usartWriteChar>:
8000165c:	eb cd 40 80 	pushm	r7,lr
80001660:	1a 97       	mov	r7,sp
80001662:	20 3d       	sub	sp,12
80001664:	ef 4c ff f8 	st.w	r7[-8],r12
80001668:	16 98       	mov	r8,r11
8000166a:	ef 68 ff f4 	st.b	r7[-12],r8
8000166e:	e4 68 00 00 	mov	r8,262144
80001672:	ef 48 ff fc 	st.w	r7[-4],r8
80001676:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000167a:	58 08       	cp.w	r8,0
8000167c:	5f 18       	srne	r8
8000167e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80001682:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001686:	20 18       	sub	r8,1
80001688:	ef 48 ff fc 	st.w	r7[-4],r8
8000168c:	12 98       	mov	r8,r9
8000168e:	ec 18 00 01 	eorl	r8,0x1
80001692:	5c 58       	castu.b	r8
80001694:	c0 71       	brne	800016a2 <usartWriteChar+0x46>
80001696:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000169a:	70 58       	ld.w	r8,r8[0x14]
8000169c:	e2 18 00 02 	andl	r8,0x2,COH
800016a0:	ce b0       	breq	80001676 <usartWriteChar+0x1a>
800016a2:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800016a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016aa:	91 79       	st.w	r8[0x1c],r9
800016ac:	2f dd       	sub	sp,-12
800016ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800016b2:	d7 03       	nop

800016b4 <usartWriteLine>:
800016b4:	eb cd 40 80 	pushm	r7,lr
800016b8:	1a 97       	mov	r7,sp
800016ba:	20 2d       	sub	sp,8
800016bc:	ef 4c ff fc 	st.w	r7[-4],r12
800016c0:	ef 4b ff f8 	st.w	r7[-8],r11
800016c4:	c1 88       	rjmp	800016f4 <usartWriteLine+0x40>
800016c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016ca:	11 88       	ld.ub	r8,r8[0x0]
800016cc:	58 a8       	cp.w	r8,10
800016ce:	c0 61       	brne	800016da <usartWriteLine+0x26>
800016d0:	30 db       	mov	r11,13
800016d2:	ee fc ff fc 	ld.w	r12,r7[-4]
800016d6:	f0 1f 00 0c 	mcall	80001704 <usartWriteLine+0x50>
800016da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016de:	11 88       	ld.ub	r8,r8[0x0]
800016e0:	10 9b       	mov	r11,r8
800016e2:	ee fc ff fc 	ld.w	r12,r7[-4]
800016e6:	f0 1f 00 08 	mcall	80001704 <usartWriteLine+0x50>
800016ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016ee:	2f f8       	sub	r8,-1
800016f0:	ef 48 ff f8 	st.w	r7[-8],r8
800016f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800016f8:	11 88       	ld.ub	r8,r8[0x0]
800016fa:	58 08       	cp.w	r8,0
800016fc:	ce 51       	brne	800016c6 <usartWriteLine+0x12>
800016fe:	2f ed       	sub	sp,-8
80001700:	e3 cd 80 80 	ldm	sp++,r7,pc
80001704:	80 00       	ld.sh	r0,r0[0x0]
80001706:	16 5c       	eor	r12,r11

80001708 <usartWriteValue>:
80001708:	eb cd 40 80 	pushm	r7,lr
8000170c:	1a 97       	mov	r7,sp
8000170e:	20 7d       	sub	sp,28
80001710:	ef 4c ff ec 	st.w	r7[-20],r12
80001714:	ef 4b ff e8 	st.w	r7[-24],r11
80001718:	30 f8       	mov	r8,15
8000171a:	ef 48 ff f8 	st.w	r7[-8],r8
8000171e:	31 c8       	mov	r8,28
80001720:	ef 48 ff f4 	st.w	r7[-12],r8
80001724:	ee f9 ff f4 	ld.w	r9,r7[-12]
80001728:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000172c:	f0 09 09 48 	lsl	r8,r8,r9
80001730:	ef 48 ff f0 	st.w	r7[-16],r8
80001734:	49 eb       	lddpc	r11,800017ac <usartWriteValue+0xa4>
80001736:	ee fc ff ec 	ld.w	r12,r7[-20]
8000173a:	f0 1f 00 1e 	mcall	800017b0 <usartWriteValue+0xa8>
8000173e:	c3 08       	rjmp	8000179e <usartWriteValue+0x96>
80001740:	ee f9 ff e8 	ld.w	r9,r7[-24]
80001744:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001748:	10 69       	and	r9,r8
8000174a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000174e:	f2 08 0a 48 	lsr	r8,r9,r8
80001752:	ef 48 ff fc 	st.w	r7[-4],r8
80001756:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000175a:	58 98       	cp.w	r8,9
8000175c:	e0 8b 00 0a 	brhi	80001770 <usartWriteValue+0x68>
80001760:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001764:	5c 58       	castu.b	r8
80001766:	2d 08       	sub	r8,-48
80001768:	5c 58       	castu.b	r8
8000176a:	ef 48 ff e4 	st.w	r7[-28],r8
8000176e:	c0 88       	rjmp	8000177e <usartWriteValue+0x76>
80001770:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001774:	5c 58       	castu.b	r8
80001776:	2a 98       	sub	r8,-87
80001778:	5c 58       	castu.b	r8
8000177a:	ef 48 ff e4 	st.w	r7[-28],r8
8000177e:	ee fb ff e4 	ld.w	r11,r7[-28]
80001782:	ee fc ff ec 	ld.w	r12,r7[-20]
80001786:	f0 1f 00 0c 	mcall	800017b4 <usartWriteValue+0xac>
8000178a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000178e:	a5 88       	lsr	r8,0x4
80001790:	ef 48 ff f0 	st.w	r7[-16],r8
80001794:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001798:	20 48       	sub	r8,4
8000179a:	ef 48 ff f4 	st.w	r7[-12],r8
8000179e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800017a2:	58 08       	cp.w	r8,0
800017a4:	cc e1       	brne	80001740 <usartWriteValue+0x38>
800017a6:	2f 9d       	sub	sp,-28
800017a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800017ac:	80 00       	ld.sh	r0,r0[0x0]
800017ae:	2a 20       	sub	r0,-94
800017b0:	80 00       	ld.sh	r0,r0[0x0]
800017b2:	16 b4       	st.h	r11++,r4
800017b4:	80 00       	ld.sh	r0,r0[0x0]
800017b6:	16 5c       	eor	r12,r11

800017b8 <usartWriteTcb>:
800017b8:	eb cd 40 80 	pushm	r7,lr
800017bc:	1a 97       	mov	r7,sp
800017be:	20 4d       	sub	sp,16
800017c0:	ef 4c ff f4 	st.w	r7[-12],r12
800017c4:	ef 4b ff f0 	st.w	r7[-16],r11
800017c8:	30 18       	mov	r8,1
800017ca:	ef 48 ff fc 	st.w	r7[-4],r8
800017ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800017d2:	58 08       	cp.w	r8,0
800017d4:	e0 80 01 71 	breq	80001ab6 <usartWriteTcb+0x2fe>
800017d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800017dc:	58 08       	cp.w	r8,0
800017de:	e0 8a 00 27 	brle	8000182c <usartWriteTcb+0x74>
800017e2:	fe fb 02 da 	ld.w	r11,pc[730]
800017e6:	ee fc ff f4 	ld.w	r12,r7[-12]
800017ea:	f0 1f 00 b6 	mcall	80001ac0 <usartWriteTcb+0x308>
800017ee:	30 08       	mov	r8,0
800017f0:	ef 48 ff f8 	st.w	r7[-8],r8
800017f4:	c1 18       	rjmp	80001816 <usartWriteTcb+0x5e>
800017f6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800017fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800017fe:	12 08       	add	r8,r9
80001800:	11 c8       	ld.ub	r8,r8[0x4]
80001802:	10 9b       	mov	r11,r8
80001804:	ee fc ff f4 	ld.w	r12,r7[-12]
80001808:	f0 1f 00 af 	mcall	80001ac4 <usartWriteTcb+0x30c>
8000180c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001810:	2f f8       	sub	r8,-1
80001812:	ef 48 ff f8 	st.w	r7[-8],r8
80001816:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000181a:	58 38       	cp.w	r8,3
8000181c:	fe 9a ff ed 	brle	800017f6 <usartWriteTcb+0x3e>
80001820:	fe fb 02 a8 	ld.w	r11,pc[680]
80001824:	ee fc ff f4 	ld.w	r12,r7[-12]
80001828:	f0 1f 00 a6 	mcall	80001ac0 <usartWriteTcb+0x308>
8000182c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001830:	58 18       	cp.w	r8,1
80001832:	e0 8a 00 75 	brle	8000191c <usartWriteTcb+0x164>
80001836:	fe fb 02 96 	ld.w	r11,pc[662]
8000183a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000183e:	f0 1f 00 a1 	mcall	80001ac0 <usartWriteTcb+0x308>
80001842:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001846:	10 9b       	mov	r11,r8
80001848:	ee fc ff f4 	ld.w	r12,r7[-12]
8000184c:	f0 1f 00 a1 	mcall	80001ad0 <usartWriteTcb+0x318>
80001850:	fe fb 02 84 	ld.w	r11,pc[644]
80001854:	ee fc ff f4 	ld.w	r12,r7[-12]
80001858:	f0 1f 00 9a 	mcall	80001ac0 <usartWriteTcb+0x308>
8000185c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001860:	70 08       	ld.w	r8,r8[0x0]
80001862:	10 9b       	mov	r11,r8
80001864:	ee fc ff f4 	ld.w	r12,r7[-12]
80001868:	f0 1f 00 9a 	mcall	80001ad0 <usartWriteTcb+0x318>
8000186c:	fe fb 02 6c 	ld.w	r11,pc[620]
80001870:	ee fc ff f4 	ld.w	r12,r7[-12]
80001874:	f0 1f 00 93 	mcall	80001ac0 <usartWriteTcb+0x308>
80001878:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000187c:	70 28       	ld.w	r8,r8[0x8]
8000187e:	10 9b       	mov	r11,r8
80001880:	ee fc ff f4 	ld.w	r12,r7[-12]
80001884:	f0 1f 00 93 	mcall	80001ad0 <usartWriteTcb+0x318>
80001888:	fe fb 02 54 	ld.w	r11,pc[596]
8000188c:	ee fc ff f4 	ld.w	r12,r7[-12]
80001890:	f0 1f 00 8c 	mcall	80001ac0 <usartWriteTcb+0x308>
80001894:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001898:	70 38       	ld.w	r8,r8[0xc]
8000189a:	10 9b       	mov	r11,r8
8000189c:	ee fc ff f4 	ld.w	r12,r7[-12]
800018a0:	f0 1f 00 8c 	mcall	80001ad0 <usartWriteTcb+0x318>
800018a4:	fe fb 02 3c 	ld.w	r11,pc[572]
800018a8:	ee fc ff f4 	ld.w	r12,r7[-12]
800018ac:	f0 1f 00 85 	mcall	80001ac0 <usartWriteTcb+0x308>
800018b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800018b4:	70 48       	ld.w	r8,r8[0x10]
800018b6:	10 9b       	mov	r11,r8
800018b8:	ee fc ff f4 	ld.w	r12,r7[-12]
800018bc:	f0 1f 00 85 	mcall	80001ad0 <usartWriteTcb+0x318>
800018c0:	fe fb 02 24 	ld.w	r11,pc[548]
800018c4:	ee fc ff f4 	ld.w	r12,r7[-12]
800018c8:	f0 1f 00 7e 	mcall	80001ac0 <usartWriteTcb+0x308>
800018cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800018d0:	70 58       	ld.w	r8,r8[0x14]
800018d2:	10 9b       	mov	r11,r8
800018d4:	ee fc ff f4 	ld.w	r12,r7[-12]
800018d8:	f0 1f 00 7e 	mcall	80001ad0 <usartWriteTcb+0x318>
800018dc:	fe fb 02 0c 	ld.w	r11,pc[524]
800018e0:	ee fc ff f4 	ld.w	r12,r7[-12]
800018e4:	f0 1f 00 77 	mcall	80001ac0 <usartWriteTcb+0x308>
800018e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800018ec:	70 88       	ld.w	r8,r8[0x20]
800018ee:	10 9b       	mov	r11,r8
800018f0:	ee fc ff f4 	ld.w	r12,r7[-12]
800018f4:	f0 1f 00 77 	mcall	80001ad0 <usartWriteTcb+0x318>
800018f8:	4f db       	lddpc	r11,80001aec <usartWriteTcb+0x334>
800018fa:	ee fc ff f4 	ld.w	r12,r7[-12]
800018fe:	f0 1f 00 71 	mcall	80001ac0 <usartWriteTcb+0x308>
80001902:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001906:	70 98       	ld.w	r8,r8[0x24]
80001908:	10 9b       	mov	r11,r8
8000190a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000190e:	f0 1f 00 71 	mcall	80001ad0 <usartWriteTcb+0x318>
80001912:	4e eb       	lddpc	r11,80001ac8 <usartWriteTcb+0x310>
80001914:	ee fc ff f4 	ld.w	r12,r7[-12]
80001918:	f0 1f 00 6a 	mcall	80001ac0 <usartWriteTcb+0x308>
8000191c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001920:	58 28       	cp.w	r8,2
80001922:	e0 8a 00 ca 	brle	80001ab6 <usartWriteTcb+0x2fe>
80001926:	4f 3b       	lddpc	r11,80001af0 <usartWriteTcb+0x338>
80001928:	ee fc ff f4 	ld.w	r12,r7[-12]
8000192c:	f0 1f 00 65 	mcall	80001ac0 <usartWriteTcb+0x308>
80001930:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001934:	71 88       	ld.w	r8,r8[0x60]
80001936:	10 9b       	mov	r11,r8
80001938:	ee fc ff f4 	ld.w	r12,r7[-12]
8000193c:	f0 1f 00 65 	mcall	80001ad0 <usartWriteTcb+0x318>
80001940:	4e db       	lddpc	r11,80001af4 <usartWriteTcb+0x33c>
80001942:	ee fc ff f4 	ld.w	r12,r7[-12]
80001946:	f0 1f 00 5f 	mcall	80001ac0 <usartWriteTcb+0x308>
8000194a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000194e:	71 78       	ld.w	r8,r8[0x5c]
80001950:	10 9b       	mov	r11,r8
80001952:	ee fc ff f4 	ld.w	r12,r7[-12]
80001956:	f0 1f 00 5f 	mcall	80001ad0 <usartWriteTcb+0x318>
8000195a:	4e 8b       	lddpc	r11,80001af8 <usartWriteTcb+0x340>
8000195c:	ee fc ff f4 	ld.w	r12,r7[-12]
80001960:	f0 1f 00 58 	mcall	80001ac0 <usartWriteTcb+0x308>
80001964:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001968:	71 68       	ld.w	r8,r8[0x58]
8000196a:	10 9b       	mov	r11,r8
8000196c:	ee fc ff f4 	ld.w	r12,r7[-12]
80001970:	f0 1f 00 58 	mcall	80001ad0 <usartWriteTcb+0x318>
80001974:	4e 2b       	lddpc	r11,80001afc <usartWriteTcb+0x344>
80001976:	ee fc ff f4 	ld.w	r12,r7[-12]
8000197a:	f0 1f 00 52 	mcall	80001ac0 <usartWriteTcb+0x308>
8000197e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001982:	71 58       	ld.w	r8,r8[0x54]
80001984:	10 9b       	mov	r11,r8
80001986:	ee fc ff f4 	ld.w	r12,r7[-12]
8000198a:	f0 1f 00 52 	mcall	80001ad0 <usartWriteTcb+0x318>
8000198e:	4d db       	lddpc	r11,80001b00 <usartWriteTcb+0x348>
80001990:	ee fc ff f4 	ld.w	r12,r7[-12]
80001994:	f0 1f 00 4b 	mcall	80001ac0 <usartWriteTcb+0x308>
80001998:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000199c:	71 48       	ld.w	r8,r8[0x50]
8000199e:	10 9b       	mov	r11,r8
800019a0:	ee fc ff f4 	ld.w	r12,r7[-12]
800019a4:	f0 1f 00 4b 	mcall	80001ad0 <usartWriteTcb+0x318>
800019a8:	4d 7b       	lddpc	r11,80001b04 <usartWriteTcb+0x34c>
800019aa:	ee fc ff f4 	ld.w	r12,r7[-12]
800019ae:	f0 1f 00 45 	mcall	80001ac0 <usartWriteTcb+0x308>
800019b2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800019b6:	71 38       	ld.w	r8,r8[0x4c]
800019b8:	10 9b       	mov	r11,r8
800019ba:	ee fc ff f4 	ld.w	r12,r7[-12]
800019be:	f0 1f 00 45 	mcall	80001ad0 <usartWriteTcb+0x318>
800019c2:	4d 2b       	lddpc	r11,80001b08 <usartWriteTcb+0x350>
800019c4:	ee fc ff f4 	ld.w	r12,r7[-12]
800019c8:	f0 1f 00 3e 	mcall	80001ac0 <usartWriteTcb+0x308>
800019cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800019d0:	71 28       	ld.w	r8,r8[0x48]
800019d2:	10 9b       	mov	r11,r8
800019d4:	ee fc ff f4 	ld.w	r12,r7[-12]
800019d8:	f0 1f 00 3e 	mcall	80001ad0 <usartWriteTcb+0x318>
800019dc:	4c cb       	lddpc	r11,80001b0c <usartWriteTcb+0x354>
800019de:	ee fc ff f4 	ld.w	r12,r7[-12]
800019e2:	f0 1f 00 38 	mcall	80001ac0 <usartWriteTcb+0x308>
800019e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800019ea:	71 18       	ld.w	r8,r8[0x44]
800019ec:	10 9b       	mov	r11,r8
800019ee:	ee fc ff f4 	ld.w	r12,r7[-12]
800019f2:	f0 1f 00 38 	mcall	80001ad0 <usartWriteTcb+0x318>
800019f6:	4c 7b       	lddpc	r11,80001b10 <usartWriteTcb+0x358>
800019f8:	ee fc ff f4 	ld.w	r12,r7[-12]
800019fc:	f0 1f 00 31 	mcall	80001ac0 <usartWriteTcb+0x308>
80001a00:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001a04:	71 08       	ld.w	r8,r8[0x40]
80001a06:	10 9b       	mov	r11,r8
80001a08:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a0c:	f0 1f 00 31 	mcall	80001ad0 <usartWriteTcb+0x318>
80001a10:	4c 1b       	lddpc	r11,80001b14 <usartWriteTcb+0x35c>
80001a12:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a16:	f0 1f 00 2b 	mcall	80001ac0 <usartWriteTcb+0x308>
80001a1a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001a1e:	70 f8       	ld.w	r8,r8[0x3c]
80001a20:	10 9b       	mov	r11,r8
80001a22:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a26:	f0 1f 00 2b 	mcall	80001ad0 <usartWriteTcb+0x318>
80001a2a:	4b cb       	lddpc	r11,80001b18 <usartWriteTcb+0x360>
80001a2c:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a30:	f0 1f 00 24 	mcall	80001ac0 <usartWriteTcb+0x308>
80001a34:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001a38:	70 e8       	ld.w	r8,r8[0x38]
80001a3a:	10 9b       	mov	r11,r8
80001a3c:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a40:	f0 1f 00 24 	mcall	80001ad0 <usartWriteTcb+0x318>
80001a44:	4b 6b       	lddpc	r11,80001b1c <usartWriteTcb+0x364>
80001a46:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a4a:	f0 1f 00 1e 	mcall	80001ac0 <usartWriteTcb+0x308>
80001a4e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001a52:	70 d8       	ld.w	r8,r8[0x34]
80001a54:	10 9b       	mov	r11,r8
80001a56:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a5a:	f0 1f 00 1e 	mcall	80001ad0 <usartWriteTcb+0x318>
80001a5e:	4b 1b       	lddpc	r11,80001b20 <usartWriteTcb+0x368>
80001a60:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a64:	f0 1f 00 17 	mcall	80001ac0 <usartWriteTcb+0x308>
80001a68:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001a6c:	70 c8       	ld.w	r8,r8[0x30]
80001a6e:	10 9b       	mov	r11,r8
80001a70:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a74:	f0 1f 00 17 	mcall	80001ad0 <usartWriteTcb+0x318>
80001a78:	4a bb       	lddpc	r11,80001b24 <usartWriteTcb+0x36c>
80001a7a:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a7e:	f0 1f 00 11 	mcall	80001ac0 <usartWriteTcb+0x308>
80001a82:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001a86:	70 b8       	ld.w	r8,r8[0x2c]
80001a88:	10 9b       	mov	r11,r8
80001a8a:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a8e:	f0 1f 00 11 	mcall	80001ad0 <usartWriteTcb+0x318>
80001a92:	4a 6b       	lddpc	r11,80001b28 <usartWriteTcb+0x370>
80001a94:	ee fc ff f4 	ld.w	r12,r7[-12]
80001a98:	f0 1f 00 0a 	mcall	80001ac0 <usartWriteTcb+0x308>
80001a9c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001aa0:	70 a8       	ld.w	r8,r8[0x28]
80001aa2:	10 9b       	mov	r11,r8
80001aa4:	ee fc ff f4 	ld.w	r12,r7[-12]
80001aa8:	f0 1f 00 0a 	mcall	80001ad0 <usartWriteTcb+0x318>
80001aac:	48 7b       	lddpc	r11,80001ac8 <usartWriteTcb+0x310>
80001aae:	ee fc ff f4 	ld.w	r12,r7[-12]
80001ab2:	f0 1f 00 04 	mcall	80001ac0 <usartWriteTcb+0x308>
80001ab6:	2f cd       	sub	sp,-16
80001ab8:	e3 cd 80 80 	ldm	sp++,r7,pc
80001abc:	80 00       	ld.sh	r0,r0[0x0]
80001abe:	2a 24       	sub	r4,-94
80001ac0:	80 00       	ld.sh	r0,r0[0x0]
80001ac2:	16 b4       	st.h	r11++,r4
80001ac4:	80 00       	ld.sh	r0,r0[0x0]
80001ac6:	16 5c       	eor	r12,r11
80001ac8:	80 00       	ld.sh	r0,r0[0x0]
80001aca:	2a 30       	sub	r0,-93
80001acc:	80 00       	ld.sh	r0,r0[0x0]
80001ace:	2a 34       	sub	r4,-93
80001ad0:	80 00       	ld.sh	r0,r0[0x0]
80001ad2:	17 08       	ld.w	r8,r11++
80001ad4:	80 00       	ld.sh	r0,r0[0x0]
80001ad6:	2a 40       	sub	r0,-92
80001ad8:	80 00       	ld.sh	r0,r0[0x0]
80001ada:	2a 50       	sub	r0,-91
80001adc:	80 00       	ld.sh	r0,r0[0x0]
80001ade:	2a 60       	sub	r0,-90
80001ae0:	80 00       	ld.sh	r0,r0[0x0]
80001ae2:	2a 70       	sub	r0,-89
80001ae4:	80 00       	ld.sh	r0,r0[0x0]
80001ae6:	2a 80       	sub	r0,-88
80001ae8:	80 00       	ld.sh	r0,r0[0x0]
80001aea:	2a 90       	sub	r0,-87
80001aec:	80 00       	ld.sh	r0,r0[0x0]
80001aee:	2a a0       	sub	r0,-86
80001af0:	80 00       	ld.sh	r0,r0[0x0]
80001af2:	2a b0       	sub	r0,-85
80001af4:	80 00       	ld.sh	r0,r0[0x0]
80001af6:	2a b8       	sub	r8,-85
80001af8:	80 00       	ld.sh	r0,r0[0x0]
80001afa:	2a c0       	sub	r0,-84
80001afc:	80 00       	ld.sh	r0,r0[0x0]
80001afe:	2a c8       	sub	r8,-84
80001b00:	80 00       	ld.sh	r0,r0[0x0]
80001b02:	2a d0       	sub	r0,-83
80001b04:	80 00       	ld.sh	r0,r0[0x0]
80001b06:	2a d8       	sub	r8,-83
80001b08:	80 00       	ld.sh	r0,r0[0x0]
80001b0a:	2a e0       	sub	r0,-82
80001b0c:	80 00       	ld.sh	r0,r0[0x0]
80001b0e:	2a e8       	sub	r8,-82
80001b10:	80 00       	ld.sh	r0,r0[0x0]
80001b12:	2a f0       	sub	r0,-81
80001b14:	80 00       	ld.sh	r0,r0[0x0]
80001b16:	2a f8       	sub	r8,-81
80001b18:	80 00       	ld.sh	r0,r0[0x0]
80001b1a:	2b 00       	sub	r0,-80
80001b1c:	80 00       	ld.sh	r0,r0[0x0]
80001b1e:	2b 08       	sub	r8,-80
80001b20:	80 00       	ld.sh	r0,r0[0x0]
80001b22:	2b 10       	sub	r0,-79
80001b24:	80 00       	ld.sh	r0,r0[0x0]
80001b26:	2b 18       	sub	r8,-79
80001b28:	80 00       	ld.sh	r0,r0[0x0]
80001b2a:	2b 20       	sub	r0,-78

80001b2c <timerInit>:
80001b2c:	d5 01       	pushm	r11,lr
80001b2e:	d2 01       	pushm	r12
80001b30:	f0 1f 00 28 	mcall	80001bd0 <timerClearInterrupt+0x10>
80001b34:	f0 1f 00 28 	mcall	80001bd4 <timerClearInterrupt+0x14>
80001b38:	e0 6c 38 00 	mov	r12,14336
80001b3c:	ea 1c ff ff 	orh	r12,0xffff
80001b40:	e0 6b c0 00 	mov	r11,49152
80001b44:	ea 1b 00 00 	orh	r11,0x0
80001b48:	99 1b       	st.w	r12[0x4],r11
80001b4a:	30 1b       	mov	r11,1
80001b4c:	a5 6b       	lsl	r11,0x4
80001b4e:	99 9b       	st.w	r12[0x24],r11
80001b50:	d2 02       	popm	r12
80001b52:	f0 1f 00 22 	mcall	80001bd8 <timerClearInterrupt+0x18>
80001b56:	d5 02       	popm	r11,lr
80001b58:	1c 9f       	mov	pc,lr

80001b5a <timerReset>:
80001b5a:	d3 01       	pushm	r11-r12
80001b5c:	e0 6c 38 00 	mov	r12,14336
80001b60:	ea 1c ff ff 	orh	r12,0xffff
80001b64:	30 5b       	mov	r11,5
80001b66:	99 0b       	st.w	r12[0x0],r11
80001b68:	e0 6b 00 08 	mov	r11,8
80001b6c:	ea 1b 00 00 	orh	r11,0x0
80001b70:	76 0b       	ld.w	r11,r11[0x0]
80001b72:	99 7b       	st.w	r12[0x1c],r11
80001b74:	d3 02       	popm	r11-r12
80001b76:	1c 9f       	mov	pc,lr

80001b78 <timerStop>:
80001b78:	d3 01       	pushm	r11-r12
80001b7a:	e0 6c 38 00 	mov	r12,14336
80001b7e:	ea 1c ff ff 	orh	r12,0xffff
80001b82:	30 2b       	mov	r11,2
80001b84:	99 0b       	st.w	r12[0x0],r11
80001b86:	d3 02       	popm	r11-r12
80001b88:	1c 9f       	mov	pc,lr

80001b8a <timerRCSet>:
80001b8a:	d3 01       	pushm	r11-r12
80001b8c:	49 4b       	lddpc	r11,80001bdc <timerClearInterrupt+0x1c>
80001b8e:	97 0c       	st.w	r11[0x0],r12
80001b90:	e0 6c 38 00 	mov	r12,14336
80001b94:	ea 1c ff ff 	orh	r12,0xffff
80001b98:	76 0b       	ld.w	r11,r11[0x0]
80001b9a:	99 7b       	st.w	r12[0x1c],r11
80001b9c:	d3 02       	popm	r11-r12
80001b9e:	1c 9f       	mov	pc,lr

80001ba0 <timerPrescaleSet>:
80001ba0:	d3 81       	pushm	r10-r12
80001ba2:	49 0b       	lddpc	r11,80001be0 <timerClearInterrupt+0x20>
80001ba4:	97 0c       	st.w	r11[0x0],r12
80001ba6:	e0 6c 38 00 	mov	r12,14336
80001baa:	ea 1c ff ff 	orh	r12,0xffff
80001bae:	78 1a       	ld.w	r10,r12[0x4]
80001bb0:	3f 8b       	mov	r11,-8
80001bb2:	16 6a       	and	r10,r11
80001bb4:	48 bb       	lddpc	r11,80001be0 <timerClearInterrupt+0x20>
80001bb6:	76 0b       	ld.w	r11,r11[0x0]
80001bb8:	14 4b       	or	r11,r10
80001bba:	99 1b       	st.w	r12[0x4],r11
80001bbc:	d3 82       	popm	r10-r12
80001bbe:	1c 9f       	mov	pc,lr

80001bc0 <timerClearInterrupt>:
80001bc0:	d2 01       	pushm	r12
80001bc2:	e0 6c 38 00 	mov	r12,14336
80001bc6:	ea 1c ff ff 	orh	r12,0xffff
80001bca:	78 8c       	ld.w	r12,r12[0x20]
80001bcc:	d2 02       	popm	r12
80001bce:	1c 9f       	mov	pc,lr
80001bd0:	80 00       	ld.sh	r0,r0[0x0]
80001bd2:	27 66       	sub	r6,118
80001bd4:	80 00       	ld.sh	r0,r0[0x0]
80001bd6:	1b c0       	ld.ub	r0,sp[0x4]
80001bd8:	80 00       	ld.sh	r0,r0[0x0]
80001bda:	0f c4       	ld.ub	r4,r7[0x4]
80001bdc:	00 00       	add	r0,r0
80001bde:	00 08       	add	r8,r0
80001be0:	00 00       	add	r0,r0
80001be2:	00 0c       	add	r12,r0

80001be4 <_stext>:
80001be4:	49 7d       	lddpc	sp,80001c40 <udata_end+0x4>
80001be6:	49 80       	lddpc	r0,80001c44 <udata_end+0x8>
80001be8:	1a d0       	st.w	--sp,r0
80001bea:	e5 cd 20 00 	ldmts	sp,sp
80001bee:	1b 00       	ld.w	r0,sp++
80001bf0:	49 60       	lddpc	r0,80001c48 <udata_end+0xc>
80001bf2:	e3 b0 00 01 	mtsr	0x4,r0
80001bf6:	d5 53       	csrf	0x15
80001bf8:	e0 6c 0c 00 	mov	r12,3072
80001bfc:	ea 1c ff ff 	orh	r12,0xffff
80001c00:	e0 6b 01 07 	mov	r11,263
80001c04:	99 ab       	st.w	r12[0x28],r11
80001c06:	30 4b       	mov	r11,4
80001c08:	99 0b       	st.w	r12[0x0],r11
80001c0a:	e0 6a 00 80 	mov	r10,128

80001c0e <xw8>:
80001c0e:	79 5b       	ld.w	r11,r12[0x54]
80001c10:	14 7b       	tst	r11,r10
80001c12:	cf e0       	breq	80001c0e <xw8>
80001c14:	30 5b       	mov	r11,5
80001c16:	99 0b       	st.w	r12[0x0],r11

80001c18 <idata_>:
80001c18:	48 d0       	lddpc	r0,80001c4c <udata_end+0x10>
80001c1a:	48 e1       	lddpc	r1,80001c50 <udata_end+0x14>
80001c1c:	02 30       	cp.w	r0,r1
80001c1e:	c0 62       	brcc	80001c2a <idata_end>
80001c20:	48 d2       	lddpc	r2,80001c54 <udata_end+0x18>

80001c22 <idata_loop>:
80001c22:	05 04       	ld.w	r4,r2++
80001c24:	00 a4       	st.w	r0++,r4
80001c26:	02 30       	cp.w	r0,r1
80001c28:	cf d3       	brcs	80001c22 <idata_loop>

80001c2a <idata_end>:
80001c2a:	48 c0       	lddpc	r0,80001c58 <udata_end+0x1c>
80001c2c:	48 c1       	lddpc	r1,80001c5c <udata_end+0x20>
80001c2e:	02 30       	cp.w	r0,r1
80001c30:	c0 62       	brcc	80001c3c <udata_end>
80001c32:	30 02       	mov	r2,0
80001c34:	30 03       	mov	r3,0

80001c36 <udata_loop>:
80001c36:	00 a2       	st.w	r0++,r2
80001c38:	02 30       	cp.w	r0,r1
80001c3a:	cf e3       	brcs	80001c36 <udata_loop>

80001c3c <udata_end>:
80001c3c:	48 9f       	lddpc	pc,80001c60 <udata_end+0x24>
80001c3e:	00 00       	add	r0,r0
80001c40:	00 01       	add	r1,r0
80001c42:	00 00       	add	r0,r0
80001c44:	00 00       	add	r0,r0
80001c46:	f0 00       	*unknown*
80001c48:	80 00       	ld.sh	r0,r0[0x0]
80001c4a:	26 00       	sub	r0,96
80001c4c:	00 00       	add	r0,r0
80001c4e:	00 08       	add	r8,r0
80001c50:	00 00       	add	r0,r0
80001c52:	05 18       	ld.sh	r8,r2++
80001c54:	80 00       	ld.sh	r0,r0[0x0]
80001c56:	2b 90       	sub	r0,-71
80001c58:	00 00       	add	r0,r0
80001c5a:	05 18       	ld.sh	r8,r2++
80001c5c:	00 00       	add	r0,r0
80001c5e:	07 b0       	ld.ub	r0,r3[0x3]
80001c60:	80 00       	ld.sh	r0,r0[0x0]
80001c62:	06 3c       	cp.w	r12,r3

80001c64 <calloc>:
80001c64:	d4 01       	pushm	lr
80001c66:	48 48       	lddpc	r8,80001c74 <calloc+0x10>
80001c68:	16 9a       	mov	r10,r11
80001c6a:	18 9b       	mov	r11,r12
80001c6c:	70 0c       	ld.w	r12,r8[0x0]
80001c6e:	f0 1f 00 03 	mcall	80001c78 <calloc+0x14>
80001c72:	d8 02       	popm	pc
80001c74:	00 00       	add	r0,r0
80001c76:	01 00       	ld.w	r0,r0++
80001c78:	80 00       	ld.sh	r0,r0[0x0]
80001c7a:	1c 7c       	tst	r12,lr

80001c7c <_calloc_r>:
80001c7c:	d4 21       	pushm	r4-r7,lr
80001c7e:	f4 0b 02 4b 	mul	r11,r10,r11
80001c82:	f0 1f 00 15 	mcall	80001cd4 <_calloc_r+0x58>
80001c86:	18 97       	mov	r7,r12
80001c88:	c2 30       	breq	80001cce <_calloc_r+0x52>
80001c8a:	f8 fa ff fc 	ld.w	r10,r12[-4]
80001c8e:	e0 1a ff fc 	andl	r10,0xfffc
80001c92:	20 4a       	sub	r10,4
80001c94:	e0 4a 00 24 	cp.w	r10,36
80001c98:	e0 8b 00 18 	brhi	80001cc8 <_calloc_r+0x4c>
80001c9c:	18 98       	mov	r8,r12
80001c9e:	59 3a       	cp.w	r10,19
80001ca0:	e0 88 00 0f 	brls	80001cbe <_calloc_r+0x42>
80001ca4:	30 09       	mov	r9,0
80001ca6:	10 a9       	st.w	r8++,r9
80001ca8:	10 a9       	st.w	r8++,r9
80001caa:	59 ba       	cp.w	r10,27
80001cac:	e0 88 00 09 	brls	80001cbe <_calloc_r+0x42>
80001cb0:	10 a9       	st.w	r8++,r9
80001cb2:	10 a9       	st.w	r8++,r9
80001cb4:	e0 4a 00 24 	cp.w	r10,36
80001cb8:	c0 31       	brne	80001cbe <_calloc_r+0x42>
80001cba:	10 a9       	st.w	r8++,r9
80001cbc:	10 a9       	st.w	r8++,r9
80001cbe:	30 09       	mov	r9,0
80001cc0:	10 a9       	st.w	r8++,r9
80001cc2:	91 19       	st.w	r8[0x4],r9
80001cc4:	91 09       	st.w	r8[0x0],r9
80001cc6:	c0 48       	rjmp	80001cce <_calloc_r+0x52>
80001cc8:	30 0b       	mov	r11,0
80001cca:	f0 1f 00 04 	mcall	80001cd8 <_calloc_r+0x5c>
80001cce:	0e 9c       	mov	r12,r7
80001cd0:	d8 22       	popm	r4-r7,pc
80001cd2:	00 00       	add	r0,r0
80001cd4:	80 00       	ld.sh	r0,r0[0x0]
80001cd6:	1c f4       	st.b	--lr,r4
80001cd8:	80 00       	ld.sh	r0,r0[0x0]
80001cda:	21 44       	sub	r4,20

80001cdc <malloc>:
80001cdc:	d4 01       	pushm	lr
80001cde:	48 48       	lddpc	r8,80001cec <malloc+0x10>
80001ce0:	18 9b       	mov	r11,r12
80001ce2:	70 0c       	ld.w	r12,r8[0x0]
80001ce4:	f0 1f 00 03 	mcall	80001cf0 <malloc+0x14>
80001ce8:	d8 02       	popm	pc
80001cea:	00 00       	add	r0,r0
80001cec:	00 00       	add	r0,r0
80001cee:	01 00       	ld.w	r0,r0++
80001cf0:	80 00       	ld.sh	r0,r0[0x0]
80001cf2:	1c f4       	st.b	--lr,r4

80001cf4 <_malloc_r>:
80001cf4:	d4 31       	pushm	r0-r7,lr
80001cf6:	f6 c8 ff f5 	sub	r8,r11,-11
80001cfa:	18 95       	mov	r5,r12
80001cfc:	10 97       	mov	r7,r8
80001cfe:	e0 17 ff f8 	andl	r7,0xfff8
80001d02:	59 68       	cp.w	r8,22
80001d04:	f9 b7 08 10 	movls	r7,16
80001d08:	16 37       	cp.w	r7,r11
80001d0a:	5f 38       	srlo	r8
80001d0c:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001d10:	c0 50       	breq	80001d1a <_malloc_r+0x26>
80001d12:	30 c8       	mov	r8,12
80001d14:	99 38       	st.w	r12[0xc],r8
80001d16:	e0 8f 01 f3 	bral	800020fc <_malloc_r+0x408>
80001d1a:	f0 1f 00 50 	mcall	80001e58 <_malloc_r+0x164>
80001d1e:	e0 47 01 f7 	cp.w	r7,503
80001d22:	e0 8b 00 1c 	brhi	80001d5a <_malloc_r+0x66>
80001d26:	ee 03 16 03 	lsr	r3,r7,0x3
80001d2a:	4c d8       	lddpc	r8,80001e5c <_malloc_r+0x168>
80001d2c:	f0 03 00 38 	add	r8,r8,r3<<0x3
80001d30:	70 36       	ld.w	r6,r8[0xc]
80001d32:	10 36       	cp.w	r6,r8
80001d34:	c0 61       	brne	80001d40 <_malloc_r+0x4c>
80001d36:	ec c8 ff f8 	sub	r8,r6,-8
80001d3a:	70 36       	ld.w	r6,r8[0xc]
80001d3c:	10 36       	cp.w	r6,r8
80001d3e:	c0 c0       	breq	80001d56 <_malloc_r+0x62>
80001d40:	6c 18       	ld.w	r8,r6[0x4]
80001d42:	e0 18 ff fc 	andl	r8,0xfffc
80001d46:	6c 3a       	ld.w	r10,r6[0xc]
80001d48:	ec 08 00 09 	add	r9,r6,r8
80001d4c:	0a 9c       	mov	r12,r5
80001d4e:	6c 28       	ld.w	r8,r6[0x8]
80001d50:	95 28       	st.w	r10[0x8],r8
80001d52:	91 3a       	st.w	r8[0xc],r10
80001d54:	c4 68       	rjmp	80001de0 <_malloc_r+0xec>
80001d56:	2f e3       	sub	r3,-2
80001d58:	c4 c8       	rjmp	80001df0 <_malloc_r+0xfc>
80001d5a:	ee 03 16 09 	lsr	r3,r7,0x9
80001d5e:	c0 41       	brne	80001d66 <_malloc_r+0x72>
80001d60:	ee 03 16 03 	lsr	r3,r7,0x3
80001d64:	c2 68       	rjmp	80001db0 <_malloc_r+0xbc>
80001d66:	58 43       	cp.w	r3,4
80001d68:	e0 8b 00 06 	brhi	80001d74 <_malloc_r+0x80>
80001d6c:	ee 03 16 06 	lsr	r3,r7,0x6
80001d70:	2c 83       	sub	r3,-56
80001d72:	c1 f8       	rjmp	80001db0 <_malloc_r+0xbc>
80001d74:	59 43       	cp.w	r3,20
80001d76:	e0 8b 00 04 	brhi	80001d7e <_malloc_r+0x8a>
80001d7a:	2a 53       	sub	r3,-91
80001d7c:	c1 a8       	rjmp	80001db0 <_malloc_r+0xbc>
80001d7e:	e0 43 00 54 	cp.w	r3,84
80001d82:	e0 8b 00 06 	brhi	80001d8e <_malloc_r+0x9a>
80001d86:	ee 03 16 0c 	lsr	r3,r7,0xc
80001d8a:	29 23       	sub	r3,-110
80001d8c:	c1 28       	rjmp	80001db0 <_malloc_r+0xbc>
80001d8e:	e0 43 01 54 	cp.w	r3,340
80001d92:	e0 8b 00 06 	brhi	80001d9e <_malloc_r+0xaa>
80001d96:	ee 03 16 0f 	lsr	r3,r7,0xf
80001d9a:	28 93       	sub	r3,-119
80001d9c:	c0 a8       	rjmp	80001db0 <_malloc_r+0xbc>
80001d9e:	e0 43 05 54 	cp.w	r3,1364
80001da2:	e0 88 00 04 	brls	80001daa <_malloc_r+0xb6>
80001da6:	37 e3       	mov	r3,126
80001da8:	c0 48       	rjmp	80001db0 <_malloc_r+0xbc>
80001daa:	ee 03 16 12 	lsr	r3,r7,0x12
80001dae:	28 43       	sub	r3,-124
80001db0:	4a ba       	lddpc	r10,80001e5c <_malloc_r+0x168>
80001db2:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80001db6:	74 36       	ld.w	r6,r10[0xc]
80001db8:	c1 98       	rjmp	80001dea <_malloc_r+0xf6>
80001dba:	6c 19       	ld.w	r9,r6[0x4]
80001dbc:	e0 19 ff fc 	andl	r9,0xfffc
80001dc0:	f2 07 01 0b 	sub	r11,r9,r7
80001dc4:	58 fb       	cp.w	r11,15
80001dc6:	e0 8a 00 04 	brle	80001dce <_malloc_r+0xda>
80001dca:	20 13       	sub	r3,1
80001dcc:	c1 18       	rjmp	80001dee <_malloc_r+0xfa>
80001dce:	6c 38       	ld.w	r8,r6[0xc]
80001dd0:	58 0b       	cp.w	r11,0
80001dd2:	c0 b5       	brlt	80001de8 <_malloc_r+0xf4>
80001dd4:	6c 2a       	ld.w	r10,r6[0x8]
80001dd6:	ec 09 00 09 	add	r9,r6,r9
80001dda:	0a 9c       	mov	r12,r5
80001ddc:	91 2a       	st.w	r8[0x8],r10
80001dde:	95 38       	st.w	r10[0xc],r8
80001de0:	72 18       	ld.w	r8,r9[0x4]
80001de2:	a1 a8       	sbr	r8,0x0
80001de4:	93 18       	st.w	r9[0x4],r8
80001de6:	cb c8       	rjmp	80001f5e <_malloc_r+0x26a>
80001de8:	10 96       	mov	r6,r8
80001dea:	14 36       	cp.w	r6,r10
80001dec:	ce 71       	brne	80001dba <_malloc_r+0xc6>
80001dee:	2f f3       	sub	r3,-1
80001df0:	49 ba       	lddpc	r10,80001e5c <_malloc_r+0x168>
80001df2:	f4 cc ff f8 	sub	r12,r10,-8
80001df6:	78 26       	ld.w	r6,r12[0x8]
80001df8:	18 36       	cp.w	r6,r12
80001dfa:	c6 e0       	breq	80001ed6 <_malloc_r+0x1e2>
80001dfc:	6c 19       	ld.w	r9,r6[0x4]
80001dfe:	e0 19 ff fc 	andl	r9,0xfffc
80001e02:	f2 07 01 08 	sub	r8,r9,r7
80001e06:	58 f8       	cp.w	r8,15
80001e08:	e0 89 00 90 	brgt	80001f28 <_malloc_r+0x234>
80001e0c:	99 3c       	st.w	r12[0xc],r12
80001e0e:	99 2c       	st.w	r12[0x8],r12
80001e10:	58 08       	cp.w	r8,0
80001e12:	c0 55       	brlt	80001e1c <_malloc_r+0x128>
80001e14:	ec 09 00 09 	add	r9,r6,r9
80001e18:	0a 9c       	mov	r12,r5
80001e1a:	ce 3b       	rjmp	80001de0 <_malloc_r+0xec>
80001e1c:	e0 49 01 ff 	cp.w	r9,511
80001e20:	e0 8b 00 13 	brhi	80001e46 <_malloc_r+0x152>
80001e24:	a3 99       	lsr	r9,0x3
80001e26:	f4 09 00 38 	add	r8,r10,r9<<0x3
80001e2a:	70 2b       	ld.w	r11,r8[0x8]
80001e2c:	8d 38       	st.w	r6[0xc],r8
80001e2e:	8d 2b       	st.w	r6[0x8],r11
80001e30:	97 36       	st.w	r11[0xc],r6
80001e32:	91 26       	st.w	r8[0x8],r6
80001e34:	a3 49       	asr	r9,0x2
80001e36:	74 18       	ld.w	r8,r10[0x4]
80001e38:	30 1b       	mov	r11,1
80001e3a:	f6 09 09 49 	lsl	r9,r11,r9
80001e3e:	f1 e9 10 09 	or	r9,r8,r9
80001e42:	95 19       	st.w	r10[0x4],r9
80001e44:	c4 98       	rjmp	80001ed6 <_malloc_r+0x1e2>
80001e46:	f2 0a 16 09 	lsr	r10,r9,0x9
80001e4a:	58 4a       	cp.w	r10,4
80001e4c:	e0 8b 00 0a 	brhi	80001e60 <_malloc_r+0x16c>
80001e50:	f2 0a 16 06 	lsr	r10,r9,0x6
80001e54:	2c 8a       	sub	r10,-56
80001e56:	c2 38       	rjmp	80001e9c <_malloc_r+0x1a8>
80001e58:	80 00       	ld.sh	r0,r0[0x0]
80001e5a:	21 52       	sub	r2,21
80001e5c:	00 00       	add	r0,r0
80001e5e:	01 04       	ld.w	r4,r0++
80001e60:	59 4a       	cp.w	r10,20
80001e62:	e0 8b 00 04 	brhi	80001e6a <_malloc_r+0x176>
80001e66:	2a 5a       	sub	r10,-91
80001e68:	c1 a8       	rjmp	80001e9c <_malloc_r+0x1a8>
80001e6a:	e0 4a 00 54 	cp.w	r10,84
80001e6e:	e0 8b 00 06 	brhi	80001e7a <_malloc_r+0x186>
80001e72:	f2 0a 16 0c 	lsr	r10,r9,0xc
80001e76:	29 2a       	sub	r10,-110
80001e78:	c1 28       	rjmp	80001e9c <_malloc_r+0x1a8>
80001e7a:	e0 4a 01 54 	cp.w	r10,340
80001e7e:	e0 8b 00 06 	brhi	80001e8a <_malloc_r+0x196>
80001e82:	f2 0a 16 0f 	lsr	r10,r9,0xf
80001e86:	28 9a       	sub	r10,-119
80001e88:	c0 a8       	rjmp	80001e9c <_malloc_r+0x1a8>
80001e8a:	e0 4a 05 54 	cp.w	r10,1364
80001e8e:	e0 88 00 04 	brls	80001e96 <_malloc_r+0x1a2>
80001e92:	37 ea       	mov	r10,126
80001e94:	c0 48       	rjmp	80001e9c <_malloc_r+0x1a8>
80001e96:	f2 0a 16 12 	lsr	r10,r9,0x12
80001e9a:	28 4a       	sub	r10,-124
80001e9c:	4c 8b       	lddpc	r11,80001fbc <_malloc_r+0x2c8>
80001e9e:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80001ea2:	68 28       	ld.w	r8,r4[0x8]
80001ea4:	08 38       	cp.w	r8,r4
80001ea6:	c0 e1       	brne	80001ec2 <_malloc_r+0x1ce>
80001ea8:	76 19       	ld.w	r9,r11[0x4]
80001eaa:	a3 4a       	asr	r10,0x2
80001eac:	30 1e       	mov	lr,1
80001eae:	fc 0a 09 4a 	lsl	r10,lr,r10
80001eb2:	f3 ea 10 0a 	or	r10,r9,r10
80001eb6:	10 99       	mov	r9,r8
80001eb8:	97 1a       	st.w	r11[0x4],r10
80001eba:	c0 a8       	rjmp	80001ece <_malloc_r+0x1da>
80001ebc:	70 28       	ld.w	r8,r8[0x8]
80001ebe:	08 38       	cp.w	r8,r4
80001ec0:	c0 60       	breq	80001ecc <_malloc_r+0x1d8>
80001ec2:	70 1a       	ld.w	r10,r8[0x4]
80001ec4:	e0 1a ff fc 	andl	r10,0xfffc
80001ec8:	14 39       	cp.w	r9,r10
80001eca:	cf 93       	brcs	80001ebc <_malloc_r+0x1c8>
80001ecc:	70 39       	ld.w	r9,r8[0xc]
80001ece:	8d 39       	st.w	r6[0xc],r9
80001ed0:	8d 28       	st.w	r6[0x8],r8
80001ed2:	91 36       	st.w	r8[0xc],r6
80001ed4:	93 26       	st.w	r9[0x8],r6
80001ed6:	e6 08 14 02 	asr	r8,r3,0x2
80001eda:	30 1b       	mov	r11,1
80001edc:	4b 84       	lddpc	r4,80001fbc <_malloc_r+0x2c8>
80001ede:	f6 08 09 4b 	lsl	r11,r11,r8
80001ee2:	68 18       	ld.w	r8,r4[0x4]
80001ee4:	10 3b       	cp.w	r11,r8
80001ee6:	e0 8b 00 6f 	brhi	80001fc4 <_malloc_r+0x2d0>
80001eea:	f7 e8 00 09 	and	r9,r11,r8
80001eee:	c0 b1       	brne	80001f04 <_malloc_r+0x210>
80001ef0:	e0 13 ff fc 	andl	r3,0xfffc
80001ef4:	a1 7b       	lsl	r11,0x1
80001ef6:	2f c3       	sub	r3,-4
80001ef8:	c0 38       	rjmp	80001efe <_malloc_r+0x20a>
80001efa:	2f c3       	sub	r3,-4
80001efc:	a1 7b       	lsl	r11,0x1
80001efe:	f7 e8 00 09 	and	r9,r11,r8
80001f02:	cf c0       	breq	80001efa <_malloc_r+0x206>
80001f04:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001f08:	06 92       	mov	r2,r3
80001f0a:	1c 91       	mov	r1,lr
80001f0c:	62 36       	ld.w	r6,r1[0xc]
80001f0e:	c2 e8       	rjmp	80001f6a <_malloc_r+0x276>
80001f10:	6c 1a       	ld.w	r10,r6[0x4]
80001f12:	e0 1a ff fc 	andl	r10,0xfffc
80001f16:	f4 07 01 08 	sub	r8,r10,r7
80001f1a:	58 f8       	cp.w	r8,15
80001f1c:	e0 8a 00 15 	brle	80001f46 <_malloc_r+0x252>
80001f20:	6c 3a       	ld.w	r10,r6[0xc]
80001f22:	6c 29       	ld.w	r9,r6[0x8]
80001f24:	95 29       	st.w	r10[0x8],r9
80001f26:	93 3a       	st.w	r9[0xc],r10
80001f28:	0e 99       	mov	r9,r7
80001f2a:	ec 07 00 07 	add	r7,r6,r7
80001f2e:	a1 a9       	sbr	r9,0x0
80001f30:	99 37       	st.w	r12[0xc],r7
80001f32:	99 27       	st.w	r12[0x8],r7
80001f34:	8d 19       	st.w	r6[0x4],r9
80001f36:	ee 08 09 08 	st.w	r7[r8],r8
80001f3a:	8f 2c       	st.w	r7[0x8],r12
80001f3c:	8f 3c       	st.w	r7[0xc],r12
80001f3e:	a1 a8       	sbr	r8,0x0
80001f40:	0a 9c       	mov	r12,r5
80001f42:	8f 18       	st.w	r7[0x4],r8
80001f44:	c0 d8       	rjmp	80001f5e <_malloc_r+0x26a>
80001f46:	6c 39       	ld.w	r9,r6[0xc]
80001f48:	58 08       	cp.w	r8,0
80001f4a:	c0 f5       	brlt	80001f68 <_malloc_r+0x274>
80001f4c:	ec 0a 00 0a 	add	r10,r6,r10
80001f50:	74 18       	ld.w	r8,r10[0x4]
80001f52:	a1 a8       	sbr	r8,0x0
80001f54:	0a 9c       	mov	r12,r5
80001f56:	95 18       	st.w	r10[0x4],r8
80001f58:	6c 28       	ld.w	r8,r6[0x8]
80001f5a:	93 28       	st.w	r9[0x8],r8
80001f5c:	91 39       	st.w	r8[0xc],r9
80001f5e:	f0 1f 00 19 	mcall	80001fc0 <_malloc_r+0x2cc>
80001f62:	ec cc ff f8 	sub	r12,r6,-8
80001f66:	d8 32       	popm	r0-r7,pc
80001f68:	12 96       	mov	r6,r9
80001f6a:	02 36       	cp.w	r6,r1
80001f6c:	cd 21       	brne	80001f10 <_malloc_r+0x21c>
80001f6e:	2f f2       	sub	r2,-1
80001f70:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001f74:	c0 30       	breq	80001f7a <_malloc_r+0x286>
80001f76:	2f 81       	sub	r1,-8
80001f78:	cc ab       	rjmp	80001f0c <_malloc_r+0x218>
80001f7a:	1c 98       	mov	r8,lr
80001f7c:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001f80:	c0 81       	brne	80001f90 <_malloc_r+0x29c>
80001f82:	68 19       	ld.w	r9,r4[0x4]
80001f84:	f6 08 11 ff 	rsub	r8,r11,-1
80001f88:	f3 e8 00 08 	and	r8,r9,r8
80001f8c:	89 18       	st.w	r4[0x4],r8
80001f8e:	c0 78       	rjmp	80001f9c <_malloc_r+0x2a8>
80001f90:	f0 c9 00 08 	sub	r9,r8,8
80001f94:	20 13       	sub	r3,1
80001f96:	70 08       	ld.w	r8,r8[0x0]
80001f98:	12 38       	cp.w	r8,r9
80001f9a:	cf 10       	breq	80001f7c <_malloc_r+0x288>
80001f9c:	a1 7b       	lsl	r11,0x1
80001f9e:	68 18       	ld.w	r8,r4[0x4]
80001fa0:	10 3b       	cp.w	r11,r8
80001fa2:	e0 8b 00 11 	brhi	80001fc4 <_malloc_r+0x2d0>
80001fa6:	58 0b       	cp.w	r11,0
80001fa8:	c0 e0       	breq	80001fc4 <_malloc_r+0x2d0>
80001faa:	04 93       	mov	r3,r2
80001fac:	c0 38       	rjmp	80001fb2 <_malloc_r+0x2be>
80001fae:	2f c3       	sub	r3,-4
80001fb0:	a1 7b       	lsl	r11,0x1
80001fb2:	f7 e8 00 09 	and	r9,r11,r8
80001fb6:	ca 71       	brne	80001f04 <_malloc_r+0x210>
80001fb8:	cf bb       	rjmp	80001fae <_malloc_r+0x2ba>
80001fba:	00 00       	add	r0,r0
80001fbc:	00 00       	add	r0,r0
80001fbe:	01 04       	ld.w	r4,r0++
80001fc0:	80 00       	ld.sh	r0,r0[0x0]
80001fc2:	21 54       	sub	r4,21
80001fc4:	68 23       	ld.w	r3,r4[0x8]
80001fc6:	66 12       	ld.w	r2,r3[0x4]
80001fc8:	e0 12 ff fc 	andl	r2,0xfffc
80001fcc:	0e 32       	cp.w	r2,r7
80001fce:	5f 39       	srlo	r9
80001fd0:	e4 07 01 08 	sub	r8,r2,r7
80001fd4:	58 f8       	cp.w	r8,15
80001fd6:	5f aa       	srle	r10
80001fd8:	f5 e9 10 09 	or	r9,r10,r9
80001fdc:	e0 80 00 a2 	breq	80002120 <_malloc_r+0x42c>
80001fe0:	4c 88       	lddpc	r8,80002100 <_malloc_r+0x40c>
80001fe2:	70 01       	ld.w	r1,r8[0x0]
80001fe4:	4c 88       	lddpc	r8,80002104 <_malloc_r+0x410>
80001fe6:	2f 01       	sub	r1,-16
80001fe8:	70 08       	ld.w	r8,r8[0x0]
80001fea:	0e 01       	add	r1,r7
80001fec:	5b f8       	cp.w	r8,-1
80001fee:	c0 40       	breq	80001ff6 <_malloc_r+0x302>
80001ff0:	28 11       	sub	r1,-127
80001ff2:	e0 11 ff 80 	andl	r1,0xff80
80001ff6:	02 9b       	mov	r11,r1
80001ff8:	0a 9c       	mov	r12,r5
80001ffa:	f0 1f 00 44 	mcall	80002108 <_malloc_r+0x414>
80001ffe:	18 96       	mov	r6,r12
80002000:	5b fc       	cp.w	r12,-1
80002002:	c6 e0       	breq	800020de <_malloc_r+0x3ea>
80002004:	e6 02 00 08 	add	r8,r3,r2
80002008:	10 3c       	cp.w	r12,r8
8000200a:	c0 32       	brcc	80002010 <_malloc_r+0x31c>
8000200c:	08 33       	cp.w	r3,r4
8000200e:	c6 81       	brne	800020de <_malloc_r+0x3ea>
80002010:	4b fa       	lddpc	r10,8000210c <_malloc_r+0x418>
80002012:	74 09       	ld.w	r9,r10[0x0]
80002014:	e2 09 00 09 	add	r9,r1,r9
80002018:	95 09       	st.w	r10[0x0],r9
8000201a:	10 36       	cp.w	r6,r8
8000201c:	c0 a1       	brne	80002030 <_malloc_r+0x33c>
8000201e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80002022:	c0 71       	brne	80002030 <_malloc_r+0x33c>
80002024:	e2 02 00 02 	add	r2,r1,r2
80002028:	68 28       	ld.w	r8,r4[0x8]
8000202a:	a1 a2       	sbr	r2,0x0
8000202c:	91 12       	st.w	r8[0x4],r2
8000202e:	c4 c8       	rjmp	800020c6 <_malloc_r+0x3d2>
80002030:	4b 5a       	lddpc	r10,80002104 <_malloc_r+0x410>
80002032:	74 0b       	ld.w	r11,r10[0x0]
80002034:	5b fb       	cp.w	r11,-1
80002036:	c0 31       	brne	8000203c <_malloc_r+0x348>
80002038:	95 06       	st.w	r10[0x0],r6
8000203a:	c0 68       	rjmp	80002046 <_malloc_r+0x352>
8000203c:	ec 09 00 09 	add	r9,r6,r9
80002040:	4b 3a       	lddpc	r10,8000210c <_malloc_r+0x418>
80002042:	10 19       	sub	r9,r8
80002044:	95 09       	st.w	r10[0x0],r9
80002046:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000204a:	f0 09 11 08 	rsub	r9,r8,8
8000204e:	58 08       	cp.w	r8,0
80002050:	f2 08 17 10 	movne	r8,r9
80002054:	ed d8 e1 06 	addne	r6,r6,r8
80002058:	28 08       	sub	r8,-128
8000205a:	ec 01 00 01 	add	r1,r6,r1
8000205e:	0a 9c       	mov	r12,r5
80002060:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80002064:	f0 01 01 01 	sub	r1,r8,r1
80002068:	02 9b       	mov	r11,r1
8000206a:	f0 1f 00 28 	mcall	80002108 <_malloc_r+0x414>
8000206e:	4a 88       	lddpc	r8,8000210c <_malloc_r+0x418>
80002070:	5b fc       	cp.w	r12,-1
80002072:	ec 0c 17 00 	moveq	r12,r6
80002076:	f9 b1 00 00 	moveq	r1,0
8000207a:	70 09       	ld.w	r9,r8[0x0]
8000207c:	0c 1c       	sub	r12,r6
8000207e:	89 26       	st.w	r4[0x8],r6
80002080:	02 0c       	add	r12,r1
80002082:	12 01       	add	r1,r9
80002084:	a1 ac       	sbr	r12,0x0
80002086:	91 01       	st.w	r8[0x0],r1
80002088:	8d 1c       	st.w	r6[0x4],r12
8000208a:	08 33       	cp.w	r3,r4
8000208c:	c1 d0       	breq	800020c6 <_malloc_r+0x3d2>
8000208e:	58 f2       	cp.w	r2,15
80002090:	e0 8b 00 05 	brhi	8000209a <_malloc_r+0x3a6>
80002094:	30 18       	mov	r8,1
80002096:	8d 18       	st.w	r6[0x4],r8
80002098:	c2 38       	rjmp	800020de <_malloc_r+0x3ea>
8000209a:	30 59       	mov	r9,5
8000209c:	20 c2       	sub	r2,12
8000209e:	e0 12 ff f8 	andl	r2,0xfff8
800020a2:	e6 02 00 08 	add	r8,r3,r2
800020a6:	91 29       	st.w	r8[0x8],r9
800020a8:	91 19       	st.w	r8[0x4],r9
800020aa:	66 18       	ld.w	r8,r3[0x4]
800020ac:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800020b0:	e5 e8 10 08 	or	r8,r2,r8
800020b4:	87 18       	st.w	r3[0x4],r8
800020b6:	58 f2       	cp.w	r2,15
800020b8:	e0 88 00 07 	brls	800020c6 <_malloc_r+0x3d2>
800020bc:	e6 cb ff f8 	sub	r11,r3,-8
800020c0:	0a 9c       	mov	r12,r5
800020c2:	f0 1f 00 14 	mcall	80002110 <_malloc_r+0x41c>
800020c6:	49 49       	lddpc	r9,80002114 <_malloc_r+0x420>
800020c8:	72 0a       	ld.w	r10,r9[0x0]
800020ca:	49 18       	lddpc	r8,8000210c <_malloc_r+0x418>
800020cc:	70 08       	ld.w	r8,r8[0x0]
800020ce:	14 38       	cp.w	r8,r10
800020d0:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800020d4:	49 19       	lddpc	r9,80002118 <_malloc_r+0x424>
800020d6:	72 0a       	ld.w	r10,r9[0x0]
800020d8:	14 38       	cp.w	r8,r10
800020da:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800020de:	68 28       	ld.w	r8,r4[0x8]
800020e0:	70 18       	ld.w	r8,r8[0x4]
800020e2:	e0 18 ff fc 	andl	r8,0xfffc
800020e6:	0e 38       	cp.w	r8,r7
800020e8:	5f 39       	srlo	r9
800020ea:	0e 18       	sub	r8,r7
800020ec:	58 f8       	cp.w	r8,15
800020ee:	5f aa       	srle	r10
800020f0:	f5 e9 10 09 	or	r9,r10,r9
800020f4:	c1 60       	breq	80002120 <_malloc_r+0x42c>
800020f6:	0a 9c       	mov	r12,r5
800020f8:	f0 1f 00 09 	mcall	8000211c <_malloc_r+0x428>
800020fc:	d8 3a       	popm	r0-r7,pc,r12=0
800020fe:	00 00       	add	r0,r0
80002100:	00 00       	add	r0,r0
80002102:	06 30       	cp.w	r0,r3
80002104:	00 00       	add	r0,r0
80002106:	05 10       	ld.sh	r0,r2++
80002108:	80 00       	ld.sh	r0,r0[0x0]
8000210a:	21 58       	sub	r8,21
8000210c:	00 00       	add	r0,r0
8000210e:	06 34       	cp.w	r4,r3
80002110:	80 00       	ld.sh	r0,r0[0x0]
80002112:	22 74       	sub	r4,39
80002114:	00 00       	add	r0,r0
80002116:	06 2c       	rsub	r12,r3
80002118:	00 00       	add	r0,r0
8000211a:	06 28       	rsub	r8,r3
8000211c:	80 00       	ld.sh	r0,r0[0x0]
8000211e:	21 54       	sub	r4,21
80002120:	68 26       	ld.w	r6,r4[0x8]
80002122:	a1 a8       	sbr	r8,0x0
80002124:	0e 99       	mov	r9,r7
80002126:	a1 a9       	sbr	r9,0x0
80002128:	8d 19       	st.w	r6[0x4],r9
8000212a:	ec 07 00 07 	add	r7,r6,r7
8000212e:	0a 9c       	mov	r12,r5
80002130:	89 27       	st.w	r4[0x8],r7
80002132:	8f 18       	st.w	r7[0x4],r8
80002134:	f0 1f 00 03 	mcall	80002140 <_malloc_r+0x44c>
80002138:	ec cc ff f8 	sub	r12,r6,-8
8000213c:	d8 32       	popm	r0-r7,pc
8000213e:	00 00       	add	r0,r0
80002140:	80 00       	ld.sh	r0,r0[0x0]
80002142:	21 54       	sub	r4,21

80002144 <memset>:
80002144:	18 98       	mov	r8,r12
80002146:	c0 38       	rjmp	8000214c <memset+0x8>
80002148:	10 cb       	st.b	r8++,r11
8000214a:	20 1a       	sub	r10,1
8000214c:	58 0a       	cp.w	r10,0
8000214e:	cf d1       	brne	80002148 <memset+0x4>
80002150:	5e fc       	retal	r12

80002152 <__malloc_lock>:
80002152:	5e fc       	retal	r12

80002154 <__malloc_unlock>:
80002154:	5e fc       	retal	r12
80002156:	d7 03       	nop

80002158 <_sbrk_r>:
80002158:	d4 21       	pushm	r4-r7,lr
8000215a:	30 08       	mov	r8,0
8000215c:	18 97       	mov	r7,r12
8000215e:	48 76       	lddpc	r6,80002178 <_sbrk_r+0x20>
80002160:	16 9c       	mov	r12,r11
80002162:	8d 08       	st.w	r6[0x0],r8
80002164:	f0 1f 00 06 	mcall	8000217c <_sbrk_r+0x24>
80002168:	5b fc       	cp.w	r12,-1
8000216a:	c0 51       	brne	80002174 <_sbrk_r+0x1c>
8000216c:	6c 08       	ld.w	r8,r6[0x0]
8000216e:	58 08       	cp.w	r8,0
80002170:	ef f8 1a 03 	st.wne	r7[0xc],r8
80002174:	d8 22       	popm	r4-r7,pc
80002176:	00 00       	add	r0,r0
80002178:	00 00       	add	r0,r0
8000217a:	07 a8       	ld.ub	r8,r3[0x2]
8000217c:	80 00       	ld.sh	r0,r0[0x0]
8000217e:	21 80       	sub	r0,24

80002180 <_sbrk>:
80002180:	d4 01       	pushm	lr
80002182:	48 c8       	lddpc	r8,800021b0 <_sbrk+0x30>
80002184:	70 09       	ld.w	r9,r8[0x0]
80002186:	58 09       	cp.w	r9,0
80002188:	c0 31       	brne	8000218e <_sbrk+0xe>
8000218a:	48 b9       	lddpc	r9,800021b4 <_sbrk+0x34>
8000218c:	91 09       	st.w	r8[0x0],r9
8000218e:	48 99       	lddpc	r9,800021b0 <_sbrk+0x30>
80002190:	48 aa       	lddpc	r10,800021b8 <_sbrk+0x38>
80002192:	72 08       	ld.w	r8,r9[0x0]
80002194:	f0 0c 00 0c 	add	r12,r8,r12
80002198:	14 3c       	cp.w	r12,r10
8000219a:	e0 8b 00 04 	brhi	800021a2 <_sbrk+0x22>
8000219e:	93 0c       	st.w	r9[0x0],r12
800021a0:	c0 68       	rjmp	800021ac <_sbrk+0x2c>
800021a2:	f0 1f 00 07 	mcall	800021bc <_sbrk+0x3c>
800021a6:	30 c8       	mov	r8,12
800021a8:	99 08       	st.w	r12[0x0],r8
800021aa:	3f f8       	mov	r8,-1
800021ac:	10 9c       	mov	r12,r8
800021ae:	d8 02       	popm	pc
800021b0:	00 00       	add	r0,r0
800021b2:	06 5c       	eor	r12,r3
800021b4:	00 00       	add	r0,r0
800021b6:	07 b0       	ld.ub	r0,r3[0x3]
800021b8:	00 00       	add	r0,r0
800021ba:	e0 00       	*unknown*
800021bc:	80 00       	ld.sh	r0,r0[0x0]
800021be:	21 c0       	sub	r0,28

800021c0 <__errno>:
800021c0:	48 28       	lddpc	r8,800021c8 <__errno+0x8>
800021c2:	70 0c       	ld.w	r12,r8[0x0]
800021c4:	2f 4c       	sub	r12,-12
800021c6:	5e fc       	retal	r12
800021c8:	00 00       	add	r0,r0
800021ca:	01 00       	ld.w	r0,r0++

800021cc <_malloc_trim_r>:
800021cc:	d4 21       	pushm	r4-r7,lr
800021ce:	16 95       	mov	r5,r11
800021d0:	18 97       	mov	r7,r12
800021d2:	f0 1f 00 23 	mcall	8000225c <_malloc_trim_r+0x90>
800021d6:	4a 34       	lddpc	r4,80002260 <_malloc_trim_r+0x94>
800021d8:	68 28       	ld.w	r8,r4[0x8]
800021da:	70 16       	ld.w	r6,r8[0x4]
800021dc:	e0 16 ff fc 	andl	r6,0xfffc
800021e0:	ec c8 ff 91 	sub	r8,r6,-111
800021e4:	f0 05 01 05 	sub	r5,r8,r5
800021e8:	e0 15 ff 80 	andl	r5,0xff80
800021ec:	ea c5 00 80 	sub	r5,r5,128
800021f0:	e0 45 00 7f 	cp.w	r5,127
800021f4:	e0 8a 00 23 	brle	8000223a <_malloc_trim_r+0x6e>
800021f8:	30 0b       	mov	r11,0
800021fa:	0e 9c       	mov	r12,r7
800021fc:	f0 1f 00 1a 	mcall	80002264 <_malloc_trim_r+0x98>
80002200:	68 28       	ld.w	r8,r4[0x8]
80002202:	0c 08       	add	r8,r6
80002204:	10 3c       	cp.w	r12,r8
80002206:	c1 a1       	brne	8000223a <_malloc_trim_r+0x6e>
80002208:	ea 0b 11 00 	rsub	r11,r5,0
8000220c:	0e 9c       	mov	r12,r7
8000220e:	f0 1f 00 16 	mcall	80002264 <_malloc_trim_r+0x98>
80002212:	5b fc       	cp.w	r12,-1
80002214:	c1 71       	brne	80002242 <_malloc_trim_r+0x76>
80002216:	30 0b       	mov	r11,0
80002218:	0e 9c       	mov	r12,r7
8000221a:	f0 1f 00 13 	mcall	80002264 <_malloc_trim_r+0x98>
8000221e:	68 28       	ld.w	r8,r4[0x8]
80002220:	f8 08 01 09 	sub	r9,r12,r8
80002224:	58 f9       	cp.w	r9,15
80002226:	e0 8a 00 0a 	brle	8000223a <_malloc_trim_r+0x6e>
8000222a:	a1 a9       	sbr	r9,0x0
8000222c:	91 19       	st.w	r8[0x4],r9
8000222e:	48 f8       	lddpc	r8,80002268 <_malloc_trim_r+0x9c>
80002230:	70 09       	ld.w	r9,r8[0x0]
80002232:	48 f8       	lddpc	r8,8000226c <_malloc_trim_r+0xa0>
80002234:	f8 09 01 09 	sub	r9,r12,r9
80002238:	91 09       	st.w	r8[0x0],r9
8000223a:	0e 9c       	mov	r12,r7
8000223c:	f0 1f 00 0d 	mcall	80002270 <_malloc_trim_r+0xa4>
80002240:	d8 2a       	popm	r4-r7,pc,r12=0
80002242:	68 28       	ld.w	r8,r4[0x8]
80002244:	0a 16       	sub	r6,r5
80002246:	a1 a6       	sbr	r6,0x0
80002248:	91 16       	st.w	r8[0x4],r6
8000224a:	48 98       	lddpc	r8,8000226c <_malloc_trim_r+0xa0>
8000224c:	70 09       	ld.w	r9,r8[0x0]
8000224e:	0a 19       	sub	r9,r5
80002250:	0e 9c       	mov	r12,r7
80002252:	91 09       	st.w	r8[0x0],r9
80002254:	f0 1f 00 07 	mcall	80002270 <_malloc_trim_r+0xa4>
80002258:	da 2a       	popm	r4-r7,pc,r12=1
8000225a:	00 00       	add	r0,r0
8000225c:	80 00       	ld.sh	r0,r0[0x0]
8000225e:	21 52       	sub	r2,21
80002260:	00 00       	add	r0,r0
80002262:	01 04       	ld.w	r4,r0++
80002264:	80 00       	ld.sh	r0,r0[0x0]
80002266:	21 58       	sub	r8,21
80002268:	00 00       	add	r0,r0
8000226a:	05 10       	ld.sh	r0,r2++
8000226c:	00 00       	add	r0,r0
8000226e:	06 34       	cp.w	r4,r3
80002270:	80 00       	ld.sh	r0,r0[0x0]
80002272:	21 54       	sub	r4,21

80002274 <_free_r>:
80002274:	d4 21       	pushm	r4-r7,lr
80002276:	16 96       	mov	r6,r11
80002278:	18 97       	mov	r7,r12
8000227a:	58 0b       	cp.w	r11,0
8000227c:	e0 80 00 c8 	breq	8000240c <_free_r+0x198>
80002280:	f0 1f 00 4c 	mcall	800023b0 <_free_r+0x13c>
80002284:	20 86       	sub	r6,8
80002286:	4c ca       	lddpc	r10,800023b4 <_free_r+0x140>
80002288:	6c 18       	ld.w	r8,r6[0x4]
8000228a:	74 2e       	ld.w	lr,r10[0x8]
8000228c:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80002290:	a1 c8       	cbr	r8,0x0
80002292:	ec 08 00 09 	add	r9,r6,r8
80002296:	72 1b       	ld.w	r11,r9[0x4]
80002298:	e0 1b ff fc 	andl	r11,0xfffc
8000229c:	1c 39       	cp.w	r9,lr
8000229e:	c1 d1       	brne	800022d8 <_free_r+0x64>
800022a0:	f6 08 00 08 	add	r8,r11,r8
800022a4:	58 0c       	cp.w	r12,0
800022a6:	c0 81       	brne	800022b6 <_free_r+0x42>
800022a8:	6c 09       	ld.w	r9,r6[0x0]
800022aa:	12 16       	sub	r6,r9
800022ac:	12 08       	add	r8,r9
800022ae:	6c 3b       	ld.w	r11,r6[0xc]
800022b0:	6c 29       	ld.w	r9,r6[0x8]
800022b2:	97 29       	st.w	r11[0x8],r9
800022b4:	93 3b       	st.w	r9[0xc],r11
800022b6:	10 99       	mov	r9,r8
800022b8:	95 26       	st.w	r10[0x8],r6
800022ba:	a1 a9       	sbr	r9,0x0
800022bc:	8d 19       	st.w	r6[0x4],r9
800022be:	4b f9       	lddpc	r9,800023b8 <_free_r+0x144>
800022c0:	72 09       	ld.w	r9,r9[0x0]
800022c2:	12 38       	cp.w	r8,r9
800022c4:	c0 63       	brcs	800022d0 <_free_r+0x5c>
800022c6:	4b e8       	lddpc	r8,800023bc <_free_r+0x148>
800022c8:	0e 9c       	mov	r12,r7
800022ca:	70 0b       	ld.w	r11,r8[0x0]
800022cc:	f0 1f 00 3d 	mcall	800023c0 <_free_r+0x14c>
800022d0:	0e 9c       	mov	r12,r7
800022d2:	f0 1f 00 3d 	mcall	800023c4 <_free_r+0x150>
800022d6:	d8 22       	popm	r4-r7,pc
800022d8:	93 1b       	st.w	r9[0x4],r11
800022da:	58 0c       	cp.w	r12,0
800022dc:	c0 30       	breq	800022e2 <_free_r+0x6e>
800022de:	30 0c       	mov	r12,0
800022e0:	c1 08       	rjmp	80002300 <_free_r+0x8c>
800022e2:	6c 0e       	ld.w	lr,r6[0x0]
800022e4:	f4 c5 ff f8 	sub	r5,r10,-8
800022e8:	1c 16       	sub	r6,lr
800022ea:	1c 08       	add	r8,lr
800022ec:	6c 2e       	ld.w	lr,r6[0x8]
800022ee:	0a 3e       	cp.w	lr,r5
800022f0:	f9 bc 00 01 	moveq	r12,1
800022f4:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800022f8:	eb fe 1a 02 	st.wne	r5[0x8],lr
800022fc:	fd f5 1a 03 	st.wne	lr[0xc],r5
80002300:	f2 0b 00 0e 	add	lr,r9,r11
80002304:	7c 1e       	ld.w	lr,lr[0x4]
80002306:	ed be 00 00 	bld	lr,0x0
8000230a:	c1 30       	breq	80002330 <_free_r+0xbc>
8000230c:	16 08       	add	r8,r11
8000230e:	58 0c       	cp.w	r12,0
80002310:	c0 c1       	brne	80002328 <_free_r+0xb4>
80002312:	4a 9e       	lddpc	lr,800023b4 <_free_r+0x140>
80002314:	72 2b       	ld.w	r11,r9[0x8]
80002316:	2f 8e       	sub	lr,-8
80002318:	1c 3b       	cp.w	r11,lr
8000231a:	c0 71       	brne	80002328 <_free_r+0xb4>
8000231c:	97 36       	st.w	r11[0xc],r6
8000231e:	97 26       	st.w	r11[0x8],r6
80002320:	8d 2b       	st.w	r6[0x8],r11
80002322:	8d 3b       	st.w	r6[0xc],r11
80002324:	30 1c       	mov	r12,1
80002326:	c0 58       	rjmp	80002330 <_free_r+0xbc>
80002328:	72 2b       	ld.w	r11,r9[0x8]
8000232a:	72 39       	ld.w	r9,r9[0xc]
8000232c:	93 2b       	st.w	r9[0x8],r11
8000232e:	97 39       	st.w	r11[0xc],r9
80002330:	10 99       	mov	r9,r8
80002332:	ec 08 09 08 	st.w	r6[r8],r8
80002336:	a1 a9       	sbr	r9,0x0
80002338:	8d 19       	st.w	r6[0x4],r9
8000233a:	58 0c       	cp.w	r12,0
8000233c:	c6 51       	brne	80002406 <_free_r+0x192>
8000233e:	e0 48 01 ff 	cp.w	r8,511
80002342:	e0 8b 00 13 	brhi	80002368 <_free_r+0xf4>
80002346:	a3 98       	lsr	r8,0x3
80002348:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000234c:	72 2b       	ld.w	r11,r9[0x8]
8000234e:	8d 39       	st.w	r6[0xc],r9
80002350:	8d 2b       	st.w	r6[0x8],r11
80002352:	97 36       	st.w	r11[0xc],r6
80002354:	93 26       	st.w	r9[0x8],r6
80002356:	a3 48       	asr	r8,0x2
80002358:	74 19       	ld.w	r9,r10[0x4]
8000235a:	30 1b       	mov	r11,1
8000235c:	f6 08 09 48 	lsl	r8,r11,r8
80002360:	f3 e8 10 08 	or	r8,r9,r8
80002364:	95 18       	st.w	r10[0x4],r8
80002366:	c5 08       	rjmp	80002406 <_free_r+0x192>
80002368:	f0 0b 16 09 	lsr	r11,r8,0x9
8000236c:	58 4b       	cp.w	r11,4
8000236e:	e0 8b 00 06 	brhi	8000237a <_free_r+0x106>
80002372:	f0 0b 16 06 	lsr	r11,r8,0x6
80002376:	2c 8b       	sub	r11,-56
80002378:	c2 b8       	rjmp	800023ce <_free_r+0x15a>
8000237a:	59 4b       	cp.w	r11,20
8000237c:	e0 8b 00 04 	brhi	80002384 <_free_r+0x110>
80002380:	2a 5b       	sub	r11,-91
80002382:	c2 68       	rjmp	800023ce <_free_r+0x15a>
80002384:	e0 4b 00 54 	cp.w	r11,84
80002388:	e0 8b 00 06 	brhi	80002394 <_free_r+0x120>
8000238c:	f0 0b 16 0c 	lsr	r11,r8,0xc
80002390:	29 2b       	sub	r11,-110
80002392:	c1 e8       	rjmp	800023ce <_free_r+0x15a>
80002394:	e0 4b 01 54 	cp.w	r11,340
80002398:	e0 8b 00 06 	brhi	800023a4 <_free_r+0x130>
8000239c:	f0 0b 16 0f 	lsr	r11,r8,0xf
800023a0:	28 9b       	sub	r11,-119
800023a2:	c1 68       	rjmp	800023ce <_free_r+0x15a>
800023a4:	e0 4b 05 54 	cp.w	r11,1364
800023a8:	e0 88 00 10 	brls	800023c8 <_free_r+0x154>
800023ac:	37 eb       	mov	r11,126
800023ae:	c1 08       	rjmp	800023ce <_free_r+0x15a>
800023b0:	80 00       	ld.sh	r0,r0[0x0]
800023b2:	21 52       	sub	r2,21
800023b4:	00 00       	add	r0,r0
800023b6:	01 04       	ld.w	r4,r0++
800023b8:	00 00       	add	r0,r0
800023ba:	05 0c       	ld.w	r12,r2++
800023bc:	00 00       	add	r0,r0
800023be:	06 30       	cp.w	r0,r3
800023c0:	80 00       	ld.sh	r0,r0[0x0]
800023c2:	21 cc       	sub	r12,28
800023c4:	80 00       	ld.sh	r0,r0[0x0]
800023c6:	21 54       	sub	r4,21
800023c8:	f0 0b 16 12 	lsr	r11,r8,0x12
800023cc:	28 4b       	sub	r11,-124
800023ce:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800023d2:	78 29       	ld.w	r9,r12[0x8]
800023d4:	18 39       	cp.w	r9,r12
800023d6:	c0 e1       	brne	800023f2 <_free_r+0x17e>
800023d8:	74 18       	ld.w	r8,r10[0x4]
800023da:	a3 4b       	asr	r11,0x2
800023dc:	30 1c       	mov	r12,1
800023de:	f8 0b 09 4b 	lsl	r11,r12,r11
800023e2:	f1 eb 10 0b 	or	r11,r8,r11
800023e6:	12 98       	mov	r8,r9
800023e8:	95 1b       	st.w	r10[0x4],r11
800023ea:	c0 a8       	rjmp	800023fe <_free_r+0x18a>
800023ec:	72 29       	ld.w	r9,r9[0x8]
800023ee:	18 39       	cp.w	r9,r12
800023f0:	c0 60       	breq	800023fc <_free_r+0x188>
800023f2:	72 1a       	ld.w	r10,r9[0x4]
800023f4:	e0 1a ff fc 	andl	r10,0xfffc
800023f8:	14 38       	cp.w	r8,r10
800023fa:	cf 93       	brcs	800023ec <_free_r+0x178>
800023fc:	72 38       	ld.w	r8,r9[0xc]
800023fe:	8d 38       	st.w	r6[0xc],r8
80002400:	8d 29       	st.w	r6[0x8],r9
80002402:	93 36       	st.w	r9[0xc],r6
80002404:	91 26       	st.w	r8[0x8],r6
80002406:	0e 9c       	mov	r12,r7
80002408:	f0 1f 00 02 	mcall	80002410 <_free_r+0x19c>
8000240c:	d8 22       	popm	r4-r7,pc
8000240e:	00 00       	add	r0,r0
80002410:	80 00       	ld.sh	r0,r0[0x0]
80002412:	21 54       	sub	r4,21

Disassembly of section .exception:

80002600 <_evba>:
	...

80002628 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80002628:	c7 a8       	rjmp	8000271c <privilegedCalls>
	...

80002700 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80002700:	1c 9f       	mov	pc,lr

80002702 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80002702:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80002706:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
8000270a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
8000270e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80002712:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80002714:	c0 31       	brne	8000271a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80002716:	4b 9c       	lddpc	r12,800027f8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80002718:	18 9f       	mov	pc,r12

8000271a <_int0_exit>:
_int0_exit:
	rete
8000271a:	d6 03       	rete

8000271c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
8000271c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
8000271e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80002720:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80002722:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80002724:	9b 3c       	st.w	sp[0xc],r12

80002726 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80002726:	4b 6c       	lddpc	r12,800027fc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80002728:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
8000272a:	c0 61       	brne	80002736 <priv_interruptenable>
	ld.w r12,sp[USERSR]
8000272c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
8000272e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80002730:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002732:	d3 02       	popm	r11-r12
	rete
80002734:	d6 03       	rete

80002736 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80002736:	4b 3c       	lddpc	r12,80002800 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80002738:	18 3b       	cp.w	r11,r12
	brne privexception
8000273a:	c0 61       	brne	80002746 <privexception>
	ld.w r12,sp[USERSR]
8000273c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
8000273e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80002740:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80002742:	d3 02       	popm	r11-r12
	rete
80002744:	d6 03       	rete

80002746 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80002746:	c0 08       	rjmp	80002746 <privexception>

80002748 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80002748:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
8000274a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
8000274e:	4a ec       	lddpc	r12,80002804 <contextRestoreFromISR+0x4c>
	sub r11,r12
80002750:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80002752:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80002754:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80002758:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
8000275c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80002760:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80002762:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80002764:	1c 9f       	mov	pc,lr

80002766 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80002766:	d3 03       	ssrf	0x10
	mov pc,lr
80002768:	1c 9f       	mov	pc,lr

8000276a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
8000276a:	d5 03       	csrf	0x10
	mov pc,lr
8000276c:	1c 9f       	mov	pc,lr

8000276e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
8000276e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80002772:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80002774:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80002778:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
8000277c:	1c 9f       	mov	pc,lr

8000277e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000277e:	4a 3c       	lddpc	r12,80002808 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80002780:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80002782:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80002784:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80002786:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80002788:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
8000278a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
8000278c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
8000278e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80002790:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80002792:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80002794:	33 40       	mov	r0,52
	add r0,r12
80002796:	18 00       	add	r0,r12
	stmts r0,r0-r11
80002798:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
8000279c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
8000279e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
800027a2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
800027a4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
800027a6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
800027a8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
800027aa:	1a 90       	mov	r0,sp
	st.w --sp,r0
800027ac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800027ae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
800027b2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
800027b4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
800027b6:	1c 9f       	mov	pc,lr

800027b8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800027b8:	49 4c       	lddpc	r12,80002808 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
800027ba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
800027bc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800027be:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800027c0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
800027c4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
800027c6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
800027c8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800027ca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
800027cc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800027ce:	33 40       	mov	r0,52
	add r0,r12
800027d0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800027d2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800027d6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
800027d8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
800027da:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
800027dc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
800027de:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
800027e0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
800027e2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
800027e4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
800027e6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
800027e8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800027ea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
800027ec:	d4 01       	pushm	lr
	call timerStart
800027ee:	f0 1f 00 08 	mcall	8000280c <contextRestoreFromISR+0x54>
	popm lr
800027f2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
800027f4:	1c 9f       	mov	pc,lr
800027f6:	00 00       	add	r0,r0
800027f8:	80 00       	ld.sh	r0,r0[0x0]
800027fa:	0f 18       	ld.sh	r8,r7++
800027fc:	80 00       	ld.sh	r0,r0[0x0]
800027fe:	27 66       	sub	r6,118
80002800:	80 00       	ld.sh	r0,r0[0x0]
80002802:	27 6a       	sub	r10,118
80002804:	80 00       	ld.sh	r0,r0[0x0]
80002806:	26 00       	sub	r0,96
80002808:	00 00       	add	r0,r0
8000280a:	07 24       	ld.uh	r4,r3++
8000280c:	80 00       	ld.sh	r0,r0[0x0]
8000280e:	1b 5a       	ld.sh	r10,--sp
	...
