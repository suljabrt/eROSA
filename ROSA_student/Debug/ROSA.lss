
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000016e4  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001800  80001800  00001c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80001c00  80001c00  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80001c84  80001c84  00002084  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80001c88  00002408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002194  00002914  2**0
                  ALLOC
  9 .bss          00000098  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000da50  000005b0  000005b0  00000000  2**0
                  ALLOC
 11 .comment      000000bc  00000000  00000000  00002914  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000590  00000000  00000000  000029d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000947  00000000  00000000  00002f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c2d8  00000000  00000000  000038a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00002004  00000000  00000000  0000fb7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000040cf  00000000  00000000  00011b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000b98  00000000  00000000  00015c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001c24  00000000  00000000  000167ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00001813  00000000  00000000  00018410  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00454a2b  00000000  00000000  00019c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 000004d8  00000000  00000000  0046e64e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	0e bc       	st.h	r7++,r12

Disassembly of section .text:

80000008 <MaxLockedCeiling>:
 * Comment:
 * 	Returns a maximum ceiling of all currently locked semaphores
 *
 **********************************************************/
static uint8_t MaxLockedCeiling(void)
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 2d       	sub	sp,8
	if (LOCKEDSEMAPHORELIST==NULL)
80000010:	49 78       	lddpc	r8,8000006c <MaxLockedCeiling+0x64>
80000012:	70 08       	ld.w	r8,r8[0x0]
80000014:	58 08       	cp.w	r8,0
80000016:	c0 31       	brne	8000001c <MaxLockedCeiling+0x14>
	{
		return 0;
80000018:	30 08       	mov	r8,0
8000001a:	c2 48       	rjmp	80000062 <MaxLockedCeiling+0x5a>
	}
	else
	{
	uint8_t maxCeil=LOCKEDSEMAPHORELIST->ceiling;
8000001c:	49 48       	lddpc	r8,8000006c <MaxLockedCeiling+0x64>
8000001e:	70 08       	ld.w	r8,r8[0x0]
80000020:	11 c8       	ld.ub	r8,r8[0x4]
80000022:	ef 68 ff fb 	st.b	r7[-5],r8
	ROSA_semaphoreHandle_t *it=LOCKEDSEMAPHORELIST;
80000026:	49 28       	lddpc	r8,8000006c <MaxLockedCeiling+0x64>
80000028:	70 08       	ld.w	r8,r8[0x0]
8000002a:	ef 48 ff fc 	st.w	r7[-4],r8
	while (it->nextLockedSemaphore!=NULL)
8000002e:	c1 38       	rjmp	80000054 <MaxLockedCeiling+0x4c>
	{
		if (it->ceiling>maxCeil)
80000030:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000034:	11 c8       	ld.ub	r8,r8[0x4]
80000036:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000003a:	f0 09 18 00 	cp.b	r9,r8
8000003e:	c0 62       	brcc	8000004a <MaxLockedCeiling+0x42>
		{
			maxCeil=it->ceiling;
80000040:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000044:	11 c8       	ld.ub	r8,r8[0x4]
80000046:	ef 68 ff fb 	st.b	r7[-5],r8
		}
		it=it->nextLockedSemaphore;
8000004a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000004e:	70 28       	ld.w	r8,r8[0x8]
80000050:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
	uint8_t maxCeil=LOCKEDSEMAPHORELIST->ceiling;
	ROSA_semaphoreHandle_t *it=LOCKEDSEMAPHORELIST;
	while (it->nextLockedSemaphore!=NULL)
80000054:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000058:	70 28       	ld.w	r8,r8[0x8]
8000005a:	58 08       	cp.w	r8,0
8000005c:	ce a1       	brne	80000030 <MaxLockedCeiling+0x28>
			maxCeil=it->ceiling;
		}
		it=it->nextLockedSemaphore;
	}
	
	return maxCeil;
8000005e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
	}
}
80000062:	10 9c       	mov	r12,r8
80000064:	2f ed       	sub	sp,-8
80000066:	e3 cd 80 80 	ldm	sp++,r7,pc
8000006a:	00 00       	add	r0,r0
8000006c:	00 00       	add	r0,r0
8000006e:	05 50       	ld.sh	r0,--r2

80000070 <ROSA_semaphoreCreate>:
 *
 * Comment:
 * 	Create a semaphore
 *
 **********************************************************/
int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t ** mutex, uint8_t ceiling) {
80000070:	eb cd 40 80 	pushm	r7,lr
80000074:	1a 97       	mov	r7,sp
80000076:	20 2d       	sub	sp,8
80000078:	ef 4c ff fc 	st.w	r7[-4],r12
8000007c:	16 98       	mov	r8,r11
8000007e:	ef 68 ff f8 	st.b	r7[-8],r8
	*mutex = (ROSA_semaphoreHandle_t *) calloc(1,sizeof(ROSA_semaphoreHandle_t));
80000082:	30 cb       	mov	r11,12
80000084:	30 1c       	mov	r12,1
80000086:	f0 1f 00 0f 	mcall	800000c0 <ROSA_semaphoreCreate+0x50>
8000008a:	18 98       	mov	r8,r12
8000008c:	10 99       	mov	r9,r8
8000008e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000092:	91 09       	st.w	r8[0x0],r9
	(*mutex)->holder = NULL;
80000094:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000098:	70 08       	ld.w	r8,r8[0x0]
8000009a:	30 09       	mov	r9,0
8000009c:	91 09       	st.w	r8[0x0],r9
	(*mutex)->ceiling = ceiling;
8000009e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000a2:	70 09       	ld.w	r9,r8[0x0]
800000a4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800000a8:	b2 c8       	st.b	r9[0x4],r8
	(*mutex)->nextLockedSemaphore=NULL;	
800000aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000ae:	70 08       	ld.w	r8,r8[0x0]
800000b0:	30 09       	mov	r9,0
800000b2:	91 29       	st.w	r8[0x8],r9
	
	return 0;
800000b4:	30 08       	mov	r8,0
}
800000b6:	10 9c       	mov	r12,r8
800000b8:	2f ed       	sub	sp,-8
800000ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800000be:	00 00       	add	r0,r0
800000c0:	80 00       	ld.sh	r0,r0[0x0]
800000c2:	0f 3c       	ld.ub	r12,r7++

800000c4 <ROSA_semaphoreLock>:
 *
 * Comment:
 * 	Lock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t ** mutex) {
800000c4:	eb cd 40 c0 	pushm	r6-r7,lr
800000c8:	1a 97       	mov	r7,sp
800000ca:	20 2d       	sub	sp,8
800000cc:	ef 4c ff f8 	st.w	r7[-8],r12
	
	if ((*mutex)==NULL)
800000d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000d4:	70 08       	ld.w	r8,r8[0x0]
800000d6:	58 08       	cp.w	r8,0
800000d8:	c0 61       	brne	800000e4 <ROSA_semaphoreLock+0x20>
	{
		return -1; // if the passed pointer to the semaphore handle is non-existent
800000da:	3f f8       	mov	r8,-1
800000dc:	c5 98       	rjmp	8000018e <ROSA_semaphoreLock+0xca>
	}
	
	while ((*mutex)->holder != NULL || EXECTASK->priority<=MaxLockedCeiling()) //if the semaphore is already locked or IPCP condition P(task)>maxLockedCeil
		ROSA_yield();		
800000de:	f0 1f 00 2f 	mcall	80000198 <ROSA_semaphoreLock+0xd4>
800000e2:	c0 28       	rjmp	800000e6 <ROSA_semaphoreLock+0x22>
	if ((*mutex)==NULL)
	{
		return -1; // if the passed pointer to the semaphore handle is non-existent
	}
	
	while ((*mutex)->holder != NULL || EXECTASK->priority<=MaxLockedCeiling()) //if the semaphore is already locked or IPCP condition P(task)>maxLockedCeil
800000e4:	d7 03       	nop
800000e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000ea:	70 08       	ld.w	r8,r8[0x0]
800000ec:	70 08       	ld.w	r8,r8[0x0]
800000ee:	58 08       	cp.w	r8,0
800000f0:	cf 71       	brne	800000de <ROSA_semaphoreLock+0x1a>
800000f2:	4a b8       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd8>
800000f4:	70 08       	ld.w	r8,r8[0x0]
800000f6:	f1 36 00 64 	ld.ub	r6,r8[100]
800000fa:	f0 1f 00 2a 	mcall	800001a0 <ROSA_semaphoreLock+0xdc>
800000fe:	18 98       	mov	r8,r12
80000100:	f0 06 18 00 	cp.b	r6,r8
80000104:	fe 98 ff ed 	brls	800000de <ROSA_semaphoreLock+0x1a>
		ROSA_yield();		
	
	
	(*mutex)->holder = EXECTASK;
80000108:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000010c:	70 08       	ld.w	r8,r8[0x0]
8000010e:	4a 49       	lddpc	r9,8000019c <ROSA_semaphoreLock+0xd8>
80000110:	72 09       	ld.w	r9,r9[0x0]
80000112:	91 09       	st.w	r8[0x0],r9
	if (EXECTASK->priority < (*mutex)->ceiling)
80000114:	4a 28       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd8>
80000116:	70 08       	ld.w	r8,r8[0x0]
80000118:	f1 39 00 64 	ld.ub	r9,r8[100]
8000011c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000120:	70 08       	ld.w	r8,r8[0x0]
80000122:	11 c8       	ld.ub	r8,r8[0x4]
80000124:	f0 09 18 00 	cp.b	r9,r8
80000128:	c1 32       	brcc	8000014e <ROSA_semaphoreLock+0x8a>
	{
		EXECTASK->priority=(*mutex)->ceiling; //IPCP priority inheritance
8000012a:	49 d8       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd8>
8000012c:	70 09       	ld.w	r9,r8[0x0]
8000012e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000132:	70 08       	ld.w	r8,r8[0x0]
80000134:	11 c8       	ld.ub	r8,r8[0x4]
80000136:	f3 68 00 64 	st.b	r9[100],r8
		PA[EXECTASK->priority]=EXECTASK;//move this task to the proper ready queue
8000013a:	49 98       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd8>
8000013c:	70 08       	ld.w	r8,r8[0x0]
8000013e:	f1 38 00 64 	ld.ub	r8,r8[100]
80000142:	10 99       	mov	r9,r8
80000144:	49 68       	lddpc	r8,8000019c <ROSA_semaphoreLock+0xd8>
80000146:	70 0a       	ld.w	r10,r8[0x0]
80000148:	49 78       	lddpc	r8,800001a4 <ROSA_semaphoreLock+0xe0>
8000014a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
		
	if (LOCKEDSEMAPHORELIST==NULL)
8000014e:	49 78       	lddpc	r8,800001a8 <ROSA_semaphoreLock+0xe4>
80000150:	70 08       	ld.w	r8,r8[0x0]
80000152:	58 08       	cp.w	r8,0
80000154:	c0 71       	brne	80000162 <ROSA_semaphoreLock+0x9e>
	{
		LOCKEDSEMAPHORELIST=(*mutex);
80000156:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000015a:	70 09       	ld.w	r9,r8[0x0]
8000015c:	49 38       	lddpc	r8,800001a8 <ROSA_semaphoreLock+0xe4>
8000015e:	91 09       	st.w	r8[0x0],r9
80000160:	c1 68       	rjmp	8000018c <ROSA_semaphoreLock+0xc8>
	}
	else
	{
		ROSA_semaphoreHandle_t * it; //finding the last semaphore in the list and changing its nextLockedSemaphore field to point to the just locked semaphore
		it=LOCKEDSEMAPHORELIST;
80000162:	49 28       	lddpc	r8,800001a8 <ROSA_semaphoreLock+0xe4>
80000164:	70 08       	ld.w	r8,r8[0x0]
80000166:	ef 48 ff fc 	st.w	r7[-4],r8
		while(it->nextLockedSemaphore!=NULL)
8000016a:	c0 68       	rjmp	80000176 <ROSA_semaphoreLock+0xb2>
		{
			it=it->nextLockedSemaphore;
8000016c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000170:	70 28       	ld.w	r8,r8[0x8]
80000172:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
		ROSA_semaphoreHandle_t * it; //finding the last semaphore in the list and changing its nextLockedSemaphore field to point to the just locked semaphore
		it=LOCKEDSEMAPHORELIST;
		while(it->nextLockedSemaphore!=NULL)
80000176:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000017a:	70 28       	ld.w	r8,r8[0x8]
8000017c:	58 08       	cp.w	r8,0
8000017e:	cf 71       	brne	8000016c <ROSA_semaphoreLock+0xa8>
		{
			it=it->nextLockedSemaphore;
		}
		it->nextLockedSemaphore=(*mutex);
80000180:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000184:	70 09       	ld.w	r9,r8[0x0]
80000186:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000018a:	91 29       	st.w	r8[0x8],r9
	}
	
	return 0;
8000018c:	30 08       	mov	r8,0
}
8000018e:	10 9c       	mov	r12,r8
80000190:	2f ed       	sub	sp,-8
80000192:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80000196:	00 00       	add	r0,r0
80000198:	80 00       	ld.sh	r0,r0[0x0]
8000019a:	06 f2       	st.b	--r3,r2
8000019c:	00 00       	add	r0,r0
8000019e:	05 a4       	ld.ub	r4,r2[0x2]
800001a0:	80 00       	ld.sh	r0,r0[0x0]
800001a2:	00 08       	add	r8,r0
800001a4:	00 00       	add	r0,r0
800001a6:	05 70       	ld.ub	r0,--r2
800001a8:	00 00       	add	r0,r0
800001aa:	05 50       	ld.sh	r0,--r2

800001ac <ROSA_semaphoreUnlock>:
 *
 * Comment:
 * 	Unlock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreUnlock(ROSA_semaphoreHandle_t ** mutex) {
800001ac:	eb cd 40 80 	pushm	r7,lr
800001b0:	1a 97       	mov	r7,sp
800001b2:	20 2d       	sub	sp,8
800001b4:	ef 4c ff f8 	st.w	r7[-8],r12
	(*mutex)->holder = NULL;
800001b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001bc:	70 08       	ld.w	r8,r8[0x0]
800001be:	30 09       	mov	r9,0
800001c0:	91 09       	st.w	r8[0x0],r9
	if ((*mutex)==LOCKEDSEMAPHORELIST)
800001c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001c6:	70 09       	ld.w	r9,r8[0x0]
800001c8:	49 58       	lddpc	r8,8000021c <ROSA_semaphoreUnlock+0x70>
800001ca:	70 08       	ld.w	r8,r8[0x0]
800001cc:	10 39       	cp.w	r9,r8
800001ce:	c0 81       	brne	800001de <ROSA_semaphoreUnlock+0x32>
	{
		LOCKEDSEMAPHORELIST=(*mutex)->nextLockedSemaphore; //if first locked semaphore needs to be unlocked
800001d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001d4:	70 08       	ld.w	r8,r8[0x0]
800001d6:	70 29       	ld.w	r9,r8[0x8]
800001d8:	49 18       	lddpc	r8,8000021c <ROSA_semaphoreUnlock+0x70>
800001da:	91 09       	st.w	r8[0x0],r9
800001dc:	c1 a8       	rjmp	80000210 <ROSA_semaphoreUnlock+0x64>
	}
	else
	{
		ROSA_semaphoreHandle_t * it;
		it=LOCKEDSEMAPHORELIST;
800001de:	49 08       	lddpc	r8,8000021c <ROSA_semaphoreUnlock+0x70>
800001e0:	70 08       	ld.w	r8,r8[0x0]
800001e2:	ef 48 ff fc 	st.w	r7[-4],r8
		while (it->nextLockedSemaphore!=(*mutex)) //find the locked semaphore before the one that needs to be unlocked
800001e6:	c0 68       	rjmp	800001f2 <ROSA_semaphoreUnlock+0x46>
		{
			it=it->nextLockedSemaphore;
800001e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001ec:	70 28       	ld.w	r8,r8[0x8]
800001ee:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	else
	{
		ROSA_semaphoreHandle_t * it;
		it=LOCKEDSEMAPHORELIST;
		while (it->nextLockedSemaphore!=(*mutex)) //find the locked semaphore before the one that needs to be unlocked
800001f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001f6:	70 29       	ld.w	r9,r8[0x8]
800001f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001fc:	70 08       	ld.w	r8,r8[0x0]
800001fe:	10 39       	cp.w	r9,r8
80000200:	cf 41       	brne	800001e8 <ROSA_semaphoreUnlock+0x3c>
		{
			it=it->nextLockedSemaphore;
		}
		it->nextLockedSemaphore=(*mutex)->nextLockedSemaphore;
80000202:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000206:	70 08       	ld.w	r8,r8[0x0]
80000208:	70 29       	ld.w	r9,r8[0x8]
8000020a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000020e:	91 29       	st.w	r8[0x8],r9
	}
	return 0;
80000210:	30 08       	mov	r8,0
}
80000212:	10 9c       	mov	r12,r8
80000214:	2f ed       	sub	sp,-8
80000216:	e3 cd 80 80 	ldm	sp++,r7,pc
8000021a:	00 00       	add	r0,r0
8000021c:	00 00       	add	r0,r0
8000021e:	05 50       	ld.sh	r0,--r2

80000220 <usart_options>:
80000220:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 31     ............tsk1
80000230:	00 00 00 00 74 73 6b 32 00 00 00 00                 ....tsk2....

8000023c <task1>:
 * Task1
 * LED0 lights up
 * LED1 goes dark
 ************************************************************/
void task1(void)
{
8000023c:	eb cd 40 80 	pushm	r7,lr
80000240:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(&mutex2);
80000242:	48 dc       	lddpc	r12,80000274 <task1+0x38>
80000244:	f0 1f 00 0d 	mcall	80000278 <task1+0x3c>
		ledOn(LED0_GPIO);
80000248:	33 bc       	mov	r12,59
8000024a:	f0 1f 00 0d 	mcall	8000027c <task1+0x40>
		ROSA_yield();
8000024e:	f0 1f 00 0d 	mcall	80000280 <task1+0x44>
		delay_ms(350);
80000252:	e0 6c 01 5e 	mov	r12,350
80000256:	f0 1f 00 0c 	mcall	80000284 <task1+0x48>
		ledOff(LED0_GPIO);
8000025a:	33 bc       	mov	r12,59
8000025c:	f0 1f 00 0b 	mcall	80000288 <task1+0x4c>
		delay_ms(350);
80000260:	e0 6c 01 5e 	mov	r12,350
80000264:	f0 1f 00 08 	mcall	80000284 <task1+0x48>
		ROSA_semaphoreUnlock(&mutex2);
80000268:	48 3c       	lddpc	r12,80000274 <task1+0x38>
8000026a:	f0 1f 00 09 	mcall	8000028c <task1+0x50>
		ROSA_yield();
8000026e:	f0 1f 00 05 	mcall	80000280 <task1+0x44>
		
	}
80000272:	ce 8b       	rjmp	80000242 <task1+0x6>
80000274:	00 00       	add	r0,r0
80000276:	05 58       	ld.sh	r8,--r2
80000278:	80 00       	ld.sh	r0,r0[0x0]
8000027a:	00 c4       	st.b	r0++,r4
8000027c:	80 00       	ld.sh	r0,r0[0x0]
8000027e:	0a ec       	st.h	--r5,r12
80000280:	80 00       	ld.sh	r0,r0[0x0]
80000282:	06 f2       	st.b	--r3,r2
80000284:	80 00       	ld.sh	r0,r0[0x0]
80000286:	08 e4       	st.h	--r4,r4
80000288:	80 00       	ld.sh	r0,r0[0x0]
8000028a:	0b 0c       	ld.w	r12,r5++
8000028c:	80 00       	ld.sh	r0,r0[0x0]
8000028e:	01 ac       	ld.ub	r12,r0[0x2]

80000290 <task2>:
 * Task2
 * LED0 goes dark
 * LED1 lights up
 ************************************************************/
void task2(void)
{
80000290:	eb cd 40 80 	pushm	r7,lr
80000294:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(&mutex1);
80000296:	48 cc       	lddpc	r12,800002c4 <task2+0x34>
80000298:	f0 1f 00 0c 	mcall	800002c8 <task2+0x38>
		ledOn(LED1_GPIO);
8000029c:	33 cc       	mov	r12,60
8000029e:	f0 1f 00 0c 	mcall	800002cc <task2+0x3c>
		delay_ms(350);
800002a2:	e0 6c 01 5e 	mov	r12,350
800002a6:	f0 1f 00 0b 	mcall	800002d0 <task2+0x40>
		ledOff(LED1_GPIO);
800002aa:	33 cc       	mov	r12,60
800002ac:	f0 1f 00 0a 	mcall	800002d4 <task2+0x44>
		delay_ms(350);
800002b0:	e0 6c 01 5e 	mov	r12,350
800002b4:	f0 1f 00 07 	mcall	800002d0 <task2+0x40>
		ROSA_semaphoreUnlock(&mutex1);
800002b8:	48 3c       	lddpc	r12,800002c4 <task2+0x34>
800002ba:	f0 1f 00 08 	mcall	800002d8 <task2+0x48>
		ROSA_yield();
800002be:	f0 1f 00 08 	mcall	800002dc <task2+0x4c>
	}
800002c2:	ce ab       	rjmp	80000296 <task2+0x6>
800002c4:	00 00       	add	r0,r0
800002c6:	05 68       	ld.uh	r8,--r2
800002c8:	80 00       	ld.sh	r0,r0[0x0]
800002ca:	00 c4       	st.b	r0++,r4
800002cc:	80 00       	ld.sh	r0,r0[0x0]
800002ce:	0a ec       	st.h	--r5,r12
800002d0:	80 00       	ld.sh	r0,r0[0x0]
800002d2:	08 e4       	st.h	--r4,r4
800002d4:	80 00       	ld.sh	r0,r0[0x0]
800002d6:	0b 0c       	ld.w	r12,r5++
800002d8:	80 00       	ld.sh	r0,r0[0x0]
800002da:	01 ac       	ld.ub	r12,r0[0x2]
800002dc:	80 00       	ld.sh	r0,r0[0x0]
800002de:	06 f2       	st.b	--r3,r2

800002e0 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
800002e0:	eb cd 40 80 	pushm	r7,lr
800002e4:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
800002e6:	f0 1f 00 0e 	mcall	8000031c <main+0x3c>
	
	//Create tasks and install them into the ROSA kernel
	ROSA_taskCreate(&t1_tcb, "tsk1", task1, T1_STACK_SIZE, 4);
800002ea:	30 48       	mov	r8,4
800002ec:	32 09       	mov	r9,32
800002ee:	48 da       	lddpc	r10,80000320 <main+0x40>
800002f0:	48 db       	lddpc	r11,80000324 <main+0x44>
800002f2:	48 ec       	lddpc	r12,80000328 <main+0x48>
800002f4:	f0 1f 00 0e 	mcall	8000032c <main+0x4c>
	ROSA_taskCreate(&t2_tcb, "tsk2", task2, T2_STACK_SIZE, 4);
800002f8:	30 48       	mov	r8,4
800002fa:	32 09       	mov	r9,32
800002fc:	48 da       	lddpc	r10,80000330 <main+0x50>
800002fe:	48 eb       	lddpc	r11,80000334 <main+0x54>
80000300:	48 ec       	lddpc	r12,80000338 <main+0x58>
80000302:	f0 1f 00 0b 	mcall	8000032c <main+0x4c>
	ROSA_semaphoreCreate(&mutex1, 4);
80000306:	30 4b       	mov	r11,4
80000308:	48 dc       	lddpc	r12,8000033c <main+0x5c>
8000030a:	f0 1f 00 0e 	mcall	80000340 <main+0x60>
	ROSA_semaphoreCreate(&mutex2, 4);
8000030e:	30 4b       	mov	r11,4
80000310:	48 dc       	lddpc	r12,80000344 <main+0x64>
80000312:	f0 1f 00 0c 	mcall	80000340 <main+0x60>
	ROSA_tcbInstall(&t2_tcb);*/

	//Start the ROSA kernel
	//TCBLIST = PA[2]->nexttcb;
	//ROSA_start();
	ROSA_startScheduler();
80000316:	f0 1f 00 0d 	mcall	80000348 <main+0x68>
	//ledOn(LED1_GPIO);
	/* Execution will never return here */
	while(1);
8000031a:	c0 08       	rjmp	8000031a <main+0x3a>
8000031c:	80 00       	ld.sh	r0,r0[0x0]
8000031e:	03 ec       	ld.ub	r12,r1[0x6]
80000320:	80 00       	ld.sh	r0,r0[0x0]
80000322:	02 3c       	cp.w	r12,r1
80000324:	80 00       	ld.sh	r0,r0[0x0]
80000326:	02 2c       	rsub	r12,r1
80000328:	00 00       	add	r0,r0
8000032a:	05 64       	ld.uh	r4,--r2
8000032c:	80 00       	ld.sh	r0,r0[0x0]
8000032e:	05 44       	ld.w	r4,--r2
80000330:	80 00       	ld.sh	r0,r0[0x0]
80000332:	02 90       	mov	r0,r1
80000334:	80 00       	ld.sh	r0,r0[0x0]
80000336:	02 34       	cp.w	r4,r1
80000338:	00 00       	add	r0,r0
8000033a:	05 60       	ld.uh	r0,--r2
8000033c:	00 00       	add	r0,r0
8000033e:	05 68       	ld.uh	r8,--r2
80000340:	80 00       	ld.sh	r0,r0[0x0]
80000342:	00 70       	tst	r0,r0
80000344:	00 00       	add	r0,r0
80000346:	05 58       	ld.sh	r8,--r2
80000348:	80 00       	ld.sh	r0,r0[0x0]
8000034a:	07 5c       	ld.sh	r12,--r3

8000034c <usart_options>:
8000034c:	00 00 e1 00 08 04 00 00 00 00 00 00                 ............

80000358 <rqi>:
	
	return i;
}

int rqi(ROSA_taskHandle_t ** pth)
{
80000358:	eb cd 40 80 	pushm	r7,lr
8000035c:	1a 97       	mov	r7,sp
8000035e:	20 2d       	sub	sp,8
80000360:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t priority;
	
	priority = (*pth)->priority;
80000364:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000368:	70 08       	ld.w	r8,r8[0x0]
8000036a:	f1 38 00 64 	ld.ub	r8,r8[100]
8000036e:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (PA[priority] == NULL) {
80000372:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000376:	49 d8       	lddpc	r8,800003e8 <rqi+0x90>
80000378:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000037c:	58 08       	cp.w	r8,0
8000037e:	c1 41       	brne	800003a6 <rqi+0x4e>
		PA[priority] = *pth;
80000380:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000384:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000388:	70 0a       	ld.w	r10,r8[0x0]
8000038a:	49 88       	lddpc	r8,800003e8 <rqi+0x90>
8000038c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		PA[priority]->nexttcb = *pth;
80000390:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000394:	49 58       	lddpc	r8,800003e8 <rqi+0x90>
80000396:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000039a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000039e:	72 09       	ld.w	r9,r9[0x0]
800003a0:	91 09       	st.w	r8[0x0],r9
		return 0;
800003a2:	30 08       	mov	r8,0
800003a4:	c1 d8       	rjmp	800003de <rqi+0x86>
	}
	else {
		(*pth)->nexttcb = PA[priority]->nexttcb;
800003a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003aa:	70 08       	ld.w	r8,r8[0x0]
800003ac:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800003b0:	48 e9       	lddpc	r9,800003e8 <rqi+0x90>
800003b2:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800003b6:	72 09       	ld.w	r9,r9[0x0]
800003b8:	91 09       	st.w	r8[0x0],r9
		PA[priority]->nexttcb = *pth;
800003ba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800003be:	48 b8       	lddpc	r8,800003e8 <rqi+0x90>
800003c0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800003c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800003c8:	72 09       	ld.w	r9,r9[0x0]
800003ca:	91 09       	st.w	r8[0x0],r9
		PA[priority] = *pth;
800003cc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800003d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003d4:	70 0a       	ld.w	r10,r8[0x0]
800003d6:	48 58       	lddpc	r8,800003e8 <rqi+0x90>
800003d8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		return 0;
800003dc:	30 08       	mov	r8,0
	}
}
800003de:	10 9c       	mov	r12,r8
800003e0:	2f ed       	sub	sp,-8
800003e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800003e6:	00 00       	add	r0,r0
800003e8:	00 00       	add	r0,r0
800003ea:	05 70       	ld.ub	r0,--r2

800003ec <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
800003ec:	eb cd 40 80 	pushm	r7,lr
800003f0:	1a 97       	mov	r7,sp
800003f2:	20 1d       	sub	sp,4
	int i = 0;
800003f4:	30 08       	mov	r8,0
800003f6:	ef 48 ff fc 	st.w	r7[-4],r8
	
	//Do initialization of I/O drivers
	ledInit();									//LEDs
800003fa:	f0 1f 00 1b 	mcall	80000464 <ROSA_init+0x78>
	buttonInit();								//Buttons
800003fe:	f0 1f 00 1b 	mcall	80000468 <ROSA_init+0x7c>
	joystickInit();								//Joystick
80000402:	f0 1f 00 1b 	mcall	8000046c <ROSA_init+0x80>
	potInit();									//Potentiometer
80000406:	f0 1f 00 1b 	mcall	80000470 <ROSA_init+0x84>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
8000040a:	e0 6a 1b 00 	mov	r10,6912
8000040e:	ea 1a 00 b7 	orh	r10,0xb7
80000412:	49 9b       	lddpc	r11,80000474 <ROSA_init+0x88>
80000414:	fe 7c 14 00 	mov	r12,-60416
80000418:	f0 1f 00 18 	mcall	80000478 <ROSA_init+0x8c>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
8000041c:	49 88       	lddpc	r8,8000047c <ROSA_init+0x90>
8000041e:	30 09       	mov	r9,0
80000420:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
80000422:	49 88       	lddpc	r8,80000480 <ROSA_init+0x94>
80000424:	30 09       	mov	r9,0
80000426:	91 09       	st.w	r8[0x0],r9
	PREEMPTASK = NULL;
80000428:	49 78       	lddpc	r8,80000484 <ROSA_init+0x98>
8000042a:	30 09       	mov	r9,0
8000042c:	91 09       	st.w	r8[0x0],r9
	LOCKEDSEMAPHORELIST=NULL;
8000042e:	49 78       	lddpc	r8,80000488 <ROSA_init+0x9c>
80000430:	30 09       	mov	r9,0
80000432:	91 09       	st.w	r8[0x0],r9
	
	for (i = 0; i < MAXNPRIO; i++) {
80000434:	30 08       	mov	r8,0
80000436:	ef 48 ff fc 	st.w	r7[-4],r8
8000043a:	c0 c8       	rjmp	80000452 <ROSA_init+0x66>
		PA[i] = NULL;
8000043c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000440:	49 38       	lddpc	r8,8000048c <ROSA_init+0xa0>
80000442:	30 0a       	mov	r10,0
80000444:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	TCBLIST = NULL;
	EXECTASK = NULL;
	PREEMPTASK = NULL;
	LOCKEDSEMAPHORELIST=NULL;
	
	for (i = 0; i < MAXNPRIO; i++) {
80000448:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000044c:	2f f8       	sub	r8,-1
8000044e:	ef 48 ff fc 	st.w	r7[-4],r8
80000452:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000456:	58 b8       	cp.w	r8,11
80000458:	fe 9a ff f2 	brle	8000043c <ROSA_init+0x50>
	
	//Initialize the timer to 100 ms period.
	//...
	//timerInit(100);
	//...
}
8000045c:	2f fd       	sub	sp,-4
8000045e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000462:	00 00       	add	r0,r0
80000464:	80 00       	ld.sh	r0,r0[0x0]
80000466:	0a 60       	and	r0,r5
80000468:	80 00       	ld.sh	r0,r0[0x0]
8000046a:	08 84       	andn	r4,r4
8000046c:	80 00       	ld.sh	r0,r0[0x0]
8000046e:	08 ac       	st.w	r4++,r12
80000470:	80 00       	ld.sh	r0,r0[0x0]
80000472:	0b 2c       	ld.uh	r12,r5++
80000474:	80 00       	ld.sh	r0,r0[0x0]
80000476:	03 4c       	ld.w	r12,--r1
80000478:	80 00       	ld.sh	r0,r0[0x0]
8000047a:	0c e0       	st.h	--r6,r0
8000047c:	00 00       	add	r0,r0
8000047e:	05 6c       	ld.uh	r12,--r2
80000480:	00 00       	add	r0,r0
80000482:	05 a4       	ld.ub	r4,r2[0x2]
80000484:	00 00       	add	r0,r0
80000486:	05 a0       	ld.ub	r0,r2[0x2]
80000488:	00 00       	add	r0,r0
8000048a:	05 50       	ld.sh	r0,--r2
8000048c:	00 00       	add	r0,r0
8000048e:	05 70       	ld.ub	r0,--r2

80000490 <ROSA_tcbCreate>:
 * Comment:
 * 	Create the TCB with correct values.
 *
 **********************************************************/
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
80000490:	eb cd 40 80 	pushm	r7,lr
80000494:	1a 97       	mov	r7,sp
80000496:	20 6d       	sub	sp,24
80000498:	ef 4c ff f8 	st.w	r7[-8],r12
8000049c:	ef 4b ff f4 	st.w	r7[-12],r11
800004a0:	ef 4a ff f0 	st.w	r7[-16],r10
800004a4:	ef 49 ff ec 	st.w	r7[-20],r9
800004a8:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800004ac:	30 08       	mov	r8,0
800004ae:	ef 48 ff fc 	st.w	r7[-4],r8
800004b2:	c1 48       	rjmp	800004da <ROSA_tcbCreate+0x4a>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
800004b4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800004b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004bc:	ee fa ff f4 	ld.w	r10,r7[-12]
800004c0:	f4 08 00 08 	add	r8,r10,r8
800004c4:	11 88       	ld.ub	r8,r8[0x0]
800004c6:	ee fa ff f8 	ld.w	r10,r7[-8]
800004ca:	f4 09 00 09 	add	r9,r10,r9
800004ce:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800004d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004d4:	2f f8       	sub	r8,-1
800004d6:	ef 48 ff fc 	st.w	r7[-4],r8
800004da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004de:	58 38       	cp.w	r8,3
800004e0:	fe 9a ff ea 	brle	800004b4 <ROSA_tcbCreate+0x24>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
800004e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004e8:	30 09       	mov	r9,0
800004ea:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
800004ec:	ee f9 ff f0 	ld.w	r9,r7[-16]
800004f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004f4:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
800004f6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800004fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004fe:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
80000500:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000504:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000508:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
8000050a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000050e:	a3 68       	lsl	r8,0x2
80000510:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000514:	10 09       	add	r9,r8
80000516:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000051a:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
8000051c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000520:	70 39       	ld.w	r9,r8[0xc]
80000522:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000526:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
80000528:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000052c:	fc 19 00 1c 	movh	r9,0x1c
80000530:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
80000532:	ee fc ff f8 	ld.w	r12,r7[-8]
80000536:	f0 1f 00 03 	mcall	80000540 <ROSA_tcbCreate+0xb0>
}
8000053a:	2f ad       	sub	sp,-24
8000053c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000540:	80 00       	ld.sh	r0,r0[0x0]
80000542:	06 66       	and	r6,r3

80000544 <ROSA_taskCreate>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

int16_t ROSA_taskCreate(ROSA_taskHandle_t ** pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
80000544:	eb cd 40 80 	pushm	r7,lr
80000548:	1a 97       	mov	r7,sp
8000054a:	20 6d       	sub	sp,24
8000054c:	ef 4c ff f8 	st.w	r7[-8],r12
80000550:	ef 4b ff f4 	st.w	r7[-12],r11
80000554:	ef 4a ff f0 	st.w	r7[-16],r10
80000558:	ef 49 ff ec 	st.w	r7[-20],r9
8000055c:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) calloc(stackSize, sizeof(uint32_t)); 
80000560:	30 4b       	mov	r11,4
80000562:	ee fc ff ec 	ld.w	r12,r7[-20]
80000566:	f0 1f 00 2b 	mcall	80000610 <ROSA_taskCreate+0xcc>
8000056a:	18 98       	mov	r8,r12
8000056c:	ef 48 ff fc 	st.w	r7[-4],r8
	
	*pth = (ROSA_taskHandle_t *) malloc(sizeof(ROSA_taskHandle_t));			
80000570:	37 4c       	mov	r12,116
80000572:	f0 1f 00 29 	mcall	80000614 <ROSA_taskCreate+0xd0>
80000576:	18 98       	mov	r8,r12
80000578:	10 99       	mov	r9,r8
8000057a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000057e:	91 09       	st.w	r8[0x0],r9
	(*pth)->priority = priority;
80000580:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000584:	70 09       	ld.w	r9,r8[0x0]
80000586:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000058a:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
8000058e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000592:	70 0a       	ld.w	r10,r8[0x0]
80000594:	30 08       	mov	r8,0
80000596:	30 09       	mov	r9,0
80000598:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
8000059c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005a0:	70 09       	ld.w	r9,r8[0x0]
800005a2:	30 08       	mov	r8,0
800005a4:	f3 68 00 70 	st.b	r9[112],r8
	(*pth)->originalPriority = priority;
800005a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005ac:	70 09       	ld.w	r9,r8[0x0]
800005ae:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800005b2:	f3 68 00 71 	st.b	r9[113],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
800005b6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800005ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
800005be:	72 0c       	ld.w	r12,r9[0x0]
800005c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800005c4:	ee fa ff f0 	ld.w	r10,r7[-16]
800005c8:	ee fb ff f4 	ld.w	r11,r7[-12]
800005cc:	f0 1f 00 13 	mcall	80000618 <ROSA_taskCreate+0xd4>
	
	rqi(pth);
800005d0:	ee fc ff f8 	ld.w	r12,r7[-8]
800005d4:	f0 1f 00 12 	mcall	8000061c <ROSA_taskCreate+0xd8>
	
	if (EXECTASK != NULL) {
800005d8:	49 28       	lddpc	r8,80000620 <ROSA_taskCreate+0xdc>
800005da:	70 08       	ld.w	r8,r8[0x0]
800005dc:	58 08       	cp.w	r8,0
800005de:	c1 40       	breq	80000606 <ROSA_taskCreate+0xc2>
		if (EXECTASK->priority < priority) {
800005e0:	49 08       	lddpc	r8,80000620 <ROSA_taskCreate+0xdc>
800005e2:	70 08       	ld.w	r8,r8[0x0]
800005e4:	f1 38 00 64 	ld.ub	r8,r8[100]
800005e8:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800005ec:	f0 09 18 00 	cp.b	r9,r8
800005f0:	e0 88 00 0b 	brls	80000606 <ROSA_taskCreate+0xc2>
			PREEMPTASK = PA[priority];
800005f4:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800005f8:	48 b8       	lddpc	r8,80000624 <ROSA_taskCreate+0xe0>
800005fa:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800005fe:	48 b8       	lddpc	r8,80000628 <ROSA_taskCreate+0xe4>
80000600:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
80000602:	f0 1f 00 0b 	mcall	8000062c <ROSA_taskCreate+0xe8>
		}	
	}
	
	return 0;
80000606:	30 08       	mov	r8,0
}
80000608:	10 9c       	mov	r12,r8
8000060a:	2f ad       	sub	sp,-24
8000060c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000610:	80 00       	ld.sh	r0,r0[0x0]
80000612:	0f 3c       	ld.ub	r12,r7++
80000614:	80 00       	ld.sh	r0,r0[0x0]
80000616:	0f b4       	ld.ub	r4,r7[0x3]
80000618:	80 00       	ld.sh	r0,r0[0x0]
8000061a:	04 90       	mov	r0,r2
8000061c:	80 00       	ld.sh	r0,r0[0x0]
8000061e:	03 58       	ld.sh	r8,--r1
80000620:	00 00       	add	r0,r0
80000622:	05 a4       	ld.ub	r4,r2[0x2]
80000624:	00 00       	add	r0,r0
80000626:	05 70       	ld.ub	r0,--r2
80000628:	00 00       	add	r0,r0
8000062a:	05 a0       	ld.ub	r0,r2[0x2]
8000062c:	80 00       	ld.sh	r0,r0[0x0]
8000062e:	06 f2       	st.b	--r3,r2

80000630 <ROSA_start>:
80000630:	4b 5c       	lddpc	r12,80000704 <_yield+0xa>
80000632:	4b 6b       	lddpc	r11,80000708 <_yield+0xe>
80000634:	78 0c       	ld.w	r12,r12[0x0]
80000636:	97 0c       	st.w	r11[0x0],r12
80000638:	78 50       	ld.w	r0,r12[0x14]
8000063a:	1a d0       	st.w	--sp,r0
8000063c:	e5 cd 20 00 	ldmts	sp,sp
80000640:	1b 00       	ld.w	r0,sp++
80000642:	78 2e       	ld.w	lr,r12[0x8]
80000644:	78 80       	ld.w	r0,r12[0x20]
80000646:	e3 b0 00 00 	mtsr	0x0,r0
8000064a:	79 80       	ld.w	r0,r12[0x60]
8000064c:	79 71       	ld.w	r1,r12[0x5c]
8000064e:	79 62       	ld.w	r2,r12[0x58]
80000650:	79 53       	ld.w	r3,r12[0x54]
80000652:	79 44       	ld.w	r4,r12[0x50]
80000654:	79 35       	ld.w	r5,r12[0x4c]
80000656:	79 26       	ld.w	r6,r12[0x48]
80000658:	79 17       	ld.w	r7,r12[0x44]
8000065a:	79 08       	ld.w	r8,r12[0x40]
8000065c:	78 f9       	ld.w	r9,r12[0x3c]
8000065e:	78 ea       	ld.w	r10,r12[0x38]
80000660:	78 db       	ld.w	r11,r12[0x34]
80000662:	78 cc       	ld.w	r12,r12[0x30]
80000664:	1c 9f       	mov	pc,lr

80000666 <contextInit>:
80000666:	78 20       	ld.w	r0,r12[0x8]
80000668:	99 a0       	st.w	r12[0x28],r0
8000066a:	30 00       	mov	r0,0
8000066c:	f9 40 00 60 	st.w	r12[96],r0
80000670:	f9 40 00 5c 	st.w	r12[92],r0
80000674:	f9 40 00 58 	st.w	r12[88],r0
80000678:	f9 40 00 54 	st.w	r12[84],r0
8000067c:	f9 40 00 50 	st.w	r12[80],r0
80000680:	f9 40 00 4c 	st.w	r12[76],r0
80000684:	f9 40 00 48 	st.w	r12[72],r0
80000688:	f9 40 00 44 	st.w	r12[68],r0
8000068c:	f9 40 00 40 	st.w	r12[64],r0
80000690:	99 f0       	st.w	r12[0x3c],r0
80000692:	99 e0       	st.w	r12[0x38],r0
80000694:	99 d0       	st.w	r12[0x34],r0
80000696:	99 c0       	st.w	r12[0x30],r0
80000698:	1c 9f       	mov	pc,lr

8000069a <contextSave>:
8000069a:	d2 01       	pushm	r12
8000069c:	49 bc       	lddpc	r12,80000708 <_yield+0xe>
8000069e:	78 0c       	ld.w	r12,r12[0x0]
800006a0:	99 60       	st.w	r12[0x18],r0
800006a2:	99 71       	st.w	r12[0x1c],r1
800006a4:	1b 00       	ld.w	r0,sp++
800006a6:	99 c0       	st.w	r12[0x30],r0
800006a8:	7a 00       	ld.w	r0,sp[0x0]
800006aa:	99 80       	st.w	r12[0x20],r0
800006ac:	33 40       	mov	r0,52
800006ae:	18 00       	add	r0,r12
800006b0:	ed c0 0f ff 	stmts	r0,r0-r11
800006b4:	1a 90       	mov	r0,sp
800006b6:	1a d0       	st.w	--sp,r0
800006b8:	ed cd 20 00 	stmts	sp,sp
800006bc:	1b 01       	ld.w	r1,sp++
800006be:	62 00       	ld.w	r0,r1[0x0]
800006c0:	99 90       	st.w	r12[0x24],r0
800006c2:	99 a0       	st.w	r12[0x28],r0
800006c4:	2f c1       	sub	r1,-4
800006c6:	99 51       	st.w	r12[0x14],r1
800006c8:	1c 9f       	mov	pc,lr

800006ca <contextRestore>:
800006ca:	49 0c       	lddpc	r12,80000708 <_yield+0xe>
800006cc:	78 0c       	ld.w	r12,r12[0x0]
800006ce:	78 51       	ld.w	r1,r12[0x14]
800006d0:	1a d1       	st.w	--sp,r1
800006d2:	e5 cd 20 00 	ldmts	sp,sp
800006d6:	1b 01       	ld.w	r1,sp++
800006d8:	78 ae       	ld.w	lr,r12[0x28]
800006da:	78 90       	ld.w	r0,r12[0x24]
800006dc:	9b 10       	st.w	sp[0x4],r0
800006de:	33 40       	mov	r0,52
800006e0:	18 00       	add	r0,r12
800006e2:	e5 c0 0f ff 	ldmts	r0,r0-r11
800006e6:	78 80       	ld.w	r0,r12[0x20]
800006e8:	9b 00       	st.w	sp[0x0],r0
800006ea:	78 60       	ld.w	r0,r12[0x18]
800006ec:	78 71       	ld.w	r1,r12[0x1c]
800006ee:	78 cc       	ld.w	r12,r12[0x30]
800006f0:	d6 13       	rets

800006f2 <ROSA_yield>:
800006f2:	d4 01       	pushm	lr
800006f4:	fe ce ff fa 	sub	lr,pc,-6
800006f8:	d7 33       	scall

800006fa <_yield>:
800006fa:	cd 0f       	rcall	8000069a <contextSave>
800006fc:	f0 1f 00 04 	mcall	8000070c <_yield+0x12>
80000700:	ce 5f       	rcall	800006ca <contextRestore>
80000702:	00 00       	add	r0,r0
80000704:	00 00       	add	r0,r0
80000706:	05 6c       	ld.uh	r12,--r2
80000708:	00 00       	add	r0,r0
8000070a:	05 a4       	ld.ub	r4,r2[0x2]
8000070c:	80 00       	ld.sh	r0,r0[0x0]
8000070e:	07 10       	ld.sh	r0,r3++

80000710 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000710:	eb cd 40 80 	pushm	r7,lr
80000714:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK == NULL) {
80000716:	48 f8       	lddpc	r8,80000750 <scheduler+0x40>
80000718:	70 08       	ld.w	r8,r8[0x0]
8000071a:	58 08       	cp.w	r8,0
8000071c:	c1 11       	brne	8000073e <scheduler+0x2e>
		PA[EXECTASK->priority] = EXECTASK;
8000071e:	48 e8       	lddpc	r8,80000754 <scheduler+0x44>
80000720:	70 08       	ld.w	r8,r8[0x0]
80000722:	f1 38 00 64 	ld.ub	r8,r8[100]
80000726:	10 99       	mov	r9,r8
80000728:	48 b8       	lddpc	r8,80000754 <scheduler+0x44>
8000072a:	70 0a       	ld.w	r10,r8[0x0]
8000072c:	48 b8       	lddpc	r8,80000758 <scheduler+0x48>
8000072e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		EXECTASK = EXECTASK->nexttcb;
80000732:	48 98       	lddpc	r8,80000754 <scheduler+0x44>
80000734:	70 08       	ld.w	r8,r8[0x0]
80000736:	70 09       	ld.w	r9,r8[0x0]
80000738:	48 78       	lddpc	r8,80000754 <scheduler+0x44>
8000073a:	91 09       	st.w	r8[0x0],r9
8000073c:	c0 88       	rjmp	8000074c <scheduler+0x3c>
	}
	else {
		EXECTASK = PREEMPTASK;
8000073e:	48 58       	lddpc	r8,80000750 <scheduler+0x40>
80000740:	70 09       	ld.w	r9,r8[0x0]
80000742:	48 58       	lddpc	r8,80000754 <scheduler+0x44>
80000744:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
80000746:	48 38       	lddpc	r8,80000750 <scheduler+0x40>
80000748:	30 09       	mov	r9,0
8000074a:	91 09       	st.w	r8[0x0],r9
	}
}
8000074c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000750:	00 00       	add	r0,r0
80000752:	05 a0       	ld.ub	r0,r2[0x2]
80000754:	00 00       	add	r0,r0
80000756:	05 a4       	ld.ub	r4,r2[0x2]
80000758:	00 00       	add	r0,r0
8000075a:	05 70       	ld.ub	r0,--r2

8000075c <ROSA_startScheduler>:

void ROSA_startScheduler(void)
{
8000075c:	eb cd 40 80 	pushm	r7,lr
80000760:	1a 97       	mov	r7,sp
80000762:	20 1d       	sub	sp,4
	int i = MAXNPRIO;
80000764:	30 c8       	mov	r8,12
80000766:	ef 48 ff fc 	st.w	r7[-4],r8
	
	while (PA[--i] == NULL) {
8000076a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000076e:	20 18       	sub	r8,1
80000770:	ef 48 ff fc 	st.w	r7[-4],r8
80000774:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000778:	48 98       	lddpc	r8,8000079c <ROSA_startScheduler+0x40>
8000077a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000077e:	58 08       	cp.w	r8,0
80000780:	cf 50       	breq	8000076a <ROSA_startScheduler+0xe>
		;
	}
	
	TCBLIST = PA[i]->nexttcb;
80000782:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000786:	48 68       	lddpc	r8,8000079c <ROSA_startScheduler+0x40>
80000788:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000078c:	70 09       	ld.w	r9,r8[0x0]
8000078e:	48 58       	lddpc	r8,800007a0 <ROSA_startScheduler+0x44>
80000790:	91 09       	st.w	r8[0x0],r9
	
	ROSA_start();
80000792:	f0 1f 00 05 	mcall	800007a4 <ROSA_startScheduler+0x48>
}
80000796:	2f fd       	sub	sp,-4
80000798:	e3 cd 80 80 	ldm	sp++,r7,pc
8000079c:	00 00       	add	r0,r0
8000079e:	05 70       	ld.ub	r0,--r2
800007a0:	00 00       	add	r0,r0
800007a2:	05 6c       	ld.uh	r12,--r2
800007a4:	80 00       	ld.sh	r0,r0[0x0]
800007a6:	06 30       	cp.w	r0,r3

800007a8 <C.0.9414>:
800007a8:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

800007b8 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
800007b8:	eb cd 40 80 	pushm	r7,lr
800007bc:	1a 97       	mov	r7,sp
800007be:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
800007c0:	fe 78 38 00 	mov	r8,-51200
800007c4:	ef 48 ff fc 	st.w	r7[-4],r8

	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
800007c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007cc:	70 88       	ld.w	r8,r8[0x20]
800007ce:	ef 48 ff f8 	st.w	r7[-8],r8
	//if(sr & AVR32_TC_CPCS_MASK)
		//ROSA_yieldFromISR();
}
800007d2:	2f ed       	sub	sp,-8
800007d4:	e3 cd 40 80 	ldm	sp++,r7,lr
800007d8:	d6 03       	rete
800007da:	d7 03       	nop

800007dc <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
800007dc:	eb cd 40 80 	pushm	r7,lr
800007e0:	1a 97       	mov	r7,sp
800007e2:	20 7d       	sub	sp,28
800007e4:	ef 4c ff e4 	st.w	r7[-28],r12

	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
800007e8:	4a 48       	lddpc	r8,80000878 <timerPeriodSet+0x9c>
800007ea:	ee ca 00 18 	sub	r10,r7,24
800007ee:	10 9b       	mov	r11,r8
800007f0:	f6 e8 00 00 	ld.d	r8,r11[0]
800007f4:	f4 e9 00 00 	st.d	r10[0],r8
800007f8:	f6 e8 00 08 	ld.d	r8,r11[8]
800007fc:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000800:	30 48       	mov	r8,4
80000802:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80000806:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000080a:	20 18       	sub	r8,1
8000080c:	a3 68       	lsl	r8,0x2
8000080e:	ee 08 00 08 	add	r8,r7,r8
80000812:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000816:	e0 68 1b 00 	mov	r8,6912
8000081a:	ea 18 00 b7 	orh	r8,0xb7
8000081e:	f0 09 0c 08 	divs	r8,r8,r9
80000822:	10 99       	mov	r9,r8
80000824:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000828:	b1 39       	mul	r9,r8
8000082a:	e0 68 4d d3 	mov	r8,19923
8000082e:	ea 18 10 62 	orh	r8,0x1062
80000832:	f2 08 06 48 	mulu.d	r8,r9,r8
80000836:	f2 08 16 06 	lsr	r8,r9,0x6
8000083a:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
8000083e:	ee fc ff fc 	ld.w	r12,r7[-4]
80000842:	f0 1f 00 0f 	mcall	8000087c <timerPeriodSet+0xa0>
	timerRCSet(rc);
80000846:	ee fc ff f8 	ld.w	r12,r7[-8]
8000084a:	f0 1f 00 0e 	mcall	80000880 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
8000084e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000852:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000856:	f2 08 02 4a 	mul	r10,r9,r8
8000085a:	e0 68 9f 81 	mov	r8,40833
8000085e:	ea 18 16 5e 	orh	r8,0x165e
80000862:	f4 08 04 48 	muls.d	r8,r10,r8
80000866:	b5 49       	asr	r9,0x14
80000868:	f4 08 14 1f 	asr	r8,r10,0x1f
8000086c:	f2 08 01 08 	sub	r8,r9,r8
}
80000870:	10 9c       	mov	r12,r8
80000872:	2f 9d       	sub	sp,-28
80000874:	e3 cd 80 80 	ldm	sp++,r7,pc
80000878:	80 00       	ld.sh	r0,r0[0x0]
8000087a:	07 a8       	ld.ub	r8,r3[0x2]
8000087c:	80 00       	ld.sh	r0,r0[0x0]
8000087e:	0e 78       	tst	r8,r7
80000880:	80 00       	ld.sh	r0,r0[0x0]
80000882:	0e 62       	and	r2,r7

80000884 <buttonInit>:
80000884:	eb cd 40 80 	pushm	r7,lr
80000888:	1a 97       	mov	r7,sp
8000088a:	30 1b       	mov	r11,1
8000088c:	35 8c       	mov	r12,88
8000088e:	f0 1f 00 07 	mcall	800008a8 <buttonInit+0x24>
80000892:	30 1b       	mov	r11,1
80000894:	35 5c       	mov	r12,85
80000896:	f0 1f 00 05 	mcall	800008a8 <buttonInit+0x24>
8000089a:	30 1b       	mov	r11,1
8000089c:	35 2c       	mov	r12,82
8000089e:	f0 1f 00 03 	mcall	800008a8 <buttonInit+0x24>
800008a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800008a6:	00 00       	add	r0,r0
800008a8:	80 00       	ld.sh	r0,r0[0x0]
800008aa:	09 18       	ld.sh	r8,r4++

800008ac <joystickInit>:
800008ac:	eb cd 40 80 	pushm	r7,lr
800008b0:	1a 97       	mov	r7,sp
800008b2:	30 1b       	mov	r11,1
800008b4:	31 bc       	mov	r12,27
800008b6:	f0 1f 00 0b 	mcall	800008e0 <joystickInit+0x34>
800008ba:	30 1b       	mov	r11,1
800008bc:	31 9c       	mov	r12,25
800008be:	f0 1f 00 09 	mcall	800008e0 <joystickInit+0x34>
800008c2:	30 1b       	mov	r11,1
800008c4:	31 cc       	mov	r12,28
800008c6:	f0 1f 00 07 	mcall	800008e0 <joystickInit+0x34>
800008ca:	30 1b       	mov	r11,1
800008cc:	31 4c       	mov	r12,20
800008ce:	f0 1f 00 05 	mcall	800008e0 <joystickInit+0x34>
800008d2:	30 1b       	mov	r11,1
800008d4:	31 ac       	mov	r12,26
800008d6:	f0 1f 00 03 	mcall	800008e0 <joystickInit+0x34>
800008da:	e3 cd 80 80 	ldm	sp++,r7,pc
800008de:	00 00       	add	r0,r0
800008e0:	80 00       	ld.sh	r0,r0[0x0]
800008e2:	09 18       	ld.sh	r8,r4++

800008e4 <delay_ms>:
800008e4:	eb cd 40 80 	pushm	r7,lr
800008e8:	1a 97       	mov	r7,sp
800008ea:	20 2d       	sub	sp,8
800008ec:	ef 4c ff f8 	st.w	r7[-8],r12
800008f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008f4:	e0 69 04 42 	mov	r9,1090
800008f8:	b3 38       	mul	r8,r9
800008fa:	ef 48 ff fc 	st.w	r7[-4],r8
800008fe:	c0 68       	rjmp	8000090a <delay_ms+0x26>
80000900:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000904:	20 18       	sub	r8,1
80000906:	ef 48 ff fc 	st.w	r7[-4],r8
8000090a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000090e:	58 08       	cp.w	r8,0
80000910:	cf 81       	brne	80000900 <delay_ms+0x1c>
80000912:	2f ed       	sub	sp,-8
80000914:	e3 cd 80 80 	ldm	sp++,r7,pc

80000918 <gpioInit>:
80000918:	eb cd 40 80 	pushm	r7,lr
8000091c:	1a 97       	mov	r7,sp
8000091e:	20 7d       	sub	sp,28
80000920:	ef 4c ff ec 	st.w	r7[-20],r12
80000924:	ef 4b ff e8 	st.w	r7[-24],r11
80000928:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000092c:	a5 58       	asr	r8,0x5
8000092e:	ef 48 ff f4 	st.w	r7[-12],r8
80000932:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000936:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000093a:	ef 48 ff fc 	st.w	r7[-4],r8
8000093e:	30 19       	mov	r9,1
80000940:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000944:	f2 08 09 48 	lsl	r8,r9,r8
80000948:	ef 48 ff f8 	st.w	r7[-8],r8
8000094c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000950:	a9 68       	lsl	r8,0x8
80000952:	e0 28 f0 00 	sub	r8,61440
80000956:	ef 48 ff f0 	st.w	r7[-16],r8
8000095a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000095e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000962:	91 19       	st.w	r8[0x4],r9
80000964:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000968:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000096c:	91 69       	st.w	r8[0x18],r9
8000096e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000972:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000976:	91 a9       	st.w	r8[0x28],r9
80000978:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000097c:	ef 48 ff e4 	st.w	r7[-28],r8
80000980:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000984:	58 08       	cp.w	r8,0
80000986:	c0 60       	breq	80000992 <gpioInit+0x7a>
80000988:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000098c:	58 18       	cp.w	r8,1
8000098e:	c0 90       	breq	800009a0 <gpioInit+0x88>
80000990:	c0 f8       	rjmp	800009ae <gpioInit+0x96>
80000992:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000996:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000099a:	f1 49 00 44 	st.w	r8[68],r9
8000099e:	c0 e8       	rjmp	800009ba <gpioInit+0xa2>
800009a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009a8:	f1 49 00 48 	st.w	r8[72],r9
800009ac:	c0 78       	rjmp	800009ba <gpioInit+0xa2>
800009ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009b2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800009b6:	f1 49 00 48 	st.w	r8[72],r9
800009ba:	2f 9d       	sub	sp,-28
800009bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800009c0 <gpioClear>:
800009c0:	eb cd 40 80 	pushm	r7,lr
800009c4:	1a 97       	mov	r7,sp
800009c6:	20 5d       	sub	sp,20
800009c8:	ef 4c ff ec 	st.w	r7[-20],r12
800009cc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800009d0:	a5 58       	asr	r8,0x5
800009d2:	ef 48 ff f4 	st.w	r7[-12],r8
800009d6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800009da:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800009de:	ef 48 ff fc 	st.w	r7[-4],r8
800009e2:	30 19       	mov	r9,1
800009e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009e8:	f2 08 09 48 	lsl	r8,r9,r8
800009ec:	ef 48 ff f8 	st.w	r7[-8],r8
800009f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009f4:	a9 68       	lsl	r8,0x8
800009f6:	e0 28 f0 00 	sub	r8,61440
800009fa:	ef 48 ff f0 	st.w	r7[-16],r8
800009fe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a02:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000a06:	f1 49 00 58 	st.w	r8[88],r9
80000a0a:	2f bd       	sub	sp,-20
80000a0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000a10 <gpioSet>:
80000a10:	eb cd 40 80 	pushm	r7,lr
80000a14:	1a 97       	mov	r7,sp
80000a16:	20 5d       	sub	sp,20
80000a18:	ef 4c ff ec 	st.w	r7[-20],r12
80000a1c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000a20:	a5 58       	asr	r8,0x5
80000a22:	ef 48 ff f4 	st.w	r7[-12],r8
80000a26:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000a2a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000a2e:	ef 48 ff fc 	st.w	r7[-4],r8
80000a32:	30 19       	mov	r9,1
80000a34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a38:	f2 08 09 48 	lsl	r8,r9,r8
80000a3c:	ef 48 ff f8 	st.w	r7[-8],r8
80000a40:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a44:	a9 68       	lsl	r8,0x8
80000a46:	e0 28 f0 00 	sub	r8,61440
80000a4a:	ef 48 ff f0 	st.w	r7[-16],r8
80000a4e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a52:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000a56:	f1 49 00 54 	st.w	r8[84],r9
80000a5a:	2f bd       	sub	sp,-20
80000a5c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000a60 <ledInit>:
80000a60:	eb cd 40 80 	pushm	r7,lr
80000a64:	1a 97       	mov	r7,sp
80000a66:	20 9d       	sub	sp,36
80000a68:	49 e8       	lddpc	r8,80000ae0 <ledInit+0x80>
80000a6a:	ee cb 00 24 	sub	r11,r7,36
80000a6e:	10 9a       	mov	r10,r8
80000a70:	f4 e8 00 00 	ld.d	r8,r10[0]
80000a74:	f6 e9 00 00 	st.d	r11[0],r8
80000a78:	f4 e8 00 08 	ld.d	r8,r10[8]
80000a7c:	f6 e9 00 08 	st.d	r11[8],r8
80000a80:	f4 e8 00 10 	ld.d	r8,r10[16]
80000a84:	f6 e9 00 10 	st.d	r11[16],r8
80000a88:	f4 e8 00 18 	ld.d	r8,r10[24]
80000a8c:	f6 e9 00 18 	st.d	r11[24],r8
80000a90:	30 08       	mov	r8,0
80000a92:	ef 48 ff fc 	st.w	r7[-4],r8
80000a96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a9a:	a3 68       	lsl	r8,0x2
80000a9c:	ee 08 00 08 	add	r8,r7,r8
80000aa0:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000aa4:	10 9c       	mov	r12,r8
80000aa6:	f0 1f 00 10 	mcall	80000ae4 <ledInit+0x84>
80000aaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000aae:	a3 68       	lsl	r8,0x2
80000ab0:	ee 08 00 08 	add	r8,r7,r8
80000ab4:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000ab8:	30 0b       	mov	r11,0
80000aba:	10 9c       	mov	r12,r8
80000abc:	f0 1f 00 0b 	mcall	80000ae8 <ledInit+0x88>
80000ac0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ac4:	58 78       	cp.w	r8,7
80000ac6:	5f 18       	srne	r8
80000ac8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000acc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ad0:	2f f8       	sub	r8,-1
80000ad2:	ef 48 ff fc 	st.w	r7[-4],r8
80000ad6:	58 09       	cp.w	r9,0
80000ad8:	cd f1       	brne	80000a96 <ledInit+0x36>
80000ada:	2f 7d       	sub	sp,-36
80000adc:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ae0:	80 00       	ld.sh	r0,r0[0x0]
80000ae2:	1c 00       	add	r0,lr
80000ae4:	80 00       	ld.sh	r0,r0[0x0]
80000ae6:	0b 0c       	ld.w	r12,r5++
80000ae8:	80 00       	ld.sh	r0,r0[0x0]
80000aea:	09 18       	ld.sh	r8,r4++

80000aec <ledOn>:
80000aec:	eb cd 40 80 	pushm	r7,lr
80000af0:	1a 97       	mov	r7,sp
80000af2:	20 1d       	sub	sp,4
80000af4:	ef 4c ff fc 	st.w	r7[-4],r12
80000af8:	ee fc ff fc 	ld.w	r12,r7[-4]
80000afc:	f0 1f 00 03 	mcall	80000b08 <ledOn+0x1c>
80000b00:	2f fd       	sub	sp,-4
80000b02:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b06:	00 00       	add	r0,r0
80000b08:	80 00       	ld.sh	r0,r0[0x0]
80000b0a:	09 c0       	ld.ub	r0,r4[0x4]

80000b0c <ledOff>:
80000b0c:	eb cd 40 80 	pushm	r7,lr
80000b10:	1a 97       	mov	r7,sp
80000b12:	20 1d       	sub	sp,4
80000b14:	ef 4c ff fc 	st.w	r7[-4],r12
80000b18:	ee fc ff fc 	ld.w	r12,r7[-4]
80000b1c:	f0 1f 00 03 	mcall	80000b28 <ledOff+0x1c>
80000b20:	2f fd       	sub	sp,-4
80000b22:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b26:	00 00       	add	r0,r0
80000b28:	80 00       	ld.sh	r0,r0[0x0]
80000b2a:	0a 10       	sub	r0,r5

80000b2c <potInit>:
80000b2c:	d3 01       	pushm	r11-r12
80000b2e:	e0 6c 10 00 	mov	r12,4096
80000b32:	ea 1c ff ff 	orh	r12,0xffff
80000b36:	31 6b       	mov	r11,22
80000b38:	99 2b       	st.w	r12[0x8],r11
80000b3a:	99 6b       	st.w	r12[0x18],r11
80000b3c:	99 6b       	st.w	r12[0x18],r11
80000b3e:	e0 6c 3c 00 	mov	r12,15360
80000b42:	ea 1c ff ff 	orh	r12,0xffff
80000b46:	30 1b       	mov	r11,1
80000b48:	99 0b       	st.w	r12[0x0],r11
80000b4a:	e0 6b 0f 1f 	mov	r11,3871
80000b4e:	b1 6b       	lsl	r11,0x10
80000b50:	99 1b       	st.w	r12[0x4],r11
80000b52:	30 2b       	mov	r11,2
80000b54:	99 4b       	st.w	r12[0x10],r11
80000b56:	d3 02       	popm	r11-r12
80000b58:	1c 9f       	mov	pc,lr

80000b5a <potGetValue>:
80000b5a:	d1 81       	pushm	r10-r11
80000b5c:	e0 6c 3c 00 	mov	r12,15360
80000b60:	ea 1c ff ff 	orh	r12,0xffff
80000b64:	30 2b       	mov	r11,2
80000b66:	99 0b       	st.w	r12[0x0],r11

80000b68 <a1>:
80000b68:	78 7a       	ld.w	r10,r12[0x1c]
80000b6a:	16 7a       	tst	r10,r11
80000b6c:	cf e0       	breq	80000b68 <a1>
80000b6e:	78 dc       	ld.w	r12,r12[0x34]
80000b70:	d1 82       	popm	r10-r11
80000b72:	1c 9f       	mov	pc,lr

80000b74 <usartReset>:
80000b74:	eb cd 40 80 	pushm	r7,lr
80000b78:	1a 97       	mov	r7,sp
80000b7a:	20 3d       	sub	sp,12
80000b7c:	ef 4c ff f8 	st.w	r7[-8],r12
80000b80:	f0 1f 00 16 	mcall	80000bd8 <usartReset+0x64>
80000b84:	18 98       	mov	r8,r12
80000b86:	ef 48 ff fc 	st.w	r7[-4],r8
80000b8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b8e:	58 08       	cp.w	r8,0
80000b90:	c0 30       	breq	80000b96 <usartReset+0x22>
80000b92:	f0 1f 00 13 	mcall	80000bdc <usartReset+0x68>
80000b96:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b9a:	3f f8       	mov	r8,-1
80000b9c:	93 38       	st.w	r9[0xc],r8
80000b9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ba2:	70 58       	ld.w	r8,r8[0x14]
80000ba4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ba8:	58 08       	cp.w	r8,0
80000baa:	c0 30       	breq	80000bb0 <usartReset+0x3c>
80000bac:	f0 1f 00 0d 	mcall	80000be0 <usartReset+0x6c>
80000bb0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bb4:	30 08       	mov	r8,0
80000bb6:	93 18       	st.w	r9[0x4],r8
80000bb8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bbc:	30 08       	mov	r8,0
80000bbe:	93 98       	st.w	r9[0x24],r8
80000bc0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bc4:	30 08       	mov	r8,0
80000bc6:	93 a8       	st.w	r9[0x28],r8
80000bc8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bcc:	ea 68 61 0c 	mov	r8,680204
80000bd0:	93 08       	st.w	r9[0x0],r8
80000bd2:	2f dd       	sub	sp,-12
80000bd4:	e3 cd 80 80 	ldm	sp++,r7,pc
80000bd8:	80 00       	ld.sh	r0,r0[0x0]
80000bda:	19 6e       	ld.uh	lr,--r12
80000bdc:	80 00       	ld.sh	r0,r0[0x0]
80000bde:	19 66       	ld.uh	r6,--r12
80000be0:	80 00       	ld.sh	r0,r0[0x0]
80000be2:	19 6a       	ld.uh	r10,--r12

80000be4 <usartSetBaudrate>:
80000be4:	eb cd 40 80 	pushm	r7,lr
80000be8:	1a 97       	mov	r7,sp
80000bea:	20 bd       	sub	sp,44
80000bec:	ef 4c ff ec 	st.w	r7[-20],r12
80000bf0:	ef 4b ff e8 	st.w	r7[-24],r11
80000bf4:	ef 4a ff e4 	st.w	r7[-28],r10
80000bf8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000bfc:	f0 09 15 04 	lsl	r9,r8,0x4
80000c00:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c04:	10 39       	cp.w	r9,r8
80000c06:	e0 8b 00 06 	brhi	80000c12 <usartSetBaudrate+0x2e>
80000c0a:	31 09       	mov	r9,16
80000c0c:	ef 49 ff d4 	st.w	r7[-44],r9
80000c10:	c0 48       	rjmp	80000c18 <usartSetBaudrate+0x34>
80000c12:	30 88       	mov	r8,8
80000c14:	ef 48 ff d4 	st.w	r7[-44],r8
80000c18:	ee f9 ff d4 	ld.w	r9,r7[-44]
80000c1c:	ef 49 ff f0 	st.w	r7[-16],r9
80000c20:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c24:	f0 0a 15 03 	lsl	r10,r8,0x3
80000c28:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000c2c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000c30:	f2 08 02 48 	mul	r8,r9,r8
80000c34:	a1 98       	lsr	r8,0x1
80000c36:	10 0a       	add	r10,r8
80000c38:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000c3c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000c40:	f2 08 02 48 	mul	r8,r9,r8
80000c44:	f4 08 0d 08 	divu	r8,r10,r8
80000c48:	ef 48 ff f4 	st.w	r7[-12],r8
80000c4c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c50:	a3 98       	lsr	r8,0x3
80000c52:	ef 48 ff f8 	st.w	r7[-8],r8
80000c56:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c5a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000c5e:	ef 48 ff fc 	st.w	r7[-4],r8
80000c62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c66:	58 08       	cp.w	r8,0
80000c68:	c0 70       	breq	80000c76 <usartSetBaudrate+0x92>
80000c6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c6e:	e0 48 ff ff 	cp.w	r8,65535
80000c72:	e0 88 00 06 	brls	80000c7e <usartSetBaudrate+0x9a>
80000c76:	30 18       	mov	r8,1
80000c78:	ef 48 ff d8 	st.w	r7[-40],r8
80000c7c:	c2 c8       	rjmp	80000cd4 <usartSetBaudrate+0xf0>
80000c7e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c82:	70 18       	ld.w	r8,r8[0x4]
80000c84:	10 99       	mov	r9,r8
80000c86:	e4 19 ff f7 	andh	r9,0xfff7
80000c8a:	e0 19 fe cf 	andl	r9,0xfecf
80000c8e:	ef 49 ff dc 	st.w	r7[-36],r9
80000c92:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c96:	59 08       	cp.w	r8,16
80000c98:	c0 60       	breq	80000ca4 <usartSetBaudrate+0xc0>
80000c9a:	e8 68 00 00 	mov	r8,524288
80000c9e:	ef 48 ff e0 	st.w	r7[-32],r8
80000ca2:	c0 48       	rjmp	80000caa <usartSetBaudrate+0xc6>
80000ca4:	30 09       	mov	r9,0
80000ca6:	ef 49 ff e0 	st.w	r7[-32],r9
80000caa:	ee f9 ff dc 	ld.w	r9,r7[-36]
80000cae:	ee f8 ff e0 	ld.w	r8,r7[-32]
80000cb2:	10 49       	or	r9,r8
80000cb4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000cb8:	91 19       	st.w	r8[0x4],r9
80000cba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cbe:	f0 09 15 10 	lsl	r9,r8,0x10
80000cc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cc6:	10 49       	or	r9,r8
80000cc8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ccc:	91 89       	st.w	r8[0x20],r9
80000cce:	30 09       	mov	r9,0
80000cd0:	ef 49 ff d8 	st.w	r7[-40],r9
80000cd4:	ee f8 ff d8 	ld.w	r8,r7[-40]
80000cd8:	10 9c       	mov	r12,r8
80000cda:	2f 5d       	sub	sp,-44
80000cdc:	e3 cd 80 80 	ldm	sp++,r7,pc

80000ce0 <usartInit>:
80000ce0:	eb cd 40 80 	pushm	r7,lr
80000ce4:	1a 97       	mov	r7,sp
80000ce6:	20 4d       	sub	sp,16
80000ce8:	ef 4c ff f8 	st.w	r7[-8],r12
80000cec:	ef 4b ff f4 	st.w	r7[-12],r11
80000cf0:	ef 4a ff f0 	st.w	r7[-16],r10
80000cf4:	fe 78 10 00 	mov	r8,-61440
80000cf8:	ef 48 ff fc 	st.w	r7[-4],r8
80000cfc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000d00:	30 18       	mov	r8,1
80000d02:	93 28       	st.w	r9[0x8],r8
80000d04:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000d08:	30 28       	mov	r8,2
80000d0a:	93 28       	st.w	r9[0x8],r8
80000d0c:	ee fc ff f8 	ld.w	r12,r7[-8]
80000d10:	f0 1f 00 3b 	mcall	80000dfc <usartInit+0x11c>
80000d14:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000d18:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d1c:	70 08       	ld.w	r8,r8[0x0]
80000d1e:	12 9a       	mov	r10,r9
80000d20:	10 9b       	mov	r11,r8
80000d22:	ee fc ff f8 	ld.w	r12,r7[-8]
80000d26:	f0 1f 00 37 	mcall	80000e00 <usartInit+0x120>
80000d2a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d2e:	11 c9       	ld.ub	r9,r8[0x4]
80000d30:	30 98       	mov	r8,9
80000d32:	f0 09 18 00 	cp.b	r9,r8
80000d36:	c0 a1       	brne	80000d4a <usartInit+0x6a>
80000d38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d3c:	70 18       	ld.w	r8,r8[0x4]
80000d3e:	10 99       	mov	r9,r8
80000d40:	b1 b9       	sbr	r9,0x11
80000d42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d46:	91 19       	st.w	r8[0x4],r9
80000d48:	c0 d8       	rjmp	80000d62 <usartInit+0x82>
80000d4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d4e:	70 19       	ld.w	r9,r8[0x4]
80000d50:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d54:	11 c8       	ld.ub	r8,r8[0x4]
80000d56:	20 58       	sub	r8,5
80000d58:	a7 68       	lsl	r8,0x6
80000d5a:	10 49       	or	r9,r8
80000d5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d60:	91 19       	st.w	r8[0x4],r9
80000d62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d66:	70 1a       	ld.w	r10,r8[0x4]
80000d68:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d6c:	11 d8       	ld.ub	r8,r8[0x5]
80000d6e:	f0 09 15 09 	lsl	r9,r8,0x9
80000d72:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d76:	f1 38 00 08 	ld.ub	r8,r8[8]
80000d7a:	af 68       	lsl	r8,0xe
80000d7c:	f3 e8 10 08 	or	r8,r9,r8
80000d80:	f5 e8 10 09 	or	r9,r10,r8
80000d84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d88:	91 19       	st.w	r8[0x4],r9
80000d8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d8e:	90 39       	ld.sh	r9,r8[0x6]
80000d90:	30 28       	mov	r8,2
80000d92:	f0 09 19 00 	cp.h	r9,r8
80000d96:	e0 88 00 14 	brls	80000dbe <usartInit+0xde>
80000d9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000d9e:	70 18       	ld.w	r8,r8[0x4]
80000da0:	10 99       	mov	r9,r8
80000da2:	ad b9       	sbr	r9,0xd
80000da4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000da8:	91 19       	st.w	r8[0x4],r9
80000daa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000dae:	90 38       	ld.sh	r8,r8[0x6]
80000db0:	5c 78       	castu.h	r8
80000db2:	20 28       	sub	r8,2
80000db4:	10 99       	mov	r9,r8
80000db6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dba:	91 a9       	st.w	r8[0x28],r9
80000dbc:	c0 d8       	rjmp	80000dd6 <usartInit+0xf6>
80000dbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dc2:	70 19       	ld.w	r9,r8[0x4]
80000dc4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000dc8:	90 38       	ld.sh	r8,r8[0x6]
80000dca:	5c 78       	castu.h	r8
80000dcc:	ad 68       	lsl	r8,0xc
80000dce:	10 49       	or	r9,r8
80000dd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dd4:	91 19       	st.w	r8[0x4],r9
80000dd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000dda:	70 18       	ld.w	r8,r8[0x4]
80000ddc:	10 99       	mov	r9,r8
80000dde:	e0 19 ff f0 	andl	r9,0xfff0
80000de2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000de6:	91 19       	st.w	r8[0x4],r9
80000de8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000dec:	35 08       	mov	r8,80
80000dee:	93 08       	st.w	r9[0x0],r8
80000df0:	30 08       	mov	r8,0
80000df2:	10 9c       	mov	r12,r8
80000df4:	2f cd       	sub	sp,-16
80000df6:	e3 cd 80 80 	ldm	sp++,r7,pc
80000dfa:	00 00       	add	r0,r0
80000dfc:	80 00       	ld.sh	r0,r0[0x0]
80000dfe:	0b 74       	ld.ub	r4,--r5
80000e00:	80 00       	ld.sh	r0,r0[0x0]
80000e02:	0b e4       	ld.ub	r4,r5[0x6]

80000e04 <timerInit>:
80000e04:	d5 01       	pushm	r11,lr
80000e06:	d2 01       	pushm	r12
80000e08:	f0 1f 00 28 	mcall	80000ea8 <timerClearInterrupt+0x10>
80000e0c:	f0 1f 00 28 	mcall	80000eac <timerClearInterrupt+0x14>
80000e10:	e0 6c 38 00 	mov	r12,14336
80000e14:	ea 1c ff ff 	orh	r12,0xffff
80000e18:	e0 6b c0 00 	mov	r11,49152
80000e1c:	ea 1b 00 00 	orh	r11,0x0
80000e20:	99 1b       	st.w	r12[0x4],r11
80000e22:	30 1b       	mov	r11,1
80000e24:	a5 6b       	lsl	r11,0x4
80000e26:	99 9b       	st.w	r12[0x24],r11
80000e28:	d2 02       	popm	r12
80000e2a:	f0 1f 00 22 	mcall	80000eb0 <timerClearInterrupt+0x18>
80000e2e:	d5 02       	popm	r11,lr
80000e30:	1c 9f       	mov	pc,lr

80000e32 <timerReset>:
80000e32:	d3 01       	pushm	r11-r12
80000e34:	e0 6c 38 00 	mov	r12,14336
80000e38:	ea 1c ff ff 	orh	r12,0xffff
80000e3c:	30 5b       	mov	r11,5
80000e3e:	99 0b       	st.w	r12[0x0],r11
80000e40:	e0 6b 00 08 	mov	r11,8
80000e44:	ea 1b 00 00 	orh	r11,0x0
80000e48:	76 0b       	ld.w	r11,r11[0x0]
80000e4a:	99 7b       	st.w	r12[0x1c],r11
80000e4c:	d3 02       	popm	r11-r12
80000e4e:	1c 9f       	mov	pc,lr

80000e50 <timerStop>:
80000e50:	d3 01       	pushm	r11-r12
80000e52:	e0 6c 38 00 	mov	r12,14336
80000e56:	ea 1c ff ff 	orh	r12,0xffff
80000e5a:	30 2b       	mov	r11,2
80000e5c:	99 0b       	st.w	r12[0x0],r11
80000e5e:	d3 02       	popm	r11-r12
80000e60:	1c 9f       	mov	pc,lr

80000e62 <timerRCSet>:
80000e62:	d3 01       	pushm	r11-r12
80000e64:	49 4b       	lddpc	r11,80000eb4 <timerClearInterrupt+0x1c>
80000e66:	97 0c       	st.w	r11[0x0],r12
80000e68:	e0 6c 38 00 	mov	r12,14336
80000e6c:	ea 1c ff ff 	orh	r12,0xffff
80000e70:	76 0b       	ld.w	r11,r11[0x0]
80000e72:	99 7b       	st.w	r12[0x1c],r11
80000e74:	d3 02       	popm	r11-r12
80000e76:	1c 9f       	mov	pc,lr

80000e78 <timerPrescaleSet>:
80000e78:	d3 81       	pushm	r10-r12
80000e7a:	49 0b       	lddpc	r11,80000eb8 <timerClearInterrupt+0x20>
80000e7c:	97 0c       	st.w	r11[0x0],r12
80000e7e:	e0 6c 38 00 	mov	r12,14336
80000e82:	ea 1c ff ff 	orh	r12,0xffff
80000e86:	78 1a       	ld.w	r10,r12[0x4]
80000e88:	3f 8b       	mov	r11,-8
80000e8a:	16 6a       	and	r10,r11
80000e8c:	48 bb       	lddpc	r11,80000eb8 <timerClearInterrupt+0x20>
80000e8e:	76 0b       	ld.w	r11,r11[0x0]
80000e90:	14 4b       	or	r11,r10
80000e92:	99 1b       	st.w	r12[0x4],r11
80000e94:	d3 82       	popm	r10-r12
80000e96:	1c 9f       	mov	pc,lr

80000e98 <timerClearInterrupt>:
80000e98:	d2 01       	pushm	r12
80000e9a:	e0 6c 38 00 	mov	r12,14336
80000e9e:	ea 1c ff ff 	orh	r12,0xffff
80000ea2:	78 8c       	ld.w	r12,r12[0x20]
80000ea4:	d2 02       	popm	r12
80000ea6:	1c 9f       	mov	pc,lr
80000ea8:	80 00       	ld.sh	r0,r0[0x0]
80000eaa:	19 66       	ld.uh	r6,--r12
80000eac:	80 00       	ld.sh	r0,r0[0x0]
80000eae:	0e 98       	mov	r8,r7
80000eb0:	80 00       	ld.sh	r0,r0[0x0]
80000eb2:	07 dc       	ld.ub	r12,r3[0x5]
80000eb4:	00 00       	add	r0,r0
80000eb6:	00 08       	add	r8,r0
80000eb8:	00 00       	add	r0,r0
80000eba:	00 0c       	add	r12,r0

80000ebc <_stext>:
80000ebc:	49 7d       	lddpc	sp,80000f18 <udata_end+0x4>
80000ebe:	49 80       	lddpc	r0,80000f1c <udata_end+0x8>
80000ec0:	1a d0       	st.w	--sp,r0
80000ec2:	e5 cd 20 00 	ldmts	sp,sp
80000ec6:	1b 00       	ld.w	r0,sp++
80000ec8:	49 60       	lddpc	r0,80000f20 <udata_end+0xc>
80000eca:	e3 b0 00 01 	mtsr	0x4,r0
80000ece:	d5 53       	csrf	0x15
80000ed0:	e0 6c 0c 00 	mov	r12,3072
80000ed4:	ea 1c ff ff 	orh	r12,0xffff
80000ed8:	e0 6b 01 07 	mov	r11,263
80000edc:	99 ab       	st.w	r12[0x28],r11
80000ede:	30 4b       	mov	r11,4
80000ee0:	99 0b       	st.w	r12[0x0],r11
80000ee2:	e0 6a 00 80 	mov	r10,128

80000ee6 <xw8>:
80000ee6:	79 5b       	ld.w	r11,r12[0x54]
80000ee8:	14 7b       	tst	r11,r10
80000eea:	cf e0       	breq	80000ee6 <xw8>
80000eec:	30 5b       	mov	r11,5
80000eee:	99 0b       	st.w	r12[0x0],r11

80000ef0 <idata_>:
80000ef0:	48 d0       	lddpc	r0,80000f24 <udata_end+0x10>
80000ef2:	48 e1       	lddpc	r1,80000f28 <udata_end+0x14>
80000ef4:	02 30       	cp.w	r0,r1
80000ef6:	c0 62       	brcc	80000f02 <idata_end>
80000ef8:	48 d2       	lddpc	r2,80000f2c <udata_end+0x18>

80000efa <idata_loop>:
80000efa:	05 04       	ld.w	r4,r2++
80000efc:	00 a4       	st.w	r0++,r4
80000efe:	02 30       	cp.w	r0,r1
80000f00:	cf d3       	brcs	80000efa <idata_loop>

80000f02 <idata_end>:
80000f02:	48 c0       	lddpc	r0,80000f30 <udata_end+0x1c>
80000f04:	48 c1       	lddpc	r1,80000f34 <udata_end+0x20>
80000f06:	02 30       	cp.w	r0,r1
80000f08:	c0 62       	brcc	80000f14 <udata_end>
80000f0a:	30 02       	mov	r2,0
80000f0c:	30 03       	mov	r3,0

80000f0e <udata_loop>:
80000f0e:	00 a2       	st.w	r0++,r2
80000f10:	02 30       	cp.w	r0,r1
80000f12:	cf e3       	brcs	80000f0e <udata_loop>

80000f14 <udata_end>:
80000f14:	48 9f       	lddpc	pc,80000f38 <udata_end+0x24>
80000f16:	00 00       	add	r0,r0
80000f18:	00 01       	add	r1,r0
80000f1a:	00 00       	add	r0,r0
80000f1c:	00 00       	add	r0,r0
80000f1e:	f0 00       	*unknown*
80000f20:	80 00       	ld.sh	r0,r0[0x0]
80000f22:	18 00       	add	r0,r12
80000f24:	00 00       	add	r0,r0
80000f26:	00 08       	add	r8,r0
80000f28:	00 00       	add	r0,r0
80000f2a:	05 18       	ld.sh	r8,r2++
80000f2c:	80 00       	ld.sh	r0,r0[0x0]
80000f2e:	1c 88       	andn	r8,lr
80000f30:	00 00       	add	r0,r0
80000f32:	05 18       	ld.sh	r8,r2++
80000f34:	00 00       	add	r0,r0
80000f36:	05 b0       	ld.ub	r0,r2[0x3]
80000f38:	80 00       	ld.sh	r0,r0[0x0]
80000f3a:	02 e0       	st.h	--r1,r0

80000f3c <calloc>:
80000f3c:	d4 01       	pushm	lr
80000f3e:	48 48       	lddpc	r8,80000f4c <calloc+0x10>
80000f40:	16 9a       	mov	r10,r11
80000f42:	18 9b       	mov	r11,r12
80000f44:	70 0c       	ld.w	r12,r8[0x0]
80000f46:	f0 1f 00 03 	mcall	80000f50 <calloc+0x14>
80000f4a:	d8 02       	popm	pc
80000f4c:	00 00       	add	r0,r0
80000f4e:	01 00       	ld.w	r0,r0++
80000f50:	80 00       	ld.sh	r0,r0[0x0]
80000f52:	0f 54       	ld.sh	r4,--r7

80000f54 <_calloc_r>:
80000f54:	d4 21       	pushm	r4-r7,lr
80000f56:	f4 0b 02 4b 	mul	r11,r10,r11
80000f5a:	f0 1f 00 15 	mcall	80000fac <_calloc_r+0x58>
80000f5e:	18 97       	mov	r7,r12
80000f60:	c2 30       	breq	80000fa6 <_calloc_r+0x52>
80000f62:	f8 fa ff fc 	ld.w	r10,r12[-4]
80000f66:	e0 1a ff fc 	andl	r10,0xfffc
80000f6a:	20 4a       	sub	r10,4
80000f6c:	e0 4a 00 24 	cp.w	r10,36
80000f70:	e0 8b 00 18 	brhi	80000fa0 <_calloc_r+0x4c>
80000f74:	18 98       	mov	r8,r12
80000f76:	59 3a       	cp.w	r10,19
80000f78:	e0 88 00 0f 	brls	80000f96 <_calloc_r+0x42>
80000f7c:	30 09       	mov	r9,0
80000f7e:	10 a9       	st.w	r8++,r9
80000f80:	10 a9       	st.w	r8++,r9
80000f82:	59 ba       	cp.w	r10,27
80000f84:	e0 88 00 09 	brls	80000f96 <_calloc_r+0x42>
80000f88:	10 a9       	st.w	r8++,r9
80000f8a:	10 a9       	st.w	r8++,r9
80000f8c:	e0 4a 00 24 	cp.w	r10,36
80000f90:	c0 31       	brne	80000f96 <_calloc_r+0x42>
80000f92:	10 a9       	st.w	r8++,r9
80000f94:	10 a9       	st.w	r8++,r9
80000f96:	30 09       	mov	r9,0
80000f98:	10 a9       	st.w	r8++,r9
80000f9a:	91 19       	st.w	r8[0x4],r9
80000f9c:	91 09       	st.w	r8[0x0],r9
80000f9e:	c0 48       	rjmp	80000fa6 <_calloc_r+0x52>
80000fa0:	30 0b       	mov	r11,0
80000fa2:	f0 1f 00 04 	mcall	80000fb0 <_calloc_r+0x5c>
80000fa6:	0e 9c       	mov	r12,r7
80000fa8:	d8 22       	popm	r4-r7,pc
80000faa:	00 00       	add	r0,r0
80000fac:	80 00       	ld.sh	r0,r0[0x0]
80000fae:	0f cc       	ld.ub	r12,r7[0x4]
80000fb0:	80 00       	ld.sh	r0,r0[0x0]
80000fb2:	14 1c       	sub	r12,r10

80000fb4 <malloc>:
80000fb4:	d4 01       	pushm	lr
80000fb6:	48 48       	lddpc	r8,80000fc4 <malloc+0x10>
80000fb8:	18 9b       	mov	r11,r12
80000fba:	70 0c       	ld.w	r12,r8[0x0]
80000fbc:	f0 1f 00 03 	mcall	80000fc8 <malloc+0x14>
80000fc0:	d8 02       	popm	pc
80000fc2:	00 00       	add	r0,r0
80000fc4:	00 00       	add	r0,r0
80000fc6:	01 00       	ld.w	r0,r0++
80000fc8:	80 00       	ld.sh	r0,r0[0x0]
80000fca:	0f cc       	ld.ub	r12,r7[0x4]

80000fcc <_malloc_r>:
80000fcc:	d4 31       	pushm	r0-r7,lr
80000fce:	f6 c8 ff f5 	sub	r8,r11,-11
80000fd2:	18 95       	mov	r5,r12
80000fd4:	10 97       	mov	r7,r8
80000fd6:	e0 17 ff f8 	andl	r7,0xfff8
80000fda:	59 68       	cp.w	r8,22
80000fdc:	f9 b7 08 10 	movls	r7,16
80000fe0:	16 37       	cp.w	r7,r11
80000fe2:	5f 38       	srlo	r8
80000fe4:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80000fe8:	c0 50       	breq	80000ff2 <_malloc_r+0x26>
80000fea:	30 c8       	mov	r8,12
80000fec:	99 38       	st.w	r12[0xc],r8
80000fee:	e0 8f 01 f3 	bral	800013d4 <_malloc_r+0x408>
80000ff2:	f0 1f 00 50 	mcall	80001130 <_malloc_r+0x164>
80000ff6:	e0 47 01 f7 	cp.w	r7,503
80000ffa:	e0 8b 00 1c 	brhi	80001032 <_malloc_r+0x66>
80000ffe:	ee 03 16 03 	lsr	r3,r7,0x3
80001002:	4c d8       	lddpc	r8,80001134 <_malloc_r+0x168>
80001004:	f0 03 00 38 	add	r8,r8,r3<<0x3
80001008:	70 36       	ld.w	r6,r8[0xc]
8000100a:	10 36       	cp.w	r6,r8
8000100c:	c0 61       	brne	80001018 <_malloc_r+0x4c>
8000100e:	ec c8 ff f8 	sub	r8,r6,-8
80001012:	70 36       	ld.w	r6,r8[0xc]
80001014:	10 36       	cp.w	r6,r8
80001016:	c0 c0       	breq	8000102e <_malloc_r+0x62>
80001018:	6c 18       	ld.w	r8,r6[0x4]
8000101a:	e0 18 ff fc 	andl	r8,0xfffc
8000101e:	6c 3a       	ld.w	r10,r6[0xc]
80001020:	ec 08 00 09 	add	r9,r6,r8
80001024:	0a 9c       	mov	r12,r5
80001026:	6c 28       	ld.w	r8,r6[0x8]
80001028:	95 28       	st.w	r10[0x8],r8
8000102a:	91 3a       	st.w	r8[0xc],r10
8000102c:	c4 68       	rjmp	800010b8 <_malloc_r+0xec>
8000102e:	2f e3       	sub	r3,-2
80001030:	c4 c8       	rjmp	800010c8 <_malloc_r+0xfc>
80001032:	ee 03 16 09 	lsr	r3,r7,0x9
80001036:	c0 41       	brne	8000103e <_malloc_r+0x72>
80001038:	ee 03 16 03 	lsr	r3,r7,0x3
8000103c:	c2 68       	rjmp	80001088 <_malloc_r+0xbc>
8000103e:	58 43       	cp.w	r3,4
80001040:	e0 8b 00 06 	brhi	8000104c <_malloc_r+0x80>
80001044:	ee 03 16 06 	lsr	r3,r7,0x6
80001048:	2c 83       	sub	r3,-56
8000104a:	c1 f8       	rjmp	80001088 <_malloc_r+0xbc>
8000104c:	59 43       	cp.w	r3,20
8000104e:	e0 8b 00 04 	brhi	80001056 <_malloc_r+0x8a>
80001052:	2a 53       	sub	r3,-91
80001054:	c1 a8       	rjmp	80001088 <_malloc_r+0xbc>
80001056:	e0 43 00 54 	cp.w	r3,84
8000105a:	e0 8b 00 06 	brhi	80001066 <_malloc_r+0x9a>
8000105e:	ee 03 16 0c 	lsr	r3,r7,0xc
80001062:	29 23       	sub	r3,-110
80001064:	c1 28       	rjmp	80001088 <_malloc_r+0xbc>
80001066:	e0 43 01 54 	cp.w	r3,340
8000106a:	e0 8b 00 06 	brhi	80001076 <_malloc_r+0xaa>
8000106e:	ee 03 16 0f 	lsr	r3,r7,0xf
80001072:	28 93       	sub	r3,-119
80001074:	c0 a8       	rjmp	80001088 <_malloc_r+0xbc>
80001076:	e0 43 05 54 	cp.w	r3,1364
8000107a:	e0 88 00 04 	brls	80001082 <_malloc_r+0xb6>
8000107e:	37 e3       	mov	r3,126
80001080:	c0 48       	rjmp	80001088 <_malloc_r+0xbc>
80001082:	ee 03 16 12 	lsr	r3,r7,0x12
80001086:	28 43       	sub	r3,-124
80001088:	4a ba       	lddpc	r10,80001134 <_malloc_r+0x168>
8000108a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000108e:	74 36       	ld.w	r6,r10[0xc]
80001090:	c1 98       	rjmp	800010c2 <_malloc_r+0xf6>
80001092:	6c 19       	ld.w	r9,r6[0x4]
80001094:	e0 19 ff fc 	andl	r9,0xfffc
80001098:	f2 07 01 0b 	sub	r11,r9,r7
8000109c:	58 fb       	cp.w	r11,15
8000109e:	e0 8a 00 04 	brle	800010a6 <_malloc_r+0xda>
800010a2:	20 13       	sub	r3,1
800010a4:	c1 18       	rjmp	800010c6 <_malloc_r+0xfa>
800010a6:	6c 38       	ld.w	r8,r6[0xc]
800010a8:	58 0b       	cp.w	r11,0
800010aa:	c0 b5       	brlt	800010c0 <_malloc_r+0xf4>
800010ac:	6c 2a       	ld.w	r10,r6[0x8]
800010ae:	ec 09 00 09 	add	r9,r6,r9
800010b2:	0a 9c       	mov	r12,r5
800010b4:	91 2a       	st.w	r8[0x8],r10
800010b6:	95 38       	st.w	r10[0xc],r8
800010b8:	72 18       	ld.w	r8,r9[0x4]
800010ba:	a1 a8       	sbr	r8,0x0
800010bc:	93 18       	st.w	r9[0x4],r8
800010be:	cb c8       	rjmp	80001236 <_malloc_r+0x26a>
800010c0:	10 96       	mov	r6,r8
800010c2:	14 36       	cp.w	r6,r10
800010c4:	ce 71       	brne	80001092 <_malloc_r+0xc6>
800010c6:	2f f3       	sub	r3,-1
800010c8:	49 ba       	lddpc	r10,80001134 <_malloc_r+0x168>
800010ca:	f4 cc ff f8 	sub	r12,r10,-8
800010ce:	78 26       	ld.w	r6,r12[0x8]
800010d0:	18 36       	cp.w	r6,r12
800010d2:	c6 e0       	breq	800011ae <_malloc_r+0x1e2>
800010d4:	6c 19       	ld.w	r9,r6[0x4]
800010d6:	e0 19 ff fc 	andl	r9,0xfffc
800010da:	f2 07 01 08 	sub	r8,r9,r7
800010de:	58 f8       	cp.w	r8,15
800010e0:	e0 89 00 90 	brgt	80001200 <_malloc_r+0x234>
800010e4:	99 3c       	st.w	r12[0xc],r12
800010e6:	99 2c       	st.w	r12[0x8],r12
800010e8:	58 08       	cp.w	r8,0
800010ea:	c0 55       	brlt	800010f4 <_malloc_r+0x128>
800010ec:	ec 09 00 09 	add	r9,r6,r9
800010f0:	0a 9c       	mov	r12,r5
800010f2:	ce 3b       	rjmp	800010b8 <_malloc_r+0xec>
800010f4:	e0 49 01 ff 	cp.w	r9,511
800010f8:	e0 8b 00 13 	brhi	8000111e <_malloc_r+0x152>
800010fc:	a3 99       	lsr	r9,0x3
800010fe:	f4 09 00 38 	add	r8,r10,r9<<0x3
80001102:	70 2b       	ld.w	r11,r8[0x8]
80001104:	8d 38       	st.w	r6[0xc],r8
80001106:	8d 2b       	st.w	r6[0x8],r11
80001108:	97 36       	st.w	r11[0xc],r6
8000110a:	91 26       	st.w	r8[0x8],r6
8000110c:	a3 49       	asr	r9,0x2
8000110e:	74 18       	ld.w	r8,r10[0x4]
80001110:	30 1b       	mov	r11,1
80001112:	f6 09 09 49 	lsl	r9,r11,r9
80001116:	f1 e9 10 09 	or	r9,r8,r9
8000111a:	95 19       	st.w	r10[0x4],r9
8000111c:	c4 98       	rjmp	800011ae <_malloc_r+0x1e2>
8000111e:	f2 0a 16 09 	lsr	r10,r9,0x9
80001122:	58 4a       	cp.w	r10,4
80001124:	e0 8b 00 0a 	brhi	80001138 <_malloc_r+0x16c>
80001128:	f2 0a 16 06 	lsr	r10,r9,0x6
8000112c:	2c 8a       	sub	r10,-56
8000112e:	c2 38       	rjmp	80001174 <_malloc_r+0x1a8>
80001130:	80 00       	ld.sh	r0,r0[0x0]
80001132:	14 2a       	rsub	r10,r10
80001134:	00 00       	add	r0,r0
80001136:	01 04       	ld.w	r4,r0++
80001138:	59 4a       	cp.w	r10,20
8000113a:	e0 8b 00 04 	brhi	80001142 <_malloc_r+0x176>
8000113e:	2a 5a       	sub	r10,-91
80001140:	c1 a8       	rjmp	80001174 <_malloc_r+0x1a8>
80001142:	e0 4a 00 54 	cp.w	r10,84
80001146:	e0 8b 00 06 	brhi	80001152 <_malloc_r+0x186>
8000114a:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000114e:	29 2a       	sub	r10,-110
80001150:	c1 28       	rjmp	80001174 <_malloc_r+0x1a8>
80001152:	e0 4a 01 54 	cp.w	r10,340
80001156:	e0 8b 00 06 	brhi	80001162 <_malloc_r+0x196>
8000115a:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000115e:	28 9a       	sub	r10,-119
80001160:	c0 a8       	rjmp	80001174 <_malloc_r+0x1a8>
80001162:	e0 4a 05 54 	cp.w	r10,1364
80001166:	e0 88 00 04 	brls	8000116e <_malloc_r+0x1a2>
8000116a:	37 ea       	mov	r10,126
8000116c:	c0 48       	rjmp	80001174 <_malloc_r+0x1a8>
8000116e:	f2 0a 16 12 	lsr	r10,r9,0x12
80001172:	28 4a       	sub	r10,-124
80001174:	4c 8b       	lddpc	r11,80001294 <_malloc_r+0x2c8>
80001176:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000117a:	68 28       	ld.w	r8,r4[0x8]
8000117c:	08 38       	cp.w	r8,r4
8000117e:	c0 e1       	brne	8000119a <_malloc_r+0x1ce>
80001180:	76 19       	ld.w	r9,r11[0x4]
80001182:	a3 4a       	asr	r10,0x2
80001184:	30 1e       	mov	lr,1
80001186:	fc 0a 09 4a 	lsl	r10,lr,r10
8000118a:	f3 ea 10 0a 	or	r10,r9,r10
8000118e:	10 99       	mov	r9,r8
80001190:	97 1a       	st.w	r11[0x4],r10
80001192:	c0 a8       	rjmp	800011a6 <_malloc_r+0x1da>
80001194:	70 28       	ld.w	r8,r8[0x8]
80001196:	08 38       	cp.w	r8,r4
80001198:	c0 60       	breq	800011a4 <_malloc_r+0x1d8>
8000119a:	70 1a       	ld.w	r10,r8[0x4]
8000119c:	e0 1a ff fc 	andl	r10,0xfffc
800011a0:	14 39       	cp.w	r9,r10
800011a2:	cf 93       	brcs	80001194 <_malloc_r+0x1c8>
800011a4:	70 39       	ld.w	r9,r8[0xc]
800011a6:	8d 39       	st.w	r6[0xc],r9
800011a8:	8d 28       	st.w	r6[0x8],r8
800011aa:	91 36       	st.w	r8[0xc],r6
800011ac:	93 26       	st.w	r9[0x8],r6
800011ae:	e6 08 14 02 	asr	r8,r3,0x2
800011b2:	30 1b       	mov	r11,1
800011b4:	4b 84       	lddpc	r4,80001294 <_malloc_r+0x2c8>
800011b6:	f6 08 09 4b 	lsl	r11,r11,r8
800011ba:	68 18       	ld.w	r8,r4[0x4]
800011bc:	10 3b       	cp.w	r11,r8
800011be:	e0 8b 00 6f 	brhi	8000129c <_malloc_r+0x2d0>
800011c2:	f7 e8 00 09 	and	r9,r11,r8
800011c6:	c0 b1       	brne	800011dc <_malloc_r+0x210>
800011c8:	e0 13 ff fc 	andl	r3,0xfffc
800011cc:	a1 7b       	lsl	r11,0x1
800011ce:	2f c3       	sub	r3,-4
800011d0:	c0 38       	rjmp	800011d6 <_malloc_r+0x20a>
800011d2:	2f c3       	sub	r3,-4
800011d4:	a1 7b       	lsl	r11,0x1
800011d6:	f7 e8 00 09 	and	r9,r11,r8
800011da:	cf c0       	breq	800011d2 <_malloc_r+0x206>
800011dc:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800011e0:	06 92       	mov	r2,r3
800011e2:	1c 91       	mov	r1,lr
800011e4:	62 36       	ld.w	r6,r1[0xc]
800011e6:	c2 e8       	rjmp	80001242 <_malloc_r+0x276>
800011e8:	6c 1a       	ld.w	r10,r6[0x4]
800011ea:	e0 1a ff fc 	andl	r10,0xfffc
800011ee:	f4 07 01 08 	sub	r8,r10,r7
800011f2:	58 f8       	cp.w	r8,15
800011f4:	e0 8a 00 15 	brle	8000121e <_malloc_r+0x252>
800011f8:	6c 3a       	ld.w	r10,r6[0xc]
800011fa:	6c 29       	ld.w	r9,r6[0x8]
800011fc:	95 29       	st.w	r10[0x8],r9
800011fe:	93 3a       	st.w	r9[0xc],r10
80001200:	0e 99       	mov	r9,r7
80001202:	ec 07 00 07 	add	r7,r6,r7
80001206:	a1 a9       	sbr	r9,0x0
80001208:	99 37       	st.w	r12[0xc],r7
8000120a:	99 27       	st.w	r12[0x8],r7
8000120c:	8d 19       	st.w	r6[0x4],r9
8000120e:	ee 08 09 08 	st.w	r7[r8],r8
80001212:	8f 2c       	st.w	r7[0x8],r12
80001214:	8f 3c       	st.w	r7[0xc],r12
80001216:	a1 a8       	sbr	r8,0x0
80001218:	0a 9c       	mov	r12,r5
8000121a:	8f 18       	st.w	r7[0x4],r8
8000121c:	c0 d8       	rjmp	80001236 <_malloc_r+0x26a>
8000121e:	6c 39       	ld.w	r9,r6[0xc]
80001220:	58 08       	cp.w	r8,0
80001222:	c0 f5       	brlt	80001240 <_malloc_r+0x274>
80001224:	ec 0a 00 0a 	add	r10,r6,r10
80001228:	74 18       	ld.w	r8,r10[0x4]
8000122a:	a1 a8       	sbr	r8,0x0
8000122c:	0a 9c       	mov	r12,r5
8000122e:	95 18       	st.w	r10[0x4],r8
80001230:	6c 28       	ld.w	r8,r6[0x8]
80001232:	93 28       	st.w	r9[0x8],r8
80001234:	91 39       	st.w	r8[0xc],r9
80001236:	f0 1f 00 19 	mcall	80001298 <_malloc_r+0x2cc>
8000123a:	ec cc ff f8 	sub	r12,r6,-8
8000123e:	d8 32       	popm	r0-r7,pc
80001240:	12 96       	mov	r6,r9
80001242:	02 36       	cp.w	r6,r1
80001244:	cd 21       	brne	800011e8 <_malloc_r+0x21c>
80001246:	2f f2       	sub	r2,-1
80001248:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000124c:	c0 30       	breq	80001252 <_malloc_r+0x286>
8000124e:	2f 81       	sub	r1,-8
80001250:	cc ab       	rjmp	800011e4 <_malloc_r+0x218>
80001252:	1c 98       	mov	r8,lr
80001254:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001258:	c0 81       	brne	80001268 <_malloc_r+0x29c>
8000125a:	68 19       	ld.w	r9,r4[0x4]
8000125c:	f6 08 11 ff 	rsub	r8,r11,-1
80001260:	f3 e8 00 08 	and	r8,r9,r8
80001264:	89 18       	st.w	r4[0x4],r8
80001266:	c0 78       	rjmp	80001274 <_malloc_r+0x2a8>
80001268:	f0 c9 00 08 	sub	r9,r8,8
8000126c:	20 13       	sub	r3,1
8000126e:	70 08       	ld.w	r8,r8[0x0]
80001270:	12 38       	cp.w	r8,r9
80001272:	cf 10       	breq	80001254 <_malloc_r+0x288>
80001274:	a1 7b       	lsl	r11,0x1
80001276:	68 18       	ld.w	r8,r4[0x4]
80001278:	10 3b       	cp.w	r11,r8
8000127a:	e0 8b 00 11 	brhi	8000129c <_malloc_r+0x2d0>
8000127e:	58 0b       	cp.w	r11,0
80001280:	c0 e0       	breq	8000129c <_malloc_r+0x2d0>
80001282:	04 93       	mov	r3,r2
80001284:	c0 38       	rjmp	8000128a <_malloc_r+0x2be>
80001286:	2f c3       	sub	r3,-4
80001288:	a1 7b       	lsl	r11,0x1
8000128a:	f7 e8 00 09 	and	r9,r11,r8
8000128e:	ca 71       	brne	800011dc <_malloc_r+0x210>
80001290:	cf bb       	rjmp	80001286 <_malloc_r+0x2ba>
80001292:	00 00       	add	r0,r0
80001294:	00 00       	add	r0,r0
80001296:	01 04       	ld.w	r4,r0++
80001298:	80 00       	ld.sh	r0,r0[0x0]
8000129a:	14 2c       	rsub	r12,r10
8000129c:	68 23       	ld.w	r3,r4[0x8]
8000129e:	66 12       	ld.w	r2,r3[0x4]
800012a0:	e0 12 ff fc 	andl	r2,0xfffc
800012a4:	0e 32       	cp.w	r2,r7
800012a6:	5f 39       	srlo	r9
800012a8:	e4 07 01 08 	sub	r8,r2,r7
800012ac:	58 f8       	cp.w	r8,15
800012ae:	5f aa       	srle	r10
800012b0:	f5 e9 10 09 	or	r9,r10,r9
800012b4:	e0 80 00 a2 	breq	800013f8 <_malloc_r+0x42c>
800012b8:	4c 88       	lddpc	r8,800013d8 <_malloc_r+0x40c>
800012ba:	70 01       	ld.w	r1,r8[0x0]
800012bc:	4c 88       	lddpc	r8,800013dc <_malloc_r+0x410>
800012be:	2f 01       	sub	r1,-16
800012c0:	70 08       	ld.w	r8,r8[0x0]
800012c2:	0e 01       	add	r1,r7
800012c4:	5b f8       	cp.w	r8,-1
800012c6:	c0 40       	breq	800012ce <_malloc_r+0x302>
800012c8:	28 11       	sub	r1,-127
800012ca:	e0 11 ff 80 	andl	r1,0xff80
800012ce:	02 9b       	mov	r11,r1
800012d0:	0a 9c       	mov	r12,r5
800012d2:	f0 1f 00 44 	mcall	800013e0 <_malloc_r+0x414>
800012d6:	18 96       	mov	r6,r12
800012d8:	5b fc       	cp.w	r12,-1
800012da:	c6 e0       	breq	800013b6 <_malloc_r+0x3ea>
800012dc:	e6 02 00 08 	add	r8,r3,r2
800012e0:	10 3c       	cp.w	r12,r8
800012e2:	c0 32       	brcc	800012e8 <_malloc_r+0x31c>
800012e4:	08 33       	cp.w	r3,r4
800012e6:	c6 81       	brne	800013b6 <_malloc_r+0x3ea>
800012e8:	4b fa       	lddpc	r10,800013e4 <_malloc_r+0x418>
800012ea:	74 09       	ld.w	r9,r10[0x0]
800012ec:	e2 09 00 09 	add	r9,r1,r9
800012f0:	95 09       	st.w	r10[0x0],r9
800012f2:	10 36       	cp.w	r6,r8
800012f4:	c0 a1       	brne	80001308 <_malloc_r+0x33c>
800012f6:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800012fa:	c0 71       	brne	80001308 <_malloc_r+0x33c>
800012fc:	e2 02 00 02 	add	r2,r1,r2
80001300:	68 28       	ld.w	r8,r4[0x8]
80001302:	a1 a2       	sbr	r2,0x0
80001304:	91 12       	st.w	r8[0x4],r2
80001306:	c4 c8       	rjmp	8000139e <_malloc_r+0x3d2>
80001308:	4b 5a       	lddpc	r10,800013dc <_malloc_r+0x410>
8000130a:	74 0b       	ld.w	r11,r10[0x0]
8000130c:	5b fb       	cp.w	r11,-1
8000130e:	c0 31       	brne	80001314 <_malloc_r+0x348>
80001310:	95 06       	st.w	r10[0x0],r6
80001312:	c0 68       	rjmp	8000131e <_malloc_r+0x352>
80001314:	ec 09 00 09 	add	r9,r6,r9
80001318:	4b 3a       	lddpc	r10,800013e4 <_malloc_r+0x418>
8000131a:	10 19       	sub	r9,r8
8000131c:	95 09       	st.w	r10[0x0],r9
8000131e:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80001322:	f0 09 11 08 	rsub	r9,r8,8
80001326:	58 08       	cp.w	r8,0
80001328:	f2 08 17 10 	movne	r8,r9
8000132c:	ed d8 e1 06 	addne	r6,r6,r8
80001330:	28 08       	sub	r8,-128
80001332:	ec 01 00 01 	add	r1,r6,r1
80001336:	0a 9c       	mov	r12,r5
80001338:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000133c:	f0 01 01 01 	sub	r1,r8,r1
80001340:	02 9b       	mov	r11,r1
80001342:	f0 1f 00 28 	mcall	800013e0 <_malloc_r+0x414>
80001346:	4a 88       	lddpc	r8,800013e4 <_malloc_r+0x418>
80001348:	5b fc       	cp.w	r12,-1
8000134a:	ec 0c 17 00 	moveq	r12,r6
8000134e:	f9 b1 00 00 	moveq	r1,0
80001352:	70 09       	ld.w	r9,r8[0x0]
80001354:	0c 1c       	sub	r12,r6
80001356:	89 26       	st.w	r4[0x8],r6
80001358:	02 0c       	add	r12,r1
8000135a:	12 01       	add	r1,r9
8000135c:	a1 ac       	sbr	r12,0x0
8000135e:	91 01       	st.w	r8[0x0],r1
80001360:	8d 1c       	st.w	r6[0x4],r12
80001362:	08 33       	cp.w	r3,r4
80001364:	c1 d0       	breq	8000139e <_malloc_r+0x3d2>
80001366:	58 f2       	cp.w	r2,15
80001368:	e0 8b 00 05 	brhi	80001372 <_malloc_r+0x3a6>
8000136c:	30 18       	mov	r8,1
8000136e:	8d 18       	st.w	r6[0x4],r8
80001370:	c2 38       	rjmp	800013b6 <_malloc_r+0x3ea>
80001372:	30 59       	mov	r9,5
80001374:	20 c2       	sub	r2,12
80001376:	e0 12 ff f8 	andl	r2,0xfff8
8000137a:	e6 02 00 08 	add	r8,r3,r2
8000137e:	91 29       	st.w	r8[0x8],r9
80001380:	91 19       	st.w	r8[0x4],r9
80001382:	66 18       	ld.w	r8,r3[0x4]
80001384:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001388:	e5 e8 10 08 	or	r8,r2,r8
8000138c:	87 18       	st.w	r3[0x4],r8
8000138e:	58 f2       	cp.w	r2,15
80001390:	e0 88 00 07 	brls	8000139e <_malloc_r+0x3d2>
80001394:	e6 cb ff f8 	sub	r11,r3,-8
80001398:	0a 9c       	mov	r12,r5
8000139a:	f0 1f 00 14 	mcall	800013e8 <_malloc_r+0x41c>
8000139e:	49 49       	lddpc	r9,800013ec <_malloc_r+0x420>
800013a0:	72 0a       	ld.w	r10,r9[0x0]
800013a2:	49 18       	lddpc	r8,800013e4 <_malloc_r+0x418>
800013a4:	70 08       	ld.w	r8,r8[0x0]
800013a6:	14 38       	cp.w	r8,r10
800013a8:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800013ac:	49 19       	lddpc	r9,800013f0 <_malloc_r+0x424>
800013ae:	72 0a       	ld.w	r10,r9[0x0]
800013b0:	14 38       	cp.w	r8,r10
800013b2:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800013b6:	68 28       	ld.w	r8,r4[0x8]
800013b8:	70 18       	ld.w	r8,r8[0x4]
800013ba:	e0 18 ff fc 	andl	r8,0xfffc
800013be:	0e 38       	cp.w	r8,r7
800013c0:	5f 39       	srlo	r9
800013c2:	0e 18       	sub	r8,r7
800013c4:	58 f8       	cp.w	r8,15
800013c6:	5f aa       	srle	r10
800013c8:	f5 e9 10 09 	or	r9,r10,r9
800013cc:	c1 60       	breq	800013f8 <_malloc_r+0x42c>
800013ce:	0a 9c       	mov	r12,r5
800013d0:	f0 1f 00 09 	mcall	800013f4 <_malloc_r+0x428>
800013d4:	d8 3a       	popm	r0-r7,pc,r12=0
800013d6:	00 00       	add	r0,r0
800013d8:	00 00       	add	r0,r0
800013da:	05 20       	ld.uh	r0,r2++
800013dc:	00 00       	add	r0,r0
800013de:	05 10       	ld.sh	r0,r2++
800013e0:	80 00       	ld.sh	r0,r0[0x0]
800013e2:	14 30       	cp.w	r0,r10
800013e4:	00 00       	add	r0,r0
800013e6:	05 24       	ld.uh	r4,r2++
800013e8:	80 00       	ld.sh	r0,r0[0x0]
800013ea:	15 4c       	ld.w	r12,--r10
800013ec:	00 00       	add	r0,r0
800013ee:	05 1c       	ld.sh	r12,r2++
800013f0:	00 00       	add	r0,r0
800013f2:	05 18       	ld.sh	r8,r2++
800013f4:	80 00       	ld.sh	r0,r0[0x0]
800013f6:	14 2c       	rsub	r12,r10
800013f8:	68 26       	ld.w	r6,r4[0x8]
800013fa:	a1 a8       	sbr	r8,0x0
800013fc:	0e 99       	mov	r9,r7
800013fe:	a1 a9       	sbr	r9,0x0
80001400:	8d 19       	st.w	r6[0x4],r9
80001402:	ec 07 00 07 	add	r7,r6,r7
80001406:	0a 9c       	mov	r12,r5
80001408:	89 27       	st.w	r4[0x8],r7
8000140a:	8f 18       	st.w	r7[0x4],r8
8000140c:	f0 1f 00 03 	mcall	80001418 <_malloc_r+0x44c>
80001410:	ec cc ff f8 	sub	r12,r6,-8
80001414:	d8 32       	popm	r0-r7,pc
80001416:	00 00       	add	r0,r0
80001418:	80 00       	ld.sh	r0,r0[0x0]
8000141a:	14 2c       	rsub	r12,r10

8000141c <memset>:
8000141c:	18 98       	mov	r8,r12
8000141e:	c0 38       	rjmp	80001424 <memset+0x8>
80001420:	10 cb       	st.b	r8++,r11
80001422:	20 1a       	sub	r10,1
80001424:	58 0a       	cp.w	r10,0
80001426:	cf d1       	brne	80001420 <memset+0x4>
80001428:	5e fc       	retal	r12

8000142a <__malloc_lock>:
8000142a:	5e fc       	retal	r12

8000142c <__malloc_unlock>:
8000142c:	5e fc       	retal	r12
8000142e:	d7 03       	nop

80001430 <_sbrk_r>:
80001430:	d4 21       	pushm	r4-r7,lr
80001432:	30 08       	mov	r8,0
80001434:	18 97       	mov	r7,r12
80001436:	48 76       	lddpc	r6,80001450 <_sbrk_r+0x20>
80001438:	16 9c       	mov	r12,r11
8000143a:	8d 08       	st.w	r6[0x0],r8
8000143c:	f0 1f 00 06 	mcall	80001454 <_sbrk_r+0x24>
80001440:	5b fc       	cp.w	r12,-1
80001442:	c0 51       	brne	8000144c <_sbrk_r+0x1c>
80001444:	6c 08       	ld.w	r8,r6[0x0]
80001446:	58 08       	cp.w	r8,0
80001448:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000144c:	d8 22       	popm	r4-r7,pc
8000144e:	00 00       	add	r0,r0
80001450:	00 00       	add	r0,r0
80001452:	05 a8       	ld.ub	r8,r2[0x2]
80001454:	80 00       	ld.sh	r0,r0[0x0]
80001456:	14 58       	eor	r8,r10

80001458 <_sbrk>:
80001458:	d4 01       	pushm	lr
8000145a:	48 c8       	lddpc	r8,80001488 <_sbrk+0x30>
8000145c:	70 09       	ld.w	r9,r8[0x0]
8000145e:	58 09       	cp.w	r9,0
80001460:	c0 31       	brne	80001466 <_sbrk+0xe>
80001462:	48 b9       	lddpc	r9,8000148c <_sbrk+0x34>
80001464:	91 09       	st.w	r8[0x0],r9
80001466:	48 99       	lddpc	r9,80001488 <_sbrk+0x30>
80001468:	48 aa       	lddpc	r10,80001490 <_sbrk+0x38>
8000146a:	72 08       	ld.w	r8,r9[0x0]
8000146c:	f0 0c 00 0c 	add	r12,r8,r12
80001470:	14 3c       	cp.w	r12,r10
80001472:	e0 8b 00 04 	brhi	8000147a <_sbrk+0x22>
80001476:	93 0c       	st.w	r9[0x0],r12
80001478:	c0 68       	rjmp	80001484 <_sbrk+0x2c>
8000147a:	f0 1f 00 07 	mcall	80001494 <_sbrk+0x3c>
8000147e:	30 c8       	mov	r8,12
80001480:	99 08       	st.w	r12[0x0],r8
80001482:	3f f8       	mov	r8,-1
80001484:	10 9c       	mov	r12,r8
80001486:	d8 02       	popm	pc
80001488:	00 00       	add	r0,r0
8000148a:	05 4c       	ld.w	r12,--r2
8000148c:	00 00       	add	r0,r0
8000148e:	05 b0       	ld.ub	r0,r2[0x3]
80001490:	00 00       	add	r0,r0
80001492:	e0 00       	*unknown*
80001494:	80 00       	ld.sh	r0,r0[0x0]
80001496:	14 98       	mov	r8,r10

80001498 <__errno>:
80001498:	48 28       	lddpc	r8,800014a0 <__errno+0x8>
8000149a:	70 0c       	ld.w	r12,r8[0x0]
8000149c:	2f 4c       	sub	r12,-12
8000149e:	5e fc       	retal	r12
800014a0:	00 00       	add	r0,r0
800014a2:	01 00       	ld.w	r0,r0++

800014a4 <_malloc_trim_r>:
800014a4:	d4 21       	pushm	r4-r7,lr
800014a6:	16 95       	mov	r5,r11
800014a8:	18 97       	mov	r7,r12
800014aa:	f0 1f 00 23 	mcall	80001534 <_malloc_trim_r+0x90>
800014ae:	4a 34       	lddpc	r4,80001538 <_malloc_trim_r+0x94>
800014b0:	68 28       	ld.w	r8,r4[0x8]
800014b2:	70 16       	ld.w	r6,r8[0x4]
800014b4:	e0 16 ff fc 	andl	r6,0xfffc
800014b8:	ec c8 ff 91 	sub	r8,r6,-111
800014bc:	f0 05 01 05 	sub	r5,r8,r5
800014c0:	e0 15 ff 80 	andl	r5,0xff80
800014c4:	ea c5 00 80 	sub	r5,r5,128
800014c8:	e0 45 00 7f 	cp.w	r5,127
800014cc:	e0 8a 00 23 	brle	80001512 <_malloc_trim_r+0x6e>
800014d0:	30 0b       	mov	r11,0
800014d2:	0e 9c       	mov	r12,r7
800014d4:	f0 1f 00 1a 	mcall	8000153c <_malloc_trim_r+0x98>
800014d8:	68 28       	ld.w	r8,r4[0x8]
800014da:	0c 08       	add	r8,r6
800014dc:	10 3c       	cp.w	r12,r8
800014de:	c1 a1       	brne	80001512 <_malloc_trim_r+0x6e>
800014e0:	ea 0b 11 00 	rsub	r11,r5,0
800014e4:	0e 9c       	mov	r12,r7
800014e6:	f0 1f 00 16 	mcall	8000153c <_malloc_trim_r+0x98>
800014ea:	5b fc       	cp.w	r12,-1
800014ec:	c1 71       	brne	8000151a <_malloc_trim_r+0x76>
800014ee:	30 0b       	mov	r11,0
800014f0:	0e 9c       	mov	r12,r7
800014f2:	f0 1f 00 13 	mcall	8000153c <_malloc_trim_r+0x98>
800014f6:	68 28       	ld.w	r8,r4[0x8]
800014f8:	f8 08 01 09 	sub	r9,r12,r8
800014fc:	58 f9       	cp.w	r9,15
800014fe:	e0 8a 00 0a 	brle	80001512 <_malloc_trim_r+0x6e>
80001502:	a1 a9       	sbr	r9,0x0
80001504:	91 19       	st.w	r8[0x4],r9
80001506:	48 f8       	lddpc	r8,80001540 <_malloc_trim_r+0x9c>
80001508:	70 09       	ld.w	r9,r8[0x0]
8000150a:	48 f8       	lddpc	r8,80001544 <_malloc_trim_r+0xa0>
8000150c:	f8 09 01 09 	sub	r9,r12,r9
80001510:	91 09       	st.w	r8[0x0],r9
80001512:	0e 9c       	mov	r12,r7
80001514:	f0 1f 00 0d 	mcall	80001548 <_malloc_trim_r+0xa4>
80001518:	d8 2a       	popm	r4-r7,pc,r12=0
8000151a:	68 28       	ld.w	r8,r4[0x8]
8000151c:	0a 16       	sub	r6,r5
8000151e:	a1 a6       	sbr	r6,0x0
80001520:	91 16       	st.w	r8[0x4],r6
80001522:	48 98       	lddpc	r8,80001544 <_malloc_trim_r+0xa0>
80001524:	70 09       	ld.w	r9,r8[0x0]
80001526:	0a 19       	sub	r9,r5
80001528:	0e 9c       	mov	r12,r7
8000152a:	91 09       	st.w	r8[0x0],r9
8000152c:	f0 1f 00 07 	mcall	80001548 <_malloc_trim_r+0xa4>
80001530:	da 2a       	popm	r4-r7,pc,r12=1
80001532:	00 00       	add	r0,r0
80001534:	80 00       	ld.sh	r0,r0[0x0]
80001536:	14 2a       	rsub	r10,r10
80001538:	00 00       	add	r0,r0
8000153a:	01 04       	ld.w	r4,r0++
8000153c:	80 00       	ld.sh	r0,r0[0x0]
8000153e:	14 30       	cp.w	r0,r10
80001540:	00 00       	add	r0,r0
80001542:	05 10       	ld.sh	r0,r2++
80001544:	00 00       	add	r0,r0
80001546:	05 24       	ld.uh	r4,r2++
80001548:	80 00       	ld.sh	r0,r0[0x0]
8000154a:	14 2c       	rsub	r12,r10

8000154c <_free_r>:
8000154c:	d4 21       	pushm	r4-r7,lr
8000154e:	16 96       	mov	r6,r11
80001550:	18 97       	mov	r7,r12
80001552:	58 0b       	cp.w	r11,0
80001554:	e0 80 00 c8 	breq	800016e4 <_free_r+0x198>
80001558:	f0 1f 00 4c 	mcall	80001688 <_free_r+0x13c>
8000155c:	20 86       	sub	r6,8
8000155e:	4c ca       	lddpc	r10,8000168c <_free_r+0x140>
80001560:	6c 18       	ld.w	r8,r6[0x4]
80001562:	74 2e       	ld.w	lr,r10[0x8]
80001564:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001568:	a1 c8       	cbr	r8,0x0
8000156a:	ec 08 00 09 	add	r9,r6,r8
8000156e:	72 1b       	ld.w	r11,r9[0x4]
80001570:	e0 1b ff fc 	andl	r11,0xfffc
80001574:	1c 39       	cp.w	r9,lr
80001576:	c1 d1       	brne	800015b0 <_free_r+0x64>
80001578:	f6 08 00 08 	add	r8,r11,r8
8000157c:	58 0c       	cp.w	r12,0
8000157e:	c0 81       	brne	8000158e <_free_r+0x42>
80001580:	6c 09       	ld.w	r9,r6[0x0]
80001582:	12 16       	sub	r6,r9
80001584:	12 08       	add	r8,r9
80001586:	6c 3b       	ld.w	r11,r6[0xc]
80001588:	6c 29       	ld.w	r9,r6[0x8]
8000158a:	97 29       	st.w	r11[0x8],r9
8000158c:	93 3b       	st.w	r9[0xc],r11
8000158e:	10 99       	mov	r9,r8
80001590:	95 26       	st.w	r10[0x8],r6
80001592:	a1 a9       	sbr	r9,0x0
80001594:	8d 19       	st.w	r6[0x4],r9
80001596:	4b f9       	lddpc	r9,80001690 <_free_r+0x144>
80001598:	72 09       	ld.w	r9,r9[0x0]
8000159a:	12 38       	cp.w	r8,r9
8000159c:	c0 63       	brcs	800015a8 <_free_r+0x5c>
8000159e:	4b e8       	lddpc	r8,80001694 <_free_r+0x148>
800015a0:	0e 9c       	mov	r12,r7
800015a2:	70 0b       	ld.w	r11,r8[0x0]
800015a4:	f0 1f 00 3d 	mcall	80001698 <_free_r+0x14c>
800015a8:	0e 9c       	mov	r12,r7
800015aa:	f0 1f 00 3d 	mcall	8000169c <_free_r+0x150>
800015ae:	d8 22       	popm	r4-r7,pc
800015b0:	93 1b       	st.w	r9[0x4],r11
800015b2:	58 0c       	cp.w	r12,0
800015b4:	c0 30       	breq	800015ba <_free_r+0x6e>
800015b6:	30 0c       	mov	r12,0
800015b8:	c1 08       	rjmp	800015d8 <_free_r+0x8c>
800015ba:	6c 0e       	ld.w	lr,r6[0x0]
800015bc:	f4 c5 ff f8 	sub	r5,r10,-8
800015c0:	1c 16       	sub	r6,lr
800015c2:	1c 08       	add	r8,lr
800015c4:	6c 2e       	ld.w	lr,r6[0x8]
800015c6:	0a 3e       	cp.w	lr,r5
800015c8:	f9 bc 00 01 	moveq	r12,1
800015cc:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800015d0:	eb fe 1a 02 	st.wne	r5[0x8],lr
800015d4:	fd f5 1a 03 	st.wne	lr[0xc],r5
800015d8:	f2 0b 00 0e 	add	lr,r9,r11
800015dc:	7c 1e       	ld.w	lr,lr[0x4]
800015de:	ed be 00 00 	bld	lr,0x0
800015e2:	c1 30       	breq	80001608 <_free_r+0xbc>
800015e4:	16 08       	add	r8,r11
800015e6:	58 0c       	cp.w	r12,0
800015e8:	c0 c1       	brne	80001600 <_free_r+0xb4>
800015ea:	4a 9e       	lddpc	lr,8000168c <_free_r+0x140>
800015ec:	72 2b       	ld.w	r11,r9[0x8]
800015ee:	2f 8e       	sub	lr,-8
800015f0:	1c 3b       	cp.w	r11,lr
800015f2:	c0 71       	brne	80001600 <_free_r+0xb4>
800015f4:	97 36       	st.w	r11[0xc],r6
800015f6:	97 26       	st.w	r11[0x8],r6
800015f8:	8d 2b       	st.w	r6[0x8],r11
800015fa:	8d 3b       	st.w	r6[0xc],r11
800015fc:	30 1c       	mov	r12,1
800015fe:	c0 58       	rjmp	80001608 <_free_r+0xbc>
80001600:	72 2b       	ld.w	r11,r9[0x8]
80001602:	72 39       	ld.w	r9,r9[0xc]
80001604:	93 2b       	st.w	r9[0x8],r11
80001606:	97 39       	st.w	r11[0xc],r9
80001608:	10 99       	mov	r9,r8
8000160a:	ec 08 09 08 	st.w	r6[r8],r8
8000160e:	a1 a9       	sbr	r9,0x0
80001610:	8d 19       	st.w	r6[0x4],r9
80001612:	58 0c       	cp.w	r12,0
80001614:	c6 51       	brne	800016de <_free_r+0x192>
80001616:	e0 48 01 ff 	cp.w	r8,511
8000161a:	e0 8b 00 13 	brhi	80001640 <_free_r+0xf4>
8000161e:	a3 98       	lsr	r8,0x3
80001620:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001624:	72 2b       	ld.w	r11,r9[0x8]
80001626:	8d 39       	st.w	r6[0xc],r9
80001628:	8d 2b       	st.w	r6[0x8],r11
8000162a:	97 36       	st.w	r11[0xc],r6
8000162c:	93 26       	st.w	r9[0x8],r6
8000162e:	a3 48       	asr	r8,0x2
80001630:	74 19       	ld.w	r9,r10[0x4]
80001632:	30 1b       	mov	r11,1
80001634:	f6 08 09 48 	lsl	r8,r11,r8
80001638:	f3 e8 10 08 	or	r8,r9,r8
8000163c:	95 18       	st.w	r10[0x4],r8
8000163e:	c5 08       	rjmp	800016de <_free_r+0x192>
80001640:	f0 0b 16 09 	lsr	r11,r8,0x9
80001644:	58 4b       	cp.w	r11,4
80001646:	e0 8b 00 06 	brhi	80001652 <_free_r+0x106>
8000164a:	f0 0b 16 06 	lsr	r11,r8,0x6
8000164e:	2c 8b       	sub	r11,-56
80001650:	c2 b8       	rjmp	800016a6 <_free_r+0x15a>
80001652:	59 4b       	cp.w	r11,20
80001654:	e0 8b 00 04 	brhi	8000165c <_free_r+0x110>
80001658:	2a 5b       	sub	r11,-91
8000165a:	c2 68       	rjmp	800016a6 <_free_r+0x15a>
8000165c:	e0 4b 00 54 	cp.w	r11,84
80001660:	e0 8b 00 06 	brhi	8000166c <_free_r+0x120>
80001664:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001668:	29 2b       	sub	r11,-110
8000166a:	c1 e8       	rjmp	800016a6 <_free_r+0x15a>
8000166c:	e0 4b 01 54 	cp.w	r11,340
80001670:	e0 8b 00 06 	brhi	8000167c <_free_r+0x130>
80001674:	f0 0b 16 0f 	lsr	r11,r8,0xf
80001678:	28 9b       	sub	r11,-119
8000167a:	c1 68       	rjmp	800016a6 <_free_r+0x15a>
8000167c:	e0 4b 05 54 	cp.w	r11,1364
80001680:	e0 88 00 10 	brls	800016a0 <_free_r+0x154>
80001684:	37 eb       	mov	r11,126
80001686:	c1 08       	rjmp	800016a6 <_free_r+0x15a>
80001688:	80 00       	ld.sh	r0,r0[0x0]
8000168a:	14 2a       	rsub	r10,r10
8000168c:	00 00       	add	r0,r0
8000168e:	01 04       	ld.w	r4,r0++
80001690:	00 00       	add	r0,r0
80001692:	05 0c       	ld.w	r12,r2++
80001694:	00 00       	add	r0,r0
80001696:	05 20       	ld.uh	r0,r2++
80001698:	80 00       	ld.sh	r0,r0[0x0]
8000169a:	14 a4       	st.w	r10++,r4
8000169c:	80 00       	ld.sh	r0,r0[0x0]
8000169e:	14 2c       	rsub	r12,r10
800016a0:	f0 0b 16 12 	lsr	r11,r8,0x12
800016a4:	28 4b       	sub	r11,-124
800016a6:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800016aa:	78 29       	ld.w	r9,r12[0x8]
800016ac:	18 39       	cp.w	r9,r12
800016ae:	c0 e1       	brne	800016ca <_free_r+0x17e>
800016b0:	74 18       	ld.w	r8,r10[0x4]
800016b2:	a3 4b       	asr	r11,0x2
800016b4:	30 1c       	mov	r12,1
800016b6:	f8 0b 09 4b 	lsl	r11,r12,r11
800016ba:	f1 eb 10 0b 	or	r11,r8,r11
800016be:	12 98       	mov	r8,r9
800016c0:	95 1b       	st.w	r10[0x4],r11
800016c2:	c0 a8       	rjmp	800016d6 <_free_r+0x18a>
800016c4:	72 29       	ld.w	r9,r9[0x8]
800016c6:	18 39       	cp.w	r9,r12
800016c8:	c0 60       	breq	800016d4 <_free_r+0x188>
800016ca:	72 1a       	ld.w	r10,r9[0x4]
800016cc:	e0 1a ff fc 	andl	r10,0xfffc
800016d0:	14 38       	cp.w	r8,r10
800016d2:	cf 93       	brcs	800016c4 <_free_r+0x178>
800016d4:	72 38       	ld.w	r8,r9[0xc]
800016d6:	8d 38       	st.w	r6[0xc],r8
800016d8:	8d 29       	st.w	r6[0x8],r9
800016da:	93 36       	st.w	r9[0xc],r6
800016dc:	91 26       	st.w	r8[0x8],r6
800016de:	0e 9c       	mov	r12,r7
800016e0:	f0 1f 00 02 	mcall	800016e8 <_free_r+0x19c>
800016e4:	d8 22       	popm	r4-r7,pc
800016e6:	00 00       	add	r0,r0
800016e8:	80 00       	ld.sh	r0,r0[0x0]
800016ea:	14 2c       	rsub	r12,r10

Disassembly of section .exception:

80001800 <_evba>:
	...

80001828 <_handle_Privilege_Violation>:
80001828:	c7 a8       	rjmp	8000191c <privilegedCalls>
	...

80001900 <_handle_Supervisor_Call>:
80001900:	1c 9f       	mov	pc,lr

80001902 <_int0>:
80001902:	e0 6c 08 00 	mov	r12,2048
80001906:	ea 1c ff ff 	orh	r12,0xffff
8000190a:	f8 fc 01 38 	ld.w	r12,r12[312]
8000190e:	e0 1c 00 01 	andl	r12,0x1
80001912:	58 1c       	cp.w	r12,1
80001914:	c0 31       	brne	8000191a <_int0_exit>
80001916:	4b 9c       	lddpc	r12,800019f8 <contextRestoreFromISR+0x40>
80001918:	18 9f       	mov	pc,r12

8000191a <_int0_exit>:
8000191a:	d6 03       	rete

8000191c <privilegedCalls>:
8000191c:	d3 01       	pushm	r11-r12
8000191e:	7a 3b       	ld.w	r11,sp[0xc]
80001920:	16 9c       	mov	r12,r11
80001922:	2f ec       	sub	r12,-2
80001924:	9b 3c       	st.w	sp[0xc],r12

80001926 <priv_interruptdisable>:
80001926:	4b 6c       	lddpc	r12,800019fc <contextRestoreFromISR+0x44>
80001928:	18 3b       	cp.w	r11,r12
8000192a:	c0 61       	brne	80001936 <priv_interruptenable>
8000192c:	7a 2c       	ld.w	r12,sp[0x8]
8000192e:	b1 ac       	sbr	r12,0x10
80001930:	9b 2c       	st.w	sp[0x8],r12
80001932:	d3 02       	popm	r11-r12
80001934:	d6 03       	rete

80001936 <priv_interruptenable>:
80001936:	4b 3c       	lddpc	r12,80001a00 <contextRestoreFromISR+0x48>
80001938:	18 3b       	cp.w	r11,r12
8000193a:	c0 61       	brne	80001946 <privexception>
8000193c:	7a 2c       	ld.w	r12,sp[0x8]
8000193e:	b1 cc       	cbr	r12,0x10
80001940:	9b 2c       	st.w	sp[0x8],r12
80001942:	d3 02       	popm	r11-r12
80001944:	d6 03       	rete

80001946 <privexception>:
80001946:	c0 08       	rjmp	80001946 <privexception>

80001948 <interruptInit>:
80001948:	d7 01       	pushm	r11-r12,lr
8000194a:	fe cb 00 48 	sub	r11,pc,72
8000194e:	4a ec       	lddpc	r12,80001a04 <contextRestoreFromISR+0x4c>
80001950:	18 1b       	sub	r11,r12
80001952:	30 0c       	mov	r12,0
80001954:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e
80001958:	e0 6c 08 38 	mov	r12,2104
8000195c:	ea 1c ff ff 	orh	r12,0xffff
80001960:	99 0b       	st.w	r12[0x0],r11
80001962:	d7 02       	popm	r11-r12,lr
80001964:	1c 9f       	mov	pc,lr

80001966 <interruptDisable>:
80001966:	d3 03       	ssrf	0x10
80001968:	1c 9f       	mov	pc,lr

8000196a <interruptEnable>:
8000196a:	d5 03       	csrf	0x10
8000196c:	1c 9f       	mov	pc,lr

8000196e <isInterruptEnabled>:
8000196e:	e1 bc 00 00 	mfsr	r12,0x0
80001972:	b1 8c       	lsr	r12,0x10
80001974:	e0 1c 00 01 	andl	r12,0x1
80001978:	ec 1c 00 01 	eorl	r12,0x1
8000197c:	1c 9f       	mov	pc,lr

8000197e <contextSaveFromISR>:
8000197e:	4a 3c       	lddpc	r12,80001a08 <contextRestoreFromISR+0x50>
80001980:	78 0c       	ld.w	r12,r12[0x0]
80001982:	99 60       	st.w	r12[0x18],r0
80001984:	7a 90       	ld.w	r0,sp[0x24]
80001986:	99 c0       	st.w	r12[0x30],r0
80001988:	7a 60       	ld.w	r0,sp[0x18]
8000198a:	99 80       	st.w	r12[0x20],r0
8000198c:	7a d8       	ld.w	r8,sp[0x34]
8000198e:	7a c9       	ld.w	r9,sp[0x30]
80001990:	7a ba       	ld.w	r10,sp[0x2c]
80001992:	7a ab       	ld.w	r11,sp[0x28]
80001994:	33 40       	mov	r0,52
80001996:	18 00       	add	r0,r12
80001998:	ed c0 0f ff 	stmts	r0,r0-r11
8000199c:	7a 50       	ld.w	r0,sp[0x14]
8000199e:	f9 40 00 44 	st.w	r12[68],r0
800019a2:	7a 70       	ld.w	r0,sp[0x1c]
800019a4:	99 90       	st.w	r12[0x24],r0
800019a6:	7a 80       	ld.w	r0,sp[0x20]
800019a8:	99 a0       	st.w	r12[0x28],r0
800019aa:	1a 90       	mov	r0,sp
800019ac:	1a d0       	st.w	--sp,r0
800019ae:	ed cd 20 00 	stmts	sp,sp
800019b2:	1b 00       	ld.w	r0,sp++
800019b4:	99 50       	st.w	r12[0x14],r0
800019b6:	1c 9f       	mov	pc,lr

800019b8 <contextRestoreFromISR>:
800019b8:	49 4c       	lddpc	r12,80001a08 <contextRestoreFromISR+0x50>
800019ba:	78 0c       	ld.w	r12,r12[0x0]
800019bc:	78 50       	ld.w	r0,r12[0x14]
800019be:	1a d0       	st.w	--sp,r0
800019c0:	e5 cd 20 00 	ldmts	sp,sp
800019c4:	1b 00       	ld.w	r0,sp++
800019c6:	78 a0       	ld.w	r0,r12[0x28]
800019c8:	9b 80       	st.w	sp[0x20],r0
800019ca:	78 90       	ld.w	r0,r12[0x24]
800019cc:	9b 70       	st.w	sp[0x1c],r0
800019ce:	33 40       	mov	r0,52
800019d0:	18 00       	add	r0,r12
800019d2:	e5 c0 0f ff 	ldmts	r0,r0-r11
800019d6:	78 80       	ld.w	r0,r12[0x20]
800019d8:	9b 60       	st.w	sp[0x18],r0
800019da:	78 c0       	ld.w	r0,r12[0x30]
800019dc:	9b 90       	st.w	sp[0x24],r0
800019de:	9b ab       	st.w	sp[0x28],r11
800019e0:	9b ba       	st.w	sp[0x2c],r10
800019e2:	9b c9       	st.w	sp[0x30],r9
800019e4:	9b d8       	st.w	sp[0x34],r8
800019e6:	79 10       	ld.w	r0,r12[0x44]
800019e8:	9b 50       	st.w	sp[0x14],r0
800019ea:	78 60       	ld.w	r0,r12[0x18]
800019ec:	d4 01       	pushm	lr
800019ee:	f0 1f 00 08 	mcall	80001a0c <contextRestoreFromISR+0x54>
800019f2:	d4 02       	popm	lr
800019f4:	1c 9f       	mov	pc,lr
800019f6:	00 00       	add	r0,r0
800019f8:	80 00       	ld.sh	r0,r0[0x0]
800019fa:	07 b8       	ld.ub	r8,r3[0x3]
800019fc:	80 00       	ld.sh	r0,r0[0x0]
800019fe:	19 66       	ld.uh	r6,--r12
80001a00:	80 00       	ld.sh	r0,r0[0x0]
80001a02:	19 6a       	ld.uh	r10,--r12
80001a04:	80 00       	ld.sh	r0,r0[0x0]
80001a06:	18 00       	add	r0,r12
80001a08:	00 00       	add	r0,r0
80001a0a:	05 a4       	ld.ub	r4,r2[0x2]
80001a0c:	80 00       	ld.sh	r0,r0[0x0]
80001a0e:	0e 32       	cp.w	r2,r7
	...
