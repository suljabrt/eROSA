
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000015fc  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001800  80001800  00001c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80001c00  80001c00  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80001c84  80001c84  00002084  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80001c88  00002408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002194  00002914  2**0
                  ALLOC
  9 .bss          00000098  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000da50  000005b0  000005b0  00000000  2**0
                  ALLOC
 11 .comment      000000bc  00000000  00000000  00002914  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000588  00000000  00000000  000029d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000948  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c296  00000000  00000000  000038a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00001fed  00000000  00000000  0000fb36  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000040a7  00000000  00000000  00011b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000b78  00000000  00000000  00015bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001c06  00000000  00000000  00016744  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000017e8  00000000  00000000  0001834a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00454a2b  00000000  00000000  00019b32  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 000004d0  00000000  00000000  0046e55d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	0d d4       	ld.ub	r4,r6[0x5]

Disassembly of section .text:

80000008 <ROSA_semaphoreCreate>:
 *
 * Comment:
 * 	Create a semaphore
 *
 **********************************************************/
int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t ** mutex, uint8_t ceiling) {
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 3d       	sub	sp,12
80000010:	ef 4c ff f8 	st.w	r7[-8],r12
80000014:	16 98       	mov	r8,r11
80000016:	ef 68 ff f4 	st.b	r7[-12],r8
	*mutex = (ROSA_semaphoreHandle_t *) calloc(1,sizeof(ROSA_semaphoreHandle_t));
8000001a:	30 cb       	mov	r11,12
8000001c:	30 1c       	mov	r12,1
8000001e:	f0 1f 00 1e 	mcall	80000094 <ROSA_semaphoreCreate+0x8c>
80000022:	18 98       	mov	r8,r12
80000024:	10 99       	mov	r9,r8
80000026:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000002a:	91 09       	st.w	r8[0x0],r9
	(*mutex)->holder = NULL;
8000002c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000030:	70 08       	ld.w	r8,r8[0x0]
80000032:	30 09       	mov	r9,0
80000034:	91 09       	st.w	r8[0x0],r9
	(*mutex)->ceiling = ceiling;
80000036:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000003a:	70 09       	ld.w	r9,r8[0x0]
8000003c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80000040:	b2 c8       	st.b	r9[0x4],r8
	(*mutex)->nextSemaphore=NULL;
80000042:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000046:	70 08       	ld.w	r8,r8[0x0]
80000048:	30 09       	mov	r9,0
8000004a:	91 29       	st.w	r8[0x8],r9
	if (CREATEDSEMAPHORELIST=NULL)
8000004c:	49 38       	lddpc	r8,80000098 <ROSA_semaphoreCreate+0x90>
8000004e:	30 09       	mov	r9,0
80000050:	91 09       	st.w	r8[0x0],r9
80000052:	49 28       	lddpc	r8,80000098 <ROSA_semaphoreCreate+0x90>
80000054:	70 08       	ld.w	r8,r8[0x0]
80000056:	58 08       	cp.w	r8,0
80000058:	c0 d0       	breq	80000072 <ROSA_semaphoreCreate+0x6a>
	{
		CREATEDSEMAPHORELIST=(*mutex);
8000005a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000005e:	70 09       	ld.w	r9,r8[0x0]
80000060:	48 e8       	lddpc	r8,80000098 <ROSA_semaphoreCreate+0x90>
80000062:	91 09       	st.w	r8[0x0],r9
80000064:	c1 38       	rjmp	8000008a <ROSA_semaphoreCreate+0x82>
	else
	{
		ROSA_semaphoreHandle_t * it; //finding the last semaphore in the list and changing its nextSemaphore field to point to the just created semaphore
		while(it->nextSemaphore!=NULL)
		{
			it=it->nextSemaphore;
80000066:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000006a:	70 28       	ld.w	r8,r8[0x8]
8000006c:	ef 48 ff fc 	st.w	r7[-4],r8
80000070:	c0 28       	rjmp	80000074 <ROSA_semaphoreCreate+0x6c>
		CREATEDSEMAPHORELIST=(*mutex);
	}
	else
	{
		ROSA_semaphoreHandle_t * it; //finding the last semaphore in the list and changing its nextSemaphore field to point to the just created semaphore
		while(it->nextSemaphore!=NULL)
80000072:	d7 03       	nop
80000074:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000078:	70 28       	ld.w	r8,r8[0x8]
8000007a:	58 08       	cp.w	r8,0
8000007c:	cf 51       	brne	80000066 <ROSA_semaphoreCreate+0x5e>
		{
			it=it->nextSemaphore;
		}
		it->nextSemaphore=(*mutex);
8000007e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000082:	70 09       	ld.w	r9,r8[0x0]
80000084:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000088:	91 29       	st.w	r8[0x8],r9
	}
	
	return 0;
8000008a:	30 08       	mov	r8,0
}
8000008c:	10 9c       	mov	r12,r8
8000008e:	2f dd       	sub	sp,-12
80000090:	e3 cd 80 80 	ldm	sp++,r7,pc
80000094:	80 00       	ld.sh	r0,r0[0x0]
80000096:	0e 54       	eor	r4,r7
80000098:	00 00       	add	r0,r0
8000009a:	05 50       	ld.sh	r0,--r2

8000009c <ROSA_semaphoreLock>:
 *
 * Comment:
 * 	Lock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t ** mutex) {
8000009c:	eb cd 40 80 	pushm	r7,lr
800000a0:	1a 97       	mov	r7,sp
800000a2:	20 1d       	sub	sp,4
800000a4:	ef 4c ff fc 	st.w	r7[-4],r12
	
	while ((*mutex)->holder != NULL)
800000a8:	c0 38       	rjmp	800000ae <ROSA_semaphoreLock+0x12>
		ROSA_yield();
800000aa:	f0 1f 00 19 	mcall	8000010c <ROSA_semaphoreLock+0x70>
 * 	Lock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t ** mutex) {
	
	while ((*mutex)->holder != NULL)
800000ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000b2:	70 08       	ld.w	r8,r8[0x0]
800000b4:	70 08       	ld.w	r8,r8[0x0]
800000b6:	58 08       	cp.w	r8,0
800000b8:	cf 91       	brne	800000aa <ROSA_semaphoreLock+0xe>
		ROSA_yield();
	
	(*mutex)->holder = EXECTASK;
800000ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000be:	70 08       	ld.w	r8,r8[0x0]
800000c0:	49 49       	lddpc	r9,80000110 <ROSA_semaphoreLock+0x74>
800000c2:	72 09       	ld.w	r9,r9[0x0]
800000c4:	91 09       	st.w	r8[0x0],r9
	if (EXECTASK->priority < (*mutex)->ceiling)
800000c6:	49 38       	lddpc	r8,80000110 <ROSA_semaphoreLock+0x74>
800000c8:	70 08       	ld.w	r8,r8[0x0]
800000ca:	f1 39 00 64 	ld.ub	r9,r8[100]
800000ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000d2:	70 08       	ld.w	r8,r8[0x0]
800000d4:	11 c8       	ld.ub	r8,r8[0x4]
800000d6:	f0 09 18 00 	cp.b	r9,r8
800000da:	c1 32       	brcc	80000100 <ROSA_semaphoreLock+0x64>
	{
		EXECTASK->priority=(*mutex)->ceiling; //IPCP priority inheritance
800000dc:	48 d8       	lddpc	r8,80000110 <ROSA_semaphoreLock+0x74>
800000de:	70 09       	ld.w	r9,r8[0x0]
800000e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000e4:	70 08       	ld.w	r8,r8[0x0]
800000e6:	11 c8       	ld.ub	r8,r8[0x4]
800000e8:	f3 68 00 64 	st.b	r9[100],r8
		PA[EXECTASK->priority]=EXECTASK;//move this task to the proper ready queue
800000ec:	48 98       	lddpc	r8,80000110 <ROSA_semaphoreLock+0x74>
800000ee:	70 08       	ld.w	r8,r8[0x0]
800000f0:	f1 38 00 64 	ld.ub	r8,r8[100]
800000f4:	10 99       	mov	r9,r8
800000f6:	48 78       	lddpc	r8,80000110 <ROSA_semaphoreLock+0x74>
800000f8:	70 0a       	ld.w	r10,r8[0x0]
800000fa:	48 78       	lddpc	r8,80000114 <ROSA_semaphoreLock+0x78>
800000fc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}	
	
	return 0;
80000100:	30 08       	mov	r8,0
}
80000102:	10 9c       	mov	r12,r8
80000104:	2f fd       	sub	sp,-4
80000106:	e3 cd 80 80 	ldm	sp++,r7,pc
8000010a:	00 00       	add	r0,r0
8000010c:	80 00       	ld.sh	r0,r0[0x0]
8000010e:	06 0a       	add	r10,r3
80000110:	00 00       	add	r0,r0
80000112:	05 a4       	ld.ub	r4,r2[0x2]
80000114:	00 00       	add	r0,r0
80000116:	05 70       	ld.ub	r0,--r2

80000118 <ROSA_semaphoreUnlock>:
 *
 * Comment:
 * 	Unlock the semaphore, return nonnegative value if successful, otherwise return negative value
 *
 **********************************************************/
int16_t ROSA_semaphoreUnlock(ROSA_semaphoreHandle_t ** mutex) {
80000118:	eb cd 40 80 	pushm	r7,lr
8000011c:	1a 97       	mov	r7,sp
8000011e:	20 1d       	sub	sp,4
80000120:	ef 4c ff fc 	st.w	r7[-4],r12
	(*mutex)->holder = NULL;
80000124:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000128:	70 08       	ld.w	r8,r8[0x0]
8000012a:	30 09       	mov	r9,0
8000012c:	91 09       	st.w	r8[0x0],r9
	
		
	return 0;
8000012e:	30 08       	mov	r8,0
}
80000130:	10 9c       	mov	r12,r8
80000132:	2f fd       	sub	sp,-4
80000134:	e3 cd 80 80 	ldm	sp++,r7,pc

80000138 <usart_options>:
80000138:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 31     ............tsk1
80000148:	00 00 00 00 74 73 6b 32 00 00 00 00                 ....tsk2....

80000154 <task1>:
 * Task1
 * LED0 lights up
 * LED1 goes dark
 ************************************************************/
void task1(void)
{
80000154:	eb cd 40 80 	pushm	r7,lr
80000158:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(&mutex2);
8000015a:	48 dc       	lddpc	r12,8000018c <task1+0x38>
8000015c:	f0 1f 00 0d 	mcall	80000190 <task1+0x3c>
		ledOn(LED0_GPIO);
80000160:	33 bc       	mov	r12,59
80000162:	f0 1f 00 0d 	mcall	80000194 <task1+0x40>
		ROSA_yield();
80000166:	f0 1f 00 0d 	mcall	80000198 <task1+0x44>
		delay_ms(350);
8000016a:	e0 6c 01 5e 	mov	r12,350
8000016e:	f0 1f 00 0c 	mcall	8000019c <task1+0x48>
		ledOff(LED0_GPIO);
80000172:	33 bc       	mov	r12,59
80000174:	f0 1f 00 0b 	mcall	800001a0 <task1+0x4c>
		delay_ms(350);
80000178:	e0 6c 01 5e 	mov	r12,350
8000017c:	f0 1f 00 08 	mcall	8000019c <task1+0x48>
		ROSA_semaphoreUnlock(&mutex2);
80000180:	48 3c       	lddpc	r12,8000018c <task1+0x38>
80000182:	f0 1f 00 09 	mcall	800001a4 <task1+0x50>
		ROSA_yield();
80000186:	f0 1f 00 05 	mcall	80000198 <task1+0x44>
		
	}
8000018a:	ce 8b       	rjmp	8000015a <task1+0x6>
8000018c:	00 00       	add	r0,r0
8000018e:	05 58       	ld.sh	r8,--r2
80000190:	80 00       	ld.sh	r0,r0[0x0]
80000192:	00 9c       	mov	r12,r0
80000194:	80 00       	ld.sh	r0,r0[0x0]
80000196:	0a 04       	add	r4,r5
80000198:	80 00       	ld.sh	r0,r0[0x0]
8000019a:	06 0a       	add	r10,r3
8000019c:	80 00       	ld.sh	r0,r0[0x0]
8000019e:	07 fc       	ld.ub	r12,r3[0x7]
800001a0:	80 00       	ld.sh	r0,r0[0x0]
800001a2:	0a 24       	rsub	r4,r5
800001a4:	80 00       	ld.sh	r0,r0[0x0]
800001a6:	01 18       	ld.sh	r8,r0++

800001a8 <task2>:
 * Task2
 * LED0 goes dark
 * LED1 lights up
 ************************************************************/
void task2(void)
{
800001a8:	eb cd 40 80 	pushm	r7,lr
800001ac:	1a 97       	mov	r7,sp
	while(1) {
		ROSA_semaphoreLock(&mutex1);
800001ae:	48 cc       	lddpc	r12,800001dc <task2+0x34>
800001b0:	f0 1f 00 0c 	mcall	800001e0 <task2+0x38>
		ledOn(LED1_GPIO);
800001b4:	33 cc       	mov	r12,60
800001b6:	f0 1f 00 0c 	mcall	800001e4 <task2+0x3c>
		delay_ms(350);
800001ba:	e0 6c 01 5e 	mov	r12,350
800001be:	f0 1f 00 0b 	mcall	800001e8 <task2+0x40>
		ledOff(LED1_GPIO);
800001c2:	33 cc       	mov	r12,60
800001c4:	f0 1f 00 0a 	mcall	800001ec <task2+0x44>
		delay_ms(350);
800001c8:	e0 6c 01 5e 	mov	r12,350
800001cc:	f0 1f 00 07 	mcall	800001e8 <task2+0x40>
		ROSA_semaphoreUnlock(&mutex1);
800001d0:	48 3c       	lddpc	r12,800001dc <task2+0x34>
800001d2:	f0 1f 00 08 	mcall	800001f0 <task2+0x48>
		ROSA_yield();
800001d6:	f0 1f 00 08 	mcall	800001f4 <task2+0x4c>
	}
800001da:	ce ab       	rjmp	800001ae <task2+0x6>
800001dc:	00 00       	add	r0,r0
800001de:	05 68       	ld.uh	r8,--r2
800001e0:	80 00       	ld.sh	r0,r0[0x0]
800001e2:	00 9c       	mov	r12,r0
800001e4:	80 00       	ld.sh	r0,r0[0x0]
800001e6:	0a 04       	add	r4,r5
800001e8:	80 00       	ld.sh	r0,r0[0x0]
800001ea:	07 fc       	ld.ub	r12,r3[0x7]
800001ec:	80 00       	ld.sh	r0,r0[0x0]
800001ee:	0a 24       	rsub	r4,r5
800001f0:	80 00       	ld.sh	r0,r0[0x0]
800001f2:	01 18       	ld.sh	r8,r0++
800001f4:	80 00       	ld.sh	r0,r0[0x0]
800001f6:	06 0a       	add	r10,r3

800001f8 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
800001f8:	eb cd 40 80 	pushm	r7,lr
800001fc:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
800001fe:	f0 1f 00 0e 	mcall	80000234 <main+0x3c>
	
	//Create tasks and install them into the ROSA kernel
	ROSA_taskCreate(&t1_tcb, "tsk1", task1, T1_STACK_SIZE, 4);
80000202:	30 48       	mov	r8,4
80000204:	32 09       	mov	r9,32
80000206:	48 da       	lddpc	r10,80000238 <main+0x40>
80000208:	48 db       	lddpc	r11,8000023c <main+0x44>
8000020a:	48 ec       	lddpc	r12,80000240 <main+0x48>
8000020c:	f0 1f 00 0e 	mcall	80000244 <main+0x4c>
	ROSA_taskCreate(&t2_tcb, "tsk2", task2, T2_STACK_SIZE, 4);
80000210:	30 48       	mov	r8,4
80000212:	32 09       	mov	r9,32
80000214:	48 da       	lddpc	r10,80000248 <main+0x50>
80000216:	48 eb       	lddpc	r11,8000024c <main+0x54>
80000218:	48 ec       	lddpc	r12,80000250 <main+0x58>
8000021a:	f0 1f 00 0b 	mcall	80000244 <main+0x4c>
	ROSA_semaphoreCreate(&mutex1, 4);
8000021e:	30 4b       	mov	r11,4
80000220:	48 dc       	lddpc	r12,80000254 <main+0x5c>
80000222:	f0 1f 00 0e 	mcall	80000258 <main+0x60>
	ROSA_semaphoreCreate(&mutex2, 4);
80000226:	30 4b       	mov	r11,4
80000228:	48 dc       	lddpc	r12,8000025c <main+0x64>
8000022a:	f0 1f 00 0c 	mcall	80000258 <main+0x60>
	ROSA_tcbInstall(&t2_tcb);*/

	//Start the ROSA kernel
	//TCBLIST = PA[2]->nexttcb;
	//ROSA_start();
	ROSA_startScheduler();
8000022e:	f0 1f 00 0d 	mcall	80000260 <main+0x68>
	//ledOn(LED1_GPIO);
	/* Execution will never return here */
	while(1);
80000232:	c0 08       	rjmp	80000232 <main+0x3a>
80000234:	80 00       	ld.sh	r0,r0[0x0]
80000236:	03 04       	ld.w	r4,r1++
80000238:	80 00       	ld.sh	r0,r0[0x0]
8000023a:	01 54       	ld.sh	r4,--r0
8000023c:	80 00       	ld.sh	r0,r0[0x0]
8000023e:	01 44       	ld.w	r4,--r0
80000240:	00 00       	add	r0,r0
80000242:	05 64       	ld.uh	r4,--r2
80000244:	80 00       	ld.sh	r0,r0[0x0]
80000246:	04 5c       	eor	r12,r2
80000248:	80 00       	ld.sh	r0,r0[0x0]
8000024a:	01 a8       	ld.ub	r8,r0[0x2]
8000024c:	80 00       	ld.sh	r0,r0[0x0]
8000024e:	01 4c       	ld.w	r12,--r0
80000250:	00 00       	add	r0,r0
80000252:	05 60       	ld.uh	r0,--r2
80000254:	00 00       	add	r0,r0
80000256:	05 68       	ld.uh	r8,--r2
80000258:	80 00       	ld.sh	r0,r0[0x0]
8000025a:	00 08       	add	r8,r0
8000025c:	00 00       	add	r0,r0
8000025e:	05 58       	ld.sh	r8,--r2
80000260:	80 00       	ld.sh	r0,r0[0x0]
80000262:	06 74       	tst	r4,r3

80000264 <usart_options>:
80000264:	00 00 e1 00 08 04 00 00 00 00 00 00                 ............

80000270 <rqi>:
	
	return i;
}

int rqi(ROSA_taskHandle_t ** pth)
{
80000270:	eb cd 40 80 	pushm	r7,lr
80000274:	1a 97       	mov	r7,sp
80000276:	20 2d       	sub	sp,8
80000278:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t priority;
	
	priority = (*pth)->priority;
8000027c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000280:	70 08       	ld.w	r8,r8[0x0]
80000282:	f1 38 00 64 	ld.ub	r8,r8[100]
80000286:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (PA[priority] == NULL) {
8000028a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000028e:	49 d8       	lddpc	r8,80000300 <rqi+0x90>
80000290:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000294:	58 08       	cp.w	r8,0
80000296:	c1 41       	brne	800002be <rqi+0x4e>
		PA[priority] = *pth;
80000298:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000029c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002a0:	70 0a       	ld.w	r10,r8[0x0]
800002a2:	49 88       	lddpc	r8,80000300 <rqi+0x90>
800002a4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		PA[priority]->nexttcb = *pth;
800002a8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800002ac:	49 58       	lddpc	r8,80000300 <rqi+0x90>
800002ae:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800002b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800002b6:	72 09       	ld.w	r9,r9[0x0]
800002b8:	91 09       	st.w	r8[0x0],r9
		return 0;
800002ba:	30 08       	mov	r8,0
800002bc:	c1 d8       	rjmp	800002f6 <rqi+0x86>
	}
	else {
		(*pth)->nexttcb = PA[priority]->nexttcb;
800002be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002c2:	70 08       	ld.w	r8,r8[0x0]
800002c4:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800002c8:	48 e9       	lddpc	r9,80000300 <rqi+0x90>
800002ca:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800002ce:	72 09       	ld.w	r9,r9[0x0]
800002d0:	91 09       	st.w	r8[0x0],r9
		PA[priority]->nexttcb = *pth;
800002d2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800002d6:	48 b8       	lddpc	r8,80000300 <rqi+0x90>
800002d8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800002dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800002e0:	72 09       	ld.w	r9,r9[0x0]
800002e2:	91 09       	st.w	r8[0x0],r9
		PA[priority] = *pth;
800002e4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800002e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002ec:	70 0a       	ld.w	r10,r8[0x0]
800002ee:	48 58       	lddpc	r8,80000300 <rqi+0x90>
800002f0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		return 0;
800002f4:	30 08       	mov	r8,0
	}
}
800002f6:	10 9c       	mov	r12,r8
800002f8:	2f ed       	sub	sp,-8
800002fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800002fe:	00 00       	add	r0,r0
80000300:	00 00       	add	r0,r0
80000302:	05 70       	ld.ub	r0,--r2

80000304 <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
80000304:	eb cd 40 80 	pushm	r7,lr
80000308:	1a 97       	mov	r7,sp
8000030a:	20 1d       	sub	sp,4
	int i = 0;
8000030c:	30 08       	mov	r8,0
8000030e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	//Do initialization of I/O drivers
	ledInit();									//LEDs
80000312:	f0 1f 00 1b 	mcall	8000037c <ROSA_init+0x78>
	buttonInit();								//Buttons
80000316:	f0 1f 00 1b 	mcall	80000380 <ROSA_init+0x7c>
	joystickInit();								//Joystick
8000031a:	f0 1f 00 1b 	mcall	80000384 <ROSA_init+0x80>
	potInit();									//Potentiometer
8000031e:	f0 1f 00 1b 	mcall	80000388 <ROSA_init+0x84>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
80000322:	e0 6a 1b 00 	mov	r10,6912
80000326:	ea 1a 00 b7 	orh	r10,0xb7
8000032a:	49 9b       	lddpc	r11,8000038c <ROSA_init+0x88>
8000032c:	fe 7c 14 00 	mov	r12,-60416
80000330:	f0 1f 00 18 	mcall	80000390 <ROSA_init+0x8c>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
80000334:	49 88       	lddpc	r8,80000394 <ROSA_init+0x90>
80000336:	30 09       	mov	r9,0
80000338:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
8000033a:	49 88       	lddpc	r8,80000398 <ROSA_init+0x94>
8000033c:	30 09       	mov	r9,0
8000033e:	91 09       	st.w	r8[0x0],r9
	PREEMPTASK = NULL;
80000340:	49 78       	lddpc	r8,8000039c <ROSA_init+0x98>
80000342:	30 09       	mov	r9,0
80000344:	91 09       	st.w	r8[0x0],r9
	CREATEDSEMAPHORELIST=NULL;
80000346:	49 78       	lddpc	r8,800003a0 <ROSA_init+0x9c>
80000348:	30 09       	mov	r9,0
8000034a:	91 09       	st.w	r8[0x0],r9
	
	for (i = 0; i < MAXNPRIO; i++) {
8000034c:	30 08       	mov	r8,0
8000034e:	ef 48 ff fc 	st.w	r7[-4],r8
80000352:	c0 c8       	rjmp	8000036a <ROSA_init+0x66>
		PA[i] = NULL;
80000354:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000358:	49 38       	lddpc	r8,800003a4 <ROSA_init+0xa0>
8000035a:	30 0a       	mov	r10,0
8000035c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	TCBLIST = NULL;
	EXECTASK = NULL;
	PREEMPTASK = NULL;
	CREATEDSEMAPHORELIST=NULL;
	
	for (i = 0; i < MAXNPRIO; i++) {
80000360:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000364:	2f f8       	sub	r8,-1
80000366:	ef 48 ff fc 	st.w	r7[-4],r8
8000036a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000036e:	58 b8       	cp.w	r8,11
80000370:	fe 9a ff f2 	brle	80000354 <ROSA_init+0x50>
	
	//Initialize the timer to 100 ms period.
	//...
	//timerInit(100);
	//...
}
80000374:	2f fd       	sub	sp,-4
80000376:	e3 cd 80 80 	ldm	sp++,r7,pc
8000037a:	00 00       	add	r0,r0
8000037c:	80 00       	ld.sh	r0,r0[0x0]
8000037e:	09 78       	ld.ub	r8,--r4
80000380:	80 00       	ld.sh	r0,r0[0x0]
80000382:	07 9c       	ld.ub	r12,r3[0x1]
80000384:	80 00       	ld.sh	r0,r0[0x0]
80000386:	07 c4       	ld.ub	r4,r3[0x4]
80000388:	80 00       	ld.sh	r0,r0[0x0]
8000038a:	0a 44       	or	r4,r5
8000038c:	80 00       	ld.sh	r0,r0[0x0]
8000038e:	02 64       	and	r4,r1
80000390:	80 00       	ld.sh	r0,r0[0x0]
80000392:	0b f8       	ld.ub	r8,r5[0x7]
80000394:	00 00       	add	r0,r0
80000396:	05 6c       	ld.uh	r12,--r2
80000398:	00 00       	add	r0,r0
8000039a:	05 a4       	ld.ub	r4,r2[0x2]
8000039c:	00 00       	add	r0,r0
8000039e:	05 a0       	ld.ub	r0,r2[0x2]
800003a0:	00 00       	add	r0,r0
800003a2:	05 50       	ld.sh	r0,--r2
800003a4:	00 00       	add	r0,r0
800003a6:	05 70       	ld.ub	r0,--r2

800003a8 <ROSA_tcbCreate>:
 * Comment:
 * 	Create the TCB with correct values.
 *
 **********************************************************/
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
800003a8:	eb cd 40 80 	pushm	r7,lr
800003ac:	1a 97       	mov	r7,sp
800003ae:	20 6d       	sub	sp,24
800003b0:	ef 4c ff f8 	st.w	r7[-8],r12
800003b4:	ef 4b ff f4 	st.w	r7[-12],r11
800003b8:	ef 4a ff f0 	st.w	r7[-16],r10
800003bc:	ef 49 ff ec 	st.w	r7[-20],r9
800003c0:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800003c4:	30 08       	mov	r8,0
800003c6:	ef 48 ff fc 	st.w	r7[-4],r8
800003ca:	c1 48       	rjmp	800003f2 <ROSA_tcbCreate+0x4a>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
800003cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800003d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003d4:	ee fa ff f4 	ld.w	r10,r7[-12]
800003d8:	f4 08 00 08 	add	r8,r10,r8
800003dc:	11 88       	ld.ub	r8,r8[0x0]
800003de:	ee fa ff f8 	ld.w	r10,r7[-8]
800003e2:	f4 09 00 09 	add	r9,r10,r9
800003e6:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800003e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003ec:	2f f8       	sub	r8,-1
800003ee:	ef 48 ff fc 	st.w	r7[-4],r8
800003f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003f6:	58 38       	cp.w	r8,3
800003f8:	fe 9a ff ea 	brle	800003cc <ROSA_tcbCreate+0x24>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
800003fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000400:	30 09       	mov	r9,0
80000402:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
80000404:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000408:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000040c:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
8000040e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000412:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000416:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
80000418:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000041c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000420:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
80000422:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000426:	a3 68       	lsl	r8,0x2
80000428:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000042c:	10 09       	add	r9,r8
8000042e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000432:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
80000434:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000438:	70 39       	ld.w	r9,r8[0xc]
8000043a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000043e:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
80000440:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000444:	fc 19 00 1c 	movh	r9,0x1c
80000448:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
8000044a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000044e:	f0 1f 00 03 	mcall	80000458 <ROSA_tcbCreate+0xb0>
}
80000452:	2f ad       	sub	sp,-24
80000454:	e3 cd 80 80 	ldm	sp++,r7,pc
80000458:	80 00       	ld.sh	r0,r0[0x0]
8000045a:	05 7e       	ld.ub	lr,--r2

8000045c <ROSA_taskCreate>:
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
}

int16_t ROSA_taskCreate(ROSA_taskHandle_t ** pth, char * id, void* taskFunction, uint32_t stackSize, uint8_t priority)
{
8000045c:	eb cd 40 80 	pushm	r7,lr
80000460:	1a 97       	mov	r7,sp
80000462:	20 6d       	sub	sp,24
80000464:	ef 4c ff f8 	st.w	r7[-8],r12
80000468:	ef 4b ff f4 	st.w	r7[-12],r11
8000046c:	ef 4a ff f0 	st.w	r7[-16],r10
80000470:	ef 49 ff ec 	st.w	r7[-20],r9
80000474:	ef 68 ff e8 	st.b	r7[-24],r8
	int * tcbStack;
	
	tcbStack = (int *) calloc(stackSize, sizeof(uint32_t)); 
80000478:	30 4b       	mov	r11,4
8000047a:	ee fc ff ec 	ld.w	r12,r7[-20]
8000047e:	f0 1f 00 2b 	mcall	80000528 <ROSA_taskCreate+0xcc>
80000482:	18 98       	mov	r8,r12
80000484:	ef 48 ff fc 	st.w	r7[-4],r8
	
	*pth = (ROSA_taskHandle_t *) malloc(sizeof(ROSA_taskHandle_t));			
80000488:	37 4c       	mov	r12,116
8000048a:	f0 1f 00 29 	mcall	8000052c <ROSA_taskCreate+0xd0>
8000048e:	18 98       	mov	r8,r12
80000490:	10 99       	mov	r9,r8
80000492:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000496:	91 09       	st.w	r8[0x0],r9
	(*pth)->priority = priority;
80000498:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000049c:	70 09       	ld.w	r9,r8[0x0]
8000049e:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800004a2:	f3 68 00 64 	st.b	r9[100],r8
	(*pth)->delay = 0;
800004a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004aa:	70 0a       	ld.w	r10,r8[0x0]
800004ac:	30 08       	mov	r8,0
800004ae:	30 09       	mov	r9,0
800004b0:	f4 e9 00 68 	st.d	r10[104],r8
	(*pth)->counter = 0;
800004b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004b8:	70 09       	ld.w	r9,r8[0x0]
800004ba:	30 08       	mov	r8,0
800004bc:	f3 68 00 70 	st.b	r9[112],r8
	(*pth)->originalPriority = priority;
800004c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004c4:	70 09       	ld.w	r9,r8[0x0]
800004c6:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800004ca:	f3 68 00 71 	st.b	r9[113],r8
	
	ROSA_tcbCreate(*pth, id, taskFunction, tcbStack, stackSize);
800004ce:	ee f8 ff ec 	ld.w	r8,r7[-20]
800004d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800004d6:	72 0c       	ld.w	r12,r9[0x0]
800004d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800004dc:	ee fa ff f0 	ld.w	r10,r7[-16]
800004e0:	ee fb ff f4 	ld.w	r11,r7[-12]
800004e4:	f0 1f 00 13 	mcall	80000530 <ROSA_taskCreate+0xd4>
	
	rqi(pth);
800004e8:	ee fc ff f8 	ld.w	r12,r7[-8]
800004ec:	f0 1f 00 12 	mcall	80000534 <ROSA_taskCreate+0xd8>
	
	if (EXECTASK != NULL) {
800004f0:	49 28       	lddpc	r8,80000538 <ROSA_taskCreate+0xdc>
800004f2:	70 08       	ld.w	r8,r8[0x0]
800004f4:	58 08       	cp.w	r8,0
800004f6:	c1 40       	breq	8000051e <ROSA_taskCreate+0xc2>
		if (EXECTASK->priority < priority) {
800004f8:	49 08       	lddpc	r8,80000538 <ROSA_taskCreate+0xdc>
800004fa:	70 08       	ld.w	r8,r8[0x0]
800004fc:	f1 38 00 64 	ld.ub	r8,r8[100]
80000500:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000504:	f0 09 18 00 	cp.b	r9,r8
80000508:	e0 88 00 0b 	brls	8000051e <ROSA_taskCreate+0xc2>
			PREEMPTASK = PA[priority];
8000050c:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80000510:	48 b8       	lddpc	r8,8000053c <ROSA_taskCreate+0xe0>
80000512:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80000516:	48 b8       	lddpc	r8,80000540 <ROSA_taskCreate+0xe4>
80000518:	91 09       	st.w	r8[0x0],r9
			ROSA_yield();
8000051a:	f0 1f 00 0b 	mcall	80000544 <ROSA_taskCreate+0xe8>
		}	
	}
	
	return 0;
8000051e:	30 08       	mov	r8,0
}
80000520:	10 9c       	mov	r12,r8
80000522:	2f ad       	sub	sp,-24
80000524:	e3 cd 80 80 	ldm	sp++,r7,pc
80000528:	80 00       	ld.sh	r0,r0[0x0]
8000052a:	0e 54       	eor	r4,r7
8000052c:	80 00       	ld.sh	r0,r0[0x0]
8000052e:	0e cc       	st.b	r7++,r12
80000530:	80 00       	ld.sh	r0,r0[0x0]
80000532:	03 a8       	ld.ub	r8,r1[0x2]
80000534:	80 00       	ld.sh	r0,r0[0x0]
80000536:	02 70       	tst	r0,r1
80000538:	00 00       	add	r0,r0
8000053a:	05 a4       	ld.ub	r4,r2[0x2]
8000053c:	00 00       	add	r0,r0
8000053e:	05 70       	ld.ub	r0,--r2
80000540:	00 00       	add	r0,r0
80000542:	05 a0       	ld.ub	r0,r2[0x2]
80000544:	80 00       	ld.sh	r0,r0[0x0]
80000546:	06 0a       	add	r10,r3

80000548 <ROSA_start>:
80000548:	4b 5c       	lddpc	r12,8000061c <_yield+0xa>
8000054a:	4b 6b       	lddpc	r11,80000620 <_yield+0xe>
8000054c:	78 0c       	ld.w	r12,r12[0x0]
8000054e:	97 0c       	st.w	r11[0x0],r12
80000550:	78 50       	ld.w	r0,r12[0x14]
80000552:	1a d0       	st.w	--sp,r0
80000554:	e5 cd 20 00 	ldmts	sp,sp
80000558:	1b 00       	ld.w	r0,sp++
8000055a:	78 2e       	ld.w	lr,r12[0x8]
8000055c:	78 80       	ld.w	r0,r12[0x20]
8000055e:	e3 b0 00 00 	mtsr	0x0,r0
80000562:	79 80       	ld.w	r0,r12[0x60]
80000564:	79 71       	ld.w	r1,r12[0x5c]
80000566:	79 62       	ld.w	r2,r12[0x58]
80000568:	79 53       	ld.w	r3,r12[0x54]
8000056a:	79 44       	ld.w	r4,r12[0x50]
8000056c:	79 35       	ld.w	r5,r12[0x4c]
8000056e:	79 26       	ld.w	r6,r12[0x48]
80000570:	79 17       	ld.w	r7,r12[0x44]
80000572:	79 08       	ld.w	r8,r12[0x40]
80000574:	78 f9       	ld.w	r9,r12[0x3c]
80000576:	78 ea       	ld.w	r10,r12[0x38]
80000578:	78 db       	ld.w	r11,r12[0x34]
8000057a:	78 cc       	ld.w	r12,r12[0x30]
8000057c:	1c 9f       	mov	pc,lr

8000057e <contextInit>:
8000057e:	78 20       	ld.w	r0,r12[0x8]
80000580:	99 a0       	st.w	r12[0x28],r0
80000582:	30 00       	mov	r0,0
80000584:	f9 40 00 60 	st.w	r12[96],r0
80000588:	f9 40 00 5c 	st.w	r12[92],r0
8000058c:	f9 40 00 58 	st.w	r12[88],r0
80000590:	f9 40 00 54 	st.w	r12[84],r0
80000594:	f9 40 00 50 	st.w	r12[80],r0
80000598:	f9 40 00 4c 	st.w	r12[76],r0
8000059c:	f9 40 00 48 	st.w	r12[72],r0
800005a0:	f9 40 00 44 	st.w	r12[68],r0
800005a4:	f9 40 00 40 	st.w	r12[64],r0
800005a8:	99 f0       	st.w	r12[0x3c],r0
800005aa:	99 e0       	st.w	r12[0x38],r0
800005ac:	99 d0       	st.w	r12[0x34],r0
800005ae:	99 c0       	st.w	r12[0x30],r0
800005b0:	1c 9f       	mov	pc,lr

800005b2 <contextSave>:
800005b2:	d2 01       	pushm	r12
800005b4:	49 bc       	lddpc	r12,80000620 <_yield+0xe>
800005b6:	78 0c       	ld.w	r12,r12[0x0]
800005b8:	99 60       	st.w	r12[0x18],r0
800005ba:	99 71       	st.w	r12[0x1c],r1
800005bc:	1b 00       	ld.w	r0,sp++
800005be:	99 c0       	st.w	r12[0x30],r0
800005c0:	7a 00       	ld.w	r0,sp[0x0]
800005c2:	99 80       	st.w	r12[0x20],r0
800005c4:	33 40       	mov	r0,52
800005c6:	18 00       	add	r0,r12
800005c8:	ed c0 0f ff 	stmts	r0,r0-r11
800005cc:	1a 90       	mov	r0,sp
800005ce:	1a d0       	st.w	--sp,r0
800005d0:	ed cd 20 00 	stmts	sp,sp
800005d4:	1b 01       	ld.w	r1,sp++
800005d6:	62 00       	ld.w	r0,r1[0x0]
800005d8:	99 90       	st.w	r12[0x24],r0
800005da:	99 a0       	st.w	r12[0x28],r0
800005dc:	2f c1       	sub	r1,-4
800005de:	99 51       	st.w	r12[0x14],r1
800005e0:	1c 9f       	mov	pc,lr

800005e2 <contextRestore>:
800005e2:	49 0c       	lddpc	r12,80000620 <_yield+0xe>
800005e4:	78 0c       	ld.w	r12,r12[0x0]
800005e6:	78 51       	ld.w	r1,r12[0x14]
800005e8:	1a d1       	st.w	--sp,r1
800005ea:	e5 cd 20 00 	ldmts	sp,sp
800005ee:	1b 01       	ld.w	r1,sp++
800005f0:	78 ae       	ld.w	lr,r12[0x28]
800005f2:	78 90       	ld.w	r0,r12[0x24]
800005f4:	9b 10       	st.w	sp[0x4],r0
800005f6:	33 40       	mov	r0,52
800005f8:	18 00       	add	r0,r12
800005fa:	e5 c0 0f ff 	ldmts	r0,r0-r11
800005fe:	78 80       	ld.w	r0,r12[0x20]
80000600:	9b 00       	st.w	sp[0x0],r0
80000602:	78 60       	ld.w	r0,r12[0x18]
80000604:	78 71       	ld.w	r1,r12[0x1c]
80000606:	78 cc       	ld.w	r12,r12[0x30]
80000608:	d6 13       	rets

8000060a <ROSA_yield>:
8000060a:	d4 01       	pushm	lr
8000060c:	fe ce ff fa 	sub	lr,pc,-6
80000610:	d7 33       	scall

80000612 <_yield>:
80000612:	cd 0f       	rcall	800005b2 <contextSave>
80000614:	f0 1f 00 04 	mcall	80000624 <_yield+0x12>
80000618:	ce 5f       	rcall	800005e2 <contextRestore>
8000061a:	00 00       	add	r0,r0
8000061c:	00 00       	add	r0,r0
8000061e:	05 6c       	ld.uh	r12,--r2
80000620:	00 00       	add	r0,r0
80000622:	05 a4       	ld.ub	r4,r2[0x2]
80000624:	80 00       	ld.sh	r0,r0[0x0]
80000626:	06 28       	rsub	r8,r3

80000628 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000628:	eb cd 40 80 	pushm	r7,lr
8000062c:	1a 97       	mov	r7,sp
	//Find the next task to execute
	if (PREEMPTASK == NULL) {
8000062e:	48 f8       	lddpc	r8,80000668 <scheduler+0x40>
80000630:	70 08       	ld.w	r8,r8[0x0]
80000632:	58 08       	cp.w	r8,0
80000634:	c1 11       	brne	80000656 <scheduler+0x2e>
		PA[EXECTASK->priority] = EXECTASK;
80000636:	48 e8       	lddpc	r8,8000066c <scheduler+0x44>
80000638:	70 08       	ld.w	r8,r8[0x0]
8000063a:	f1 38 00 64 	ld.ub	r8,r8[100]
8000063e:	10 99       	mov	r9,r8
80000640:	48 b8       	lddpc	r8,8000066c <scheduler+0x44>
80000642:	70 0a       	ld.w	r10,r8[0x0]
80000644:	48 b8       	lddpc	r8,80000670 <scheduler+0x48>
80000646:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		EXECTASK = EXECTASK->nexttcb;
8000064a:	48 98       	lddpc	r8,8000066c <scheduler+0x44>
8000064c:	70 08       	ld.w	r8,r8[0x0]
8000064e:	70 09       	ld.w	r9,r8[0x0]
80000650:	48 78       	lddpc	r8,8000066c <scheduler+0x44>
80000652:	91 09       	st.w	r8[0x0],r9
80000654:	c0 88       	rjmp	80000664 <scheduler+0x3c>
	}
	else {
		EXECTASK = PREEMPTASK;
80000656:	48 58       	lddpc	r8,80000668 <scheduler+0x40>
80000658:	70 09       	ld.w	r9,r8[0x0]
8000065a:	48 58       	lddpc	r8,8000066c <scheduler+0x44>
8000065c:	91 09       	st.w	r8[0x0],r9
		PREEMPTASK = NULL;
8000065e:	48 38       	lddpc	r8,80000668 <scheduler+0x40>
80000660:	30 09       	mov	r9,0
80000662:	91 09       	st.w	r8[0x0],r9
	}
}
80000664:	e3 cd 80 80 	ldm	sp++,r7,pc
80000668:	00 00       	add	r0,r0
8000066a:	05 a0       	ld.ub	r0,r2[0x2]
8000066c:	00 00       	add	r0,r0
8000066e:	05 a4       	ld.ub	r4,r2[0x2]
80000670:	00 00       	add	r0,r0
80000672:	05 70       	ld.ub	r0,--r2

80000674 <ROSA_startScheduler>:

void ROSA_startScheduler(void)
{
80000674:	eb cd 40 80 	pushm	r7,lr
80000678:	1a 97       	mov	r7,sp
8000067a:	20 1d       	sub	sp,4
	int i = MAXNPRIO;
8000067c:	30 c8       	mov	r8,12
8000067e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	while (PA[--i] == NULL) {
80000682:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000686:	20 18       	sub	r8,1
80000688:	ef 48 ff fc 	st.w	r7[-4],r8
8000068c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000690:	48 98       	lddpc	r8,800006b4 <ROSA_startScheduler+0x40>
80000692:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000696:	58 08       	cp.w	r8,0
80000698:	cf 50       	breq	80000682 <ROSA_startScheduler+0xe>
		;
	}
	
	TCBLIST = PA[i]->nexttcb;
8000069a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000069e:	48 68       	lddpc	r8,800006b4 <ROSA_startScheduler+0x40>
800006a0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800006a4:	70 09       	ld.w	r9,r8[0x0]
800006a6:	48 58       	lddpc	r8,800006b8 <ROSA_startScheduler+0x44>
800006a8:	91 09       	st.w	r8[0x0],r9
	
	ROSA_start();
800006aa:	f0 1f 00 05 	mcall	800006bc <ROSA_startScheduler+0x48>
}
800006ae:	2f fd       	sub	sp,-4
800006b0:	e3 cd 80 80 	ldm	sp++,r7,pc
800006b4:	00 00       	add	r0,r0
800006b6:	05 70       	ld.ub	r0,--r2
800006b8:	00 00       	add	r0,r0
800006ba:	05 6c       	ld.uh	r12,--r2
800006bc:	80 00       	ld.sh	r0,r0[0x0]
800006be:	05 48       	ld.w	r8,--r2

800006c0 <C.0.9414>:
800006c0:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

800006d0 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
800006d0:	eb cd 40 80 	pushm	r7,lr
800006d4:	1a 97       	mov	r7,sp
800006d6:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
800006d8:	fe 78 38 00 	mov	r8,-51200
800006dc:	ef 48 ff fc 	st.w	r7[-4],r8

	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
800006e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006e4:	70 88       	ld.w	r8,r8[0x20]
800006e6:	ef 48 ff f8 	st.w	r7[-8],r8
	//if(sr & AVR32_TC_CPCS_MASK)
		//ROSA_yieldFromISR();
}
800006ea:	2f ed       	sub	sp,-8
800006ec:	e3 cd 40 80 	ldm	sp++,r7,lr
800006f0:	d6 03       	rete
800006f2:	d7 03       	nop

800006f4 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
800006f4:	eb cd 40 80 	pushm	r7,lr
800006f8:	1a 97       	mov	r7,sp
800006fa:	20 7d       	sub	sp,28
800006fc:	ef 4c ff e4 	st.w	r7[-28],r12

	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000700:	4a 48       	lddpc	r8,80000790 <timerPeriodSet+0x9c>
80000702:	ee ca 00 18 	sub	r10,r7,24
80000706:	10 9b       	mov	r11,r8
80000708:	f6 e8 00 00 	ld.d	r8,r11[0]
8000070c:	f4 e9 00 00 	st.d	r10[0],r8
80000710:	f6 e8 00 08 	ld.d	r8,r11[8]
80000714:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000718:	30 48       	mov	r8,4
8000071a:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
8000071e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000722:	20 18       	sub	r8,1
80000724:	a3 68       	lsl	r8,0x2
80000726:	ee 08 00 08 	add	r8,r7,r8
8000072a:	f0 f9 ff e8 	ld.w	r9,r8[-24]
8000072e:	e0 68 1b 00 	mov	r8,6912
80000732:	ea 18 00 b7 	orh	r8,0xb7
80000736:	f0 09 0c 08 	divs	r8,r8,r9
8000073a:	10 99       	mov	r9,r8
8000073c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000740:	b1 39       	mul	r9,r8
80000742:	e0 68 4d d3 	mov	r8,19923
80000746:	ea 18 10 62 	orh	r8,0x1062
8000074a:	f2 08 06 48 	mulu.d	r8,r9,r8
8000074e:	f2 08 16 06 	lsr	r8,r9,0x6
80000752:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80000756:	ee fc ff fc 	ld.w	r12,r7[-4]
8000075a:	f0 1f 00 0f 	mcall	80000794 <timerPeriodSet+0xa0>
	timerRCSet(rc);
8000075e:	ee fc ff f8 	ld.w	r12,r7[-8]
80000762:	f0 1f 00 0e 	mcall	80000798 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80000766:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000076a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000076e:	f2 08 02 4a 	mul	r10,r9,r8
80000772:	e0 68 9f 81 	mov	r8,40833
80000776:	ea 18 16 5e 	orh	r8,0x165e
8000077a:	f4 08 04 48 	muls.d	r8,r10,r8
8000077e:	b5 49       	asr	r9,0x14
80000780:	f4 08 14 1f 	asr	r8,r10,0x1f
80000784:	f2 08 01 08 	sub	r8,r9,r8
}
80000788:	10 9c       	mov	r12,r8
8000078a:	2f 9d       	sub	sp,-28
8000078c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000790:	80 00       	ld.sh	r0,r0[0x0]
80000792:	06 c0       	st.b	r3++,r0
80000794:	80 00       	ld.sh	r0,r0[0x0]
80000796:	0d 90       	ld.ub	r0,r6[0x1]
80000798:	80 00       	ld.sh	r0,r0[0x0]
8000079a:	0d 7a       	ld.ub	r10,--r6

8000079c <buttonInit>:
8000079c:	eb cd 40 80 	pushm	r7,lr
800007a0:	1a 97       	mov	r7,sp
800007a2:	30 1b       	mov	r11,1
800007a4:	35 8c       	mov	r12,88
800007a6:	f0 1f 00 07 	mcall	800007c0 <buttonInit+0x24>
800007aa:	30 1b       	mov	r11,1
800007ac:	35 5c       	mov	r12,85
800007ae:	f0 1f 00 05 	mcall	800007c0 <buttonInit+0x24>
800007b2:	30 1b       	mov	r11,1
800007b4:	35 2c       	mov	r12,82
800007b6:	f0 1f 00 03 	mcall	800007c0 <buttonInit+0x24>
800007ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800007be:	00 00       	add	r0,r0
800007c0:	80 00       	ld.sh	r0,r0[0x0]
800007c2:	08 30       	cp.w	r0,r4

800007c4 <joystickInit>:
800007c4:	eb cd 40 80 	pushm	r7,lr
800007c8:	1a 97       	mov	r7,sp
800007ca:	30 1b       	mov	r11,1
800007cc:	31 bc       	mov	r12,27
800007ce:	f0 1f 00 0b 	mcall	800007f8 <joystickInit+0x34>
800007d2:	30 1b       	mov	r11,1
800007d4:	31 9c       	mov	r12,25
800007d6:	f0 1f 00 09 	mcall	800007f8 <joystickInit+0x34>
800007da:	30 1b       	mov	r11,1
800007dc:	31 cc       	mov	r12,28
800007de:	f0 1f 00 07 	mcall	800007f8 <joystickInit+0x34>
800007e2:	30 1b       	mov	r11,1
800007e4:	31 4c       	mov	r12,20
800007e6:	f0 1f 00 05 	mcall	800007f8 <joystickInit+0x34>
800007ea:	30 1b       	mov	r11,1
800007ec:	31 ac       	mov	r12,26
800007ee:	f0 1f 00 03 	mcall	800007f8 <joystickInit+0x34>
800007f2:	e3 cd 80 80 	ldm	sp++,r7,pc
800007f6:	00 00       	add	r0,r0
800007f8:	80 00       	ld.sh	r0,r0[0x0]
800007fa:	08 30       	cp.w	r0,r4

800007fc <delay_ms>:
800007fc:	eb cd 40 80 	pushm	r7,lr
80000800:	1a 97       	mov	r7,sp
80000802:	20 2d       	sub	sp,8
80000804:	ef 4c ff f8 	st.w	r7[-8],r12
80000808:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000080c:	e0 69 04 42 	mov	r9,1090
80000810:	b3 38       	mul	r8,r9
80000812:	ef 48 ff fc 	st.w	r7[-4],r8
80000816:	c0 68       	rjmp	80000822 <delay_ms+0x26>
80000818:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000081c:	20 18       	sub	r8,1
8000081e:	ef 48 ff fc 	st.w	r7[-4],r8
80000822:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000826:	58 08       	cp.w	r8,0
80000828:	cf 81       	brne	80000818 <delay_ms+0x1c>
8000082a:	2f ed       	sub	sp,-8
8000082c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000830 <gpioInit>:
80000830:	eb cd 40 80 	pushm	r7,lr
80000834:	1a 97       	mov	r7,sp
80000836:	20 7d       	sub	sp,28
80000838:	ef 4c ff ec 	st.w	r7[-20],r12
8000083c:	ef 4b ff e8 	st.w	r7[-24],r11
80000840:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000844:	a5 58       	asr	r8,0x5
80000846:	ef 48 ff f4 	st.w	r7[-12],r8
8000084a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000084e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000852:	ef 48 ff fc 	st.w	r7[-4],r8
80000856:	30 19       	mov	r9,1
80000858:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000085c:	f2 08 09 48 	lsl	r8,r9,r8
80000860:	ef 48 ff f8 	st.w	r7[-8],r8
80000864:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000868:	a9 68       	lsl	r8,0x8
8000086a:	e0 28 f0 00 	sub	r8,61440
8000086e:	ef 48 ff f0 	st.w	r7[-16],r8
80000872:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000876:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000087a:	91 19       	st.w	r8[0x4],r9
8000087c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000880:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000884:	91 69       	st.w	r8[0x18],r9
80000886:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000088a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000088e:	91 a9       	st.w	r8[0x28],r9
80000890:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000894:	ef 48 ff e4 	st.w	r7[-28],r8
80000898:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000089c:	58 08       	cp.w	r8,0
8000089e:	c0 60       	breq	800008aa <gpioInit+0x7a>
800008a0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800008a4:	58 18       	cp.w	r8,1
800008a6:	c0 90       	breq	800008b8 <gpioInit+0x88>
800008a8:	c0 f8       	rjmp	800008c6 <gpioInit+0x96>
800008aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800008ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800008b2:	f1 49 00 44 	st.w	r8[68],r9
800008b6:	c0 e8       	rjmp	800008d2 <gpioInit+0xa2>
800008b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800008bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800008c0:	f1 49 00 48 	st.w	r8[72],r9
800008c4:	c0 78       	rjmp	800008d2 <gpioInit+0xa2>
800008c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800008ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800008ce:	f1 49 00 48 	st.w	r8[72],r9
800008d2:	2f 9d       	sub	sp,-28
800008d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800008d8 <gpioClear>:
800008d8:	eb cd 40 80 	pushm	r7,lr
800008dc:	1a 97       	mov	r7,sp
800008de:	20 5d       	sub	sp,20
800008e0:	ef 4c ff ec 	st.w	r7[-20],r12
800008e4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800008e8:	a5 58       	asr	r8,0x5
800008ea:	ef 48 ff f4 	st.w	r7[-12],r8
800008ee:	ee f8 ff ec 	ld.w	r8,r7[-20]
800008f2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800008f6:	ef 48 ff fc 	st.w	r7[-4],r8
800008fa:	30 19       	mov	r9,1
800008fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000900:	f2 08 09 48 	lsl	r8,r9,r8
80000904:	ef 48 ff f8 	st.w	r7[-8],r8
80000908:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000090c:	a9 68       	lsl	r8,0x8
8000090e:	e0 28 f0 00 	sub	r8,61440
80000912:	ef 48 ff f0 	st.w	r7[-16],r8
80000916:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000091a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000091e:	f1 49 00 58 	st.w	r8[88],r9
80000922:	2f bd       	sub	sp,-20
80000924:	e3 cd 80 80 	ldm	sp++,r7,pc

80000928 <gpioSet>:
80000928:	eb cd 40 80 	pushm	r7,lr
8000092c:	1a 97       	mov	r7,sp
8000092e:	20 5d       	sub	sp,20
80000930:	ef 4c ff ec 	st.w	r7[-20],r12
80000934:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000938:	a5 58       	asr	r8,0x5
8000093a:	ef 48 ff f4 	st.w	r7[-12],r8
8000093e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000942:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000946:	ef 48 ff fc 	st.w	r7[-4],r8
8000094a:	30 19       	mov	r9,1
8000094c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000950:	f2 08 09 48 	lsl	r8,r9,r8
80000954:	ef 48 ff f8 	st.w	r7[-8],r8
80000958:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000095c:	a9 68       	lsl	r8,0x8
8000095e:	e0 28 f0 00 	sub	r8,61440
80000962:	ef 48 ff f0 	st.w	r7[-16],r8
80000966:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000096a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000096e:	f1 49 00 54 	st.w	r8[84],r9
80000972:	2f bd       	sub	sp,-20
80000974:	e3 cd 80 80 	ldm	sp++,r7,pc

80000978 <ledInit>:
80000978:	eb cd 40 80 	pushm	r7,lr
8000097c:	1a 97       	mov	r7,sp
8000097e:	20 9d       	sub	sp,36
80000980:	49 e8       	lddpc	r8,800009f8 <ledInit+0x80>
80000982:	ee cb 00 24 	sub	r11,r7,36
80000986:	10 9a       	mov	r10,r8
80000988:	f4 e8 00 00 	ld.d	r8,r10[0]
8000098c:	f6 e9 00 00 	st.d	r11[0],r8
80000990:	f4 e8 00 08 	ld.d	r8,r10[8]
80000994:	f6 e9 00 08 	st.d	r11[8],r8
80000998:	f4 e8 00 10 	ld.d	r8,r10[16]
8000099c:	f6 e9 00 10 	st.d	r11[16],r8
800009a0:	f4 e8 00 18 	ld.d	r8,r10[24]
800009a4:	f6 e9 00 18 	st.d	r11[24],r8
800009a8:	30 08       	mov	r8,0
800009aa:	ef 48 ff fc 	st.w	r7[-4],r8
800009ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009b2:	a3 68       	lsl	r8,0x2
800009b4:	ee 08 00 08 	add	r8,r7,r8
800009b8:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800009bc:	10 9c       	mov	r12,r8
800009be:	f0 1f 00 10 	mcall	800009fc <ledInit+0x84>
800009c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009c6:	a3 68       	lsl	r8,0x2
800009c8:	ee 08 00 08 	add	r8,r7,r8
800009cc:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800009d0:	30 0b       	mov	r11,0
800009d2:	10 9c       	mov	r12,r8
800009d4:	f0 1f 00 0b 	mcall	80000a00 <ledInit+0x88>
800009d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009dc:	58 78       	cp.w	r8,7
800009de:	5f 18       	srne	r8
800009e0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800009e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009e8:	2f f8       	sub	r8,-1
800009ea:	ef 48 ff fc 	st.w	r7[-4],r8
800009ee:	58 09       	cp.w	r9,0
800009f0:	cd f1       	brne	800009ae <ledInit+0x36>
800009f2:	2f 7d       	sub	sp,-36
800009f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800009f8:	80 00       	ld.sh	r0,r0[0x0]
800009fa:	1c 00       	add	r0,lr
800009fc:	80 00       	ld.sh	r0,r0[0x0]
800009fe:	0a 24       	rsub	r4,r5
80000a00:	80 00       	ld.sh	r0,r0[0x0]
80000a02:	08 30       	cp.w	r0,r4

80000a04 <ledOn>:
80000a04:	eb cd 40 80 	pushm	r7,lr
80000a08:	1a 97       	mov	r7,sp
80000a0a:	20 1d       	sub	sp,4
80000a0c:	ef 4c ff fc 	st.w	r7[-4],r12
80000a10:	ee fc ff fc 	ld.w	r12,r7[-4]
80000a14:	f0 1f 00 03 	mcall	80000a20 <ledOn+0x1c>
80000a18:	2f fd       	sub	sp,-4
80000a1a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a1e:	00 00       	add	r0,r0
80000a20:	80 00       	ld.sh	r0,r0[0x0]
80000a22:	08 d8       	st.w	--r4,r8

80000a24 <ledOff>:
80000a24:	eb cd 40 80 	pushm	r7,lr
80000a28:	1a 97       	mov	r7,sp
80000a2a:	20 1d       	sub	sp,4
80000a2c:	ef 4c ff fc 	st.w	r7[-4],r12
80000a30:	ee fc ff fc 	ld.w	r12,r7[-4]
80000a34:	f0 1f 00 03 	mcall	80000a40 <ledOff+0x1c>
80000a38:	2f fd       	sub	sp,-4
80000a3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a3e:	00 00       	add	r0,r0
80000a40:	80 00       	ld.sh	r0,r0[0x0]
80000a42:	09 28       	ld.uh	r8,r4++

80000a44 <potInit>:
80000a44:	d3 01       	pushm	r11-r12
80000a46:	e0 6c 10 00 	mov	r12,4096
80000a4a:	ea 1c ff ff 	orh	r12,0xffff
80000a4e:	31 6b       	mov	r11,22
80000a50:	99 2b       	st.w	r12[0x8],r11
80000a52:	99 6b       	st.w	r12[0x18],r11
80000a54:	99 6b       	st.w	r12[0x18],r11
80000a56:	e0 6c 3c 00 	mov	r12,15360
80000a5a:	ea 1c ff ff 	orh	r12,0xffff
80000a5e:	30 1b       	mov	r11,1
80000a60:	99 0b       	st.w	r12[0x0],r11
80000a62:	e0 6b 0f 1f 	mov	r11,3871
80000a66:	b1 6b       	lsl	r11,0x10
80000a68:	99 1b       	st.w	r12[0x4],r11
80000a6a:	30 2b       	mov	r11,2
80000a6c:	99 4b       	st.w	r12[0x10],r11
80000a6e:	d3 02       	popm	r11-r12
80000a70:	1c 9f       	mov	pc,lr

80000a72 <potGetValue>:
80000a72:	d1 81       	pushm	r10-r11
80000a74:	e0 6c 3c 00 	mov	r12,15360
80000a78:	ea 1c ff ff 	orh	r12,0xffff
80000a7c:	30 2b       	mov	r11,2
80000a7e:	99 0b       	st.w	r12[0x0],r11

80000a80 <a1>:
80000a80:	78 7a       	ld.w	r10,r12[0x1c]
80000a82:	16 7a       	tst	r10,r11
80000a84:	cf e0       	breq	80000a80 <a1>
80000a86:	78 dc       	ld.w	r12,r12[0x34]
80000a88:	d1 82       	popm	r10-r11
80000a8a:	1c 9f       	mov	pc,lr

80000a8c <usartReset>:
80000a8c:	eb cd 40 80 	pushm	r7,lr
80000a90:	1a 97       	mov	r7,sp
80000a92:	20 3d       	sub	sp,12
80000a94:	ef 4c ff f8 	st.w	r7[-8],r12
80000a98:	f0 1f 00 16 	mcall	80000af0 <usartReset+0x64>
80000a9c:	18 98       	mov	r8,r12
80000a9e:	ef 48 ff fc 	st.w	r7[-4],r8
80000aa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000aa6:	58 08       	cp.w	r8,0
80000aa8:	c0 30       	breq	80000aae <usartReset+0x22>
80000aaa:	f0 1f 00 13 	mcall	80000af4 <usartReset+0x68>
80000aae:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ab2:	3f f8       	mov	r8,-1
80000ab4:	93 38       	st.w	r9[0xc],r8
80000ab6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000aba:	70 58       	ld.w	r8,r8[0x14]
80000abc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ac0:	58 08       	cp.w	r8,0
80000ac2:	c0 30       	breq	80000ac8 <usartReset+0x3c>
80000ac4:	f0 1f 00 0d 	mcall	80000af8 <usartReset+0x6c>
80000ac8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000acc:	30 08       	mov	r8,0
80000ace:	93 18       	st.w	r9[0x4],r8
80000ad0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ad4:	30 08       	mov	r8,0
80000ad6:	93 98       	st.w	r9[0x24],r8
80000ad8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000adc:	30 08       	mov	r8,0
80000ade:	93 a8       	st.w	r9[0x28],r8
80000ae0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ae4:	ea 68 61 0c 	mov	r8,680204
80000ae8:	93 08       	st.w	r9[0x0],r8
80000aea:	2f dd       	sub	sp,-12
80000aec:	e3 cd 80 80 	ldm	sp++,r7,pc
80000af0:	80 00       	ld.sh	r0,r0[0x0]
80000af2:	19 6e       	ld.uh	lr,--r12
80000af4:	80 00       	ld.sh	r0,r0[0x0]
80000af6:	19 66       	ld.uh	r6,--r12
80000af8:	80 00       	ld.sh	r0,r0[0x0]
80000afa:	19 6a       	ld.uh	r10,--r12

80000afc <usartSetBaudrate>:
80000afc:	eb cd 40 80 	pushm	r7,lr
80000b00:	1a 97       	mov	r7,sp
80000b02:	20 bd       	sub	sp,44
80000b04:	ef 4c ff ec 	st.w	r7[-20],r12
80000b08:	ef 4b ff e8 	st.w	r7[-24],r11
80000b0c:	ef 4a ff e4 	st.w	r7[-28],r10
80000b10:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000b14:	f0 09 15 04 	lsl	r9,r8,0x4
80000b18:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b1c:	10 39       	cp.w	r9,r8
80000b1e:	e0 8b 00 06 	brhi	80000b2a <usartSetBaudrate+0x2e>
80000b22:	31 09       	mov	r9,16
80000b24:	ef 49 ff d4 	st.w	r7[-44],r9
80000b28:	c0 48       	rjmp	80000b30 <usartSetBaudrate+0x34>
80000b2a:	30 88       	mov	r8,8
80000b2c:	ef 48 ff d4 	st.w	r7[-44],r8
80000b30:	ee f9 ff d4 	ld.w	r9,r7[-44]
80000b34:	ef 49 ff f0 	st.w	r7[-16],r9
80000b38:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b3c:	f0 0a 15 03 	lsl	r10,r8,0x3
80000b40:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000b44:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000b48:	f2 08 02 48 	mul	r8,r9,r8
80000b4c:	a1 98       	lsr	r8,0x1
80000b4e:	10 0a       	add	r10,r8
80000b50:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000b54:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000b58:	f2 08 02 48 	mul	r8,r9,r8
80000b5c:	f4 08 0d 08 	divu	r8,r10,r8
80000b60:	ef 48 ff f4 	st.w	r7[-12],r8
80000b64:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b68:	a3 98       	lsr	r8,0x3
80000b6a:	ef 48 ff f8 	st.w	r7[-8],r8
80000b6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b72:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000b76:	ef 48 ff fc 	st.w	r7[-4],r8
80000b7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b7e:	58 08       	cp.w	r8,0
80000b80:	c0 70       	breq	80000b8e <usartSetBaudrate+0x92>
80000b82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b86:	e0 48 ff ff 	cp.w	r8,65535
80000b8a:	e0 88 00 06 	brls	80000b96 <usartSetBaudrate+0x9a>
80000b8e:	30 18       	mov	r8,1
80000b90:	ef 48 ff d8 	st.w	r7[-40],r8
80000b94:	c2 c8       	rjmp	80000bec <usartSetBaudrate+0xf0>
80000b96:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000b9a:	70 18       	ld.w	r8,r8[0x4]
80000b9c:	10 99       	mov	r9,r8
80000b9e:	e4 19 ff f7 	andh	r9,0xfff7
80000ba2:	e0 19 fe cf 	andl	r9,0xfecf
80000ba6:	ef 49 ff dc 	st.w	r7[-36],r9
80000baa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000bae:	59 08       	cp.w	r8,16
80000bb0:	c0 60       	breq	80000bbc <usartSetBaudrate+0xc0>
80000bb2:	e8 68 00 00 	mov	r8,524288
80000bb6:	ef 48 ff e0 	st.w	r7[-32],r8
80000bba:	c0 48       	rjmp	80000bc2 <usartSetBaudrate+0xc6>
80000bbc:	30 09       	mov	r9,0
80000bbe:	ef 49 ff e0 	st.w	r7[-32],r9
80000bc2:	ee f9 ff dc 	ld.w	r9,r7[-36]
80000bc6:	ee f8 ff e0 	ld.w	r8,r7[-32]
80000bca:	10 49       	or	r9,r8
80000bcc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000bd0:	91 19       	st.w	r8[0x4],r9
80000bd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bd6:	f0 09 15 10 	lsl	r9,r8,0x10
80000bda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bde:	10 49       	or	r9,r8
80000be0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000be4:	91 89       	st.w	r8[0x20],r9
80000be6:	30 09       	mov	r9,0
80000be8:	ef 49 ff d8 	st.w	r7[-40],r9
80000bec:	ee f8 ff d8 	ld.w	r8,r7[-40]
80000bf0:	10 9c       	mov	r12,r8
80000bf2:	2f 5d       	sub	sp,-44
80000bf4:	e3 cd 80 80 	ldm	sp++,r7,pc

80000bf8 <usartInit>:
80000bf8:	eb cd 40 80 	pushm	r7,lr
80000bfc:	1a 97       	mov	r7,sp
80000bfe:	20 4d       	sub	sp,16
80000c00:	ef 4c ff f8 	st.w	r7[-8],r12
80000c04:	ef 4b ff f4 	st.w	r7[-12],r11
80000c08:	ef 4a ff f0 	st.w	r7[-16],r10
80000c0c:	fe 78 10 00 	mov	r8,-61440
80000c10:	ef 48 ff fc 	st.w	r7[-4],r8
80000c14:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000c18:	30 18       	mov	r8,1
80000c1a:	93 28       	st.w	r9[0x8],r8
80000c1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000c20:	30 28       	mov	r8,2
80000c22:	93 28       	st.w	r9[0x8],r8
80000c24:	ee fc ff f8 	ld.w	r12,r7[-8]
80000c28:	f0 1f 00 3b 	mcall	80000d14 <usartInit+0x11c>
80000c2c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000c30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c34:	70 08       	ld.w	r8,r8[0x0]
80000c36:	12 9a       	mov	r10,r9
80000c38:	10 9b       	mov	r11,r8
80000c3a:	ee fc ff f8 	ld.w	r12,r7[-8]
80000c3e:	f0 1f 00 37 	mcall	80000d18 <usartInit+0x120>
80000c42:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c46:	11 c9       	ld.ub	r9,r8[0x4]
80000c48:	30 98       	mov	r8,9
80000c4a:	f0 09 18 00 	cp.b	r9,r8
80000c4e:	c0 a1       	brne	80000c62 <usartInit+0x6a>
80000c50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c54:	70 18       	ld.w	r8,r8[0x4]
80000c56:	10 99       	mov	r9,r8
80000c58:	b1 b9       	sbr	r9,0x11
80000c5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c5e:	91 19       	st.w	r8[0x4],r9
80000c60:	c0 d8       	rjmp	80000c7a <usartInit+0x82>
80000c62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c66:	70 19       	ld.w	r9,r8[0x4]
80000c68:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c6c:	11 c8       	ld.ub	r8,r8[0x4]
80000c6e:	20 58       	sub	r8,5
80000c70:	a7 68       	lsl	r8,0x6
80000c72:	10 49       	or	r9,r8
80000c74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c78:	91 19       	st.w	r8[0x4],r9
80000c7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c7e:	70 1a       	ld.w	r10,r8[0x4]
80000c80:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c84:	11 d8       	ld.ub	r8,r8[0x5]
80000c86:	f0 09 15 09 	lsl	r9,r8,0x9
80000c8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c8e:	f1 38 00 08 	ld.ub	r8,r8[8]
80000c92:	af 68       	lsl	r8,0xe
80000c94:	f3 e8 10 08 	or	r8,r9,r8
80000c98:	f5 e8 10 09 	or	r9,r10,r8
80000c9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ca0:	91 19       	st.w	r8[0x4],r9
80000ca2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ca6:	90 39       	ld.sh	r9,r8[0x6]
80000ca8:	30 28       	mov	r8,2
80000caa:	f0 09 19 00 	cp.h	r9,r8
80000cae:	e0 88 00 14 	brls	80000cd6 <usartInit+0xde>
80000cb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cb6:	70 18       	ld.w	r8,r8[0x4]
80000cb8:	10 99       	mov	r9,r8
80000cba:	ad b9       	sbr	r9,0xd
80000cbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cc0:	91 19       	st.w	r8[0x4],r9
80000cc2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000cc6:	90 38       	ld.sh	r8,r8[0x6]
80000cc8:	5c 78       	castu.h	r8
80000cca:	20 28       	sub	r8,2
80000ccc:	10 99       	mov	r9,r8
80000cce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cd2:	91 a9       	st.w	r8[0x28],r9
80000cd4:	c0 d8       	rjmp	80000cee <usartInit+0xf6>
80000cd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cda:	70 19       	ld.w	r9,r8[0x4]
80000cdc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ce0:	90 38       	ld.sh	r8,r8[0x6]
80000ce2:	5c 78       	castu.h	r8
80000ce4:	ad 68       	lsl	r8,0xc
80000ce6:	10 49       	or	r9,r8
80000ce8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cec:	91 19       	st.w	r8[0x4],r9
80000cee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cf2:	70 18       	ld.w	r8,r8[0x4]
80000cf4:	10 99       	mov	r9,r8
80000cf6:	e0 19 ff f0 	andl	r9,0xfff0
80000cfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cfe:	91 19       	st.w	r8[0x4],r9
80000d00:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d04:	35 08       	mov	r8,80
80000d06:	93 08       	st.w	r9[0x0],r8
80000d08:	30 08       	mov	r8,0
80000d0a:	10 9c       	mov	r12,r8
80000d0c:	2f cd       	sub	sp,-16
80000d0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d12:	00 00       	add	r0,r0
80000d14:	80 00       	ld.sh	r0,r0[0x0]
80000d16:	0a 8c       	andn	r12,r5
80000d18:	80 00       	ld.sh	r0,r0[0x0]
80000d1a:	0a fc       	st.b	--r5,r12

80000d1c <timerInit>:
80000d1c:	d5 01       	pushm	r11,lr
80000d1e:	d2 01       	pushm	r12
80000d20:	f0 1f 00 28 	mcall	80000dc0 <timerClearInterrupt+0x10>
80000d24:	f0 1f 00 28 	mcall	80000dc4 <timerClearInterrupt+0x14>
80000d28:	e0 6c 38 00 	mov	r12,14336
80000d2c:	ea 1c ff ff 	orh	r12,0xffff
80000d30:	e0 6b c0 00 	mov	r11,49152
80000d34:	ea 1b 00 00 	orh	r11,0x0
80000d38:	99 1b       	st.w	r12[0x4],r11
80000d3a:	30 1b       	mov	r11,1
80000d3c:	a5 6b       	lsl	r11,0x4
80000d3e:	99 9b       	st.w	r12[0x24],r11
80000d40:	d2 02       	popm	r12
80000d42:	f0 1f 00 22 	mcall	80000dc8 <timerClearInterrupt+0x18>
80000d46:	d5 02       	popm	r11,lr
80000d48:	1c 9f       	mov	pc,lr

80000d4a <timerReset>:
80000d4a:	d3 01       	pushm	r11-r12
80000d4c:	e0 6c 38 00 	mov	r12,14336
80000d50:	ea 1c ff ff 	orh	r12,0xffff
80000d54:	30 5b       	mov	r11,5
80000d56:	99 0b       	st.w	r12[0x0],r11
80000d58:	e0 6b 00 08 	mov	r11,8
80000d5c:	ea 1b 00 00 	orh	r11,0x0
80000d60:	76 0b       	ld.w	r11,r11[0x0]
80000d62:	99 7b       	st.w	r12[0x1c],r11
80000d64:	d3 02       	popm	r11-r12
80000d66:	1c 9f       	mov	pc,lr

80000d68 <timerStop>:
80000d68:	d3 01       	pushm	r11-r12
80000d6a:	e0 6c 38 00 	mov	r12,14336
80000d6e:	ea 1c ff ff 	orh	r12,0xffff
80000d72:	30 2b       	mov	r11,2
80000d74:	99 0b       	st.w	r12[0x0],r11
80000d76:	d3 02       	popm	r11-r12
80000d78:	1c 9f       	mov	pc,lr

80000d7a <timerRCSet>:
80000d7a:	d3 01       	pushm	r11-r12
80000d7c:	49 4b       	lddpc	r11,80000dcc <timerClearInterrupt+0x1c>
80000d7e:	97 0c       	st.w	r11[0x0],r12
80000d80:	e0 6c 38 00 	mov	r12,14336
80000d84:	ea 1c ff ff 	orh	r12,0xffff
80000d88:	76 0b       	ld.w	r11,r11[0x0]
80000d8a:	99 7b       	st.w	r12[0x1c],r11
80000d8c:	d3 02       	popm	r11-r12
80000d8e:	1c 9f       	mov	pc,lr

80000d90 <timerPrescaleSet>:
80000d90:	d3 81       	pushm	r10-r12
80000d92:	49 0b       	lddpc	r11,80000dd0 <timerClearInterrupt+0x20>
80000d94:	97 0c       	st.w	r11[0x0],r12
80000d96:	e0 6c 38 00 	mov	r12,14336
80000d9a:	ea 1c ff ff 	orh	r12,0xffff
80000d9e:	78 1a       	ld.w	r10,r12[0x4]
80000da0:	3f 8b       	mov	r11,-8
80000da2:	16 6a       	and	r10,r11
80000da4:	48 bb       	lddpc	r11,80000dd0 <timerClearInterrupt+0x20>
80000da6:	76 0b       	ld.w	r11,r11[0x0]
80000da8:	14 4b       	or	r11,r10
80000daa:	99 1b       	st.w	r12[0x4],r11
80000dac:	d3 82       	popm	r10-r12
80000dae:	1c 9f       	mov	pc,lr

80000db0 <timerClearInterrupt>:
80000db0:	d2 01       	pushm	r12
80000db2:	e0 6c 38 00 	mov	r12,14336
80000db6:	ea 1c ff ff 	orh	r12,0xffff
80000dba:	78 8c       	ld.w	r12,r12[0x20]
80000dbc:	d2 02       	popm	r12
80000dbe:	1c 9f       	mov	pc,lr
80000dc0:	80 00       	ld.sh	r0,r0[0x0]
80000dc2:	19 66       	ld.uh	r6,--r12
80000dc4:	80 00       	ld.sh	r0,r0[0x0]
80000dc6:	0d b0       	ld.ub	r0,r6[0x3]
80000dc8:	80 00       	ld.sh	r0,r0[0x0]
80000dca:	06 f4       	st.b	--r3,r4
80000dcc:	00 00       	add	r0,r0
80000dce:	00 08       	add	r8,r0
80000dd0:	00 00       	add	r0,r0
80000dd2:	00 0c       	add	r12,r0

80000dd4 <_stext>:
80000dd4:	49 7d       	lddpc	sp,80000e30 <udata_end+0x4>
80000dd6:	49 80       	lddpc	r0,80000e34 <udata_end+0x8>
80000dd8:	1a d0       	st.w	--sp,r0
80000dda:	e5 cd 20 00 	ldmts	sp,sp
80000dde:	1b 00       	ld.w	r0,sp++
80000de0:	49 60       	lddpc	r0,80000e38 <udata_end+0xc>
80000de2:	e3 b0 00 01 	mtsr	0x4,r0
80000de6:	d5 53       	csrf	0x15
80000de8:	e0 6c 0c 00 	mov	r12,3072
80000dec:	ea 1c ff ff 	orh	r12,0xffff
80000df0:	e0 6b 01 07 	mov	r11,263
80000df4:	99 ab       	st.w	r12[0x28],r11
80000df6:	30 4b       	mov	r11,4
80000df8:	99 0b       	st.w	r12[0x0],r11
80000dfa:	e0 6a 00 80 	mov	r10,128

80000dfe <xw8>:
80000dfe:	79 5b       	ld.w	r11,r12[0x54]
80000e00:	14 7b       	tst	r11,r10
80000e02:	cf e0       	breq	80000dfe <xw8>
80000e04:	30 5b       	mov	r11,5
80000e06:	99 0b       	st.w	r12[0x0],r11

80000e08 <idata_>:
80000e08:	48 d0       	lddpc	r0,80000e3c <udata_end+0x10>
80000e0a:	48 e1       	lddpc	r1,80000e40 <udata_end+0x14>
80000e0c:	02 30       	cp.w	r0,r1
80000e0e:	c0 62       	brcc	80000e1a <idata_end>
80000e10:	48 d2       	lddpc	r2,80000e44 <udata_end+0x18>

80000e12 <idata_loop>:
80000e12:	05 04       	ld.w	r4,r2++
80000e14:	00 a4       	st.w	r0++,r4
80000e16:	02 30       	cp.w	r0,r1
80000e18:	cf d3       	brcs	80000e12 <idata_loop>

80000e1a <idata_end>:
80000e1a:	48 c0       	lddpc	r0,80000e48 <udata_end+0x1c>
80000e1c:	48 c1       	lddpc	r1,80000e4c <udata_end+0x20>
80000e1e:	02 30       	cp.w	r0,r1
80000e20:	c0 62       	brcc	80000e2c <udata_end>
80000e22:	30 02       	mov	r2,0
80000e24:	30 03       	mov	r3,0

80000e26 <udata_loop>:
80000e26:	00 a2       	st.w	r0++,r2
80000e28:	02 30       	cp.w	r0,r1
80000e2a:	cf e3       	brcs	80000e26 <udata_loop>

80000e2c <udata_end>:
80000e2c:	48 9f       	lddpc	pc,80000e50 <udata_end+0x24>
80000e2e:	00 00       	add	r0,r0
80000e30:	00 01       	add	r1,r0
80000e32:	00 00       	add	r0,r0
80000e34:	00 00       	add	r0,r0
80000e36:	f0 00       	*unknown*
80000e38:	80 00       	ld.sh	r0,r0[0x0]
80000e3a:	18 00       	add	r0,r12
80000e3c:	00 00       	add	r0,r0
80000e3e:	00 08       	add	r8,r0
80000e40:	00 00       	add	r0,r0
80000e42:	05 18       	ld.sh	r8,r2++
80000e44:	80 00       	ld.sh	r0,r0[0x0]
80000e46:	1c 88       	andn	r8,lr
80000e48:	00 00       	add	r0,r0
80000e4a:	05 18       	ld.sh	r8,r2++
80000e4c:	00 00       	add	r0,r0
80000e4e:	05 b0       	ld.ub	r0,r2[0x3]
80000e50:	80 00       	ld.sh	r0,r0[0x0]
80000e52:	01 f8       	ld.ub	r8,r0[0x7]

80000e54 <calloc>:
80000e54:	d4 01       	pushm	lr
80000e56:	48 48       	lddpc	r8,80000e64 <calloc+0x10>
80000e58:	16 9a       	mov	r10,r11
80000e5a:	18 9b       	mov	r11,r12
80000e5c:	70 0c       	ld.w	r12,r8[0x0]
80000e5e:	f0 1f 00 03 	mcall	80000e68 <calloc+0x14>
80000e62:	d8 02       	popm	pc
80000e64:	00 00       	add	r0,r0
80000e66:	01 00       	ld.w	r0,r0++
80000e68:	80 00       	ld.sh	r0,r0[0x0]
80000e6a:	0e 6c       	and	r12,r7

80000e6c <_calloc_r>:
80000e6c:	d4 21       	pushm	r4-r7,lr
80000e6e:	f4 0b 02 4b 	mul	r11,r10,r11
80000e72:	f0 1f 00 15 	mcall	80000ec4 <_calloc_r+0x58>
80000e76:	18 97       	mov	r7,r12
80000e78:	c2 30       	breq	80000ebe <_calloc_r+0x52>
80000e7a:	f8 fa ff fc 	ld.w	r10,r12[-4]
80000e7e:	e0 1a ff fc 	andl	r10,0xfffc
80000e82:	20 4a       	sub	r10,4
80000e84:	e0 4a 00 24 	cp.w	r10,36
80000e88:	e0 8b 00 18 	brhi	80000eb8 <_calloc_r+0x4c>
80000e8c:	18 98       	mov	r8,r12
80000e8e:	59 3a       	cp.w	r10,19
80000e90:	e0 88 00 0f 	brls	80000eae <_calloc_r+0x42>
80000e94:	30 09       	mov	r9,0
80000e96:	10 a9       	st.w	r8++,r9
80000e98:	10 a9       	st.w	r8++,r9
80000e9a:	59 ba       	cp.w	r10,27
80000e9c:	e0 88 00 09 	brls	80000eae <_calloc_r+0x42>
80000ea0:	10 a9       	st.w	r8++,r9
80000ea2:	10 a9       	st.w	r8++,r9
80000ea4:	e0 4a 00 24 	cp.w	r10,36
80000ea8:	c0 31       	brne	80000eae <_calloc_r+0x42>
80000eaa:	10 a9       	st.w	r8++,r9
80000eac:	10 a9       	st.w	r8++,r9
80000eae:	30 09       	mov	r9,0
80000eb0:	10 a9       	st.w	r8++,r9
80000eb2:	91 19       	st.w	r8[0x4],r9
80000eb4:	91 09       	st.w	r8[0x0],r9
80000eb6:	c0 48       	rjmp	80000ebe <_calloc_r+0x52>
80000eb8:	30 0b       	mov	r11,0
80000eba:	f0 1f 00 04 	mcall	80000ec8 <_calloc_r+0x5c>
80000ebe:	0e 9c       	mov	r12,r7
80000ec0:	d8 22       	popm	r4-r7,pc
80000ec2:	00 00       	add	r0,r0
80000ec4:	80 00       	ld.sh	r0,r0[0x0]
80000ec6:	0e e4       	st.h	--r7,r4
80000ec8:	80 00       	ld.sh	r0,r0[0x0]
80000eca:	13 34       	ld.ub	r4,r9++

80000ecc <malloc>:
80000ecc:	d4 01       	pushm	lr
80000ece:	48 48       	lddpc	r8,80000edc <malloc+0x10>
80000ed0:	18 9b       	mov	r11,r12
80000ed2:	70 0c       	ld.w	r12,r8[0x0]
80000ed4:	f0 1f 00 03 	mcall	80000ee0 <malloc+0x14>
80000ed8:	d8 02       	popm	pc
80000eda:	00 00       	add	r0,r0
80000edc:	00 00       	add	r0,r0
80000ede:	01 00       	ld.w	r0,r0++
80000ee0:	80 00       	ld.sh	r0,r0[0x0]
80000ee2:	0e e4       	st.h	--r7,r4

80000ee4 <_malloc_r>:
80000ee4:	d4 31       	pushm	r0-r7,lr
80000ee6:	f6 c8 ff f5 	sub	r8,r11,-11
80000eea:	18 95       	mov	r5,r12
80000eec:	10 97       	mov	r7,r8
80000eee:	e0 17 ff f8 	andl	r7,0xfff8
80000ef2:	59 68       	cp.w	r8,22
80000ef4:	f9 b7 08 10 	movls	r7,16
80000ef8:	16 37       	cp.w	r7,r11
80000efa:	5f 38       	srlo	r8
80000efc:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80000f00:	c0 50       	breq	80000f0a <_malloc_r+0x26>
80000f02:	30 c8       	mov	r8,12
80000f04:	99 38       	st.w	r12[0xc],r8
80000f06:	e0 8f 01 f3 	bral	800012ec <_malloc_r+0x408>
80000f0a:	f0 1f 00 50 	mcall	80001048 <_malloc_r+0x164>
80000f0e:	e0 47 01 f7 	cp.w	r7,503
80000f12:	e0 8b 00 1c 	brhi	80000f4a <_malloc_r+0x66>
80000f16:	ee 03 16 03 	lsr	r3,r7,0x3
80000f1a:	4c d8       	lddpc	r8,8000104c <_malloc_r+0x168>
80000f1c:	f0 03 00 38 	add	r8,r8,r3<<0x3
80000f20:	70 36       	ld.w	r6,r8[0xc]
80000f22:	10 36       	cp.w	r6,r8
80000f24:	c0 61       	brne	80000f30 <_malloc_r+0x4c>
80000f26:	ec c8 ff f8 	sub	r8,r6,-8
80000f2a:	70 36       	ld.w	r6,r8[0xc]
80000f2c:	10 36       	cp.w	r6,r8
80000f2e:	c0 c0       	breq	80000f46 <_malloc_r+0x62>
80000f30:	6c 18       	ld.w	r8,r6[0x4]
80000f32:	e0 18 ff fc 	andl	r8,0xfffc
80000f36:	6c 3a       	ld.w	r10,r6[0xc]
80000f38:	ec 08 00 09 	add	r9,r6,r8
80000f3c:	0a 9c       	mov	r12,r5
80000f3e:	6c 28       	ld.w	r8,r6[0x8]
80000f40:	95 28       	st.w	r10[0x8],r8
80000f42:	91 3a       	st.w	r8[0xc],r10
80000f44:	c4 68       	rjmp	80000fd0 <_malloc_r+0xec>
80000f46:	2f e3       	sub	r3,-2
80000f48:	c4 c8       	rjmp	80000fe0 <_malloc_r+0xfc>
80000f4a:	ee 03 16 09 	lsr	r3,r7,0x9
80000f4e:	c0 41       	brne	80000f56 <_malloc_r+0x72>
80000f50:	ee 03 16 03 	lsr	r3,r7,0x3
80000f54:	c2 68       	rjmp	80000fa0 <_malloc_r+0xbc>
80000f56:	58 43       	cp.w	r3,4
80000f58:	e0 8b 00 06 	brhi	80000f64 <_malloc_r+0x80>
80000f5c:	ee 03 16 06 	lsr	r3,r7,0x6
80000f60:	2c 83       	sub	r3,-56
80000f62:	c1 f8       	rjmp	80000fa0 <_malloc_r+0xbc>
80000f64:	59 43       	cp.w	r3,20
80000f66:	e0 8b 00 04 	brhi	80000f6e <_malloc_r+0x8a>
80000f6a:	2a 53       	sub	r3,-91
80000f6c:	c1 a8       	rjmp	80000fa0 <_malloc_r+0xbc>
80000f6e:	e0 43 00 54 	cp.w	r3,84
80000f72:	e0 8b 00 06 	brhi	80000f7e <_malloc_r+0x9a>
80000f76:	ee 03 16 0c 	lsr	r3,r7,0xc
80000f7a:	29 23       	sub	r3,-110
80000f7c:	c1 28       	rjmp	80000fa0 <_malloc_r+0xbc>
80000f7e:	e0 43 01 54 	cp.w	r3,340
80000f82:	e0 8b 00 06 	brhi	80000f8e <_malloc_r+0xaa>
80000f86:	ee 03 16 0f 	lsr	r3,r7,0xf
80000f8a:	28 93       	sub	r3,-119
80000f8c:	c0 a8       	rjmp	80000fa0 <_malloc_r+0xbc>
80000f8e:	e0 43 05 54 	cp.w	r3,1364
80000f92:	e0 88 00 04 	brls	80000f9a <_malloc_r+0xb6>
80000f96:	37 e3       	mov	r3,126
80000f98:	c0 48       	rjmp	80000fa0 <_malloc_r+0xbc>
80000f9a:	ee 03 16 12 	lsr	r3,r7,0x12
80000f9e:	28 43       	sub	r3,-124
80000fa0:	4a ba       	lddpc	r10,8000104c <_malloc_r+0x168>
80000fa2:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80000fa6:	74 36       	ld.w	r6,r10[0xc]
80000fa8:	c1 98       	rjmp	80000fda <_malloc_r+0xf6>
80000faa:	6c 19       	ld.w	r9,r6[0x4]
80000fac:	e0 19 ff fc 	andl	r9,0xfffc
80000fb0:	f2 07 01 0b 	sub	r11,r9,r7
80000fb4:	58 fb       	cp.w	r11,15
80000fb6:	e0 8a 00 04 	brle	80000fbe <_malloc_r+0xda>
80000fba:	20 13       	sub	r3,1
80000fbc:	c1 18       	rjmp	80000fde <_malloc_r+0xfa>
80000fbe:	6c 38       	ld.w	r8,r6[0xc]
80000fc0:	58 0b       	cp.w	r11,0
80000fc2:	c0 b5       	brlt	80000fd8 <_malloc_r+0xf4>
80000fc4:	6c 2a       	ld.w	r10,r6[0x8]
80000fc6:	ec 09 00 09 	add	r9,r6,r9
80000fca:	0a 9c       	mov	r12,r5
80000fcc:	91 2a       	st.w	r8[0x8],r10
80000fce:	95 38       	st.w	r10[0xc],r8
80000fd0:	72 18       	ld.w	r8,r9[0x4]
80000fd2:	a1 a8       	sbr	r8,0x0
80000fd4:	93 18       	st.w	r9[0x4],r8
80000fd6:	cb c8       	rjmp	8000114e <_malloc_r+0x26a>
80000fd8:	10 96       	mov	r6,r8
80000fda:	14 36       	cp.w	r6,r10
80000fdc:	ce 71       	brne	80000faa <_malloc_r+0xc6>
80000fde:	2f f3       	sub	r3,-1
80000fe0:	49 ba       	lddpc	r10,8000104c <_malloc_r+0x168>
80000fe2:	f4 cc ff f8 	sub	r12,r10,-8
80000fe6:	78 26       	ld.w	r6,r12[0x8]
80000fe8:	18 36       	cp.w	r6,r12
80000fea:	c6 e0       	breq	800010c6 <_malloc_r+0x1e2>
80000fec:	6c 19       	ld.w	r9,r6[0x4]
80000fee:	e0 19 ff fc 	andl	r9,0xfffc
80000ff2:	f2 07 01 08 	sub	r8,r9,r7
80000ff6:	58 f8       	cp.w	r8,15
80000ff8:	e0 89 00 90 	brgt	80001118 <_malloc_r+0x234>
80000ffc:	99 3c       	st.w	r12[0xc],r12
80000ffe:	99 2c       	st.w	r12[0x8],r12
80001000:	58 08       	cp.w	r8,0
80001002:	c0 55       	brlt	8000100c <_malloc_r+0x128>
80001004:	ec 09 00 09 	add	r9,r6,r9
80001008:	0a 9c       	mov	r12,r5
8000100a:	ce 3b       	rjmp	80000fd0 <_malloc_r+0xec>
8000100c:	e0 49 01 ff 	cp.w	r9,511
80001010:	e0 8b 00 13 	brhi	80001036 <_malloc_r+0x152>
80001014:	a3 99       	lsr	r9,0x3
80001016:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000101a:	70 2b       	ld.w	r11,r8[0x8]
8000101c:	8d 38       	st.w	r6[0xc],r8
8000101e:	8d 2b       	st.w	r6[0x8],r11
80001020:	97 36       	st.w	r11[0xc],r6
80001022:	91 26       	st.w	r8[0x8],r6
80001024:	a3 49       	asr	r9,0x2
80001026:	74 18       	ld.w	r8,r10[0x4]
80001028:	30 1b       	mov	r11,1
8000102a:	f6 09 09 49 	lsl	r9,r11,r9
8000102e:	f1 e9 10 09 	or	r9,r8,r9
80001032:	95 19       	st.w	r10[0x4],r9
80001034:	c4 98       	rjmp	800010c6 <_malloc_r+0x1e2>
80001036:	f2 0a 16 09 	lsr	r10,r9,0x9
8000103a:	58 4a       	cp.w	r10,4
8000103c:	e0 8b 00 0a 	brhi	80001050 <_malloc_r+0x16c>
80001040:	f2 0a 16 06 	lsr	r10,r9,0x6
80001044:	2c 8a       	sub	r10,-56
80001046:	c2 38       	rjmp	8000108c <_malloc_r+0x1a8>
80001048:	80 00       	ld.sh	r0,r0[0x0]
8000104a:	13 42       	ld.w	r2,--r9
8000104c:	00 00       	add	r0,r0
8000104e:	01 04       	ld.w	r4,r0++
80001050:	59 4a       	cp.w	r10,20
80001052:	e0 8b 00 04 	brhi	8000105a <_malloc_r+0x176>
80001056:	2a 5a       	sub	r10,-91
80001058:	c1 a8       	rjmp	8000108c <_malloc_r+0x1a8>
8000105a:	e0 4a 00 54 	cp.w	r10,84
8000105e:	e0 8b 00 06 	brhi	8000106a <_malloc_r+0x186>
80001062:	f2 0a 16 0c 	lsr	r10,r9,0xc
80001066:	29 2a       	sub	r10,-110
80001068:	c1 28       	rjmp	8000108c <_malloc_r+0x1a8>
8000106a:	e0 4a 01 54 	cp.w	r10,340
8000106e:	e0 8b 00 06 	brhi	8000107a <_malloc_r+0x196>
80001072:	f2 0a 16 0f 	lsr	r10,r9,0xf
80001076:	28 9a       	sub	r10,-119
80001078:	c0 a8       	rjmp	8000108c <_malloc_r+0x1a8>
8000107a:	e0 4a 05 54 	cp.w	r10,1364
8000107e:	e0 88 00 04 	brls	80001086 <_malloc_r+0x1a2>
80001082:	37 ea       	mov	r10,126
80001084:	c0 48       	rjmp	8000108c <_malloc_r+0x1a8>
80001086:	f2 0a 16 12 	lsr	r10,r9,0x12
8000108a:	28 4a       	sub	r10,-124
8000108c:	4c 8b       	lddpc	r11,800011ac <_malloc_r+0x2c8>
8000108e:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80001092:	68 28       	ld.w	r8,r4[0x8]
80001094:	08 38       	cp.w	r8,r4
80001096:	c0 e1       	brne	800010b2 <_malloc_r+0x1ce>
80001098:	76 19       	ld.w	r9,r11[0x4]
8000109a:	a3 4a       	asr	r10,0x2
8000109c:	30 1e       	mov	lr,1
8000109e:	fc 0a 09 4a 	lsl	r10,lr,r10
800010a2:	f3 ea 10 0a 	or	r10,r9,r10
800010a6:	10 99       	mov	r9,r8
800010a8:	97 1a       	st.w	r11[0x4],r10
800010aa:	c0 a8       	rjmp	800010be <_malloc_r+0x1da>
800010ac:	70 28       	ld.w	r8,r8[0x8]
800010ae:	08 38       	cp.w	r8,r4
800010b0:	c0 60       	breq	800010bc <_malloc_r+0x1d8>
800010b2:	70 1a       	ld.w	r10,r8[0x4]
800010b4:	e0 1a ff fc 	andl	r10,0xfffc
800010b8:	14 39       	cp.w	r9,r10
800010ba:	cf 93       	brcs	800010ac <_malloc_r+0x1c8>
800010bc:	70 39       	ld.w	r9,r8[0xc]
800010be:	8d 39       	st.w	r6[0xc],r9
800010c0:	8d 28       	st.w	r6[0x8],r8
800010c2:	91 36       	st.w	r8[0xc],r6
800010c4:	93 26       	st.w	r9[0x8],r6
800010c6:	e6 08 14 02 	asr	r8,r3,0x2
800010ca:	30 1b       	mov	r11,1
800010cc:	4b 84       	lddpc	r4,800011ac <_malloc_r+0x2c8>
800010ce:	f6 08 09 4b 	lsl	r11,r11,r8
800010d2:	68 18       	ld.w	r8,r4[0x4]
800010d4:	10 3b       	cp.w	r11,r8
800010d6:	e0 8b 00 6f 	brhi	800011b4 <_malloc_r+0x2d0>
800010da:	f7 e8 00 09 	and	r9,r11,r8
800010de:	c0 b1       	brne	800010f4 <_malloc_r+0x210>
800010e0:	e0 13 ff fc 	andl	r3,0xfffc
800010e4:	a1 7b       	lsl	r11,0x1
800010e6:	2f c3       	sub	r3,-4
800010e8:	c0 38       	rjmp	800010ee <_malloc_r+0x20a>
800010ea:	2f c3       	sub	r3,-4
800010ec:	a1 7b       	lsl	r11,0x1
800010ee:	f7 e8 00 09 	and	r9,r11,r8
800010f2:	cf c0       	breq	800010ea <_malloc_r+0x206>
800010f4:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800010f8:	06 92       	mov	r2,r3
800010fa:	1c 91       	mov	r1,lr
800010fc:	62 36       	ld.w	r6,r1[0xc]
800010fe:	c2 e8       	rjmp	8000115a <_malloc_r+0x276>
80001100:	6c 1a       	ld.w	r10,r6[0x4]
80001102:	e0 1a ff fc 	andl	r10,0xfffc
80001106:	f4 07 01 08 	sub	r8,r10,r7
8000110a:	58 f8       	cp.w	r8,15
8000110c:	e0 8a 00 15 	brle	80001136 <_malloc_r+0x252>
80001110:	6c 3a       	ld.w	r10,r6[0xc]
80001112:	6c 29       	ld.w	r9,r6[0x8]
80001114:	95 29       	st.w	r10[0x8],r9
80001116:	93 3a       	st.w	r9[0xc],r10
80001118:	0e 99       	mov	r9,r7
8000111a:	ec 07 00 07 	add	r7,r6,r7
8000111e:	a1 a9       	sbr	r9,0x0
80001120:	99 37       	st.w	r12[0xc],r7
80001122:	99 27       	st.w	r12[0x8],r7
80001124:	8d 19       	st.w	r6[0x4],r9
80001126:	ee 08 09 08 	st.w	r7[r8],r8
8000112a:	8f 2c       	st.w	r7[0x8],r12
8000112c:	8f 3c       	st.w	r7[0xc],r12
8000112e:	a1 a8       	sbr	r8,0x0
80001130:	0a 9c       	mov	r12,r5
80001132:	8f 18       	st.w	r7[0x4],r8
80001134:	c0 d8       	rjmp	8000114e <_malloc_r+0x26a>
80001136:	6c 39       	ld.w	r9,r6[0xc]
80001138:	58 08       	cp.w	r8,0
8000113a:	c0 f5       	brlt	80001158 <_malloc_r+0x274>
8000113c:	ec 0a 00 0a 	add	r10,r6,r10
80001140:	74 18       	ld.w	r8,r10[0x4]
80001142:	a1 a8       	sbr	r8,0x0
80001144:	0a 9c       	mov	r12,r5
80001146:	95 18       	st.w	r10[0x4],r8
80001148:	6c 28       	ld.w	r8,r6[0x8]
8000114a:	93 28       	st.w	r9[0x8],r8
8000114c:	91 39       	st.w	r8[0xc],r9
8000114e:	f0 1f 00 19 	mcall	800011b0 <_malloc_r+0x2cc>
80001152:	ec cc ff f8 	sub	r12,r6,-8
80001156:	d8 32       	popm	r0-r7,pc
80001158:	12 96       	mov	r6,r9
8000115a:	02 36       	cp.w	r6,r1
8000115c:	cd 21       	brne	80001100 <_malloc_r+0x21c>
8000115e:	2f f2       	sub	r2,-1
80001160:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001164:	c0 30       	breq	8000116a <_malloc_r+0x286>
80001166:	2f 81       	sub	r1,-8
80001168:	cc ab       	rjmp	800010fc <_malloc_r+0x218>
8000116a:	1c 98       	mov	r8,lr
8000116c:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001170:	c0 81       	brne	80001180 <_malloc_r+0x29c>
80001172:	68 19       	ld.w	r9,r4[0x4]
80001174:	f6 08 11 ff 	rsub	r8,r11,-1
80001178:	f3 e8 00 08 	and	r8,r9,r8
8000117c:	89 18       	st.w	r4[0x4],r8
8000117e:	c0 78       	rjmp	8000118c <_malloc_r+0x2a8>
80001180:	f0 c9 00 08 	sub	r9,r8,8
80001184:	20 13       	sub	r3,1
80001186:	70 08       	ld.w	r8,r8[0x0]
80001188:	12 38       	cp.w	r8,r9
8000118a:	cf 10       	breq	8000116c <_malloc_r+0x288>
8000118c:	a1 7b       	lsl	r11,0x1
8000118e:	68 18       	ld.w	r8,r4[0x4]
80001190:	10 3b       	cp.w	r11,r8
80001192:	e0 8b 00 11 	brhi	800011b4 <_malloc_r+0x2d0>
80001196:	58 0b       	cp.w	r11,0
80001198:	c0 e0       	breq	800011b4 <_malloc_r+0x2d0>
8000119a:	04 93       	mov	r3,r2
8000119c:	c0 38       	rjmp	800011a2 <_malloc_r+0x2be>
8000119e:	2f c3       	sub	r3,-4
800011a0:	a1 7b       	lsl	r11,0x1
800011a2:	f7 e8 00 09 	and	r9,r11,r8
800011a6:	ca 71       	brne	800010f4 <_malloc_r+0x210>
800011a8:	cf bb       	rjmp	8000119e <_malloc_r+0x2ba>
800011aa:	00 00       	add	r0,r0
800011ac:	00 00       	add	r0,r0
800011ae:	01 04       	ld.w	r4,r0++
800011b0:	80 00       	ld.sh	r0,r0[0x0]
800011b2:	13 44       	ld.w	r4,--r9
800011b4:	68 23       	ld.w	r3,r4[0x8]
800011b6:	66 12       	ld.w	r2,r3[0x4]
800011b8:	e0 12 ff fc 	andl	r2,0xfffc
800011bc:	0e 32       	cp.w	r2,r7
800011be:	5f 39       	srlo	r9
800011c0:	e4 07 01 08 	sub	r8,r2,r7
800011c4:	58 f8       	cp.w	r8,15
800011c6:	5f aa       	srle	r10
800011c8:	f5 e9 10 09 	or	r9,r10,r9
800011cc:	e0 80 00 a2 	breq	80001310 <_malloc_r+0x42c>
800011d0:	4c 88       	lddpc	r8,800012f0 <_malloc_r+0x40c>
800011d2:	70 01       	ld.w	r1,r8[0x0]
800011d4:	4c 88       	lddpc	r8,800012f4 <_malloc_r+0x410>
800011d6:	2f 01       	sub	r1,-16
800011d8:	70 08       	ld.w	r8,r8[0x0]
800011da:	0e 01       	add	r1,r7
800011dc:	5b f8       	cp.w	r8,-1
800011de:	c0 40       	breq	800011e6 <_malloc_r+0x302>
800011e0:	28 11       	sub	r1,-127
800011e2:	e0 11 ff 80 	andl	r1,0xff80
800011e6:	02 9b       	mov	r11,r1
800011e8:	0a 9c       	mov	r12,r5
800011ea:	f0 1f 00 44 	mcall	800012f8 <_malloc_r+0x414>
800011ee:	18 96       	mov	r6,r12
800011f0:	5b fc       	cp.w	r12,-1
800011f2:	c6 e0       	breq	800012ce <_malloc_r+0x3ea>
800011f4:	e6 02 00 08 	add	r8,r3,r2
800011f8:	10 3c       	cp.w	r12,r8
800011fa:	c0 32       	brcc	80001200 <_malloc_r+0x31c>
800011fc:	08 33       	cp.w	r3,r4
800011fe:	c6 81       	brne	800012ce <_malloc_r+0x3ea>
80001200:	4b fa       	lddpc	r10,800012fc <_malloc_r+0x418>
80001202:	74 09       	ld.w	r9,r10[0x0]
80001204:	e2 09 00 09 	add	r9,r1,r9
80001208:	95 09       	st.w	r10[0x0],r9
8000120a:	10 36       	cp.w	r6,r8
8000120c:	c0 a1       	brne	80001220 <_malloc_r+0x33c>
8000120e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80001212:	c0 71       	brne	80001220 <_malloc_r+0x33c>
80001214:	e2 02 00 02 	add	r2,r1,r2
80001218:	68 28       	ld.w	r8,r4[0x8]
8000121a:	a1 a2       	sbr	r2,0x0
8000121c:	91 12       	st.w	r8[0x4],r2
8000121e:	c4 c8       	rjmp	800012b6 <_malloc_r+0x3d2>
80001220:	4b 5a       	lddpc	r10,800012f4 <_malloc_r+0x410>
80001222:	74 0b       	ld.w	r11,r10[0x0]
80001224:	5b fb       	cp.w	r11,-1
80001226:	c0 31       	brne	8000122c <_malloc_r+0x348>
80001228:	95 06       	st.w	r10[0x0],r6
8000122a:	c0 68       	rjmp	80001236 <_malloc_r+0x352>
8000122c:	ec 09 00 09 	add	r9,r6,r9
80001230:	4b 3a       	lddpc	r10,800012fc <_malloc_r+0x418>
80001232:	10 19       	sub	r9,r8
80001234:	95 09       	st.w	r10[0x0],r9
80001236:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000123a:	f0 09 11 08 	rsub	r9,r8,8
8000123e:	58 08       	cp.w	r8,0
80001240:	f2 08 17 10 	movne	r8,r9
80001244:	ed d8 e1 06 	addne	r6,r6,r8
80001248:	28 08       	sub	r8,-128
8000124a:	ec 01 00 01 	add	r1,r6,r1
8000124e:	0a 9c       	mov	r12,r5
80001250:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80001254:	f0 01 01 01 	sub	r1,r8,r1
80001258:	02 9b       	mov	r11,r1
8000125a:	f0 1f 00 28 	mcall	800012f8 <_malloc_r+0x414>
8000125e:	4a 88       	lddpc	r8,800012fc <_malloc_r+0x418>
80001260:	5b fc       	cp.w	r12,-1
80001262:	ec 0c 17 00 	moveq	r12,r6
80001266:	f9 b1 00 00 	moveq	r1,0
8000126a:	70 09       	ld.w	r9,r8[0x0]
8000126c:	0c 1c       	sub	r12,r6
8000126e:	89 26       	st.w	r4[0x8],r6
80001270:	02 0c       	add	r12,r1
80001272:	12 01       	add	r1,r9
80001274:	a1 ac       	sbr	r12,0x0
80001276:	91 01       	st.w	r8[0x0],r1
80001278:	8d 1c       	st.w	r6[0x4],r12
8000127a:	08 33       	cp.w	r3,r4
8000127c:	c1 d0       	breq	800012b6 <_malloc_r+0x3d2>
8000127e:	58 f2       	cp.w	r2,15
80001280:	e0 8b 00 05 	brhi	8000128a <_malloc_r+0x3a6>
80001284:	30 18       	mov	r8,1
80001286:	8d 18       	st.w	r6[0x4],r8
80001288:	c2 38       	rjmp	800012ce <_malloc_r+0x3ea>
8000128a:	30 59       	mov	r9,5
8000128c:	20 c2       	sub	r2,12
8000128e:	e0 12 ff f8 	andl	r2,0xfff8
80001292:	e6 02 00 08 	add	r8,r3,r2
80001296:	91 29       	st.w	r8[0x8],r9
80001298:	91 19       	st.w	r8[0x4],r9
8000129a:	66 18       	ld.w	r8,r3[0x4]
8000129c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800012a0:	e5 e8 10 08 	or	r8,r2,r8
800012a4:	87 18       	st.w	r3[0x4],r8
800012a6:	58 f2       	cp.w	r2,15
800012a8:	e0 88 00 07 	brls	800012b6 <_malloc_r+0x3d2>
800012ac:	e6 cb ff f8 	sub	r11,r3,-8
800012b0:	0a 9c       	mov	r12,r5
800012b2:	f0 1f 00 14 	mcall	80001300 <_malloc_r+0x41c>
800012b6:	49 49       	lddpc	r9,80001304 <_malloc_r+0x420>
800012b8:	72 0a       	ld.w	r10,r9[0x0]
800012ba:	49 18       	lddpc	r8,800012fc <_malloc_r+0x418>
800012bc:	70 08       	ld.w	r8,r8[0x0]
800012be:	14 38       	cp.w	r8,r10
800012c0:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800012c4:	49 19       	lddpc	r9,80001308 <_malloc_r+0x424>
800012c6:	72 0a       	ld.w	r10,r9[0x0]
800012c8:	14 38       	cp.w	r8,r10
800012ca:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800012ce:	68 28       	ld.w	r8,r4[0x8]
800012d0:	70 18       	ld.w	r8,r8[0x4]
800012d2:	e0 18 ff fc 	andl	r8,0xfffc
800012d6:	0e 38       	cp.w	r8,r7
800012d8:	5f 39       	srlo	r9
800012da:	0e 18       	sub	r8,r7
800012dc:	58 f8       	cp.w	r8,15
800012de:	5f aa       	srle	r10
800012e0:	f5 e9 10 09 	or	r9,r10,r9
800012e4:	c1 60       	breq	80001310 <_malloc_r+0x42c>
800012e6:	0a 9c       	mov	r12,r5
800012e8:	f0 1f 00 09 	mcall	8000130c <_malloc_r+0x428>
800012ec:	d8 3a       	popm	r0-r7,pc,r12=0
800012ee:	00 00       	add	r0,r0
800012f0:	00 00       	add	r0,r0
800012f2:	05 20       	ld.uh	r0,r2++
800012f4:	00 00       	add	r0,r0
800012f6:	05 10       	ld.sh	r0,r2++
800012f8:	80 00       	ld.sh	r0,r0[0x0]
800012fa:	13 48       	ld.w	r8,--r9
800012fc:	00 00       	add	r0,r0
800012fe:	05 24       	ld.uh	r4,r2++
80001300:	80 00       	ld.sh	r0,r0[0x0]
80001302:	14 64       	and	r4,r10
80001304:	00 00       	add	r0,r0
80001306:	05 1c       	ld.sh	r12,r2++
80001308:	00 00       	add	r0,r0
8000130a:	05 18       	ld.sh	r8,r2++
8000130c:	80 00       	ld.sh	r0,r0[0x0]
8000130e:	13 44       	ld.w	r4,--r9
80001310:	68 26       	ld.w	r6,r4[0x8]
80001312:	a1 a8       	sbr	r8,0x0
80001314:	0e 99       	mov	r9,r7
80001316:	a1 a9       	sbr	r9,0x0
80001318:	8d 19       	st.w	r6[0x4],r9
8000131a:	ec 07 00 07 	add	r7,r6,r7
8000131e:	0a 9c       	mov	r12,r5
80001320:	89 27       	st.w	r4[0x8],r7
80001322:	8f 18       	st.w	r7[0x4],r8
80001324:	f0 1f 00 03 	mcall	80001330 <_malloc_r+0x44c>
80001328:	ec cc ff f8 	sub	r12,r6,-8
8000132c:	d8 32       	popm	r0-r7,pc
8000132e:	00 00       	add	r0,r0
80001330:	80 00       	ld.sh	r0,r0[0x0]
80001332:	13 44       	ld.w	r4,--r9

80001334 <memset>:
80001334:	18 98       	mov	r8,r12
80001336:	c0 38       	rjmp	8000133c <memset+0x8>
80001338:	10 cb       	st.b	r8++,r11
8000133a:	20 1a       	sub	r10,1
8000133c:	58 0a       	cp.w	r10,0
8000133e:	cf d1       	brne	80001338 <memset+0x4>
80001340:	5e fc       	retal	r12

80001342 <__malloc_lock>:
80001342:	5e fc       	retal	r12

80001344 <__malloc_unlock>:
80001344:	5e fc       	retal	r12
80001346:	d7 03       	nop

80001348 <_sbrk_r>:
80001348:	d4 21       	pushm	r4-r7,lr
8000134a:	30 08       	mov	r8,0
8000134c:	18 97       	mov	r7,r12
8000134e:	48 76       	lddpc	r6,80001368 <_sbrk_r+0x20>
80001350:	16 9c       	mov	r12,r11
80001352:	8d 08       	st.w	r6[0x0],r8
80001354:	f0 1f 00 06 	mcall	8000136c <_sbrk_r+0x24>
80001358:	5b fc       	cp.w	r12,-1
8000135a:	c0 51       	brne	80001364 <_sbrk_r+0x1c>
8000135c:	6c 08       	ld.w	r8,r6[0x0]
8000135e:	58 08       	cp.w	r8,0
80001360:	ef f8 1a 03 	st.wne	r7[0xc],r8
80001364:	d8 22       	popm	r4-r7,pc
80001366:	00 00       	add	r0,r0
80001368:	00 00       	add	r0,r0
8000136a:	05 a8       	ld.ub	r8,r2[0x2]
8000136c:	80 00       	ld.sh	r0,r0[0x0]
8000136e:	13 70       	ld.ub	r0,--r9

80001370 <_sbrk>:
80001370:	d4 01       	pushm	lr
80001372:	48 c8       	lddpc	r8,800013a0 <_sbrk+0x30>
80001374:	70 09       	ld.w	r9,r8[0x0]
80001376:	58 09       	cp.w	r9,0
80001378:	c0 31       	brne	8000137e <_sbrk+0xe>
8000137a:	48 b9       	lddpc	r9,800013a4 <_sbrk+0x34>
8000137c:	91 09       	st.w	r8[0x0],r9
8000137e:	48 99       	lddpc	r9,800013a0 <_sbrk+0x30>
80001380:	48 aa       	lddpc	r10,800013a8 <_sbrk+0x38>
80001382:	72 08       	ld.w	r8,r9[0x0]
80001384:	f0 0c 00 0c 	add	r12,r8,r12
80001388:	14 3c       	cp.w	r12,r10
8000138a:	e0 8b 00 04 	brhi	80001392 <_sbrk+0x22>
8000138e:	93 0c       	st.w	r9[0x0],r12
80001390:	c0 68       	rjmp	8000139c <_sbrk+0x2c>
80001392:	f0 1f 00 07 	mcall	800013ac <_sbrk+0x3c>
80001396:	30 c8       	mov	r8,12
80001398:	99 08       	st.w	r12[0x0],r8
8000139a:	3f f8       	mov	r8,-1
8000139c:	10 9c       	mov	r12,r8
8000139e:	d8 02       	popm	pc
800013a0:	00 00       	add	r0,r0
800013a2:	05 4c       	ld.w	r12,--r2
800013a4:	00 00       	add	r0,r0
800013a6:	05 b0       	ld.ub	r0,r2[0x3]
800013a8:	00 00       	add	r0,r0
800013aa:	e0 00       	*unknown*
800013ac:	80 00       	ld.sh	r0,r0[0x0]
800013ae:	13 b0       	ld.ub	r0,r9[0x3]

800013b0 <__errno>:
800013b0:	48 28       	lddpc	r8,800013b8 <__errno+0x8>
800013b2:	70 0c       	ld.w	r12,r8[0x0]
800013b4:	2f 4c       	sub	r12,-12
800013b6:	5e fc       	retal	r12
800013b8:	00 00       	add	r0,r0
800013ba:	01 00       	ld.w	r0,r0++

800013bc <_malloc_trim_r>:
800013bc:	d4 21       	pushm	r4-r7,lr
800013be:	16 95       	mov	r5,r11
800013c0:	18 97       	mov	r7,r12
800013c2:	f0 1f 00 23 	mcall	8000144c <_malloc_trim_r+0x90>
800013c6:	4a 34       	lddpc	r4,80001450 <_malloc_trim_r+0x94>
800013c8:	68 28       	ld.w	r8,r4[0x8]
800013ca:	70 16       	ld.w	r6,r8[0x4]
800013cc:	e0 16 ff fc 	andl	r6,0xfffc
800013d0:	ec c8 ff 91 	sub	r8,r6,-111
800013d4:	f0 05 01 05 	sub	r5,r8,r5
800013d8:	e0 15 ff 80 	andl	r5,0xff80
800013dc:	ea c5 00 80 	sub	r5,r5,128
800013e0:	e0 45 00 7f 	cp.w	r5,127
800013e4:	e0 8a 00 23 	brle	8000142a <_malloc_trim_r+0x6e>
800013e8:	30 0b       	mov	r11,0
800013ea:	0e 9c       	mov	r12,r7
800013ec:	f0 1f 00 1a 	mcall	80001454 <_malloc_trim_r+0x98>
800013f0:	68 28       	ld.w	r8,r4[0x8]
800013f2:	0c 08       	add	r8,r6
800013f4:	10 3c       	cp.w	r12,r8
800013f6:	c1 a1       	brne	8000142a <_malloc_trim_r+0x6e>
800013f8:	ea 0b 11 00 	rsub	r11,r5,0
800013fc:	0e 9c       	mov	r12,r7
800013fe:	f0 1f 00 16 	mcall	80001454 <_malloc_trim_r+0x98>
80001402:	5b fc       	cp.w	r12,-1
80001404:	c1 71       	brne	80001432 <_malloc_trim_r+0x76>
80001406:	30 0b       	mov	r11,0
80001408:	0e 9c       	mov	r12,r7
8000140a:	f0 1f 00 13 	mcall	80001454 <_malloc_trim_r+0x98>
8000140e:	68 28       	ld.w	r8,r4[0x8]
80001410:	f8 08 01 09 	sub	r9,r12,r8
80001414:	58 f9       	cp.w	r9,15
80001416:	e0 8a 00 0a 	brle	8000142a <_malloc_trim_r+0x6e>
8000141a:	a1 a9       	sbr	r9,0x0
8000141c:	91 19       	st.w	r8[0x4],r9
8000141e:	48 f8       	lddpc	r8,80001458 <_malloc_trim_r+0x9c>
80001420:	70 09       	ld.w	r9,r8[0x0]
80001422:	48 f8       	lddpc	r8,8000145c <_malloc_trim_r+0xa0>
80001424:	f8 09 01 09 	sub	r9,r12,r9
80001428:	91 09       	st.w	r8[0x0],r9
8000142a:	0e 9c       	mov	r12,r7
8000142c:	f0 1f 00 0d 	mcall	80001460 <_malloc_trim_r+0xa4>
80001430:	d8 2a       	popm	r4-r7,pc,r12=0
80001432:	68 28       	ld.w	r8,r4[0x8]
80001434:	0a 16       	sub	r6,r5
80001436:	a1 a6       	sbr	r6,0x0
80001438:	91 16       	st.w	r8[0x4],r6
8000143a:	48 98       	lddpc	r8,8000145c <_malloc_trim_r+0xa0>
8000143c:	70 09       	ld.w	r9,r8[0x0]
8000143e:	0a 19       	sub	r9,r5
80001440:	0e 9c       	mov	r12,r7
80001442:	91 09       	st.w	r8[0x0],r9
80001444:	f0 1f 00 07 	mcall	80001460 <_malloc_trim_r+0xa4>
80001448:	da 2a       	popm	r4-r7,pc,r12=1
8000144a:	00 00       	add	r0,r0
8000144c:	80 00       	ld.sh	r0,r0[0x0]
8000144e:	13 42       	ld.w	r2,--r9
80001450:	00 00       	add	r0,r0
80001452:	01 04       	ld.w	r4,r0++
80001454:	80 00       	ld.sh	r0,r0[0x0]
80001456:	13 48       	ld.w	r8,--r9
80001458:	00 00       	add	r0,r0
8000145a:	05 10       	ld.sh	r0,r2++
8000145c:	00 00       	add	r0,r0
8000145e:	05 24       	ld.uh	r4,r2++
80001460:	80 00       	ld.sh	r0,r0[0x0]
80001462:	13 44       	ld.w	r4,--r9

80001464 <_free_r>:
80001464:	d4 21       	pushm	r4-r7,lr
80001466:	16 96       	mov	r6,r11
80001468:	18 97       	mov	r7,r12
8000146a:	58 0b       	cp.w	r11,0
8000146c:	e0 80 00 c8 	breq	800015fc <_free_r+0x198>
80001470:	f0 1f 00 4c 	mcall	800015a0 <_free_r+0x13c>
80001474:	20 86       	sub	r6,8
80001476:	4c ca       	lddpc	r10,800015a4 <_free_r+0x140>
80001478:	6c 18       	ld.w	r8,r6[0x4]
8000147a:	74 2e       	ld.w	lr,r10[0x8]
8000147c:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001480:	a1 c8       	cbr	r8,0x0
80001482:	ec 08 00 09 	add	r9,r6,r8
80001486:	72 1b       	ld.w	r11,r9[0x4]
80001488:	e0 1b ff fc 	andl	r11,0xfffc
8000148c:	1c 39       	cp.w	r9,lr
8000148e:	c1 d1       	brne	800014c8 <_free_r+0x64>
80001490:	f6 08 00 08 	add	r8,r11,r8
80001494:	58 0c       	cp.w	r12,0
80001496:	c0 81       	brne	800014a6 <_free_r+0x42>
80001498:	6c 09       	ld.w	r9,r6[0x0]
8000149a:	12 16       	sub	r6,r9
8000149c:	12 08       	add	r8,r9
8000149e:	6c 3b       	ld.w	r11,r6[0xc]
800014a0:	6c 29       	ld.w	r9,r6[0x8]
800014a2:	97 29       	st.w	r11[0x8],r9
800014a4:	93 3b       	st.w	r9[0xc],r11
800014a6:	10 99       	mov	r9,r8
800014a8:	95 26       	st.w	r10[0x8],r6
800014aa:	a1 a9       	sbr	r9,0x0
800014ac:	8d 19       	st.w	r6[0x4],r9
800014ae:	4b f9       	lddpc	r9,800015a8 <_free_r+0x144>
800014b0:	72 09       	ld.w	r9,r9[0x0]
800014b2:	12 38       	cp.w	r8,r9
800014b4:	c0 63       	brcs	800014c0 <_free_r+0x5c>
800014b6:	4b e8       	lddpc	r8,800015ac <_free_r+0x148>
800014b8:	0e 9c       	mov	r12,r7
800014ba:	70 0b       	ld.w	r11,r8[0x0]
800014bc:	f0 1f 00 3d 	mcall	800015b0 <_free_r+0x14c>
800014c0:	0e 9c       	mov	r12,r7
800014c2:	f0 1f 00 3d 	mcall	800015b4 <_free_r+0x150>
800014c6:	d8 22       	popm	r4-r7,pc
800014c8:	93 1b       	st.w	r9[0x4],r11
800014ca:	58 0c       	cp.w	r12,0
800014cc:	c0 30       	breq	800014d2 <_free_r+0x6e>
800014ce:	30 0c       	mov	r12,0
800014d0:	c1 08       	rjmp	800014f0 <_free_r+0x8c>
800014d2:	6c 0e       	ld.w	lr,r6[0x0]
800014d4:	f4 c5 ff f8 	sub	r5,r10,-8
800014d8:	1c 16       	sub	r6,lr
800014da:	1c 08       	add	r8,lr
800014dc:	6c 2e       	ld.w	lr,r6[0x8]
800014de:	0a 3e       	cp.w	lr,r5
800014e0:	f9 bc 00 01 	moveq	r12,1
800014e4:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800014e8:	eb fe 1a 02 	st.wne	r5[0x8],lr
800014ec:	fd f5 1a 03 	st.wne	lr[0xc],r5
800014f0:	f2 0b 00 0e 	add	lr,r9,r11
800014f4:	7c 1e       	ld.w	lr,lr[0x4]
800014f6:	ed be 00 00 	bld	lr,0x0
800014fa:	c1 30       	breq	80001520 <_free_r+0xbc>
800014fc:	16 08       	add	r8,r11
800014fe:	58 0c       	cp.w	r12,0
80001500:	c0 c1       	brne	80001518 <_free_r+0xb4>
80001502:	4a 9e       	lddpc	lr,800015a4 <_free_r+0x140>
80001504:	72 2b       	ld.w	r11,r9[0x8]
80001506:	2f 8e       	sub	lr,-8
80001508:	1c 3b       	cp.w	r11,lr
8000150a:	c0 71       	brne	80001518 <_free_r+0xb4>
8000150c:	97 36       	st.w	r11[0xc],r6
8000150e:	97 26       	st.w	r11[0x8],r6
80001510:	8d 2b       	st.w	r6[0x8],r11
80001512:	8d 3b       	st.w	r6[0xc],r11
80001514:	30 1c       	mov	r12,1
80001516:	c0 58       	rjmp	80001520 <_free_r+0xbc>
80001518:	72 2b       	ld.w	r11,r9[0x8]
8000151a:	72 39       	ld.w	r9,r9[0xc]
8000151c:	93 2b       	st.w	r9[0x8],r11
8000151e:	97 39       	st.w	r11[0xc],r9
80001520:	10 99       	mov	r9,r8
80001522:	ec 08 09 08 	st.w	r6[r8],r8
80001526:	a1 a9       	sbr	r9,0x0
80001528:	8d 19       	st.w	r6[0x4],r9
8000152a:	58 0c       	cp.w	r12,0
8000152c:	c6 51       	brne	800015f6 <_free_r+0x192>
8000152e:	e0 48 01 ff 	cp.w	r8,511
80001532:	e0 8b 00 13 	brhi	80001558 <_free_r+0xf4>
80001536:	a3 98       	lsr	r8,0x3
80001538:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000153c:	72 2b       	ld.w	r11,r9[0x8]
8000153e:	8d 39       	st.w	r6[0xc],r9
80001540:	8d 2b       	st.w	r6[0x8],r11
80001542:	97 36       	st.w	r11[0xc],r6
80001544:	93 26       	st.w	r9[0x8],r6
80001546:	a3 48       	asr	r8,0x2
80001548:	74 19       	ld.w	r9,r10[0x4]
8000154a:	30 1b       	mov	r11,1
8000154c:	f6 08 09 48 	lsl	r8,r11,r8
80001550:	f3 e8 10 08 	or	r8,r9,r8
80001554:	95 18       	st.w	r10[0x4],r8
80001556:	c5 08       	rjmp	800015f6 <_free_r+0x192>
80001558:	f0 0b 16 09 	lsr	r11,r8,0x9
8000155c:	58 4b       	cp.w	r11,4
8000155e:	e0 8b 00 06 	brhi	8000156a <_free_r+0x106>
80001562:	f0 0b 16 06 	lsr	r11,r8,0x6
80001566:	2c 8b       	sub	r11,-56
80001568:	c2 b8       	rjmp	800015be <_free_r+0x15a>
8000156a:	59 4b       	cp.w	r11,20
8000156c:	e0 8b 00 04 	brhi	80001574 <_free_r+0x110>
80001570:	2a 5b       	sub	r11,-91
80001572:	c2 68       	rjmp	800015be <_free_r+0x15a>
80001574:	e0 4b 00 54 	cp.w	r11,84
80001578:	e0 8b 00 06 	brhi	80001584 <_free_r+0x120>
8000157c:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001580:	29 2b       	sub	r11,-110
80001582:	c1 e8       	rjmp	800015be <_free_r+0x15a>
80001584:	e0 4b 01 54 	cp.w	r11,340
80001588:	e0 8b 00 06 	brhi	80001594 <_free_r+0x130>
8000158c:	f0 0b 16 0f 	lsr	r11,r8,0xf
80001590:	28 9b       	sub	r11,-119
80001592:	c1 68       	rjmp	800015be <_free_r+0x15a>
80001594:	e0 4b 05 54 	cp.w	r11,1364
80001598:	e0 88 00 10 	brls	800015b8 <_free_r+0x154>
8000159c:	37 eb       	mov	r11,126
8000159e:	c1 08       	rjmp	800015be <_free_r+0x15a>
800015a0:	80 00       	ld.sh	r0,r0[0x0]
800015a2:	13 42       	ld.w	r2,--r9
800015a4:	00 00       	add	r0,r0
800015a6:	01 04       	ld.w	r4,r0++
800015a8:	00 00       	add	r0,r0
800015aa:	05 0c       	ld.w	r12,r2++
800015ac:	00 00       	add	r0,r0
800015ae:	05 20       	ld.uh	r0,r2++
800015b0:	80 00       	ld.sh	r0,r0[0x0]
800015b2:	13 bc       	ld.ub	r12,r9[0x3]
800015b4:	80 00       	ld.sh	r0,r0[0x0]
800015b6:	13 44       	ld.w	r4,--r9
800015b8:	f0 0b 16 12 	lsr	r11,r8,0x12
800015bc:	28 4b       	sub	r11,-124
800015be:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800015c2:	78 29       	ld.w	r9,r12[0x8]
800015c4:	18 39       	cp.w	r9,r12
800015c6:	c0 e1       	brne	800015e2 <_free_r+0x17e>
800015c8:	74 18       	ld.w	r8,r10[0x4]
800015ca:	a3 4b       	asr	r11,0x2
800015cc:	30 1c       	mov	r12,1
800015ce:	f8 0b 09 4b 	lsl	r11,r12,r11
800015d2:	f1 eb 10 0b 	or	r11,r8,r11
800015d6:	12 98       	mov	r8,r9
800015d8:	95 1b       	st.w	r10[0x4],r11
800015da:	c0 a8       	rjmp	800015ee <_free_r+0x18a>
800015dc:	72 29       	ld.w	r9,r9[0x8]
800015de:	18 39       	cp.w	r9,r12
800015e0:	c0 60       	breq	800015ec <_free_r+0x188>
800015e2:	72 1a       	ld.w	r10,r9[0x4]
800015e4:	e0 1a ff fc 	andl	r10,0xfffc
800015e8:	14 38       	cp.w	r8,r10
800015ea:	cf 93       	brcs	800015dc <_free_r+0x178>
800015ec:	72 38       	ld.w	r8,r9[0xc]
800015ee:	8d 38       	st.w	r6[0xc],r8
800015f0:	8d 29       	st.w	r6[0x8],r9
800015f2:	93 36       	st.w	r9[0xc],r6
800015f4:	91 26       	st.w	r8[0x8],r6
800015f6:	0e 9c       	mov	r12,r7
800015f8:	f0 1f 00 02 	mcall	80001600 <_free_r+0x19c>
800015fc:	d8 22       	popm	r4-r7,pc
800015fe:	00 00       	add	r0,r0
80001600:	80 00       	ld.sh	r0,r0[0x0]
80001602:	13 44       	ld.w	r4,--r9

Disassembly of section .exception:

80001800 <_evba>:
	...

80001828 <_handle_Privilege_Violation>:
80001828:	c7 a8       	rjmp	8000191c <privilegedCalls>
	...

80001900 <_handle_Supervisor_Call>:
80001900:	1c 9f       	mov	pc,lr

80001902 <_int0>:
80001902:	e0 6c 08 00 	mov	r12,2048
80001906:	ea 1c ff ff 	orh	r12,0xffff
8000190a:	f8 fc 01 38 	ld.w	r12,r12[312]
8000190e:	e0 1c 00 01 	andl	r12,0x1
80001912:	58 1c       	cp.w	r12,1
80001914:	c0 31       	brne	8000191a <_int0_exit>
80001916:	4b 9c       	lddpc	r12,800019f8 <contextRestoreFromISR+0x40>
80001918:	18 9f       	mov	pc,r12

8000191a <_int0_exit>:
8000191a:	d6 03       	rete

8000191c <privilegedCalls>:
8000191c:	d3 01       	pushm	r11-r12
8000191e:	7a 3b       	ld.w	r11,sp[0xc]
80001920:	16 9c       	mov	r12,r11
80001922:	2f ec       	sub	r12,-2
80001924:	9b 3c       	st.w	sp[0xc],r12

80001926 <priv_interruptdisable>:
80001926:	4b 6c       	lddpc	r12,800019fc <contextRestoreFromISR+0x44>
80001928:	18 3b       	cp.w	r11,r12
8000192a:	c0 61       	brne	80001936 <priv_interruptenable>
8000192c:	7a 2c       	ld.w	r12,sp[0x8]
8000192e:	b1 ac       	sbr	r12,0x10
80001930:	9b 2c       	st.w	sp[0x8],r12
80001932:	d3 02       	popm	r11-r12
80001934:	d6 03       	rete

80001936 <priv_interruptenable>:
80001936:	4b 3c       	lddpc	r12,80001a00 <contextRestoreFromISR+0x48>
80001938:	18 3b       	cp.w	r11,r12
8000193a:	c0 61       	brne	80001946 <privexception>
8000193c:	7a 2c       	ld.w	r12,sp[0x8]
8000193e:	b1 cc       	cbr	r12,0x10
80001940:	9b 2c       	st.w	sp[0x8],r12
80001942:	d3 02       	popm	r11-r12
80001944:	d6 03       	rete

80001946 <privexception>:
80001946:	c0 08       	rjmp	80001946 <privexception>

80001948 <interruptInit>:
80001948:	d7 01       	pushm	r11-r12,lr
8000194a:	fe cb 00 48 	sub	r11,pc,72
8000194e:	4a ec       	lddpc	r12,80001a04 <contextRestoreFromISR+0x4c>
80001950:	18 1b       	sub	r11,r12
80001952:	30 0c       	mov	r12,0
80001954:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e
80001958:	e0 6c 08 38 	mov	r12,2104
8000195c:	ea 1c ff ff 	orh	r12,0xffff
80001960:	99 0b       	st.w	r12[0x0],r11
80001962:	d7 02       	popm	r11-r12,lr
80001964:	1c 9f       	mov	pc,lr

80001966 <interruptDisable>:
80001966:	d3 03       	ssrf	0x10
80001968:	1c 9f       	mov	pc,lr

8000196a <interruptEnable>:
8000196a:	d5 03       	csrf	0x10
8000196c:	1c 9f       	mov	pc,lr

8000196e <isInterruptEnabled>:
8000196e:	e1 bc 00 00 	mfsr	r12,0x0
80001972:	b1 8c       	lsr	r12,0x10
80001974:	e0 1c 00 01 	andl	r12,0x1
80001978:	ec 1c 00 01 	eorl	r12,0x1
8000197c:	1c 9f       	mov	pc,lr

8000197e <contextSaveFromISR>:
8000197e:	4a 3c       	lddpc	r12,80001a08 <contextRestoreFromISR+0x50>
80001980:	78 0c       	ld.w	r12,r12[0x0]
80001982:	99 60       	st.w	r12[0x18],r0
80001984:	7a 90       	ld.w	r0,sp[0x24]
80001986:	99 c0       	st.w	r12[0x30],r0
80001988:	7a 60       	ld.w	r0,sp[0x18]
8000198a:	99 80       	st.w	r12[0x20],r0
8000198c:	7a d8       	ld.w	r8,sp[0x34]
8000198e:	7a c9       	ld.w	r9,sp[0x30]
80001990:	7a ba       	ld.w	r10,sp[0x2c]
80001992:	7a ab       	ld.w	r11,sp[0x28]
80001994:	33 40       	mov	r0,52
80001996:	18 00       	add	r0,r12
80001998:	ed c0 0f ff 	stmts	r0,r0-r11
8000199c:	7a 50       	ld.w	r0,sp[0x14]
8000199e:	f9 40 00 44 	st.w	r12[68],r0
800019a2:	7a 70       	ld.w	r0,sp[0x1c]
800019a4:	99 90       	st.w	r12[0x24],r0
800019a6:	7a 80       	ld.w	r0,sp[0x20]
800019a8:	99 a0       	st.w	r12[0x28],r0
800019aa:	1a 90       	mov	r0,sp
800019ac:	1a d0       	st.w	--sp,r0
800019ae:	ed cd 20 00 	stmts	sp,sp
800019b2:	1b 00       	ld.w	r0,sp++
800019b4:	99 50       	st.w	r12[0x14],r0
800019b6:	1c 9f       	mov	pc,lr

800019b8 <contextRestoreFromISR>:
800019b8:	49 4c       	lddpc	r12,80001a08 <contextRestoreFromISR+0x50>
800019ba:	78 0c       	ld.w	r12,r12[0x0]
800019bc:	78 50       	ld.w	r0,r12[0x14]
800019be:	1a d0       	st.w	--sp,r0
800019c0:	e5 cd 20 00 	ldmts	sp,sp
800019c4:	1b 00       	ld.w	r0,sp++
800019c6:	78 a0       	ld.w	r0,r12[0x28]
800019c8:	9b 80       	st.w	sp[0x20],r0
800019ca:	78 90       	ld.w	r0,r12[0x24]
800019cc:	9b 70       	st.w	sp[0x1c],r0
800019ce:	33 40       	mov	r0,52
800019d0:	18 00       	add	r0,r12
800019d2:	e5 c0 0f ff 	ldmts	r0,r0-r11
800019d6:	78 80       	ld.w	r0,r12[0x20]
800019d8:	9b 60       	st.w	sp[0x18],r0
800019da:	78 c0       	ld.w	r0,r12[0x30]
800019dc:	9b 90       	st.w	sp[0x24],r0
800019de:	9b ab       	st.w	sp[0x28],r11
800019e0:	9b ba       	st.w	sp[0x2c],r10
800019e2:	9b c9       	st.w	sp[0x30],r9
800019e4:	9b d8       	st.w	sp[0x34],r8
800019e6:	79 10       	ld.w	r0,r12[0x44]
800019e8:	9b 50       	st.w	sp[0x14],r0
800019ea:	78 60       	ld.w	r0,r12[0x18]
800019ec:	d4 01       	pushm	lr
800019ee:	f0 1f 00 08 	mcall	80001a0c <contextRestoreFromISR+0x54>
800019f2:	d4 02       	popm	lr
800019f4:	1c 9f       	mov	pc,lr
800019f6:	00 00       	add	r0,r0
800019f8:	80 00       	ld.sh	r0,r0[0x0]
800019fa:	06 d0       	st.w	--r3,r0
800019fc:	80 00       	ld.sh	r0,r0[0x0]
800019fe:	19 66       	ld.uh	r6,--r12
80001a00:	80 00       	ld.sh	r0,r0[0x0]
80001a02:	19 6a       	ld.uh	r10,--r12
80001a04:	80 00       	ld.sh	r0,r0[0x0]
80001a06:	18 00       	add	r0,r12
80001a08:	00 00       	add	r0,r0
80001a0a:	05 a4       	ld.ub	r4,r2[0x2]
80001a0c:	80 00       	ld.sh	r0,r0[0x0]
80001a0e:	0d 4a       	ld.w	r10,--r6
	...
